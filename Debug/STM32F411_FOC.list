
STM32F411_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9f0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800cb90  0800cb90  0000db90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d018  0800d018  0000f258  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d018  0800d018  0000e018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d020  0800d020  0000f258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d020  0800d020  0000e020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d024  0800d024  0000e024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000258  20000000  0800d028  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000067c  20000258  0800d280  0000f258  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008d4  0800d280  0000f8d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f258  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001630d  00000000  00000000  0000f288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003166  00000000  00000000  00025595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  00028700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f23  00000000  00000000  00029a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a37b  00000000  00000000  0002a97b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000188b3  00000000  00000000  00044cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fc7b  00000000  00000000  0005d5a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fd224  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066f8  00000000  00000000  000fd268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00103960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000258 	.word	0x20000258
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cb78 	.word	0x0800cb78

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000025c 	.word	0x2000025c
 80001dc:	0800cb78 	.word	0x0800cb78

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <micros>:
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

__STATIC_INLINE uint32_t micros(void){
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8001034:	4b07      	ldr	r3, [pc, #28]	@ (8001054 <micros+0x24>)
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <micros+0x28>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4907      	ldr	r1, [pc, #28]	@ (800105c <micros+0x2c>)
 800103e:	fba1 1303 	umull	r1, r3, r1, r3
 8001042:	0c9b      	lsrs	r3, r3, #18
 8001044:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e0001000 	.word	0xe0001000
 8001058:	20000084 	.word	0x20000084
 800105c:	431bde83 	.word	0x431bde83

08001060 <AS5600_ReadRegister>:

/*
 * Static low level functions to read/write to registers
 */
__STATIC_INLINE HAL_StatusTypeDef AS5600_ReadRegister(AS5600 *dev, uint8_t reg, uint8_t *data)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af04      	add	r7, sp, #16
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	460b      	mov	r3, r1
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(dev->i2cHandle, AS5600_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	6818      	ldr	r0, [r3, #0]
 8001072:	7afb      	ldrb	r3, [r7, #11]
 8001074:	b29a      	uxth	r2, r3
 8001076:	2364      	movs	r3, #100	@ 0x64
 8001078:	9302      	str	r3, [sp, #8]
 800107a:	2301      	movs	r3, #1
 800107c:	9301      	str	r3, [sp, #4]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2301      	movs	r3, #1
 8001084:	216c      	movs	r1, #108	@ 0x6c
 8001086:	f003 fb53 	bl	8004730 <HAL_I2C_Mem_Read>
 800108a:	4603      	mov	r3, r0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <AS5600_ReadRegisters>:

__STATIC_INLINE HAL_StatusTypeDef AS5600_ReadRegisters(AS5600 *dev, uint8_t reg, uint8_t *data, uint8_t length)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af04      	add	r7, sp, #16
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	461a      	mov	r2, r3
 80010a0:	460b      	mov	r3, r1
 80010a2:	72fb      	strb	r3, [r7, #11]
 80010a4:	4613      	mov	r3, r2
 80010a6:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(dev->i2cHandle, AS5600_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, data, length, 100);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	7afb      	ldrb	r3, [r7, #11]
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	7abb      	ldrb	r3, [r7, #10]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	2164      	movs	r1, #100	@ 0x64
 80010b6:	9102      	str	r1, [sp, #8]
 80010b8:	9301      	str	r3, [sp, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2301      	movs	r3, #1
 80010c0:	216c      	movs	r1, #108	@ 0x6c
 80010c2:	f003 fb35 	bl	8004730 <HAL_I2C_Mem_Read>
 80010c6:	4603      	mov	r3, r0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <AS5600_ReadRegisters_DMA>:
{
	return HAL_I2C_Mem_Read_DMA(dev->i2cHandle, AS5600_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, data, 1);
}

__STATIC_INLINE HAL_StatusTypeDef AS5600_ReadRegisters_DMA(AS5600 *dev, uint8_t reg, uint8_t *data, uint8_t length)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	461a      	mov	r2, r3
 80010dc:	460b      	mov	r3, r1
 80010de:	72fb      	strb	r3, [r7, #11]
 80010e0:	4613      	mov	r3, r2
 80010e2:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read_DMA(dev->i2cHandle, AS5600_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, data, length);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	7afb      	ldrb	r3, [r7, #11]
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	7abb      	ldrb	r3, [r7, #10]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2301      	movs	r3, #1
 80010f8:	216c      	movs	r1, #108	@ 0x6c
 80010fa:	f003 fd4b 	bl	8004b94 <HAL_I2C_Mem_Read_DMA>
 80010fe:	4603      	mov	r3, r0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <AS5600_CheckSensor>:

__STATIC_INLINE HAL_StatusTypeDef AS5600_CheckSensor(AS5600* dev, uint32_t trials)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
	return HAL_I2C_IsDeviceReady(dev->i2cHandle, AS5600_I2C_ADD, trials, 1000);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6818      	ldr	r0, [r3, #0]
 8001116:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	216c      	movs	r1, #108	@ 0x6c
 800111e:	f003 fec9 	bl	8004eb4 <HAL_I2C_IsDeviceReady>
 8001122:	4603      	mov	r3, r0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <AS5600_ZeroAngle>:
/*
 * @brief Zeroes the sensor value.
 * @param[in] AS5600* sensor
 */
void AS5600_ZeroAngle(AS5600* dev)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	dev->total_angle_rad = 0;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
	dev->prev_raw_angle = AS5600_GetRawAngle_Blocking(dev);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f000 f84d 	bl	80011dc <AS5600_GetRawAngle_Blocking>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	809a      	strh	r2, [r3, #4]
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <AS5600_Init>:
/*
 * Initialization
 * Pass the struct to each function as pointer
 */
uint8_t AS5600_Init(AS5600* dev, I2C_HandleTypeDef* i2c_handle)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b084      	sub	sp, #16
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	6039      	str	r1, [r7, #0]
	uint8_t init_status = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	73fb      	strb	r3, [r7, #15]

	/* Set struct params */
	dev->i2cHandle = i2c_handle;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	601a      	str	r2, [r3, #0]
	dev->total_angle_rad = 0;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
	dev->prev_time_us = micros();
 800116e:	f7ff ff5f 	bl	8001030 <micros>
 8001172:	4602      	mov	r2, r0
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	60da      	str	r2, [r3, #12]
	dev->regdata[0] = 0;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	719a      	strb	r2, [r3, #6]
	dev->regdata[1] = 0;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	71da      	strb	r2, [r3, #7]

	HAL_StatusTypeDef sensor_status = AS5600_CheckSensor(dev, 10);
 8001184:	210a      	movs	r1, #10
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffbe 	bl	8001108 <AS5600_CheckSensor>
 800118c:	4603      	mov	r3, r0
 800118e:	73bb      	strb	r3, [r7, #14]

	if(sensor_status != HAL_OK)
 8001190:	7bbb      	ldrb	r3, [r7, #14]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d007      	beq.n	80011a6 <AS5600_Init+0x54>
	{
		dev->i2cHandle = NULL;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
		return (init_status | AS5600_READY_MSK);
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	e016      	b.n	80011d4 <AS5600_Init+0x82>
	}

	/* Check magnet strength */
	uint8_t magnet_status = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	737b      	strb	r3, [r7, #13]

	AS5600_ReadRegister(dev, MAGNET_STATUS_REG, &magnet_status);
 80011aa:	f107 030d 	add.w	r3, r7, #13
 80011ae:	461a      	mov	r2, r3
 80011b0:	210b      	movs	r1, #11
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ff54 	bl	8001060 <AS5600_ReadRegister>
	if((magnet_status & MAGNET_OK_MSK) == 0)
 80011b8:	7b7b      	ldrb	r3, [r7, #13]
 80011ba:	f003 0320 	and.w	r3, r3, #32
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d107      	bne.n	80011d2 <AS5600_Init+0x80>
	{
		dev->i2cHandle = NULL;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
		return (init_status | magnet_status);
 80011c8:	7b7a      	ldrb	r2, [r7, #13]
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	e000      	b.n	80011d4 <AS5600_Init+0x82>
	}

	return init_status;
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <AS5600_GetRawAngle_Blocking>:

/*
 * @brief Blocking function to read AS5600 sensor raw angle
 */
uint16_t AS5600_GetRawAngle_Blocking(AS5600* dev)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = AS5600_ReadRegisters(dev, RAW_ANGLE_MSB_REG, dev->regdata, 2);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	1d9a      	adds	r2, r3, #6
 80011e8:	2302      	movs	r3, #2
 80011ea:	210c      	movs	r1, #12
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ff51 	bl	8001094 <AS5600_ReadRegisters>
 80011f2:	4603      	mov	r3, r0
 80011f4:	73fb      	strb	r3, [r7, #15]

	if(status != HAL_OK)
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <AS5600_GetRawAngle_Blocking+0x24>
	{
		return 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	e00e      	b.n	800121e <AS5600_GetRawAngle_Blocking+0x42>
	}

	uint16_t raw_angle = (((dev->regdata[0] & 0x0F) << 8) | dev->regdata[1]);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	799b      	ldrb	r3, [r3, #6]
 8001204:	b21b      	sxth	r3, r3
 8001206:	021b      	lsls	r3, r3, #8
 8001208:	b21b      	sxth	r3, r3
 800120a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800120e:	b21a      	sxth	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	79db      	ldrb	r3, [r3, #7]
 8001214:	b21b      	sxth	r3, r3
 8001216:	4313      	orrs	r3, r2
 8001218:	b21b      	sxth	r3, r3
 800121a:	81bb      	strh	r3, [r7, #12]
	return raw_angle;
 800121c:	89bb      	ldrh	r3, [r7, #12]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <AS5600_UpdateAngle_DMA>:

/*
 * @brief Callback to start DMA transaction & update angle value
 */
void AS5600_UpdateAngle_DMA(AS5600 *dev)
{
 8001228:	b5b0      	push	{r4, r5, r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	if(dev == NULL) {
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	f000 8096 	beq.w	8001364 <AS5600_UpdateAngle_DMA+0x13c>
		return;
	}

	HAL_StatusTypeDef status = AS5600_ReadRegisters_DMA(dev, RAW_ANGLE_MSB_REG, dev->regdata, 2);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	1d9a      	adds	r2, r3, #6
 800123c:	2302      	movs	r3, #2
 800123e:	210c      	movs	r1, #12
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff45 	bl	80010d0 <AS5600_ReadRegisters_DMA>
 8001246:	4603      	mov	r3, r0
 8001248:	73fb      	strb	r3, [r7, #15]

	/* Return early if register read fails */
	if(status != HAL_OK) {
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	2b00      	cmp	r3, #0
 800124e:	f040 808b 	bne.w	8001368 <AS5600_UpdateAngle_DMA+0x140>
		return;
	}

	/* Mask & shift 4 MSB left by 8 and concatenate with 8 LSBs */
	uint16_t raw_angle = (((dev->regdata[0] & 0x0F) << 8) | dev->regdata[1]);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	799b      	ldrb	r3, [r3, #6]
 8001256:	b21b      	sxth	r3, r3
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	b21b      	sxth	r3, r3
 800125c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001260:	b21a      	sxth	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	79db      	ldrb	r3, [r3, #7]
 8001266:	b21b      	sxth	r3, r3
 8001268:	4313      	orrs	r3, r2
 800126a:	b21b      	sxth	r3, r3
 800126c:	81bb      	strh	r3, [r7, #12]

	/* Calculate angle delta from previous angle */
	int16_t delta = raw_angle - dev->prev_raw_angle;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	889b      	ldrh	r3, [r3, #4]
 8001272:	89ba      	ldrh	r2, [r7, #12]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	b29b      	uxth	r3, r3
 8001278:	817b      	strh	r3, [r7, #10]

	/*
	 * Positive large delta -> negative overflow
	 * Negative large delta -> positive overflow
	 */
	if(delta > HALF_MAX_RESOLUTION) {
 800127a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800127e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001282:	db23      	blt.n	80012cc <AS5600_UpdateAngle_DMA+0xa4>
		dev->total_angle_rad -= (MAX_RESOLUTION - delta) * BIT_TO_RAD;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f965 	bl	8000558 <__aeabi_f2d>
 800128e:	4604      	mov	r4, r0
 8001290:	460d      	mov	r5, r1
 8001292:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001296:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 800129a:	330f      	adds	r3, #15
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f949 	bl	8000534 <__aeabi_i2d>
 80012a2:	a333      	add	r3, pc, #204	@ (adr r3, 8001370 <AS5600_UpdateAngle_DMA+0x148>)
 80012a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a8:	f7ff f9ae 	bl	8000608 <__aeabi_dmul>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4620      	mov	r0, r4
 80012b2:	4629      	mov	r1, r5
 80012b4:	f7fe fff0 	bl	8000298 <__aeabi_dsub>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4610      	mov	r0, r2
 80012be:	4619      	mov	r1, r3
 80012c0:	f7ff fc9a 	bl	8000bf8 <__aeabi_d2f>
 80012c4:	4602      	mov	r2, r0
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	e047      	b.n	800135c <AS5600_UpdateAngle_DMA+0x134>
	}
	else if(delta < -HALF_MAX_RESOLUTION) {
 80012cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012d0:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 80012d4:	dc22      	bgt.n	800131c <AS5600_UpdateAngle_DMA+0xf4>
		dev->total_angle_rad += (MAX_RESOLUTION + delta) * BIT_TO_RAD;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f93c 	bl	8000558 <__aeabi_f2d>
 80012e0:	4604      	mov	r4, r0
 80012e2:	460d      	mov	r5, r1
 80012e4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012e8:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff f921 	bl	8000534 <__aeabi_i2d>
 80012f2:	a31f      	add	r3, pc, #124	@ (adr r3, 8001370 <AS5600_UpdateAngle_DMA+0x148>)
 80012f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f8:	f7ff f986 	bl	8000608 <__aeabi_dmul>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4620      	mov	r0, r4
 8001302:	4629      	mov	r1, r5
 8001304:	f7fe ffca 	bl	800029c <__adddf3>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f7ff fc72 	bl	8000bf8 <__aeabi_d2f>
 8001314:	4602      	mov	r2, r0
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	e01f      	b.n	800135c <AS5600_UpdateAngle_DMA+0x134>
	}
	else {
		dev->total_angle_rad += delta * BIT_TO_RAD;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f919 	bl	8000558 <__aeabi_f2d>
 8001326:	4604      	mov	r4, r0
 8001328:	460d      	mov	r5, r1
 800132a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f900 	bl	8000534 <__aeabi_i2d>
 8001334:	a30e      	add	r3, pc, #56	@ (adr r3, 8001370 <AS5600_UpdateAngle_DMA+0x148>)
 8001336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133a:	f7ff f965 	bl	8000608 <__aeabi_dmul>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4620      	mov	r0, r4
 8001344:	4629      	mov	r1, r5
 8001346:	f7fe ffa9 	bl	800029c <__adddf3>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4610      	mov	r0, r2
 8001350:	4619      	mov	r1, r3
 8001352:	f7ff fc51 	bl	8000bf8 <__aeabi_d2f>
 8001356:	4602      	mov	r2, r0
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	609a      	str	r2, [r3, #8]
	}

	dev->prev_raw_angle = raw_angle;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	89ba      	ldrh	r2, [r7, #12]
 8001360:	809a      	strh	r2, [r3, #4]
 8001362:	e002      	b.n	800136a <AS5600_UpdateAngle_DMA+0x142>
		return;
 8001364:	bf00      	nop
 8001366:	e000      	b.n	800136a <AS5600_UpdateAngle_DMA+0x142>
		return;
 8001368:	bf00      	nop
}
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bdb0      	pop	{r4, r5, r7, pc}
 8001370:	8b5cd7aa 	.word	0x8b5cd7aa
 8001374:	3f59238d 	.word	0x3f59238d

08001378 <AS5600_GetAngle>:

float AS5600_GetAngle(AS5600* dev)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	return dev->total_angle_rad;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	ee07 3a90 	vmov	s15, r3
}
 8001388:	eeb0 0a67 	vmov.f32	s0, s15
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <CLPositionControl>:
 * @param[in] float target_pos (in radians)
 * @note Returns if sensor not attached
 * @note Uses P control of PID
 */
void CLPositionControl(BLDCMotor* motor, float target_pos)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	ed87 0a00 	vstr	s0, [r7]
	/* Check if motor has an encoder */
	if(motor->sensor == NULL)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d028      	beq.n	80013fc <CLPositionControl+0x66>
	{
		return;
	}

	motor->vars.shaft_angle = AS5600_GetAngle(motor->sensor);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff ffe2 	bl	8001378 <AS5600_GetAngle>
 80013b4:	eef0 7a40 	vmov.f32	s15, s0
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	edc3 7a05 	vstr	s15, [r3, #20]
	motor->dq.Uq = PID_Compute(&(motor->pid), target_pos, motor->sensor_dir * motor->vars.shaft_angle);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	f993 3000 	ldrsb.w	r3, [r3]
 80013ca:	ee07 3a90 	vmov	s15, r3
 80013ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	edd3 7a05 	vldr	s15, [r3, #20]
 80013d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013dc:	eef0 0a67 	vmov.f32	s1, s15
 80013e0:	ed97 0a00 	vldr	s0, [r7]
 80013e4:	4610      	mov	r0, r2
 80013e6:	f001 f83f 	bl	8002468 <PID_Compute>
 80013ea:	eef0 7a40 	vmov.f32	s15, s0
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	SetTorque(motor);
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f000 fa43 	bl	8001880 <SetTorque>
 80013fa:	e000      	b.n	80013fe <CLPositionControl+0x68>
		return;
 80013fc:	bf00      	nop
}
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	0000      	movs	r0, r0
	...

08001408 <Haptic_Virtual_Detents>:
 * @brief Virtual detent simulation
 * @param[in] BLDCMotor* motor
 * @param[in] uint8_t number of virtual detents
 */
void Haptic_Virtual_Detents(BLDCMotor* motor, uint8_t divisions)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	70fb      	strb	r3, [r7, #3]
	float kp = -4;
 8001414:	4b32      	ldr	r3, [pc, #200]	@ (80014e0 <Haptic_Virtual_Detents+0xd8>)
 8001416:	61fb      	str	r3, [r7, #28]
	float step = _2PI / (float)divisions;
 8001418:	78fb      	ldrb	r3, [r7, #3]
 800141a:	ee07 3a90 	vmov	s15, r3
 800141e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001422:	eddf 6a30 	vldr	s13, [pc, #192]	@ 80014e4 <Haptic_Virtual_Detents+0xdc>
 8001426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800142a:	edc7 7a06 	vstr	s15, [r7, #24]
	float angle = AS5600_GetAngle(motor->sensor);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff ffa0 	bl	8001378 <AS5600_GetAngle>
 8001438:	ed87 0a05 	vstr	s0, [r7, #20]
	uint8_t nearest_point = round(angle / step);
 800143c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001440:	edd7 7a06 	vldr	s15, [r7, #24]
 8001444:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001448:	ee16 0a90 	vmov	r0, s13
 800144c:	f7ff f884 	bl	8000558 <__aeabi_f2d>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	ec43 2b10 	vmov	d0, r2, r3
 8001458:	f00b fa40 	bl	800c8dc <round>
 800145c:	ec53 2b10 	vmov	r2, r3, d0
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	f7ff fba8 	bl	8000bb8 <__aeabi_d2uiz>
 8001468:	4603      	mov	r3, r0
 800146a:	74fb      	strb	r3, [r7, #19]
	float target_angle = nearest_point * step;
 800146c:	7cfb      	ldrb	r3, [r7, #19]
 800146e:	ee07 3a90 	vmov	s15, r3
 8001472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001476:	ed97 7a06 	vldr	s14, [r7, #24]
 800147a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800147e:	edc7 7a03 	vstr	s15, [r7, #12]
	float error = fabs(angle - target_angle);
 8001482:	ed97 7a05 	vldr	s14, [r7, #20]
 8001486:	edd7 7a03 	vldr	s15, [r7, #12]
 800148a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800148e:	eef0 7ae7 	vabs.f32	s15, s15
 8001492:	edc7 7a02 	vstr	s15, [r7, #8]

	motor->vars.shaft_angle = angle;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	615a      	str	r2, [r3, #20]
	if(error > 0.01)
 800149c:	68b8      	ldr	r0, [r7, #8]
 800149e:	f7ff f85b 	bl	8000558 <__aeabi_f2d>
 80014a2:	a30d      	add	r3, pc, #52	@ (adr r3, 80014d8 <Haptic_Virtual_Detents+0xd0>)
 80014a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a8:	f7ff fb3e 	bl	8000b28 <__aeabi_dcmpgt>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d005      	beq.n	80014be <Haptic_Virtual_Detents+0xb6>
	{
		CLPositionControl(motor, target_angle);
 80014b2:	ed97 0a03 	vldr	s0, [r7, #12]
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7ff ff6d 	bl	8001396 <CLPositionControl>
	{
		motor->dq.Uq = 0;
		SetTorque(motor);
	}
	//SetTorque(motor);
}
 80014bc:	e006      	b.n	80014cc <Haptic_Virtual_Detents+0xc4>
		motor->dq.Uq = 0;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f04f 0200 	mov.w	r2, #0
 80014c4:	625a      	str	r2, [r3, #36]	@ 0x24
		SetTorque(motor);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f000 f9da 	bl	8001880 <SetTorque>
}
 80014cc:	bf00      	nop
 80014ce:	3720      	adds	r7, #32
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	f3af 8000 	nop.w
 80014d8:	47ae147b 	.word	0x47ae147b
 80014dc:	3f847ae1 	.word	0x3f847ae1
 80014e0:	c0800000 	.word	0xc0800000
 80014e4:	40c90fdb 	.word	0x40c90fdb

080014e8 <_cos>:
/*
 * @brief Cosine approximation
 * @param[in] angle(radians)
 * @return cos(angle)
 */
__STATIC_INLINE float _cos(float angle) {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	ed87 0a01 	vstr	s0, [r7, #4]
  float _angle = angle + _PI_2;
 80014f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80014f6:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001540 <_cos+0x58>
 80014fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014fe:	edc7 7a03 	vstr	s15, [r7, #12]
  _angle = _angle > _2PI ? _angle - _2PI : _angle;
 8001502:	edd7 7a03 	vldr	s15, [r7, #12]
 8001506:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001544 <_cos+0x5c>
 800150a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800150e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001512:	dd06      	ble.n	8001522 <_cos+0x3a>
 8001514:	edd7 7a03 	vldr	s15, [r7, #12]
 8001518:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001544 <_cos+0x5c>
 800151c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001520:	e001      	b.n	8001526 <_cos+0x3e>
 8001522:	edd7 7a03 	vldr	s15, [r7, #12]
 8001526:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(_angle);
 800152a:	ed97 0a03 	vldr	s0, [r7, #12]
 800152e:	f000 fa85 	bl	8001a3c <_sin>
 8001532:	eef0 7a40 	vmov.f32	s15, s0
}
 8001536:	eeb0 0a67 	vmov.f32	s0, s15
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	3fc90fdb 	.word	0x3fc90fdb
 8001544:	40c90fdb 	.word	0x40c90fdb

08001548 <_normalizeAngle>:
/*
 * @brief Normalize angle to [0, 2pi]
 * @param[in] angle(radians)
 * @return normalized_angle
 */
__STATIC_INLINE float _normalizeAngle(float angle){
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff f800 	bl	8000558 <__aeabi_f2d>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 80015a8 <_normalizeAngle+0x60>
 8001560:	ec43 2b10 	vmov	d0, r2, r3
 8001564:	f00b f98c 	bl	800c880 <fmod>
 8001568:	ec53 2b10 	vmov	r2, r3, d0
 800156c:	4610      	mov	r0, r2
 800156e:	4619      	mov	r1, r3
 8001570:	f7ff fb42 	bl	8000bf8 <__aeabi_d2f>
 8001574:	4603      	mov	r3, r0
 8001576:	60fb      	str	r3, [r7, #12]

  /* Add 2pi to negative values to make positive */
  return a >= 0 ? a : (a + _2PI);
 8001578:	edd7 7a03 	vldr	s15, [r7, #12]
 800157c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001584:	db02      	blt.n	800158c <_normalizeAngle+0x44>
 8001586:	edd7 7a03 	vldr	s15, [r7, #12]
 800158a:	e005      	b.n	8001598 <_normalizeAngle+0x50>
 800158c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001590:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80015b0 <_normalizeAngle+0x68>
 8001594:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001598:	eeb0 0a67 	vmov.f32	s0, s15
 800159c:	3710      	adds	r7, #16
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	f3af 8000 	nop.w
 80015a8:	60000000 	.word	0x60000000
 80015ac:	401921fb 	.word	0x401921fb
 80015b0:	40c90fdb 	.word	0x40c90fdb

080015b4 <_electricalAngle>:
 * @brief Calculates electrical angle from rotor angle
 * @param[in] shaft_angle(radians)
 * @param[in] pole_pairs
 * @return electrical angle
 */
__STATIC_INLINE float _electricalAngle(float shaft_angle, uint8_t pole_pairs){
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80015be:	4603      	mov	r3, r0
 80015c0:	70fb      	strb	r3, [r7, #3]
  return shaft_angle * pole_pairs;
 80015c2:	78fb      	ldrb	r3, [r7, #3]
 80015c4:	ee07 3a90 	vmov	s15, r3
 80015c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80015d0:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80015d4:	eeb0 0a67 	vmov.f32	s0, s15
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <PWM_Start_3_Channel>:
/*
 * @brief Starts PWM channels 1, 2, 3 of specified timer.
 * @param[in] TIM_HandleTypeDef timer
 */
void PWM_Start_3_Channel(TIM_HandleTypeDef* timer)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(timer, TIM_CHANNEL_1);
 80015ea:	2100      	movs	r1, #0
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f004 ff01 	bl	80063f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer, TIM_CHANNEL_2);
 80015f2:	2104      	movs	r1, #4
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f004 fefd 	bl	80063f4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer, TIM_CHANNEL_3);
 80015fa:	2108      	movs	r1, #8
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f004 fef9 	bl	80063f4 <HAL_TIM_PWM_Start>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <SetPWM>:
 * @scope static
 * @brief Set pwm duty cycle of timer channels
 * @param[in] BLDCMotor* motor
 */
__STATIC_INLINE void SetPWM(BLDCMotor* motor)
{
 800160a:	b480      	push	{r7}
 800160c:	b085      	sub	sp, #20
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
	uint32_t ARR = motor->timer->Instance->ARR;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800161a:	60fb      	str	r3, [r7, #12]
	motor->timer->Instance->CCR1 = (motor->pv.Ua / motor->supply_voltage) * ARR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	edd3 7a02 	vldr	s15, [r3, #8]
 8001628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	ee07 3a90 	vmov	s15, r3
 8001632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001644:	ee17 2a90 	vmov	r2, s15
 8001648:	635a      	str	r2, [r3, #52]	@ 0x34
	motor->timer->Instance->CCR2 = (motor->pv.Ub / motor->supply_voltage) * ARR;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	edd3 7a02 	vldr	s15, [r3, #8]
 8001656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	ee07 3a90 	vmov	s15, r3
 8001660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001672:	ee17 2a90 	vmov	r2, s15
 8001676:	639a      	str	r2, [r3, #56]	@ 0x38
	motor->timer->Instance->CCR3 = (motor->pv.Uc / motor->supply_voltage) * ARR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	edd3 7a02 	vldr	s15, [r3, #8]
 8001684:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	ee07 3a90 	vmov	s15, r3
 800168e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016a0:	ee17 2a90 	vmov	r2, s15
 80016a4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80016a6:	bf00      	nop
 80016a8:	3714      	adds	r7, #20
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <Var_t_Init>:
 * @scope Static
 * @brief Initializers for motor sub-structs
 * @retval Struct_t struct
 */
static Var_t Var_t_Init()
{
 80016b2:	b490      	push	{r4, r7}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
	Var_t vars = {
 80016ba:	f107 0308 	add.w	r3, r7, #8
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]
 80016c4:	609a      	str	r2, [r3, #8]
 80016c6:	60da      	str	r2, [r3, #12]
		.prev_us = 0,
		.phase_current[0] = 0,
		.phase_current[1] = 0
	};

	return vars;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	461c      	mov	r4, r3
 80016cc:	f107 0308 	add.w	r3, r7, #8
 80016d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc90      	pop	{r4, r7}
 80016de:	4770      	bx	lr

080016e0 <DQ_t_Init>:

static DQ_t DQ_t_Init()
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
	DQ_t dq = {
 80016e6:	f04f 0300 	mov.w	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	f04f 0300 	mov.w	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
		.Ud = 0,
		.Uq = 0
	};

	return dq;
 80016f2:	f107 0310 	add.w	r3, r7, #16
 80016f6:	f107 0208 	add.w	r2, r7, #8
 80016fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016fe:	e883 0003 	stmia.w	r3, {r0, r1}
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	ee07 2a10 	vmov	s14, r2
 800170a:	ee07 3a90 	vmov	s15, r3
}
 800170e:	eeb0 0a47 	vmov.f32	s0, s14
 8001712:	eef0 0a67 	vmov.f32	s1, s15
 8001716:	371c      	adds	r7, #28
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <PV_t_Init>:

static PV_t PV_t_Init()
{
 8001720:	b480      	push	{r7}
 8001722:	b08b      	sub	sp, #44	@ 0x2c
 8001724:	af00      	add	r7, sp, #0
	PV_t pv = {
 8001726:	f04f 0300 	mov.w	r3, #0
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	f04f 0300 	mov.w	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	f04f 0300 	mov.w	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]
		.Ua = 0,
		.Ub = 0,
		.Uc = 0
	};

	return pv;
 8001738:	f107 031c 	add.w	r3, r7, #28
 800173c:	f107 0210 	add.w	r2, r7, #16
 8001740:	ca07      	ldmia	r2, {r0, r1, r2}
 8001742:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001746:	69f9      	ldr	r1, [r7, #28]
 8001748:	6a3a      	ldr	r2, [r7, #32]
 800174a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800174c:	ee06 1a90 	vmov	s13, r1
 8001750:	ee07 2a10 	vmov	s14, r2
 8001754:	ee07 3a90 	vmov	s15, r3
}
 8001758:	eeb0 0a66 	vmov.f32	s0, s13
 800175c:	eef0 0a47 	vmov.f32	s1, s14
 8001760:	eeb0 1a67 	vmov.f32	s2, s15
 8001764:	372c      	adds	r7, #44	@ 0x2c
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
	...

08001770 <BLDCMotor_Init>:
 * - Voltage limit is 3V by default.
 *
 * @retval BLDCMotor motor
 */
void BLDCMotor_Init(BLDCMotor* motor, TIM_HandleTypeDef* timer, uint8_t pole_pairs)
{
 8001770:	b5b0      	push	{r4, r5, r7, lr}
 8001772:	b092      	sub	sp, #72	@ 0x48
 8001774:	af00      	add	r7, sp, #0
 8001776:	6478      	str	r0, [r7, #68]	@ 0x44
 8001778:	6439      	str	r1, [r7, #64]	@ 0x40
 800177a:	4613      	mov	r3, r2
 800177c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	/* Store motor in motor array, to be referenced by other functions globally */
	if(BLDCMotorArray[0] == NULL)
 8001780:	4b3c      	ldr	r3, [pc, #240]	@ (8001874 <BLDCMotor_Init+0x104>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d103      	bne.n	8001790 <BLDCMotor_Init+0x20>
	{
		BLDCMotorArray[0] = motor;
 8001788:	4a3a      	ldr	r2, [pc, #232]	@ (8001874 <BLDCMotor_Init+0x104>)
 800178a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	e006      	b.n	800179e <BLDCMotor_Init+0x2e>
	}
	else if(BLDCMotorArray[1] == NULL)
 8001790:	4b38      	ldr	r3, [pc, #224]	@ (8001874 <BLDCMotor_Init+0x104>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d168      	bne.n	800186a <BLDCMotor_Init+0xfa>
	{
		BLDCMotorArray[1] = motor;
 8001798:	4a36      	ldr	r2, [pc, #216]	@ (8001874 <BLDCMotor_Init+0x104>)
 800179a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800179c:	6053      	str	r3, [r2, #4]
	else
	{
		return;
	}

	motor->sensor_dir = 1;
 800179e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017a0:	2201      	movs	r2, #1
 80017a2:	701a      	strb	r2, [r3, #0]
	motor->pole_pairs = pole_pairs;
 80017a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017a6:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 80017aa:	705a      	strb	r2, [r3, #1]
	motor->vars.phase_current[0] = 0;
 80017ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017ae:	2200      	movs	r2, #0
 80017b0:	61da      	str	r2, [r3, #28]
	motor->vars.phase_current[1] = 0;
 80017b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017b4:	2200      	movs	r2, #0
 80017b6:	621a      	str	r2, [r3, #32]
	motor->voltage_limit = 3;
 80017b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017ba:	4a2f      	ldr	r2, [pc, #188]	@ (8001878 <BLDCMotor_Init+0x108>)
 80017bc:	605a      	str	r2, [r3, #4]
	motor->supply_voltage = 12;
 80017be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017c0:	4a2e      	ldr	r2, [pc, #184]	@ (800187c <BLDCMotor_Init+0x10c>)
 80017c2:	609a      	str	r2, [r3, #8]

	motor->target_velocity = 0;
 80017c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017c6:	f04f 0200 	mov.w	r2, #0
 80017ca:	60da      	str	r2, [r3, #12]
	motor->target_pos = 0;
 80017cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]

	motor->vars = Var_t_Init();
 80017d4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80017d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017da:	4618      	mov	r0, r3
 80017dc:	f7ff ff69 	bl	80016b2 <Var_t_Init>
 80017e0:	3414      	adds	r4, #20
 80017e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	motor->dq = DQ_t_Init();
 80017ec:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80017ee:	f7ff ff77 	bl	80016e0 <DQ_t_Init>
 80017f2:	eeb0 7a40 	vmov.f32	s14, s0
 80017f6:	eef0 7a60 	vmov.f32	s15, s1
 80017fa:	ed84 7a09 	vstr	s14, [r4, #36]	@ 0x24
 80017fe:	edc4 7a0a 	vstr	s15, [r4, #40]	@ 0x28
	motor->pv = PV_t_Init();
 8001802:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8001804:	f7ff ff8c 	bl	8001720 <PV_t_Init>
 8001808:	eef0 6a40 	vmov.f32	s13, s0
 800180c:	eeb0 7a60 	vmov.f32	s14, s1
 8001810:	eef0 7a41 	vmov.f32	s15, s2
 8001814:	edc4 6a0b 	vstr	s13, [r4, #44]	@ 0x2c
 8001818:	ed84 7a0c 	vstr	s14, [r4, #48]	@ 0x30
 800181c:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
	motor->pid = PID_Init();
 8001820:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8001822:	463b      	mov	r3, r7
 8001824:	4618      	mov	r0, r3
 8001826:	f000 fdfb 	bl	8002420 <PID_Init>
 800182a:	3438      	adds	r4, #56	@ 0x38
 800182c:	463d      	mov	r5, r7
 800182e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001830:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001832:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001836:	e895 0003 	ldmia.w	r5, {r0, r1}
 800183a:	e884 0003 	stmia.w	r4, {r0, r1}
	motor->lpf = LPF_Init();
 800183e:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8001840:	463b      	mov	r3, r7
 8001842:	4618      	mov	r0, r3
 8001844:	f000 f97a 	bl	8001b3c <LPF_Init>
 8001848:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 800184c:	463a      	mov	r2, r7
 800184e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001850:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	motor->control = none;
 8001854:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001856:	2201      	movs	r2, #1
 8001858:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
	motor->sensor = NULL;
 800185c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800185e:	2200      	movs	r2, #0
 8001860:	671a      	str	r2, [r3, #112]	@ 0x70
	motor->timer = timer;
 8001862:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001864:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001866:	675a      	str	r2, [r3, #116]	@ 0x74
 8001868:	e000      	b.n	800186c <BLDCMotor_Init+0xfc>
		return;
 800186a:	bf00      	nop

}
 800186c:	3748      	adds	r7, #72	@ 0x48
 800186e:	46bd      	mov	sp, r7
 8001870:	bdb0      	pop	{r4, r5, r7, pc}
 8001872:	bf00      	nop
 8001874:	20000274 	.word	0x20000274
 8001878:	40400000 	.word	0x40400000
 800187c:	41400000 	.word	0x41400000

08001880 <SetTorque>:
/*
 * @brief Inverse Clarke & Park transformations to calculate phase voltages
 * @param[in] BLDCMotor* motor
 * @note Calls setpwm()
 */
void SetTorque(BLDCMotor* motor) {
 8001880:	b580      	push	{r7, lr}
 8001882:	ed2d 8b02 	vpush	{d8}
 8001886:	b088      	sub	sp, #32
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	/* Constrain Uq to within voltage range */
	motor->dq.Uq = _constrain(motor->dq.Uq, -motor->voltage_limit, motor->voltage_limit);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	edd3 7a01 	vldr	s15, [r3, #4]
 8001898:	eef1 7a67 	vneg.f32	s15, s15
 800189c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a4:	d505      	bpl.n	80018b2 <SetTorque+0x32>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80018ac:	eef1 7a67 	vneg.f32	s15, s15
 80018b0:	e011      	b.n	80018d6 <SetTorque+0x56>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80018be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c6:	dd03      	ble.n	80018d0 <SetTorque+0x50>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80018ce:	e002      	b.n	80018d6 <SetTorque+0x56>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    /* Normalize electric angle */
	/* Note that _normalizeAngle() works with floats, not fix16 */
    float el_angle = _normalizeAngle(_electricalAngle(motor->vars.shaft_angle, motor->pole_pairs));
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	edd3 7a05 	vldr	s15, [r3, #20]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	785b      	ldrb	r3, [r3, #1]
 80018e6:	4618      	mov	r0, r3
 80018e8:	eeb0 0a67 	vmov.f32	s0, s15
 80018ec:	f7ff fe62 	bl	80015b4 <_electricalAngle>
 80018f0:	eef0 7a40 	vmov.f32	s15, s0
 80018f4:	eeb0 0a67 	vmov.f32	s0, s15
 80018f8:	f7ff fe26 	bl	8001548 <_normalizeAngle>
 80018fc:	ed87 0a07 	vstr	s0, [r7, #28]

	/* Inverse park transform */
	float Ualpha = motor->dq.Uq * _cos(el_angle);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
 8001906:	ed97 0a07 	vldr	s0, [r7, #28]
 800190a:	f7ff fded 	bl	80014e8 <_cos>
 800190e:	eef0 7a40 	vmov.f32	s15, s0
 8001912:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001916:	edc7 7a06 	vstr	s15, [r7, #24]
	float Ubeta = motor->dq.Uq * _sin(el_angle);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
 8001920:	ed97 0a07 	vldr	s0, [r7, #28]
 8001924:	f000 f88a 	bl	8001a3c <_sin>
 8001928:	eef0 7a40 	vmov.f32	s15, s0
 800192c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001930:	edc7 7a05 	vstr	s15, [r7, #20]

	float half_supply_v = motor->supply_voltage / 2.0f;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	ed93 7a02 	vldr	s14, [r3, #8]
 800193a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800193e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001942:	edc7 7a04 	vstr	s15, [r7, #16]
	float sqrt3_beta = Ubeta * _SQRT3;
 8001946:	edd7 7a05 	vldr	s15, [r7, #20]
 800194a:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80019c4 <SetTorque+0x144>
 800194e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001952:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Inverse Clarke transform */
	motor->pv.Ua = Ualpha + half_supply_v;
 8001956:	ed97 7a06 	vldr	s14, [r7, #24]
 800195a:	edd7 7a04 	vldr	s15, [r7, #16]
 800195e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	motor->pv.Ub = ((sqrt3_beta - Ualpha) / 2.0f) + half_supply_v;
 8001968:	ed97 7a03 	vldr	s14, [r7, #12]
 800196c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001970:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001974:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001978:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800197c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001980:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	motor->pv.Uc = ((-Ualpha - sqrt3_beta) / 2.0f) + half_supply_v;
 800198a:	edd7 7a06 	vldr	s15, [r7, #24]
 800198e:	eeb1 7a67 	vneg.f32	s14, s15
 8001992:	edd7 7a03 	vldr	s15, [r7, #12]
 8001996:	ee77 7a67 	vsub.f32	s15, s14, s15
 800199a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800199e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80019a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	SetPWM(motor);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f7ff fe2a 	bl	800160a <SetPWM>
}
 80019b6:	bf00      	nop
 80019b8:	3720      	adds	r7, #32
 80019ba:	46bd      	mov	sp, r7
 80019bc:	ecbd 8b02 	vpop	{d8}
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	3fddb3d7 	.word	0x3fddb3d7

080019c8 <LinkSensor>:
 * @param[in] BLDCMotor* motor
 * @param[in] AS5600* sensor
 * @param[in] I2C_HandleTypeDef *i2c_handle
 */
void LinkSensor(BLDCMotor* motor, AS5600* sensor, I2C_HandleTypeDef *i2c_handle)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
	uint8_t init_stat = AS5600_Init(sensor, i2c_handle);
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	68b8      	ldr	r0, [r7, #8]
 80019d8:	f7ff fbbb 	bl	8001152 <AS5600_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	75fb      	strb	r3, [r7, #23]

	/* Check if sensor link successful */
	if(init_stat != 0)
 80019e0:	7dfb      	ldrb	r3, [r7, #23]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <LinkSensor+0x26>
	{
		motor->sensor = NULL;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2200      	movs	r2, #0
 80019ea:	671a      	str	r2, [r3, #112]	@ 0x70
		return;
 80019ec:	e021      	b.n	8001a32 <LinkSensor+0x6a>
	}

	motor->sensor = sensor;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	68ba      	ldr	r2, [r7, #8]
 80019f2:	671a      	str	r2, [r3, #112]	@ 0x70

	motor->dq.Uq = motor->voltage_limit;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	625a      	str	r2, [r3, #36]	@ 0x24
	motor->vars.shaft_angle = _3PI_2;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001a38 <LinkSensor+0x70>)
 8001a00:	615a      	str	r2, [r3, #20]
	SetTorque(motor);
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f7ff ff3c 	bl	8001880 <SetTorque>
	HAL_Delay(1500);
 8001a08:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001a0c:	f001 fbf8 	bl	8003200 <HAL_Delay>
	AS5600_ZeroAngle(sensor);
 8001a10:	68b8      	ldr	r0, [r7, #8]
 8001a12:	f7ff fb8b 	bl	800112c <AS5600_ZeroAngle>
	motor->dq.Uq = 0;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	625a      	str	r2, [r3, #36]	@ 0x24
	motor->vars.shaft_angle = 0;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	615a      	str	r2, [r3, #20]
	SetTorque(motor);
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f7ff ff2a 	bl	8001880 <SetTorque>

	AS5600_UpdateAngle_DMA(sensor);
 8001a2c:	68b8      	ldr	r0, [r7, #8]
 8001a2e:	f7ff fbfb 	bl	8001228 <AS5600_UpdateAngle_DMA>
}
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	4096cbe4 	.word	0x4096cbe4

08001a3c <_sin>:
/*
 * @brief Sine approximation using look-up table & linear interpolation
 * @param[in] angle(radians)
 * @return sin(angle)
 */
float _sin(float angle){
 8001a3c:	b480      	push	{r7}
 8001a3e:	b087      	sub	sp, #28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	ed87 0a01 	vstr	s0, [r7, #4]

   int32_t first, second;
   uint16_t index = (uint16_t)(angle / _2PI * 65536.0f);
 8001a46:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a4a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001b2c <_sin+0xf0>
 8001a4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a52:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8001b30 <_sin+0xf4>
 8001a56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a5e:	ee17 3a90 	vmov	r3, s15
 8001a62:	81fb      	strh	r3, [r7, #14]
   int frac = index & 0xff;
 8001a64:	89fb      	ldrh	r3, [r7, #14]
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	60bb      	str	r3, [r7, #8]
   index = (index >> 8) & 0xff;
 8001a6a:	89fb      	ldrh	r3, [r7, #14]
 8001a6c:	0a1b      	lsrs	r3, r3, #8
 8001a6e:	81fb      	strh	r3, [r7, #14]

   if (index < 64){
 8001a70:	89fb      	ldrh	r3, [r7, #14]
 8001a72:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a74:	d80b      	bhi.n	8001a8e <_sin+0x52>
     first = (int32_t)sineLUT[index];
 8001a76:	89fb      	ldrh	r3, [r7, #14]
 8001a78:	4a2e      	ldr	r2, [pc, #184]	@ (8001b34 <_sin+0xf8>)
 8001a7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a7e:	617b      	str	r3, [r7, #20]
     second = (int32_t)sineLUT[index + 1];
 8001a80:	89fb      	ldrh	r3, [r7, #14]
 8001a82:	3301      	adds	r3, #1
 8001a84:	4a2b      	ldr	r2, [pc, #172]	@ (8001b34 <_sin+0xf8>)
 8001a86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	e033      	b.n	8001af6 <_sin+0xba>
   }
   else if (index < 128){
 8001a8e:	89fb      	ldrh	r3, [r7, #14]
 8001a90:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a92:	d80e      	bhi.n	8001ab2 <_sin+0x76>
     first = (int32_t)sineLUT[128 - index];
 8001a94:	89fb      	ldrh	r3, [r7, #14]
 8001a96:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001a9a:	4a26      	ldr	r2, [pc, #152]	@ (8001b34 <_sin+0xf8>)
 8001a9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001aa0:	617b      	str	r3, [r7, #20]
     second = (int32_t)sineLUT[127 - index];
 8001aa2:	89fb      	ldrh	r3, [r7, #14]
 8001aa4:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8001aa8:	4a22      	ldr	r2, [pc, #136]	@ (8001b34 <_sin+0xf8>)
 8001aaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	e021      	b.n	8001af6 <_sin+0xba>
   }
   else if (index < 192){
 8001ab2:	89fb      	ldrh	r3, [r7, #14]
 8001ab4:	2bbf      	cmp	r3, #191	@ 0xbf
 8001ab6:	d80e      	bhi.n	8001ad6 <_sin+0x9a>
     first = -(int32_t)sineLUT[index - 128];
 8001ab8:	89fb      	ldrh	r3, [r7, #14]
 8001aba:	3b80      	subs	r3, #128	@ 0x80
 8001abc:	4a1d      	ldr	r2, [pc, #116]	@ (8001b34 <_sin+0xf8>)
 8001abe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ac2:	425b      	negs	r3, r3
 8001ac4:	617b      	str	r3, [r7, #20]
     second = -(int32_t)sineLUT[index - 127];
 8001ac6:	89fb      	ldrh	r3, [r7, #14]
 8001ac8:	3b7f      	subs	r3, #127	@ 0x7f
 8001aca:	4a1a      	ldr	r2, [pc, #104]	@ (8001b34 <_sin+0xf8>)
 8001acc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ad0:	425b      	negs	r3, r3
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	e00f      	b.n	8001af6 <_sin+0xba>
   }
   else {
     first = -(int32_t)sineLUT[256 - index];
 8001ad6:	89fb      	ldrh	r3, [r7, #14]
 8001ad8:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8001adc:	4a15      	ldr	r2, [pc, #84]	@ (8001b34 <_sin+0xf8>)
 8001ade:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ae2:	425b      	negs	r3, r3
 8001ae4:	617b      	str	r3, [r7, #20]
     second = -(int32_t)sineLUT[255 - index];
 8001ae6:	89fb      	ldrh	r3, [r7, #14]
 8001ae8:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8001aec:	4a11      	ldr	r2, [pc, #68]	@ (8001b34 <_sin+0xf8>)
 8001aee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001af2:	425b      	negs	r3, r3
 8001af4:	613b      	str	r3, [r7, #16]
   }

   return (first + (((second - first) * frac) >> 8)) / 32768.0f;
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	68ba      	ldr	r2, [r7, #8]
 8001afe:	fb02 f303 	mul.w	r3, r2, r3
 8001b02:	121a      	asrs	r2, r3, #8
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	4413      	add	r3, r2
 8001b08:	ee07 3a90 	vmov	s15, r3
 8001b0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b10:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001b38 <_sin+0xfc>
 8001b14:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b18:	eef0 7a66 	vmov.f32	s15, s13
 }
 8001b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001b20:	371c      	adds	r7, #28
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40c90fdb 	.word	0x40c90fdb
 8001b30:	47800000 	.word	0x47800000
 8001b34:	20000000 	.word	0x20000000
 8001b38:	47000000 	.word	0x47000000

08001b3c <LPF_Init>:

/*
 * @brief LPF struct initialization function
 */
LPF_t LPF_Init()
{
 8001b3c:	b490      	push	{r4, r7}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
	LPF_t lpf_dev = {
 8001b44:	4b09      	ldr	r3, [pc, #36]	@ (8001b6c <LPF_Init+0x30>)
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	f04f 0300 	mov.w	r3, #0
 8001b4c:	613b      	str	r3, [r7, #16]
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
			.prev_data = 0,
			.prev_us = 0,
			.time_const = 0.1
	};

	return lpf_dev;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	461c      	mov	r4, r3
 8001b56:	f107 030c 	add.w	r3, r7, #12
 8001b5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b5e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc90      	pop	{r4, r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	3dcccccd 	.word	0x3dcccccd

08001b70 <DWT_Init>:
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8001b74:	4b08      	ldr	r3, [pc, #32]	@ (8001b98 <DWT_Init+0x28>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	4a07      	ldr	r2, [pc, #28]	@ (8001b98 <DWT_Init+0x28>)
 8001b7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b7e:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8001b80:	4b06      	ldr	r3, [pc, #24]	@ (8001b9c <DWT_Init+0x2c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a05      	ldr	r2, [pc, #20]	@ (8001b9c <DWT_Init+0x2c>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	6013      	str	r3, [r2, #0]
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000edf0 	.word	0xe000edf0
 8001b9c:	e0001000 	.word	0xe0001000

08001ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b0a2      	sub	sp, #136	@ 0x88
 8001ba4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ba6:	f001 fab9 	bl	800311c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001baa:	f000 f849 	bl	8001c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bae:	f000 fb43 	bl	8002238 <MX_GPIO_Init>
  MX_DMA_Init();
 8001bb2:	f000 fae3 	bl	800217c <MX_DMA_Init>
  MX_I2C1_Init();
 8001bb6:	f000 f929 	bl	8001e0c <MX_I2C1_Init>
  MX_TIM2_Init();
 8001bba:	f000 f983 	bl	8001ec4 <MX_TIM2_Init>
  MX_I2C2_Init();
 8001bbe:	f000 f953 	bl	8001e68 <MX_I2C2_Init>
  MX_TIM3_Init();
 8001bc2:	f000 f9ed 	bl	8001fa0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001bc6:	f000 faaf 	bl	8002128 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001bca:	f000 f8a1 	bl	8001d10 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001bce:	f000 fa55 	bl	800207c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  /* Start PWM channels */
  PWM_Start_3_Channel(&htim2);
 8001bd2:	4815      	ldr	r0, [pc, #84]	@ (8001c28 <main+0x88>)
 8001bd4:	f7ff fd05 	bl	80015e2 <PWM_Start_3_Channel>

  /* DWT timer init (for micros) */
  DWT_Init();
 8001bd8:	f7ff ffca 	bl	8001b70 <DWT_Init>
  /* Create sensor & motor object */
  AS5600 s1;
  BLDCMotor m1;

  /* Init motor object */
  BLDCMotor_Init(&m1, &htim2, 7);
 8001bdc:	463b      	mov	r3, r7
 8001bde:	2207      	movs	r2, #7
 8001be0:	4911      	ldr	r1, [pc, #68]	@ (8001c28 <main+0x88>)
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7ff fdc4 	bl	8001770 <BLDCMotor_Init>
  LinkSensor(&m1, &s1, &hi2c1);
 8001be8:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001bec:	463b      	mov	r3, r7
 8001bee:	4a0f      	ldr	r2, [pc, #60]	@ (8001c2c <main+0x8c>)
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff fee9 	bl	80019c8 <LinkSensor>
  m1.supply_voltage = 12;
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8001c30 <main+0x90>)
 8001bf8:	60bb      	str	r3, [r7, #8]
  m1.voltage_limit = 5;
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001c34 <main+0x94>)
 8001bfc:	607b      	str	r3, [r7, #4]
  m1.sensor_dir = -1;
 8001bfe:	23ff      	movs	r3, #255	@ 0xff
 8001c00:	703b      	strb	r3, [r7, #0]
  m1.pid.kp = 4;
 8001c02:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8001c06:	63bb      	str	r3, [r7, #56]	@ 0x38
  m1.pid.mode = P;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  SerialCommander_Init(&huart1);
 8001c0e:	480a      	ldr	r0, [pc, #40]	@ (8001c38 <main+0x98>)
 8001c10:	f000 fd32 	bl	8002678 <SerialCommander_Init>
#ifdef ADC_ENABLED
  	HAL_ADC_Start_DMA(&hadc1, ADC_buff, 4);
#endif

  	/* Start tim4 periodic callback */
  HAL_TIM_Base_Start_IT(&htim4);
 8001c14:	4809      	ldr	r0, [pc, #36]	@ (8001c3c <main+0x9c>)
 8001c16:	f004 faed 	bl	80061f4 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Haptic_Virtual_Detents(&m1, 54);
 8001c1a:	463b      	mov	r3, r7
 8001c1c:	2136      	movs	r1, #54	@ 0x36
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7ff fbf2 	bl	8001408 <Haptic_Virtual_Detents>
 8001c24:	e7f9      	b.n	8001c1a <main+0x7a>
 8001c26:	bf00      	nop
 8001c28:	2000054c 	.word	0x2000054c
 8001c2c:	20000324 	.word	0x20000324
 8001c30:	41400000 	.word	0x41400000
 8001c34:	40a00000 	.word	0x40a00000
 8001c38:	20000624 	.word	0x20000624
 8001c3c:	200005dc 	.word	0x200005dc

08001c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b094      	sub	sp, #80	@ 0x50
 8001c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c46:	f107 0320 	add.w	r3, r7, #32
 8001c4a:	2230      	movs	r2, #48	@ 0x30
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f008 f843 	bl	8009cda <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c64:	2300      	movs	r3, #0
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	4b27      	ldr	r3, [pc, #156]	@ (8001d08 <SystemClock_Config+0xc8>)
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6c:	4a26      	ldr	r2, [pc, #152]	@ (8001d08 <SystemClock_Config+0xc8>)
 8001c6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c72:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c74:	4b24      	ldr	r3, [pc, #144]	@ (8001d08 <SystemClock_Config+0xc8>)
 8001c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c80:	2300      	movs	r3, #0
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	4b21      	ldr	r3, [pc, #132]	@ (8001d0c <SystemClock_Config+0xcc>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a20      	ldr	r2, [pc, #128]	@ (8001d0c <SystemClock_Config+0xcc>)
 8001c8a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	4b1e      	ldr	r3, [pc, #120]	@ (8001d0c <SystemClock_Config+0xcc>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001c98:	607b      	str	r3, [r7, #4]
 8001c9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ca0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001caa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001cb0:	2319      	movs	r3, #25
 8001cb2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001cb4:	23c0      	movs	r3, #192	@ 0xc0
 8001cb6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cbc:	2304      	movs	r3, #4
 8001cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cc0:	f107 0320 	add.w	r3, r7, #32
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f003 fe3d 	bl	8005944 <HAL_RCC_OscConfig>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cd0:	f000 fb88 	bl	80023e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cd4:	230f      	movs	r3, #15
 8001cd6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ce0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ce4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001cea:	f107 030c 	add.w	r3, r7, #12
 8001cee:	2103      	movs	r1, #3
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f004 f89f 	bl	8005e34 <HAL_RCC_ClockConfig>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001cfc:	f000 fb72 	bl	80023e4 <Error_Handler>
  }
}
 8001d00:	bf00      	nop
 8001d02:	3750      	adds	r7, #80	@ 0x50
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40007000 	.word	0x40007000

08001d10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d16:	463b      	mov	r3, r7
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d22:	4b37      	ldr	r3, [pc, #220]	@ (8001e00 <MX_ADC1_Init+0xf0>)
 8001d24:	4a37      	ldr	r2, [pc, #220]	@ (8001e04 <MX_ADC1_Init+0xf4>)
 8001d26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d28:	4b35      	ldr	r3, [pc, #212]	@ (8001e00 <MX_ADC1_Init+0xf0>)
 8001d2a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001d30:	4b33      	ldr	r3, [pc, #204]	@ (8001e00 <MX_ADC1_Init+0xf0>)
 8001d32:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d36:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001d38:	4b31      	ldr	r3, [pc, #196]	@ (8001e00 <MX_ADC1_Init+0xf0>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d3e:	4b30      	ldr	r3, [pc, #192]	@ (8001e00 <MX_ADC1_Init+0xf0>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d44:	4b2e      	ldr	r3, [pc, #184]	@ (8001e00 <MX_ADC1_Init+0xf0>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d4c:	4b2c      	ldr	r3, [pc, #176]	@ (8001e00 <MX_ADC1_Init+0xf0>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d52:	4b2b      	ldr	r3, [pc, #172]	@ (8001e00 <MX_ADC1_Init+0xf0>)
 8001d54:	4a2c      	ldr	r2, [pc, #176]	@ (8001e08 <MX_ADC1_Init+0xf8>)
 8001d56:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d58:	4b29      	ldr	r3, [pc, #164]	@ (8001e00 <MX_ADC1_Init+0xf0>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001d5e:	4b28      	ldr	r3, [pc, #160]	@ (8001e00 <MX_ADC1_Init+0xf0>)
 8001d60:	2204      	movs	r2, #4
 8001d62:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d64:	4b26      	ldr	r3, [pc, #152]	@ (8001e00 <MX_ADC1_Init+0xf0>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001d6c:	4b24      	ldr	r3, [pc, #144]	@ (8001e00 <MX_ADC1_Init+0xf0>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d72:	4823      	ldr	r0, [pc, #140]	@ (8001e00 <MX_ADC1_Init+0xf0>)
 8001d74:	f001 fa68 	bl	8003248 <HAL_ADC_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001d7e:	f000 fb31 	bl	80023e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d86:	2301      	movs	r3, #1
 8001d88:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d8e:	463b      	mov	r3, r7
 8001d90:	4619      	mov	r1, r3
 8001d92:	481b      	ldr	r0, [pc, #108]	@ (8001e00 <MX_ADC1_Init+0xf0>)
 8001d94:	f001 fa9c 	bl	80032d0 <HAL_ADC_ConfigChannel>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001d9e:	f000 fb21 	bl	80023e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001da2:	2301      	movs	r3, #1
 8001da4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001da6:	2302      	movs	r3, #2
 8001da8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001daa:	463b      	mov	r3, r7
 8001dac:	4619      	mov	r1, r3
 8001dae:	4814      	ldr	r0, [pc, #80]	@ (8001e00 <MX_ADC1_Init+0xf0>)
 8001db0:	f001 fa8e 	bl	80032d0 <HAL_ADC_ConfigChannel>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001dba:	f000 fb13 	bl	80023e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dc6:	463b      	mov	r3, r7
 8001dc8:	4619      	mov	r1, r3
 8001dca:	480d      	ldr	r0, [pc, #52]	@ (8001e00 <MX_ADC1_Init+0xf0>)
 8001dcc:	f001 fa80 	bl	80032d0 <HAL_ADC_ConfigChannel>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8001dd6:	f000 fb05 	bl	80023e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001dda:	2304      	movs	r3, #4
 8001ddc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001dde:	2304      	movs	r3, #4
 8001de0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001de2:	463b      	mov	r3, r7
 8001de4:	4619      	mov	r1, r3
 8001de6:	4806      	ldr	r0, [pc, #24]	@ (8001e00 <MX_ADC1_Init+0xf0>)
 8001de8:	f001 fa72 	bl	80032d0 <HAL_ADC_ConfigChannel>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8001df2:	f000 faf7 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001df6:	bf00      	nop
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	2000027c 	.word	0x2000027c
 8001e04:	40012000 	.word	0x40012000
 8001e08:	0f000001 	.word	0x0f000001

08001e0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e10:	4b12      	ldr	r3, [pc, #72]	@ (8001e5c <MX_I2C1_Init+0x50>)
 8001e12:	4a13      	ldr	r2, [pc, #76]	@ (8001e60 <MX_I2C1_Init+0x54>)
 8001e14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001e16:	4b11      	ldr	r3, [pc, #68]	@ (8001e5c <MX_I2C1_Init+0x50>)
 8001e18:	4a12      	ldr	r2, [pc, #72]	@ (8001e64 <MX_I2C1_Init+0x58>)
 8001e1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e5c <MX_I2C1_Init+0x50>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e22:	4b0e      	ldr	r3, [pc, #56]	@ (8001e5c <MX_I2C1_Init+0x50>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e28:	4b0c      	ldr	r3, [pc, #48]	@ (8001e5c <MX_I2C1_Init+0x50>)
 8001e2a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e30:	4b0a      	ldr	r3, [pc, #40]	@ (8001e5c <MX_I2C1_Init+0x50>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e36:	4b09      	ldr	r3, [pc, #36]	@ (8001e5c <MX_I2C1_Init+0x50>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e3c:	4b07      	ldr	r3, [pc, #28]	@ (8001e5c <MX_I2C1_Init+0x50>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e42:	4b06      	ldr	r3, [pc, #24]	@ (8001e5c <MX_I2C1_Init+0x50>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e48:	4804      	ldr	r0, [pc, #16]	@ (8001e5c <MX_I2C1_Init+0x50>)
 8001e4a:	f002 fb2d 	bl	80044a8 <HAL_I2C_Init>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e54:	f000 fac6 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e58:	bf00      	nop
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20000324 	.word	0x20000324
 8001e60:	40005400 	.word	0x40005400
 8001e64:	00061a80 	.word	0x00061a80

08001e68 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e6c:	4b12      	ldr	r3, [pc, #72]	@ (8001eb8 <MX_I2C2_Init+0x50>)
 8001e6e:	4a13      	ldr	r2, [pc, #76]	@ (8001ebc <MX_I2C2_Init+0x54>)
 8001e70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001e72:	4b11      	ldr	r3, [pc, #68]	@ (8001eb8 <MX_I2C2_Init+0x50>)
 8001e74:	4a12      	ldr	r2, [pc, #72]	@ (8001ec0 <MX_I2C2_Init+0x58>)
 8001e76:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e78:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb8 <MX_I2C2_Init+0x50>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb8 <MX_I2C2_Init+0x50>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e84:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb8 <MX_I2C2_Init+0x50>)
 8001e86:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e8a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb8 <MX_I2C2_Init+0x50>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001e92:	4b09      	ldr	r3, [pc, #36]	@ (8001eb8 <MX_I2C2_Init+0x50>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e98:	4b07      	ldr	r3, [pc, #28]	@ (8001eb8 <MX_I2C2_Init+0x50>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e9e:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <MX_I2C2_Init+0x50>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ea4:	4804      	ldr	r0, [pc, #16]	@ (8001eb8 <MX_I2C2_Init+0x50>)
 8001ea6:	f002 faff 	bl	80044a8 <HAL_I2C_Init>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001eb0:	f000 fa98 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001eb4:	bf00      	nop
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20000378 	.word	0x20000378
 8001ebc:	40005800 	.word	0x40005800
 8001ec0:	00061a80 	.word	0x00061a80

08001ec4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08a      	sub	sp, #40	@ 0x28
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eca:	f107 0320 	add.w	r3, r7, #32
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	605a      	str	r2, [r3, #4]
 8001edc:	609a      	str	r2, [r3, #8]
 8001ede:	60da      	str	r2, [r3, #12]
 8001ee0:	611a      	str	r2, [r3, #16]
 8001ee2:	615a      	str	r2, [r3, #20]
 8001ee4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ee6:	4b2d      	ldr	r3, [pc, #180]	@ (8001f9c <MX_TIM2_Init+0xd8>)
 8001ee8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001eec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8001eee:	4b2b      	ldr	r3, [pc, #172]	@ (8001f9c <MX_TIM2_Init+0xd8>)
 8001ef0:	220a      	movs	r2, #10
 8001ef2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef4:	4b29      	ldr	r3, [pc, #164]	@ (8001f9c <MX_TIM2_Init+0xd8>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001efa:	4b28      	ldr	r3, [pc, #160]	@ (8001f9c <MX_TIM2_Init+0xd8>)
 8001efc:	22ff      	movs	r2, #255	@ 0xff
 8001efe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f00:	4b26      	ldr	r3, [pc, #152]	@ (8001f9c <MX_TIM2_Init+0xd8>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f06:	4b25      	ldr	r3, [pc, #148]	@ (8001f9c <MX_TIM2_Init+0xd8>)
 8001f08:	2280      	movs	r2, #128	@ 0x80
 8001f0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f0c:	4823      	ldr	r0, [pc, #140]	@ (8001f9c <MX_TIM2_Init+0xd8>)
 8001f0e:	f004 fa22 	bl	8006356 <HAL_TIM_PWM_Init>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001f18:	f000 fa64 	bl	80023e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f24:	f107 0320 	add.w	r3, r7, #32
 8001f28:	4619      	mov	r1, r3
 8001f2a:	481c      	ldr	r0, [pc, #112]	@ (8001f9c <MX_TIM2_Init+0xd8>)
 8001f2c:	f004 ff86 	bl	8006e3c <HAL_TIMEx_MasterConfigSynchronization>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001f36:	f000 fa55 	bl	80023e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f3a:	2360      	movs	r3, #96	@ 0x60
 8001f3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f4a:	1d3b      	adds	r3, r7, #4
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4812      	ldr	r0, [pc, #72]	@ (8001f9c <MX_TIM2_Init+0xd8>)
 8001f52:	f004 fc4b 	bl	80067ec <HAL_TIM_PWM_ConfigChannel>
 8001f56:	4603      	mov	r3, r0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d001      	beq.n	8001f60 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001f5c:	f000 fa42 	bl	80023e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f60:	1d3b      	adds	r3, r7, #4
 8001f62:	2204      	movs	r2, #4
 8001f64:	4619      	mov	r1, r3
 8001f66:	480d      	ldr	r0, [pc, #52]	@ (8001f9c <MX_TIM2_Init+0xd8>)
 8001f68:	f004 fc40 	bl	80067ec <HAL_TIM_PWM_ConfigChannel>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001f72:	f000 fa37 	bl	80023e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f76:	1d3b      	adds	r3, r7, #4
 8001f78:	2208      	movs	r2, #8
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4807      	ldr	r0, [pc, #28]	@ (8001f9c <MX_TIM2_Init+0xd8>)
 8001f7e:	f004 fc35 	bl	80067ec <HAL_TIM_PWM_ConfigChannel>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8001f88:	f000 fa2c 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f8c:	4803      	ldr	r0, [pc, #12]	@ (8001f9c <MX_TIM2_Init+0xd8>)
 8001f8e:	f000 fe05 	bl	8002b9c <HAL_TIM_MspPostInit>

}
 8001f92:	bf00      	nop
 8001f94:	3728      	adds	r7, #40	@ 0x28
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	2000054c 	.word	0x2000054c

08001fa0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08a      	sub	sp, #40	@ 0x28
 8001fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fa6:	f107 0320 	add.w	r3, r7, #32
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
 8001fae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	609a      	str	r2, [r3, #8]
 8001fba:	60da      	str	r2, [r3, #12]
 8001fbc:	611a      	str	r2, [r3, #16]
 8001fbe:	615a      	str	r2, [r3, #20]
 8001fc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fc2:	4b2c      	ldr	r3, [pc, #176]	@ (8002074 <MX_TIM3_Init+0xd4>)
 8001fc4:	4a2c      	ldr	r2, [pc, #176]	@ (8002078 <MX_TIM3_Init+0xd8>)
 8001fc6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10;
 8001fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8002074 <MX_TIM3_Init+0xd4>)
 8001fca:	220a      	movs	r2, #10
 8001fcc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fce:	4b29      	ldr	r3, [pc, #164]	@ (8002074 <MX_TIM3_Init+0xd4>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8001fd4:	4b27      	ldr	r3, [pc, #156]	@ (8002074 <MX_TIM3_Init+0xd4>)
 8001fd6:	22ff      	movs	r2, #255	@ 0xff
 8001fd8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fda:	4b26      	ldr	r3, [pc, #152]	@ (8002074 <MX_TIM3_Init+0xd4>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fe0:	4b24      	ldr	r3, [pc, #144]	@ (8002074 <MX_TIM3_Init+0xd4>)
 8001fe2:	2280      	movs	r2, #128	@ 0x80
 8001fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001fe6:	4823      	ldr	r0, [pc, #140]	@ (8002074 <MX_TIM3_Init+0xd4>)
 8001fe8:	f004 f9b5 	bl	8006356 <HAL_TIM_PWM_Init>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001ff2:	f000 f9f7 	bl	80023e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ffe:	f107 0320 	add.w	r3, r7, #32
 8002002:	4619      	mov	r1, r3
 8002004:	481b      	ldr	r0, [pc, #108]	@ (8002074 <MX_TIM3_Init+0xd4>)
 8002006:	f004 ff19 	bl	8006e3c <HAL_TIMEx_MasterConfigSynchronization>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8002010:	f000 f9e8 	bl	80023e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002014:	2360      	movs	r3, #96	@ 0x60
 8002016:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800201c:	2300      	movs	r3, #0
 800201e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002020:	2300      	movs	r3, #0
 8002022:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002024:	1d3b      	adds	r3, r7, #4
 8002026:	2200      	movs	r2, #0
 8002028:	4619      	mov	r1, r3
 800202a:	4812      	ldr	r0, [pc, #72]	@ (8002074 <MX_TIM3_Init+0xd4>)
 800202c:	f004 fbde 	bl	80067ec <HAL_TIM_PWM_ConfigChannel>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002036:	f000 f9d5 	bl	80023e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800203a:	1d3b      	adds	r3, r7, #4
 800203c:	2204      	movs	r2, #4
 800203e:	4619      	mov	r1, r3
 8002040:	480c      	ldr	r0, [pc, #48]	@ (8002074 <MX_TIM3_Init+0xd4>)
 8002042:	f004 fbd3 	bl	80067ec <HAL_TIM_PWM_ConfigChannel>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800204c:	f000 f9ca 	bl	80023e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	2208      	movs	r2, #8
 8002054:	4619      	mov	r1, r3
 8002056:	4807      	ldr	r0, [pc, #28]	@ (8002074 <MX_TIM3_Init+0xd4>)
 8002058:	f004 fbc8 	bl	80067ec <HAL_TIM_PWM_ConfigChannel>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8002062:	f000 f9bf 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002066:	4803      	ldr	r0, [pc, #12]	@ (8002074 <MX_TIM3_Init+0xd4>)
 8002068:	f000 fd98 	bl	8002b9c <HAL_TIM_MspPostInit>

}
 800206c:	bf00      	nop
 800206e:	3728      	adds	r7, #40	@ 0x28
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000594 	.word	0x20000594
 8002078:	40000400 	.word	0x40000400

0800207c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08a      	sub	sp, #40	@ 0x28
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002082:	f107 0320 	add.w	r3, r7, #32
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800208c:	1d3b      	adds	r3, r7, #4
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	605a      	str	r2, [r3, #4]
 8002094:	609a      	str	r2, [r3, #8]
 8002096:	60da      	str	r2, [r3, #12]
 8002098:	611a      	str	r2, [r3, #16]
 800209a:	615a      	str	r2, [r3, #20]
 800209c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800209e:	4b20      	ldr	r3, [pc, #128]	@ (8002120 <MX_TIM4_Init+0xa4>)
 80020a0:	4a20      	ldr	r2, [pc, #128]	@ (8002124 <MX_TIM4_Init+0xa8>)
 80020a2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 95;
 80020a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002120 <MX_TIM4_Init+0xa4>)
 80020a6:	225f      	movs	r2, #95	@ 0x5f
 80020a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020aa:	4b1d      	ldr	r3, [pc, #116]	@ (8002120 <MX_TIM4_Init+0xa4>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 80020b0:	4b1b      	ldr	r3, [pc, #108]	@ (8002120 <MX_TIM4_Init+0xa4>)
 80020b2:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80020b6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b8:	4b19      	ldr	r3, [pc, #100]	@ (8002120 <MX_TIM4_Init+0xa4>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020be:	4b18      	ldr	r3, [pc, #96]	@ (8002120 <MX_TIM4_Init+0xa4>)
 80020c0:	2280      	movs	r2, #128	@ 0x80
 80020c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80020c4:	4816      	ldr	r0, [pc, #88]	@ (8002120 <MX_TIM4_Init+0xa4>)
 80020c6:	f004 f8f7 	bl	80062b8 <HAL_TIM_OC_Init>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80020d0:	f000 f988 	bl	80023e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d4:	2300      	movs	r3, #0
 80020d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d8:	2300      	movs	r3, #0
 80020da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020dc:	f107 0320 	add.w	r3, r7, #32
 80020e0:	4619      	mov	r1, r3
 80020e2:	480f      	ldr	r0, [pc, #60]	@ (8002120 <MX_TIM4_Init+0xa4>)
 80020e4:	f004 feaa 	bl	8006e3c <HAL_TIMEx_MasterConfigSynchronization>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80020ee:	f000 f979 	bl	80023e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80020f2:	2300      	movs	r3, #0
 80020f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002102:	1d3b      	adds	r3, r7, #4
 8002104:	2200      	movs	r2, #0
 8002106:	4619      	mov	r1, r3
 8002108:	4805      	ldr	r0, [pc, #20]	@ (8002120 <MX_TIM4_Init+0xa4>)
 800210a:	f004 fb13 	bl	8006734 <HAL_TIM_OC_ConfigChannel>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002114:	f000 f966 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002118:	bf00      	nop
 800211a:	3728      	adds	r7, #40	@ 0x28
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	200005dc 	.word	0x200005dc
 8002124:	40000800 	.word	0x40000800

08002128 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800212c:	4b11      	ldr	r3, [pc, #68]	@ (8002174 <MX_USART1_UART_Init+0x4c>)
 800212e:	4a12      	ldr	r2, [pc, #72]	@ (8002178 <MX_USART1_UART_Init+0x50>)
 8002130:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002132:	4b10      	ldr	r3, [pc, #64]	@ (8002174 <MX_USART1_UART_Init+0x4c>)
 8002134:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002138:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800213a:	4b0e      	ldr	r3, [pc, #56]	@ (8002174 <MX_USART1_UART_Init+0x4c>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002140:	4b0c      	ldr	r3, [pc, #48]	@ (8002174 <MX_USART1_UART_Init+0x4c>)
 8002142:	2200      	movs	r2, #0
 8002144:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002146:	4b0b      	ldr	r3, [pc, #44]	@ (8002174 <MX_USART1_UART_Init+0x4c>)
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800214c:	4b09      	ldr	r3, [pc, #36]	@ (8002174 <MX_USART1_UART_Init+0x4c>)
 800214e:	220c      	movs	r2, #12
 8002150:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002152:	4b08      	ldr	r3, [pc, #32]	@ (8002174 <MX_USART1_UART_Init+0x4c>)
 8002154:	2200      	movs	r2, #0
 8002156:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002158:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <MX_USART1_UART_Init+0x4c>)
 800215a:	2200      	movs	r2, #0
 800215c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800215e:	4805      	ldr	r0, [pc, #20]	@ (8002174 <MX_USART1_UART_Init+0x4c>)
 8002160:	f004 feee 	bl	8006f40 <HAL_UART_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800216a:	f000 f93b 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000624 	.word	0x20000624
 8002178:	40011000 	.word	0x40011000

0800217c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	607b      	str	r3, [r7, #4]
 8002186:	4b2b      	ldr	r3, [pc, #172]	@ (8002234 <MX_DMA_Init+0xb8>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	4a2a      	ldr	r2, [pc, #168]	@ (8002234 <MX_DMA_Init+0xb8>)
 800218c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002190:	6313      	str	r3, [r2, #48]	@ 0x30
 8002192:	4b28      	ldr	r3, [pc, #160]	@ (8002234 <MX_DMA_Init+0xb8>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	603b      	str	r3, [r7, #0]
 80021a2:	4b24      	ldr	r3, [pc, #144]	@ (8002234 <MX_DMA_Init+0xb8>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021a6:	4a23      	ldr	r2, [pc, #140]	@ (8002234 <MX_DMA_Init+0xb8>)
 80021a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ae:	4b21      	ldr	r3, [pc, #132]	@ (8002234 <MX_DMA_Init+0xb8>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021b6:	603b      	str	r3, [r7, #0]
 80021b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2100      	movs	r1, #0
 80021be:	200b      	movs	r0, #11
 80021c0:	f001 fb8f 	bl	80038e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80021c4:	200b      	movs	r0, #11
 80021c6:	f001 fba8 	bl	800391a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2100      	movs	r1, #0
 80021ce:	200c      	movs	r0, #12
 80021d0:	f001 fb87 	bl	80038e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80021d4:	200c      	movs	r0, #12
 80021d6:	f001 fba0 	bl	800391a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80021da:	2200      	movs	r2, #0
 80021dc:	2100      	movs	r1, #0
 80021de:	200d      	movs	r0, #13
 80021e0:	f001 fb7f 	bl	80038e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80021e4:	200d      	movs	r0, #13
 80021e6:	f001 fb98 	bl	800391a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80021ea:	2200      	movs	r2, #0
 80021ec:	2100      	movs	r1, #0
 80021ee:	202f      	movs	r0, #47	@ 0x2f
 80021f0:	f001 fb77 	bl	80038e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80021f4:	202f      	movs	r0, #47	@ 0x2f
 80021f6:	f001 fb90 	bl	800391a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80021fa:	2200      	movs	r2, #0
 80021fc:	2100      	movs	r1, #0
 80021fe:	2038      	movs	r0, #56	@ 0x38
 8002200:	f001 fb6f 	bl	80038e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002204:	2038      	movs	r0, #56	@ 0x38
 8002206:	f001 fb88 	bl	800391a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800220a:	2200      	movs	r2, #0
 800220c:	2100      	movs	r1, #0
 800220e:	203a      	movs	r0, #58	@ 0x3a
 8002210:	f001 fb67 	bl	80038e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002214:	203a      	movs	r0, #58	@ 0x3a
 8002216:	f001 fb80 	bl	800391a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2100      	movs	r1, #0
 800221e:	2046      	movs	r0, #70	@ 0x46
 8002220:	f001 fb5f 	bl	80038e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002224:	2046      	movs	r0, #70	@ 0x46
 8002226:	f001 fb78 	bl	800391a <HAL_NVIC_EnableIRQ>

}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40023800 	.word	0x40023800

08002238 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	@ 0x28
 800223c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800223e:	f107 0314 	add.w	r3, r7, #20
 8002242:	2200      	movs	r2, #0
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	605a      	str	r2, [r3, #4]
 8002248:	609a      	str	r2, [r3, #8]
 800224a:	60da      	str	r2, [r3, #12]
 800224c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	4b27      	ldr	r3, [pc, #156]	@ (80022f0 <MX_GPIO_Init+0xb8>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	4a26      	ldr	r2, [pc, #152]	@ (80022f0 <MX_GPIO_Init+0xb8>)
 8002258:	f043 0304 	orr.w	r3, r3, #4
 800225c:	6313      	str	r3, [r2, #48]	@ 0x30
 800225e:	4b24      	ldr	r3, [pc, #144]	@ (80022f0 <MX_GPIO_Init+0xb8>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	4b20      	ldr	r3, [pc, #128]	@ (80022f0 <MX_GPIO_Init+0xb8>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002272:	4a1f      	ldr	r2, [pc, #124]	@ (80022f0 <MX_GPIO_Init+0xb8>)
 8002274:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002278:	6313      	str	r3, [r2, #48]	@ 0x30
 800227a:	4b1d      	ldr	r3, [pc, #116]	@ (80022f0 <MX_GPIO_Init+0xb8>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	4b19      	ldr	r3, [pc, #100]	@ (80022f0 <MX_GPIO_Init+0xb8>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228e:	4a18      	ldr	r2, [pc, #96]	@ (80022f0 <MX_GPIO_Init+0xb8>)
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	6313      	str	r3, [r2, #48]	@ 0x30
 8002296:	4b16      	ldr	r3, [pc, #88]	@ (80022f0 <MX_GPIO_Init+0xb8>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	607b      	str	r3, [r7, #4]
 80022a6:	4b12      	ldr	r3, [pc, #72]	@ (80022f0 <MX_GPIO_Init+0xb8>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022aa:	4a11      	ldr	r2, [pc, #68]	@ (80022f0 <MX_GPIO_Init+0xb8>)
 80022ac:	f043 0302 	orr.w	r3, r3, #2
 80022b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b2:	4b0f      	ldr	r3, [pc, #60]	@ (80022f0 <MX_GPIO_Init+0xb8>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	607b      	str	r3, [r7, #4]
 80022bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80022be:	2200      	movs	r2, #0
 80022c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80022c4:	480b      	ldr	r0, [pc, #44]	@ (80022f4 <MX_GPIO_Init+0xbc>)
 80022c6:	f002 f8d5 	bl	8004474 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80022ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d0:	2301      	movs	r3, #1
 80022d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d8:	2300      	movs	r3, #0
 80022da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022dc:	f107 0314 	add.w	r3, r7, #20
 80022e0:	4619      	mov	r1, r3
 80022e2:	4804      	ldr	r0, [pc, #16]	@ (80022f4 <MX_GPIO_Init+0xbc>)
 80022e4:	f001 ff42 	bl	800416c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80022e8:	bf00      	nop
 80022ea:	3728      	adds	r7, #40	@ 0x28
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40020800 	.word	0x40020800

080022f8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
	/* Set I2C receive complete flags  */
	if(hi2c->Instance == I2C1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a0e      	ldr	r2, [pc, #56]	@ (8002340 <HAL_I2C_MemRxCpltCallback+0x48>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d107      	bne.n	800231a <HAL_I2C_MemRxCpltCallback+0x22>
	{
		EVENT_FLAGS |= I2C1_DMA_FLAG;
 800230a:	4b0e      	ldr	r3, [pc, #56]	@ (8002344 <HAL_I2C_MemRxCpltCallback+0x4c>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	b2da      	uxtb	r2, r3
 8002314:	4b0b      	ldr	r3, [pc, #44]	@ (8002344 <HAL_I2C_MemRxCpltCallback+0x4c>)
 8002316:	701a      	strb	r2, [r3, #0]
	}
	else if(hi2c->Instance == I2C2)
	{
		EVENT_FLAGS |= I2C2_DMA_FLAG;
	}
}
 8002318:	e00b      	b.n	8002332 <HAL_I2C_MemRxCpltCallback+0x3a>
	else if(hi2c->Instance == I2C2)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a0a      	ldr	r2, [pc, #40]	@ (8002348 <HAL_I2C_MemRxCpltCallback+0x50>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d106      	bne.n	8002332 <HAL_I2C_MemRxCpltCallback+0x3a>
		EVENT_FLAGS |= I2C2_DMA_FLAG;
 8002324:	4b07      	ldr	r3, [pc, #28]	@ (8002344 <HAL_I2C_MemRxCpltCallback+0x4c>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	f043 0302 	orr.w	r3, r3, #2
 800232c:	b2da      	uxtb	r2, r3
 800232e:	4b05      	ldr	r3, [pc, #20]	@ (8002344 <HAL_I2C_MemRxCpltCallback+0x4c>)
 8002330:	701a      	strb	r2, [r3, #0]
}
 8002332:	bf00      	nop
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40005400 	.word	0x40005400
 8002344:	2000072c 	.word	0x2000072c
 8002348:	40005800 	.word	0x40005800

0800234c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1f      	ldr	r2, [pc, #124]	@ (80023d8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d137      	bne.n	80023ce <HAL_TIM_PeriodElapsedCallback+0x82>
        }

#endif

        /* Check I2C ch1 data receive complete */
        if(EVENT_FLAGS & I2C1_DMA_FLAG)
 800235e:	4b1f      	ldr	r3, [pc, #124]	@ (80023dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d015      	beq.n	8002396 <HAL_TIM_PeriodElapsedCallback+0x4a>
        {
        	if(BLDCMotorArray[0] != NULL && BLDCMotorArray[0]->sensor != NULL)
 800236a:	4b1d      	ldr	r3, [pc, #116]	@ (80023e0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d011      	beq.n	8002396 <HAL_TIM_PeriodElapsedCallback+0x4a>
 8002372:	4b1b      	ldr	r3, [pc, #108]	@ (80023e0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00c      	beq.n	8002396 <HAL_TIM_PeriodElapsedCallback+0x4a>
        	{
        		EVENT_FLAGS &= (~I2C1_DMA_FLAG);
 800237c:	4b17      	ldr	r3, [pc, #92]	@ (80023dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	f023 0301 	bic.w	r3, r3, #1
 8002384:	b2da      	uxtb	r2, r3
 8002386:	4b15      	ldr	r3, [pc, #84]	@ (80023dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002388:	701a      	strb	r2, [r3, #0]

        		/* Start new DMA read */
        		AS5600_UpdateAngle_DMA(BLDCMotorArray[0]->sensor);
 800238a:	4b15      	ldr	r3, [pc, #84]	@ (80023e0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe ff49 	bl	8001228 <AS5600_UpdateAngle_DMA>
        	}
        }

        /* Check I2C ch2 data receive complete */
        if(EVENT_FLAGS & I2C2_DMA_FLAG)
 8002396:	4b11      	ldr	r3, [pc, #68]	@ (80023dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d015      	beq.n	80023ce <HAL_TIM_PeriodElapsedCallback+0x82>
        {
             if(BLDCMotorArray[1] != NULL && BLDCMotorArray[1]->sensor != NULL)
 80023a2:	4b0f      	ldr	r3, [pc, #60]	@ (80023e0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d011      	beq.n	80023ce <HAL_TIM_PeriodElapsedCallback+0x82>
 80023aa:	4b0d      	ldr	r3, [pc, #52]	@ (80023e0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00c      	beq.n	80023ce <HAL_TIM_PeriodElapsedCallback+0x82>
             {
            	EVENT_FLAGS &= (~I2C2_DMA_FLAG);
 80023b4:	4b09      	ldr	r3, [pc, #36]	@ (80023dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	f023 0302 	bic.w	r3, r3, #2
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	4b07      	ldr	r3, [pc, #28]	@ (80023dc <HAL_TIM_PeriodElapsedCallback+0x90>)
 80023c0:	701a      	strb	r2, [r3, #0]

            	/* Start new DMA read */
                AS5600_UpdateAngle_DMA(BLDCMotorArray[1]->sensor);
 80023c2:	4b07      	ldr	r3, [pc, #28]	@ (80023e0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe ff2d 	bl	8001228 <AS5600_UpdateAngle_DMA>
        else {
        	OLED_CallbackCounter++;
        }
#endif
    }
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40000800 	.word	0x40000800
 80023dc:	2000072c 	.word	0x2000072c
 80023e0:	20000274 	.word	0x20000274

080023e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023e8:	b672      	cpsid	i
}
 80023ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023ec:	bf00      	nop
 80023ee:	e7fd      	b.n	80023ec <Error_Handler+0x8>

080023f0 <micros>:
__STATIC_INLINE uint32_t micros(void){
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 80023f4:	4b07      	ldr	r3, [pc, #28]	@ (8002414 <micros+0x24>)
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	4b07      	ldr	r3, [pc, #28]	@ (8002418 <micros+0x28>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4907      	ldr	r1, [pc, #28]	@ (800241c <micros+0x2c>)
 80023fe:	fba1 1303 	umull	r1, r3, r1, r3
 8002402:	0c9b      	lsrs	r3, r3, #18
 8002404:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002408:	4618      	mov	r0, r3
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	e0001000 	.word	0xe0001000
 8002418:	20000084 	.word	0x20000084
 800241c:	431bde83 	.word	0x431bde83

08002420 <PID_Init>:
 * @params[in] float ki
 * @params[in] float kd
 * @retval PID structure
 */
PID_t PID_Init()
{
 8002420:	b4b0      	push	{r4, r5, r7}
 8002422:	b08d      	sub	sp, #52	@ 0x34
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
	PID_t PID_dev =
 8002428:	4b0e      	ldr	r3, [pc, #56]	@ (8002464 <PID_Init+0x44>)
 800242a:	f107 0408 	add.w	r4, r7, #8
 800242e:	461d      	mov	r5, r3
 8002430:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002432:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002438:	e895 0003 	ldmia.w	r5, {r0, r1}
 800243c:	e884 0003 	stmia.w	r4, {r0, r1}
		.upper_bound = 10,
		.timestamp_us = 0,
		.mode = P
	};

	return PID_dev;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	461d      	mov	r5, r3
 8002444:	f107 0408 	add.w	r4, r7, #8
 8002448:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800244a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800244c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800244e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002450:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002454:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	3734      	adds	r7, #52	@ 0x34
 800245c:	46bd      	mov	sp, r7
 800245e:	bcb0      	pop	{r4, r5, r7}
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	0800cb90 	.word	0x0800cb90

08002468 <PID_Compute>:
 * @param[in] float setpoint
 * @param[in] float input value
 * @retval float PID output
 */
float PID_Compute(PID_t* PID_dev, float setpoint, float input)
{
 8002468:	b5b0      	push	{r4, r5, r7, lr}
 800246a:	b08c      	sub	sp, #48	@ 0x30
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	ed87 0a02 	vstr	s0, [r7, #8]
 8002474:	edc7 0a01 	vstr	s1, [r7, #4]
	uint32_t now_us = micros();
 8002478:	f7ff ffba 	bl	80023f0 <micros>
 800247c:	6238      	str	r0, [r7, #32]

	float error = setpoint - input;
 800247e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002482:	edd7 7a01 	vldr	s15, [r7, #4]
 8002486:	ee77 7a67 	vsub.f32	s15, s14, s15
 800248a:	edc7 7a07 	vstr	s15, [r7, #28]

	/* Save time delta as uint32_t first to handle overflows naturally */
	uint32_t dt_us = now_us - PID_dev->timestamp_us;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	6a3a      	ldr	r2, [r7, #32]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	61bb      	str	r3, [r7, #24]
	float dt = dt_us * 0.000001;
 8002498:	69b8      	ldr	r0, [r7, #24]
 800249a:	f7fe f83b 	bl	8000514 <__aeabi_ui2d>
 800249e:	a372      	add	r3, pc, #456	@ (adr r3, 8002668 <PID_Compute+0x200>)
 80024a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a4:	f7fe f8b0 	bl	8000608 <__aeabi_dmul>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4610      	mov	r0, r2
 80024ae:	4619      	mov	r1, r3
 80024b0:	f7fe fba2 	bl	8000bf8 <__aeabi_d2f>
 80024b4:	4603      	mov	r3, r0
 80024b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Proportional term calculation */
	float p_term = PID_dev->kp * error;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	edd3 7a00 	vldr	s15, [r3]
 80024be:	ed97 7a07 	vldr	s14, [r7, #28]
 80024c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c6:	edc7 7a05 	vstr	s15, [r7, #20]

	/* If time delta is unreasonable, only return proportional term since it is not time-based */
	if(PID_dev->mode == P || dt <= 0 || dt > 0.2)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d011      	beq.n	80024f8 <PID_Compute+0x90>
 80024d4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80024d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e0:	d90a      	bls.n	80024f8 <PID_Compute+0x90>
 80024e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80024e4:	f7fe f838 	bl	8000558 <__aeabi_f2d>
 80024e8:	a361      	add	r3, pc, #388	@ (adr r3, 8002670 <PID_Compute+0x208>)
 80024ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ee:	f7fe fb1b 	bl	8000b28 <__aeabi_dcmpgt>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d005      	beq.n	8002504 <PID_Compute+0x9c>
	{
		PID_dev->timestamp_us = now_us;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a3a      	ldr	r2, [r7, #32]
 80024fc:	621a      	str	r2, [r3, #32]
		return p_term;
 80024fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002502:	e09d      	b.n	8002640 <PID_Compute+0x1d8>
	}

	/* Integral term calculation */
	float i_term = 0;
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	62bb      	str	r3, [r7, #40]	@ 0x28

	if(PID_dev->mode == PI)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002510:	2b01      	cmp	r3, #1
 8002512:	d13e      	bne.n	8002592 <PID_Compute+0x12a>
	{
		/* Accumulate integral value using Riemann midpoint rule */
		PID_dev->integral += PID_dev->ki * dt * 0.5f * (error + PID_dev->last_error);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	ed93 7a03 	vldr	s14, [r3, #12]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002520:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002524:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002528:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800252c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	ed93 6a04 	vldr	s12, [r3, #16]
 8002536:	edd7 7a07 	vldr	s15, [r7, #28]
 800253a:	ee76 7a27 	vadd.f32	s15, s12, s15
 800253e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	edc3 7a03 	vstr	s15, [r3, #12]
		PID_dev->integral = _constrain(PID_dev->integral, PID_dev->lower_bound, PID_dev->upper_bound);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	edd3 7a06 	vldr	s15, [r3, #24]
 8002558:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800255c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002560:	d502      	bpl.n	8002568 <PID_Compute+0x100>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	e00f      	b.n	8002588 <PID_Compute+0x120>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	ed93 7a03 	vldr	s14, [r3, #12]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	edd3 7a07 	vldr	s15, [r3, #28]
 8002574:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257c:	dd02      	ble.n	8002584 <PID_Compute+0x11c>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	e001      	b.n	8002588 <PID_Compute+0x120>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	60d3      	str	r3, [r2, #12]
		i_term = PID_dev->integral;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	62bb      	str	r3, [r7, #40]	@ 0x28
	}

	/* Derivative term calculation */
	float d_term = 0;
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	627b      	str	r3, [r7, #36]	@ 0x24

	if(PID_dev->mode == PID)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d13e      	bne.n	8002620 <PID_Compute+0x1b8>
	{
		/* If dt is too small, set to a reasonable value to avoid division by extremely small numbers */
		if(dt < 0.00001f)
 80025a2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80025a6:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002660 <PID_Compute+0x1f8>
 80025aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b2:	d501      	bpl.n	80025b8 <PID_Compute+0x150>
		{
			dt = 0.00001f;
 80025b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002664 <PID_Compute+0x1fc>)
 80025b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}

		/* Check error difference & apply simple LPF */
		d_term = (error - PID_dev->last_error) / dt;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	edd3 7a04 	vldr	s15, [r3, #16]
 80025be:	ed97 7a07 	vldr	s14, [r7, #28]
 80025c2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80025c6:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80025ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025ce:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		d_term = PID_LPF_ALPHA * d_term + (1 - PID_LPF_ALPHA) * PID_dev->last_derivative;
 80025d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80025d4:	f7fd ffc0 	bl	8000558 <__aeabi_f2d>
 80025d8:	a31d      	add	r3, pc, #116	@ (adr r3, 8002650 <PID_Compute+0x1e8>)
 80025da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025de:	f7fe f813 	bl	8000608 <__aeabi_dmul>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4614      	mov	r4, r2
 80025e8:	461d      	mov	r5, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fd ffb2 	bl	8000558 <__aeabi_f2d>
 80025f4:	a318      	add	r3, pc, #96	@ (adr r3, 8002658 <PID_Compute+0x1f0>)
 80025f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fa:	f7fe f805 	bl	8000608 <__aeabi_dmul>
 80025fe:	4602      	mov	r2, r0
 8002600:	460b      	mov	r3, r1
 8002602:	4620      	mov	r0, r4
 8002604:	4629      	mov	r1, r5
 8002606:	f7fd fe49 	bl	800029c <__adddf3>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	4610      	mov	r0, r2
 8002610:	4619      	mov	r1, r3
 8002612:	f7fe faf1 	bl	8000bf8 <__aeabi_d2f>
 8002616:	4603      	mov	r3, r0
 8002618:	627b      	str	r3, [r7, #36]	@ 0x24
		PID_dev->last_derivative = d_term;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800261e:	615a      	str	r2, [r3, #20]
	}

	PID_dev->last_error = error;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	69fa      	ldr	r2, [r7, #28]
 8002624:	611a      	str	r2, [r3, #16]
	PID_dev->timestamp_us = now_us;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6a3a      	ldr	r2, [r7, #32]
 800262a:	621a      	str	r2, [r3, #32]

	return p_term + i_term + d_term;
 800262c:	ed97 7a05 	vldr	s14, [r7, #20]
 8002630:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002634:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002638:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800263c:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002640:	eeb0 0a67 	vmov.f32	s0, s15
 8002644:	3730      	adds	r7, #48	@ 0x30
 8002646:	46bd      	mov	sp, r7
 8002648:	bdb0      	pop	{r4, r5, r7, pc}
 800264a:	bf00      	nop
 800264c:	f3af 8000 	nop.w
 8002650:	9999999a 	.word	0x9999999a
 8002654:	3fb99999 	.word	0x3fb99999
 8002658:	cccccccd 	.word	0xcccccccd
 800265c:	3feccccc 	.word	0x3feccccc
 8002660:	3727c5ac 	.word	0x3727c5ac
 8002664:	3727c5ac 	.word	0x3727c5ac
 8002668:	a0b5ed8d 	.word	0xa0b5ed8d
 800266c:	3eb0c6f7 	.word	0x3eb0c6f7
 8002670:	9999999a 	.word	0x9999999a
 8002674:	3fc99999 	.word	0x3fc99999

08002678 <SerialCommander_Init>:
 * @param[in] UART handle
 * @retval -
 * @note Pass NULL for second motor ptr if only using 1 motor
 */
__INLINE void SerialCommander_Init(UART_HandleTypeDef* huart)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
	serial_dev.uart = huart;
 8002680:	4a0a      	ldr	r2, [pc, #40]	@ (80026ac <SerialCommander_Init+0x34>)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6093      	str	r3, [r2, #8]
	serial_dev.m0 = BLDCMotorArray[0];
 8002686:	4b0a      	ldr	r3, [pc, #40]	@ (80026b0 <SerialCommander_Init+0x38>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a08      	ldr	r2, [pc, #32]	@ (80026ac <SerialCommander_Init+0x34>)
 800268c:	6013      	str	r3, [r2, #0]
	serial_dev.m1 = BLDCMotorArray[1];
 800268e:	4b08      	ldr	r3, [pc, #32]	@ (80026b0 <SerialCommander_Init+0x38>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	4a06      	ldr	r2, [pc, #24]	@ (80026ac <SerialCommander_Init+0x34>)
 8002694:	6053      	str	r3, [r2, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(serial_dev.uart, serial_dev.rx_buff, 32);
 8002696:	4b05      	ldr	r3, [pc, #20]	@ (80026ac <SerialCommander_Init+0x34>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2220      	movs	r2, #32
 800269c:	4905      	ldr	r1, [pc, #20]	@ (80026b4 <SerialCommander_Init+0x3c>)
 800269e:	4618      	mov	r0, r3
 80026a0:	f004 fc9e 	bl	8006fe0 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80026a4:	bf00      	nop
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20000730 	.word	0x20000730
 80026b0:	20000274 	.word	0x20000274
 80026b4:	2000073c 	.word	0x2000073c

080026b8 <HAL_UARTEx_RxEventCallback>:
/*
 * @brief DMA receive to idle interrupt callback function
 * @note Sets the receive flag to 1 and append null terminator to end of string
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	460b      	mov	r3, r1
 80026c2:	807b      	strh	r3, [r7, #2]
	/* Indicate incoming data */
	serial_dev.rx_flag = 1;
 80026c4:	4b0a      	ldr	r3, [pc, #40]	@ (80026f0 <HAL_UARTEx_RxEventCallback+0x38>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

	/* Insert null terminator for C string */
	if(Size > 15)
 80026cc:	887b      	ldrh	r3, [r7, #2]
 80026ce:	2b0f      	cmp	r3, #15
 80026d0:	d903      	bls.n	80026da <HAL_UARTEx_RxEventCallback+0x22>
	{
		serial_dev.rx_buff[15] = '\0';
 80026d2:	4b07      	ldr	r3, [pc, #28]	@ (80026f0 <HAL_UARTEx_RxEventCallback+0x38>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	76da      	strb	r2, [r3, #27]
	}
	else
	{
		serial_dev.rx_buff[Size] = '\0';
	}
}
 80026d8:	e004      	b.n	80026e4 <HAL_UARTEx_RxEventCallback+0x2c>
		serial_dev.rx_buff[Size] = '\0';
 80026da:	887b      	ldrh	r3, [r7, #2]
 80026dc:	4a04      	ldr	r2, [pc, #16]	@ (80026f0 <HAL_UARTEx_RxEventCallback+0x38>)
 80026de:	4413      	add	r3, r2
 80026e0:	2200      	movs	r2, #0
 80026e2:	731a      	strb	r2, [r3, #12]
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	20000730 	.word	0x20000730

080026f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	607b      	str	r3, [r7, #4]
 80026fe:	4b10      	ldr	r3, [pc, #64]	@ (8002740 <HAL_MspInit+0x4c>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002702:	4a0f      	ldr	r2, [pc, #60]	@ (8002740 <HAL_MspInit+0x4c>)
 8002704:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002708:	6453      	str	r3, [r2, #68]	@ 0x44
 800270a:	4b0d      	ldr	r3, [pc, #52]	@ (8002740 <HAL_MspInit+0x4c>)
 800270c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002712:	607b      	str	r3, [r7, #4]
 8002714:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	603b      	str	r3, [r7, #0]
 800271a:	4b09      	ldr	r3, [pc, #36]	@ (8002740 <HAL_MspInit+0x4c>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	4a08      	ldr	r2, [pc, #32]	@ (8002740 <HAL_MspInit+0x4c>)
 8002720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002724:	6413      	str	r3, [r2, #64]	@ 0x40
 8002726:	4b06      	ldr	r3, [pc, #24]	@ (8002740 <HAL_MspInit+0x4c>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800272e:	603b      	str	r3, [r7, #0]
 8002730:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002732:	bf00      	nop
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800

08002744 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08a      	sub	sp, #40	@ 0x28
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274c:	f107 0314 	add.w	r3, r7, #20
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	605a      	str	r2, [r3, #4]
 8002756:	609a      	str	r2, [r3, #8]
 8002758:	60da      	str	r2, [r3, #12]
 800275a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a2f      	ldr	r2, [pc, #188]	@ (8002820 <HAL_ADC_MspInit+0xdc>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d157      	bne.n	8002816 <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	4b2e      	ldr	r3, [pc, #184]	@ (8002824 <HAL_ADC_MspInit+0xe0>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276e:	4a2d      	ldr	r2, [pc, #180]	@ (8002824 <HAL_ADC_MspInit+0xe0>)
 8002770:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002774:	6453      	str	r3, [r2, #68]	@ 0x44
 8002776:	4b2b      	ldr	r3, [pc, #172]	@ (8002824 <HAL_ADC_MspInit+0xe0>)
 8002778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800277a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	4b27      	ldr	r3, [pc, #156]	@ (8002824 <HAL_ADC_MspInit+0xe0>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278a:	4a26      	ldr	r2, [pc, #152]	@ (8002824 <HAL_ADC_MspInit+0xe0>)
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	6313      	str	r3, [r2, #48]	@ 0x30
 8002792:	4b24      	ldr	r3, [pc, #144]	@ (8002824 <HAL_ADC_MspInit+0xe0>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 800279e:	231b      	movs	r3, #27
 80027a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027a2:	2303      	movs	r3, #3
 80027a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027aa:	f107 0314 	add.w	r3, r7, #20
 80027ae:	4619      	mov	r1, r3
 80027b0:	481d      	ldr	r0, [pc, #116]	@ (8002828 <HAL_ADC_MspInit+0xe4>)
 80027b2:	f001 fcdb 	bl	800416c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80027b6:	4b1d      	ldr	r3, [pc, #116]	@ (800282c <HAL_ADC_MspInit+0xe8>)
 80027b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002830 <HAL_ADC_MspInit+0xec>)
 80027ba:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80027bc:	4b1b      	ldr	r3, [pc, #108]	@ (800282c <HAL_ADC_MspInit+0xe8>)
 80027be:	2200      	movs	r2, #0
 80027c0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027c2:	4b1a      	ldr	r3, [pc, #104]	@ (800282c <HAL_ADC_MspInit+0xe8>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027c8:	4b18      	ldr	r3, [pc, #96]	@ (800282c <HAL_ADC_MspInit+0xe8>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027ce:	4b17      	ldr	r3, [pc, #92]	@ (800282c <HAL_ADC_MspInit+0xe8>)
 80027d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027d4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027d6:	4b15      	ldr	r3, [pc, #84]	@ (800282c <HAL_ADC_MspInit+0xe8>)
 80027d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027dc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027de:	4b13      	ldr	r3, [pc, #76]	@ (800282c <HAL_ADC_MspInit+0xe8>)
 80027e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027e4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80027e6:	4b11      	ldr	r3, [pc, #68]	@ (800282c <HAL_ADC_MspInit+0xe8>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80027ec:	4b0f      	ldr	r3, [pc, #60]	@ (800282c <HAL_ADC_MspInit+0xe8>)
 80027ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80027f2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027f4:	4b0d      	ldr	r3, [pc, #52]	@ (800282c <HAL_ADC_MspInit+0xe8>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027fa:	480c      	ldr	r0, [pc, #48]	@ (800282c <HAL_ADC_MspInit+0xe8>)
 80027fc:	f001 f8a8 	bl	8003950 <HAL_DMA_Init>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002806:	f7ff fded 	bl	80023e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a07      	ldr	r2, [pc, #28]	@ (800282c <HAL_ADC_MspInit+0xe8>)
 800280e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002810:	4a06      	ldr	r2, [pc, #24]	@ (800282c <HAL_ADC_MspInit+0xe8>)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002816:	bf00      	nop
 8002818:	3728      	adds	r7, #40	@ 0x28
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40012000 	.word	0x40012000
 8002824:	40023800 	.word	0x40023800
 8002828:	40020000 	.word	0x40020000
 800282c:	200002c4 	.word	0x200002c4
 8002830:	40026410 	.word	0x40026410

08002834 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08c      	sub	sp, #48	@ 0x30
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	f107 031c 	add.w	r3, r7, #28
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a97      	ldr	r2, [pc, #604]	@ (8002ab0 <HAL_I2C_MspInit+0x27c>)
 8002852:	4293      	cmp	r3, r2
 8002854:	f040 8088 	bne.w	8002968 <HAL_I2C_MspInit+0x134>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002858:	2300      	movs	r3, #0
 800285a:	61bb      	str	r3, [r7, #24]
 800285c:	4b95      	ldr	r3, [pc, #596]	@ (8002ab4 <HAL_I2C_MspInit+0x280>)
 800285e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002860:	4a94      	ldr	r2, [pc, #592]	@ (8002ab4 <HAL_I2C_MspInit+0x280>)
 8002862:	f043 0302 	orr.w	r3, r3, #2
 8002866:	6313      	str	r3, [r2, #48]	@ 0x30
 8002868:	4b92      	ldr	r3, [pc, #584]	@ (8002ab4 <HAL_I2C_MspInit+0x280>)
 800286a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286c:	f003 0302 	and.w	r3, r3, #2
 8002870:	61bb      	str	r3, [r7, #24]
 8002872:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002874:	23c0      	movs	r3, #192	@ 0xc0
 8002876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002878:	2312      	movs	r3, #18
 800287a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002880:	2303      	movs	r3, #3
 8002882:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002884:	2304      	movs	r3, #4
 8002886:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002888:	f107 031c 	add.w	r3, r7, #28
 800288c:	4619      	mov	r1, r3
 800288e:	488a      	ldr	r0, [pc, #552]	@ (8002ab8 <HAL_I2C_MspInit+0x284>)
 8002890:	f001 fc6c 	bl	800416c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	4b86      	ldr	r3, [pc, #536]	@ (8002ab4 <HAL_I2C_MspInit+0x280>)
 800289a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289c:	4a85      	ldr	r2, [pc, #532]	@ (8002ab4 <HAL_I2C_MspInit+0x280>)
 800289e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80028a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80028a4:	4b83      	ldr	r3, [pc, #524]	@ (8002ab4 <HAL_I2C_MspInit+0x280>)
 80028a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80028b0:	4b82      	ldr	r3, [pc, #520]	@ (8002abc <HAL_I2C_MspInit+0x288>)
 80028b2:	4a83      	ldr	r2, [pc, #524]	@ (8002ac0 <HAL_I2C_MspInit+0x28c>)
 80028b4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80028b6:	4b81      	ldr	r3, [pc, #516]	@ (8002abc <HAL_I2C_MspInit+0x288>)
 80028b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028bc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028be:	4b7f      	ldr	r3, [pc, #508]	@ (8002abc <HAL_I2C_MspInit+0x288>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028c4:	4b7d      	ldr	r3, [pc, #500]	@ (8002abc <HAL_I2C_MspInit+0x288>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028ca:	4b7c      	ldr	r3, [pc, #496]	@ (8002abc <HAL_I2C_MspInit+0x288>)
 80028cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028d0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028d2:	4b7a      	ldr	r3, [pc, #488]	@ (8002abc <HAL_I2C_MspInit+0x288>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028d8:	4b78      	ldr	r3, [pc, #480]	@ (8002abc <HAL_I2C_MspInit+0x288>)
 80028da:	2200      	movs	r2, #0
 80028dc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80028de:	4b77      	ldr	r3, [pc, #476]	@ (8002abc <HAL_I2C_MspInit+0x288>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028e4:	4b75      	ldr	r3, [pc, #468]	@ (8002abc <HAL_I2C_MspInit+0x288>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028ea:	4b74      	ldr	r3, [pc, #464]	@ (8002abc <HAL_I2C_MspInit+0x288>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80028f0:	4872      	ldr	r0, [pc, #456]	@ (8002abc <HAL_I2C_MspInit+0x288>)
 80028f2:	f001 f82d 	bl	8003950 <HAL_DMA_Init>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d001      	beq.n	8002900 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80028fc:	f7ff fd72 	bl	80023e4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a6e      	ldr	r2, [pc, #440]	@ (8002abc <HAL_I2C_MspInit+0x288>)
 8002904:	639a      	str	r2, [r3, #56]	@ 0x38
 8002906:	4a6d      	ldr	r2, [pc, #436]	@ (8002abc <HAL_I2C_MspInit+0x288>)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 800290c:	4b6d      	ldr	r3, [pc, #436]	@ (8002ac4 <HAL_I2C_MspInit+0x290>)
 800290e:	4a6e      	ldr	r2, [pc, #440]	@ (8002ac8 <HAL_I2C_MspInit+0x294>)
 8002910:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8002912:	4b6c      	ldr	r3, [pc, #432]	@ (8002ac4 <HAL_I2C_MspInit+0x290>)
 8002914:	2200      	movs	r2, #0
 8002916:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002918:	4b6a      	ldr	r3, [pc, #424]	@ (8002ac4 <HAL_I2C_MspInit+0x290>)
 800291a:	2240      	movs	r2, #64	@ 0x40
 800291c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800291e:	4b69      	ldr	r3, [pc, #420]	@ (8002ac4 <HAL_I2C_MspInit+0x290>)
 8002920:	2200      	movs	r2, #0
 8002922:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002924:	4b67      	ldr	r3, [pc, #412]	@ (8002ac4 <HAL_I2C_MspInit+0x290>)
 8002926:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800292a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800292c:	4b65      	ldr	r3, [pc, #404]	@ (8002ac4 <HAL_I2C_MspInit+0x290>)
 800292e:	2200      	movs	r2, #0
 8002930:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002932:	4b64      	ldr	r3, [pc, #400]	@ (8002ac4 <HAL_I2C_MspInit+0x290>)
 8002934:	2200      	movs	r2, #0
 8002936:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002938:	4b62      	ldr	r3, [pc, #392]	@ (8002ac4 <HAL_I2C_MspInit+0x290>)
 800293a:	2200      	movs	r2, #0
 800293c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800293e:	4b61      	ldr	r3, [pc, #388]	@ (8002ac4 <HAL_I2C_MspInit+0x290>)
 8002940:	2200      	movs	r2, #0
 8002942:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002944:	4b5f      	ldr	r3, [pc, #380]	@ (8002ac4 <HAL_I2C_MspInit+0x290>)
 8002946:	2200      	movs	r2, #0
 8002948:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800294a:	485e      	ldr	r0, [pc, #376]	@ (8002ac4 <HAL_I2C_MspInit+0x290>)
 800294c:	f001 f800 	bl	8003950 <HAL_DMA_Init>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8002956:	f7ff fd45 	bl	80023e4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a59      	ldr	r2, [pc, #356]	@ (8002ac4 <HAL_I2C_MspInit+0x290>)
 800295e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002960:	4a58      	ldr	r2, [pc, #352]	@ (8002ac4 <HAL_I2C_MspInit+0x290>)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002966:	e09f      	b.n	8002aa8 <HAL_I2C_MspInit+0x274>
  else if(hi2c->Instance==I2C2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a57      	ldr	r2, [pc, #348]	@ (8002acc <HAL_I2C_MspInit+0x298>)
 800296e:	4293      	cmp	r3, r2
 8002970:	f040 809a 	bne.w	8002aa8 <HAL_I2C_MspInit+0x274>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002974:	2300      	movs	r3, #0
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	4b4e      	ldr	r3, [pc, #312]	@ (8002ab4 <HAL_I2C_MspInit+0x280>)
 800297a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297c:	4a4d      	ldr	r2, [pc, #308]	@ (8002ab4 <HAL_I2C_MspInit+0x280>)
 800297e:	f043 0302 	orr.w	r3, r3, #2
 8002982:	6313      	str	r3, [r2, #48]	@ 0x30
 8002984:	4b4b      	ldr	r3, [pc, #300]	@ (8002ab4 <HAL_I2C_MspInit+0x280>)
 8002986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002990:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002996:	2312      	movs	r3, #18
 8002998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299a:	2300      	movs	r3, #0
 800299c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299e:	2303      	movs	r3, #3
 80029a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80029a2:	2304      	movs	r3, #4
 80029a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a6:	f107 031c 	add.w	r3, r7, #28
 80029aa:	4619      	mov	r1, r3
 80029ac:	4842      	ldr	r0, [pc, #264]	@ (8002ab8 <HAL_I2C_MspInit+0x284>)
 80029ae:	f001 fbdd 	bl	800416c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80029b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029b8:	2312      	movs	r3, #18
 80029ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c0:	2303      	movs	r3, #3
 80029c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80029c4:	2309      	movs	r3, #9
 80029c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c8:	f107 031c 	add.w	r3, r7, #28
 80029cc:	4619      	mov	r1, r3
 80029ce:	483a      	ldr	r0, [pc, #232]	@ (8002ab8 <HAL_I2C_MspInit+0x284>)
 80029d0:	f001 fbcc 	bl	800416c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80029d4:	2300      	movs	r3, #0
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	4b36      	ldr	r3, [pc, #216]	@ (8002ab4 <HAL_I2C_MspInit+0x280>)
 80029da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029dc:	4a35      	ldr	r2, [pc, #212]	@ (8002ab4 <HAL_I2C_MspInit+0x280>)
 80029de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80029e4:	4b33      	ldr	r3, [pc, #204]	@ (8002ab4 <HAL_I2C_MspInit+0x280>)
 80029e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ec:	60fb      	str	r3, [r7, #12]
 80029ee:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 80029f0:	4b37      	ldr	r3, [pc, #220]	@ (8002ad0 <HAL_I2C_MspInit+0x29c>)
 80029f2:	4a38      	ldr	r2, [pc, #224]	@ (8002ad4 <HAL_I2C_MspInit+0x2a0>)
 80029f4:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80029f6:	4b36      	ldr	r3, [pc, #216]	@ (8002ad0 <HAL_I2C_MspInit+0x29c>)
 80029f8:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80029fc:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029fe:	4b34      	ldr	r3, [pc, #208]	@ (8002ad0 <HAL_I2C_MspInit+0x29c>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a04:	4b32      	ldr	r3, [pc, #200]	@ (8002ad0 <HAL_I2C_MspInit+0x29c>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a0a:	4b31      	ldr	r3, [pc, #196]	@ (8002ad0 <HAL_I2C_MspInit+0x29c>)
 8002a0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a10:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a12:	4b2f      	ldr	r3, [pc, #188]	@ (8002ad0 <HAL_I2C_MspInit+0x29c>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a18:	4b2d      	ldr	r3, [pc, #180]	@ (8002ad0 <HAL_I2C_MspInit+0x29c>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8002a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8002ad0 <HAL_I2C_MspInit+0x29c>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a24:	4b2a      	ldr	r3, [pc, #168]	@ (8002ad0 <HAL_I2C_MspInit+0x29c>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a2a:	4b29      	ldr	r3, [pc, #164]	@ (8002ad0 <HAL_I2C_MspInit+0x29c>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8002a30:	4827      	ldr	r0, [pc, #156]	@ (8002ad0 <HAL_I2C_MspInit+0x29c>)
 8002a32:	f000 ff8d 	bl	8003950 <HAL_DMA_Init>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_I2C_MspInit+0x20c>
      Error_Handler();
 8002a3c:	f7ff fcd2 	bl	80023e4 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a23      	ldr	r2, [pc, #140]	@ (8002ad0 <HAL_I2C_MspInit+0x29c>)
 8002a44:	639a      	str	r2, [r3, #56]	@ 0x38
 8002a46:	4a22      	ldr	r2, [pc, #136]	@ (8002ad0 <HAL_I2C_MspInit+0x29c>)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8002a4c:	4b22      	ldr	r3, [pc, #136]	@ (8002ad8 <HAL_I2C_MspInit+0x2a4>)
 8002a4e:	4a23      	ldr	r2, [pc, #140]	@ (8002adc <HAL_I2C_MspInit+0x2a8>)
 8002a50:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8002a52:	4b21      	ldr	r3, [pc, #132]	@ (8002ad8 <HAL_I2C_MspInit+0x2a4>)
 8002a54:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8002a58:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ad8 <HAL_I2C_MspInit+0x2a4>)
 8002a5c:	2240      	movs	r2, #64	@ 0x40
 8002a5e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a60:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad8 <HAL_I2C_MspInit+0x2a4>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a66:	4b1c      	ldr	r3, [pc, #112]	@ (8002ad8 <HAL_I2C_MspInit+0x2a4>)
 8002a68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a6c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad8 <HAL_I2C_MspInit+0x2a4>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a74:	4b18      	ldr	r3, [pc, #96]	@ (8002ad8 <HAL_I2C_MspInit+0x2a4>)
 8002a76:	2200      	movs	r2, #0
 8002a78:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8002a7a:	4b17      	ldr	r3, [pc, #92]	@ (8002ad8 <HAL_I2C_MspInit+0x2a4>)
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a80:	4b15      	ldr	r3, [pc, #84]	@ (8002ad8 <HAL_I2C_MspInit+0x2a4>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a86:	4b14      	ldr	r3, [pc, #80]	@ (8002ad8 <HAL_I2C_MspInit+0x2a4>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8002a8c:	4812      	ldr	r0, [pc, #72]	@ (8002ad8 <HAL_I2C_MspInit+0x2a4>)
 8002a8e:	f000 ff5f 	bl	8003950 <HAL_DMA_Init>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <HAL_I2C_MspInit+0x268>
      Error_Handler();
 8002a98:	f7ff fca4 	bl	80023e4 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a0e      	ldr	r2, [pc, #56]	@ (8002ad8 <HAL_I2C_MspInit+0x2a4>)
 8002aa0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002aa2:	4a0d      	ldr	r2, [pc, #52]	@ (8002ad8 <HAL_I2C_MspInit+0x2a4>)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002aa8:	bf00      	nop
 8002aaa:	3730      	adds	r7, #48	@ 0x30
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40005400 	.word	0x40005400
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	40020400 	.word	0x40020400
 8002abc:	200003cc 	.word	0x200003cc
 8002ac0:	40026010 	.word	0x40026010
 8002ac4:	2000042c 	.word	0x2000042c
 8002ac8:	40026028 	.word	0x40026028
 8002acc:	40005800 	.word	0x40005800
 8002ad0:	2000048c 	.word	0x2000048c
 8002ad4:	40026040 	.word	0x40026040
 8002ad8:	200004ec 	.word	0x200004ec
 8002adc:	400260b8 	.word	0x400260b8

08002ae0 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b085      	sub	sp, #20
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002af0:	d10e      	bne.n	8002b10 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	4b13      	ldr	r3, [pc, #76]	@ (8002b44 <HAL_TIM_PWM_MspInit+0x64>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afa:	4a12      	ldr	r2, [pc, #72]	@ (8002b44 <HAL_TIM_PWM_MspInit+0x64>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b02:	4b10      	ldr	r3, [pc, #64]	@ (8002b44 <HAL_TIM_PWM_MspInit+0x64>)
 8002b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002b0e:	e012      	b.n	8002b36 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a0c      	ldr	r2, [pc, #48]	@ (8002b48 <HAL_TIM_PWM_MspInit+0x68>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d10d      	bne.n	8002b36 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60bb      	str	r3, [r7, #8]
 8002b1e:	4b09      	ldr	r3, [pc, #36]	@ (8002b44 <HAL_TIM_PWM_MspInit+0x64>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b22:	4a08      	ldr	r2, [pc, #32]	@ (8002b44 <HAL_TIM_PWM_MspInit+0x64>)
 8002b24:	f043 0302 	orr.w	r3, r3, #2
 8002b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b2a:	4b06      	ldr	r3, [pc, #24]	@ (8002b44 <HAL_TIM_PWM_MspInit+0x64>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	60bb      	str	r3, [r7, #8]
 8002b34:	68bb      	ldr	r3, [r7, #8]
}
 8002b36:	bf00      	nop
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40023800 	.word	0x40023800
 8002b48:	40000400 	.word	0x40000400

08002b4c <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a0e      	ldr	r2, [pc, #56]	@ (8002b94 <HAL_TIM_OC_MspInit+0x48>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d115      	bne.n	8002b8a <HAL_TIM_OC_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	60fb      	str	r3, [r7, #12]
 8002b62:	4b0d      	ldr	r3, [pc, #52]	@ (8002b98 <HAL_TIM_OC_MspInit+0x4c>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b66:	4a0c      	ldr	r2, [pc, #48]	@ (8002b98 <HAL_TIM_OC_MspInit+0x4c>)
 8002b68:	f043 0304 	orr.w	r3, r3, #4
 8002b6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b98 <HAL_TIM_OC_MspInit+0x4c>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	201e      	movs	r0, #30
 8002b80:	f000 feaf 	bl	80038e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b84:	201e      	movs	r0, #30
 8002b86:	f000 fec8 	bl	800391a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8002b8a:	bf00      	nop
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	40000800 	.word	0x40000800
 8002b98:	40023800 	.word	0x40023800

08002b9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08a      	sub	sp, #40	@ 0x28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba4:	f107 0314 	add.w	r3, r7, #20
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bbc:	d13c      	bne.n	8002c38 <HAL_TIM_MspPostInit+0x9c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	4b31      	ldr	r3, [pc, #196]	@ (8002c88 <HAL_TIM_MspPostInit+0xec>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc6:	4a30      	ldr	r2, [pc, #192]	@ (8002c88 <HAL_TIM_MspPostInit+0xec>)
 8002bc8:	f043 0301 	orr.w	r3, r3, #1
 8002bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bce:	4b2e      	ldr	r3, [pc, #184]	@ (8002c88 <HAL_TIM_MspPostInit+0xec>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	4b2a      	ldr	r3, [pc, #168]	@ (8002c88 <HAL_TIM_MspPostInit+0xec>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be2:	4a29      	ldr	r2, [pc, #164]	@ (8002c88 <HAL_TIM_MspPostInit+0xec>)
 8002be4:	f043 0302 	orr.w	r3, r3, #2
 8002be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bea:	4b27      	ldr	r3, [pc, #156]	@ (8002c88 <HAL_TIM_MspPostInit+0xec>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 8002bf6:	2324      	movs	r3, #36	@ 0x24
 8002bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c02:	2300      	movs	r3, #0
 8002c04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c06:	2301      	movs	r3, #1
 8002c08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0a:	f107 0314 	add.w	r3, r7, #20
 8002c0e:	4619      	mov	r1, r3
 8002c10:	481e      	ldr	r0, [pc, #120]	@ (8002c8c <HAL_TIM_MspPostInit+0xf0>)
 8002c12:	f001 faab 	bl	800416c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c16:	2308      	movs	r3, #8
 8002c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c22:	2300      	movs	r3, #0
 8002c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c26:	2301      	movs	r3, #1
 8002c28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c2a:	f107 0314 	add.w	r3, r7, #20
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4817      	ldr	r0, [pc, #92]	@ (8002c90 <HAL_TIM_MspPostInit+0xf4>)
 8002c32:	f001 fa9b 	bl	800416c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002c36:	e022      	b.n	8002c7e <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a15      	ldr	r2, [pc, #84]	@ (8002c94 <HAL_TIM_MspPostInit+0xf8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d11d      	bne.n	8002c7e <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	60bb      	str	r3, [r7, #8]
 8002c46:	4b10      	ldr	r3, [pc, #64]	@ (8002c88 <HAL_TIM_MspPostInit+0xec>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4a:	4a0f      	ldr	r2, [pc, #60]	@ (8002c88 <HAL_TIM_MspPostInit+0xec>)
 8002c4c:	f043 0302 	orr.w	r3, r3, #2
 8002c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c52:	4b0d      	ldr	r3, [pc, #52]	@ (8002c88 <HAL_TIM_MspPostInit+0xec>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 8002c5e:	2331      	movs	r3, #49	@ 0x31
 8002c60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c62:	2302      	movs	r3, #2
 8002c64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c66:	2300      	movs	r3, #0
 8002c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c6e:	2302      	movs	r3, #2
 8002c70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c72:	f107 0314 	add.w	r3, r7, #20
 8002c76:	4619      	mov	r1, r3
 8002c78:	4805      	ldr	r0, [pc, #20]	@ (8002c90 <HAL_TIM_MspPostInit+0xf4>)
 8002c7a:	f001 fa77 	bl	800416c <HAL_GPIO_Init>
}
 8002c7e:	bf00      	nop
 8002c80:	3728      	adds	r7, #40	@ 0x28
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40020000 	.word	0x40020000
 8002c90:	40020400 	.word	0x40020400
 8002c94:	40000400 	.word	0x40000400

08002c98 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08a      	sub	sp, #40	@ 0x28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca0:	f107 0314 	add.w	r3, r7, #20
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
 8002cae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a4c      	ldr	r2, [pc, #304]	@ (8002de8 <HAL_UART_MspInit+0x150>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	f040 8091 	bne.w	8002dde <HAL_UART_MspInit+0x146>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	613b      	str	r3, [r7, #16]
 8002cc0:	4b4a      	ldr	r3, [pc, #296]	@ (8002dec <HAL_UART_MspInit+0x154>)
 8002cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc4:	4a49      	ldr	r2, [pc, #292]	@ (8002dec <HAL_UART_MspInit+0x154>)
 8002cc6:	f043 0310 	orr.w	r3, r3, #16
 8002cca:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ccc:	4b47      	ldr	r3, [pc, #284]	@ (8002dec <HAL_UART_MspInit+0x154>)
 8002cce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	4b43      	ldr	r3, [pc, #268]	@ (8002dec <HAL_UART_MspInit+0x154>)
 8002cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce0:	4a42      	ldr	r2, [pc, #264]	@ (8002dec <HAL_UART_MspInit+0x154>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ce8:	4b40      	ldr	r3, [pc, #256]	@ (8002dec <HAL_UART_MspInit+0x154>)
 8002cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	60fb      	str	r3, [r7, #12]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cf4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d02:	2303      	movs	r3, #3
 8002d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d06:	2307      	movs	r3, #7
 8002d08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d0a:	f107 0314 	add.w	r3, r7, #20
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4837      	ldr	r0, [pc, #220]	@ (8002df0 <HAL_UART_MspInit+0x158>)
 8002d12:	f001 fa2b 	bl	800416c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002d16:	4b37      	ldr	r3, [pc, #220]	@ (8002df4 <HAL_UART_MspInit+0x15c>)
 8002d18:	4a37      	ldr	r2, [pc, #220]	@ (8002df8 <HAL_UART_MspInit+0x160>)
 8002d1a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002d1c:	4b35      	ldr	r3, [pc, #212]	@ (8002df4 <HAL_UART_MspInit+0x15c>)
 8002d1e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002d22:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d24:	4b33      	ldr	r3, [pc, #204]	@ (8002df4 <HAL_UART_MspInit+0x15c>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d2a:	4b32      	ldr	r3, [pc, #200]	@ (8002df4 <HAL_UART_MspInit+0x15c>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d30:	4b30      	ldr	r3, [pc, #192]	@ (8002df4 <HAL_UART_MspInit+0x15c>)
 8002d32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d36:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d38:	4b2e      	ldr	r3, [pc, #184]	@ (8002df4 <HAL_UART_MspInit+0x15c>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d3e:	4b2d      	ldr	r3, [pc, #180]	@ (8002df4 <HAL_UART_MspInit+0x15c>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002d44:	4b2b      	ldr	r3, [pc, #172]	@ (8002df4 <HAL_UART_MspInit+0x15c>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d4a:	4b2a      	ldr	r3, [pc, #168]	@ (8002df4 <HAL_UART_MspInit+0x15c>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d50:	4b28      	ldr	r3, [pc, #160]	@ (8002df4 <HAL_UART_MspInit+0x15c>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002d56:	4827      	ldr	r0, [pc, #156]	@ (8002df4 <HAL_UART_MspInit+0x15c>)
 8002d58:	f000 fdfa 	bl	8003950 <HAL_DMA_Init>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d001      	beq.n	8002d66 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002d62:	f7ff fb3f 	bl	80023e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a22      	ldr	r2, [pc, #136]	@ (8002df4 <HAL_UART_MspInit+0x15c>)
 8002d6a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d6c:	4a21      	ldr	r2, [pc, #132]	@ (8002df4 <HAL_UART_MspInit+0x15c>)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002d72:	4b22      	ldr	r3, [pc, #136]	@ (8002dfc <HAL_UART_MspInit+0x164>)
 8002d74:	4a22      	ldr	r2, [pc, #136]	@ (8002e00 <HAL_UART_MspInit+0x168>)
 8002d76:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002d78:	4b20      	ldr	r3, [pc, #128]	@ (8002dfc <HAL_UART_MspInit+0x164>)
 8002d7a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002d7e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d80:	4b1e      	ldr	r3, [pc, #120]	@ (8002dfc <HAL_UART_MspInit+0x164>)
 8002d82:	2240      	movs	r2, #64	@ 0x40
 8002d84:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d86:	4b1d      	ldr	r3, [pc, #116]	@ (8002dfc <HAL_UART_MspInit+0x164>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002dfc <HAL_UART_MspInit+0x164>)
 8002d8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d92:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d94:	4b19      	ldr	r3, [pc, #100]	@ (8002dfc <HAL_UART_MspInit+0x164>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d9a:	4b18      	ldr	r3, [pc, #96]	@ (8002dfc <HAL_UART_MspInit+0x164>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002da0:	4b16      	ldr	r3, [pc, #88]	@ (8002dfc <HAL_UART_MspInit+0x164>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002da6:	4b15      	ldr	r3, [pc, #84]	@ (8002dfc <HAL_UART_MspInit+0x164>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dac:	4b13      	ldr	r3, [pc, #76]	@ (8002dfc <HAL_UART_MspInit+0x164>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002db2:	4812      	ldr	r0, [pc, #72]	@ (8002dfc <HAL_UART_MspInit+0x164>)
 8002db4:	f000 fdcc 	bl	8003950 <HAL_DMA_Init>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002dbe:	f7ff fb11 	bl	80023e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8002dfc <HAL_UART_MspInit+0x164>)
 8002dc6:	639a      	str	r2, [r3, #56]	@ 0x38
 8002dc8:	4a0c      	ldr	r2, [pc, #48]	@ (8002dfc <HAL_UART_MspInit+0x164>)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	2025      	movs	r0, #37	@ 0x25
 8002dd4:	f000 fd85 	bl	80038e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002dd8:	2025      	movs	r0, #37	@ 0x25
 8002dda:	f000 fd9e 	bl	800391a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002dde:	bf00      	nop
 8002de0:	3728      	adds	r7, #40	@ 0x28
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40011000 	.word	0x40011000
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40020000 	.word	0x40020000
 8002df4:	2000066c 	.word	0x2000066c
 8002df8:	40026440 	.word	0x40026440
 8002dfc:	200006cc 	.word	0x200006cc
 8002e00:	400264b8 	.word	0x400264b8

08002e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e08:	bf00      	nop
 8002e0a:	e7fd      	b.n	8002e08 <NMI_Handler+0x4>

08002e0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e10:	bf00      	nop
 8002e12:	e7fd      	b.n	8002e10 <HardFault_Handler+0x4>

08002e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e18:	bf00      	nop
 8002e1a:	e7fd      	b.n	8002e18 <MemManage_Handler+0x4>

08002e1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e20:	bf00      	nop
 8002e22:	e7fd      	b.n	8002e20 <BusFault_Handler+0x4>

08002e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e28:	bf00      	nop
 8002e2a:	e7fd      	b.n	8002e28 <UsageFault_Handler+0x4>

08002e2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e30:	bf00      	nop
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr

08002e3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e3e:	bf00      	nop
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e4c:	bf00      	nop
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr

08002e56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e5a:	f000 f9b1 	bl	80031c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
	...

08002e64 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002e68:	4802      	ldr	r0, [pc, #8]	@ (8002e74 <DMA1_Stream0_IRQHandler+0x10>)
 8002e6a:	f000 ff09 	bl	8003c80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002e6e:	bf00      	nop
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	200003cc 	.word	0x200003cc

08002e78 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002e7c:	4802      	ldr	r0, [pc, #8]	@ (8002e88 <DMA1_Stream1_IRQHandler+0x10>)
 8002e7e:	f000 feff 	bl	8003c80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	2000042c 	.word	0x2000042c

08002e8c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8002e90:	4802      	ldr	r0, [pc, #8]	@ (8002e9c <DMA1_Stream2_IRQHandler+0x10>)
 8002e92:	f000 fef5 	bl	8003c80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	2000048c 	.word	0x2000048c

08002ea0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002ea4:	4802      	ldr	r0, [pc, #8]	@ (8002eb0 <TIM4_IRQHandler+0x10>)
 8002ea6:	f003 fb55 	bl	8006554 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	200005dc 	.word	0x200005dc

08002eb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002eb8:	4802      	ldr	r0, [pc, #8]	@ (8002ec4 <USART1_IRQHandler+0x10>)
 8002eba:	f004 f8ef 	bl	800709c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000624 	.word	0x20000624

08002ec8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8002ecc:	4802      	ldr	r0, [pc, #8]	@ (8002ed8 <DMA1_Stream7_IRQHandler+0x10>)
 8002ece:	f000 fed7 	bl	8003c80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002ed2:	bf00      	nop
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	200004ec 	.word	0x200004ec

08002edc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ee0:	4802      	ldr	r0, [pc, #8]	@ (8002eec <DMA2_Stream0_IRQHandler+0x10>)
 8002ee2:	f000 fecd 	bl	8003c80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	200002c4 	.word	0x200002c4

08002ef0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002ef4:	4802      	ldr	r0, [pc, #8]	@ (8002f00 <DMA2_Stream2_IRQHandler+0x10>)
 8002ef6:	f000 fec3 	bl	8003c80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002efa:	bf00      	nop
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	2000066c 	.word	0x2000066c

08002f04 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002f08:	4802      	ldr	r0, [pc, #8]	@ (8002f14 <DMA2_Stream7_IRQHandler+0x10>)
 8002f0a:	f000 feb9 	bl	8003c80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002f0e:	bf00      	nop
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	200006cc 	.word	0x200006cc

08002f18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	af00      	add	r7, sp, #0
  return 1;
 8002f1c:	2301      	movs	r3, #1
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <_kill>:

int _kill(int pid, int sig)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f32:	f006 ff37 	bl	8009da4 <__errno>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2216      	movs	r2, #22
 8002f3a:	601a      	str	r2, [r3, #0]
  return -1;
 8002f3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3708      	adds	r7, #8
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <_exit>:

void _exit (int status)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f50:	f04f 31ff 	mov.w	r1, #4294967295
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f7ff ffe7 	bl	8002f28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f5a:	bf00      	nop
 8002f5c:	e7fd      	b.n	8002f5a <_exit+0x12>

08002f5e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b086      	sub	sp, #24
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	e00a      	b.n	8002f86 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f70:	f3af 8000 	nop.w
 8002f74:	4601      	mov	r1, r0
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	60ba      	str	r2, [r7, #8]
 8002f7c:	b2ca      	uxtb	r2, r1
 8002f7e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	3301      	adds	r3, #1
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	dbf0      	blt.n	8002f70 <_read+0x12>
  }

  return len;
 8002f8e:	687b      	ldr	r3, [r7, #4]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	617b      	str	r3, [r7, #20]
 8002fa8:	e009      	b.n	8002fbe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	60ba      	str	r2, [r7, #8]
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	617b      	str	r3, [r7, #20]
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	dbf1      	blt.n	8002faa <_write+0x12>
  }
  return len;
 8002fc6:	687b      	ldr	r3, [r7, #4]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <_close>:

int _close(int file)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ff8:	605a      	str	r2, [r3, #4]
  return 0;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <_isatty>:

int _isatty(int file)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003010:	2301      	movs	r3, #1
}
 8003012:	4618      	mov	r0, r3
 8003014:	370c      	adds	r7, #12
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800301e:	b480      	push	{r7}
 8003020:	b085      	sub	sp, #20
 8003022:	af00      	add	r7, sp, #0
 8003024:	60f8      	str	r0, [r7, #12]
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003040:	4a14      	ldr	r2, [pc, #80]	@ (8003094 <_sbrk+0x5c>)
 8003042:	4b15      	ldr	r3, [pc, #84]	@ (8003098 <_sbrk+0x60>)
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800304c:	4b13      	ldr	r3, [pc, #76]	@ (800309c <_sbrk+0x64>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d102      	bne.n	800305a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003054:	4b11      	ldr	r3, [pc, #68]	@ (800309c <_sbrk+0x64>)
 8003056:	4a12      	ldr	r2, [pc, #72]	@ (80030a0 <_sbrk+0x68>)
 8003058:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800305a:	4b10      	ldr	r3, [pc, #64]	@ (800309c <_sbrk+0x64>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4413      	add	r3, r2
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	429a      	cmp	r2, r3
 8003066:	d207      	bcs.n	8003078 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003068:	f006 fe9c 	bl	8009da4 <__errno>
 800306c:	4603      	mov	r3, r0
 800306e:	220c      	movs	r2, #12
 8003070:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003072:	f04f 33ff 	mov.w	r3, #4294967295
 8003076:	e009      	b.n	800308c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003078:	4b08      	ldr	r3, [pc, #32]	@ (800309c <_sbrk+0x64>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800307e:	4b07      	ldr	r3, [pc, #28]	@ (800309c <_sbrk+0x64>)
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4413      	add	r3, r2
 8003086:	4a05      	ldr	r2, [pc, #20]	@ (800309c <_sbrk+0x64>)
 8003088:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800308a:	68fb      	ldr	r3, [r7, #12]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3718      	adds	r7, #24
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20020000 	.word	0x20020000
 8003098:	00000400 	.word	0x00000400
 800309c:	20000780 	.word	0x20000780
 80030a0:	200008d8 	.word	0x200008d8

080030a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030a8:	4b06      	ldr	r3, [pc, #24]	@ (80030c4 <SystemInit+0x20>)
 80030aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ae:	4a05      	ldr	r2, [pc, #20]	@ (80030c4 <SystemInit+0x20>)
 80030b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80030b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030b8:	bf00      	nop
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	e000ed00 	.word	0xe000ed00

080030c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80030c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003100 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80030cc:	f7ff ffea 	bl	80030a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030d0:	480c      	ldr	r0, [pc, #48]	@ (8003104 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030d2:	490d      	ldr	r1, [pc, #52]	@ (8003108 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030d4:	4a0d      	ldr	r2, [pc, #52]	@ (800310c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030d8:	e002      	b.n	80030e0 <LoopCopyDataInit>

080030da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030de:	3304      	adds	r3, #4

080030e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030e4:	d3f9      	bcc.n	80030da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003110 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030e8:	4c0a      	ldr	r4, [pc, #40]	@ (8003114 <LoopFillZerobss+0x22>)
  movs r3, #0
 80030ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030ec:	e001      	b.n	80030f2 <LoopFillZerobss>

080030ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030f0:	3204      	adds	r2, #4

080030f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030f4:	d3fb      	bcc.n	80030ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030f6:	f006 fe5b 	bl	8009db0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030fa:	f7fe fd51 	bl	8001ba0 <main>
  bx  lr    
 80030fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003100:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003108:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 800310c:	0800d028 	.word	0x0800d028
  ldr r2, =_sbss
 8003110:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8003114:	200008d4 	.word	0x200008d4

08003118 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003118:	e7fe      	b.n	8003118 <ADC_IRQHandler>
	...

0800311c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003120:	4b0e      	ldr	r3, [pc, #56]	@ (800315c <HAL_Init+0x40>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a0d      	ldr	r2, [pc, #52]	@ (800315c <HAL_Init+0x40>)
 8003126:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800312a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800312c:	4b0b      	ldr	r3, [pc, #44]	@ (800315c <HAL_Init+0x40>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a0a      	ldr	r2, [pc, #40]	@ (800315c <HAL_Init+0x40>)
 8003132:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003136:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003138:	4b08      	ldr	r3, [pc, #32]	@ (800315c <HAL_Init+0x40>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a07      	ldr	r2, [pc, #28]	@ (800315c <HAL_Init+0x40>)
 800313e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003142:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003144:	2003      	movs	r0, #3
 8003146:	f000 fbc1 	bl	80038cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800314a:	200f      	movs	r0, #15
 800314c:	f000 f808 	bl	8003160 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003150:	f7ff fad0 	bl	80026f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003154:	2300      	movs	r3, #0
}
 8003156:	4618      	mov	r0, r3
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	40023c00 	.word	0x40023c00

08003160 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003168:	4b12      	ldr	r3, [pc, #72]	@ (80031b4 <HAL_InitTick+0x54>)
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	4b12      	ldr	r3, [pc, #72]	@ (80031b8 <HAL_InitTick+0x58>)
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	4619      	mov	r1, r3
 8003172:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003176:	fbb3 f3f1 	udiv	r3, r3, r1
 800317a:	fbb2 f3f3 	udiv	r3, r2, r3
 800317e:	4618      	mov	r0, r3
 8003180:	f000 fbd9 	bl	8003936 <HAL_SYSTICK_Config>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d001      	beq.n	800318e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e00e      	b.n	80031ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b0f      	cmp	r3, #15
 8003192:	d80a      	bhi.n	80031aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003194:	2200      	movs	r2, #0
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	f04f 30ff 	mov.w	r0, #4294967295
 800319c:	f000 fba1 	bl	80038e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031a0:	4a06      	ldr	r2, [pc, #24]	@ (80031bc <HAL_InitTick+0x5c>)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	e000      	b.n	80031ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	20000084 	.word	0x20000084
 80031b8:	2000008c 	.word	0x2000008c
 80031bc:	20000088 	.word	0x20000088

080031c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031c4:	4b06      	ldr	r3, [pc, #24]	@ (80031e0 <HAL_IncTick+0x20>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	461a      	mov	r2, r3
 80031ca:	4b06      	ldr	r3, [pc, #24]	@ (80031e4 <HAL_IncTick+0x24>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4413      	add	r3, r2
 80031d0:	4a04      	ldr	r2, [pc, #16]	@ (80031e4 <HAL_IncTick+0x24>)
 80031d2:	6013      	str	r3, [r2, #0]
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	2000008c 	.word	0x2000008c
 80031e4:	20000784 	.word	0x20000784

080031e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031e8:	b480      	push	{r7}
 80031ea:	af00      	add	r7, sp, #0
  return uwTick;
 80031ec:	4b03      	ldr	r3, [pc, #12]	@ (80031fc <HAL_GetTick+0x14>)
 80031ee:	681b      	ldr	r3, [r3, #0]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	20000784 	.word	0x20000784

08003200 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003208:	f7ff ffee 	bl	80031e8 <HAL_GetTick>
 800320c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003218:	d005      	beq.n	8003226 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800321a:	4b0a      	ldr	r3, [pc, #40]	@ (8003244 <HAL_Delay+0x44>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	461a      	mov	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	4413      	add	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003226:	bf00      	nop
 8003228:	f7ff ffde 	bl	80031e8 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	429a      	cmp	r2, r3
 8003236:	d8f7      	bhi.n	8003228 <HAL_Delay+0x28>
  {
  }
}
 8003238:	bf00      	nop
 800323a:	bf00      	nop
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	2000008c 	.word	0x2000008c

08003248 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003250:	2300      	movs	r3, #0
 8003252:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e033      	b.n	80032c6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003262:	2b00      	cmp	r3, #0
 8003264:	d109      	bne.n	800327a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7ff fa6c 	bl	8002744 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327e:	f003 0310 	and.w	r3, r3, #16
 8003282:	2b00      	cmp	r3, #0
 8003284:	d118      	bne.n	80032b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800328e:	f023 0302 	bic.w	r3, r3, #2
 8003292:	f043 0202 	orr.w	r2, r3, #2
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f94a 	bl	8003534 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032aa:	f023 0303 	bic.w	r3, r3, #3
 80032ae:	f043 0201 	orr.w	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	641a      	str	r2, [r3, #64]	@ 0x40
 80032b6:	e001      	b.n	80032bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3710      	adds	r7, #16
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
	...

080032d0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80032da:	2300      	movs	r3, #0
 80032dc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x1c>
 80032e8:	2302      	movs	r3, #2
 80032ea:	e113      	b.n	8003514 <HAL_ADC_ConfigChannel+0x244>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2b09      	cmp	r3, #9
 80032fa:	d925      	bls.n	8003348 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68d9      	ldr	r1, [r3, #12]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	b29b      	uxth	r3, r3
 8003308:	461a      	mov	r2, r3
 800330a:	4613      	mov	r3, r2
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	4413      	add	r3, r2
 8003310:	3b1e      	subs	r3, #30
 8003312:	2207      	movs	r2, #7
 8003314:	fa02 f303 	lsl.w	r3, r2, r3
 8003318:	43da      	mvns	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	400a      	ands	r2, r1
 8003320:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68d9      	ldr	r1, [r3, #12]
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	b29b      	uxth	r3, r3
 8003332:	4618      	mov	r0, r3
 8003334:	4603      	mov	r3, r0
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	4403      	add	r3, r0
 800333a:	3b1e      	subs	r3, #30
 800333c:	409a      	lsls	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	60da      	str	r2, [r3, #12]
 8003346:	e022      	b.n	800338e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6919      	ldr	r1, [r3, #16]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	b29b      	uxth	r3, r3
 8003354:	461a      	mov	r2, r3
 8003356:	4613      	mov	r3, r2
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	4413      	add	r3, r2
 800335c:	2207      	movs	r2, #7
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43da      	mvns	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	400a      	ands	r2, r1
 800336a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6919      	ldr	r1, [r3, #16]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	b29b      	uxth	r3, r3
 800337c:	4618      	mov	r0, r3
 800337e:	4603      	mov	r3, r0
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	4403      	add	r3, r0
 8003384:	409a      	lsls	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b06      	cmp	r3, #6
 8003394:	d824      	bhi.n	80033e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	3b05      	subs	r3, #5
 80033a8:	221f      	movs	r2, #31
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43da      	mvns	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	400a      	ands	r2, r1
 80033b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	4618      	mov	r0, r3
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	3b05      	subs	r3, #5
 80033d2:	fa00 f203 	lsl.w	r2, r0, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80033de:	e04c      	b.n	800347a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2b0c      	cmp	r3, #12
 80033e6:	d824      	bhi.n	8003432 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685a      	ldr	r2, [r3, #4]
 80033f2:	4613      	mov	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4413      	add	r3, r2
 80033f8:	3b23      	subs	r3, #35	@ 0x23
 80033fa:	221f      	movs	r2, #31
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	43da      	mvns	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	400a      	ands	r2, r1
 8003408:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	b29b      	uxth	r3, r3
 8003416:	4618      	mov	r0, r3
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685a      	ldr	r2, [r3, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	3b23      	subs	r3, #35	@ 0x23
 8003424:	fa00 f203 	lsl.w	r2, r0, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003430:	e023      	b.n	800347a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	3b41      	subs	r3, #65	@ 0x41
 8003444:	221f      	movs	r2, #31
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43da      	mvns	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	400a      	ands	r2, r1
 8003452:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	b29b      	uxth	r3, r3
 8003460:	4618      	mov	r0, r3
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	3b41      	subs	r3, #65	@ 0x41
 800346e:	fa00 f203 	lsl.w	r2, r0, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800347a:	4b29      	ldr	r3, [pc, #164]	@ (8003520 <HAL_ADC_ConfigChannel+0x250>)
 800347c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a28      	ldr	r2, [pc, #160]	@ (8003524 <HAL_ADC_ConfigChannel+0x254>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d10f      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x1d8>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b12      	cmp	r3, #18
 800348e:	d10b      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003524 <HAL_ADC_ConfigChannel+0x254>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d12b      	bne.n	800350a <HAL_ADC_ConfigChannel+0x23a>
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a1c      	ldr	r2, [pc, #112]	@ (8003528 <HAL_ADC_ConfigChannel+0x258>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d003      	beq.n	80034c4 <HAL_ADC_ConfigChannel+0x1f4>
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b11      	cmp	r3, #17
 80034c2:	d122      	bne.n	800350a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a11      	ldr	r2, [pc, #68]	@ (8003528 <HAL_ADC_ConfigChannel+0x258>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d111      	bne.n	800350a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034e6:	4b11      	ldr	r3, [pc, #68]	@ (800352c <HAL_ADC_ConfigChannel+0x25c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a11      	ldr	r2, [pc, #68]	@ (8003530 <HAL_ADC_ConfigChannel+0x260>)
 80034ec:	fba2 2303 	umull	r2, r3, r2, r3
 80034f0:	0c9a      	lsrs	r2, r3, #18
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80034fc:	e002      	b.n	8003504 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	3b01      	subs	r3, #1
 8003502:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f9      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr
 8003520:	40012300 	.word	0x40012300
 8003524:	40012000 	.word	0x40012000
 8003528:	10000012 	.word	0x10000012
 800352c:	20000084 	.word	0x20000084
 8003530:	431bde83 	.word	0x431bde83

08003534 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003534:	b480      	push	{r7}
 8003536:	b085      	sub	sp, #20
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800353c:	4b79      	ldr	r3, [pc, #484]	@ (8003724 <ADC_Init+0x1f0>)
 800353e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	431a      	orrs	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003568:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6859      	ldr	r1, [r3, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	021a      	lsls	r2, r3, #8
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800358c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6859      	ldr	r1, [r3, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689a      	ldr	r2, [r3, #8]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6899      	ldr	r1, [r3, #8]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	68da      	ldr	r2, [r3, #12]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c6:	4a58      	ldr	r2, [pc, #352]	@ (8003728 <ADC_Init+0x1f4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d022      	beq.n	8003612 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689a      	ldr	r2, [r3, #8]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6899      	ldr	r1, [r3, #8]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80035fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6899      	ldr	r1, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	e00f      	b.n	8003632 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003620:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689a      	ldr	r2, [r3, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003630:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0202 	bic.w	r2, r2, #2
 8003640:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6899      	ldr	r1, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	7e1b      	ldrb	r3, [r3, #24]
 800364c:	005a      	lsls	r2, r3, #1
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 3020 	ldrb.w	r3, [r3, #32]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d01b      	beq.n	8003698 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800366e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800367e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6859      	ldr	r1, [r3, #4]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368a:	3b01      	subs	r3, #1
 800368c:	035a      	lsls	r2, r3, #13
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	605a      	str	r2, [r3, #4]
 8003696:	e007      	b.n	80036a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036a6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80036b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	69db      	ldr	r3, [r3, #28]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	051a      	lsls	r2, r3, #20
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80036dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6899      	ldr	r1, [r3, #8]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80036ea:	025a      	lsls	r2, r3, #9
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003702:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6899      	ldr	r1, [r3, #8]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	029a      	lsls	r2, r3, #10
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	609a      	str	r2, [r3, #8]
}
 8003718:	bf00      	nop
 800371a:	3714      	adds	r7, #20
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	40012300 	.word	0x40012300
 8003728:	0f000001 	.word	0x0f000001

0800372c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800373c:	4b0c      	ldr	r3, [pc, #48]	@ (8003770 <__NVIC_SetPriorityGrouping+0x44>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003748:	4013      	ands	r3, r2
 800374a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003754:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003758:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800375c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800375e:	4a04      	ldr	r2, [pc, #16]	@ (8003770 <__NVIC_SetPriorityGrouping+0x44>)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	60d3      	str	r3, [r2, #12]
}
 8003764:	bf00      	nop
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	e000ed00 	.word	0xe000ed00

08003774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003778:	4b04      	ldr	r3, [pc, #16]	@ (800378c <__NVIC_GetPriorityGrouping+0x18>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	0a1b      	lsrs	r3, r3, #8
 800377e:	f003 0307 	and.w	r3, r3, #7
}
 8003782:	4618      	mov	r0, r3
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr
 800378c:	e000ed00 	.word	0xe000ed00

08003790 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800379a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	db0b      	blt.n	80037ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037a2:	79fb      	ldrb	r3, [r7, #7]
 80037a4:	f003 021f 	and.w	r2, r3, #31
 80037a8:	4907      	ldr	r1, [pc, #28]	@ (80037c8 <__NVIC_EnableIRQ+0x38>)
 80037aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ae:	095b      	lsrs	r3, r3, #5
 80037b0:	2001      	movs	r0, #1
 80037b2:	fa00 f202 	lsl.w	r2, r0, r2
 80037b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	e000e100 	.word	0xe000e100

080037cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	4603      	mov	r3, r0
 80037d4:	6039      	str	r1, [r7, #0]
 80037d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	db0a      	blt.n	80037f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	490c      	ldr	r1, [pc, #48]	@ (8003818 <__NVIC_SetPriority+0x4c>)
 80037e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ea:	0112      	lsls	r2, r2, #4
 80037ec:	b2d2      	uxtb	r2, r2
 80037ee:	440b      	add	r3, r1
 80037f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037f4:	e00a      	b.n	800380c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	4908      	ldr	r1, [pc, #32]	@ (800381c <__NVIC_SetPriority+0x50>)
 80037fc:	79fb      	ldrb	r3, [r7, #7]
 80037fe:	f003 030f 	and.w	r3, r3, #15
 8003802:	3b04      	subs	r3, #4
 8003804:	0112      	lsls	r2, r2, #4
 8003806:	b2d2      	uxtb	r2, r2
 8003808:	440b      	add	r3, r1
 800380a:	761a      	strb	r2, [r3, #24]
}
 800380c:	bf00      	nop
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	e000e100 	.word	0xe000e100
 800381c:	e000ed00 	.word	0xe000ed00

08003820 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003820:	b480      	push	{r7}
 8003822:	b089      	sub	sp, #36	@ 0x24
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f003 0307 	and.w	r3, r3, #7
 8003832:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	f1c3 0307 	rsb	r3, r3, #7
 800383a:	2b04      	cmp	r3, #4
 800383c:	bf28      	it	cs
 800383e:	2304      	movcs	r3, #4
 8003840:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	3304      	adds	r3, #4
 8003846:	2b06      	cmp	r3, #6
 8003848:	d902      	bls.n	8003850 <NVIC_EncodePriority+0x30>
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	3b03      	subs	r3, #3
 800384e:	e000      	b.n	8003852 <NVIC_EncodePriority+0x32>
 8003850:	2300      	movs	r3, #0
 8003852:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003854:	f04f 32ff 	mov.w	r2, #4294967295
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	43da      	mvns	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	401a      	ands	r2, r3
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003868:	f04f 31ff 	mov.w	r1, #4294967295
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	fa01 f303 	lsl.w	r3, r1, r3
 8003872:	43d9      	mvns	r1, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003878:	4313      	orrs	r3, r2
         );
}
 800387a:	4618      	mov	r0, r3
 800387c:	3724      	adds	r7, #36	@ 0x24
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
	...

08003888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	3b01      	subs	r3, #1
 8003894:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003898:	d301      	bcc.n	800389e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800389a:	2301      	movs	r3, #1
 800389c:	e00f      	b.n	80038be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800389e:	4a0a      	ldr	r2, [pc, #40]	@ (80038c8 <SysTick_Config+0x40>)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038a6:	210f      	movs	r1, #15
 80038a8:	f04f 30ff 	mov.w	r0, #4294967295
 80038ac:	f7ff ff8e 	bl	80037cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038b0:	4b05      	ldr	r3, [pc, #20]	@ (80038c8 <SysTick_Config+0x40>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038b6:	4b04      	ldr	r3, [pc, #16]	@ (80038c8 <SysTick_Config+0x40>)
 80038b8:	2207      	movs	r2, #7
 80038ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	e000e010 	.word	0xe000e010

080038cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7ff ff29 	bl	800372c <__NVIC_SetPriorityGrouping>
}
 80038da:	bf00      	nop
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b086      	sub	sp, #24
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	4603      	mov	r3, r0
 80038ea:	60b9      	str	r1, [r7, #8]
 80038ec:	607a      	str	r2, [r7, #4]
 80038ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038f4:	f7ff ff3e 	bl	8003774 <__NVIC_GetPriorityGrouping>
 80038f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	68b9      	ldr	r1, [r7, #8]
 80038fe:	6978      	ldr	r0, [r7, #20]
 8003900:	f7ff ff8e 	bl	8003820 <NVIC_EncodePriority>
 8003904:	4602      	mov	r2, r0
 8003906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800390a:	4611      	mov	r1, r2
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff ff5d 	bl	80037cc <__NVIC_SetPriority>
}
 8003912:	bf00      	nop
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800391a:	b580      	push	{r7, lr}
 800391c:	b082      	sub	sp, #8
 800391e:	af00      	add	r7, sp, #0
 8003920:	4603      	mov	r3, r0
 8003922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff ff31 	bl	8003790 <__NVIC_EnableIRQ>
}
 800392e:	bf00      	nop
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b082      	sub	sp, #8
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff ffa2 	bl	8003888 <SysTick_Config>
 8003944:	4603      	mov	r3, r0
}
 8003946:	4618      	mov	r0, r3
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
	...

08003950 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003958:	2300      	movs	r3, #0
 800395a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800395c:	f7ff fc44 	bl	80031e8 <HAL_GetTick>
 8003960:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e099      	b.n	8003aa0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0201 	bic.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800398c:	e00f      	b.n	80039ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800398e:	f7ff fc2b 	bl	80031e8 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b05      	cmp	r3, #5
 800399a:	d908      	bls.n	80039ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2220      	movs	r2, #32
 80039a0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2203      	movs	r2, #3
 80039a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e078      	b.n	8003aa0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1e8      	bne.n	800398e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	4b38      	ldr	r3, [pc, #224]	@ (8003aa8 <HAL_DMA_Init+0x158>)
 80039c8:	4013      	ands	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	691b      	ldr	r3, [r3, #16]
 80039e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039fa:	697a      	ldr	r2, [r7, #20]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d107      	bne.n	8003a18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a10:	4313      	orrs	r3, r2
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	697a      	ldr	r2, [r7, #20]
 8003a1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f023 0307 	bic.w	r3, r3, #7
 8003a2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d117      	bne.n	8003a72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00e      	beq.n	8003a72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 fb0d 	bl	8004074 <DMA_CheckFifoParam>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d008      	beq.n	8003a72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2240      	movs	r2, #64	@ 0x40
 8003a64:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e016      	b.n	8003aa0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 fac4 	bl	8004008 <DMA_CalcBaseAndBitshift>
 8003a80:	4603      	mov	r3, r0
 8003a82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a88:	223f      	movs	r2, #63	@ 0x3f
 8003a8a:	409a      	lsls	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	f010803f 	.word	0xf010803f

08003aac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d101      	bne.n	8003ad2 <HAL_DMA_Start_IT+0x26>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	e040      	b.n	8003b54 <HAL_DMA_Start_IT+0xa8>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d12f      	bne.n	8003b46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2202      	movs	r2, #2
 8003aea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68b9      	ldr	r1, [r7, #8]
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 fa56 	bl	8003fac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b04:	223f      	movs	r2, #63	@ 0x3f
 8003b06:	409a      	lsls	r2, r3
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f042 0216 	orr.w	r2, r2, #22
 8003b1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d007      	beq.n	8003b34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f042 0208 	orr.w	r2, r2, #8
 8003b32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]
 8003b44:	e005      	b.n	8003b52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b4e:	2302      	movs	r3, #2
 8003b50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b6a:	f7ff fb3d 	bl	80031e8 <HAL_GetTick>
 8003b6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d008      	beq.n	8003b8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2280      	movs	r2, #128	@ 0x80
 8003b80:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e052      	b.n	8003c34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0216 	bic.w	r2, r2, #22
 8003b9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695a      	ldr	r2, [r3, #20]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d103      	bne.n	8003bbe <HAL_DMA_Abort+0x62>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d007      	beq.n	8003bce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0208 	bic.w	r2, r2, #8
 8003bcc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f022 0201 	bic.w	r2, r2, #1
 8003bdc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bde:	e013      	b.n	8003c08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003be0:	f7ff fb02 	bl	80031e8 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b05      	cmp	r3, #5
 8003bec:	d90c      	bls.n	8003c08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2203      	movs	r2, #3
 8003bf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e015      	b.n	8003c34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1e4      	bne.n	8003be0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c1a:	223f      	movs	r2, #63	@ 0x3f
 8003c1c:	409a      	lsls	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2201      	movs	r2, #1
 8003c26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	2b02      	cmp	r3, #2
 8003c4e:	d004      	beq.n	8003c5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2280      	movs	r2, #128	@ 0x80
 8003c54:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e00c      	b.n	8003c74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2205      	movs	r2, #5
 8003c5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0201 	bic.w	r2, r2, #1
 8003c70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c8c:	4b8e      	ldr	r3, [pc, #568]	@ (8003ec8 <HAL_DMA_IRQHandler+0x248>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a8e      	ldr	r2, [pc, #568]	@ (8003ecc <HAL_DMA_IRQHandler+0x24c>)
 8003c92:	fba2 2303 	umull	r2, r3, r2, r3
 8003c96:	0a9b      	lsrs	r3, r3, #10
 8003c98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003caa:	2208      	movs	r2, #8
 8003cac:	409a      	lsls	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d01a      	beq.n	8003cec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0304 	and.w	r3, r3, #4
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d013      	beq.n	8003cec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 0204 	bic.w	r2, r2, #4
 8003cd2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cd8:	2208      	movs	r2, #8
 8003cda:	409a      	lsls	r2, r3
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce4:	f043 0201 	orr.w	r2, r3, #1
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	409a      	lsls	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d012      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00b      	beq.n	8003d22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d0e:	2201      	movs	r2, #1
 8003d10:	409a      	lsls	r2, r3
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d1a:	f043 0202 	orr.w	r2, r3, #2
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d26:	2204      	movs	r2, #4
 8003d28:	409a      	lsls	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d012      	beq.n	8003d58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00b      	beq.n	8003d58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d44:	2204      	movs	r2, #4
 8003d46:	409a      	lsls	r2, r3
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d50:	f043 0204 	orr.w	r2, r3, #4
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d5c:	2210      	movs	r2, #16
 8003d5e:	409a      	lsls	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4013      	ands	r3, r2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d043      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0308 	and.w	r3, r3, #8
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d03c      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d7a:	2210      	movs	r2, #16
 8003d7c:	409a      	lsls	r2, r3
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d018      	beq.n	8003dc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d108      	bne.n	8003db0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d024      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	4798      	blx	r3
 8003dae:	e01f      	b.n	8003df0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d01b      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	4798      	blx	r3
 8003dc0:	e016      	b.n	8003df0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d107      	bne.n	8003de0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0208 	bic.w	r2, r2, #8
 8003dde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df4:	2220      	movs	r2, #32
 8003df6:	409a      	lsls	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	f000 808f 	beq.w	8003f20 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0310 	and.w	r3, r3, #16
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 8087 	beq.w	8003f20 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e16:	2220      	movs	r2, #32
 8003e18:	409a      	lsls	r2, r3
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b05      	cmp	r3, #5
 8003e28:	d136      	bne.n	8003e98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f022 0216 	bic.w	r2, r2, #22
 8003e38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695a      	ldr	r2, [r3, #20]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d103      	bne.n	8003e5a <HAL_DMA_IRQHandler+0x1da>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d007      	beq.n	8003e6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f022 0208 	bic.w	r2, r2, #8
 8003e68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e6e:	223f      	movs	r2, #63	@ 0x3f
 8003e70:	409a      	lsls	r2, r3
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d07e      	beq.n	8003f8c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	4798      	blx	r3
        }
        return;
 8003e96:	e079      	b.n	8003f8c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d01d      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10d      	bne.n	8003ed0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d031      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	4798      	blx	r3
 8003ec4:	e02c      	b.n	8003f20 <HAL_DMA_IRQHandler+0x2a0>
 8003ec6:	bf00      	nop
 8003ec8:	20000084 	.word	0x20000084
 8003ecc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d023      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	4798      	blx	r3
 8003ee0:	e01e      	b.n	8003f20 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10f      	bne.n	8003f10 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0210 	bic.w	r2, r2, #16
 8003efe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d032      	beq.n	8003f8e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d022      	beq.n	8003f7a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2205      	movs	r2, #5
 8003f38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0201 	bic.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	60bb      	str	r3, [r7, #8]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d307      	bcc.n	8003f68 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d1f2      	bne.n	8003f4c <HAL_DMA_IRQHandler+0x2cc>
 8003f66:	e000      	b.n	8003f6a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f68:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d005      	beq.n	8003f8e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	4798      	blx	r3
 8003f8a:	e000      	b.n	8003f8e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f8c:	bf00      	nop
    }
  }
}
 8003f8e:	3718      	adds	r7, #24
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
 8003fb8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003fc8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	2b40      	cmp	r3, #64	@ 0x40
 8003fd8:	d108      	bne.n	8003fec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003fea:	e007      	b.n	8003ffc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	60da      	str	r2, [r3, #12]
}
 8003ffc:	bf00      	nop
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	b2db      	uxtb	r3, r3
 8004016:	3b10      	subs	r3, #16
 8004018:	4a14      	ldr	r2, [pc, #80]	@ (800406c <DMA_CalcBaseAndBitshift+0x64>)
 800401a:	fba2 2303 	umull	r2, r3, r2, r3
 800401e:	091b      	lsrs	r3, r3, #4
 8004020:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004022:	4a13      	ldr	r2, [pc, #76]	@ (8004070 <DMA_CalcBaseAndBitshift+0x68>)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4413      	add	r3, r2
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	461a      	mov	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2b03      	cmp	r3, #3
 8004034:	d909      	bls.n	800404a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800403e:	f023 0303 	bic.w	r3, r3, #3
 8004042:	1d1a      	adds	r2, r3, #4
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	659a      	str	r2, [r3, #88]	@ 0x58
 8004048:	e007      	b.n	800405a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004052:	f023 0303 	bic.w	r3, r3, #3
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800405e:	4618      	mov	r0, r3
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	aaaaaaab 	.word	0xaaaaaaab
 8004070:	0800cbd0 	.word	0x0800cbd0

08004074 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800407c:	2300      	movs	r3, #0
 800407e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004084:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d11f      	bne.n	80040ce <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b03      	cmp	r3, #3
 8004092:	d856      	bhi.n	8004142 <DMA_CheckFifoParam+0xce>
 8004094:	a201      	add	r2, pc, #4	@ (adr r2, 800409c <DMA_CheckFifoParam+0x28>)
 8004096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409a:	bf00      	nop
 800409c:	080040ad 	.word	0x080040ad
 80040a0:	080040bf 	.word	0x080040bf
 80040a4:	080040ad 	.word	0x080040ad
 80040a8:	08004143 	.word	0x08004143
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d046      	beq.n	8004146 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040bc:	e043      	b.n	8004146 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040c6:	d140      	bne.n	800414a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040cc:	e03d      	b.n	800414a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040d6:	d121      	bne.n	800411c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b03      	cmp	r3, #3
 80040dc:	d837      	bhi.n	800414e <DMA_CheckFifoParam+0xda>
 80040de:	a201      	add	r2, pc, #4	@ (adr r2, 80040e4 <DMA_CheckFifoParam+0x70>)
 80040e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e4:	080040f5 	.word	0x080040f5
 80040e8:	080040fb 	.word	0x080040fb
 80040ec:	080040f5 	.word	0x080040f5
 80040f0:	0800410d 	.word	0x0800410d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	73fb      	strb	r3, [r7, #15]
      break;
 80040f8:	e030      	b.n	800415c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d025      	beq.n	8004152 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800410a:	e022      	b.n	8004152 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004110:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004114:	d11f      	bne.n	8004156 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800411a:	e01c      	b.n	8004156 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2b02      	cmp	r3, #2
 8004120:	d903      	bls.n	800412a <DMA_CheckFifoParam+0xb6>
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	2b03      	cmp	r3, #3
 8004126:	d003      	beq.n	8004130 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004128:	e018      	b.n	800415c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	73fb      	strb	r3, [r7, #15]
      break;
 800412e:	e015      	b.n	800415c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004134:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00e      	beq.n	800415a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	73fb      	strb	r3, [r7, #15]
      break;
 8004140:	e00b      	b.n	800415a <DMA_CheckFifoParam+0xe6>
      break;
 8004142:	bf00      	nop
 8004144:	e00a      	b.n	800415c <DMA_CheckFifoParam+0xe8>
      break;
 8004146:	bf00      	nop
 8004148:	e008      	b.n	800415c <DMA_CheckFifoParam+0xe8>
      break;
 800414a:	bf00      	nop
 800414c:	e006      	b.n	800415c <DMA_CheckFifoParam+0xe8>
      break;
 800414e:	bf00      	nop
 8004150:	e004      	b.n	800415c <DMA_CheckFifoParam+0xe8>
      break;
 8004152:	bf00      	nop
 8004154:	e002      	b.n	800415c <DMA_CheckFifoParam+0xe8>
      break;   
 8004156:	bf00      	nop
 8004158:	e000      	b.n	800415c <DMA_CheckFifoParam+0xe8>
      break;
 800415a:	bf00      	nop
    }
  } 
  
  return status; 
 800415c:	7bfb      	ldrb	r3, [r7, #15]
}
 800415e:	4618      	mov	r0, r3
 8004160:	3714      	adds	r7, #20
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop

0800416c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800416c:	b480      	push	{r7}
 800416e:	b089      	sub	sp, #36	@ 0x24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800417a:	2300      	movs	r3, #0
 800417c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800417e:	2300      	movs	r3, #0
 8004180:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004182:	2300      	movs	r3, #0
 8004184:	61fb      	str	r3, [r7, #28]
 8004186:	e159      	b.n	800443c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004188:	2201      	movs	r2, #1
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	4013      	ands	r3, r2
 800419a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	f040 8148 	bne.w	8004436 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f003 0303 	and.w	r3, r3, #3
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d005      	beq.n	80041be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d130      	bne.n	8004220 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	2203      	movs	r2, #3
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	43db      	mvns	r3, r3
 80041d0:	69ba      	ldr	r2, [r7, #24]
 80041d2:	4013      	ands	r3, r2
 80041d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	fa02 f303 	lsl.w	r3, r2, r3
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041f4:	2201      	movs	r2, #1
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	43db      	mvns	r3, r3
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	4013      	ands	r3, r2
 8004202:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	091b      	lsrs	r3, r3, #4
 800420a:	f003 0201 	and.w	r2, r3, #1
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	fa02 f303 	lsl.w	r3, r2, r3
 8004214:	69ba      	ldr	r2, [r7, #24]
 8004216:	4313      	orrs	r3, r2
 8004218:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f003 0303 	and.w	r3, r3, #3
 8004228:	2b03      	cmp	r3, #3
 800422a:	d017      	beq.n	800425c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	2203      	movs	r2, #3
 8004238:	fa02 f303 	lsl.w	r3, r2, r3
 800423c:	43db      	mvns	r3, r3
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	4013      	ands	r3, r2
 8004242:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	fa02 f303 	lsl.w	r3, r2, r3
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	4313      	orrs	r3, r2
 8004254:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f003 0303 	and.w	r3, r3, #3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d123      	bne.n	80042b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	08da      	lsrs	r2, r3, #3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	3208      	adds	r2, #8
 8004270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004274:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	220f      	movs	r2, #15
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	43db      	mvns	r3, r3
 8004286:	69ba      	ldr	r2, [r7, #24]
 8004288:	4013      	ands	r3, r2
 800428a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	f003 0307 	and.w	r3, r3, #7
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	4313      	orrs	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042a2:	69fb      	ldr	r3, [r7, #28]
 80042a4:	08da      	lsrs	r2, r3, #3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	3208      	adds	r2, #8
 80042aa:	69b9      	ldr	r1, [r7, #24]
 80042ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	005b      	lsls	r3, r3, #1
 80042ba:	2203      	movs	r2, #3
 80042bc:	fa02 f303 	lsl.w	r3, r2, r3
 80042c0:	43db      	mvns	r3, r3
 80042c2:	69ba      	ldr	r2, [r7, #24]
 80042c4:	4013      	ands	r3, r2
 80042c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f003 0203 	and.w	r2, r3, #3
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	4313      	orrs	r3, r2
 80042dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 80a2 	beq.w	8004436 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042f2:	2300      	movs	r3, #0
 80042f4:	60fb      	str	r3, [r7, #12]
 80042f6:	4b57      	ldr	r3, [pc, #348]	@ (8004454 <HAL_GPIO_Init+0x2e8>)
 80042f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fa:	4a56      	ldr	r2, [pc, #344]	@ (8004454 <HAL_GPIO_Init+0x2e8>)
 80042fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004300:	6453      	str	r3, [r2, #68]	@ 0x44
 8004302:	4b54      	ldr	r3, [pc, #336]	@ (8004454 <HAL_GPIO_Init+0x2e8>)
 8004304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004306:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800430a:	60fb      	str	r3, [r7, #12]
 800430c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800430e:	4a52      	ldr	r2, [pc, #328]	@ (8004458 <HAL_GPIO_Init+0x2ec>)
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	089b      	lsrs	r3, r3, #2
 8004314:	3302      	adds	r3, #2
 8004316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800431a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	220f      	movs	r2, #15
 8004326:	fa02 f303 	lsl.w	r3, r2, r3
 800432a:	43db      	mvns	r3, r3
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	4013      	ands	r3, r2
 8004330:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a49      	ldr	r2, [pc, #292]	@ (800445c <HAL_GPIO_Init+0x2f0>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d019      	beq.n	800436e <HAL_GPIO_Init+0x202>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a48      	ldr	r2, [pc, #288]	@ (8004460 <HAL_GPIO_Init+0x2f4>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d013      	beq.n	800436a <HAL_GPIO_Init+0x1fe>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a47      	ldr	r2, [pc, #284]	@ (8004464 <HAL_GPIO_Init+0x2f8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d00d      	beq.n	8004366 <HAL_GPIO_Init+0x1fa>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a46      	ldr	r2, [pc, #280]	@ (8004468 <HAL_GPIO_Init+0x2fc>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d007      	beq.n	8004362 <HAL_GPIO_Init+0x1f6>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a45      	ldr	r2, [pc, #276]	@ (800446c <HAL_GPIO_Init+0x300>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d101      	bne.n	800435e <HAL_GPIO_Init+0x1f2>
 800435a:	2304      	movs	r3, #4
 800435c:	e008      	b.n	8004370 <HAL_GPIO_Init+0x204>
 800435e:	2307      	movs	r3, #7
 8004360:	e006      	b.n	8004370 <HAL_GPIO_Init+0x204>
 8004362:	2303      	movs	r3, #3
 8004364:	e004      	b.n	8004370 <HAL_GPIO_Init+0x204>
 8004366:	2302      	movs	r3, #2
 8004368:	e002      	b.n	8004370 <HAL_GPIO_Init+0x204>
 800436a:	2301      	movs	r3, #1
 800436c:	e000      	b.n	8004370 <HAL_GPIO_Init+0x204>
 800436e:	2300      	movs	r3, #0
 8004370:	69fa      	ldr	r2, [r7, #28]
 8004372:	f002 0203 	and.w	r2, r2, #3
 8004376:	0092      	lsls	r2, r2, #2
 8004378:	4093      	lsls	r3, r2
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	4313      	orrs	r3, r2
 800437e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004380:	4935      	ldr	r1, [pc, #212]	@ (8004458 <HAL_GPIO_Init+0x2ec>)
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	089b      	lsrs	r3, r3, #2
 8004386:	3302      	adds	r3, #2
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800438e:	4b38      	ldr	r3, [pc, #224]	@ (8004470 <HAL_GPIO_Init+0x304>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	43db      	mvns	r3, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4013      	ands	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043b2:	4a2f      	ldr	r2, [pc, #188]	@ (8004470 <HAL_GPIO_Init+0x304>)
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043b8:	4b2d      	ldr	r3, [pc, #180]	@ (8004470 <HAL_GPIO_Init+0x304>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	43db      	mvns	r3, r3
 80043c2:	69ba      	ldr	r2, [r7, #24]
 80043c4:	4013      	ands	r3, r2
 80043c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	4313      	orrs	r3, r2
 80043da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043dc:	4a24      	ldr	r2, [pc, #144]	@ (8004470 <HAL_GPIO_Init+0x304>)
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043e2:	4b23      	ldr	r3, [pc, #140]	@ (8004470 <HAL_GPIO_Init+0x304>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	43db      	mvns	r3, r3
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	4013      	ands	r3, r2
 80043f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	4313      	orrs	r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004406:	4a1a      	ldr	r2, [pc, #104]	@ (8004470 <HAL_GPIO_Init+0x304>)
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800440c:	4b18      	ldr	r3, [pc, #96]	@ (8004470 <HAL_GPIO_Init+0x304>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	43db      	mvns	r3, r3
 8004416:	69ba      	ldr	r2, [r7, #24]
 8004418:	4013      	ands	r3, r2
 800441a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004424:	2b00      	cmp	r3, #0
 8004426:	d003      	beq.n	8004430 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	4313      	orrs	r3, r2
 800442e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004430:	4a0f      	ldr	r2, [pc, #60]	@ (8004470 <HAL_GPIO_Init+0x304>)
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004436:	69fb      	ldr	r3, [r7, #28]
 8004438:	3301      	adds	r3, #1
 800443a:	61fb      	str	r3, [r7, #28]
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	2b0f      	cmp	r3, #15
 8004440:	f67f aea2 	bls.w	8004188 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004444:	bf00      	nop
 8004446:	bf00      	nop
 8004448:	3724      	adds	r7, #36	@ 0x24
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40023800 	.word	0x40023800
 8004458:	40013800 	.word	0x40013800
 800445c:	40020000 	.word	0x40020000
 8004460:	40020400 	.word	0x40020400
 8004464:	40020800 	.word	0x40020800
 8004468:	40020c00 	.word	0x40020c00
 800446c:	40021000 	.word	0x40021000
 8004470:	40013c00 	.word	0x40013c00

08004474 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	460b      	mov	r3, r1
 800447e:	807b      	strh	r3, [r7, #2]
 8004480:	4613      	mov	r3, r2
 8004482:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004484:	787b      	ldrb	r3, [r7, #1]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800448a:	887a      	ldrh	r2, [r7, #2]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004490:	e003      	b.n	800449a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004492:	887b      	ldrh	r3, [r7, #2]
 8004494:	041a      	lsls	r2, r3, #16
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	619a      	str	r2, [r3, #24]
}
 800449a:	bf00      	nop
 800449c:	370c      	adds	r7, #12
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
	...

080044a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d101      	bne.n	80044ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e12b      	b.n	8004712 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d106      	bne.n	80044d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7fe f9b0 	bl	8002834 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2224      	movs	r2, #36	@ 0x24
 80044d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 0201 	bic.w	r2, r2, #1
 80044ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800450a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800450c:	f001 fe4a 	bl	80061a4 <HAL_RCC_GetPCLK1Freq>
 8004510:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	4a81      	ldr	r2, [pc, #516]	@ (800471c <HAL_I2C_Init+0x274>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d807      	bhi.n	800452c <HAL_I2C_Init+0x84>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4a80      	ldr	r2, [pc, #512]	@ (8004720 <HAL_I2C_Init+0x278>)
 8004520:	4293      	cmp	r3, r2
 8004522:	bf94      	ite	ls
 8004524:	2301      	movls	r3, #1
 8004526:	2300      	movhi	r3, #0
 8004528:	b2db      	uxtb	r3, r3
 800452a:	e006      	b.n	800453a <HAL_I2C_Init+0x92>
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	4a7d      	ldr	r2, [pc, #500]	@ (8004724 <HAL_I2C_Init+0x27c>)
 8004530:	4293      	cmp	r3, r2
 8004532:	bf94      	ite	ls
 8004534:	2301      	movls	r3, #1
 8004536:	2300      	movhi	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e0e7      	b.n	8004712 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	4a78      	ldr	r2, [pc, #480]	@ (8004728 <HAL_I2C_Init+0x280>)
 8004546:	fba2 2303 	umull	r2, r3, r2, r3
 800454a:	0c9b      	lsrs	r3, r3, #18
 800454c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	430a      	orrs	r2, r1
 8004560:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	4a6a      	ldr	r2, [pc, #424]	@ (800471c <HAL_I2C_Init+0x274>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d802      	bhi.n	800457c <HAL_I2C_Init+0xd4>
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	3301      	adds	r3, #1
 800457a:	e009      	b.n	8004590 <HAL_I2C_Init+0xe8>
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004582:	fb02 f303 	mul.w	r3, r2, r3
 8004586:	4a69      	ldr	r2, [pc, #420]	@ (800472c <HAL_I2C_Init+0x284>)
 8004588:	fba2 2303 	umull	r2, r3, r2, r3
 800458c:	099b      	lsrs	r3, r3, #6
 800458e:	3301      	adds	r3, #1
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6812      	ldr	r2, [r2, #0]
 8004594:	430b      	orrs	r3, r1
 8004596:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80045a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	495c      	ldr	r1, [pc, #368]	@ (800471c <HAL_I2C_Init+0x274>)
 80045ac:	428b      	cmp	r3, r1
 80045ae:	d819      	bhi.n	80045e4 <HAL_I2C_Init+0x13c>
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	1e59      	subs	r1, r3, #1
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	005b      	lsls	r3, r3, #1
 80045ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80045be:	1c59      	adds	r1, r3, #1
 80045c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80045c4:	400b      	ands	r3, r1
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00a      	beq.n	80045e0 <HAL_I2C_Init+0x138>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	1e59      	subs	r1, r3, #1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80045d8:	3301      	adds	r3, #1
 80045da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045de:	e051      	b.n	8004684 <HAL_I2C_Init+0x1dc>
 80045e0:	2304      	movs	r3, #4
 80045e2:	e04f      	b.n	8004684 <HAL_I2C_Init+0x1dc>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d111      	bne.n	8004610 <HAL_I2C_Init+0x168>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	1e58      	subs	r0, r3, #1
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6859      	ldr	r1, [r3, #4]
 80045f4:	460b      	mov	r3, r1
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	440b      	add	r3, r1
 80045fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80045fe:	3301      	adds	r3, #1
 8004600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004604:	2b00      	cmp	r3, #0
 8004606:	bf0c      	ite	eq
 8004608:	2301      	moveq	r3, #1
 800460a:	2300      	movne	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	e012      	b.n	8004636 <HAL_I2C_Init+0x18e>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	1e58      	subs	r0, r3, #1
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6859      	ldr	r1, [r3, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	0099      	lsls	r1, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	fbb0 f3f3 	udiv	r3, r0, r3
 8004626:	3301      	adds	r3, #1
 8004628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800462c:	2b00      	cmp	r3, #0
 800462e:	bf0c      	ite	eq
 8004630:	2301      	moveq	r3, #1
 8004632:	2300      	movne	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <HAL_I2C_Init+0x196>
 800463a:	2301      	movs	r3, #1
 800463c:	e022      	b.n	8004684 <HAL_I2C_Init+0x1dc>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d10e      	bne.n	8004664 <HAL_I2C_Init+0x1bc>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	1e58      	subs	r0, r3, #1
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6859      	ldr	r1, [r3, #4]
 800464e:	460b      	mov	r3, r1
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	440b      	add	r3, r1
 8004654:	fbb0 f3f3 	udiv	r3, r0, r3
 8004658:	3301      	adds	r3, #1
 800465a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800465e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004662:	e00f      	b.n	8004684 <HAL_I2C_Init+0x1dc>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	1e58      	subs	r0, r3, #1
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6859      	ldr	r1, [r3, #4]
 800466c:	460b      	mov	r3, r1
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	440b      	add	r3, r1
 8004672:	0099      	lsls	r1, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	fbb0 f3f3 	udiv	r3, r0, r3
 800467a:	3301      	adds	r3, #1
 800467c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004680:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004684:	6879      	ldr	r1, [r7, #4]
 8004686:	6809      	ldr	r1, [r1, #0]
 8004688:	4313      	orrs	r3, r2
 800468a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69da      	ldr	r2, [r3, #28]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80046b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	6911      	ldr	r1, [r2, #16]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	68d2      	ldr	r2, [r2, #12]
 80046be:	4311      	orrs	r1, r2
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6812      	ldr	r2, [r2, #0]
 80046c4:	430b      	orrs	r3, r1
 80046c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	695a      	ldr	r2, [r3, #20]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	431a      	orrs	r2, r3
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0201 	orr.w	r2, r2, #1
 80046f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2220      	movs	r2, #32
 80046fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	000186a0 	.word	0x000186a0
 8004720:	001e847f 	.word	0x001e847f
 8004724:	003d08ff 	.word	0x003d08ff
 8004728:	431bde83 	.word	0x431bde83
 800472c:	10624dd3 	.word	0x10624dd3

08004730 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b08c      	sub	sp, #48	@ 0x30
 8004734:	af02      	add	r7, sp, #8
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	4608      	mov	r0, r1
 800473a:	4611      	mov	r1, r2
 800473c:	461a      	mov	r2, r3
 800473e:	4603      	mov	r3, r0
 8004740:	817b      	strh	r3, [r7, #10]
 8004742:	460b      	mov	r3, r1
 8004744:	813b      	strh	r3, [r7, #8]
 8004746:	4613      	mov	r3, r2
 8004748:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800474a:	f7fe fd4d 	bl	80031e8 <HAL_GetTick>
 800474e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004756:	b2db      	uxtb	r3, r3
 8004758:	2b20      	cmp	r3, #32
 800475a:	f040 8214 	bne.w	8004b86 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800475e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	2319      	movs	r3, #25
 8004764:	2201      	movs	r2, #1
 8004766:	497b      	ldr	r1, [pc, #492]	@ (8004954 <HAL_I2C_Mem_Read+0x224>)
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 fefd 	bl	8005568 <I2C_WaitOnFlagUntilTimeout>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004774:	2302      	movs	r3, #2
 8004776:	e207      	b.n	8004b88 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800477e:	2b01      	cmp	r3, #1
 8004780:	d101      	bne.n	8004786 <HAL_I2C_Mem_Read+0x56>
 8004782:	2302      	movs	r3, #2
 8004784:	e200      	b.n	8004b88 <HAL_I2C_Mem_Read+0x458>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b01      	cmp	r3, #1
 800479a:	d007      	beq.n	80047ac <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 0201 	orr.w	r2, r2, #1
 80047aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2222      	movs	r2, #34	@ 0x22
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2240      	movs	r2, #64	@ 0x40
 80047c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80047dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4a5b      	ldr	r2, [pc, #364]	@ (8004958 <HAL_I2C_Mem_Read+0x228>)
 80047ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047ee:	88f8      	ldrh	r0, [r7, #6]
 80047f0:	893a      	ldrh	r2, [r7, #8]
 80047f2:	8979      	ldrh	r1, [r7, #10]
 80047f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f6:	9301      	str	r3, [sp, #4]
 80047f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047fa:	9300      	str	r3, [sp, #0]
 80047fc:	4603      	mov	r3, r0
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 fcae 	bl	8005160 <I2C_RequestMemoryRead>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e1bc      	b.n	8004b88 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004812:	2b00      	cmp	r3, #0
 8004814:	d113      	bne.n	800483e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004816:	2300      	movs	r3, #0
 8004818:	623b      	str	r3, [r7, #32]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	623b      	str	r3, [r7, #32]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	623b      	str	r3, [r7, #32]
 800482a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	e190      	b.n	8004b60 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004842:	2b01      	cmp	r3, #1
 8004844:	d11b      	bne.n	800487e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004854:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004856:	2300      	movs	r3, #0
 8004858:	61fb      	str	r3, [r7, #28]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	61fb      	str	r3, [r7, #28]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	61fb      	str	r3, [r7, #28]
 800486a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	e170      	b.n	8004b60 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004882:	2b02      	cmp	r3, #2
 8004884:	d11b      	bne.n	80048be <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004894:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048a6:	2300      	movs	r3, #0
 80048a8:	61bb      	str	r3, [r7, #24]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	61bb      	str	r3, [r7, #24]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	61bb      	str	r3, [r7, #24]
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	e150      	b.n	8004b60 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048be:	2300      	movs	r3, #0
 80048c0:	617b      	str	r3, [r7, #20]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	617b      	str	r3, [r7, #20]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	699b      	ldr	r3, [r3, #24]
 80048d0:	617b      	str	r3, [r7, #20]
 80048d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80048d4:	e144      	b.n	8004b60 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048da:	2b03      	cmp	r3, #3
 80048dc:	f200 80f1 	bhi.w	8004ac2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d123      	bne.n	8004930 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 ff9d 	bl	800582c <I2C_WaitOnRXNEFlagUntilTimeout>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e145      	b.n	8004b88 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	691a      	ldr	r2, [r3, #16]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004906:	b2d2      	uxtb	r2, r2
 8004908:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490e:	1c5a      	adds	r2, r3, #1
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004918:	3b01      	subs	r3, #1
 800491a:	b29a      	uxth	r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004924:	b29b      	uxth	r3, r3
 8004926:	3b01      	subs	r3, #1
 8004928:	b29a      	uxth	r2, r3
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800492e:	e117      	b.n	8004b60 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004934:	2b02      	cmp	r3, #2
 8004936:	d14e      	bne.n	80049d6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493a:	9300      	str	r3, [sp, #0]
 800493c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800493e:	2200      	movs	r2, #0
 8004940:	4906      	ldr	r1, [pc, #24]	@ (800495c <HAL_I2C_Mem_Read+0x22c>)
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 fe10 	bl	8005568 <I2C_WaitOnFlagUntilTimeout>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d008      	beq.n	8004960 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e11a      	b.n	8004b88 <HAL_I2C_Mem_Read+0x458>
 8004952:	bf00      	nop
 8004954:	00100002 	.word	0x00100002
 8004958:	ffff0000 	.word	0xffff0000
 800495c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800496e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	691a      	ldr	r2, [r3, #16]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004982:	1c5a      	adds	r2, r3, #1
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800498c:	3b01      	subs	r3, #1
 800498e:	b29a      	uxth	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004998:	b29b      	uxth	r3, r3
 800499a:	3b01      	subs	r3, #1
 800499c:	b29a      	uxth	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	691a      	ldr	r2, [r3, #16]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ac:	b2d2      	uxtb	r2, r2
 80049ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049be:	3b01      	subs	r3, #1
 80049c0:	b29a      	uxth	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	3b01      	subs	r3, #1
 80049ce:	b29a      	uxth	r2, r3
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80049d4:	e0c4      	b.n	8004b60 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049dc:	2200      	movs	r2, #0
 80049de:	496c      	ldr	r1, [pc, #432]	@ (8004b90 <HAL_I2C_Mem_Read+0x460>)
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 fdc1 	bl	8005568 <I2C_WaitOnFlagUntilTimeout>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e0cb      	b.n	8004b88 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	691a      	ldr	r2, [r3, #16]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0a:	b2d2      	uxtb	r2, r2
 8004a0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a38:	2200      	movs	r2, #0
 8004a3a:	4955      	ldr	r1, [pc, #340]	@ (8004b90 <HAL_I2C_Mem_Read+0x460>)
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 fd93 	bl	8005568 <I2C_WaitOnFlagUntilTimeout>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e09d      	b.n	8004b88 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691a      	ldr	r2, [r3, #16]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a66:	b2d2      	uxtb	r2, r2
 8004a68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	3b01      	subs	r3, #1
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	691a      	ldr	r2, [r3, #16]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	b29a      	uxth	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ac0:	e04e      	b.n	8004b60 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ac2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ac4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004ac6:	68f8      	ldr	r0, [r7, #12]
 8004ac8:	f000 feb0 	bl	800582c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e058      	b.n	8004b88 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	691a      	ldr	r2, [r3, #16]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae0:	b2d2      	uxtb	r2, r2
 8004ae2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae8:	1c5a      	adds	r2, r3, #1
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004af2:	3b01      	subs	r3, #1
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	3b01      	subs	r3, #1
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	f003 0304 	and.w	r3, r3, #4
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	d124      	bne.n	8004b60 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b1a:	2b03      	cmp	r3, #3
 8004b1c:	d107      	bne.n	8004b2e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b2c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	691a      	ldr	r2, [r3, #16]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b38:	b2d2      	uxtb	r2, r2
 8004b3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b40:	1c5a      	adds	r2, r3, #1
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f47f aeb6 	bne.w	80048d6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2220      	movs	r2, #32
 8004b6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	e000      	b.n	8004b88 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004b86:	2302      	movs	r3, #2
  }
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3728      	adds	r7, #40	@ 0x28
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	00010004 	.word	0x00010004

08004b94 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08c      	sub	sp, #48	@ 0x30
 8004b98:	af02      	add	r7, sp, #8
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	4608      	mov	r0, r1
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	817b      	strh	r3, [r7, #10]
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	813b      	strh	r3, [r7, #8]
 8004baa:	4613      	mov	r3, r2
 8004bac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004bae:	f7fe fb1b 	bl	80031e8 <HAL_GetTick>
 8004bb2:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b20      	cmp	r3, #32
 8004bc2:	f040 8172 	bne.w	8004eaa <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004bc6:	4b93      	ldr	r3, [pc, #588]	@ (8004e14 <HAL_I2C_Mem_Read_DMA+0x280>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	08db      	lsrs	r3, r3, #3
 8004bcc:	4a92      	ldr	r2, [pc, #584]	@ (8004e18 <HAL_I2C_Mem_Read_DMA+0x284>)
 8004bce:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd2:	0a1a      	lsrs	r2, r3, #8
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4413      	add	r3, r2
 8004bda:	009a      	lsls	r2, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	3b01      	subs	r3, #1
 8004be4:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d112      	bne.n	8004c12 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c06:	f043 0220 	orr.w	r2, r3, #32
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8004c0e:	2302      	movs	r3, #2
 8004c10:	e14c      	b.n	8004eac <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d0df      	beq.n	8004be0 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <HAL_I2C_Mem_Read_DMA+0x9a>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e13e      	b.n	8004eac <HAL_I2C_Mem_Read_DMA+0x318>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 0301 	and.w	r3, r3, #1
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d007      	beq.n	8004c54 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0201 	orr.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2222      	movs	r2, #34	@ 0x22
 8004c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2240      	movs	r2, #64	@ 0x40
 8004c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004c84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	4a62      	ldr	r2, [pc, #392]	@ (8004e1c <HAL_I2C_Mem_Read_DMA+0x288>)
 8004c94:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8004c96:	897a      	ldrh	r2, [r7, #10]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8004c9c:	893a      	ldrh	r2, [r7, #8]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004ca2:	88fa      	ldrh	r2, [r7, #6]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2200      	movs	r2, #0
 8004cac:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 80cc 	beq.w	8004e50 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d02d      	beq.n	8004d1c <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc4:	4a56      	ldr	r2, [pc, #344]	@ (8004e20 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8004cc6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ccc:	4a55      	ldr	r2, [pc, #340]	@ (8004e24 <HAL_I2C_Mem_Read_DMA+0x290>)
 8004cce:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cdc:	2200      	movs	r2, #0
 8004cde:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cec:	2200      	movs	r2, #0
 8004cee:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	3310      	adds	r3, #16
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d00:	461a      	mov	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d06:	f7fe fed1 	bl	8003aac <HAL_DMA_Start_IT>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004d10:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f040 8087 	bne.w	8004e28 <HAL_I2C_Mem_Read_DMA+0x294>
 8004d1a:	e013      	b.n	8004d44 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d30:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e0b3      	b.n	8004eac <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004d44:	88f8      	ldrh	r0, [r7, #6]
 8004d46:	893a      	ldrh	r2, [r7, #8]
 8004d48:	8979      	ldrh	r1, [r7, #10]
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4c:	9301      	str	r3, [sp, #4]
 8004d4e:	2323      	movs	r3, #35	@ 0x23
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	4603      	mov	r3, r0
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 fa03 	bl	8005160 <I2C_RequestMemoryRead>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d023      	beq.n	8004da8 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7fe ff69 	bl	8003c3c <HAL_DMA_Abort_IT>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d74:	2200      	movs	r2, #0
 8004d76:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d86:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0201 	bic.w	r2, r2, #1
 8004da2:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e081      	b.n	8004eac <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d108      	bne.n	8004dc2 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	e007      	b.n	8004dd2 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685a      	ldr	r2, [r3, #4]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004dd0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	61bb      	str	r3, [r7, #24]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	61bb      	str	r3, [r7, #24]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	61bb      	str	r3, [r7, #24]
 8004de6:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004dfe:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e0e:	605a      	str	r2, [r3, #4]
 8004e10:	e049      	b.n	8004ea6 <HAL_I2C_Mem_Read_DMA+0x312>
 8004e12:	bf00      	nop
 8004e14:	20000084 	.word	0x20000084
 8004e18:	14f8b589 	.word	0x14f8b589
 8004e1c:	ffff0000 	.word	0xffff0000
 8004e20:	08005331 	.word	0x08005331
 8004e24:	080054ef 	.word	0x080054ef
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3c:	f043 0210 	orr.w	r2, r3, #16
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e02d      	b.n	8004eac <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004e50:	88f8      	ldrh	r0, [r7, #6]
 8004e52:	893a      	ldrh	r2, [r7, #8]
 8004e54:	8979      	ldrh	r1, [r7, #10]
 8004e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e58:	9301      	str	r3, [sp, #4]
 8004e5a:	2323      	movs	r3, #35	@ 0x23
 8004e5c:	9300      	str	r3, [sp, #0]
 8004e5e:	4603      	mov	r3, r0
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f000 f97d 	bl	8005160 <I2C_RequestMemoryRead>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e01d      	b.n	8004eac <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e70:	2300      	movs	r3, #0
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	617b      	str	r3, [r7, #20]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	617b      	str	r3, [r7, #20]
 8004e84:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e94:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	e000      	b.n	8004eac <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8004eaa:	2302      	movs	r3, #2
  }
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3728      	adds	r7, #40	@ 0x28
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b08a      	sub	sp, #40	@ 0x28
 8004eb8:	af02      	add	r7, sp, #8
 8004eba:	60f8      	str	r0, [r7, #12]
 8004ebc:	607a      	str	r2, [r7, #4]
 8004ebe:	603b      	str	r3, [r7, #0]
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004ec4:	f7fe f990 	bl	80031e8 <HAL_GetTick>
 8004ec8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b20      	cmp	r3, #32
 8004ed8:	f040 8111 	bne.w	80050fe <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	2319      	movs	r3, #25
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	4988      	ldr	r1, [pc, #544]	@ (8005108 <HAL_I2C_IsDeviceReady+0x254>)
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 fb3e 	bl	8005568 <I2C_WaitOnFlagUntilTimeout>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d001      	beq.n	8004ef6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	e104      	b.n	8005100 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d101      	bne.n	8004f04 <HAL_I2C_IsDeviceReady+0x50>
 8004f00:	2302      	movs	r3, #2
 8004f02:	e0fd      	b.n	8005100 <HAL_I2C_IsDeviceReady+0x24c>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d007      	beq.n	8004f2a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f042 0201 	orr.w	r2, r2, #1
 8004f28:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2224      	movs	r2, #36	@ 0x24
 8004f3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2200      	movs	r2, #0
 8004f46:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4a70      	ldr	r2, [pc, #448]	@ (800510c <HAL_I2C_IsDeviceReady+0x258>)
 8004f4c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f5c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	2200      	movs	r2, #0
 8004f66:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f000 fafc 	bl	8005568 <I2C_WaitOnFlagUntilTimeout>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00d      	beq.n	8004f92 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f84:	d103      	bne.n	8004f8e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f8c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004f8e:	2303      	movs	r3, #3
 8004f90:	e0b6      	b.n	8005100 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f92:	897b      	ldrh	r3, [r7, #10]
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	461a      	mov	r2, r3
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004fa0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004fa2:	f7fe f921 	bl	80031e8 <HAL_GetTick>
 8004fa6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	f003 0302 	and.w	r3, r3, #2
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	bf0c      	ite	eq
 8004fb6:	2301      	moveq	r3, #1
 8004fb8:	2300      	movne	r3, #0
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fcc:	bf0c      	ite	eq
 8004fce:	2301      	moveq	r3, #1
 8004fd0:	2300      	movne	r3, #0
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004fd6:	e025      	b.n	8005024 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004fd8:	f7fe f906 	bl	80031e8 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d302      	bcc.n	8004fee <HAL_I2C_IsDeviceReady+0x13a>
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d103      	bne.n	8004ff6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	22a0      	movs	r2, #160	@ 0xa0
 8004ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b02      	cmp	r3, #2
 8005002:	bf0c      	ite	eq
 8005004:	2301      	moveq	r3, #1
 8005006:	2300      	movne	r3, #0
 8005008:	b2db      	uxtb	r3, r3
 800500a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005016:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800501a:	bf0c      	ite	eq
 800501c:	2301      	moveq	r3, #1
 800501e:	2300      	movne	r3, #0
 8005020:	b2db      	uxtb	r3, r3
 8005022:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2ba0      	cmp	r3, #160	@ 0xa0
 800502e:	d005      	beq.n	800503c <HAL_I2C_IsDeviceReady+0x188>
 8005030:	7dfb      	ldrb	r3, [r7, #23]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d102      	bne.n	800503c <HAL_I2C_IsDeviceReady+0x188>
 8005036:	7dbb      	ldrb	r3, [r7, #22]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d0cd      	beq.n	8004fd8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2220      	movs	r2, #32
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b02      	cmp	r3, #2
 8005050:	d129      	bne.n	80050a6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005060:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005062:	2300      	movs	r3, #0
 8005064:	613b      	str	r3, [r7, #16]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	695b      	ldr	r3, [r3, #20]
 800506c:	613b      	str	r3, [r7, #16]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	613b      	str	r3, [r7, #16]
 8005076:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	2319      	movs	r3, #25
 800507e:	2201      	movs	r2, #1
 8005080:	4921      	ldr	r1, [pc, #132]	@ (8005108 <HAL_I2C_IsDeviceReady+0x254>)
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 fa70 	bl	8005568 <I2C_WaitOnFlagUntilTimeout>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d001      	beq.n	8005092 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e036      	b.n	8005100 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2220      	movs	r2, #32
 8005096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80050a2:	2300      	movs	r3, #0
 80050a4:	e02c      	b.n	8005100 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050b4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80050be:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	2319      	movs	r3, #25
 80050c6:	2201      	movs	r2, #1
 80050c8:	490f      	ldr	r1, [pc, #60]	@ (8005108 <HAL_I2C_IsDeviceReady+0x254>)
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 fa4c 	bl	8005568 <I2C_WaitOnFlagUntilTimeout>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e012      	b.n	8005100 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	3301      	adds	r3, #1
 80050de:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	f4ff af32 	bcc.w	8004f4e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2220      	movs	r2, #32
 80050ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80050fe:	2302      	movs	r3, #2
  }
}
 8005100:	4618      	mov	r0, r3
 8005102:	3720      	adds	r7, #32
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	00100002 	.word	0x00100002
 800510c:	ffff0000 	.word	0xffff0000

08005110 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005110:	b480      	push	{r7}
 8005112:	b083      	sub	sp, #12
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005118:	bf00      	nop
 800511a:	370c      	adds	r7, #12
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b088      	sub	sp, #32
 8005164:	af02      	add	r7, sp, #8
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	4608      	mov	r0, r1
 800516a:	4611      	mov	r1, r2
 800516c:	461a      	mov	r2, r3
 800516e:	4603      	mov	r3, r0
 8005170:	817b      	strh	r3, [r7, #10]
 8005172:	460b      	mov	r3, r1
 8005174:	813b      	strh	r3, [r7, #8]
 8005176:	4613      	mov	r3, r2
 8005178:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005188:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005198:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800519a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	6a3b      	ldr	r3, [r7, #32]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80051a6:	68f8      	ldr	r0, [r7, #12]
 80051a8:	f000 f9de 	bl	8005568 <I2C_WaitOnFlagUntilTimeout>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00d      	beq.n	80051ce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051c0:	d103      	bne.n	80051ca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e0aa      	b.n	8005324 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051ce:	897b      	ldrh	r3, [r7, #10]
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80051dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051e0:	6a3a      	ldr	r2, [r7, #32]
 80051e2:	4952      	ldr	r1, [pc, #328]	@ (800532c <I2C_RequestMemoryRead+0x1cc>)
 80051e4:	68f8      	ldr	r0, [r7, #12]
 80051e6:	f000 fa39 	bl	800565c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d001      	beq.n	80051f4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e097      	b.n	8005324 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051f4:	2300      	movs	r3, #0
 80051f6:	617b      	str	r3, [r7, #20]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	617b      	str	r3, [r7, #20]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	617b      	str	r3, [r7, #20]
 8005208:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800520a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800520c:	6a39      	ldr	r1, [r7, #32]
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f000 fac4 	bl	800579c <I2C_WaitOnTXEFlagUntilTimeout>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00d      	beq.n	8005236 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521e:	2b04      	cmp	r3, #4
 8005220:	d107      	bne.n	8005232 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005230:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e076      	b.n	8005324 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005236:	88fb      	ldrh	r3, [r7, #6]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d105      	bne.n	8005248 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800523c:	893b      	ldrh	r3, [r7, #8]
 800523e:	b2da      	uxtb	r2, r3
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	611a      	str	r2, [r3, #16]
 8005246:	e021      	b.n	800528c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005248:	893b      	ldrh	r3, [r7, #8]
 800524a:	0a1b      	lsrs	r3, r3, #8
 800524c:	b29b      	uxth	r3, r3
 800524e:	b2da      	uxtb	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005258:	6a39      	ldr	r1, [r7, #32]
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 fa9e 	bl	800579c <I2C_WaitOnTXEFlagUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00d      	beq.n	8005282 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526a:	2b04      	cmp	r3, #4
 800526c:	d107      	bne.n	800527e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800527c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e050      	b.n	8005324 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005282:	893b      	ldrh	r3, [r7, #8]
 8005284:	b2da      	uxtb	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800528c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800528e:	6a39      	ldr	r1, [r7, #32]
 8005290:	68f8      	ldr	r0, [r7, #12]
 8005292:	f000 fa83 	bl	800579c <I2C_WaitOnTXEFlagUntilTimeout>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00d      	beq.n	80052b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a0:	2b04      	cmp	r3, #4
 80052a2:	d107      	bne.n	80052b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e035      	b.n	8005324 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	6a3b      	ldr	r3, [r7, #32]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80052d4:	68f8      	ldr	r0, [r7, #12]
 80052d6:	f000 f947 	bl	8005568 <I2C_WaitOnFlagUntilTimeout>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d00d      	beq.n	80052fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052ee:	d103      	bne.n	80052f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e013      	b.n	8005324 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80052fc:	897b      	ldrh	r3, [r7, #10]
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	f043 0301 	orr.w	r3, r3, #1
 8005304:	b2da      	uxtb	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800530c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530e:	6a3a      	ldr	r2, [r7, #32]
 8005310:	4906      	ldr	r1, [pc, #24]	@ (800532c <I2C_RequestMemoryRead+0x1cc>)
 8005312:	68f8      	ldr	r0, [r7, #12]
 8005314:	f000 f9a2 	bl	800565c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d001      	beq.n	8005322 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800531e:	2301      	movs	r3, #1
 8005320:	e000      	b.n	8005324 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005322:	2300      	movs	r3, #0
}
 8005324:	4618      	mov	r0, r3
 8005326:	3718      	adds	r7, #24
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	00010002 	.word	0x00010002

08005330 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800533c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005344:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800534c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005352:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685a      	ldr	r2, [r3, #4]
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005362:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005370:	2200      	movs	r2, #0
 8005372:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005380:	2200      	movs	r2, #0
 8005382:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005384:	7cfb      	ldrb	r3, [r7, #19]
 8005386:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800538a:	2b21      	cmp	r3, #33	@ 0x21
 800538c:	d007      	beq.n	800539e <I2C_DMAXferCplt+0x6e>
 800538e:	7cfb      	ldrb	r3, [r7, #19]
 8005390:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8005394:	2b22      	cmp	r3, #34	@ 0x22
 8005396:	d131      	bne.n	80053fc <I2C_DMAXferCplt+0xcc>
 8005398:	7cbb      	ldrb	r3, [r7, #18]
 800539a:	2b20      	cmp	r3, #32
 800539c:	d12e      	bne.n	80053fc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685a      	ldr	r2, [r3, #4]
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80053ac:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2200      	movs	r2, #0
 80053b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80053b4:	7cfb      	ldrb	r3, [r7, #19]
 80053b6:	2b29      	cmp	r3, #41	@ 0x29
 80053b8:	d10a      	bne.n	80053d0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	2221      	movs	r2, #33	@ 0x21
 80053be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	2228      	movs	r2, #40	@ 0x28
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80053c8:	6978      	ldr	r0, [r7, #20]
 80053ca:	f7ff feab 	bl	8005124 <HAL_I2C_SlaveTxCpltCallback>
 80053ce:	e00c      	b.n	80053ea <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80053d0:	7cfb      	ldrb	r3, [r7, #19]
 80053d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80053d4:	d109      	bne.n	80053ea <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	2222      	movs	r2, #34	@ 0x22
 80053da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	2228      	movs	r2, #40	@ 0x28
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053e4:	6978      	ldr	r0, [r7, #20]
 80053e6:	f7ff fea7 	bl	8005138 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80053f8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80053fa:	e074      	b.n	80054e6 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	d06e      	beq.n	80054e6 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800540c:	b29b      	uxth	r3, r3
 800540e:	2b01      	cmp	r3, #1
 8005410:	d107      	bne.n	8005422 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005420:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005430:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005438:	d009      	beq.n	800544e <I2C_DMAXferCplt+0x11e>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2b08      	cmp	r3, #8
 800543e:	d006      	beq.n	800544e <I2C_DMAXferCplt+0x11e>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005446:	d002      	beq.n	800544e <I2C_DMAXferCplt+0x11e>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2b20      	cmp	r3, #32
 800544c:	d107      	bne.n	800545e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800545c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	685a      	ldr	r2, [r3, #4]
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800546c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685a      	ldr	r2, [r3, #4]
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800547c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	2200      	movs	r2, #0
 8005482:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800548c:	6978      	ldr	r0, [r7, #20]
 800548e:	f7ff fe5d 	bl	800514c <HAL_I2C_ErrorCallback>
}
 8005492:	e028      	b.n	80054e6 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	2220      	movs	r2, #32
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b40      	cmp	r3, #64	@ 0x40
 80054a6:	d10a      	bne.n	80054be <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	2200      	movs	r2, #0
 80054b4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80054b6:	6978      	ldr	r0, [r7, #20]
 80054b8:	f7fc ff1e 	bl	80022f8 <HAL_I2C_MemRxCpltCallback>
}
 80054bc:	e013      	b.n	80054e6 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2b08      	cmp	r3, #8
 80054ca:	d002      	beq.n	80054d2 <I2C_DMAXferCplt+0x1a2>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2b20      	cmp	r3, #32
 80054d0:	d103      	bne.n	80054da <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	2200      	movs	r2, #0
 80054d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80054d8:	e002      	b.n	80054e0 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2212      	movs	r2, #18
 80054de:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80054e0:	6978      	ldr	r0, [r7, #20]
 80054e2:	f7ff fe15 	bl	8005110 <HAL_I2C_MasterRxCpltCallback>
}
 80054e6:	bf00      	nop
 80054e8:	3718      	adds	r7, #24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b084      	sub	sp, #16
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054fa:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005500:	2b00      	cmp	r3, #0
 8005502:	d003      	beq.n	800550c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005508:	2200      	movs	r2, #0
 800550a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005510:	2b00      	cmp	r3, #0
 8005512:	d003      	beq.n	800551c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005518:	2200      	movs	r2, #0
 800551a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f7fe fd39 	bl	8003f94 <HAL_DMA_GetError>
 8005522:	4603      	mov	r3, r0
 8005524:	2b02      	cmp	r3, #2
 8005526:	d01b      	beq.n	8005560 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005536:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2200      	movs	r2, #0
 800553c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2220      	movs	r2, #32
 8005542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005552:	f043 0210 	orr.w	r2, r3, #16
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f7ff fdf6 	bl	800514c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005560:	bf00      	nop
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	603b      	str	r3, [r7, #0]
 8005574:	4613      	mov	r3, r2
 8005576:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005578:	e048      	b.n	800560c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005580:	d044      	beq.n	800560c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005582:	f7fd fe31 	bl	80031e8 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	429a      	cmp	r2, r3
 8005590:	d302      	bcc.n	8005598 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d139      	bne.n	800560c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	0c1b      	lsrs	r3, r3, #16
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d10d      	bne.n	80055be <I2C_WaitOnFlagUntilTimeout+0x56>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	43da      	mvns	r2, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	4013      	ands	r3, r2
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	bf0c      	ite	eq
 80055b4:	2301      	moveq	r3, #1
 80055b6:	2300      	movne	r3, #0
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	461a      	mov	r2, r3
 80055bc:	e00c      	b.n	80055d8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	43da      	mvns	r2, r3
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	4013      	ands	r3, r2
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	bf0c      	ite	eq
 80055d0:	2301      	moveq	r3, #1
 80055d2:	2300      	movne	r3, #0
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	461a      	mov	r2, r3
 80055d8:	79fb      	ldrb	r3, [r7, #7]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d116      	bne.n	800560c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2220      	movs	r2, #32
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055f8:	f043 0220 	orr.w	r2, r3, #32
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	e023      	b.n	8005654 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	0c1b      	lsrs	r3, r3, #16
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b01      	cmp	r3, #1
 8005614:	d10d      	bne.n	8005632 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	43da      	mvns	r2, r3
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	4013      	ands	r3, r2
 8005622:	b29b      	uxth	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	bf0c      	ite	eq
 8005628:	2301      	moveq	r3, #1
 800562a:	2300      	movne	r3, #0
 800562c:	b2db      	uxtb	r3, r3
 800562e:	461a      	mov	r2, r3
 8005630:	e00c      	b.n	800564c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	699b      	ldr	r3, [r3, #24]
 8005638:	43da      	mvns	r2, r3
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	4013      	ands	r3, r2
 800563e:	b29b      	uxth	r3, r3
 8005640:	2b00      	cmp	r3, #0
 8005642:	bf0c      	ite	eq
 8005644:	2301      	moveq	r3, #1
 8005646:	2300      	movne	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	461a      	mov	r2, r3
 800564c:	79fb      	ldrb	r3, [r7, #7]
 800564e:	429a      	cmp	r2, r3
 8005650:	d093      	beq.n	800557a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3710      	adds	r7, #16
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
 8005668:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800566a:	e071      	b.n	8005750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	695b      	ldr	r3, [r3, #20]
 8005672:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005676:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800567a:	d123      	bne.n	80056c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800568a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005694:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2200      	movs	r2, #0
 800569a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2220      	movs	r2, #32
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b0:	f043 0204 	orr.w	r2, r3, #4
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	e067      	b.n	8005794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ca:	d041      	beq.n	8005750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056cc:	f7fd fd8c 	bl	80031e8 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d302      	bcc.n	80056e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d136      	bne.n	8005750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	0c1b      	lsrs	r3, r3, #16
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d10c      	bne.n	8005706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	43da      	mvns	r2, r3
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	4013      	ands	r3, r2
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	bf14      	ite	ne
 80056fe:	2301      	movne	r3, #1
 8005700:	2300      	moveq	r3, #0
 8005702:	b2db      	uxtb	r3, r3
 8005704:	e00b      	b.n	800571e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	43da      	mvns	r2, r3
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	4013      	ands	r3, r2
 8005712:	b29b      	uxth	r3, r3
 8005714:	2b00      	cmp	r3, #0
 8005716:	bf14      	ite	ne
 8005718:	2301      	movne	r3, #1
 800571a:	2300      	moveq	r3, #0
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b00      	cmp	r3, #0
 8005720:	d016      	beq.n	8005750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2220      	movs	r2, #32
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573c:	f043 0220 	orr.w	r2, r3, #32
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e021      	b.n	8005794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	0c1b      	lsrs	r3, r3, #16
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b01      	cmp	r3, #1
 8005758:	d10c      	bne.n	8005774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	43da      	mvns	r2, r3
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	4013      	ands	r3, r2
 8005766:	b29b      	uxth	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	bf14      	ite	ne
 800576c:	2301      	movne	r3, #1
 800576e:	2300      	moveq	r3, #0
 8005770:	b2db      	uxtb	r3, r3
 8005772:	e00b      	b.n	800578c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	43da      	mvns	r2, r3
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	4013      	ands	r3, r2
 8005780:	b29b      	uxth	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	bf14      	ite	ne
 8005786:	2301      	movne	r3, #1
 8005788:	2300      	moveq	r3, #0
 800578a:	b2db      	uxtb	r3, r3
 800578c:	2b00      	cmp	r3, #0
 800578e:	f47f af6d 	bne.w	800566c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057a8:	e034      	b.n	8005814 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80057aa:	68f8      	ldr	r0, [r7, #12]
 80057ac:	f000 f89b 	bl	80058e6 <I2C_IsAcknowledgeFailed>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d001      	beq.n	80057ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e034      	b.n	8005824 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c0:	d028      	beq.n	8005814 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057c2:	f7fd fd11 	bl	80031e8 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d302      	bcc.n	80057d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d11d      	bne.n	8005814 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	695b      	ldr	r3, [r3, #20]
 80057de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057e2:	2b80      	cmp	r3, #128	@ 0x80
 80057e4:	d016      	beq.n	8005814 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2220      	movs	r2, #32
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005800:	f043 0220 	orr.w	r2, r3, #32
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2200      	movs	r2, #0
 800580c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e007      	b.n	8005824 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800581e:	2b80      	cmp	r3, #128	@ 0x80
 8005820:	d1c3      	bne.n	80057aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005838:	e049      	b.n	80058ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	f003 0310 	and.w	r3, r3, #16
 8005844:	2b10      	cmp	r3, #16
 8005846:	d119      	bne.n	800587c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f06f 0210 	mvn.w	r2, #16
 8005850:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e030      	b.n	80058de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800587c:	f7fd fcb4 	bl	80031e8 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	429a      	cmp	r2, r3
 800588a:	d302      	bcc.n	8005892 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d11d      	bne.n	80058ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800589c:	2b40      	cmp	r3, #64	@ 0x40
 800589e:	d016      	beq.n	80058ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	2200      	movs	r2, #0
 80058a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ba:	f043 0220 	orr.w	r2, r3, #32
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e007      	b.n	80058de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d8:	2b40      	cmp	r3, #64	@ 0x40
 80058da:	d1ae      	bne.n	800583a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	695b      	ldr	r3, [r3, #20]
 80058f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058fc:	d11b      	bne.n	8005936 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005906:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2220      	movs	r2, #32
 8005912:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005922:	f043 0204 	orr.w	r2, r3, #4
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e000      	b.n	8005938 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e267      	b.n	8005e26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0301 	and.w	r3, r3, #1
 800595e:	2b00      	cmp	r3, #0
 8005960:	d075      	beq.n	8005a4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005962:	4b88      	ldr	r3, [pc, #544]	@ (8005b84 <HAL_RCC_OscConfig+0x240>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 030c 	and.w	r3, r3, #12
 800596a:	2b04      	cmp	r3, #4
 800596c:	d00c      	beq.n	8005988 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800596e:	4b85      	ldr	r3, [pc, #532]	@ (8005b84 <HAL_RCC_OscConfig+0x240>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005976:	2b08      	cmp	r3, #8
 8005978:	d112      	bne.n	80059a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800597a:	4b82      	ldr	r3, [pc, #520]	@ (8005b84 <HAL_RCC_OscConfig+0x240>)
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005982:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005986:	d10b      	bne.n	80059a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005988:	4b7e      	ldr	r3, [pc, #504]	@ (8005b84 <HAL_RCC_OscConfig+0x240>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d05b      	beq.n	8005a4c <HAL_RCC_OscConfig+0x108>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d157      	bne.n	8005a4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e242      	b.n	8005e26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059a8:	d106      	bne.n	80059b8 <HAL_RCC_OscConfig+0x74>
 80059aa:	4b76      	ldr	r3, [pc, #472]	@ (8005b84 <HAL_RCC_OscConfig+0x240>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a75      	ldr	r2, [pc, #468]	@ (8005b84 <HAL_RCC_OscConfig+0x240>)
 80059b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059b4:	6013      	str	r3, [r2, #0]
 80059b6:	e01d      	b.n	80059f4 <HAL_RCC_OscConfig+0xb0>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059c0:	d10c      	bne.n	80059dc <HAL_RCC_OscConfig+0x98>
 80059c2:	4b70      	ldr	r3, [pc, #448]	@ (8005b84 <HAL_RCC_OscConfig+0x240>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a6f      	ldr	r2, [pc, #444]	@ (8005b84 <HAL_RCC_OscConfig+0x240>)
 80059c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059cc:	6013      	str	r3, [r2, #0]
 80059ce:	4b6d      	ldr	r3, [pc, #436]	@ (8005b84 <HAL_RCC_OscConfig+0x240>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a6c      	ldr	r2, [pc, #432]	@ (8005b84 <HAL_RCC_OscConfig+0x240>)
 80059d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059d8:	6013      	str	r3, [r2, #0]
 80059da:	e00b      	b.n	80059f4 <HAL_RCC_OscConfig+0xb0>
 80059dc:	4b69      	ldr	r3, [pc, #420]	@ (8005b84 <HAL_RCC_OscConfig+0x240>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a68      	ldr	r2, [pc, #416]	@ (8005b84 <HAL_RCC_OscConfig+0x240>)
 80059e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	4b66      	ldr	r3, [pc, #408]	@ (8005b84 <HAL_RCC_OscConfig+0x240>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a65      	ldr	r2, [pc, #404]	@ (8005b84 <HAL_RCC_OscConfig+0x240>)
 80059ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d013      	beq.n	8005a24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059fc:	f7fd fbf4 	bl	80031e8 <HAL_GetTick>
 8005a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a02:	e008      	b.n	8005a16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a04:	f7fd fbf0 	bl	80031e8 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	2b64      	cmp	r3, #100	@ 0x64
 8005a10:	d901      	bls.n	8005a16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005a12:	2303      	movs	r3, #3
 8005a14:	e207      	b.n	8005e26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a16:	4b5b      	ldr	r3, [pc, #364]	@ (8005b84 <HAL_RCC_OscConfig+0x240>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d0f0      	beq.n	8005a04 <HAL_RCC_OscConfig+0xc0>
 8005a22:	e014      	b.n	8005a4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a24:	f7fd fbe0 	bl	80031e8 <HAL_GetTick>
 8005a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a2a:	e008      	b.n	8005a3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a2c:	f7fd fbdc 	bl	80031e8 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b64      	cmp	r3, #100	@ 0x64
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e1f3      	b.n	8005e26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a3e:	4b51      	ldr	r3, [pc, #324]	@ (8005b84 <HAL_RCC_OscConfig+0x240>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1f0      	bne.n	8005a2c <HAL_RCC_OscConfig+0xe8>
 8005a4a:	e000      	b.n	8005a4e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0302 	and.w	r3, r3, #2
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d063      	beq.n	8005b22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005a5a:	4b4a      	ldr	r3, [pc, #296]	@ (8005b84 <HAL_RCC_OscConfig+0x240>)
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	f003 030c 	and.w	r3, r3, #12
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00b      	beq.n	8005a7e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a66:	4b47      	ldr	r3, [pc, #284]	@ (8005b84 <HAL_RCC_OscConfig+0x240>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005a6e:	2b08      	cmp	r3, #8
 8005a70:	d11c      	bne.n	8005aac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a72:	4b44      	ldr	r3, [pc, #272]	@ (8005b84 <HAL_RCC_OscConfig+0x240>)
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d116      	bne.n	8005aac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a7e:	4b41      	ldr	r3, [pc, #260]	@ (8005b84 <HAL_RCC_OscConfig+0x240>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0302 	and.w	r3, r3, #2
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d005      	beq.n	8005a96 <HAL_RCC_OscConfig+0x152>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d001      	beq.n	8005a96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e1c7      	b.n	8005e26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a96:	4b3b      	ldr	r3, [pc, #236]	@ (8005b84 <HAL_RCC_OscConfig+0x240>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	4937      	ldr	r1, [pc, #220]	@ (8005b84 <HAL_RCC_OscConfig+0x240>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005aaa:	e03a      	b.n	8005b22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d020      	beq.n	8005af6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ab4:	4b34      	ldr	r3, [pc, #208]	@ (8005b88 <HAL_RCC_OscConfig+0x244>)
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aba:	f7fd fb95 	bl	80031e8 <HAL_GetTick>
 8005abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ac0:	e008      	b.n	8005ad4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ac2:	f7fd fb91 	bl	80031e8 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e1a8      	b.n	8005e26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8005b84 <HAL_RCC_OscConfig+0x240>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0302 	and.w	r3, r3, #2
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0f0      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ae0:	4b28      	ldr	r3, [pc, #160]	@ (8005b84 <HAL_RCC_OscConfig+0x240>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	691b      	ldr	r3, [r3, #16]
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	4925      	ldr	r1, [pc, #148]	@ (8005b84 <HAL_RCC_OscConfig+0x240>)
 8005af0:	4313      	orrs	r3, r2
 8005af2:	600b      	str	r3, [r1, #0]
 8005af4:	e015      	b.n	8005b22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005af6:	4b24      	ldr	r3, [pc, #144]	@ (8005b88 <HAL_RCC_OscConfig+0x244>)
 8005af8:	2200      	movs	r2, #0
 8005afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005afc:	f7fd fb74 	bl	80031e8 <HAL_GetTick>
 8005b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b02:	e008      	b.n	8005b16 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b04:	f7fd fb70 	bl	80031e8 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e187      	b.n	8005e26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b16:	4b1b      	ldr	r3, [pc, #108]	@ (8005b84 <HAL_RCC_OscConfig+0x240>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1f0      	bne.n	8005b04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0308 	and.w	r3, r3, #8
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d036      	beq.n	8005b9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d016      	beq.n	8005b64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b36:	4b15      	ldr	r3, [pc, #84]	@ (8005b8c <HAL_RCC_OscConfig+0x248>)
 8005b38:	2201      	movs	r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b3c:	f7fd fb54 	bl	80031e8 <HAL_GetTick>
 8005b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b42:	e008      	b.n	8005b56 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b44:	f7fd fb50 	bl	80031e8 <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e167      	b.n	8005e26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b56:	4b0b      	ldr	r3, [pc, #44]	@ (8005b84 <HAL_RCC_OscConfig+0x240>)
 8005b58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d0f0      	beq.n	8005b44 <HAL_RCC_OscConfig+0x200>
 8005b62:	e01b      	b.n	8005b9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b64:	4b09      	ldr	r3, [pc, #36]	@ (8005b8c <HAL_RCC_OscConfig+0x248>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b6a:	f7fd fb3d 	bl	80031e8 <HAL_GetTick>
 8005b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b70:	e00e      	b.n	8005b90 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b72:	f7fd fb39 	bl	80031e8 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d907      	bls.n	8005b90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e150      	b.n	8005e26 <HAL_RCC_OscConfig+0x4e2>
 8005b84:	40023800 	.word	0x40023800
 8005b88:	42470000 	.word	0x42470000
 8005b8c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b90:	4b88      	ldr	r3, [pc, #544]	@ (8005db4 <HAL_RCC_OscConfig+0x470>)
 8005b92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b94:	f003 0302 	and.w	r3, r3, #2
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1ea      	bne.n	8005b72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0304 	and.w	r3, r3, #4
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 8097 	beq.w	8005cd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005baa:	2300      	movs	r3, #0
 8005bac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bae:	4b81      	ldr	r3, [pc, #516]	@ (8005db4 <HAL_RCC_OscConfig+0x470>)
 8005bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d10f      	bne.n	8005bda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005bba:	2300      	movs	r3, #0
 8005bbc:	60bb      	str	r3, [r7, #8]
 8005bbe:	4b7d      	ldr	r3, [pc, #500]	@ (8005db4 <HAL_RCC_OscConfig+0x470>)
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc2:	4a7c      	ldr	r2, [pc, #496]	@ (8005db4 <HAL_RCC_OscConfig+0x470>)
 8005bc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005bca:	4b7a      	ldr	r3, [pc, #488]	@ (8005db4 <HAL_RCC_OscConfig+0x470>)
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bd2:	60bb      	str	r3, [r7, #8]
 8005bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bda:	4b77      	ldr	r3, [pc, #476]	@ (8005db8 <HAL_RCC_OscConfig+0x474>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d118      	bne.n	8005c18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005be6:	4b74      	ldr	r3, [pc, #464]	@ (8005db8 <HAL_RCC_OscConfig+0x474>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a73      	ldr	r2, [pc, #460]	@ (8005db8 <HAL_RCC_OscConfig+0x474>)
 8005bec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bf2:	f7fd faf9 	bl	80031e8 <HAL_GetTick>
 8005bf6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bf8:	e008      	b.n	8005c0c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bfa:	f7fd faf5 	bl	80031e8 <HAL_GetTick>
 8005bfe:	4602      	mov	r2, r0
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	1ad3      	subs	r3, r2, r3
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d901      	bls.n	8005c0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e10c      	b.n	8005e26 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c0c:	4b6a      	ldr	r3, [pc, #424]	@ (8005db8 <HAL_RCC_OscConfig+0x474>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d0f0      	beq.n	8005bfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d106      	bne.n	8005c2e <HAL_RCC_OscConfig+0x2ea>
 8005c20:	4b64      	ldr	r3, [pc, #400]	@ (8005db4 <HAL_RCC_OscConfig+0x470>)
 8005c22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c24:	4a63      	ldr	r2, [pc, #396]	@ (8005db4 <HAL_RCC_OscConfig+0x470>)
 8005c26:	f043 0301 	orr.w	r3, r3, #1
 8005c2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c2c:	e01c      	b.n	8005c68 <HAL_RCC_OscConfig+0x324>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	2b05      	cmp	r3, #5
 8005c34:	d10c      	bne.n	8005c50 <HAL_RCC_OscConfig+0x30c>
 8005c36:	4b5f      	ldr	r3, [pc, #380]	@ (8005db4 <HAL_RCC_OscConfig+0x470>)
 8005c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c3a:	4a5e      	ldr	r2, [pc, #376]	@ (8005db4 <HAL_RCC_OscConfig+0x470>)
 8005c3c:	f043 0304 	orr.w	r3, r3, #4
 8005c40:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c42:	4b5c      	ldr	r3, [pc, #368]	@ (8005db4 <HAL_RCC_OscConfig+0x470>)
 8005c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c46:	4a5b      	ldr	r2, [pc, #364]	@ (8005db4 <HAL_RCC_OscConfig+0x470>)
 8005c48:	f043 0301 	orr.w	r3, r3, #1
 8005c4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c4e:	e00b      	b.n	8005c68 <HAL_RCC_OscConfig+0x324>
 8005c50:	4b58      	ldr	r3, [pc, #352]	@ (8005db4 <HAL_RCC_OscConfig+0x470>)
 8005c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c54:	4a57      	ldr	r2, [pc, #348]	@ (8005db4 <HAL_RCC_OscConfig+0x470>)
 8005c56:	f023 0301 	bic.w	r3, r3, #1
 8005c5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c5c:	4b55      	ldr	r3, [pc, #340]	@ (8005db4 <HAL_RCC_OscConfig+0x470>)
 8005c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c60:	4a54      	ldr	r2, [pc, #336]	@ (8005db4 <HAL_RCC_OscConfig+0x470>)
 8005c62:	f023 0304 	bic.w	r3, r3, #4
 8005c66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d015      	beq.n	8005c9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c70:	f7fd faba 	bl	80031e8 <HAL_GetTick>
 8005c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c76:	e00a      	b.n	8005c8e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c78:	f7fd fab6 	bl	80031e8 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e0cb      	b.n	8005e26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c8e:	4b49      	ldr	r3, [pc, #292]	@ (8005db4 <HAL_RCC_OscConfig+0x470>)
 8005c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0ee      	beq.n	8005c78 <HAL_RCC_OscConfig+0x334>
 8005c9a:	e014      	b.n	8005cc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c9c:	f7fd faa4 	bl	80031e8 <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ca2:	e00a      	b.n	8005cba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ca4:	f7fd faa0 	bl	80031e8 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e0b5      	b.n	8005e26 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005cba:	4b3e      	ldr	r3, [pc, #248]	@ (8005db4 <HAL_RCC_OscConfig+0x470>)
 8005cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1ee      	bne.n	8005ca4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005cc6:	7dfb      	ldrb	r3, [r7, #23]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d105      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ccc:	4b39      	ldr	r3, [pc, #228]	@ (8005db4 <HAL_RCC_OscConfig+0x470>)
 8005cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd0:	4a38      	ldr	r2, [pc, #224]	@ (8005db4 <HAL_RCC_OscConfig+0x470>)
 8005cd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cd6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 80a1 	beq.w	8005e24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ce2:	4b34      	ldr	r3, [pc, #208]	@ (8005db4 <HAL_RCC_OscConfig+0x470>)
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f003 030c 	and.w	r3, r3, #12
 8005cea:	2b08      	cmp	r3, #8
 8005cec:	d05c      	beq.n	8005da8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d141      	bne.n	8005d7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cf6:	4b31      	ldr	r3, [pc, #196]	@ (8005dbc <HAL_RCC_OscConfig+0x478>)
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cfc:	f7fd fa74 	bl	80031e8 <HAL_GetTick>
 8005d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d02:	e008      	b.n	8005d16 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d04:	f7fd fa70 	bl	80031e8 <HAL_GetTick>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	1ad3      	subs	r3, r2, r3
 8005d0e:	2b02      	cmp	r3, #2
 8005d10:	d901      	bls.n	8005d16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e087      	b.n	8005e26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d16:	4b27      	ldr	r3, [pc, #156]	@ (8005db4 <HAL_RCC_OscConfig+0x470>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1f0      	bne.n	8005d04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	69da      	ldr	r2, [r3, #28]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a1b      	ldr	r3, [r3, #32]
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d30:	019b      	lsls	r3, r3, #6
 8005d32:	431a      	orrs	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d38:	085b      	lsrs	r3, r3, #1
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	041b      	lsls	r3, r3, #16
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d44:	061b      	lsls	r3, r3, #24
 8005d46:	491b      	ldr	r1, [pc, #108]	@ (8005db4 <HAL_RCC_OscConfig+0x470>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8005dbc <HAL_RCC_OscConfig+0x478>)
 8005d4e:	2201      	movs	r2, #1
 8005d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d52:	f7fd fa49 	bl	80031e8 <HAL_GetTick>
 8005d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d58:	e008      	b.n	8005d6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d5a:	f7fd fa45 	bl	80031e8 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d901      	bls.n	8005d6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e05c      	b.n	8005e26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d6c:	4b11      	ldr	r3, [pc, #68]	@ (8005db4 <HAL_RCC_OscConfig+0x470>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d0f0      	beq.n	8005d5a <HAL_RCC_OscConfig+0x416>
 8005d78:	e054      	b.n	8005e24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d7a:	4b10      	ldr	r3, [pc, #64]	@ (8005dbc <HAL_RCC_OscConfig+0x478>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d80:	f7fd fa32 	bl	80031e8 <HAL_GetTick>
 8005d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d86:	e008      	b.n	8005d9a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d88:	f7fd fa2e 	bl	80031e8 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d901      	bls.n	8005d9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e045      	b.n	8005e26 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d9a:	4b06      	ldr	r3, [pc, #24]	@ (8005db4 <HAL_RCC_OscConfig+0x470>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d1f0      	bne.n	8005d88 <HAL_RCC_OscConfig+0x444>
 8005da6:	e03d      	b.n	8005e24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d107      	bne.n	8005dc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	e038      	b.n	8005e26 <HAL_RCC_OscConfig+0x4e2>
 8005db4:	40023800 	.word	0x40023800
 8005db8:	40007000 	.word	0x40007000
 8005dbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005dc0:	4b1b      	ldr	r3, [pc, #108]	@ (8005e30 <HAL_RCC_OscConfig+0x4ec>)
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d028      	beq.n	8005e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d121      	bne.n	8005e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d11a      	bne.n	8005e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005df0:	4013      	ands	r3, r2
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005df6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d111      	bne.n	8005e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e06:	085b      	lsrs	r3, r3, #1
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d107      	bne.n	8005e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d001      	beq.n	8005e24 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e000      	b.n	8005e26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3718      	adds	r7, #24
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	40023800 	.word	0x40023800

08005e34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e0cc      	b.n	8005fe2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e48:	4b68      	ldr	r3, [pc, #416]	@ (8005fec <HAL_RCC_ClockConfig+0x1b8>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0307 	and.w	r3, r3, #7
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d90c      	bls.n	8005e70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e56:	4b65      	ldr	r3, [pc, #404]	@ (8005fec <HAL_RCC_ClockConfig+0x1b8>)
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	b2d2      	uxtb	r2, r2
 8005e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e5e:	4b63      	ldr	r3, [pc, #396]	@ (8005fec <HAL_RCC_ClockConfig+0x1b8>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0307 	and.w	r3, r3, #7
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d001      	beq.n	8005e70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e0b8      	b.n	8005fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0302 	and.w	r3, r3, #2
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d020      	beq.n	8005ebe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0304 	and.w	r3, r3, #4
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d005      	beq.n	8005e94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e88:	4b59      	ldr	r3, [pc, #356]	@ (8005ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	4a58      	ldr	r2, [pc, #352]	@ (8005ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8005e8e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005e92:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0308 	and.w	r3, r3, #8
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d005      	beq.n	8005eac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005ea0:	4b53      	ldr	r3, [pc, #332]	@ (8005ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	4a52      	ldr	r2, [pc, #328]	@ (8005ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ea6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005eaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005eac:	4b50      	ldr	r3, [pc, #320]	@ (8005ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	494d      	ldr	r1, [pc, #308]	@ (8005ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d044      	beq.n	8005f54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d107      	bne.n	8005ee2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ed2:	4b47      	ldr	r3, [pc, #284]	@ (8005ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d119      	bne.n	8005f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e07f      	b.n	8005fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d003      	beq.n	8005ef2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005eee:	2b03      	cmp	r3, #3
 8005ef0:	d107      	bne.n	8005f02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ef2:	4b3f      	ldr	r3, [pc, #252]	@ (8005ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d109      	bne.n	8005f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e06f      	b.n	8005fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f02:	4b3b      	ldr	r3, [pc, #236]	@ (8005ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0302 	and.w	r3, r3, #2
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d101      	bne.n	8005f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e067      	b.n	8005fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005f12:	4b37      	ldr	r3, [pc, #220]	@ (8005ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f023 0203 	bic.w	r2, r3, #3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	4934      	ldr	r1, [pc, #208]	@ (8005ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f20:	4313      	orrs	r3, r2
 8005f22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f24:	f7fd f960 	bl	80031e8 <HAL_GetTick>
 8005f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f2a:	e00a      	b.n	8005f42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f2c:	f7fd f95c 	bl	80031e8 <HAL_GetTick>
 8005f30:	4602      	mov	r2, r0
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	1ad3      	subs	r3, r2, r3
 8005f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d901      	bls.n	8005f42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f3e:	2303      	movs	r3, #3
 8005f40:	e04f      	b.n	8005fe2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f42:	4b2b      	ldr	r3, [pc, #172]	@ (8005ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f003 020c 	and.w	r2, r3, #12
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d1eb      	bne.n	8005f2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f54:	4b25      	ldr	r3, [pc, #148]	@ (8005fec <HAL_RCC_ClockConfig+0x1b8>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0307 	and.w	r3, r3, #7
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d20c      	bcs.n	8005f7c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f62:	4b22      	ldr	r3, [pc, #136]	@ (8005fec <HAL_RCC_ClockConfig+0x1b8>)
 8005f64:	683a      	ldr	r2, [r7, #0]
 8005f66:	b2d2      	uxtb	r2, r2
 8005f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f6a:	4b20      	ldr	r3, [pc, #128]	@ (8005fec <HAL_RCC_ClockConfig+0x1b8>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0307 	and.w	r3, r3, #7
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d001      	beq.n	8005f7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e032      	b.n	8005fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 0304 	and.w	r3, r3, #4
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d008      	beq.n	8005f9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f88:	4b19      	ldr	r3, [pc, #100]	@ (8005ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	4916      	ldr	r1, [pc, #88]	@ (8005ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0308 	and.w	r3, r3, #8
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d009      	beq.n	8005fba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fa6:	4b12      	ldr	r3, [pc, #72]	@ (8005ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa8:	689b      	ldr	r3, [r3, #8]
 8005faa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	490e      	ldr	r1, [pc, #56]	@ (8005ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005fba:	f000 f821 	bl	8006000 <HAL_RCC_GetSysClockFreq>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8005ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	091b      	lsrs	r3, r3, #4
 8005fc6:	f003 030f 	and.w	r3, r3, #15
 8005fca:	490a      	ldr	r1, [pc, #40]	@ (8005ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8005fcc:	5ccb      	ldrb	r3, [r1, r3]
 8005fce:	fa22 f303 	lsr.w	r3, r2, r3
 8005fd2:	4a09      	ldr	r2, [pc, #36]	@ (8005ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8005fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005fd6:	4b09      	ldr	r3, [pc, #36]	@ (8005ffc <HAL_RCC_ClockConfig+0x1c8>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fd f8c0 	bl	8003160 <HAL_InitTick>

  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	40023c00 	.word	0x40023c00
 8005ff0:	40023800 	.word	0x40023800
 8005ff4:	0800cbb8 	.word	0x0800cbb8
 8005ff8:	20000084 	.word	0x20000084
 8005ffc:	20000088 	.word	0x20000088

08006000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006004:	b090      	sub	sp, #64	@ 0x40
 8006006:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006008:	2300      	movs	r3, #0
 800600a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800600c:	2300      	movs	r3, #0
 800600e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006014:	2300      	movs	r3, #0
 8006016:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006018:	4b59      	ldr	r3, [pc, #356]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x180>)
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	f003 030c 	and.w	r3, r3, #12
 8006020:	2b08      	cmp	r3, #8
 8006022:	d00d      	beq.n	8006040 <HAL_RCC_GetSysClockFreq+0x40>
 8006024:	2b08      	cmp	r3, #8
 8006026:	f200 80a1 	bhi.w	800616c <HAL_RCC_GetSysClockFreq+0x16c>
 800602a:	2b00      	cmp	r3, #0
 800602c:	d002      	beq.n	8006034 <HAL_RCC_GetSysClockFreq+0x34>
 800602e:	2b04      	cmp	r3, #4
 8006030:	d003      	beq.n	800603a <HAL_RCC_GetSysClockFreq+0x3a>
 8006032:	e09b      	b.n	800616c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006034:	4b53      	ldr	r3, [pc, #332]	@ (8006184 <HAL_RCC_GetSysClockFreq+0x184>)
 8006036:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006038:	e09b      	b.n	8006172 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800603a:	4b53      	ldr	r3, [pc, #332]	@ (8006188 <HAL_RCC_GetSysClockFreq+0x188>)
 800603c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800603e:	e098      	b.n	8006172 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006040:	4b4f      	ldr	r3, [pc, #316]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x180>)
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006048:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800604a:	4b4d      	ldr	r3, [pc, #308]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x180>)
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006052:	2b00      	cmp	r3, #0
 8006054:	d028      	beq.n	80060a8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006056:	4b4a      	ldr	r3, [pc, #296]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x180>)
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	099b      	lsrs	r3, r3, #6
 800605c:	2200      	movs	r2, #0
 800605e:	623b      	str	r3, [r7, #32]
 8006060:	627a      	str	r2, [r7, #36]	@ 0x24
 8006062:	6a3b      	ldr	r3, [r7, #32]
 8006064:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006068:	2100      	movs	r1, #0
 800606a:	4b47      	ldr	r3, [pc, #284]	@ (8006188 <HAL_RCC_GetSysClockFreq+0x188>)
 800606c:	fb03 f201 	mul.w	r2, r3, r1
 8006070:	2300      	movs	r3, #0
 8006072:	fb00 f303 	mul.w	r3, r0, r3
 8006076:	4413      	add	r3, r2
 8006078:	4a43      	ldr	r2, [pc, #268]	@ (8006188 <HAL_RCC_GetSysClockFreq+0x188>)
 800607a:	fba0 1202 	umull	r1, r2, r0, r2
 800607e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006080:	460a      	mov	r2, r1
 8006082:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006084:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006086:	4413      	add	r3, r2
 8006088:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800608a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800608c:	2200      	movs	r2, #0
 800608e:	61bb      	str	r3, [r7, #24]
 8006090:	61fa      	str	r2, [r7, #28]
 8006092:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006096:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800609a:	f7fa fdfd 	bl	8000c98 <__aeabi_uldivmod>
 800609e:	4602      	mov	r2, r0
 80060a0:	460b      	mov	r3, r1
 80060a2:	4613      	mov	r3, r2
 80060a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060a6:	e053      	b.n	8006150 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060a8:	4b35      	ldr	r3, [pc, #212]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x180>)
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	099b      	lsrs	r3, r3, #6
 80060ae:	2200      	movs	r2, #0
 80060b0:	613b      	str	r3, [r7, #16]
 80060b2:	617a      	str	r2, [r7, #20]
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80060ba:	f04f 0b00 	mov.w	fp, #0
 80060be:	4652      	mov	r2, sl
 80060c0:	465b      	mov	r3, fp
 80060c2:	f04f 0000 	mov.w	r0, #0
 80060c6:	f04f 0100 	mov.w	r1, #0
 80060ca:	0159      	lsls	r1, r3, #5
 80060cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060d0:	0150      	lsls	r0, r2, #5
 80060d2:	4602      	mov	r2, r0
 80060d4:	460b      	mov	r3, r1
 80060d6:	ebb2 080a 	subs.w	r8, r2, sl
 80060da:	eb63 090b 	sbc.w	r9, r3, fp
 80060de:	f04f 0200 	mov.w	r2, #0
 80060e2:	f04f 0300 	mov.w	r3, #0
 80060e6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80060ea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80060ee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80060f2:	ebb2 0408 	subs.w	r4, r2, r8
 80060f6:	eb63 0509 	sbc.w	r5, r3, r9
 80060fa:	f04f 0200 	mov.w	r2, #0
 80060fe:	f04f 0300 	mov.w	r3, #0
 8006102:	00eb      	lsls	r3, r5, #3
 8006104:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006108:	00e2      	lsls	r2, r4, #3
 800610a:	4614      	mov	r4, r2
 800610c:	461d      	mov	r5, r3
 800610e:	eb14 030a 	adds.w	r3, r4, sl
 8006112:	603b      	str	r3, [r7, #0]
 8006114:	eb45 030b 	adc.w	r3, r5, fp
 8006118:	607b      	str	r3, [r7, #4]
 800611a:	f04f 0200 	mov.w	r2, #0
 800611e:	f04f 0300 	mov.w	r3, #0
 8006122:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006126:	4629      	mov	r1, r5
 8006128:	028b      	lsls	r3, r1, #10
 800612a:	4621      	mov	r1, r4
 800612c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006130:	4621      	mov	r1, r4
 8006132:	028a      	lsls	r2, r1, #10
 8006134:	4610      	mov	r0, r2
 8006136:	4619      	mov	r1, r3
 8006138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800613a:	2200      	movs	r2, #0
 800613c:	60bb      	str	r3, [r7, #8]
 800613e:	60fa      	str	r2, [r7, #12]
 8006140:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006144:	f7fa fda8 	bl	8000c98 <__aeabi_uldivmod>
 8006148:	4602      	mov	r2, r0
 800614a:	460b      	mov	r3, r1
 800614c:	4613      	mov	r3, r2
 800614e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006150:	4b0b      	ldr	r3, [pc, #44]	@ (8006180 <HAL_RCC_GetSysClockFreq+0x180>)
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	0c1b      	lsrs	r3, r3, #16
 8006156:	f003 0303 	and.w	r3, r3, #3
 800615a:	3301      	adds	r3, #1
 800615c:	005b      	lsls	r3, r3, #1
 800615e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006160:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006164:	fbb2 f3f3 	udiv	r3, r2, r3
 8006168:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800616a:	e002      	b.n	8006172 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800616c:	4b05      	ldr	r3, [pc, #20]	@ (8006184 <HAL_RCC_GetSysClockFreq+0x184>)
 800616e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006170:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006174:	4618      	mov	r0, r3
 8006176:	3740      	adds	r7, #64	@ 0x40
 8006178:	46bd      	mov	sp, r7
 800617a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800617e:	bf00      	nop
 8006180:	40023800 	.word	0x40023800
 8006184:	00f42400 	.word	0x00f42400
 8006188:	017d7840 	.word	0x017d7840

0800618c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800618c:	b480      	push	{r7}
 800618e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006190:	4b03      	ldr	r3, [pc, #12]	@ (80061a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006192:	681b      	ldr	r3, [r3, #0]
}
 8006194:	4618      	mov	r0, r3
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	20000084 	.word	0x20000084

080061a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80061a8:	f7ff fff0 	bl	800618c <HAL_RCC_GetHCLKFreq>
 80061ac:	4602      	mov	r2, r0
 80061ae:	4b05      	ldr	r3, [pc, #20]	@ (80061c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	0a9b      	lsrs	r3, r3, #10
 80061b4:	f003 0307 	and.w	r3, r3, #7
 80061b8:	4903      	ldr	r1, [pc, #12]	@ (80061c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061ba:	5ccb      	ldrb	r3, [r1, r3]
 80061bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	40023800 	.word	0x40023800
 80061c8:	0800cbc8 	.word	0x0800cbc8

080061cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80061d0:	f7ff ffdc 	bl	800618c <HAL_RCC_GetHCLKFreq>
 80061d4:	4602      	mov	r2, r0
 80061d6:	4b05      	ldr	r3, [pc, #20]	@ (80061ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80061d8:	689b      	ldr	r3, [r3, #8]
 80061da:	0b5b      	lsrs	r3, r3, #13
 80061dc:	f003 0307 	and.w	r3, r3, #7
 80061e0:	4903      	ldr	r1, [pc, #12]	@ (80061f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80061e2:	5ccb      	ldrb	r3, [r1, r3]
 80061e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	40023800 	.word	0x40023800
 80061f0:	0800cbc8 	.word	0x0800cbc8

080061f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006202:	b2db      	uxtb	r3, r3
 8006204:	2b01      	cmp	r3, #1
 8006206:	d001      	beq.n	800620c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e044      	b.n	8006296 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68da      	ldr	r2, [r3, #12]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f042 0201 	orr.w	r2, r2, #1
 8006222:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a1e      	ldr	r2, [pc, #120]	@ (80062a4 <HAL_TIM_Base_Start_IT+0xb0>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d018      	beq.n	8006260 <HAL_TIM_Base_Start_IT+0x6c>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006236:	d013      	beq.n	8006260 <HAL_TIM_Base_Start_IT+0x6c>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a1a      	ldr	r2, [pc, #104]	@ (80062a8 <HAL_TIM_Base_Start_IT+0xb4>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d00e      	beq.n	8006260 <HAL_TIM_Base_Start_IT+0x6c>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a19      	ldr	r2, [pc, #100]	@ (80062ac <HAL_TIM_Base_Start_IT+0xb8>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d009      	beq.n	8006260 <HAL_TIM_Base_Start_IT+0x6c>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a17      	ldr	r2, [pc, #92]	@ (80062b0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d004      	beq.n	8006260 <HAL_TIM_Base_Start_IT+0x6c>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a16      	ldr	r2, [pc, #88]	@ (80062b4 <HAL_TIM_Base_Start_IT+0xc0>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d111      	bne.n	8006284 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f003 0307 	and.w	r3, r3, #7
 800626a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2b06      	cmp	r3, #6
 8006270:	d010      	beq.n	8006294 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f042 0201 	orr.w	r2, r2, #1
 8006280:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006282:	e007      	b.n	8006294 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0201 	orr.w	r2, r2, #1
 8006292:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	40010000 	.word	0x40010000
 80062a8:	40000400 	.word	0x40000400
 80062ac:	40000800 	.word	0x40000800
 80062b0:	40000c00 	.word	0x40000c00
 80062b4:	40014000 	.word	0x40014000

080062b8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d101      	bne.n	80062ca <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	e041      	b.n	800634e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d106      	bne.n	80062e4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f7fc fc34 	bl	8002b4c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2202      	movs	r2, #2
 80062e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	3304      	adds	r3, #4
 80062f4:	4619      	mov	r1, r3
 80062f6:	4610      	mov	r0, r2
 80062f8:	f000 fb62 	bl	80069c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2201      	movs	r2, #1
 8006328:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3708      	adds	r7, #8
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b082      	sub	sp, #8
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e041      	b.n	80063ec <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b00      	cmp	r3, #0
 8006372:	d106      	bne.n	8006382 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f7fc fbaf 	bl	8002ae0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2202      	movs	r2, #2
 8006386:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	3304      	adds	r3, #4
 8006392:	4619      	mov	r1, r3
 8006394:	4610      	mov	r0, r2
 8006396:	f000 fb13 	bl	80069c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2201      	movs	r2, #1
 80063b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2201      	movs	r2, #1
 80063be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3708      	adds	r7, #8
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d109      	bne.n	8006418 <HAL_TIM_PWM_Start+0x24>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800640a:	b2db      	uxtb	r3, r3
 800640c:	2b01      	cmp	r3, #1
 800640e:	bf14      	ite	ne
 8006410:	2301      	movne	r3, #1
 8006412:	2300      	moveq	r3, #0
 8006414:	b2db      	uxtb	r3, r3
 8006416:	e022      	b.n	800645e <HAL_TIM_PWM_Start+0x6a>
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	2b04      	cmp	r3, #4
 800641c:	d109      	bne.n	8006432 <HAL_TIM_PWM_Start+0x3e>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b01      	cmp	r3, #1
 8006428:	bf14      	ite	ne
 800642a:	2301      	movne	r3, #1
 800642c:	2300      	moveq	r3, #0
 800642e:	b2db      	uxtb	r3, r3
 8006430:	e015      	b.n	800645e <HAL_TIM_PWM_Start+0x6a>
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	2b08      	cmp	r3, #8
 8006436:	d109      	bne.n	800644c <HAL_TIM_PWM_Start+0x58>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b01      	cmp	r3, #1
 8006442:	bf14      	ite	ne
 8006444:	2301      	movne	r3, #1
 8006446:	2300      	moveq	r3, #0
 8006448:	b2db      	uxtb	r3, r3
 800644a:	e008      	b.n	800645e <HAL_TIM_PWM_Start+0x6a>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b01      	cmp	r3, #1
 8006456:	bf14      	ite	ne
 8006458:	2301      	movne	r3, #1
 800645a:	2300      	moveq	r3, #0
 800645c:	b2db      	uxtb	r3, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e068      	b.n	8006538 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d104      	bne.n	8006476 <HAL_TIM_PWM_Start+0x82>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006474:	e013      	b.n	800649e <HAL_TIM_PWM_Start+0xaa>
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	2b04      	cmp	r3, #4
 800647a:	d104      	bne.n	8006486 <HAL_TIM_PWM_Start+0x92>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2202      	movs	r2, #2
 8006480:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006484:	e00b      	b.n	800649e <HAL_TIM_PWM_Start+0xaa>
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b08      	cmp	r3, #8
 800648a:	d104      	bne.n	8006496 <HAL_TIM_PWM_Start+0xa2>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2202      	movs	r2, #2
 8006490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006494:	e003      	b.n	800649e <HAL_TIM_PWM_Start+0xaa>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2202      	movs	r2, #2
 800649a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2201      	movs	r2, #1
 80064a4:	6839      	ldr	r1, [r7, #0]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 fca2 	bl	8006df0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a23      	ldr	r2, [pc, #140]	@ (8006540 <HAL_TIM_PWM_Start+0x14c>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d107      	bne.n	80064c6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80064c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a1d      	ldr	r2, [pc, #116]	@ (8006540 <HAL_TIM_PWM_Start+0x14c>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d018      	beq.n	8006502 <HAL_TIM_PWM_Start+0x10e>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064d8:	d013      	beq.n	8006502 <HAL_TIM_PWM_Start+0x10e>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a19      	ldr	r2, [pc, #100]	@ (8006544 <HAL_TIM_PWM_Start+0x150>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d00e      	beq.n	8006502 <HAL_TIM_PWM_Start+0x10e>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a17      	ldr	r2, [pc, #92]	@ (8006548 <HAL_TIM_PWM_Start+0x154>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d009      	beq.n	8006502 <HAL_TIM_PWM_Start+0x10e>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a16      	ldr	r2, [pc, #88]	@ (800654c <HAL_TIM_PWM_Start+0x158>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d004      	beq.n	8006502 <HAL_TIM_PWM_Start+0x10e>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a14      	ldr	r2, [pc, #80]	@ (8006550 <HAL_TIM_PWM_Start+0x15c>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d111      	bne.n	8006526 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	f003 0307 	and.w	r3, r3, #7
 800650c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2b06      	cmp	r3, #6
 8006512:	d010      	beq.n	8006536 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f042 0201 	orr.w	r2, r2, #1
 8006522:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006524:	e007      	b.n	8006536 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f042 0201 	orr.w	r2, r2, #1
 8006534:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006536:	2300      	movs	r3, #0
}
 8006538:	4618      	mov	r0, r3
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	40010000 	.word	0x40010000
 8006544:	40000400 	.word	0x40000400
 8006548:	40000800 	.word	0x40000800
 800654c:	40000c00 	.word	0x40000c00
 8006550:	40014000 	.word	0x40014000

08006554 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b084      	sub	sp, #16
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	f003 0302 	and.w	r3, r3, #2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d020      	beq.n	80065b8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f003 0302 	and.w	r3, r3, #2
 800657c:	2b00      	cmp	r3, #0
 800657e:	d01b      	beq.n	80065b8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f06f 0202 	mvn.w	r2, #2
 8006588:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d003      	beq.n	80065a6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 f9f0 	bl	8006984 <HAL_TIM_IC_CaptureCallback>
 80065a4:	e005      	b.n	80065b2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f9e2 	bl	8006970 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 f9f3 	bl	8006998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2200      	movs	r2, #0
 80065b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	f003 0304 	and.w	r3, r3, #4
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d020      	beq.n	8006604 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f003 0304 	and.w	r3, r3, #4
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d01b      	beq.n	8006604 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f06f 0204 	mvn.w	r2, #4
 80065d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2202      	movs	r2, #2
 80065da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d003      	beq.n	80065f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 f9ca 	bl	8006984 <HAL_TIM_IC_CaptureCallback>
 80065f0:	e005      	b.n	80065fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f9bc 	bl	8006970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f9cd 	bl	8006998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	f003 0308 	and.w	r3, r3, #8
 800660a:	2b00      	cmp	r3, #0
 800660c:	d020      	beq.n	8006650 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f003 0308 	and.w	r3, r3, #8
 8006614:	2b00      	cmp	r3, #0
 8006616:	d01b      	beq.n	8006650 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f06f 0208 	mvn.w	r2, #8
 8006620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2204      	movs	r2, #4
 8006626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	f003 0303 	and.w	r3, r3, #3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d003      	beq.n	800663e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f9a4 	bl	8006984 <HAL_TIM_IC_CaptureCallback>
 800663c:	e005      	b.n	800664a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f996 	bl	8006970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 f9a7 	bl	8006998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2200      	movs	r2, #0
 800664e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f003 0310 	and.w	r3, r3, #16
 8006656:	2b00      	cmp	r3, #0
 8006658:	d020      	beq.n	800669c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f003 0310 	and.w	r3, r3, #16
 8006660:	2b00      	cmp	r3, #0
 8006662:	d01b      	beq.n	800669c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f06f 0210 	mvn.w	r2, #16
 800666c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2208      	movs	r2, #8
 8006672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	69db      	ldr	r3, [r3, #28]
 800667a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f97e 	bl	8006984 <HAL_TIM_IC_CaptureCallback>
 8006688:	e005      	b.n	8006696 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 f970 	bl	8006970 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f981 	bl	8006998 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00c      	beq.n	80066c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f003 0301 	and.w	r3, r3, #1
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d007      	beq.n	80066c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f06f 0201 	mvn.w	r2, #1
 80066b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7fb fe46 	bl	800234c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00c      	beq.n	80066e4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d007      	beq.n	80066e4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80066dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 fc24 	bl	8006f2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00c      	beq.n	8006708 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d007      	beq.n	8006708 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f952 	bl	80069ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	f003 0320 	and.w	r3, r3, #32
 800670e:	2b00      	cmp	r3, #0
 8006710:	d00c      	beq.n	800672c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f003 0320 	and.w	r3, r3, #32
 8006718:	2b00      	cmp	r3, #0
 800671a:	d007      	beq.n	800672c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f06f 0220 	mvn.w	r2, #32
 8006724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 fbf6 	bl	8006f18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800672c:	bf00      	nop
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006740:	2300      	movs	r3, #0
 8006742:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800674a:	2b01      	cmp	r3, #1
 800674c:	d101      	bne.n	8006752 <HAL_TIM_OC_ConfigChannel+0x1e>
 800674e:	2302      	movs	r3, #2
 8006750:	e048      	b.n	80067e4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2b0c      	cmp	r3, #12
 800675e:	d839      	bhi.n	80067d4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006760:	a201      	add	r2, pc, #4	@ (adr r2, 8006768 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006766:	bf00      	nop
 8006768:	0800679d 	.word	0x0800679d
 800676c:	080067d5 	.word	0x080067d5
 8006770:	080067d5 	.word	0x080067d5
 8006774:	080067d5 	.word	0x080067d5
 8006778:	080067ab 	.word	0x080067ab
 800677c:	080067d5 	.word	0x080067d5
 8006780:	080067d5 	.word	0x080067d5
 8006784:	080067d5 	.word	0x080067d5
 8006788:	080067b9 	.word	0x080067b9
 800678c:	080067d5 	.word	0x080067d5
 8006790:	080067d5 	.word	0x080067d5
 8006794:	080067d5 	.word	0x080067d5
 8006798:	080067c7 	.word	0x080067c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68b9      	ldr	r1, [r7, #8]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 f998 	bl	8006ad8 <TIM_OC1_SetConfig>
      break;
 80067a8:	e017      	b.n	80067da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68b9      	ldr	r1, [r7, #8]
 80067b0:	4618      	mov	r0, r3
 80067b2:	f000 f9f7 	bl	8006ba4 <TIM_OC2_SetConfig>
      break;
 80067b6:	e010      	b.n	80067da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	68b9      	ldr	r1, [r7, #8]
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 fa5c 	bl	8006c7c <TIM_OC3_SetConfig>
      break;
 80067c4:	e009      	b.n	80067da <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	68b9      	ldr	r1, [r7, #8]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f000 fabf 	bl	8006d50 <TIM_OC4_SetConfig>
      break;
 80067d2:	e002      	b.n	80067da <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	75fb      	strb	r3, [r7, #23]
      break;
 80067d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3718      	adds	r7, #24
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b086      	sub	sp, #24
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067f8:	2300      	movs	r3, #0
 80067fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006802:	2b01      	cmp	r3, #1
 8006804:	d101      	bne.n	800680a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006806:	2302      	movs	r3, #2
 8006808:	e0ae      	b.n	8006968 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2b0c      	cmp	r3, #12
 8006816:	f200 809f 	bhi.w	8006958 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800681a:	a201      	add	r2, pc, #4	@ (adr r2, 8006820 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800681c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006820:	08006855 	.word	0x08006855
 8006824:	08006959 	.word	0x08006959
 8006828:	08006959 	.word	0x08006959
 800682c:	08006959 	.word	0x08006959
 8006830:	08006895 	.word	0x08006895
 8006834:	08006959 	.word	0x08006959
 8006838:	08006959 	.word	0x08006959
 800683c:	08006959 	.word	0x08006959
 8006840:	080068d7 	.word	0x080068d7
 8006844:	08006959 	.word	0x08006959
 8006848:	08006959 	.word	0x08006959
 800684c:	08006959 	.word	0x08006959
 8006850:	08006917 	.word	0x08006917
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	68b9      	ldr	r1, [r7, #8]
 800685a:	4618      	mov	r0, r3
 800685c:	f000 f93c 	bl	8006ad8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	699a      	ldr	r2, [r3, #24]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0208 	orr.w	r2, r2, #8
 800686e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	699a      	ldr	r2, [r3, #24]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 0204 	bic.w	r2, r2, #4
 800687e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	6999      	ldr	r1, [r3, #24]
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	691a      	ldr	r2, [r3, #16]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	619a      	str	r2, [r3, #24]
      break;
 8006892:	e064      	b.n	800695e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68b9      	ldr	r1, [r7, #8]
 800689a:	4618      	mov	r0, r3
 800689c:	f000 f982 	bl	8006ba4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	699a      	ldr	r2, [r3, #24]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	699a      	ldr	r2, [r3, #24]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6999      	ldr	r1, [r3, #24]
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	691b      	ldr	r3, [r3, #16]
 80068ca:	021a      	lsls	r2, r3, #8
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	430a      	orrs	r2, r1
 80068d2:	619a      	str	r2, [r3, #24]
      break;
 80068d4:	e043      	b.n	800695e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68b9      	ldr	r1, [r7, #8]
 80068dc:	4618      	mov	r0, r3
 80068de:	f000 f9cd 	bl	8006c7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	69da      	ldr	r2, [r3, #28]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f042 0208 	orr.w	r2, r2, #8
 80068f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69da      	ldr	r2, [r3, #28]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f022 0204 	bic.w	r2, r2, #4
 8006900:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	69d9      	ldr	r1, [r3, #28]
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	691a      	ldr	r2, [r3, #16]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	61da      	str	r2, [r3, #28]
      break;
 8006914:	e023      	b.n	800695e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	68b9      	ldr	r1, [r7, #8]
 800691c:	4618      	mov	r0, r3
 800691e:	f000 fa17 	bl	8006d50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	69da      	ldr	r2, [r3, #28]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006930:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	69da      	ldr	r2, [r3, #28]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006940:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	69d9      	ldr	r1, [r3, #28]
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	021a      	lsls	r2, r3, #8
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	430a      	orrs	r2, r1
 8006954:	61da      	str	r2, [r3, #28]
      break;
 8006956:	e002      	b.n	800695e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	75fb      	strb	r3, [r7, #23]
      break;
 800695c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006966:	7dfb      	ldrb	r3, [r7, #23]
}
 8006968:	4618      	mov	r0, r3
 800696a:	3718      	adds	r7, #24
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006978:	bf00      	nop
 800697a:	370c      	adds	r7, #12
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	4a3a      	ldr	r2, [pc, #232]	@ (8006abc <TIM_Base_SetConfig+0xfc>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d00f      	beq.n	80069f8 <TIM_Base_SetConfig+0x38>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069de:	d00b      	beq.n	80069f8 <TIM_Base_SetConfig+0x38>
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	4a37      	ldr	r2, [pc, #220]	@ (8006ac0 <TIM_Base_SetConfig+0x100>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d007      	beq.n	80069f8 <TIM_Base_SetConfig+0x38>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4a36      	ldr	r2, [pc, #216]	@ (8006ac4 <TIM_Base_SetConfig+0x104>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d003      	beq.n	80069f8 <TIM_Base_SetConfig+0x38>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a35      	ldr	r2, [pc, #212]	@ (8006ac8 <TIM_Base_SetConfig+0x108>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d108      	bne.n	8006a0a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	68fa      	ldr	r2, [r7, #12]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	4a2b      	ldr	r2, [pc, #172]	@ (8006abc <TIM_Base_SetConfig+0xfc>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d01b      	beq.n	8006a4a <TIM_Base_SetConfig+0x8a>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a18:	d017      	beq.n	8006a4a <TIM_Base_SetConfig+0x8a>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	4a28      	ldr	r2, [pc, #160]	@ (8006ac0 <TIM_Base_SetConfig+0x100>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d013      	beq.n	8006a4a <TIM_Base_SetConfig+0x8a>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	4a27      	ldr	r2, [pc, #156]	@ (8006ac4 <TIM_Base_SetConfig+0x104>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d00f      	beq.n	8006a4a <TIM_Base_SetConfig+0x8a>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	4a26      	ldr	r2, [pc, #152]	@ (8006ac8 <TIM_Base_SetConfig+0x108>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d00b      	beq.n	8006a4a <TIM_Base_SetConfig+0x8a>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a25      	ldr	r2, [pc, #148]	@ (8006acc <TIM_Base_SetConfig+0x10c>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d007      	beq.n	8006a4a <TIM_Base_SetConfig+0x8a>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a24      	ldr	r2, [pc, #144]	@ (8006ad0 <TIM_Base_SetConfig+0x110>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d003      	beq.n	8006a4a <TIM_Base_SetConfig+0x8a>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a23      	ldr	r2, [pc, #140]	@ (8006ad4 <TIM_Base_SetConfig+0x114>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d108      	bne.n	8006a5c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	689a      	ldr	r2, [r3, #8]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a0e      	ldr	r2, [pc, #56]	@ (8006abc <TIM_Base_SetConfig+0xfc>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d103      	bne.n	8006a90 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	691a      	ldr	r2, [r3, #16]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d105      	bne.n	8006aae <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	f023 0201 	bic.w	r2, r3, #1
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	611a      	str	r2, [r3, #16]
  }
}
 8006aae:	bf00      	nop
 8006ab0:	3714      	adds	r7, #20
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	40010000 	.word	0x40010000
 8006ac0:	40000400 	.word	0x40000400
 8006ac4:	40000800 	.word	0x40000800
 8006ac8:	40000c00 	.word	0x40000c00
 8006acc:	40014000 	.word	0x40014000
 8006ad0:	40014400 	.word	0x40014400
 8006ad4:	40014800 	.word	0x40014800

08006ad8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b087      	sub	sp, #28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	f023 0201 	bic.w	r2, r3, #1
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f023 0303 	bic.w	r3, r3, #3
 8006b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	f023 0302 	bic.w	r3, r3, #2
 8006b20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	697a      	ldr	r2, [r7, #20]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a1c      	ldr	r2, [pc, #112]	@ (8006ba0 <TIM_OC1_SetConfig+0xc8>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d10c      	bne.n	8006b4e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f023 0308 	bic.w	r3, r3, #8
 8006b3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	697a      	ldr	r2, [r7, #20]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	f023 0304 	bic.w	r3, r3, #4
 8006b4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a13      	ldr	r2, [pc, #76]	@ (8006ba0 <TIM_OC1_SetConfig+0xc8>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d111      	bne.n	8006b7a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	693a      	ldr	r2, [r7, #16]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	693a      	ldr	r2, [r7, #16]
 8006b7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	68fa      	ldr	r2, [r7, #12]
 8006b84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	685a      	ldr	r2, [r3, #4]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	621a      	str	r2, [r3, #32]
}
 8006b94:	bf00      	nop
 8006b96:	371c      	adds	r7, #28
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	40010000 	.word	0x40010000

08006ba4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b087      	sub	sp, #28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a1b      	ldr	r3, [r3, #32]
 8006bb8:	f023 0210 	bic.w	r2, r3, #16
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	021b      	lsls	r3, r3, #8
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	4313      	orrs	r3, r2
 8006be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	f023 0320 	bic.w	r3, r3, #32
 8006bee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	011b      	lsls	r3, r3, #4
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8006c78 <TIM_OC2_SetConfig+0xd4>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d10d      	bne.n	8006c20 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	011b      	lsls	r3, r3, #4
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	4a15      	ldr	r2, [pc, #84]	@ (8006c78 <TIM_OC2_SetConfig+0xd4>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d113      	bne.n	8006c50 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c28:	693b      	ldr	r3, [r7, #16]
 8006c2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	685a      	ldr	r2, [r3, #4]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	697a      	ldr	r2, [r7, #20]
 8006c68:	621a      	str	r2, [r3, #32]
}
 8006c6a:	bf00      	nop
 8006c6c:	371c      	adds	r7, #28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	40010000 	.word	0x40010000

08006c7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b087      	sub	sp, #28
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a1b      	ldr	r3, [r3, #32]
 8006c90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f023 0303 	bic.w	r3, r3, #3
 8006cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	689b      	ldr	r3, [r3, #8]
 8006cca:	021b      	lsls	r3, r3, #8
 8006ccc:	697a      	ldr	r2, [r7, #20]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8006d4c <TIM_OC3_SetConfig+0xd0>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d10d      	bne.n	8006cf6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006ce0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	021b      	lsls	r3, r3, #8
 8006ce8:	697a      	ldr	r2, [r7, #20]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006cf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a14      	ldr	r2, [pc, #80]	@ (8006d4c <TIM_OC3_SetConfig+0xd0>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d113      	bne.n	8006d26 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	011b      	lsls	r3, r3, #4
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	699b      	ldr	r3, [r3, #24]
 8006d1e:	011b      	lsls	r3, r3, #4
 8006d20:	693a      	ldr	r2, [r7, #16]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	685a      	ldr	r2, [r3, #4]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	621a      	str	r2, [r3, #32]
}
 8006d40:	bf00      	nop
 8006d42:	371c      	adds	r7, #28
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr
 8006d4c:	40010000 	.word	0x40010000

08006d50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b087      	sub	sp, #28
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6a1b      	ldr	r3, [r3, #32]
 8006d64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	69db      	ldr	r3, [r3, #28]
 8006d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	021b      	lsls	r3, r3, #8
 8006d8e:	68fa      	ldr	r2, [r7, #12]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	031b      	lsls	r3, r3, #12
 8006da2:	693a      	ldr	r2, [r7, #16]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a10      	ldr	r2, [pc, #64]	@ (8006dec <TIM_OC4_SetConfig+0x9c>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d109      	bne.n	8006dc4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006db6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	695b      	ldr	r3, [r3, #20]
 8006dbc:	019b      	lsls	r3, r3, #6
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	621a      	str	r2, [r3, #32]
}
 8006dde:	bf00      	nop
 8006de0:	371c      	adds	r7, #28
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	40010000 	.word	0x40010000

08006df0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b087      	sub	sp, #28
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	f003 031f 	and.w	r3, r3, #31
 8006e02:	2201      	movs	r2, #1
 8006e04:	fa02 f303 	lsl.w	r3, r2, r3
 8006e08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6a1a      	ldr	r2, [r3, #32]
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	43db      	mvns	r3, r3
 8006e12:	401a      	ands	r2, r3
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6a1a      	ldr	r2, [r3, #32]
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	f003 031f 	and.w	r3, r3, #31
 8006e22:	6879      	ldr	r1, [r7, #4]
 8006e24:	fa01 f303 	lsl.w	r3, r1, r3
 8006e28:	431a      	orrs	r2, r3
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	621a      	str	r2, [r3, #32]
}
 8006e2e:	bf00      	nop
 8006e30:	371c      	adds	r7, #28
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr
	...

08006e3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b085      	sub	sp, #20
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d101      	bne.n	8006e54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e50:	2302      	movs	r3, #2
 8006e52:	e050      	b.n	8006ef6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2202      	movs	r2, #2
 8006e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	68fa      	ldr	r2, [r7, #12]
 8006e8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a1c      	ldr	r2, [pc, #112]	@ (8006f04 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d018      	beq.n	8006eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ea0:	d013      	beq.n	8006eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a18      	ldr	r2, [pc, #96]	@ (8006f08 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d00e      	beq.n	8006eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a16      	ldr	r2, [pc, #88]	@ (8006f0c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d009      	beq.n	8006eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a15      	ldr	r2, [pc, #84]	@ (8006f10 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d004      	beq.n	8006eca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a13      	ldr	r2, [pc, #76]	@ (8006f14 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d10c      	bne.n	8006ee4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ed0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ed2:	683b      	ldr	r3, [r7, #0]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	68ba      	ldr	r2, [r7, #8]
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3714      	adds	r7, #20
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	40010000 	.word	0x40010000
 8006f08:	40000400 	.word	0x40000400
 8006f0c:	40000800 	.word	0x40000800
 8006f10:	40000c00 	.word	0x40000c00
 8006f14:	40014000 	.word	0x40014000

08006f18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b082      	sub	sp, #8
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d101      	bne.n	8006f52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e042      	b.n	8006fd8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d106      	bne.n	8006f6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7fb fe96 	bl	8002c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2224      	movs	r2, #36	@ 0x24
 8006f70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68da      	ldr	r2, [r3, #12]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fea1 	bl	8007ccc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	691a      	ldr	r2, [r3, #16]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	695a      	ldr	r2, [r3, #20]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006fa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68da      	ldr	r2, [r3, #12]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006fb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2220      	movs	r2, #32
 8006fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2220      	movs	r2, #32
 8006fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006fd6:	2300      	movs	r3, #0
}
 8006fd8:	4618      	mov	r0, r3
 8006fda:	3708      	adds	r7, #8
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	bd80      	pop	{r7, pc}

08006fe0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b08c      	sub	sp, #48	@ 0x30
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	4613      	mov	r3, r2
 8006fec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b20      	cmp	r3, #32
 8006ff8:	d14a      	bne.n	8007090 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d002      	beq.n	8007006 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007000:	88fb      	ldrh	r3, [r7, #6]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d101      	bne.n	800700a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007006:	2301      	movs	r3, #1
 8007008:	e043      	b.n	8007092 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2201      	movs	r2, #1
 800700e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007016:	88fb      	ldrh	r3, [r7, #6]
 8007018:	461a      	mov	r2, r3
 800701a:	68b9      	ldr	r1, [r7, #8]
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f000 fbf5 	bl	800780c <UART_Start_Receive_DMA>
 8007022:	4603      	mov	r3, r0
 8007024:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8007028:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800702c:	2b00      	cmp	r3, #0
 800702e:	d12c      	bne.n	800708a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007034:	2b01      	cmp	r3, #1
 8007036:	d125      	bne.n	8007084 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007038:	2300      	movs	r3, #0
 800703a:	613b      	str	r3, [r7, #16]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	613b      	str	r3, [r7, #16]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	613b      	str	r3, [r7, #16]
 800704c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	330c      	adds	r3, #12
 8007054:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	e853 3f00 	ldrex	r3, [r3]
 800705c:	617b      	str	r3, [r7, #20]
   return(result);
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f043 0310 	orr.w	r3, r3, #16
 8007064:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	330c      	adds	r3, #12
 800706c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800706e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007070:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007072:	6a39      	ldr	r1, [r7, #32]
 8007074:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007076:	e841 2300 	strex	r3, r2, [r1]
 800707a:	61fb      	str	r3, [r7, #28]
   return(result);
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1e5      	bne.n	800704e <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8007082:	e002      	b.n	800708a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800708a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800708e:	e000      	b.n	8007092 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8007090:	2302      	movs	r3, #2
  }
}
 8007092:	4618      	mov	r0, r3
 8007094:	3730      	adds	r7, #48	@ 0x30
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
	...

0800709c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b0ba      	sub	sp, #232	@ 0xe8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80070c2:	2300      	movs	r3, #0
 80070c4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80070c8:	2300      	movs	r3, #0
 80070ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80070ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070d2:	f003 030f 	and.w	r3, r3, #15
 80070d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80070da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10f      	bne.n	8007102 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80070e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070e6:	f003 0320 	and.w	r3, r3, #32
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d009      	beq.n	8007102 <HAL_UART_IRQHandler+0x66>
 80070ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070f2:	f003 0320 	and.w	r3, r3, #32
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 fd27 	bl	8007b4e <UART_Receive_IT>
      return;
 8007100:	e25b      	b.n	80075ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007102:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007106:	2b00      	cmp	r3, #0
 8007108:	f000 80de 	beq.w	80072c8 <HAL_UART_IRQHandler+0x22c>
 800710c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007110:	f003 0301 	and.w	r3, r3, #1
 8007114:	2b00      	cmp	r3, #0
 8007116:	d106      	bne.n	8007126 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800711c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007120:	2b00      	cmp	r3, #0
 8007122:	f000 80d1 	beq.w	80072c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800712a:	f003 0301 	and.w	r3, r3, #1
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00b      	beq.n	800714a <HAL_UART_IRQHandler+0xae>
 8007132:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007136:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800713a:	2b00      	cmp	r3, #0
 800713c:	d005      	beq.n	800714a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007142:	f043 0201 	orr.w	r2, r3, #1
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800714a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800714e:	f003 0304 	and.w	r3, r3, #4
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00b      	beq.n	800716e <HAL_UART_IRQHandler+0xd2>
 8007156:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800715a:	f003 0301 	and.w	r3, r3, #1
 800715e:	2b00      	cmp	r3, #0
 8007160:	d005      	beq.n	800716e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007166:	f043 0202 	orr.w	r2, r3, #2
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800716e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007172:	f003 0302 	and.w	r3, r3, #2
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00b      	beq.n	8007192 <HAL_UART_IRQHandler+0xf6>
 800717a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800717e:	f003 0301 	and.w	r3, r3, #1
 8007182:	2b00      	cmp	r3, #0
 8007184:	d005      	beq.n	8007192 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800718a:	f043 0204 	orr.w	r2, r3, #4
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007196:	f003 0308 	and.w	r3, r3, #8
 800719a:	2b00      	cmp	r3, #0
 800719c:	d011      	beq.n	80071c2 <HAL_UART_IRQHandler+0x126>
 800719e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071a2:	f003 0320 	and.w	r3, r3, #32
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d105      	bne.n	80071b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80071aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071ae:	f003 0301 	and.w	r3, r3, #1
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d005      	beq.n	80071c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ba:	f043 0208 	orr.w	r2, r3, #8
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f000 81f2 	beq.w	80075b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80071cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071d0:	f003 0320 	and.w	r3, r3, #32
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d008      	beq.n	80071ea <HAL_UART_IRQHandler+0x14e>
 80071d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071dc:	f003 0320 	and.w	r3, r3, #32
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d002      	beq.n	80071ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 fcb2 	bl	8007b4e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071f4:	2b40      	cmp	r3, #64	@ 0x40
 80071f6:	bf0c      	ite	eq
 80071f8:	2301      	moveq	r3, #1
 80071fa:	2300      	movne	r3, #0
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007206:	f003 0308 	and.w	r3, r3, #8
 800720a:	2b00      	cmp	r3, #0
 800720c:	d103      	bne.n	8007216 <HAL_UART_IRQHandler+0x17a>
 800720e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007212:	2b00      	cmp	r3, #0
 8007214:	d04f      	beq.n	80072b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 fbba 	bl	8007990 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007226:	2b40      	cmp	r3, #64	@ 0x40
 8007228:	d141      	bne.n	80072ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	3314      	adds	r3, #20
 8007230:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007234:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007238:	e853 3f00 	ldrex	r3, [r3]
 800723c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007240:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007244:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007248:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	3314      	adds	r3, #20
 8007252:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007256:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800725a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007262:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007266:	e841 2300 	strex	r3, r2, [r1]
 800726a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800726e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1d9      	bne.n	800722a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800727a:	2b00      	cmp	r3, #0
 800727c:	d013      	beq.n	80072a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007282:	4a7e      	ldr	r2, [pc, #504]	@ (800747c <HAL_UART_IRQHandler+0x3e0>)
 8007284:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800728a:	4618      	mov	r0, r3
 800728c:	f7fc fcd6 	bl	8003c3c <HAL_DMA_Abort_IT>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d016      	beq.n	80072c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800729a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80072a0:	4610      	mov	r0, r2
 80072a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072a4:	e00e      	b.n	80072c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f9a8 	bl	80075fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072ac:	e00a      	b.n	80072c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 f9a4 	bl	80075fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072b4:	e006      	b.n	80072c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f9a0 	bl	80075fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80072c2:	e175      	b.n	80075b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072c4:	bf00      	nop
    return;
 80072c6:	e173      	b.n	80075b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	f040 814f 	bne.w	8007570 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80072d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072d6:	f003 0310 	and.w	r3, r3, #16
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 8148 	beq.w	8007570 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80072e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072e4:	f003 0310 	and.w	r3, r3, #16
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 8141 	beq.w	8007570 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072ee:	2300      	movs	r3, #0
 80072f0:	60bb      	str	r3, [r7, #8]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	60bb      	str	r3, [r7, #8]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	60bb      	str	r3, [r7, #8]
 8007302:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	695b      	ldr	r3, [r3, #20]
 800730a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800730e:	2b40      	cmp	r3, #64	@ 0x40
 8007310:	f040 80b6 	bne.w	8007480 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007320:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007324:	2b00      	cmp	r3, #0
 8007326:	f000 8145 	beq.w	80075b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800732e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007332:	429a      	cmp	r2, r3
 8007334:	f080 813e 	bcs.w	80075b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800733e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800734a:	f000 8088 	beq.w	800745e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	330c      	adds	r3, #12
 8007354:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007358:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800735c:	e853 3f00 	ldrex	r3, [r3]
 8007360:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007364:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007368:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800736c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	330c      	adds	r3, #12
 8007376:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800737a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800737e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007382:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007386:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800738a:	e841 2300 	strex	r3, r2, [r1]
 800738e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007392:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007396:	2b00      	cmp	r3, #0
 8007398:	d1d9      	bne.n	800734e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	3314      	adds	r3, #20
 80073a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073a4:	e853 3f00 	ldrex	r3, [r3]
 80073a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80073aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80073ac:	f023 0301 	bic.w	r3, r3, #1
 80073b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	3314      	adds	r3, #20
 80073ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80073be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80073c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80073c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80073ca:	e841 2300 	strex	r3, r2, [r1]
 80073ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80073d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1e1      	bne.n	800739a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	3314      	adds	r3, #20
 80073dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80073e0:	e853 3f00 	ldrex	r3, [r3]
 80073e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80073e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80073e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3314      	adds	r3, #20
 80073f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80073fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80073fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007400:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007402:	e841 2300 	strex	r3, r2, [r1]
 8007406:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007408:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1e3      	bne.n	80073d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2220      	movs	r2, #32
 8007412:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	330c      	adds	r3, #12
 8007422:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007424:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007426:	e853 3f00 	ldrex	r3, [r3]
 800742a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800742c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800742e:	f023 0310 	bic.w	r3, r3, #16
 8007432:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	330c      	adds	r3, #12
 800743c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007440:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007442:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007444:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007446:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007448:	e841 2300 	strex	r3, r2, [r1]
 800744c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800744e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007450:	2b00      	cmp	r3, #0
 8007452:	d1e3      	bne.n	800741c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007458:	4618      	mov	r0, r3
 800745a:	f7fc fb7f 	bl	8003b5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2202      	movs	r2, #2
 8007462:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800746c:	b29b      	uxth	r3, r3
 800746e:	1ad3      	subs	r3, r2, r3
 8007470:	b29b      	uxth	r3, r3
 8007472:	4619      	mov	r1, r3
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f7fb f91f 	bl	80026b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800747a:	e09b      	b.n	80075b4 <HAL_UART_IRQHandler+0x518>
 800747c:	08007a57 	.word	0x08007a57
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007488:	b29b      	uxth	r3, r3
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007494:	b29b      	uxth	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	f000 808e 	beq.w	80075b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800749c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f000 8089 	beq.w	80075b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	330c      	adds	r3, #12
 80074ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074b0:	e853 3f00 	ldrex	r3, [r3]
 80074b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80074bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	330c      	adds	r3, #12
 80074c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80074ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80074cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074d2:	e841 2300 	strex	r3, r2, [r1]
 80074d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d1e3      	bne.n	80074a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	3314      	adds	r3, #20
 80074e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e8:	e853 3f00 	ldrex	r3, [r3]
 80074ec:	623b      	str	r3, [r7, #32]
   return(result);
 80074ee:	6a3b      	ldr	r3, [r7, #32]
 80074f0:	f023 0301 	bic.w	r3, r3, #1
 80074f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	3314      	adds	r3, #20
 80074fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007502:	633a      	str	r2, [r7, #48]	@ 0x30
 8007504:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007506:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007508:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800750a:	e841 2300 	strex	r3, r2, [r1]
 800750e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1e3      	bne.n	80074de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2220      	movs	r2, #32
 800751a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	330c      	adds	r3, #12
 800752a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	e853 3f00 	ldrex	r3, [r3]
 8007532:	60fb      	str	r3, [r7, #12]
   return(result);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f023 0310 	bic.w	r3, r3, #16
 800753a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	330c      	adds	r3, #12
 8007544:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007548:	61fa      	str	r2, [r7, #28]
 800754a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754c:	69b9      	ldr	r1, [r7, #24]
 800754e:	69fa      	ldr	r2, [r7, #28]
 8007550:	e841 2300 	strex	r3, r2, [r1]
 8007554:	617b      	str	r3, [r7, #20]
   return(result);
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d1e3      	bne.n	8007524 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2202      	movs	r2, #2
 8007560:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007562:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007566:	4619      	mov	r1, r3
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f7fb f8a5 	bl	80026b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800756e:	e023      	b.n	80075b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007574:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007578:	2b00      	cmp	r3, #0
 800757a:	d009      	beq.n	8007590 <HAL_UART_IRQHandler+0x4f4>
 800757c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007584:	2b00      	cmp	r3, #0
 8007586:	d003      	beq.n	8007590 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 fa78 	bl	8007a7e <UART_Transmit_IT>
    return;
 800758e:	e014      	b.n	80075ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007590:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00e      	beq.n	80075ba <HAL_UART_IRQHandler+0x51e>
 800759c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d008      	beq.n	80075ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fab8 	bl	8007b1e <UART_EndTransmit_IT>
    return;
 80075ae:	e004      	b.n	80075ba <HAL_UART_IRQHandler+0x51e>
    return;
 80075b0:	bf00      	nop
 80075b2:	e002      	b.n	80075ba <HAL_UART_IRQHandler+0x51e>
      return;
 80075b4:	bf00      	nop
 80075b6:	e000      	b.n	80075ba <HAL_UART_IRQHandler+0x51e>
      return;
 80075b8:	bf00      	nop
  }
}
 80075ba:	37e8      	adds	r7, #232	@ 0xe8
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b09c      	sub	sp, #112	@ 0x70
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800761c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007628:	2b00      	cmp	r3, #0
 800762a:	d172      	bne.n	8007712 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800762c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800762e:	2200      	movs	r2, #0
 8007630:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007632:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	330c      	adds	r3, #12
 8007638:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800763c:	e853 3f00 	ldrex	r3, [r3]
 8007640:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007642:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007644:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007648:	66bb      	str	r3, [r7, #104]	@ 0x68
 800764a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	330c      	adds	r3, #12
 8007650:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007652:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007654:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007656:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007658:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800765a:	e841 2300 	strex	r3, r2, [r1]
 800765e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007660:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1e5      	bne.n	8007632 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007666:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	3314      	adds	r3, #20
 800766c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007670:	e853 3f00 	ldrex	r3, [r3]
 8007674:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007678:	f023 0301 	bic.w	r3, r3, #1
 800767c:	667b      	str	r3, [r7, #100]	@ 0x64
 800767e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3314      	adds	r3, #20
 8007684:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007686:	647a      	str	r2, [r7, #68]	@ 0x44
 8007688:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800768c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800768e:	e841 2300 	strex	r3, r2, [r1]
 8007692:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007696:	2b00      	cmp	r3, #0
 8007698:	d1e5      	bne.n	8007666 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800769a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	3314      	adds	r3, #20
 80076a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a4:	e853 3f00 	ldrex	r3, [r3]
 80076a8:	623b      	str	r3, [r7, #32]
   return(result);
 80076aa:	6a3b      	ldr	r3, [r7, #32]
 80076ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80076b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	3314      	adds	r3, #20
 80076b8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80076ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80076bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076c2:	e841 2300 	strex	r3, r2, [r1]
 80076c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1e5      	bne.n	800769a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80076ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076d0:	2220      	movs	r2, #32
 80076d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d119      	bne.n	8007712 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	330c      	adds	r3, #12
 80076e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	e853 3f00 	ldrex	r3, [r3]
 80076ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f023 0310 	bic.w	r3, r3, #16
 80076f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80076f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	330c      	adds	r3, #12
 80076fc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80076fe:	61fa      	str	r2, [r7, #28]
 8007700:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007702:	69b9      	ldr	r1, [r7, #24]
 8007704:	69fa      	ldr	r2, [r7, #28]
 8007706:	e841 2300 	strex	r3, r2, [r1]
 800770a:	617b      	str	r3, [r7, #20]
   return(result);
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d1e5      	bne.n	80076de <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007712:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007714:	2200      	movs	r2, #0
 8007716:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007718:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800771a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800771c:	2b01      	cmp	r3, #1
 800771e:	d106      	bne.n	800772e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007720:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007722:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007724:	4619      	mov	r1, r3
 8007726:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007728:	f7fa ffc6 	bl	80026b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800772c:	e002      	b.n	8007734 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800772e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007730:	f7ff ff50 	bl	80075d4 <HAL_UART_RxCpltCallback>
}
 8007734:	bf00      	nop
 8007736:	3770      	adds	r7, #112	@ 0x70
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}

0800773c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007748:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2201      	movs	r2, #1
 800774e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007754:	2b01      	cmp	r3, #1
 8007756:	d108      	bne.n	800776a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800775c:	085b      	lsrs	r3, r3, #1
 800775e:	b29b      	uxth	r3, r3
 8007760:	4619      	mov	r1, r3
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	f7fa ffa8 	bl	80026b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007768:	e002      	b.n	8007770 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f7ff ff3c 	bl	80075e8 <HAL_UART_RxHalfCpltCallback>
}
 8007770:	bf00      	nop
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007780:	2300      	movs	r3, #0
 8007782:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007788:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	695b      	ldr	r3, [r3, #20]
 8007790:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007794:	2b80      	cmp	r3, #128	@ 0x80
 8007796:	bf0c      	ite	eq
 8007798:	2301      	moveq	r3, #1
 800779a:	2300      	movne	r3, #0
 800779c:	b2db      	uxtb	r3, r3
 800779e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	2b21      	cmp	r3, #33	@ 0x21
 80077aa:	d108      	bne.n	80077be <UART_DMAError+0x46>
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d005      	beq.n	80077be <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2200      	movs	r2, #0
 80077b6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80077b8:	68b8      	ldr	r0, [r7, #8]
 80077ba:	f000 f8c1 	bl	8007940 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	695b      	ldr	r3, [r3, #20]
 80077c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077c8:	2b40      	cmp	r3, #64	@ 0x40
 80077ca:	bf0c      	ite	eq
 80077cc:	2301      	moveq	r3, #1
 80077ce:	2300      	movne	r3, #0
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	2b22      	cmp	r3, #34	@ 0x22
 80077de:	d108      	bne.n	80077f2 <UART_DMAError+0x7a>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d005      	beq.n	80077f2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	2200      	movs	r2, #0
 80077ea:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80077ec:	68b8      	ldr	r0, [r7, #8]
 80077ee:	f000 f8cf 	bl	8007990 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077f6:	f043 0210 	orr.w	r2, r3, #16
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077fe:	68b8      	ldr	r0, [r7, #8]
 8007800:	f7ff fefc 	bl	80075fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007804:	bf00      	nop
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b098      	sub	sp, #96	@ 0x60
 8007810:	af00      	add	r7, sp, #0
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	4613      	mov	r3, r2
 8007818:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	88fa      	ldrh	r2, [r7, #6]
 8007824:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2222      	movs	r2, #34	@ 0x22
 8007830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007838:	4a3e      	ldr	r2, [pc, #248]	@ (8007934 <UART_Start_Receive_DMA+0x128>)
 800783a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007840:	4a3d      	ldr	r2, [pc, #244]	@ (8007938 <UART_Start_Receive_DMA+0x12c>)
 8007842:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007848:	4a3c      	ldr	r2, [pc, #240]	@ (800793c <UART_Start_Receive_DMA+0x130>)
 800784a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007850:	2200      	movs	r2, #0
 8007852:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007854:	f107 0308 	add.w	r3, r7, #8
 8007858:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3304      	adds	r3, #4
 8007864:	4619      	mov	r1, r3
 8007866:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	88fb      	ldrh	r3, [r7, #6]
 800786c:	f7fc f91e 	bl	8003aac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007870:	2300      	movs	r3, #0
 8007872:	613b      	str	r3, [r7, #16]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	613b      	str	r3, [r7, #16]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	613b      	str	r3, [r7, #16]
 8007884:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d019      	beq.n	80078c2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	330c      	adds	r3, #12
 8007894:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007898:	e853 3f00 	ldrex	r3, [r3]
 800789c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800789e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	330c      	adds	r3, #12
 80078ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80078ae:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80078b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80078b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80078b6:	e841 2300 	strex	r3, r2, [r1]
 80078ba:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80078bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1e5      	bne.n	800788e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	3314      	adds	r3, #20
 80078c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078cc:	e853 3f00 	ldrex	r3, [r3]
 80078d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80078d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d4:	f043 0301 	orr.w	r3, r3, #1
 80078d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	3314      	adds	r3, #20
 80078e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80078e2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80078e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80078e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80078ea:	e841 2300 	strex	r3, r2, [r1]
 80078ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80078f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1e5      	bne.n	80078c2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	3314      	adds	r3, #20
 80078fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	e853 3f00 	ldrex	r3, [r3]
 8007904:	617b      	str	r3, [r7, #20]
   return(result);
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800790c:	653b      	str	r3, [r7, #80]	@ 0x50
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	3314      	adds	r3, #20
 8007914:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007916:	627a      	str	r2, [r7, #36]	@ 0x24
 8007918:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791a:	6a39      	ldr	r1, [r7, #32]
 800791c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800791e:	e841 2300 	strex	r3, r2, [r1]
 8007922:	61fb      	str	r3, [r7, #28]
   return(result);
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1e5      	bne.n	80078f6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800792a:	2300      	movs	r3, #0
}
 800792c:	4618      	mov	r0, r3
 800792e:	3760      	adds	r7, #96	@ 0x60
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	08007611 	.word	0x08007611
 8007938:	0800773d 	.word	0x0800773d
 800793c:	08007779 	.word	0x08007779

08007940 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007940:	b480      	push	{r7}
 8007942:	b089      	sub	sp, #36	@ 0x24
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	330c      	adds	r3, #12
 800794e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	e853 3f00 	ldrex	r3, [r3]
 8007956:	60bb      	str	r3, [r7, #8]
   return(result);
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800795e:	61fb      	str	r3, [r7, #28]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	330c      	adds	r3, #12
 8007966:	69fa      	ldr	r2, [r7, #28]
 8007968:	61ba      	str	r2, [r7, #24]
 800796a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800796c:	6979      	ldr	r1, [r7, #20]
 800796e:	69ba      	ldr	r2, [r7, #24]
 8007970:	e841 2300 	strex	r3, r2, [r1]
 8007974:	613b      	str	r3, [r7, #16]
   return(result);
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1e5      	bne.n	8007948 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2220      	movs	r2, #32
 8007980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007984:	bf00      	nop
 8007986:	3724      	adds	r7, #36	@ 0x24
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007990:	b480      	push	{r7}
 8007992:	b095      	sub	sp, #84	@ 0x54
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	330c      	adds	r3, #12
 800799e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079a2:	e853 3f00 	ldrex	r3, [r3]
 80079a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80079a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80079ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	330c      	adds	r3, #12
 80079b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80079b8:	643a      	str	r2, [r7, #64]	@ 0x40
 80079ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80079be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079c0:	e841 2300 	strex	r3, r2, [r1]
 80079c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80079c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1e5      	bne.n	8007998 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	3314      	adds	r3, #20
 80079d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d4:	6a3b      	ldr	r3, [r7, #32]
 80079d6:	e853 3f00 	ldrex	r3, [r3]
 80079da:	61fb      	str	r3, [r7, #28]
   return(result);
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	f023 0301 	bic.w	r3, r3, #1
 80079e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	3314      	adds	r3, #20
 80079ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80079ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80079ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079f4:	e841 2300 	strex	r3, r2, [r1]
 80079f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1e5      	bne.n	80079cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d119      	bne.n	8007a3c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	330c      	adds	r3, #12
 8007a0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	e853 3f00 	ldrex	r3, [r3]
 8007a16:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	f023 0310 	bic.w	r3, r3, #16
 8007a1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	330c      	adds	r3, #12
 8007a26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a28:	61ba      	str	r2, [r7, #24]
 8007a2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a2c:	6979      	ldr	r1, [r7, #20]
 8007a2e:	69ba      	ldr	r2, [r7, #24]
 8007a30:	e841 2300 	strex	r3, r2, [r1]
 8007a34:	613b      	str	r3, [r7, #16]
   return(result);
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d1e5      	bne.n	8007a08 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2220      	movs	r2, #32
 8007a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007a4a:	bf00      	nop
 8007a4c:	3754      	adds	r7, #84	@ 0x54
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr

08007a56 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b084      	sub	sp, #16
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	f7ff fdc3 	bl	80075fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a76:	bf00      	nop
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}

08007a7e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b085      	sub	sp, #20
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b21      	cmp	r3, #33	@ 0x21
 8007a90:	d13e      	bne.n	8007b10 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a9a:	d114      	bne.n	8007ac6 <UART_Transmit_IT+0x48>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d110      	bne.n	8007ac6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a1b      	ldr	r3, [r3, #32]
 8007aa8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	881b      	ldrh	r3, [r3, #0]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ab8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a1b      	ldr	r3, [r3, #32]
 8007abe:	1c9a      	adds	r2, r3, #2
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	621a      	str	r2, [r3, #32]
 8007ac4:	e008      	b.n	8007ad8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a1b      	ldr	r3, [r3, #32]
 8007aca:	1c59      	adds	r1, r3, #1
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	6211      	str	r1, [r2, #32]
 8007ad0:	781a      	ldrb	r2, [r3, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10f      	bne.n	8007b0c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68da      	ldr	r2, [r3, #12]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007afa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68da      	ldr	r2, [r3, #12]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b0a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	e000      	b.n	8007b12 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007b10:	2302      	movs	r3, #2
  }
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3714      	adds	r7, #20
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b082      	sub	sp, #8
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68da      	ldr	r2, [r3, #12]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b34:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2220      	movs	r2, #32
 8007b3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7ff fd3e 	bl	80075c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3708      	adds	r7, #8
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}

08007b4e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007b4e:	b580      	push	{r7, lr}
 8007b50:	b08c      	sub	sp, #48	@ 0x30
 8007b52:	af00      	add	r7, sp, #0
 8007b54:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b22      	cmp	r3, #34	@ 0x22
 8007b60:	f040 80ae 	bne.w	8007cc0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b6c:	d117      	bne.n	8007b9e <UART_Receive_IT+0x50>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d113      	bne.n	8007b9e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007b76:	2300      	movs	r3, #0
 8007b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b96:	1c9a      	adds	r2, r3, #2
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	629a      	str	r2, [r3, #40]	@ 0x28
 8007b9c:	e026      	b.n	8007bec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007bb0:	d007      	beq.n	8007bc2 <UART_Receive_IT+0x74>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d10a      	bne.n	8007bd0 <UART_Receive_IT+0x82>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	691b      	ldr	r3, [r3, #16]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d106      	bne.n	8007bd0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	b2da      	uxtb	r2, r3
 8007bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bcc:	701a      	strb	r2, [r3, #0]
 8007bce:	e008      	b.n	8007be2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bdc:	b2da      	uxtb	r2, r3
 8007bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007be0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007be6:	1c5a      	adds	r2, r3, #1
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d15d      	bne.n	8007cbc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68da      	ldr	r2, [r3, #12]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f022 0220 	bic.w	r2, r2, #32
 8007c0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	68da      	ldr	r2, [r3, #12]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	695a      	ldr	r2, [r3, #20]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f022 0201 	bic.w	r2, r2, #1
 8007c2e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2220      	movs	r2, #32
 8007c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d135      	bne.n	8007cb2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	330c      	adds	r3, #12
 8007c52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	e853 3f00 	ldrex	r3, [r3]
 8007c5a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	f023 0310 	bic.w	r3, r3, #16
 8007c62:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	330c      	adds	r3, #12
 8007c6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c6c:	623a      	str	r2, [r7, #32]
 8007c6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c70:	69f9      	ldr	r1, [r7, #28]
 8007c72:	6a3a      	ldr	r2, [r7, #32]
 8007c74:	e841 2300 	strex	r3, r2, [r1]
 8007c78:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c7a:	69bb      	ldr	r3, [r7, #24]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d1e5      	bne.n	8007c4c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 0310 	and.w	r3, r3, #16
 8007c8a:	2b10      	cmp	r3, #16
 8007c8c:	d10a      	bne.n	8007ca4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c8e:	2300      	movs	r3, #0
 8007c90:	60fb      	str	r3, [r7, #12]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	60fb      	str	r3, [r7, #12]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	60fb      	str	r3, [r7, #12]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007ca8:	4619      	mov	r1, r3
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7fa fd04 	bl	80026b8 <HAL_UARTEx_RxEventCallback>
 8007cb0:	e002      	b.n	8007cb8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f7ff fc8e 	bl	80075d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	e002      	b.n	8007cc2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	e000      	b.n	8007cc2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007cc0:	2302      	movs	r3, #2
  }
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3730      	adds	r7, #48	@ 0x30
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
	...

08007ccc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cd0:	b0c0      	sub	sp, #256	@ 0x100
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ce8:	68d9      	ldr	r1, [r3, #12]
 8007cea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cee:	681a      	ldr	r2, [r3, #0]
 8007cf0:	ea40 0301 	orr.w	r3, r0, r1
 8007cf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cfa:	689a      	ldr	r2, [r3, #8]
 8007cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	431a      	orrs	r2, r3
 8007d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	431a      	orrs	r2, r3
 8007d0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d10:	69db      	ldr	r3, [r3, #28]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007d24:	f021 010c 	bic.w	r1, r1, #12
 8007d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007d32:	430b      	orrs	r3, r1
 8007d34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d46:	6999      	ldr	r1, [r3, #24]
 8007d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	ea40 0301 	orr.w	r3, r0, r1
 8007d52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	4b8f      	ldr	r3, [pc, #572]	@ (8007f98 <UART_SetConfig+0x2cc>)
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d005      	beq.n	8007d6c <UART_SetConfig+0xa0>
 8007d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	4b8d      	ldr	r3, [pc, #564]	@ (8007f9c <UART_SetConfig+0x2d0>)
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d104      	bne.n	8007d76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d6c:	f7fe fa2e 	bl	80061cc <HAL_RCC_GetPCLK2Freq>
 8007d70:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007d74:	e003      	b.n	8007d7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d76:	f7fe fa15 	bl	80061a4 <HAL_RCC_GetPCLK1Freq>
 8007d7a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d82:	69db      	ldr	r3, [r3, #28]
 8007d84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d88:	f040 810c 	bne.w	8007fa4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d90:	2200      	movs	r2, #0
 8007d92:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007d96:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007d9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007d9e:	4622      	mov	r2, r4
 8007da0:	462b      	mov	r3, r5
 8007da2:	1891      	adds	r1, r2, r2
 8007da4:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007da6:	415b      	adcs	r3, r3
 8007da8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007daa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007dae:	4621      	mov	r1, r4
 8007db0:	eb12 0801 	adds.w	r8, r2, r1
 8007db4:	4629      	mov	r1, r5
 8007db6:	eb43 0901 	adc.w	r9, r3, r1
 8007dba:	f04f 0200 	mov.w	r2, #0
 8007dbe:	f04f 0300 	mov.w	r3, #0
 8007dc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007dc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007dca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007dce:	4690      	mov	r8, r2
 8007dd0:	4699      	mov	r9, r3
 8007dd2:	4623      	mov	r3, r4
 8007dd4:	eb18 0303 	adds.w	r3, r8, r3
 8007dd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007ddc:	462b      	mov	r3, r5
 8007dde:	eb49 0303 	adc.w	r3, r9, r3
 8007de2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007de6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007df2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007df6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	18db      	adds	r3, r3, r3
 8007dfe:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e00:	4613      	mov	r3, r2
 8007e02:	eb42 0303 	adc.w	r3, r2, r3
 8007e06:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007e0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007e10:	f7f8 ff42 	bl	8000c98 <__aeabi_uldivmod>
 8007e14:	4602      	mov	r2, r0
 8007e16:	460b      	mov	r3, r1
 8007e18:	4b61      	ldr	r3, [pc, #388]	@ (8007fa0 <UART_SetConfig+0x2d4>)
 8007e1a:	fba3 2302 	umull	r2, r3, r3, r2
 8007e1e:	095b      	lsrs	r3, r3, #5
 8007e20:	011c      	lsls	r4, r3, #4
 8007e22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e26:	2200      	movs	r2, #0
 8007e28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007e2c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007e30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007e34:	4642      	mov	r2, r8
 8007e36:	464b      	mov	r3, r9
 8007e38:	1891      	adds	r1, r2, r2
 8007e3a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007e3c:	415b      	adcs	r3, r3
 8007e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007e44:	4641      	mov	r1, r8
 8007e46:	eb12 0a01 	adds.w	sl, r2, r1
 8007e4a:	4649      	mov	r1, r9
 8007e4c:	eb43 0b01 	adc.w	fp, r3, r1
 8007e50:	f04f 0200 	mov.w	r2, #0
 8007e54:	f04f 0300 	mov.w	r3, #0
 8007e58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007e5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007e60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e64:	4692      	mov	sl, r2
 8007e66:	469b      	mov	fp, r3
 8007e68:	4643      	mov	r3, r8
 8007e6a:	eb1a 0303 	adds.w	r3, sl, r3
 8007e6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007e72:	464b      	mov	r3, r9
 8007e74:	eb4b 0303 	adc.w	r3, fp, r3
 8007e78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e88:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007e8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007e90:	460b      	mov	r3, r1
 8007e92:	18db      	adds	r3, r3, r3
 8007e94:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e96:	4613      	mov	r3, r2
 8007e98:	eb42 0303 	adc.w	r3, r2, r3
 8007e9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007ea2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007ea6:	f7f8 fef7 	bl	8000c98 <__aeabi_uldivmod>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	460b      	mov	r3, r1
 8007eae:	4611      	mov	r1, r2
 8007eb0:	4b3b      	ldr	r3, [pc, #236]	@ (8007fa0 <UART_SetConfig+0x2d4>)
 8007eb2:	fba3 2301 	umull	r2, r3, r3, r1
 8007eb6:	095b      	lsrs	r3, r3, #5
 8007eb8:	2264      	movs	r2, #100	@ 0x64
 8007eba:	fb02 f303 	mul.w	r3, r2, r3
 8007ebe:	1acb      	subs	r3, r1, r3
 8007ec0:	00db      	lsls	r3, r3, #3
 8007ec2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007ec6:	4b36      	ldr	r3, [pc, #216]	@ (8007fa0 <UART_SetConfig+0x2d4>)
 8007ec8:	fba3 2302 	umull	r2, r3, r3, r2
 8007ecc:	095b      	lsrs	r3, r3, #5
 8007ece:	005b      	lsls	r3, r3, #1
 8007ed0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007ed4:	441c      	add	r4, r3
 8007ed6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007eda:	2200      	movs	r2, #0
 8007edc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ee0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007ee4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007ee8:	4642      	mov	r2, r8
 8007eea:	464b      	mov	r3, r9
 8007eec:	1891      	adds	r1, r2, r2
 8007eee:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007ef0:	415b      	adcs	r3, r3
 8007ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ef4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007ef8:	4641      	mov	r1, r8
 8007efa:	1851      	adds	r1, r2, r1
 8007efc:	6339      	str	r1, [r7, #48]	@ 0x30
 8007efe:	4649      	mov	r1, r9
 8007f00:	414b      	adcs	r3, r1
 8007f02:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f04:	f04f 0200 	mov.w	r2, #0
 8007f08:	f04f 0300 	mov.w	r3, #0
 8007f0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007f10:	4659      	mov	r1, fp
 8007f12:	00cb      	lsls	r3, r1, #3
 8007f14:	4651      	mov	r1, sl
 8007f16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f1a:	4651      	mov	r1, sl
 8007f1c:	00ca      	lsls	r2, r1, #3
 8007f1e:	4610      	mov	r0, r2
 8007f20:	4619      	mov	r1, r3
 8007f22:	4603      	mov	r3, r0
 8007f24:	4642      	mov	r2, r8
 8007f26:	189b      	adds	r3, r3, r2
 8007f28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007f2c:	464b      	mov	r3, r9
 8007f2e:	460a      	mov	r2, r1
 8007f30:	eb42 0303 	adc.w	r3, r2, r3
 8007f34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007f44:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007f48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	18db      	adds	r3, r3, r3
 8007f50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f52:	4613      	mov	r3, r2
 8007f54:	eb42 0303 	adc.w	r3, r2, r3
 8007f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007f5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007f62:	f7f8 fe99 	bl	8000c98 <__aeabi_uldivmod>
 8007f66:	4602      	mov	r2, r0
 8007f68:	460b      	mov	r3, r1
 8007f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007fa0 <UART_SetConfig+0x2d4>)
 8007f6c:	fba3 1302 	umull	r1, r3, r3, r2
 8007f70:	095b      	lsrs	r3, r3, #5
 8007f72:	2164      	movs	r1, #100	@ 0x64
 8007f74:	fb01 f303 	mul.w	r3, r1, r3
 8007f78:	1ad3      	subs	r3, r2, r3
 8007f7a:	00db      	lsls	r3, r3, #3
 8007f7c:	3332      	adds	r3, #50	@ 0x32
 8007f7e:	4a08      	ldr	r2, [pc, #32]	@ (8007fa0 <UART_SetConfig+0x2d4>)
 8007f80:	fba2 2303 	umull	r2, r3, r2, r3
 8007f84:	095b      	lsrs	r3, r3, #5
 8007f86:	f003 0207 	and.w	r2, r3, #7
 8007f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4422      	add	r2, r4
 8007f92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f94:	e106      	b.n	80081a4 <UART_SetConfig+0x4d8>
 8007f96:	bf00      	nop
 8007f98:	40011000 	.word	0x40011000
 8007f9c:	40011400 	.word	0x40011400
 8007fa0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007fa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fa8:	2200      	movs	r2, #0
 8007faa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007fae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007fb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007fb6:	4642      	mov	r2, r8
 8007fb8:	464b      	mov	r3, r9
 8007fba:	1891      	adds	r1, r2, r2
 8007fbc:	6239      	str	r1, [r7, #32]
 8007fbe:	415b      	adcs	r3, r3
 8007fc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007fc6:	4641      	mov	r1, r8
 8007fc8:	1854      	adds	r4, r2, r1
 8007fca:	4649      	mov	r1, r9
 8007fcc:	eb43 0501 	adc.w	r5, r3, r1
 8007fd0:	f04f 0200 	mov.w	r2, #0
 8007fd4:	f04f 0300 	mov.w	r3, #0
 8007fd8:	00eb      	lsls	r3, r5, #3
 8007fda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007fde:	00e2      	lsls	r2, r4, #3
 8007fe0:	4614      	mov	r4, r2
 8007fe2:	461d      	mov	r5, r3
 8007fe4:	4643      	mov	r3, r8
 8007fe6:	18e3      	adds	r3, r4, r3
 8007fe8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007fec:	464b      	mov	r3, r9
 8007fee:	eb45 0303 	adc.w	r3, r5, r3
 8007ff2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ffa:	685b      	ldr	r3, [r3, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008002:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008006:	f04f 0200 	mov.w	r2, #0
 800800a:	f04f 0300 	mov.w	r3, #0
 800800e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008012:	4629      	mov	r1, r5
 8008014:	008b      	lsls	r3, r1, #2
 8008016:	4621      	mov	r1, r4
 8008018:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800801c:	4621      	mov	r1, r4
 800801e:	008a      	lsls	r2, r1, #2
 8008020:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008024:	f7f8 fe38 	bl	8000c98 <__aeabi_uldivmod>
 8008028:	4602      	mov	r2, r0
 800802a:	460b      	mov	r3, r1
 800802c:	4b60      	ldr	r3, [pc, #384]	@ (80081b0 <UART_SetConfig+0x4e4>)
 800802e:	fba3 2302 	umull	r2, r3, r3, r2
 8008032:	095b      	lsrs	r3, r3, #5
 8008034:	011c      	lsls	r4, r3, #4
 8008036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800803a:	2200      	movs	r2, #0
 800803c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008040:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008044:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008048:	4642      	mov	r2, r8
 800804a:	464b      	mov	r3, r9
 800804c:	1891      	adds	r1, r2, r2
 800804e:	61b9      	str	r1, [r7, #24]
 8008050:	415b      	adcs	r3, r3
 8008052:	61fb      	str	r3, [r7, #28]
 8008054:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008058:	4641      	mov	r1, r8
 800805a:	1851      	adds	r1, r2, r1
 800805c:	6139      	str	r1, [r7, #16]
 800805e:	4649      	mov	r1, r9
 8008060:	414b      	adcs	r3, r1
 8008062:	617b      	str	r3, [r7, #20]
 8008064:	f04f 0200 	mov.w	r2, #0
 8008068:	f04f 0300 	mov.w	r3, #0
 800806c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008070:	4659      	mov	r1, fp
 8008072:	00cb      	lsls	r3, r1, #3
 8008074:	4651      	mov	r1, sl
 8008076:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800807a:	4651      	mov	r1, sl
 800807c:	00ca      	lsls	r2, r1, #3
 800807e:	4610      	mov	r0, r2
 8008080:	4619      	mov	r1, r3
 8008082:	4603      	mov	r3, r0
 8008084:	4642      	mov	r2, r8
 8008086:	189b      	adds	r3, r3, r2
 8008088:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800808c:	464b      	mov	r3, r9
 800808e:	460a      	mov	r2, r1
 8008090:	eb42 0303 	adc.w	r3, r2, r3
 8008094:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80080a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80080a4:	f04f 0200 	mov.w	r2, #0
 80080a8:	f04f 0300 	mov.w	r3, #0
 80080ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80080b0:	4649      	mov	r1, r9
 80080b2:	008b      	lsls	r3, r1, #2
 80080b4:	4641      	mov	r1, r8
 80080b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080ba:	4641      	mov	r1, r8
 80080bc:	008a      	lsls	r2, r1, #2
 80080be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80080c2:	f7f8 fde9 	bl	8000c98 <__aeabi_uldivmod>
 80080c6:	4602      	mov	r2, r0
 80080c8:	460b      	mov	r3, r1
 80080ca:	4611      	mov	r1, r2
 80080cc:	4b38      	ldr	r3, [pc, #224]	@ (80081b0 <UART_SetConfig+0x4e4>)
 80080ce:	fba3 2301 	umull	r2, r3, r3, r1
 80080d2:	095b      	lsrs	r3, r3, #5
 80080d4:	2264      	movs	r2, #100	@ 0x64
 80080d6:	fb02 f303 	mul.w	r3, r2, r3
 80080da:	1acb      	subs	r3, r1, r3
 80080dc:	011b      	lsls	r3, r3, #4
 80080de:	3332      	adds	r3, #50	@ 0x32
 80080e0:	4a33      	ldr	r2, [pc, #204]	@ (80081b0 <UART_SetConfig+0x4e4>)
 80080e2:	fba2 2303 	umull	r2, r3, r2, r3
 80080e6:	095b      	lsrs	r3, r3, #5
 80080e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80080ec:	441c      	add	r4, r3
 80080ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080f2:	2200      	movs	r2, #0
 80080f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80080f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80080f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80080fc:	4642      	mov	r2, r8
 80080fe:	464b      	mov	r3, r9
 8008100:	1891      	adds	r1, r2, r2
 8008102:	60b9      	str	r1, [r7, #8]
 8008104:	415b      	adcs	r3, r3
 8008106:	60fb      	str	r3, [r7, #12]
 8008108:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800810c:	4641      	mov	r1, r8
 800810e:	1851      	adds	r1, r2, r1
 8008110:	6039      	str	r1, [r7, #0]
 8008112:	4649      	mov	r1, r9
 8008114:	414b      	adcs	r3, r1
 8008116:	607b      	str	r3, [r7, #4]
 8008118:	f04f 0200 	mov.w	r2, #0
 800811c:	f04f 0300 	mov.w	r3, #0
 8008120:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008124:	4659      	mov	r1, fp
 8008126:	00cb      	lsls	r3, r1, #3
 8008128:	4651      	mov	r1, sl
 800812a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800812e:	4651      	mov	r1, sl
 8008130:	00ca      	lsls	r2, r1, #3
 8008132:	4610      	mov	r0, r2
 8008134:	4619      	mov	r1, r3
 8008136:	4603      	mov	r3, r0
 8008138:	4642      	mov	r2, r8
 800813a:	189b      	adds	r3, r3, r2
 800813c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800813e:	464b      	mov	r3, r9
 8008140:	460a      	mov	r2, r1
 8008142:	eb42 0303 	adc.w	r3, r2, r3
 8008146:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	663b      	str	r3, [r7, #96]	@ 0x60
 8008152:	667a      	str	r2, [r7, #100]	@ 0x64
 8008154:	f04f 0200 	mov.w	r2, #0
 8008158:	f04f 0300 	mov.w	r3, #0
 800815c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008160:	4649      	mov	r1, r9
 8008162:	008b      	lsls	r3, r1, #2
 8008164:	4641      	mov	r1, r8
 8008166:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800816a:	4641      	mov	r1, r8
 800816c:	008a      	lsls	r2, r1, #2
 800816e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008172:	f7f8 fd91 	bl	8000c98 <__aeabi_uldivmod>
 8008176:	4602      	mov	r2, r0
 8008178:	460b      	mov	r3, r1
 800817a:	4b0d      	ldr	r3, [pc, #52]	@ (80081b0 <UART_SetConfig+0x4e4>)
 800817c:	fba3 1302 	umull	r1, r3, r3, r2
 8008180:	095b      	lsrs	r3, r3, #5
 8008182:	2164      	movs	r1, #100	@ 0x64
 8008184:	fb01 f303 	mul.w	r3, r1, r3
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	011b      	lsls	r3, r3, #4
 800818c:	3332      	adds	r3, #50	@ 0x32
 800818e:	4a08      	ldr	r2, [pc, #32]	@ (80081b0 <UART_SetConfig+0x4e4>)
 8008190:	fba2 2303 	umull	r2, r3, r2, r3
 8008194:	095b      	lsrs	r3, r3, #5
 8008196:	f003 020f 	and.w	r2, r3, #15
 800819a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4422      	add	r2, r4
 80081a2:	609a      	str	r2, [r3, #8]
}
 80081a4:	bf00      	nop
 80081a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80081aa:	46bd      	mov	sp, r7
 80081ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80081b0:	51eb851f 	.word	0x51eb851f

080081b4 <sulp>:
 80081b4:	b570      	push	{r4, r5, r6, lr}
 80081b6:	4604      	mov	r4, r0
 80081b8:	460d      	mov	r5, r1
 80081ba:	ec45 4b10 	vmov	d0, r4, r5
 80081be:	4616      	mov	r6, r2
 80081c0:	f003 fc6a 	bl	800ba98 <__ulp>
 80081c4:	ec51 0b10 	vmov	r0, r1, d0
 80081c8:	b17e      	cbz	r6, 80081ea <sulp+0x36>
 80081ca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80081ce:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	dd09      	ble.n	80081ea <sulp+0x36>
 80081d6:	051b      	lsls	r3, r3, #20
 80081d8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80081dc:	2400      	movs	r4, #0
 80081de:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80081e2:	4622      	mov	r2, r4
 80081e4:	462b      	mov	r3, r5
 80081e6:	f7f8 fa0f 	bl	8000608 <__aeabi_dmul>
 80081ea:	ec41 0b10 	vmov	d0, r0, r1
 80081ee:	bd70      	pop	{r4, r5, r6, pc}

080081f0 <_strtod_l>:
 80081f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f4:	b09f      	sub	sp, #124	@ 0x7c
 80081f6:	460c      	mov	r4, r1
 80081f8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80081fa:	2200      	movs	r2, #0
 80081fc:	921a      	str	r2, [sp, #104]	@ 0x68
 80081fe:	9005      	str	r0, [sp, #20]
 8008200:	f04f 0a00 	mov.w	sl, #0
 8008204:	f04f 0b00 	mov.w	fp, #0
 8008208:	460a      	mov	r2, r1
 800820a:	9219      	str	r2, [sp, #100]	@ 0x64
 800820c:	7811      	ldrb	r1, [r2, #0]
 800820e:	292b      	cmp	r1, #43	@ 0x2b
 8008210:	d04a      	beq.n	80082a8 <_strtod_l+0xb8>
 8008212:	d838      	bhi.n	8008286 <_strtod_l+0x96>
 8008214:	290d      	cmp	r1, #13
 8008216:	d832      	bhi.n	800827e <_strtod_l+0x8e>
 8008218:	2908      	cmp	r1, #8
 800821a:	d832      	bhi.n	8008282 <_strtod_l+0x92>
 800821c:	2900      	cmp	r1, #0
 800821e:	d03b      	beq.n	8008298 <_strtod_l+0xa8>
 8008220:	2200      	movs	r2, #0
 8008222:	920e      	str	r2, [sp, #56]	@ 0x38
 8008224:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008226:	782a      	ldrb	r2, [r5, #0]
 8008228:	2a30      	cmp	r2, #48	@ 0x30
 800822a:	f040 80b2 	bne.w	8008392 <_strtod_l+0x1a2>
 800822e:	786a      	ldrb	r2, [r5, #1]
 8008230:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008234:	2a58      	cmp	r2, #88	@ 0x58
 8008236:	d16e      	bne.n	8008316 <_strtod_l+0x126>
 8008238:	9302      	str	r3, [sp, #8]
 800823a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800823c:	9301      	str	r3, [sp, #4]
 800823e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008240:	9300      	str	r3, [sp, #0]
 8008242:	4a8f      	ldr	r2, [pc, #572]	@ (8008480 <_strtod_l+0x290>)
 8008244:	9805      	ldr	r0, [sp, #20]
 8008246:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008248:	a919      	add	r1, sp, #100	@ 0x64
 800824a:	f002 fd1f 	bl	800ac8c <__gethex>
 800824e:	f010 060f 	ands.w	r6, r0, #15
 8008252:	4604      	mov	r4, r0
 8008254:	d005      	beq.n	8008262 <_strtod_l+0x72>
 8008256:	2e06      	cmp	r6, #6
 8008258:	d128      	bne.n	80082ac <_strtod_l+0xbc>
 800825a:	3501      	adds	r5, #1
 800825c:	2300      	movs	r3, #0
 800825e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008260:	930e      	str	r3, [sp, #56]	@ 0x38
 8008262:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008264:	2b00      	cmp	r3, #0
 8008266:	f040 858e 	bne.w	8008d86 <_strtod_l+0xb96>
 800826a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800826c:	b1cb      	cbz	r3, 80082a2 <_strtod_l+0xb2>
 800826e:	4652      	mov	r2, sl
 8008270:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008274:	ec43 2b10 	vmov	d0, r2, r3
 8008278:	b01f      	add	sp, #124	@ 0x7c
 800827a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800827e:	2920      	cmp	r1, #32
 8008280:	d1ce      	bne.n	8008220 <_strtod_l+0x30>
 8008282:	3201      	adds	r2, #1
 8008284:	e7c1      	b.n	800820a <_strtod_l+0x1a>
 8008286:	292d      	cmp	r1, #45	@ 0x2d
 8008288:	d1ca      	bne.n	8008220 <_strtod_l+0x30>
 800828a:	2101      	movs	r1, #1
 800828c:	910e      	str	r1, [sp, #56]	@ 0x38
 800828e:	1c51      	adds	r1, r2, #1
 8008290:	9119      	str	r1, [sp, #100]	@ 0x64
 8008292:	7852      	ldrb	r2, [r2, #1]
 8008294:	2a00      	cmp	r2, #0
 8008296:	d1c5      	bne.n	8008224 <_strtod_l+0x34>
 8008298:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800829a:	9419      	str	r4, [sp, #100]	@ 0x64
 800829c:	2b00      	cmp	r3, #0
 800829e:	f040 8570 	bne.w	8008d82 <_strtod_l+0xb92>
 80082a2:	4652      	mov	r2, sl
 80082a4:	465b      	mov	r3, fp
 80082a6:	e7e5      	b.n	8008274 <_strtod_l+0x84>
 80082a8:	2100      	movs	r1, #0
 80082aa:	e7ef      	b.n	800828c <_strtod_l+0x9c>
 80082ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80082ae:	b13a      	cbz	r2, 80082c0 <_strtod_l+0xd0>
 80082b0:	2135      	movs	r1, #53	@ 0x35
 80082b2:	a81c      	add	r0, sp, #112	@ 0x70
 80082b4:	f003 fcea 	bl	800bc8c <__copybits>
 80082b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082ba:	9805      	ldr	r0, [sp, #20]
 80082bc:	f003 f8c0 	bl	800b440 <_Bfree>
 80082c0:	3e01      	subs	r6, #1
 80082c2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80082c4:	2e04      	cmp	r6, #4
 80082c6:	d806      	bhi.n	80082d6 <_strtod_l+0xe6>
 80082c8:	e8df f006 	tbb	[pc, r6]
 80082cc:	201d0314 	.word	0x201d0314
 80082d0:	14          	.byte	0x14
 80082d1:	00          	.byte	0x00
 80082d2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80082d6:	05e1      	lsls	r1, r4, #23
 80082d8:	bf48      	it	mi
 80082da:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80082de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80082e2:	0d1b      	lsrs	r3, r3, #20
 80082e4:	051b      	lsls	r3, r3, #20
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1bb      	bne.n	8008262 <_strtod_l+0x72>
 80082ea:	f001 fd5b 	bl	8009da4 <__errno>
 80082ee:	2322      	movs	r3, #34	@ 0x22
 80082f0:	6003      	str	r3, [r0, #0]
 80082f2:	e7b6      	b.n	8008262 <_strtod_l+0x72>
 80082f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80082f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80082fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008300:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008304:	e7e7      	b.n	80082d6 <_strtod_l+0xe6>
 8008306:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8008488 <_strtod_l+0x298>
 800830a:	e7e4      	b.n	80082d6 <_strtod_l+0xe6>
 800830c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008310:	f04f 3aff 	mov.w	sl, #4294967295
 8008314:	e7df      	b.n	80082d6 <_strtod_l+0xe6>
 8008316:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008318:	1c5a      	adds	r2, r3, #1
 800831a:	9219      	str	r2, [sp, #100]	@ 0x64
 800831c:	785b      	ldrb	r3, [r3, #1]
 800831e:	2b30      	cmp	r3, #48	@ 0x30
 8008320:	d0f9      	beq.n	8008316 <_strtod_l+0x126>
 8008322:	2b00      	cmp	r3, #0
 8008324:	d09d      	beq.n	8008262 <_strtod_l+0x72>
 8008326:	2301      	movs	r3, #1
 8008328:	2700      	movs	r7, #0
 800832a:	9308      	str	r3, [sp, #32]
 800832c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800832e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008330:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008332:	46b9      	mov	r9, r7
 8008334:	220a      	movs	r2, #10
 8008336:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008338:	7805      	ldrb	r5, [r0, #0]
 800833a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800833e:	b2d9      	uxtb	r1, r3
 8008340:	2909      	cmp	r1, #9
 8008342:	d928      	bls.n	8008396 <_strtod_l+0x1a6>
 8008344:	494f      	ldr	r1, [pc, #316]	@ (8008484 <_strtod_l+0x294>)
 8008346:	2201      	movs	r2, #1
 8008348:	f001 fccf 	bl	8009cea <strncmp>
 800834c:	2800      	cmp	r0, #0
 800834e:	d032      	beq.n	80083b6 <_strtod_l+0x1c6>
 8008350:	2000      	movs	r0, #0
 8008352:	462a      	mov	r2, r5
 8008354:	900a      	str	r0, [sp, #40]	@ 0x28
 8008356:	464d      	mov	r5, r9
 8008358:	4603      	mov	r3, r0
 800835a:	2a65      	cmp	r2, #101	@ 0x65
 800835c:	d001      	beq.n	8008362 <_strtod_l+0x172>
 800835e:	2a45      	cmp	r2, #69	@ 0x45
 8008360:	d114      	bne.n	800838c <_strtod_l+0x19c>
 8008362:	b91d      	cbnz	r5, 800836c <_strtod_l+0x17c>
 8008364:	9a08      	ldr	r2, [sp, #32]
 8008366:	4302      	orrs	r2, r0
 8008368:	d096      	beq.n	8008298 <_strtod_l+0xa8>
 800836a:	2500      	movs	r5, #0
 800836c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800836e:	1c62      	adds	r2, r4, #1
 8008370:	9219      	str	r2, [sp, #100]	@ 0x64
 8008372:	7862      	ldrb	r2, [r4, #1]
 8008374:	2a2b      	cmp	r2, #43	@ 0x2b
 8008376:	d07a      	beq.n	800846e <_strtod_l+0x27e>
 8008378:	2a2d      	cmp	r2, #45	@ 0x2d
 800837a:	d07e      	beq.n	800847a <_strtod_l+0x28a>
 800837c:	f04f 0c00 	mov.w	ip, #0
 8008380:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008384:	2909      	cmp	r1, #9
 8008386:	f240 8085 	bls.w	8008494 <_strtod_l+0x2a4>
 800838a:	9419      	str	r4, [sp, #100]	@ 0x64
 800838c:	f04f 0800 	mov.w	r8, #0
 8008390:	e0a5      	b.n	80084de <_strtod_l+0x2ee>
 8008392:	2300      	movs	r3, #0
 8008394:	e7c8      	b.n	8008328 <_strtod_l+0x138>
 8008396:	f1b9 0f08 	cmp.w	r9, #8
 800839a:	bfd8      	it	le
 800839c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800839e:	f100 0001 	add.w	r0, r0, #1
 80083a2:	bfda      	itte	le
 80083a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80083a8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80083aa:	fb02 3707 	mlagt	r7, r2, r7, r3
 80083ae:	f109 0901 	add.w	r9, r9, #1
 80083b2:	9019      	str	r0, [sp, #100]	@ 0x64
 80083b4:	e7bf      	b.n	8008336 <_strtod_l+0x146>
 80083b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083b8:	1c5a      	adds	r2, r3, #1
 80083ba:	9219      	str	r2, [sp, #100]	@ 0x64
 80083bc:	785a      	ldrb	r2, [r3, #1]
 80083be:	f1b9 0f00 	cmp.w	r9, #0
 80083c2:	d03b      	beq.n	800843c <_strtod_l+0x24c>
 80083c4:	900a      	str	r0, [sp, #40]	@ 0x28
 80083c6:	464d      	mov	r5, r9
 80083c8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80083cc:	2b09      	cmp	r3, #9
 80083ce:	d912      	bls.n	80083f6 <_strtod_l+0x206>
 80083d0:	2301      	movs	r3, #1
 80083d2:	e7c2      	b.n	800835a <_strtod_l+0x16a>
 80083d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083d6:	1c5a      	adds	r2, r3, #1
 80083d8:	9219      	str	r2, [sp, #100]	@ 0x64
 80083da:	785a      	ldrb	r2, [r3, #1]
 80083dc:	3001      	adds	r0, #1
 80083de:	2a30      	cmp	r2, #48	@ 0x30
 80083e0:	d0f8      	beq.n	80083d4 <_strtod_l+0x1e4>
 80083e2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80083e6:	2b08      	cmp	r3, #8
 80083e8:	f200 84d2 	bhi.w	8008d90 <_strtod_l+0xba0>
 80083ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083ee:	900a      	str	r0, [sp, #40]	@ 0x28
 80083f0:	2000      	movs	r0, #0
 80083f2:	930c      	str	r3, [sp, #48]	@ 0x30
 80083f4:	4605      	mov	r5, r0
 80083f6:	3a30      	subs	r2, #48	@ 0x30
 80083f8:	f100 0301 	add.w	r3, r0, #1
 80083fc:	d018      	beq.n	8008430 <_strtod_l+0x240>
 80083fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008400:	4419      	add	r1, r3
 8008402:	910a      	str	r1, [sp, #40]	@ 0x28
 8008404:	462e      	mov	r6, r5
 8008406:	f04f 0e0a 	mov.w	lr, #10
 800840a:	1c71      	adds	r1, r6, #1
 800840c:	eba1 0c05 	sub.w	ip, r1, r5
 8008410:	4563      	cmp	r3, ip
 8008412:	dc15      	bgt.n	8008440 <_strtod_l+0x250>
 8008414:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008418:	182b      	adds	r3, r5, r0
 800841a:	2b08      	cmp	r3, #8
 800841c:	f105 0501 	add.w	r5, r5, #1
 8008420:	4405      	add	r5, r0
 8008422:	dc1a      	bgt.n	800845a <_strtod_l+0x26a>
 8008424:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008426:	230a      	movs	r3, #10
 8008428:	fb03 2301 	mla	r3, r3, r1, r2
 800842c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800842e:	2300      	movs	r3, #0
 8008430:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008432:	1c51      	adds	r1, r2, #1
 8008434:	9119      	str	r1, [sp, #100]	@ 0x64
 8008436:	7852      	ldrb	r2, [r2, #1]
 8008438:	4618      	mov	r0, r3
 800843a:	e7c5      	b.n	80083c8 <_strtod_l+0x1d8>
 800843c:	4648      	mov	r0, r9
 800843e:	e7ce      	b.n	80083de <_strtod_l+0x1ee>
 8008440:	2e08      	cmp	r6, #8
 8008442:	dc05      	bgt.n	8008450 <_strtod_l+0x260>
 8008444:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008446:	fb0e f606 	mul.w	r6, lr, r6
 800844a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800844c:	460e      	mov	r6, r1
 800844e:	e7dc      	b.n	800840a <_strtod_l+0x21a>
 8008450:	2910      	cmp	r1, #16
 8008452:	bfd8      	it	le
 8008454:	fb0e f707 	mulle.w	r7, lr, r7
 8008458:	e7f8      	b.n	800844c <_strtod_l+0x25c>
 800845a:	2b0f      	cmp	r3, #15
 800845c:	bfdc      	itt	le
 800845e:	230a      	movle	r3, #10
 8008460:	fb03 2707 	mlale	r7, r3, r7, r2
 8008464:	e7e3      	b.n	800842e <_strtod_l+0x23e>
 8008466:	2300      	movs	r3, #0
 8008468:	930a      	str	r3, [sp, #40]	@ 0x28
 800846a:	2301      	movs	r3, #1
 800846c:	e77a      	b.n	8008364 <_strtod_l+0x174>
 800846e:	f04f 0c00 	mov.w	ip, #0
 8008472:	1ca2      	adds	r2, r4, #2
 8008474:	9219      	str	r2, [sp, #100]	@ 0x64
 8008476:	78a2      	ldrb	r2, [r4, #2]
 8008478:	e782      	b.n	8008380 <_strtod_l+0x190>
 800847a:	f04f 0c01 	mov.w	ip, #1
 800847e:	e7f8      	b.n	8008472 <_strtod_l+0x282>
 8008480:	0800cdc4 	.word	0x0800cdc4
 8008484:	0800cbd8 	.word	0x0800cbd8
 8008488:	7ff00000 	.word	0x7ff00000
 800848c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800848e:	1c51      	adds	r1, r2, #1
 8008490:	9119      	str	r1, [sp, #100]	@ 0x64
 8008492:	7852      	ldrb	r2, [r2, #1]
 8008494:	2a30      	cmp	r2, #48	@ 0x30
 8008496:	d0f9      	beq.n	800848c <_strtod_l+0x29c>
 8008498:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800849c:	2908      	cmp	r1, #8
 800849e:	f63f af75 	bhi.w	800838c <_strtod_l+0x19c>
 80084a2:	3a30      	subs	r2, #48	@ 0x30
 80084a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80084a6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80084a8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80084aa:	f04f 080a 	mov.w	r8, #10
 80084ae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80084b0:	1c56      	adds	r6, r2, #1
 80084b2:	9619      	str	r6, [sp, #100]	@ 0x64
 80084b4:	7852      	ldrb	r2, [r2, #1]
 80084b6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80084ba:	f1be 0f09 	cmp.w	lr, #9
 80084be:	d939      	bls.n	8008534 <_strtod_l+0x344>
 80084c0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80084c2:	1a76      	subs	r6, r6, r1
 80084c4:	2e08      	cmp	r6, #8
 80084c6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80084ca:	dc03      	bgt.n	80084d4 <_strtod_l+0x2e4>
 80084cc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80084ce:	4588      	cmp	r8, r1
 80084d0:	bfa8      	it	ge
 80084d2:	4688      	movge	r8, r1
 80084d4:	f1bc 0f00 	cmp.w	ip, #0
 80084d8:	d001      	beq.n	80084de <_strtod_l+0x2ee>
 80084da:	f1c8 0800 	rsb	r8, r8, #0
 80084de:	2d00      	cmp	r5, #0
 80084e0:	d14e      	bne.n	8008580 <_strtod_l+0x390>
 80084e2:	9908      	ldr	r1, [sp, #32]
 80084e4:	4308      	orrs	r0, r1
 80084e6:	f47f aebc 	bne.w	8008262 <_strtod_l+0x72>
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f47f aed4 	bne.w	8008298 <_strtod_l+0xa8>
 80084f0:	2a69      	cmp	r2, #105	@ 0x69
 80084f2:	d028      	beq.n	8008546 <_strtod_l+0x356>
 80084f4:	dc25      	bgt.n	8008542 <_strtod_l+0x352>
 80084f6:	2a49      	cmp	r2, #73	@ 0x49
 80084f8:	d025      	beq.n	8008546 <_strtod_l+0x356>
 80084fa:	2a4e      	cmp	r2, #78	@ 0x4e
 80084fc:	f47f aecc 	bne.w	8008298 <_strtod_l+0xa8>
 8008500:	499a      	ldr	r1, [pc, #616]	@ (800876c <_strtod_l+0x57c>)
 8008502:	a819      	add	r0, sp, #100	@ 0x64
 8008504:	f002 fde4 	bl	800b0d0 <__match>
 8008508:	2800      	cmp	r0, #0
 800850a:	f43f aec5 	beq.w	8008298 <_strtod_l+0xa8>
 800850e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	2b28      	cmp	r3, #40	@ 0x28
 8008514:	d12e      	bne.n	8008574 <_strtod_l+0x384>
 8008516:	4996      	ldr	r1, [pc, #600]	@ (8008770 <_strtod_l+0x580>)
 8008518:	aa1c      	add	r2, sp, #112	@ 0x70
 800851a:	a819      	add	r0, sp, #100	@ 0x64
 800851c:	f002 fdec 	bl	800b0f8 <__hexnan>
 8008520:	2805      	cmp	r0, #5
 8008522:	d127      	bne.n	8008574 <_strtod_l+0x384>
 8008524:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008526:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800852a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800852e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008532:	e696      	b.n	8008262 <_strtod_l+0x72>
 8008534:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008536:	fb08 2101 	mla	r1, r8, r1, r2
 800853a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800853e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008540:	e7b5      	b.n	80084ae <_strtod_l+0x2be>
 8008542:	2a6e      	cmp	r2, #110	@ 0x6e
 8008544:	e7da      	b.n	80084fc <_strtod_l+0x30c>
 8008546:	498b      	ldr	r1, [pc, #556]	@ (8008774 <_strtod_l+0x584>)
 8008548:	a819      	add	r0, sp, #100	@ 0x64
 800854a:	f002 fdc1 	bl	800b0d0 <__match>
 800854e:	2800      	cmp	r0, #0
 8008550:	f43f aea2 	beq.w	8008298 <_strtod_l+0xa8>
 8008554:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008556:	4988      	ldr	r1, [pc, #544]	@ (8008778 <_strtod_l+0x588>)
 8008558:	3b01      	subs	r3, #1
 800855a:	a819      	add	r0, sp, #100	@ 0x64
 800855c:	9319      	str	r3, [sp, #100]	@ 0x64
 800855e:	f002 fdb7 	bl	800b0d0 <__match>
 8008562:	b910      	cbnz	r0, 800856a <_strtod_l+0x37a>
 8008564:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008566:	3301      	adds	r3, #1
 8008568:	9319      	str	r3, [sp, #100]	@ 0x64
 800856a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8008788 <_strtod_l+0x598>
 800856e:	f04f 0a00 	mov.w	sl, #0
 8008572:	e676      	b.n	8008262 <_strtod_l+0x72>
 8008574:	4881      	ldr	r0, [pc, #516]	@ (800877c <_strtod_l+0x58c>)
 8008576:	f001 fc53 	bl	8009e20 <nan>
 800857a:	ec5b ab10 	vmov	sl, fp, d0
 800857e:	e670      	b.n	8008262 <_strtod_l+0x72>
 8008580:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008582:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008584:	eba8 0303 	sub.w	r3, r8, r3
 8008588:	f1b9 0f00 	cmp.w	r9, #0
 800858c:	bf08      	it	eq
 800858e:	46a9      	moveq	r9, r5
 8008590:	2d10      	cmp	r5, #16
 8008592:	9309      	str	r3, [sp, #36]	@ 0x24
 8008594:	462c      	mov	r4, r5
 8008596:	bfa8      	it	ge
 8008598:	2410      	movge	r4, #16
 800859a:	f7f7 ffbb 	bl	8000514 <__aeabi_ui2d>
 800859e:	2d09      	cmp	r5, #9
 80085a0:	4682      	mov	sl, r0
 80085a2:	468b      	mov	fp, r1
 80085a4:	dc13      	bgt.n	80085ce <_strtod_l+0x3de>
 80085a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	f43f ae5a 	beq.w	8008262 <_strtod_l+0x72>
 80085ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085b0:	dd78      	ble.n	80086a4 <_strtod_l+0x4b4>
 80085b2:	2b16      	cmp	r3, #22
 80085b4:	dc5f      	bgt.n	8008676 <_strtod_l+0x486>
 80085b6:	4972      	ldr	r1, [pc, #456]	@ (8008780 <_strtod_l+0x590>)
 80085b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80085bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80085c0:	4652      	mov	r2, sl
 80085c2:	465b      	mov	r3, fp
 80085c4:	f7f8 f820 	bl	8000608 <__aeabi_dmul>
 80085c8:	4682      	mov	sl, r0
 80085ca:	468b      	mov	fp, r1
 80085cc:	e649      	b.n	8008262 <_strtod_l+0x72>
 80085ce:	4b6c      	ldr	r3, [pc, #432]	@ (8008780 <_strtod_l+0x590>)
 80085d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80085d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80085d8:	f7f8 f816 	bl	8000608 <__aeabi_dmul>
 80085dc:	4682      	mov	sl, r0
 80085de:	4638      	mov	r0, r7
 80085e0:	468b      	mov	fp, r1
 80085e2:	f7f7 ff97 	bl	8000514 <__aeabi_ui2d>
 80085e6:	4602      	mov	r2, r0
 80085e8:	460b      	mov	r3, r1
 80085ea:	4650      	mov	r0, sl
 80085ec:	4659      	mov	r1, fp
 80085ee:	f7f7 fe55 	bl	800029c <__adddf3>
 80085f2:	2d0f      	cmp	r5, #15
 80085f4:	4682      	mov	sl, r0
 80085f6:	468b      	mov	fp, r1
 80085f8:	ddd5      	ble.n	80085a6 <_strtod_l+0x3b6>
 80085fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085fc:	1b2c      	subs	r4, r5, r4
 80085fe:	441c      	add	r4, r3
 8008600:	2c00      	cmp	r4, #0
 8008602:	f340 8093 	ble.w	800872c <_strtod_l+0x53c>
 8008606:	f014 030f 	ands.w	r3, r4, #15
 800860a:	d00a      	beq.n	8008622 <_strtod_l+0x432>
 800860c:	495c      	ldr	r1, [pc, #368]	@ (8008780 <_strtod_l+0x590>)
 800860e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008612:	4652      	mov	r2, sl
 8008614:	465b      	mov	r3, fp
 8008616:	e9d1 0100 	ldrd	r0, r1, [r1]
 800861a:	f7f7 fff5 	bl	8000608 <__aeabi_dmul>
 800861e:	4682      	mov	sl, r0
 8008620:	468b      	mov	fp, r1
 8008622:	f034 040f 	bics.w	r4, r4, #15
 8008626:	d073      	beq.n	8008710 <_strtod_l+0x520>
 8008628:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800862c:	dd49      	ble.n	80086c2 <_strtod_l+0x4d2>
 800862e:	2400      	movs	r4, #0
 8008630:	46a0      	mov	r8, r4
 8008632:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008634:	46a1      	mov	r9, r4
 8008636:	9a05      	ldr	r2, [sp, #20]
 8008638:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8008788 <_strtod_l+0x598>
 800863c:	2322      	movs	r3, #34	@ 0x22
 800863e:	6013      	str	r3, [r2, #0]
 8008640:	f04f 0a00 	mov.w	sl, #0
 8008644:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008646:	2b00      	cmp	r3, #0
 8008648:	f43f ae0b 	beq.w	8008262 <_strtod_l+0x72>
 800864c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800864e:	9805      	ldr	r0, [sp, #20]
 8008650:	f002 fef6 	bl	800b440 <_Bfree>
 8008654:	9805      	ldr	r0, [sp, #20]
 8008656:	4649      	mov	r1, r9
 8008658:	f002 fef2 	bl	800b440 <_Bfree>
 800865c:	9805      	ldr	r0, [sp, #20]
 800865e:	4641      	mov	r1, r8
 8008660:	f002 feee 	bl	800b440 <_Bfree>
 8008664:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008666:	9805      	ldr	r0, [sp, #20]
 8008668:	f002 feea 	bl	800b440 <_Bfree>
 800866c:	9805      	ldr	r0, [sp, #20]
 800866e:	4621      	mov	r1, r4
 8008670:	f002 fee6 	bl	800b440 <_Bfree>
 8008674:	e5f5      	b.n	8008262 <_strtod_l+0x72>
 8008676:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008678:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800867c:	4293      	cmp	r3, r2
 800867e:	dbbc      	blt.n	80085fa <_strtod_l+0x40a>
 8008680:	4c3f      	ldr	r4, [pc, #252]	@ (8008780 <_strtod_l+0x590>)
 8008682:	f1c5 050f 	rsb	r5, r5, #15
 8008686:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800868a:	4652      	mov	r2, sl
 800868c:	465b      	mov	r3, fp
 800868e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008692:	f7f7 ffb9 	bl	8000608 <__aeabi_dmul>
 8008696:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008698:	1b5d      	subs	r5, r3, r5
 800869a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800869e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80086a2:	e78f      	b.n	80085c4 <_strtod_l+0x3d4>
 80086a4:	3316      	adds	r3, #22
 80086a6:	dba8      	blt.n	80085fa <_strtod_l+0x40a>
 80086a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086aa:	eba3 0808 	sub.w	r8, r3, r8
 80086ae:	4b34      	ldr	r3, [pc, #208]	@ (8008780 <_strtod_l+0x590>)
 80086b0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80086b4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80086b8:	4650      	mov	r0, sl
 80086ba:	4659      	mov	r1, fp
 80086bc:	f7f8 f8ce 	bl	800085c <__aeabi_ddiv>
 80086c0:	e782      	b.n	80085c8 <_strtod_l+0x3d8>
 80086c2:	2300      	movs	r3, #0
 80086c4:	4f2f      	ldr	r7, [pc, #188]	@ (8008784 <_strtod_l+0x594>)
 80086c6:	1124      	asrs	r4, r4, #4
 80086c8:	4650      	mov	r0, sl
 80086ca:	4659      	mov	r1, fp
 80086cc:	461e      	mov	r6, r3
 80086ce:	2c01      	cmp	r4, #1
 80086d0:	dc21      	bgt.n	8008716 <_strtod_l+0x526>
 80086d2:	b10b      	cbz	r3, 80086d8 <_strtod_l+0x4e8>
 80086d4:	4682      	mov	sl, r0
 80086d6:	468b      	mov	fp, r1
 80086d8:	492a      	ldr	r1, [pc, #168]	@ (8008784 <_strtod_l+0x594>)
 80086da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80086de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80086e2:	4652      	mov	r2, sl
 80086e4:	465b      	mov	r3, fp
 80086e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086ea:	f7f7 ff8d 	bl	8000608 <__aeabi_dmul>
 80086ee:	4b26      	ldr	r3, [pc, #152]	@ (8008788 <_strtod_l+0x598>)
 80086f0:	460a      	mov	r2, r1
 80086f2:	400b      	ands	r3, r1
 80086f4:	4925      	ldr	r1, [pc, #148]	@ (800878c <_strtod_l+0x59c>)
 80086f6:	428b      	cmp	r3, r1
 80086f8:	4682      	mov	sl, r0
 80086fa:	d898      	bhi.n	800862e <_strtod_l+0x43e>
 80086fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008700:	428b      	cmp	r3, r1
 8008702:	bf86      	itte	hi
 8008704:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008790 <_strtod_l+0x5a0>
 8008708:	f04f 3aff 	movhi.w	sl, #4294967295
 800870c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008710:	2300      	movs	r3, #0
 8008712:	9308      	str	r3, [sp, #32]
 8008714:	e076      	b.n	8008804 <_strtod_l+0x614>
 8008716:	07e2      	lsls	r2, r4, #31
 8008718:	d504      	bpl.n	8008724 <_strtod_l+0x534>
 800871a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800871e:	f7f7 ff73 	bl	8000608 <__aeabi_dmul>
 8008722:	2301      	movs	r3, #1
 8008724:	3601      	adds	r6, #1
 8008726:	1064      	asrs	r4, r4, #1
 8008728:	3708      	adds	r7, #8
 800872a:	e7d0      	b.n	80086ce <_strtod_l+0x4de>
 800872c:	d0f0      	beq.n	8008710 <_strtod_l+0x520>
 800872e:	4264      	negs	r4, r4
 8008730:	f014 020f 	ands.w	r2, r4, #15
 8008734:	d00a      	beq.n	800874c <_strtod_l+0x55c>
 8008736:	4b12      	ldr	r3, [pc, #72]	@ (8008780 <_strtod_l+0x590>)
 8008738:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800873c:	4650      	mov	r0, sl
 800873e:	4659      	mov	r1, fp
 8008740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008744:	f7f8 f88a 	bl	800085c <__aeabi_ddiv>
 8008748:	4682      	mov	sl, r0
 800874a:	468b      	mov	fp, r1
 800874c:	1124      	asrs	r4, r4, #4
 800874e:	d0df      	beq.n	8008710 <_strtod_l+0x520>
 8008750:	2c1f      	cmp	r4, #31
 8008752:	dd1f      	ble.n	8008794 <_strtod_l+0x5a4>
 8008754:	2400      	movs	r4, #0
 8008756:	46a0      	mov	r8, r4
 8008758:	940b      	str	r4, [sp, #44]	@ 0x2c
 800875a:	46a1      	mov	r9, r4
 800875c:	9a05      	ldr	r2, [sp, #20]
 800875e:	2322      	movs	r3, #34	@ 0x22
 8008760:	f04f 0a00 	mov.w	sl, #0
 8008764:	f04f 0b00 	mov.w	fp, #0
 8008768:	6013      	str	r3, [r2, #0]
 800876a:	e76b      	b.n	8008644 <_strtod_l+0x454>
 800876c:	0800cbe7 	.word	0x0800cbe7
 8008770:	0800cdb0 	.word	0x0800cdb0
 8008774:	0800cbdf 	.word	0x0800cbdf
 8008778:	0800cc5a 	.word	0x0800cc5a
 800877c:	0800cc56 	.word	0x0800cc56
 8008780:	0800ce38 	.word	0x0800ce38
 8008784:	0800ce10 	.word	0x0800ce10
 8008788:	7ff00000 	.word	0x7ff00000
 800878c:	7ca00000 	.word	0x7ca00000
 8008790:	7fefffff 	.word	0x7fefffff
 8008794:	f014 0310 	ands.w	r3, r4, #16
 8008798:	bf18      	it	ne
 800879a:	236a      	movne	r3, #106	@ 0x6a
 800879c:	4ea9      	ldr	r6, [pc, #676]	@ (8008a44 <_strtod_l+0x854>)
 800879e:	9308      	str	r3, [sp, #32]
 80087a0:	4650      	mov	r0, sl
 80087a2:	4659      	mov	r1, fp
 80087a4:	2300      	movs	r3, #0
 80087a6:	07e7      	lsls	r7, r4, #31
 80087a8:	d504      	bpl.n	80087b4 <_strtod_l+0x5c4>
 80087aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80087ae:	f7f7 ff2b 	bl	8000608 <__aeabi_dmul>
 80087b2:	2301      	movs	r3, #1
 80087b4:	1064      	asrs	r4, r4, #1
 80087b6:	f106 0608 	add.w	r6, r6, #8
 80087ba:	d1f4      	bne.n	80087a6 <_strtod_l+0x5b6>
 80087bc:	b10b      	cbz	r3, 80087c2 <_strtod_l+0x5d2>
 80087be:	4682      	mov	sl, r0
 80087c0:	468b      	mov	fp, r1
 80087c2:	9b08      	ldr	r3, [sp, #32]
 80087c4:	b1b3      	cbz	r3, 80087f4 <_strtod_l+0x604>
 80087c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80087ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	4659      	mov	r1, fp
 80087d2:	dd0f      	ble.n	80087f4 <_strtod_l+0x604>
 80087d4:	2b1f      	cmp	r3, #31
 80087d6:	dd56      	ble.n	8008886 <_strtod_l+0x696>
 80087d8:	2b34      	cmp	r3, #52	@ 0x34
 80087da:	bfde      	ittt	le
 80087dc:	f04f 33ff 	movle.w	r3, #4294967295
 80087e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80087e4:	4093      	lslle	r3, r2
 80087e6:	f04f 0a00 	mov.w	sl, #0
 80087ea:	bfcc      	ite	gt
 80087ec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80087f0:	ea03 0b01 	andle.w	fp, r3, r1
 80087f4:	2200      	movs	r2, #0
 80087f6:	2300      	movs	r3, #0
 80087f8:	4650      	mov	r0, sl
 80087fa:	4659      	mov	r1, fp
 80087fc:	f7f8 f96c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008800:	2800      	cmp	r0, #0
 8008802:	d1a7      	bne.n	8008754 <_strtod_l+0x564>
 8008804:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008806:	9300      	str	r3, [sp, #0]
 8008808:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800880a:	9805      	ldr	r0, [sp, #20]
 800880c:	462b      	mov	r3, r5
 800880e:	464a      	mov	r2, r9
 8008810:	f002 fe7e 	bl	800b510 <__s2b>
 8008814:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008816:	2800      	cmp	r0, #0
 8008818:	f43f af09 	beq.w	800862e <_strtod_l+0x43e>
 800881c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800881e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008820:	2a00      	cmp	r2, #0
 8008822:	eba3 0308 	sub.w	r3, r3, r8
 8008826:	bfa8      	it	ge
 8008828:	2300      	movge	r3, #0
 800882a:	9312      	str	r3, [sp, #72]	@ 0x48
 800882c:	2400      	movs	r4, #0
 800882e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008832:	9316      	str	r3, [sp, #88]	@ 0x58
 8008834:	46a0      	mov	r8, r4
 8008836:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008838:	9805      	ldr	r0, [sp, #20]
 800883a:	6859      	ldr	r1, [r3, #4]
 800883c:	f002 fdc0 	bl	800b3c0 <_Balloc>
 8008840:	4681      	mov	r9, r0
 8008842:	2800      	cmp	r0, #0
 8008844:	f43f aef7 	beq.w	8008636 <_strtod_l+0x446>
 8008848:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800884a:	691a      	ldr	r2, [r3, #16]
 800884c:	3202      	adds	r2, #2
 800884e:	f103 010c 	add.w	r1, r3, #12
 8008852:	0092      	lsls	r2, r2, #2
 8008854:	300c      	adds	r0, #12
 8008856:	f001 fad2 	bl	8009dfe <memcpy>
 800885a:	ec4b ab10 	vmov	d0, sl, fp
 800885e:	9805      	ldr	r0, [sp, #20]
 8008860:	aa1c      	add	r2, sp, #112	@ 0x70
 8008862:	a91b      	add	r1, sp, #108	@ 0x6c
 8008864:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008868:	f003 f986 	bl	800bb78 <__d2b>
 800886c:	901a      	str	r0, [sp, #104]	@ 0x68
 800886e:	2800      	cmp	r0, #0
 8008870:	f43f aee1 	beq.w	8008636 <_strtod_l+0x446>
 8008874:	9805      	ldr	r0, [sp, #20]
 8008876:	2101      	movs	r1, #1
 8008878:	f002 fee0 	bl	800b63c <__i2b>
 800887c:	4680      	mov	r8, r0
 800887e:	b948      	cbnz	r0, 8008894 <_strtod_l+0x6a4>
 8008880:	f04f 0800 	mov.w	r8, #0
 8008884:	e6d7      	b.n	8008636 <_strtod_l+0x446>
 8008886:	f04f 32ff 	mov.w	r2, #4294967295
 800888a:	fa02 f303 	lsl.w	r3, r2, r3
 800888e:	ea03 0a0a 	and.w	sl, r3, sl
 8008892:	e7af      	b.n	80087f4 <_strtod_l+0x604>
 8008894:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008896:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008898:	2d00      	cmp	r5, #0
 800889a:	bfab      	itete	ge
 800889c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800889e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80088a0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80088a2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80088a4:	bfac      	ite	ge
 80088a6:	18ef      	addge	r7, r5, r3
 80088a8:	1b5e      	sublt	r6, r3, r5
 80088aa:	9b08      	ldr	r3, [sp, #32]
 80088ac:	1aed      	subs	r5, r5, r3
 80088ae:	4415      	add	r5, r2
 80088b0:	4b65      	ldr	r3, [pc, #404]	@ (8008a48 <_strtod_l+0x858>)
 80088b2:	3d01      	subs	r5, #1
 80088b4:	429d      	cmp	r5, r3
 80088b6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80088ba:	da50      	bge.n	800895e <_strtod_l+0x76e>
 80088bc:	1b5b      	subs	r3, r3, r5
 80088be:	2b1f      	cmp	r3, #31
 80088c0:	eba2 0203 	sub.w	r2, r2, r3
 80088c4:	f04f 0101 	mov.w	r1, #1
 80088c8:	dc3d      	bgt.n	8008946 <_strtod_l+0x756>
 80088ca:	fa01 f303 	lsl.w	r3, r1, r3
 80088ce:	9313      	str	r3, [sp, #76]	@ 0x4c
 80088d0:	2300      	movs	r3, #0
 80088d2:	9310      	str	r3, [sp, #64]	@ 0x40
 80088d4:	18bd      	adds	r5, r7, r2
 80088d6:	9b08      	ldr	r3, [sp, #32]
 80088d8:	42af      	cmp	r7, r5
 80088da:	4416      	add	r6, r2
 80088dc:	441e      	add	r6, r3
 80088de:	463b      	mov	r3, r7
 80088e0:	bfa8      	it	ge
 80088e2:	462b      	movge	r3, r5
 80088e4:	42b3      	cmp	r3, r6
 80088e6:	bfa8      	it	ge
 80088e8:	4633      	movge	r3, r6
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	bfc2      	ittt	gt
 80088ee:	1aed      	subgt	r5, r5, r3
 80088f0:	1af6      	subgt	r6, r6, r3
 80088f2:	1aff      	subgt	r7, r7, r3
 80088f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	dd16      	ble.n	8008928 <_strtod_l+0x738>
 80088fa:	4641      	mov	r1, r8
 80088fc:	9805      	ldr	r0, [sp, #20]
 80088fe:	461a      	mov	r2, r3
 8008900:	f002 ff54 	bl	800b7ac <__pow5mult>
 8008904:	4680      	mov	r8, r0
 8008906:	2800      	cmp	r0, #0
 8008908:	d0ba      	beq.n	8008880 <_strtod_l+0x690>
 800890a:	4601      	mov	r1, r0
 800890c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800890e:	9805      	ldr	r0, [sp, #20]
 8008910:	f002 feaa 	bl	800b668 <__multiply>
 8008914:	900a      	str	r0, [sp, #40]	@ 0x28
 8008916:	2800      	cmp	r0, #0
 8008918:	f43f ae8d 	beq.w	8008636 <_strtod_l+0x446>
 800891c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800891e:	9805      	ldr	r0, [sp, #20]
 8008920:	f002 fd8e 	bl	800b440 <_Bfree>
 8008924:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008926:	931a      	str	r3, [sp, #104]	@ 0x68
 8008928:	2d00      	cmp	r5, #0
 800892a:	dc1d      	bgt.n	8008968 <_strtod_l+0x778>
 800892c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800892e:	2b00      	cmp	r3, #0
 8008930:	dd23      	ble.n	800897a <_strtod_l+0x78a>
 8008932:	4649      	mov	r1, r9
 8008934:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008936:	9805      	ldr	r0, [sp, #20]
 8008938:	f002 ff38 	bl	800b7ac <__pow5mult>
 800893c:	4681      	mov	r9, r0
 800893e:	b9e0      	cbnz	r0, 800897a <_strtod_l+0x78a>
 8008940:	f04f 0900 	mov.w	r9, #0
 8008944:	e677      	b.n	8008636 <_strtod_l+0x446>
 8008946:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800894a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800894e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008952:	35e2      	adds	r5, #226	@ 0xe2
 8008954:	fa01 f305 	lsl.w	r3, r1, r5
 8008958:	9310      	str	r3, [sp, #64]	@ 0x40
 800895a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800895c:	e7ba      	b.n	80088d4 <_strtod_l+0x6e4>
 800895e:	2300      	movs	r3, #0
 8008960:	9310      	str	r3, [sp, #64]	@ 0x40
 8008962:	2301      	movs	r3, #1
 8008964:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008966:	e7b5      	b.n	80088d4 <_strtod_l+0x6e4>
 8008968:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800896a:	9805      	ldr	r0, [sp, #20]
 800896c:	462a      	mov	r2, r5
 800896e:	f002 ff77 	bl	800b860 <__lshift>
 8008972:	901a      	str	r0, [sp, #104]	@ 0x68
 8008974:	2800      	cmp	r0, #0
 8008976:	d1d9      	bne.n	800892c <_strtod_l+0x73c>
 8008978:	e65d      	b.n	8008636 <_strtod_l+0x446>
 800897a:	2e00      	cmp	r6, #0
 800897c:	dd07      	ble.n	800898e <_strtod_l+0x79e>
 800897e:	4649      	mov	r1, r9
 8008980:	9805      	ldr	r0, [sp, #20]
 8008982:	4632      	mov	r2, r6
 8008984:	f002 ff6c 	bl	800b860 <__lshift>
 8008988:	4681      	mov	r9, r0
 800898a:	2800      	cmp	r0, #0
 800898c:	d0d8      	beq.n	8008940 <_strtod_l+0x750>
 800898e:	2f00      	cmp	r7, #0
 8008990:	dd08      	ble.n	80089a4 <_strtod_l+0x7b4>
 8008992:	4641      	mov	r1, r8
 8008994:	9805      	ldr	r0, [sp, #20]
 8008996:	463a      	mov	r2, r7
 8008998:	f002 ff62 	bl	800b860 <__lshift>
 800899c:	4680      	mov	r8, r0
 800899e:	2800      	cmp	r0, #0
 80089a0:	f43f ae49 	beq.w	8008636 <_strtod_l+0x446>
 80089a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80089a6:	9805      	ldr	r0, [sp, #20]
 80089a8:	464a      	mov	r2, r9
 80089aa:	f002 ffe1 	bl	800b970 <__mdiff>
 80089ae:	4604      	mov	r4, r0
 80089b0:	2800      	cmp	r0, #0
 80089b2:	f43f ae40 	beq.w	8008636 <_strtod_l+0x446>
 80089b6:	68c3      	ldr	r3, [r0, #12]
 80089b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80089ba:	2300      	movs	r3, #0
 80089bc:	60c3      	str	r3, [r0, #12]
 80089be:	4641      	mov	r1, r8
 80089c0:	f002 ffba 	bl	800b938 <__mcmp>
 80089c4:	2800      	cmp	r0, #0
 80089c6:	da45      	bge.n	8008a54 <_strtod_l+0x864>
 80089c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089ca:	ea53 030a 	orrs.w	r3, r3, sl
 80089ce:	d16b      	bne.n	8008aa8 <_strtod_l+0x8b8>
 80089d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d167      	bne.n	8008aa8 <_strtod_l+0x8b8>
 80089d8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80089dc:	0d1b      	lsrs	r3, r3, #20
 80089de:	051b      	lsls	r3, r3, #20
 80089e0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80089e4:	d960      	bls.n	8008aa8 <_strtod_l+0x8b8>
 80089e6:	6963      	ldr	r3, [r4, #20]
 80089e8:	b913      	cbnz	r3, 80089f0 <_strtod_l+0x800>
 80089ea:	6923      	ldr	r3, [r4, #16]
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	dd5b      	ble.n	8008aa8 <_strtod_l+0x8b8>
 80089f0:	4621      	mov	r1, r4
 80089f2:	2201      	movs	r2, #1
 80089f4:	9805      	ldr	r0, [sp, #20]
 80089f6:	f002 ff33 	bl	800b860 <__lshift>
 80089fa:	4641      	mov	r1, r8
 80089fc:	4604      	mov	r4, r0
 80089fe:	f002 ff9b 	bl	800b938 <__mcmp>
 8008a02:	2800      	cmp	r0, #0
 8008a04:	dd50      	ble.n	8008aa8 <_strtod_l+0x8b8>
 8008a06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008a0a:	9a08      	ldr	r2, [sp, #32]
 8008a0c:	0d1b      	lsrs	r3, r3, #20
 8008a0e:	051b      	lsls	r3, r3, #20
 8008a10:	2a00      	cmp	r2, #0
 8008a12:	d06a      	beq.n	8008aea <_strtod_l+0x8fa>
 8008a14:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008a18:	d867      	bhi.n	8008aea <_strtod_l+0x8fa>
 8008a1a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008a1e:	f67f ae9d 	bls.w	800875c <_strtod_l+0x56c>
 8008a22:	4b0a      	ldr	r3, [pc, #40]	@ (8008a4c <_strtod_l+0x85c>)
 8008a24:	4650      	mov	r0, sl
 8008a26:	4659      	mov	r1, fp
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f7f7 fded 	bl	8000608 <__aeabi_dmul>
 8008a2e:	4b08      	ldr	r3, [pc, #32]	@ (8008a50 <_strtod_l+0x860>)
 8008a30:	400b      	ands	r3, r1
 8008a32:	4682      	mov	sl, r0
 8008a34:	468b      	mov	fp, r1
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	f47f ae08 	bne.w	800864c <_strtod_l+0x45c>
 8008a3c:	9a05      	ldr	r2, [sp, #20]
 8008a3e:	2322      	movs	r3, #34	@ 0x22
 8008a40:	6013      	str	r3, [r2, #0]
 8008a42:	e603      	b.n	800864c <_strtod_l+0x45c>
 8008a44:	0800cdd8 	.word	0x0800cdd8
 8008a48:	fffffc02 	.word	0xfffffc02
 8008a4c:	39500000 	.word	0x39500000
 8008a50:	7ff00000 	.word	0x7ff00000
 8008a54:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008a58:	d165      	bne.n	8008b26 <_strtod_l+0x936>
 8008a5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008a5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a60:	b35a      	cbz	r2, 8008aba <_strtod_l+0x8ca>
 8008a62:	4a9f      	ldr	r2, [pc, #636]	@ (8008ce0 <_strtod_l+0xaf0>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d12b      	bne.n	8008ac0 <_strtod_l+0x8d0>
 8008a68:	9b08      	ldr	r3, [sp, #32]
 8008a6a:	4651      	mov	r1, sl
 8008a6c:	b303      	cbz	r3, 8008ab0 <_strtod_l+0x8c0>
 8008a6e:	4b9d      	ldr	r3, [pc, #628]	@ (8008ce4 <_strtod_l+0xaf4>)
 8008a70:	465a      	mov	r2, fp
 8008a72:	4013      	ands	r3, r2
 8008a74:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008a78:	f04f 32ff 	mov.w	r2, #4294967295
 8008a7c:	d81b      	bhi.n	8008ab6 <_strtod_l+0x8c6>
 8008a7e:	0d1b      	lsrs	r3, r3, #20
 8008a80:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008a84:	fa02 f303 	lsl.w	r3, r2, r3
 8008a88:	4299      	cmp	r1, r3
 8008a8a:	d119      	bne.n	8008ac0 <_strtod_l+0x8d0>
 8008a8c:	4b96      	ldr	r3, [pc, #600]	@ (8008ce8 <_strtod_l+0xaf8>)
 8008a8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d102      	bne.n	8008a9a <_strtod_l+0x8aa>
 8008a94:	3101      	adds	r1, #1
 8008a96:	f43f adce 	beq.w	8008636 <_strtod_l+0x446>
 8008a9a:	4b92      	ldr	r3, [pc, #584]	@ (8008ce4 <_strtod_l+0xaf4>)
 8008a9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a9e:	401a      	ands	r2, r3
 8008aa0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008aa4:	f04f 0a00 	mov.w	sl, #0
 8008aa8:	9b08      	ldr	r3, [sp, #32]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d1b9      	bne.n	8008a22 <_strtod_l+0x832>
 8008aae:	e5cd      	b.n	800864c <_strtod_l+0x45c>
 8008ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ab4:	e7e8      	b.n	8008a88 <_strtod_l+0x898>
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	e7e6      	b.n	8008a88 <_strtod_l+0x898>
 8008aba:	ea53 030a 	orrs.w	r3, r3, sl
 8008abe:	d0a2      	beq.n	8008a06 <_strtod_l+0x816>
 8008ac0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008ac2:	b1db      	cbz	r3, 8008afc <_strtod_l+0x90c>
 8008ac4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ac6:	4213      	tst	r3, r2
 8008ac8:	d0ee      	beq.n	8008aa8 <_strtod_l+0x8b8>
 8008aca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008acc:	9a08      	ldr	r2, [sp, #32]
 8008ace:	4650      	mov	r0, sl
 8008ad0:	4659      	mov	r1, fp
 8008ad2:	b1bb      	cbz	r3, 8008b04 <_strtod_l+0x914>
 8008ad4:	f7ff fb6e 	bl	80081b4 <sulp>
 8008ad8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008adc:	ec53 2b10 	vmov	r2, r3, d0
 8008ae0:	f7f7 fbdc 	bl	800029c <__adddf3>
 8008ae4:	4682      	mov	sl, r0
 8008ae6:	468b      	mov	fp, r1
 8008ae8:	e7de      	b.n	8008aa8 <_strtod_l+0x8b8>
 8008aea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008aee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008af2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008af6:	f04f 3aff 	mov.w	sl, #4294967295
 8008afa:	e7d5      	b.n	8008aa8 <_strtod_l+0x8b8>
 8008afc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008afe:	ea13 0f0a 	tst.w	r3, sl
 8008b02:	e7e1      	b.n	8008ac8 <_strtod_l+0x8d8>
 8008b04:	f7ff fb56 	bl	80081b4 <sulp>
 8008b08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b0c:	ec53 2b10 	vmov	r2, r3, d0
 8008b10:	f7f7 fbc2 	bl	8000298 <__aeabi_dsub>
 8008b14:	2200      	movs	r2, #0
 8008b16:	2300      	movs	r3, #0
 8008b18:	4682      	mov	sl, r0
 8008b1a:	468b      	mov	fp, r1
 8008b1c:	f7f7 ffdc 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b20:	2800      	cmp	r0, #0
 8008b22:	d0c1      	beq.n	8008aa8 <_strtod_l+0x8b8>
 8008b24:	e61a      	b.n	800875c <_strtod_l+0x56c>
 8008b26:	4641      	mov	r1, r8
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f003 f87d 	bl	800bc28 <__ratio>
 8008b2e:	ec57 6b10 	vmov	r6, r7, d0
 8008b32:	2200      	movs	r2, #0
 8008b34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008b38:	4630      	mov	r0, r6
 8008b3a:	4639      	mov	r1, r7
 8008b3c:	f7f7 ffe0 	bl	8000b00 <__aeabi_dcmple>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	d06f      	beq.n	8008c24 <_strtod_l+0xa34>
 8008b44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d17a      	bne.n	8008c40 <_strtod_l+0xa50>
 8008b4a:	f1ba 0f00 	cmp.w	sl, #0
 8008b4e:	d158      	bne.n	8008c02 <_strtod_l+0xa12>
 8008b50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d15a      	bne.n	8008c10 <_strtod_l+0xa20>
 8008b5a:	4b64      	ldr	r3, [pc, #400]	@ (8008cec <_strtod_l+0xafc>)
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	4630      	mov	r0, r6
 8008b60:	4639      	mov	r1, r7
 8008b62:	f7f7 ffc3 	bl	8000aec <__aeabi_dcmplt>
 8008b66:	2800      	cmp	r0, #0
 8008b68:	d159      	bne.n	8008c1e <_strtod_l+0xa2e>
 8008b6a:	4630      	mov	r0, r6
 8008b6c:	4639      	mov	r1, r7
 8008b6e:	4b60      	ldr	r3, [pc, #384]	@ (8008cf0 <_strtod_l+0xb00>)
 8008b70:	2200      	movs	r2, #0
 8008b72:	f7f7 fd49 	bl	8000608 <__aeabi_dmul>
 8008b76:	4606      	mov	r6, r0
 8008b78:	460f      	mov	r7, r1
 8008b7a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008b7e:	9606      	str	r6, [sp, #24]
 8008b80:	9307      	str	r3, [sp, #28]
 8008b82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008b86:	4d57      	ldr	r5, [pc, #348]	@ (8008ce4 <_strtod_l+0xaf4>)
 8008b88:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008b8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b8e:	401d      	ands	r5, r3
 8008b90:	4b58      	ldr	r3, [pc, #352]	@ (8008cf4 <_strtod_l+0xb04>)
 8008b92:	429d      	cmp	r5, r3
 8008b94:	f040 80b2 	bne.w	8008cfc <_strtod_l+0xb0c>
 8008b98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b9a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008b9e:	ec4b ab10 	vmov	d0, sl, fp
 8008ba2:	f002 ff79 	bl	800ba98 <__ulp>
 8008ba6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008baa:	ec51 0b10 	vmov	r0, r1, d0
 8008bae:	f7f7 fd2b 	bl	8000608 <__aeabi_dmul>
 8008bb2:	4652      	mov	r2, sl
 8008bb4:	465b      	mov	r3, fp
 8008bb6:	f7f7 fb71 	bl	800029c <__adddf3>
 8008bba:	460b      	mov	r3, r1
 8008bbc:	4949      	ldr	r1, [pc, #292]	@ (8008ce4 <_strtod_l+0xaf4>)
 8008bbe:	4a4e      	ldr	r2, [pc, #312]	@ (8008cf8 <_strtod_l+0xb08>)
 8008bc0:	4019      	ands	r1, r3
 8008bc2:	4291      	cmp	r1, r2
 8008bc4:	4682      	mov	sl, r0
 8008bc6:	d942      	bls.n	8008c4e <_strtod_l+0xa5e>
 8008bc8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008bca:	4b47      	ldr	r3, [pc, #284]	@ (8008ce8 <_strtod_l+0xaf8>)
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d103      	bne.n	8008bd8 <_strtod_l+0x9e8>
 8008bd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	f43f ad2f 	beq.w	8008636 <_strtod_l+0x446>
 8008bd8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008ce8 <_strtod_l+0xaf8>
 8008bdc:	f04f 3aff 	mov.w	sl, #4294967295
 8008be0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008be2:	9805      	ldr	r0, [sp, #20]
 8008be4:	f002 fc2c 	bl	800b440 <_Bfree>
 8008be8:	9805      	ldr	r0, [sp, #20]
 8008bea:	4649      	mov	r1, r9
 8008bec:	f002 fc28 	bl	800b440 <_Bfree>
 8008bf0:	9805      	ldr	r0, [sp, #20]
 8008bf2:	4641      	mov	r1, r8
 8008bf4:	f002 fc24 	bl	800b440 <_Bfree>
 8008bf8:	9805      	ldr	r0, [sp, #20]
 8008bfa:	4621      	mov	r1, r4
 8008bfc:	f002 fc20 	bl	800b440 <_Bfree>
 8008c00:	e619      	b.n	8008836 <_strtod_l+0x646>
 8008c02:	f1ba 0f01 	cmp.w	sl, #1
 8008c06:	d103      	bne.n	8008c10 <_strtod_l+0xa20>
 8008c08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	f43f ada6 	beq.w	800875c <_strtod_l+0x56c>
 8008c10:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008cc0 <_strtod_l+0xad0>
 8008c14:	4f35      	ldr	r7, [pc, #212]	@ (8008cec <_strtod_l+0xafc>)
 8008c16:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008c1a:	2600      	movs	r6, #0
 8008c1c:	e7b1      	b.n	8008b82 <_strtod_l+0x992>
 8008c1e:	4f34      	ldr	r7, [pc, #208]	@ (8008cf0 <_strtod_l+0xb00>)
 8008c20:	2600      	movs	r6, #0
 8008c22:	e7aa      	b.n	8008b7a <_strtod_l+0x98a>
 8008c24:	4b32      	ldr	r3, [pc, #200]	@ (8008cf0 <_strtod_l+0xb00>)
 8008c26:	4630      	mov	r0, r6
 8008c28:	4639      	mov	r1, r7
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	f7f7 fcec 	bl	8000608 <__aeabi_dmul>
 8008c30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c32:	4606      	mov	r6, r0
 8008c34:	460f      	mov	r7, r1
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d09f      	beq.n	8008b7a <_strtod_l+0x98a>
 8008c3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008c3e:	e7a0      	b.n	8008b82 <_strtod_l+0x992>
 8008c40:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008cc8 <_strtod_l+0xad8>
 8008c44:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008c48:	ec57 6b17 	vmov	r6, r7, d7
 8008c4c:	e799      	b.n	8008b82 <_strtod_l+0x992>
 8008c4e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008c52:	9b08      	ldr	r3, [sp, #32]
 8008c54:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1c1      	bne.n	8008be0 <_strtod_l+0x9f0>
 8008c5c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008c60:	0d1b      	lsrs	r3, r3, #20
 8008c62:	051b      	lsls	r3, r3, #20
 8008c64:	429d      	cmp	r5, r3
 8008c66:	d1bb      	bne.n	8008be0 <_strtod_l+0x9f0>
 8008c68:	4630      	mov	r0, r6
 8008c6a:	4639      	mov	r1, r7
 8008c6c:	f7f8 f82c 	bl	8000cc8 <__aeabi_d2lz>
 8008c70:	f7f7 fc9c 	bl	80005ac <__aeabi_l2d>
 8008c74:	4602      	mov	r2, r0
 8008c76:	460b      	mov	r3, r1
 8008c78:	4630      	mov	r0, r6
 8008c7a:	4639      	mov	r1, r7
 8008c7c:	f7f7 fb0c 	bl	8000298 <__aeabi_dsub>
 8008c80:	460b      	mov	r3, r1
 8008c82:	4602      	mov	r2, r0
 8008c84:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008c88:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008c8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c8e:	ea46 060a 	orr.w	r6, r6, sl
 8008c92:	431e      	orrs	r6, r3
 8008c94:	d06f      	beq.n	8008d76 <_strtod_l+0xb86>
 8008c96:	a30e      	add	r3, pc, #56	@ (adr r3, 8008cd0 <_strtod_l+0xae0>)
 8008c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c9c:	f7f7 ff26 	bl	8000aec <__aeabi_dcmplt>
 8008ca0:	2800      	cmp	r0, #0
 8008ca2:	f47f acd3 	bne.w	800864c <_strtod_l+0x45c>
 8008ca6:	a30c      	add	r3, pc, #48	@ (adr r3, 8008cd8 <_strtod_l+0xae8>)
 8008ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008cb0:	f7f7 ff3a 	bl	8000b28 <__aeabi_dcmpgt>
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	d093      	beq.n	8008be0 <_strtod_l+0x9f0>
 8008cb8:	e4c8      	b.n	800864c <_strtod_l+0x45c>
 8008cba:	bf00      	nop
 8008cbc:	f3af 8000 	nop.w
 8008cc0:	00000000 	.word	0x00000000
 8008cc4:	bff00000 	.word	0xbff00000
 8008cc8:	00000000 	.word	0x00000000
 8008ccc:	3ff00000 	.word	0x3ff00000
 8008cd0:	94a03595 	.word	0x94a03595
 8008cd4:	3fdfffff 	.word	0x3fdfffff
 8008cd8:	35afe535 	.word	0x35afe535
 8008cdc:	3fe00000 	.word	0x3fe00000
 8008ce0:	000fffff 	.word	0x000fffff
 8008ce4:	7ff00000 	.word	0x7ff00000
 8008ce8:	7fefffff 	.word	0x7fefffff
 8008cec:	3ff00000 	.word	0x3ff00000
 8008cf0:	3fe00000 	.word	0x3fe00000
 8008cf4:	7fe00000 	.word	0x7fe00000
 8008cf8:	7c9fffff 	.word	0x7c9fffff
 8008cfc:	9b08      	ldr	r3, [sp, #32]
 8008cfe:	b323      	cbz	r3, 8008d4a <_strtod_l+0xb5a>
 8008d00:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008d04:	d821      	bhi.n	8008d4a <_strtod_l+0xb5a>
 8008d06:	a328      	add	r3, pc, #160	@ (adr r3, 8008da8 <_strtod_l+0xbb8>)
 8008d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d0c:	4630      	mov	r0, r6
 8008d0e:	4639      	mov	r1, r7
 8008d10:	f7f7 fef6 	bl	8000b00 <__aeabi_dcmple>
 8008d14:	b1a0      	cbz	r0, 8008d40 <_strtod_l+0xb50>
 8008d16:	4639      	mov	r1, r7
 8008d18:	4630      	mov	r0, r6
 8008d1a:	f7f7 ff4d 	bl	8000bb8 <__aeabi_d2uiz>
 8008d1e:	2801      	cmp	r0, #1
 8008d20:	bf38      	it	cc
 8008d22:	2001      	movcc	r0, #1
 8008d24:	f7f7 fbf6 	bl	8000514 <__aeabi_ui2d>
 8008d28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d2a:	4606      	mov	r6, r0
 8008d2c:	460f      	mov	r7, r1
 8008d2e:	b9fb      	cbnz	r3, 8008d70 <_strtod_l+0xb80>
 8008d30:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008d34:	9014      	str	r0, [sp, #80]	@ 0x50
 8008d36:	9315      	str	r3, [sp, #84]	@ 0x54
 8008d38:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008d3c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008d40:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008d42:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008d46:	1b5b      	subs	r3, r3, r5
 8008d48:	9311      	str	r3, [sp, #68]	@ 0x44
 8008d4a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008d4e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008d52:	f002 fea1 	bl	800ba98 <__ulp>
 8008d56:	4650      	mov	r0, sl
 8008d58:	ec53 2b10 	vmov	r2, r3, d0
 8008d5c:	4659      	mov	r1, fp
 8008d5e:	f7f7 fc53 	bl	8000608 <__aeabi_dmul>
 8008d62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008d66:	f7f7 fa99 	bl	800029c <__adddf3>
 8008d6a:	4682      	mov	sl, r0
 8008d6c:	468b      	mov	fp, r1
 8008d6e:	e770      	b.n	8008c52 <_strtod_l+0xa62>
 8008d70:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008d74:	e7e0      	b.n	8008d38 <_strtod_l+0xb48>
 8008d76:	a30e      	add	r3, pc, #56	@ (adr r3, 8008db0 <_strtod_l+0xbc0>)
 8008d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7c:	f7f7 feb6 	bl	8000aec <__aeabi_dcmplt>
 8008d80:	e798      	b.n	8008cb4 <_strtod_l+0xac4>
 8008d82:	2300      	movs	r3, #0
 8008d84:	930e      	str	r3, [sp, #56]	@ 0x38
 8008d86:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008d88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d8a:	6013      	str	r3, [r2, #0]
 8008d8c:	f7ff ba6d 	b.w	800826a <_strtod_l+0x7a>
 8008d90:	2a65      	cmp	r2, #101	@ 0x65
 8008d92:	f43f ab68 	beq.w	8008466 <_strtod_l+0x276>
 8008d96:	2a45      	cmp	r2, #69	@ 0x45
 8008d98:	f43f ab65 	beq.w	8008466 <_strtod_l+0x276>
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	f7ff bba0 	b.w	80084e2 <_strtod_l+0x2f2>
 8008da2:	bf00      	nop
 8008da4:	f3af 8000 	nop.w
 8008da8:	ffc00000 	.word	0xffc00000
 8008dac:	41dfffff 	.word	0x41dfffff
 8008db0:	94a03595 	.word	0x94a03595
 8008db4:	3fcfffff 	.word	0x3fcfffff

08008db8 <_strtod_r>:
 8008db8:	4b01      	ldr	r3, [pc, #4]	@ (8008dc0 <_strtod_r+0x8>)
 8008dba:	f7ff ba19 	b.w	80081f0 <_strtod_l>
 8008dbe:	bf00      	nop
 8008dc0:	2000009c 	.word	0x2000009c

08008dc4 <__cvt>:
 8008dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008dc8:	ec57 6b10 	vmov	r6, r7, d0
 8008dcc:	2f00      	cmp	r7, #0
 8008dce:	460c      	mov	r4, r1
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	463b      	mov	r3, r7
 8008dd4:	bfbb      	ittet	lt
 8008dd6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008dda:	461f      	movlt	r7, r3
 8008ddc:	2300      	movge	r3, #0
 8008dde:	232d      	movlt	r3, #45	@ 0x2d
 8008de0:	700b      	strb	r3, [r1, #0]
 8008de2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008de4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008de8:	4691      	mov	r9, r2
 8008dea:	f023 0820 	bic.w	r8, r3, #32
 8008dee:	bfbc      	itt	lt
 8008df0:	4632      	movlt	r2, r6
 8008df2:	4616      	movlt	r6, r2
 8008df4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008df8:	d005      	beq.n	8008e06 <__cvt+0x42>
 8008dfa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008dfe:	d100      	bne.n	8008e02 <__cvt+0x3e>
 8008e00:	3401      	adds	r4, #1
 8008e02:	2102      	movs	r1, #2
 8008e04:	e000      	b.n	8008e08 <__cvt+0x44>
 8008e06:	2103      	movs	r1, #3
 8008e08:	ab03      	add	r3, sp, #12
 8008e0a:	9301      	str	r3, [sp, #4]
 8008e0c:	ab02      	add	r3, sp, #8
 8008e0e:	9300      	str	r3, [sp, #0]
 8008e10:	ec47 6b10 	vmov	d0, r6, r7
 8008e14:	4653      	mov	r3, sl
 8008e16:	4622      	mov	r2, r4
 8008e18:	f001 f8b6 	bl	8009f88 <_dtoa_r>
 8008e1c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008e20:	4605      	mov	r5, r0
 8008e22:	d119      	bne.n	8008e58 <__cvt+0x94>
 8008e24:	f019 0f01 	tst.w	r9, #1
 8008e28:	d00e      	beq.n	8008e48 <__cvt+0x84>
 8008e2a:	eb00 0904 	add.w	r9, r0, r4
 8008e2e:	2200      	movs	r2, #0
 8008e30:	2300      	movs	r3, #0
 8008e32:	4630      	mov	r0, r6
 8008e34:	4639      	mov	r1, r7
 8008e36:	f7f7 fe4f 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e3a:	b108      	cbz	r0, 8008e40 <__cvt+0x7c>
 8008e3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008e40:	2230      	movs	r2, #48	@ 0x30
 8008e42:	9b03      	ldr	r3, [sp, #12]
 8008e44:	454b      	cmp	r3, r9
 8008e46:	d31e      	bcc.n	8008e86 <__cvt+0xc2>
 8008e48:	9b03      	ldr	r3, [sp, #12]
 8008e4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e4c:	1b5b      	subs	r3, r3, r5
 8008e4e:	4628      	mov	r0, r5
 8008e50:	6013      	str	r3, [r2, #0]
 8008e52:	b004      	add	sp, #16
 8008e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008e5c:	eb00 0904 	add.w	r9, r0, r4
 8008e60:	d1e5      	bne.n	8008e2e <__cvt+0x6a>
 8008e62:	7803      	ldrb	r3, [r0, #0]
 8008e64:	2b30      	cmp	r3, #48	@ 0x30
 8008e66:	d10a      	bne.n	8008e7e <__cvt+0xba>
 8008e68:	2200      	movs	r2, #0
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	4639      	mov	r1, r7
 8008e70:	f7f7 fe32 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e74:	b918      	cbnz	r0, 8008e7e <__cvt+0xba>
 8008e76:	f1c4 0401 	rsb	r4, r4, #1
 8008e7a:	f8ca 4000 	str.w	r4, [sl]
 8008e7e:	f8da 3000 	ldr.w	r3, [sl]
 8008e82:	4499      	add	r9, r3
 8008e84:	e7d3      	b.n	8008e2e <__cvt+0x6a>
 8008e86:	1c59      	adds	r1, r3, #1
 8008e88:	9103      	str	r1, [sp, #12]
 8008e8a:	701a      	strb	r2, [r3, #0]
 8008e8c:	e7d9      	b.n	8008e42 <__cvt+0x7e>

08008e8e <__exponent>:
 8008e8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e90:	2900      	cmp	r1, #0
 8008e92:	bfba      	itte	lt
 8008e94:	4249      	neglt	r1, r1
 8008e96:	232d      	movlt	r3, #45	@ 0x2d
 8008e98:	232b      	movge	r3, #43	@ 0x2b
 8008e9a:	2909      	cmp	r1, #9
 8008e9c:	7002      	strb	r2, [r0, #0]
 8008e9e:	7043      	strb	r3, [r0, #1]
 8008ea0:	dd29      	ble.n	8008ef6 <__exponent+0x68>
 8008ea2:	f10d 0307 	add.w	r3, sp, #7
 8008ea6:	461d      	mov	r5, r3
 8008ea8:	270a      	movs	r7, #10
 8008eaa:	461a      	mov	r2, r3
 8008eac:	fbb1 f6f7 	udiv	r6, r1, r7
 8008eb0:	fb07 1416 	mls	r4, r7, r6, r1
 8008eb4:	3430      	adds	r4, #48	@ 0x30
 8008eb6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008eba:	460c      	mov	r4, r1
 8008ebc:	2c63      	cmp	r4, #99	@ 0x63
 8008ebe:	f103 33ff 	add.w	r3, r3, #4294967295
 8008ec2:	4631      	mov	r1, r6
 8008ec4:	dcf1      	bgt.n	8008eaa <__exponent+0x1c>
 8008ec6:	3130      	adds	r1, #48	@ 0x30
 8008ec8:	1e94      	subs	r4, r2, #2
 8008eca:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008ece:	1c41      	adds	r1, r0, #1
 8008ed0:	4623      	mov	r3, r4
 8008ed2:	42ab      	cmp	r3, r5
 8008ed4:	d30a      	bcc.n	8008eec <__exponent+0x5e>
 8008ed6:	f10d 0309 	add.w	r3, sp, #9
 8008eda:	1a9b      	subs	r3, r3, r2
 8008edc:	42ac      	cmp	r4, r5
 8008ede:	bf88      	it	hi
 8008ee0:	2300      	movhi	r3, #0
 8008ee2:	3302      	adds	r3, #2
 8008ee4:	4403      	add	r3, r0
 8008ee6:	1a18      	subs	r0, r3, r0
 8008ee8:	b003      	add	sp, #12
 8008eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eec:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008ef0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008ef4:	e7ed      	b.n	8008ed2 <__exponent+0x44>
 8008ef6:	2330      	movs	r3, #48	@ 0x30
 8008ef8:	3130      	adds	r1, #48	@ 0x30
 8008efa:	7083      	strb	r3, [r0, #2]
 8008efc:	70c1      	strb	r1, [r0, #3]
 8008efe:	1d03      	adds	r3, r0, #4
 8008f00:	e7f1      	b.n	8008ee6 <__exponent+0x58>
	...

08008f04 <_printf_float>:
 8008f04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f08:	b08d      	sub	sp, #52	@ 0x34
 8008f0a:	460c      	mov	r4, r1
 8008f0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008f10:	4616      	mov	r6, r2
 8008f12:	461f      	mov	r7, r3
 8008f14:	4605      	mov	r5, r0
 8008f16:	f000 fefb 	bl	8009d10 <_localeconv_r>
 8008f1a:	6803      	ldr	r3, [r0, #0]
 8008f1c:	9304      	str	r3, [sp, #16]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7f7 f9ae 	bl	8000280 <strlen>
 8008f24:	2300      	movs	r3, #0
 8008f26:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f28:	f8d8 3000 	ldr.w	r3, [r8]
 8008f2c:	9005      	str	r0, [sp, #20]
 8008f2e:	3307      	adds	r3, #7
 8008f30:	f023 0307 	bic.w	r3, r3, #7
 8008f34:	f103 0208 	add.w	r2, r3, #8
 8008f38:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008f3c:	f8d4 b000 	ldr.w	fp, [r4]
 8008f40:	f8c8 2000 	str.w	r2, [r8]
 8008f44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008f48:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008f4c:	9307      	str	r3, [sp, #28]
 8008f4e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008f52:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008f56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f5a:	4b9c      	ldr	r3, [pc, #624]	@ (80091cc <_printf_float+0x2c8>)
 8008f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f60:	f7f7 fdec 	bl	8000b3c <__aeabi_dcmpun>
 8008f64:	bb70      	cbnz	r0, 8008fc4 <_printf_float+0xc0>
 8008f66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f6a:	4b98      	ldr	r3, [pc, #608]	@ (80091cc <_printf_float+0x2c8>)
 8008f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008f70:	f7f7 fdc6 	bl	8000b00 <__aeabi_dcmple>
 8008f74:	bb30      	cbnz	r0, 8008fc4 <_printf_float+0xc0>
 8008f76:	2200      	movs	r2, #0
 8008f78:	2300      	movs	r3, #0
 8008f7a:	4640      	mov	r0, r8
 8008f7c:	4649      	mov	r1, r9
 8008f7e:	f7f7 fdb5 	bl	8000aec <__aeabi_dcmplt>
 8008f82:	b110      	cbz	r0, 8008f8a <_printf_float+0x86>
 8008f84:	232d      	movs	r3, #45	@ 0x2d
 8008f86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f8a:	4a91      	ldr	r2, [pc, #580]	@ (80091d0 <_printf_float+0x2cc>)
 8008f8c:	4b91      	ldr	r3, [pc, #580]	@ (80091d4 <_printf_float+0x2d0>)
 8008f8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008f92:	bf8c      	ite	hi
 8008f94:	4690      	movhi	r8, r2
 8008f96:	4698      	movls	r8, r3
 8008f98:	2303      	movs	r3, #3
 8008f9a:	6123      	str	r3, [r4, #16]
 8008f9c:	f02b 0304 	bic.w	r3, fp, #4
 8008fa0:	6023      	str	r3, [r4, #0]
 8008fa2:	f04f 0900 	mov.w	r9, #0
 8008fa6:	9700      	str	r7, [sp, #0]
 8008fa8:	4633      	mov	r3, r6
 8008faa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008fac:	4621      	mov	r1, r4
 8008fae:	4628      	mov	r0, r5
 8008fb0:	f000 f9d2 	bl	8009358 <_printf_common>
 8008fb4:	3001      	adds	r0, #1
 8008fb6:	f040 808d 	bne.w	80090d4 <_printf_float+0x1d0>
 8008fba:	f04f 30ff 	mov.w	r0, #4294967295
 8008fbe:	b00d      	add	sp, #52	@ 0x34
 8008fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fc4:	4642      	mov	r2, r8
 8008fc6:	464b      	mov	r3, r9
 8008fc8:	4640      	mov	r0, r8
 8008fca:	4649      	mov	r1, r9
 8008fcc:	f7f7 fdb6 	bl	8000b3c <__aeabi_dcmpun>
 8008fd0:	b140      	cbz	r0, 8008fe4 <_printf_float+0xe0>
 8008fd2:	464b      	mov	r3, r9
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	bfbc      	itt	lt
 8008fd8:	232d      	movlt	r3, #45	@ 0x2d
 8008fda:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008fde:	4a7e      	ldr	r2, [pc, #504]	@ (80091d8 <_printf_float+0x2d4>)
 8008fe0:	4b7e      	ldr	r3, [pc, #504]	@ (80091dc <_printf_float+0x2d8>)
 8008fe2:	e7d4      	b.n	8008f8e <_printf_float+0x8a>
 8008fe4:	6863      	ldr	r3, [r4, #4]
 8008fe6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008fea:	9206      	str	r2, [sp, #24]
 8008fec:	1c5a      	adds	r2, r3, #1
 8008fee:	d13b      	bne.n	8009068 <_printf_float+0x164>
 8008ff0:	2306      	movs	r3, #6
 8008ff2:	6063      	str	r3, [r4, #4]
 8008ff4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	6022      	str	r2, [r4, #0]
 8008ffc:	9303      	str	r3, [sp, #12]
 8008ffe:	ab0a      	add	r3, sp, #40	@ 0x28
 8009000:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009004:	ab09      	add	r3, sp, #36	@ 0x24
 8009006:	9300      	str	r3, [sp, #0]
 8009008:	6861      	ldr	r1, [r4, #4]
 800900a:	ec49 8b10 	vmov	d0, r8, r9
 800900e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009012:	4628      	mov	r0, r5
 8009014:	f7ff fed6 	bl	8008dc4 <__cvt>
 8009018:	9b06      	ldr	r3, [sp, #24]
 800901a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800901c:	2b47      	cmp	r3, #71	@ 0x47
 800901e:	4680      	mov	r8, r0
 8009020:	d129      	bne.n	8009076 <_printf_float+0x172>
 8009022:	1cc8      	adds	r0, r1, #3
 8009024:	db02      	blt.n	800902c <_printf_float+0x128>
 8009026:	6863      	ldr	r3, [r4, #4]
 8009028:	4299      	cmp	r1, r3
 800902a:	dd41      	ble.n	80090b0 <_printf_float+0x1ac>
 800902c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009030:	fa5f fa8a 	uxtb.w	sl, sl
 8009034:	3901      	subs	r1, #1
 8009036:	4652      	mov	r2, sl
 8009038:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800903c:	9109      	str	r1, [sp, #36]	@ 0x24
 800903e:	f7ff ff26 	bl	8008e8e <__exponent>
 8009042:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009044:	1813      	adds	r3, r2, r0
 8009046:	2a01      	cmp	r2, #1
 8009048:	4681      	mov	r9, r0
 800904a:	6123      	str	r3, [r4, #16]
 800904c:	dc02      	bgt.n	8009054 <_printf_float+0x150>
 800904e:	6822      	ldr	r2, [r4, #0]
 8009050:	07d2      	lsls	r2, r2, #31
 8009052:	d501      	bpl.n	8009058 <_printf_float+0x154>
 8009054:	3301      	adds	r3, #1
 8009056:	6123      	str	r3, [r4, #16]
 8009058:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800905c:	2b00      	cmp	r3, #0
 800905e:	d0a2      	beq.n	8008fa6 <_printf_float+0xa2>
 8009060:	232d      	movs	r3, #45	@ 0x2d
 8009062:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009066:	e79e      	b.n	8008fa6 <_printf_float+0xa2>
 8009068:	9a06      	ldr	r2, [sp, #24]
 800906a:	2a47      	cmp	r2, #71	@ 0x47
 800906c:	d1c2      	bne.n	8008ff4 <_printf_float+0xf0>
 800906e:	2b00      	cmp	r3, #0
 8009070:	d1c0      	bne.n	8008ff4 <_printf_float+0xf0>
 8009072:	2301      	movs	r3, #1
 8009074:	e7bd      	b.n	8008ff2 <_printf_float+0xee>
 8009076:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800907a:	d9db      	bls.n	8009034 <_printf_float+0x130>
 800907c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009080:	d118      	bne.n	80090b4 <_printf_float+0x1b0>
 8009082:	2900      	cmp	r1, #0
 8009084:	6863      	ldr	r3, [r4, #4]
 8009086:	dd0b      	ble.n	80090a0 <_printf_float+0x19c>
 8009088:	6121      	str	r1, [r4, #16]
 800908a:	b913      	cbnz	r3, 8009092 <_printf_float+0x18e>
 800908c:	6822      	ldr	r2, [r4, #0]
 800908e:	07d0      	lsls	r0, r2, #31
 8009090:	d502      	bpl.n	8009098 <_printf_float+0x194>
 8009092:	3301      	adds	r3, #1
 8009094:	440b      	add	r3, r1
 8009096:	6123      	str	r3, [r4, #16]
 8009098:	65a1      	str	r1, [r4, #88]	@ 0x58
 800909a:	f04f 0900 	mov.w	r9, #0
 800909e:	e7db      	b.n	8009058 <_printf_float+0x154>
 80090a0:	b913      	cbnz	r3, 80090a8 <_printf_float+0x1a4>
 80090a2:	6822      	ldr	r2, [r4, #0]
 80090a4:	07d2      	lsls	r2, r2, #31
 80090a6:	d501      	bpl.n	80090ac <_printf_float+0x1a8>
 80090a8:	3302      	adds	r3, #2
 80090aa:	e7f4      	b.n	8009096 <_printf_float+0x192>
 80090ac:	2301      	movs	r3, #1
 80090ae:	e7f2      	b.n	8009096 <_printf_float+0x192>
 80090b0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80090b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090b6:	4299      	cmp	r1, r3
 80090b8:	db05      	blt.n	80090c6 <_printf_float+0x1c2>
 80090ba:	6823      	ldr	r3, [r4, #0]
 80090bc:	6121      	str	r1, [r4, #16]
 80090be:	07d8      	lsls	r0, r3, #31
 80090c0:	d5ea      	bpl.n	8009098 <_printf_float+0x194>
 80090c2:	1c4b      	adds	r3, r1, #1
 80090c4:	e7e7      	b.n	8009096 <_printf_float+0x192>
 80090c6:	2900      	cmp	r1, #0
 80090c8:	bfd4      	ite	le
 80090ca:	f1c1 0202 	rsble	r2, r1, #2
 80090ce:	2201      	movgt	r2, #1
 80090d0:	4413      	add	r3, r2
 80090d2:	e7e0      	b.n	8009096 <_printf_float+0x192>
 80090d4:	6823      	ldr	r3, [r4, #0]
 80090d6:	055a      	lsls	r2, r3, #21
 80090d8:	d407      	bmi.n	80090ea <_printf_float+0x1e6>
 80090da:	6923      	ldr	r3, [r4, #16]
 80090dc:	4642      	mov	r2, r8
 80090de:	4631      	mov	r1, r6
 80090e0:	4628      	mov	r0, r5
 80090e2:	47b8      	blx	r7
 80090e4:	3001      	adds	r0, #1
 80090e6:	d12b      	bne.n	8009140 <_printf_float+0x23c>
 80090e8:	e767      	b.n	8008fba <_printf_float+0xb6>
 80090ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80090ee:	f240 80dd 	bls.w	80092ac <_printf_float+0x3a8>
 80090f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80090f6:	2200      	movs	r2, #0
 80090f8:	2300      	movs	r3, #0
 80090fa:	f7f7 fced 	bl	8000ad8 <__aeabi_dcmpeq>
 80090fe:	2800      	cmp	r0, #0
 8009100:	d033      	beq.n	800916a <_printf_float+0x266>
 8009102:	4a37      	ldr	r2, [pc, #220]	@ (80091e0 <_printf_float+0x2dc>)
 8009104:	2301      	movs	r3, #1
 8009106:	4631      	mov	r1, r6
 8009108:	4628      	mov	r0, r5
 800910a:	47b8      	blx	r7
 800910c:	3001      	adds	r0, #1
 800910e:	f43f af54 	beq.w	8008fba <_printf_float+0xb6>
 8009112:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009116:	4543      	cmp	r3, r8
 8009118:	db02      	blt.n	8009120 <_printf_float+0x21c>
 800911a:	6823      	ldr	r3, [r4, #0]
 800911c:	07d8      	lsls	r0, r3, #31
 800911e:	d50f      	bpl.n	8009140 <_printf_float+0x23c>
 8009120:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009124:	4631      	mov	r1, r6
 8009126:	4628      	mov	r0, r5
 8009128:	47b8      	blx	r7
 800912a:	3001      	adds	r0, #1
 800912c:	f43f af45 	beq.w	8008fba <_printf_float+0xb6>
 8009130:	f04f 0900 	mov.w	r9, #0
 8009134:	f108 38ff 	add.w	r8, r8, #4294967295
 8009138:	f104 0a1a 	add.w	sl, r4, #26
 800913c:	45c8      	cmp	r8, r9
 800913e:	dc09      	bgt.n	8009154 <_printf_float+0x250>
 8009140:	6823      	ldr	r3, [r4, #0]
 8009142:	079b      	lsls	r3, r3, #30
 8009144:	f100 8103 	bmi.w	800934e <_printf_float+0x44a>
 8009148:	68e0      	ldr	r0, [r4, #12]
 800914a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800914c:	4298      	cmp	r0, r3
 800914e:	bfb8      	it	lt
 8009150:	4618      	movlt	r0, r3
 8009152:	e734      	b.n	8008fbe <_printf_float+0xba>
 8009154:	2301      	movs	r3, #1
 8009156:	4652      	mov	r2, sl
 8009158:	4631      	mov	r1, r6
 800915a:	4628      	mov	r0, r5
 800915c:	47b8      	blx	r7
 800915e:	3001      	adds	r0, #1
 8009160:	f43f af2b 	beq.w	8008fba <_printf_float+0xb6>
 8009164:	f109 0901 	add.w	r9, r9, #1
 8009168:	e7e8      	b.n	800913c <_printf_float+0x238>
 800916a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800916c:	2b00      	cmp	r3, #0
 800916e:	dc39      	bgt.n	80091e4 <_printf_float+0x2e0>
 8009170:	4a1b      	ldr	r2, [pc, #108]	@ (80091e0 <_printf_float+0x2dc>)
 8009172:	2301      	movs	r3, #1
 8009174:	4631      	mov	r1, r6
 8009176:	4628      	mov	r0, r5
 8009178:	47b8      	blx	r7
 800917a:	3001      	adds	r0, #1
 800917c:	f43f af1d 	beq.w	8008fba <_printf_float+0xb6>
 8009180:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009184:	ea59 0303 	orrs.w	r3, r9, r3
 8009188:	d102      	bne.n	8009190 <_printf_float+0x28c>
 800918a:	6823      	ldr	r3, [r4, #0]
 800918c:	07d9      	lsls	r1, r3, #31
 800918e:	d5d7      	bpl.n	8009140 <_printf_float+0x23c>
 8009190:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009194:	4631      	mov	r1, r6
 8009196:	4628      	mov	r0, r5
 8009198:	47b8      	blx	r7
 800919a:	3001      	adds	r0, #1
 800919c:	f43f af0d 	beq.w	8008fba <_printf_float+0xb6>
 80091a0:	f04f 0a00 	mov.w	sl, #0
 80091a4:	f104 0b1a 	add.w	fp, r4, #26
 80091a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091aa:	425b      	negs	r3, r3
 80091ac:	4553      	cmp	r3, sl
 80091ae:	dc01      	bgt.n	80091b4 <_printf_float+0x2b0>
 80091b0:	464b      	mov	r3, r9
 80091b2:	e793      	b.n	80090dc <_printf_float+0x1d8>
 80091b4:	2301      	movs	r3, #1
 80091b6:	465a      	mov	r2, fp
 80091b8:	4631      	mov	r1, r6
 80091ba:	4628      	mov	r0, r5
 80091bc:	47b8      	blx	r7
 80091be:	3001      	adds	r0, #1
 80091c0:	f43f aefb 	beq.w	8008fba <_printf_float+0xb6>
 80091c4:	f10a 0a01 	add.w	sl, sl, #1
 80091c8:	e7ee      	b.n	80091a8 <_printf_float+0x2a4>
 80091ca:	bf00      	nop
 80091cc:	7fefffff 	.word	0x7fefffff
 80091d0:	0800cbde 	.word	0x0800cbde
 80091d4:	0800cbda 	.word	0x0800cbda
 80091d8:	0800cbe6 	.word	0x0800cbe6
 80091dc:	0800cbe2 	.word	0x0800cbe2
 80091e0:	0800cbea 	.word	0x0800cbea
 80091e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80091e6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80091ea:	4553      	cmp	r3, sl
 80091ec:	bfa8      	it	ge
 80091ee:	4653      	movge	r3, sl
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	4699      	mov	r9, r3
 80091f4:	dc36      	bgt.n	8009264 <_printf_float+0x360>
 80091f6:	f04f 0b00 	mov.w	fp, #0
 80091fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091fe:	f104 021a 	add.w	r2, r4, #26
 8009202:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009204:	9306      	str	r3, [sp, #24]
 8009206:	eba3 0309 	sub.w	r3, r3, r9
 800920a:	455b      	cmp	r3, fp
 800920c:	dc31      	bgt.n	8009272 <_printf_float+0x36e>
 800920e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009210:	459a      	cmp	sl, r3
 8009212:	dc3a      	bgt.n	800928a <_printf_float+0x386>
 8009214:	6823      	ldr	r3, [r4, #0]
 8009216:	07da      	lsls	r2, r3, #31
 8009218:	d437      	bmi.n	800928a <_printf_float+0x386>
 800921a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800921c:	ebaa 0903 	sub.w	r9, sl, r3
 8009220:	9b06      	ldr	r3, [sp, #24]
 8009222:	ebaa 0303 	sub.w	r3, sl, r3
 8009226:	4599      	cmp	r9, r3
 8009228:	bfa8      	it	ge
 800922a:	4699      	movge	r9, r3
 800922c:	f1b9 0f00 	cmp.w	r9, #0
 8009230:	dc33      	bgt.n	800929a <_printf_float+0x396>
 8009232:	f04f 0800 	mov.w	r8, #0
 8009236:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800923a:	f104 0b1a 	add.w	fp, r4, #26
 800923e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009240:	ebaa 0303 	sub.w	r3, sl, r3
 8009244:	eba3 0309 	sub.w	r3, r3, r9
 8009248:	4543      	cmp	r3, r8
 800924a:	f77f af79 	ble.w	8009140 <_printf_float+0x23c>
 800924e:	2301      	movs	r3, #1
 8009250:	465a      	mov	r2, fp
 8009252:	4631      	mov	r1, r6
 8009254:	4628      	mov	r0, r5
 8009256:	47b8      	blx	r7
 8009258:	3001      	adds	r0, #1
 800925a:	f43f aeae 	beq.w	8008fba <_printf_float+0xb6>
 800925e:	f108 0801 	add.w	r8, r8, #1
 8009262:	e7ec      	b.n	800923e <_printf_float+0x33a>
 8009264:	4642      	mov	r2, r8
 8009266:	4631      	mov	r1, r6
 8009268:	4628      	mov	r0, r5
 800926a:	47b8      	blx	r7
 800926c:	3001      	adds	r0, #1
 800926e:	d1c2      	bne.n	80091f6 <_printf_float+0x2f2>
 8009270:	e6a3      	b.n	8008fba <_printf_float+0xb6>
 8009272:	2301      	movs	r3, #1
 8009274:	4631      	mov	r1, r6
 8009276:	4628      	mov	r0, r5
 8009278:	9206      	str	r2, [sp, #24]
 800927a:	47b8      	blx	r7
 800927c:	3001      	adds	r0, #1
 800927e:	f43f ae9c 	beq.w	8008fba <_printf_float+0xb6>
 8009282:	9a06      	ldr	r2, [sp, #24]
 8009284:	f10b 0b01 	add.w	fp, fp, #1
 8009288:	e7bb      	b.n	8009202 <_printf_float+0x2fe>
 800928a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800928e:	4631      	mov	r1, r6
 8009290:	4628      	mov	r0, r5
 8009292:	47b8      	blx	r7
 8009294:	3001      	adds	r0, #1
 8009296:	d1c0      	bne.n	800921a <_printf_float+0x316>
 8009298:	e68f      	b.n	8008fba <_printf_float+0xb6>
 800929a:	9a06      	ldr	r2, [sp, #24]
 800929c:	464b      	mov	r3, r9
 800929e:	4442      	add	r2, r8
 80092a0:	4631      	mov	r1, r6
 80092a2:	4628      	mov	r0, r5
 80092a4:	47b8      	blx	r7
 80092a6:	3001      	adds	r0, #1
 80092a8:	d1c3      	bne.n	8009232 <_printf_float+0x32e>
 80092aa:	e686      	b.n	8008fba <_printf_float+0xb6>
 80092ac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80092b0:	f1ba 0f01 	cmp.w	sl, #1
 80092b4:	dc01      	bgt.n	80092ba <_printf_float+0x3b6>
 80092b6:	07db      	lsls	r3, r3, #31
 80092b8:	d536      	bpl.n	8009328 <_printf_float+0x424>
 80092ba:	2301      	movs	r3, #1
 80092bc:	4642      	mov	r2, r8
 80092be:	4631      	mov	r1, r6
 80092c0:	4628      	mov	r0, r5
 80092c2:	47b8      	blx	r7
 80092c4:	3001      	adds	r0, #1
 80092c6:	f43f ae78 	beq.w	8008fba <_printf_float+0xb6>
 80092ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092ce:	4631      	mov	r1, r6
 80092d0:	4628      	mov	r0, r5
 80092d2:	47b8      	blx	r7
 80092d4:	3001      	adds	r0, #1
 80092d6:	f43f ae70 	beq.w	8008fba <_printf_float+0xb6>
 80092da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80092de:	2200      	movs	r2, #0
 80092e0:	2300      	movs	r3, #0
 80092e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80092e6:	f7f7 fbf7 	bl	8000ad8 <__aeabi_dcmpeq>
 80092ea:	b9c0      	cbnz	r0, 800931e <_printf_float+0x41a>
 80092ec:	4653      	mov	r3, sl
 80092ee:	f108 0201 	add.w	r2, r8, #1
 80092f2:	4631      	mov	r1, r6
 80092f4:	4628      	mov	r0, r5
 80092f6:	47b8      	blx	r7
 80092f8:	3001      	adds	r0, #1
 80092fa:	d10c      	bne.n	8009316 <_printf_float+0x412>
 80092fc:	e65d      	b.n	8008fba <_printf_float+0xb6>
 80092fe:	2301      	movs	r3, #1
 8009300:	465a      	mov	r2, fp
 8009302:	4631      	mov	r1, r6
 8009304:	4628      	mov	r0, r5
 8009306:	47b8      	blx	r7
 8009308:	3001      	adds	r0, #1
 800930a:	f43f ae56 	beq.w	8008fba <_printf_float+0xb6>
 800930e:	f108 0801 	add.w	r8, r8, #1
 8009312:	45d0      	cmp	r8, sl
 8009314:	dbf3      	blt.n	80092fe <_printf_float+0x3fa>
 8009316:	464b      	mov	r3, r9
 8009318:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800931c:	e6df      	b.n	80090de <_printf_float+0x1da>
 800931e:	f04f 0800 	mov.w	r8, #0
 8009322:	f104 0b1a 	add.w	fp, r4, #26
 8009326:	e7f4      	b.n	8009312 <_printf_float+0x40e>
 8009328:	2301      	movs	r3, #1
 800932a:	4642      	mov	r2, r8
 800932c:	e7e1      	b.n	80092f2 <_printf_float+0x3ee>
 800932e:	2301      	movs	r3, #1
 8009330:	464a      	mov	r2, r9
 8009332:	4631      	mov	r1, r6
 8009334:	4628      	mov	r0, r5
 8009336:	47b8      	blx	r7
 8009338:	3001      	adds	r0, #1
 800933a:	f43f ae3e 	beq.w	8008fba <_printf_float+0xb6>
 800933e:	f108 0801 	add.w	r8, r8, #1
 8009342:	68e3      	ldr	r3, [r4, #12]
 8009344:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009346:	1a5b      	subs	r3, r3, r1
 8009348:	4543      	cmp	r3, r8
 800934a:	dcf0      	bgt.n	800932e <_printf_float+0x42a>
 800934c:	e6fc      	b.n	8009148 <_printf_float+0x244>
 800934e:	f04f 0800 	mov.w	r8, #0
 8009352:	f104 0919 	add.w	r9, r4, #25
 8009356:	e7f4      	b.n	8009342 <_printf_float+0x43e>

08009358 <_printf_common>:
 8009358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800935c:	4616      	mov	r6, r2
 800935e:	4698      	mov	r8, r3
 8009360:	688a      	ldr	r2, [r1, #8]
 8009362:	690b      	ldr	r3, [r1, #16]
 8009364:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009368:	4293      	cmp	r3, r2
 800936a:	bfb8      	it	lt
 800936c:	4613      	movlt	r3, r2
 800936e:	6033      	str	r3, [r6, #0]
 8009370:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009374:	4607      	mov	r7, r0
 8009376:	460c      	mov	r4, r1
 8009378:	b10a      	cbz	r2, 800937e <_printf_common+0x26>
 800937a:	3301      	adds	r3, #1
 800937c:	6033      	str	r3, [r6, #0]
 800937e:	6823      	ldr	r3, [r4, #0]
 8009380:	0699      	lsls	r1, r3, #26
 8009382:	bf42      	ittt	mi
 8009384:	6833      	ldrmi	r3, [r6, #0]
 8009386:	3302      	addmi	r3, #2
 8009388:	6033      	strmi	r3, [r6, #0]
 800938a:	6825      	ldr	r5, [r4, #0]
 800938c:	f015 0506 	ands.w	r5, r5, #6
 8009390:	d106      	bne.n	80093a0 <_printf_common+0x48>
 8009392:	f104 0a19 	add.w	sl, r4, #25
 8009396:	68e3      	ldr	r3, [r4, #12]
 8009398:	6832      	ldr	r2, [r6, #0]
 800939a:	1a9b      	subs	r3, r3, r2
 800939c:	42ab      	cmp	r3, r5
 800939e:	dc26      	bgt.n	80093ee <_printf_common+0x96>
 80093a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80093a4:	6822      	ldr	r2, [r4, #0]
 80093a6:	3b00      	subs	r3, #0
 80093a8:	bf18      	it	ne
 80093aa:	2301      	movne	r3, #1
 80093ac:	0692      	lsls	r2, r2, #26
 80093ae:	d42b      	bmi.n	8009408 <_printf_common+0xb0>
 80093b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80093b4:	4641      	mov	r1, r8
 80093b6:	4638      	mov	r0, r7
 80093b8:	47c8      	blx	r9
 80093ba:	3001      	adds	r0, #1
 80093bc:	d01e      	beq.n	80093fc <_printf_common+0xa4>
 80093be:	6823      	ldr	r3, [r4, #0]
 80093c0:	6922      	ldr	r2, [r4, #16]
 80093c2:	f003 0306 	and.w	r3, r3, #6
 80093c6:	2b04      	cmp	r3, #4
 80093c8:	bf02      	ittt	eq
 80093ca:	68e5      	ldreq	r5, [r4, #12]
 80093cc:	6833      	ldreq	r3, [r6, #0]
 80093ce:	1aed      	subeq	r5, r5, r3
 80093d0:	68a3      	ldr	r3, [r4, #8]
 80093d2:	bf0c      	ite	eq
 80093d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093d8:	2500      	movne	r5, #0
 80093da:	4293      	cmp	r3, r2
 80093dc:	bfc4      	itt	gt
 80093de:	1a9b      	subgt	r3, r3, r2
 80093e0:	18ed      	addgt	r5, r5, r3
 80093e2:	2600      	movs	r6, #0
 80093e4:	341a      	adds	r4, #26
 80093e6:	42b5      	cmp	r5, r6
 80093e8:	d11a      	bne.n	8009420 <_printf_common+0xc8>
 80093ea:	2000      	movs	r0, #0
 80093ec:	e008      	b.n	8009400 <_printf_common+0xa8>
 80093ee:	2301      	movs	r3, #1
 80093f0:	4652      	mov	r2, sl
 80093f2:	4641      	mov	r1, r8
 80093f4:	4638      	mov	r0, r7
 80093f6:	47c8      	blx	r9
 80093f8:	3001      	adds	r0, #1
 80093fa:	d103      	bne.n	8009404 <_printf_common+0xac>
 80093fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009404:	3501      	adds	r5, #1
 8009406:	e7c6      	b.n	8009396 <_printf_common+0x3e>
 8009408:	18e1      	adds	r1, r4, r3
 800940a:	1c5a      	adds	r2, r3, #1
 800940c:	2030      	movs	r0, #48	@ 0x30
 800940e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009412:	4422      	add	r2, r4
 8009414:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009418:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800941c:	3302      	adds	r3, #2
 800941e:	e7c7      	b.n	80093b0 <_printf_common+0x58>
 8009420:	2301      	movs	r3, #1
 8009422:	4622      	mov	r2, r4
 8009424:	4641      	mov	r1, r8
 8009426:	4638      	mov	r0, r7
 8009428:	47c8      	blx	r9
 800942a:	3001      	adds	r0, #1
 800942c:	d0e6      	beq.n	80093fc <_printf_common+0xa4>
 800942e:	3601      	adds	r6, #1
 8009430:	e7d9      	b.n	80093e6 <_printf_common+0x8e>
	...

08009434 <_printf_i>:
 8009434:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009438:	7e0f      	ldrb	r7, [r1, #24]
 800943a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800943c:	2f78      	cmp	r7, #120	@ 0x78
 800943e:	4691      	mov	r9, r2
 8009440:	4680      	mov	r8, r0
 8009442:	460c      	mov	r4, r1
 8009444:	469a      	mov	sl, r3
 8009446:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800944a:	d807      	bhi.n	800945c <_printf_i+0x28>
 800944c:	2f62      	cmp	r7, #98	@ 0x62
 800944e:	d80a      	bhi.n	8009466 <_printf_i+0x32>
 8009450:	2f00      	cmp	r7, #0
 8009452:	f000 80d1 	beq.w	80095f8 <_printf_i+0x1c4>
 8009456:	2f58      	cmp	r7, #88	@ 0x58
 8009458:	f000 80b8 	beq.w	80095cc <_printf_i+0x198>
 800945c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009460:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009464:	e03a      	b.n	80094dc <_printf_i+0xa8>
 8009466:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800946a:	2b15      	cmp	r3, #21
 800946c:	d8f6      	bhi.n	800945c <_printf_i+0x28>
 800946e:	a101      	add	r1, pc, #4	@ (adr r1, 8009474 <_printf_i+0x40>)
 8009470:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009474:	080094cd 	.word	0x080094cd
 8009478:	080094e1 	.word	0x080094e1
 800947c:	0800945d 	.word	0x0800945d
 8009480:	0800945d 	.word	0x0800945d
 8009484:	0800945d 	.word	0x0800945d
 8009488:	0800945d 	.word	0x0800945d
 800948c:	080094e1 	.word	0x080094e1
 8009490:	0800945d 	.word	0x0800945d
 8009494:	0800945d 	.word	0x0800945d
 8009498:	0800945d 	.word	0x0800945d
 800949c:	0800945d 	.word	0x0800945d
 80094a0:	080095df 	.word	0x080095df
 80094a4:	0800950b 	.word	0x0800950b
 80094a8:	08009599 	.word	0x08009599
 80094ac:	0800945d 	.word	0x0800945d
 80094b0:	0800945d 	.word	0x0800945d
 80094b4:	08009601 	.word	0x08009601
 80094b8:	0800945d 	.word	0x0800945d
 80094bc:	0800950b 	.word	0x0800950b
 80094c0:	0800945d 	.word	0x0800945d
 80094c4:	0800945d 	.word	0x0800945d
 80094c8:	080095a1 	.word	0x080095a1
 80094cc:	6833      	ldr	r3, [r6, #0]
 80094ce:	1d1a      	adds	r2, r3, #4
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	6032      	str	r2, [r6, #0]
 80094d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80094d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80094dc:	2301      	movs	r3, #1
 80094de:	e09c      	b.n	800961a <_printf_i+0x1e6>
 80094e0:	6833      	ldr	r3, [r6, #0]
 80094e2:	6820      	ldr	r0, [r4, #0]
 80094e4:	1d19      	adds	r1, r3, #4
 80094e6:	6031      	str	r1, [r6, #0]
 80094e8:	0606      	lsls	r6, r0, #24
 80094ea:	d501      	bpl.n	80094f0 <_printf_i+0xbc>
 80094ec:	681d      	ldr	r5, [r3, #0]
 80094ee:	e003      	b.n	80094f8 <_printf_i+0xc4>
 80094f0:	0645      	lsls	r5, r0, #25
 80094f2:	d5fb      	bpl.n	80094ec <_printf_i+0xb8>
 80094f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80094f8:	2d00      	cmp	r5, #0
 80094fa:	da03      	bge.n	8009504 <_printf_i+0xd0>
 80094fc:	232d      	movs	r3, #45	@ 0x2d
 80094fe:	426d      	negs	r5, r5
 8009500:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009504:	4858      	ldr	r0, [pc, #352]	@ (8009668 <_printf_i+0x234>)
 8009506:	230a      	movs	r3, #10
 8009508:	e011      	b.n	800952e <_printf_i+0xfa>
 800950a:	6821      	ldr	r1, [r4, #0]
 800950c:	6833      	ldr	r3, [r6, #0]
 800950e:	0608      	lsls	r0, r1, #24
 8009510:	f853 5b04 	ldr.w	r5, [r3], #4
 8009514:	d402      	bmi.n	800951c <_printf_i+0xe8>
 8009516:	0649      	lsls	r1, r1, #25
 8009518:	bf48      	it	mi
 800951a:	b2ad      	uxthmi	r5, r5
 800951c:	2f6f      	cmp	r7, #111	@ 0x6f
 800951e:	4852      	ldr	r0, [pc, #328]	@ (8009668 <_printf_i+0x234>)
 8009520:	6033      	str	r3, [r6, #0]
 8009522:	bf14      	ite	ne
 8009524:	230a      	movne	r3, #10
 8009526:	2308      	moveq	r3, #8
 8009528:	2100      	movs	r1, #0
 800952a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800952e:	6866      	ldr	r6, [r4, #4]
 8009530:	60a6      	str	r6, [r4, #8]
 8009532:	2e00      	cmp	r6, #0
 8009534:	db05      	blt.n	8009542 <_printf_i+0x10e>
 8009536:	6821      	ldr	r1, [r4, #0]
 8009538:	432e      	orrs	r6, r5
 800953a:	f021 0104 	bic.w	r1, r1, #4
 800953e:	6021      	str	r1, [r4, #0]
 8009540:	d04b      	beq.n	80095da <_printf_i+0x1a6>
 8009542:	4616      	mov	r6, r2
 8009544:	fbb5 f1f3 	udiv	r1, r5, r3
 8009548:	fb03 5711 	mls	r7, r3, r1, r5
 800954c:	5dc7      	ldrb	r7, [r0, r7]
 800954e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009552:	462f      	mov	r7, r5
 8009554:	42bb      	cmp	r3, r7
 8009556:	460d      	mov	r5, r1
 8009558:	d9f4      	bls.n	8009544 <_printf_i+0x110>
 800955a:	2b08      	cmp	r3, #8
 800955c:	d10b      	bne.n	8009576 <_printf_i+0x142>
 800955e:	6823      	ldr	r3, [r4, #0]
 8009560:	07df      	lsls	r7, r3, #31
 8009562:	d508      	bpl.n	8009576 <_printf_i+0x142>
 8009564:	6923      	ldr	r3, [r4, #16]
 8009566:	6861      	ldr	r1, [r4, #4]
 8009568:	4299      	cmp	r1, r3
 800956a:	bfde      	ittt	le
 800956c:	2330      	movle	r3, #48	@ 0x30
 800956e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009572:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009576:	1b92      	subs	r2, r2, r6
 8009578:	6122      	str	r2, [r4, #16]
 800957a:	f8cd a000 	str.w	sl, [sp]
 800957e:	464b      	mov	r3, r9
 8009580:	aa03      	add	r2, sp, #12
 8009582:	4621      	mov	r1, r4
 8009584:	4640      	mov	r0, r8
 8009586:	f7ff fee7 	bl	8009358 <_printf_common>
 800958a:	3001      	adds	r0, #1
 800958c:	d14a      	bne.n	8009624 <_printf_i+0x1f0>
 800958e:	f04f 30ff 	mov.w	r0, #4294967295
 8009592:	b004      	add	sp, #16
 8009594:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009598:	6823      	ldr	r3, [r4, #0]
 800959a:	f043 0320 	orr.w	r3, r3, #32
 800959e:	6023      	str	r3, [r4, #0]
 80095a0:	4832      	ldr	r0, [pc, #200]	@ (800966c <_printf_i+0x238>)
 80095a2:	2778      	movs	r7, #120	@ 0x78
 80095a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80095a8:	6823      	ldr	r3, [r4, #0]
 80095aa:	6831      	ldr	r1, [r6, #0]
 80095ac:	061f      	lsls	r7, r3, #24
 80095ae:	f851 5b04 	ldr.w	r5, [r1], #4
 80095b2:	d402      	bmi.n	80095ba <_printf_i+0x186>
 80095b4:	065f      	lsls	r7, r3, #25
 80095b6:	bf48      	it	mi
 80095b8:	b2ad      	uxthmi	r5, r5
 80095ba:	6031      	str	r1, [r6, #0]
 80095bc:	07d9      	lsls	r1, r3, #31
 80095be:	bf44      	itt	mi
 80095c0:	f043 0320 	orrmi.w	r3, r3, #32
 80095c4:	6023      	strmi	r3, [r4, #0]
 80095c6:	b11d      	cbz	r5, 80095d0 <_printf_i+0x19c>
 80095c8:	2310      	movs	r3, #16
 80095ca:	e7ad      	b.n	8009528 <_printf_i+0xf4>
 80095cc:	4826      	ldr	r0, [pc, #152]	@ (8009668 <_printf_i+0x234>)
 80095ce:	e7e9      	b.n	80095a4 <_printf_i+0x170>
 80095d0:	6823      	ldr	r3, [r4, #0]
 80095d2:	f023 0320 	bic.w	r3, r3, #32
 80095d6:	6023      	str	r3, [r4, #0]
 80095d8:	e7f6      	b.n	80095c8 <_printf_i+0x194>
 80095da:	4616      	mov	r6, r2
 80095dc:	e7bd      	b.n	800955a <_printf_i+0x126>
 80095de:	6833      	ldr	r3, [r6, #0]
 80095e0:	6825      	ldr	r5, [r4, #0]
 80095e2:	6961      	ldr	r1, [r4, #20]
 80095e4:	1d18      	adds	r0, r3, #4
 80095e6:	6030      	str	r0, [r6, #0]
 80095e8:	062e      	lsls	r6, r5, #24
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	d501      	bpl.n	80095f2 <_printf_i+0x1be>
 80095ee:	6019      	str	r1, [r3, #0]
 80095f0:	e002      	b.n	80095f8 <_printf_i+0x1c4>
 80095f2:	0668      	lsls	r0, r5, #25
 80095f4:	d5fb      	bpl.n	80095ee <_printf_i+0x1ba>
 80095f6:	8019      	strh	r1, [r3, #0]
 80095f8:	2300      	movs	r3, #0
 80095fa:	6123      	str	r3, [r4, #16]
 80095fc:	4616      	mov	r6, r2
 80095fe:	e7bc      	b.n	800957a <_printf_i+0x146>
 8009600:	6833      	ldr	r3, [r6, #0]
 8009602:	1d1a      	adds	r2, r3, #4
 8009604:	6032      	str	r2, [r6, #0]
 8009606:	681e      	ldr	r6, [r3, #0]
 8009608:	6862      	ldr	r2, [r4, #4]
 800960a:	2100      	movs	r1, #0
 800960c:	4630      	mov	r0, r6
 800960e:	f7f6 fde7 	bl	80001e0 <memchr>
 8009612:	b108      	cbz	r0, 8009618 <_printf_i+0x1e4>
 8009614:	1b80      	subs	r0, r0, r6
 8009616:	6060      	str	r0, [r4, #4]
 8009618:	6863      	ldr	r3, [r4, #4]
 800961a:	6123      	str	r3, [r4, #16]
 800961c:	2300      	movs	r3, #0
 800961e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009622:	e7aa      	b.n	800957a <_printf_i+0x146>
 8009624:	6923      	ldr	r3, [r4, #16]
 8009626:	4632      	mov	r2, r6
 8009628:	4649      	mov	r1, r9
 800962a:	4640      	mov	r0, r8
 800962c:	47d0      	blx	sl
 800962e:	3001      	adds	r0, #1
 8009630:	d0ad      	beq.n	800958e <_printf_i+0x15a>
 8009632:	6823      	ldr	r3, [r4, #0]
 8009634:	079b      	lsls	r3, r3, #30
 8009636:	d413      	bmi.n	8009660 <_printf_i+0x22c>
 8009638:	68e0      	ldr	r0, [r4, #12]
 800963a:	9b03      	ldr	r3, [sp, #12]
 800963c:	4298      	cmp	r0, r3
 800963e:	bfb8      	it	lt
 8009640:	4618      	movlt	r0, r3
 8009642:	e7a6      	b.n	8009592 <_printf_i+0x15e>
 8009644:	2301      	movs	r3, #1
 8009646:	4632      	mov	r2, r6
 8009648:	4649      	mov	r1, r9
 800964a:	4640      	mov	r0, r8
 800964c:	47d0      	blx	sl
 800964e:	3001      	adds	r0, #1
 8009650:	d09d      	beq.n	800958e <_printf_i+0x15a>
 8009652:	3501      	adds	r5, #1
 8009654:	68e3      	ldr	r3, [r4, #12]
 8009656:	9903      	ldr	r1, [sp, #12]
 8009658:	1a5b      	subs	r3, r3, r1
 800965a:	42ab      	cmp	r3, r5
 800965c:	dcf2      	bgt.n	8009644 <_printf_i+0x210>
 800965e:	e7eb      	b.n	8009638 <_printf_i+0x204>
 8009660:	2500      	movs	r5, #0
 8009662:	f104 0619 	add.w	r6, r4, #25
 8009666:	e7f5      	b.n	8009654 <_printf_i+0x220>
 8009668:	0800cbec 	.word	0x0800cbec
 800966c:	0800cbfd 	.word	0x0800cbfd

08009670 <_scanf_float>:
 8009670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009674:	b087      	sub	sp, #28
 8009676:	4691      	mov	r9, r2
 8009678:	9303      	str	r3, [sp, #12]
 800967a:	688b      	ldr	r3, [r1, #8]
 800967c:	1e5a      	subs	r2, r3, #1
 800967e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009682:	bf81      	itttt	hi
 8009684:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009688:	eb03 0b05 	addhi.w	fp, r3, r5
 800968c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009690:	608b      	strhi	r3, [r1, #8]
 8009692:	680b      	ldr	r3, [r1, #0]
 8009694:	460a      	mov	r2, r1
 8009696:	f04f 0500 	mov.w	r5, #0
 800969a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800969e:	f842 3b1c 	str.w	r3, [r2], #28
 80096a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80096a6:	4680      	mov	r8, r0
 80096a8:	460c      	mov	r4, r1
 80096aa:	bf98      	it	ls
 80096ac:	f04f 0b00 	movls.w	fp, #0
 80096b0:	9201      	str	r2, [sp, #4]
 80096b2:	4616      	mov	r6, r2
 80096b4:	46aa      	mov	sl, r5
 80096b6:	462f      	mov	r7, r5
 80096b8:	9502      	str	r5, [sp, #8]
 80096ba:	68a2      	ldr	r2, [r4, #8]
 80096bc:	b15a      	cbz	r2, 80096d6 <_scanf_float+0x66>
 80096be:	f8d9 3000 	ldr.w	r3, [r9]
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	2b4e      	cmp	r3, #78	@ 0x4e
 80096c6:	d863      	bhi.n	8009790 <_scanf_float+0x120>
 80096c8:	2b40      	cmp	r3, #64	@ 0x40
 80096ca:	d83b      	bhi.n	8009744 <_scanf_float+0xd4>
 80096cc:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80096d0:	b2c8      	uxtb	r0, r1
 80096d2:	280e      	cmp	r0, #14
 80096d4:	d939      	bls.n	800974a <_scanf_float+0xda>
 80096d6:	b11f      	cbz	r7, 80096e0 <_scanf_float+0x70>
 80096d8:	6823      	ldr	r3, [r4, #0]
 80096da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096de:	6023      	str	r3, [r4, #0]
 80096e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096e4:	f1ba 0f01 	cmp.w	sl, #1
 80096e8:	f200 8114 	bhi.w	8009914 <_scanf_float+0x2a4>
 80096ec:	9b01      	ldr	r3, [sp, #4]
 80096ee:	429e      	cmp	r6, r3
 80096f0:	f200 8105 	bhi.w	80098fe <_scanf_float+0x28e>
 80096f4:	2001      	movs	r0, #1
 80096f6:	b007      	add	sp, #28
 80096f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096fc:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8009700:	2a0d      	cmp	r2, #13
 8009702:	d8e8      	bhi.n	80096d6 <_scanf_float+0x66>
 8009704:	a101      	add	r1, pc, #4	@ (adr r1, 800970c <_scanf_float+0x9c>)
 8009706:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800970a:	bf00      	nop
 800970c:	08009855 	.word	0x08009855
 8009710:	080096d7 	.word	0x080096d7
 8009714:	080096d7 	.word	0x080096d7
 8009718:	080096d7 	.word	0x080096d7
 800971c:	080098b1 	.word	0x080098b1
 8009720:	0800988b 	.word	0x0800988b
 8009724:	080096d7 	.word	0x080096d7
 8009728:	080096d7 	.word	0x080096d7
 800972c:	08009863 	.word	0x08009863
 8009730:	080096d7 	.word	0x080096d7
 8009734:	080096d7 	.word	0x080096d7
 8009738:	080096d7 	.word	0x080096d7
 800973c:	080096d7 	.word	0x080096d7
 8009740:	0800981f 	.word	0x0800981f
 8009744:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009748:	e7da      	b.n	8009700 <_scanf_float+0x90>
 800974a:	290e      	cmp	r1, #14
 800974c:	d8c3      	bhi.n	80096d6 <_scanf_float+0x66>
 800974e:	a001      	add	r0, pc, #4	@ (adr r0, 8009754 <_scanf_float+0xe4>)
 8009750:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009754:	0800980f 	.word	0x0800980f
 8009758:	080096d7 	.word	0x080096d7
 800975c:	0800980f 	.word	0x0800980f
 8009760:	0800989f 	.word	0x0800989f
 8009764:	080096d7 	.word	0x080096d7
 8009768:	080097b1 	.word	0x080097b1
 800976c:	080097f5 	.word	0x080097f5
 8009770:	080097f5 	.word	0x080097f5
 8009774:	080097f5 	.word	0x080097f5
 8009778:	080097f5 	.word	0x080097f5
 800977c:	080097f5 	.word	0x080097f5
 8009780:	080097f5 	.word	0x080097f5
 8009784:	080097f5 	.word	0x080097f5
 8009788:	080097f5 	.word	0x080097f5
 800978c:	080097f5 	.word	0x080097f5
 8009790:	2b6e      	cmp	r3, #110	@ 0x6e
 8009792:	d809      	bhi.n	80097a8 <_scanf_float+0x138>
 8009794:	2b60      	cmp	r3, #96	@ 0x60
 8009796:	d8b1      	bhi.n	80096fc <_scanf_float+0x8c>
 8009798:	2b54      	cmp	r3, #84	@ 0x54
 800979a:	d07b      	beq.n	8009894 <_scanf_float+0x224>
 800979c:	2b59      	cmp	r3, #89	@ 0x59
 800979e:	d19a      	bne.n	80096d6 <_scanf_float+0x66>
 80097a0:	2d07      	cmp	r5, #7
 80097a2:	d198      	bne.n	80096d6 <_scanf_float+0x66>
 80097a4:	2508      	movs	r5, #8
 80097a6:	e02f      	b.n	8009808 <_scanf_float+0x198>
 80097a8:	2b74      	cmp	r3, #116	@ 0x74
 80097aa:	d073      	beq.n	8009894 <_scanf_float+0x224>
 80097ac:	2b79      	cmp	r3, #121	@ 0x79
 80097ae:	e7f6      	b.n	800979e <_scanf_float+0x12e>
 80097b0:	6821      	ldr	r1, [r4, #0]
 80097b2:	05c8      	lsls	r0, r1, #23
 80097b4:	d51e      	bpl.n	80097f4 <_scanf_float+0x184>
 80097b6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80097ba:	6021      	str	r1, [r4, #0]
 80097bc:	3701      	adds	r7, #1
 80097be:	f1bb 0f00 	cmp.w	fp, #0
 80097c2:	d003      	beq.n	80097cc <_scanf_float+0x15c>
 80097c4:	3201      	adds	r2, #1
 80097c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80097ca:	60a2      	str	r2, [r4, #8]
 80097cc:	68a3      	ldr	r3, [r4, #8]
 80097ce:	3b01      	subs	r3, #1
 80097d0:	60a3      	str	r3, [r4, #8]
 80097d2:	6923      	ldr	r3, [r4, #16]
 80097d4:	3301      	adds	r3, #1
 80097d6:	6123      	str	r3, [r4, #16]
 80097d8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80097dc:	3b01      	subs	r3, #1
 80097de:	2b00      	cmp	r3, #0
 80097e0:	f8c9 3004 	str.w	r3, [r9, #4]
 80097e4:	f340 8082 	ble.w	80098ec <_scanf_float+0x27c>
 80097e8:	f8d9 3000 	ldr.w	r3, [r9]
 80097ec:	3301      	adds	r3, #1
 80097ee:	f8c9 3000 	str.w	r3, [r9]
 80097f2:	e762      	b.n	80096ba <_scanf_float+0x4a>
 80097f4:	eb1a 0105 	adds.w	r1, sl, r5
 80097f8:	f47f af6d 	bne.w	80096d6 <_scanf_float+0x66>
 80097fc:	6822      	ldr	r2, [r4, #0]
 80097fe:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009802:	6022      	str	r2, [r4, #0]
 8009804:	460d      	mov	r5, r1
 8009806:	468a      	mov	sl, r1
 8009808:	f806 3b01 	strb.w	r3, [r6], #1
 800980c:	e7de      	b.n	80097cc <_scanf_float+0x15c>
 800980e:	6822      	ldr	r2, [r4, #0]
 8009810:	0610      	lsls	r0, r2, #24
 8009812:	f57f af60 	bpl.w	80096d6 <_scanf_float+0x66>
 8009816:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800981a:	6022      	str	r2, [r4, #0]
 800981c:	e7f4      	b.n	8009808 <_scanf_float+0x198>
 800981e:	f1ba 0f00 	cmp.w	sl, #0
 8009822:	d10c      	bne.n	800983e <_scanf_float+0x1ce>
 8009824:	b977      	cbnz	r7, 8009844 <_scanf_float+0x1d4>
 8009826:	6822      	ldr	r2, [r4, #0]
 8009828:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800982c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009830:	d108      	bne.n	8009844 <_scanf_float+0x1d4>
 8009832:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009836:	6022      	str	r2, [r4, #0]
 8009838:	f04f 0a01 	mov.w	sl, #1
 800983c:	e7e4      	b.n	8009808 <_scanf_float+0x198>
 800983e:	f1ba 0f02 	cmp.w	sl, #2
 8009842:	d050      	beq.n	80098e6 <_scanf_float+0x276>
 8009844:	2d01      	cmp	r5, #1
 8009846:	d002      	beq.n	800984e <_scanf_float+0x1de>
 8009848:	2d04      	cmp	r5, #4
 800984a:	f47f af44 	bne.w	80096d6 <_scanf_float+0x66>
 800984e:	3501      	adds	r5, #1
 8009850:	b2ed      	uxtb	r5, r5
 8009852:	e7d9      	b.n	8009808 <_scanf_float+0x198>
 8009854:	f1ba 0f01 	cmp.w	sl, #1
 8009858:	f47f af3d 	bne.w	80096d6 <_scanf_float+0x66>
 800985c:	f04f 0a02 	mov.w	sl, #2
 8009860:	e7d2      	b.n	8009808 <_scanf_float+0x198>
 8009862:	b975      	cbnz	r5, 8009882 <_scanf_float+0x212>
 8009864:	2f00      	cmp	r7, #0
 8009866:	f47f af37 	bne.w	80096d8 <_scanf_float+0x68>
 800986a:	6822      	ldr	r2, [r4, #0]
 800986c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009870:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009874:	f040 8103 	bne.w	8009a7e <_scanf_float+0x40e>
 8009878:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800987c:	6022      	str	r2, [r4, #0]
 800987e:	2501      	movs	r5, #1
 8009880:	e7c2      	b.n	8009808 <_scanf_float+0x198>
 8009882:	2d03      	cmp	r5, #3
 8009884:	d0e3      	beq.n	800984e <_scanf_float+0x1de>
 8009886:	2d05      	cmp	r5, #5
 8009888:	e7df      	b.n	800984a <_scanf_float+0x1da>
 800988a:	2d02      	cmp	r5, #2
 800988c:	f47f af23 	bne.w	80096d6 <_scanf_float+0x66>
 8009890:	2503      	movs	r5, #3
 8009892:	e7b9      	b.n	8009808 <_scanf_float+0x198>
 8009894:	2d06      	cmp	r5, #6
 8009896:	f47f af1e 	bne.w	80096d6 <_scanf_float+0x66>
 800989a:	2507      	movs	r5, #7
 800989c:	e7b4      	b.n	8009808 <_scanf_float+0x198>
 800989e:	6822      	ldr	r2, [r4, #0]
 80098a0:	0591      	lsls	r1, r2, #22
 80098a2:	f57f af18 	bpl.w	80096d6 <_scanf_float+0x66>
 80098a6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80098aa:	6022      	str	r2, [r4, #0]
 80098ac:	9702      	str	r7, [sp, #8]
 80098ae:	e7ab      	b.n	8009808 <_scanf_float+0x198>
 80098b0:	6822      	ldr	r2, [r4, #0]
 80098b2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80098b6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80098ba:	d005      	beq.n	80098c8 <_scanf_float+0x258>
 80098bc:	0550      	lsls	r0, r2, #21
 80098be:	f57f af0a 	bpl.w	80096d6 <_scanf_float+0x66>
 80098c2:	2f00      	cmp	r7, #0
 80098c4:	f000 80db 	beq.w	8009a7e <_scanf_float+0x40e>
 80098c8:	0591      	lsls	r1, r2, #22
 80098ca:	bf58      	it	pl
 80098cc:	9902      	ldrpl	r1, [sp, #8]
 80098ce:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80098d2:	bf58      	it	pl
 80098d4:	1a79      	subpl	r1, r7, r1
 80098d6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80098da:	bf58      	it	pl
 80098dc:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80098e0:	6022      	str	r2, [r4, #0]
 80098e2:	2700      	movs	r7, #0
 80098e4:	e790      	b.n	8009808 <_scanf_float+0x198>
 80098e6:	f04f 0a03 	mov.w	sl, #3
 80098ea:	e78d      	b.n	8009808 <_scanf_float+0x198>
 80098ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80098f0:	4649      	mov	r1, r9
 80098f2:	4640      	mov	r0, r8
 80098f4:	4798      	blx	r3
 80098f6:	2800      	cmp	r0, #0
 80098f8:	f43f aedf 	beq.w	80096ba <_scanf_float+0x4a>
 80098fc:	e6eb      	b.n	80096d6 <_scanf_float+0x66>
 80098fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009902:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009906:	464a      	mov	r2, r9
 8009908:	4640      	mov	r0, r8
 800990a:	4798      	blx	r3
 800990c:	6923      	ldr	r3, [r4, #16]
 800990e:	3b01      	subs	r3, #1
 8009910:	6123      	str	r3, [r4, #16]
 8009912:	e6eb      	b.n	80096ec <_scanf_float+0x7c>
 8009914:	1e6b      	subs	r3, r5, #1
 8009916:	2b06      	cmp	r3, #6
 8009918:	d824      	bhi.n	8009964 <_scanf_float+0x2f4>
 800991a:	2d02      	cmp	r5, #2
 800991c:	d836      	bhi.n	800998c <_scanf_float+0x31c>
 800991e:	9b01      	ldr	r3, [sp, #4]
 8009920:	429e      	cmp	r6, r3
 8009922:	f67f aee7 	bls.w	80096f4 <_scanf_float+0x84>
 8009926:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800992a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800992e:	464a      	mov	r2, r9
 8009930:	4640      	mov	r0, r8
 8009932:	4798      	blx	r3
 8009934:	6923      	ldr	r3, [r4, #16]
 8009936:	3b01      	subs	r3, #1
 8009938:	6123      	str	r3, [r4, #16]
 800993a:	e7f0      	b.n	800991e <_scanf_float+0x2ae>
 800993c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009940:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009944:	464a      	mov	r2, r9
 8009946:	4640      	mov	r0, r8
 8009948:	4798      	blx	r3
 800994a:	6923      	ldr	r3, [r4, #16]
 800994c:	3b01      	subs	r3, #1
 800994e:	6123      	str	r3, [r4, #16]
 8009950:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009954:	fa5f fa8a 	uxtb.w	sl, sl
 8009958:	f1ba 0f02 	cmp.w	sl, #2
 800995c:	d1ee      	bne.n	800993c <_scanf_float+0x2cc>
 800995e:	3d03      	subs	r5, #3
 8009960:	b2ed      	uxtb	r5, r5
 8009962:	1b76      	subs	r6, r6, r5
 8009964:	6823      	ldr	r3, [r4, #0]
 8009966:	05da      	lsls	r2, r3, #23
 8009968:	d530      	bpl.n	80099cc <_scanf_float+0x35c>
 800996a:	055b      	lsls	r3, r3, #21
 800996c:	d511      	bpl.n	8009992 <_scanf_float+0x322>
 800996e:	9b01      	ldr	r3, [sp, #4]
 8009970:	429e      	cmp	r6, r3
 8009972:	f67f aebf 	bls.w	80096f4 <_scanf_float+0x84>
 8009976:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800997a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800997e:	464a      	mov	r2, r9
 8009980:	4640      	mov	r0, r8
 8009982:	4798      	blx	r3
 8009984:	6923      	ldr	r3, [r4, #16]
 8009986:	3b01      	subs	r3, #1
 8009988:	6123      	str	r3, [r4, #16]
 800998a:	e7f0      	b.n	800996e <_scanf_float+0x2fe>
 800998c:	46aa      	mov	sl, r5
 800998e:	46b3      	mov	fp, r6
 8009990:	e7de      	b.n	8009950 <_scanf_float+0x2e0>
 8009992:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009996:	6923      	ldr	r3, [r4, #16]
 8009998:	2965      	cmp	r1, #101	@ 0x65
 800999a:	f103 33ff 	add.w	r3, r3, #4294967295
 800999e:	f106 35ff 	add.w	r5, r6, #4294967295
 80099a2:	6123      	str	r3, [r4, #16]
 80099a4:	d00c      	beq.n	80099c0 <_scanf_float+0x350>
 80099a6:	2945      	cmp	r1, #69	@ 0x45
 80099a8:	d00a      	beq.n	80099c0 <_scanf_float+0x350>
 80099aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80099ae:	464a      	mov	r2, r9
 80099b0:	4640      	mov	r0, r8
 80099b2:	4798      	blx	r3
 80099b4:	6923      	ldr	r3, [r4, #16]
 80099b6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80099ba:	3b01      	subs	r3, #1
 80099bc:	1eb5      	subs	r5, r6, #2
 80099be:	6123      	str	r3, [r4, #16]
 80099c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80099c4:	464a      	mov	r2, r9
 80099c6:	4640      	mov	r0, r8
 80099c8:	4798      	blx	r3
 80099ca:	462e      	mov	r6, r5
 80099cc:	6822      	ldr	r2, [r4, #0]
 80099ce:	f012 0210 	ands.w	r2, r2, #16
 80099d2:	d001      	beq.n	80099d8 <_scanf_float+0x368>
 80099d4:	2000      	movs	r0, #0
 80099d6:	e68e      	b.n	80096f6 <_scanf_float+0x86>
 80099d8:	7032      	strb	r2, [r6, #0]
 80099da:	6823      	ldr	r3, [r4, #0]
 80099dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80099e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099e4:	d125      	bne.n	8009a32 <_scanf_float+0x3c2>
 80099e6:	9b02      	ldr	r3, [sp, #8]
 80099e8:	429f      	cmp	r7, r3
 80099ea:	d00a      	beq.n	8009a02 <_scanf_float+0x392>
 80099ec:	1bda      	subs	r2, r3, r7
 80099ee:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80099f2:	429e      	cmp	r6, r3
 80099f4:	bf28      	it	cs
 80099f6:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80099fa:	4922      	ldr	r1, [pc, #136]	@ (8009a84 <_scanf_float+0x414>)
 80099fc:	4630      	mov	r0, r6
 80099fe:	f000 f907 	bl	8009c10 <siprintf>
 8009a02:	9901      	ldr	r1, [sp, #4]
 8009a04:	2200      	movs	r2, #0
 8009a06:	4640      	mov	r0, r8
 8009a08:	f7ff f9d6 	bl	8008db8 <_strtod_r>
 8009a0c:	9b03      	ldr	r3, [sp, #12]
 8009a0e:	6821      	ldr	r1, [r4, #0]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f011 0f02 	tst.w	r1, #2
 8009a16:	ec57 6b10 	vmov	r6, r7, d0
 8009a1a:	f103 0204 	add.w	r2, r3, #4
 8009a1e:	d015      	beq.n	8009a4c <_scanf_float+0x3dc>
 8009a20:	9903      	ldr	r1, [sp, #12]
 8009a22:	600a      	str	r2, [r1, #0]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	e9c3 6700 	strd	r6, r7, [r3]
 8009a2a:	68e3      	ldr	r3, [r4, #12]
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	60e3      	str	r3, [r4, #12]
 8009a30:	e7d0      	b.n	80099d4 <_scanf_float+0x364>
 8009a32:	9b04      	ldr	r3, [sp, #16]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d0e4      	beq.n	8009a02 <_scanf_float+0x392>
 8009a38:	9905      	ldr	r1, [sp, #20]
 8009a3a:	230a      	movs	r3, #10
 8009a3c:	3101      	adds	r1, #1
 8009a3e:	4640      	mov	r0, r8
 8009a40:	f002 f9e2 	bl	800be08 <_strtol_r>
 8009a44:	9b04      	ldr	r3, [sp, #16]
 8009a46:	9e05      	ldr	r6, [sp, #20]
 8009a48:	1ac2      	subs	r2, r0, r3
 8009a4a:	e7d0      	b.n	80099ee <_scanf_float+0x37e>
 8009a4c:	f011 0f04 	tst.w	r1, #4
 8009a50:	9903      	ldr	r1, [sp, #12]
 8009a52:	600a      	str	r2, [r1, #0]
 8009a54:	d1e6      	bne.n	8009a24 <_scanf_float+0x3b4>
 8009a56:	681d      	ldr	r5, [r3, #0]
 8009a58:	4632      	mov	r2, r6
 8009a5a:	463b      	mov	r3, r7
 8009a5c:	4630      	mov	r0, r6
 8009a5e:	4639      	mov	r1, r7
 8009a60:	f7f7 f86c 	bl	8000b3c <__aeabi_dcmpun>
 8009a64:	b128      	cbz	r0, 8009a72 <_scanf_float+0x402>
 8009a66:	4808      	ldr	r0, [pc, #32]	@ (8009a88 <_scanf_float+0x418>)
 8009a68:	f000 f9e2 	bl	8009e30 <nanf>
 8009a6c:	ed85 0a00 	vstr	s0, [r5]
 8009a70:	e7db      	b.n	8009a2a <_scanf_float+0x3ba>
 8009a72:	4630      	mov	r0, r6
 8009a74:	4639      	mov	r1, r7
 8009a76:	f7f7 f8bf 	bl	8000bf8 <__aeabi_d2f>
 8009a7a:	6028      	str	r0, [r5, #0]
 8009a7c:	e7d5      	b.n	8009a2a <_scanf_float+0x3ba>
 8009a7e:	2700      	movs	r7, #0
 8009a80:	e62e      	b.n	80096e0 <_scanf_float+0x70>
 8009a82:	bf00      	nop
 8009a84:	0800cc0e 	.word	0x0800cc0e
 8009a88:	0800cc56 	.word	0x0800cc56

08009a8c <std>:
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	b510      	push	{r4, lr}
 8009a90:	4604      	mov	r4, r0
 8009a92:	e9c0 3300 	strd	r3, r3, [r0]
 8009a96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a9a:	6083      	str	r3, [r0, #8]
 8009a9c:	8181      	strh	r1, [r0, #12]
 8009a9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8009aa0:	81c2      	strh	r2, [r0, #14]
 8009aa2:	6183      	str	r3, [r0, #24]
 8009aa4:	4619      	mov	r1, r3
 8009aa6:	2208      	movs	r2, #8
 8009aa8:	305c      	adds	r0, #92	@ 0x5c
 8009aaa:	f000 f916 	bl	8009cda <memset>
 8009aae:	4b0d      	ldr	r3, [pc, #52]	@ (8009ae4 <std+0x58>)
 8009ab0:	6263      	str	r3, [r4, #36]	@ 0x24
 8009ab2:	4b0d      	ldr	r3, [pc, #52]	@ (8009ae8 <std+0x5c>)
 8009ab4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8009aec <std+0x60>)
 8009ab8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009aba:	4b0d      	ldr	r3, [pc, #52]	@ (8009af0 <std+0x64>)
 8009abc:	6323      	str	r3, [r4, #48]	@ 0x30
 8009abe:	4b0d      	ldr	r3, [pc, #52]	@ (8009af4 <std+0x68>)
 8009ac0:	6224      	str	r4, [r4, #32]
 8009ac2:	429c      	cmp	r4, r3
 8009ac4:	d006      	beq.n	8009ad4 <std+0x48>
 8009ac6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009aca:	4294      	cmp	r4, r2
 8009acc:	d002      	beq.n	8009ad4 <std+0x48>
 8009ace:	33d0      	adds	r3, #208	@ 0xd0
 8009ad0:	429c      	cmp	r4, r3
 8009ad2:	d105      	bne.n	8009ae0 <std+0x54>
 8009ad4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009adc:	f000 b98c 	b.w	8009df8 <__retarget_lock_init_recursive>
 8009ae0:	bd10      	pop	{r4, pc}
 8009ae2:	bf00      	nop
 8009ae4:	08009c55 	.word	0x08009c55
 8009ae8:	08009c77 	.word	0x08009c77
 8009aec:	08009caf 	.word	0x08009caf
 8009af0:	08009cd3 	.word	0x08009cd3
 8009af4:	20000788 	.word	0x20000788

08009af8 <stdio_exit_handler>:
 8009af8:	4a02      	ldr	r2, [pc, #8]	@ (8009b04 <stdio_exit_handler+0xc>)
 8009afa:	4903      	ldr	r1, [pc, #12]	@ (8009b08 <stdio_exit_handler+0x10>)
 8009afc:	4803      	ldr	r0, [pc, #12]	@ (8009b0c <stdio_exit_handler+0x14>)
 8009afe:	f000 b869 	b.w	8009bd4 <_fwalk_sglue>
 8009b02:	bf00      	nop
 8009b04:	20000090 	.word	0x20000090
 8009b08:	0800c1dd 	.word	0x0800c1dd
 8009b0c:	2000020c 	.word	0x2000020c

08009b10 <cleanup_stdio>:
 8009b10:	6841      	ldr	r1, [r0, #4]
 8009b12:	4b0c      	ldr	r3, [pc, #48]	@ (8009b44 <cleanup_stdio+0x34>)
 8009b14:	4299      	cmp	r1, r3
 8009b16:	b510      	push	{r4, lr}
 8009b18:	4604      	mov	r4, r0
 8009b1a:	d001      	beq.n	8009b20 <cleanup_stdio+0x10>
 8009b1c:	f002 fb5e 	bl	800c1dc <_fflush_r>
 8009b20:	68a1      	ldr	r1, [r4, #8]
 8009b22:	4b09      	ldr	r3, [pc, #36]	@ (8009b48 <cleanup_stdio+0x38>)
 8009b24:	4299      	cmp	r1, r3
 8009b26:	d002      	beq.n	8009b2e <cleanup_stdio+0x1e>
 8009b28:	4620      	mov	r0, r4
 8009b2a:	f002 fb57 	bl	800c1dc <_fflush_r>
 8009b2e:	68e1      	ldr	r1, [r4, #12]
 8009b30:	4b06      	ldr	r3, [pc, #24]	@ (8009b4c <cleanup_stdio+0x3c>)
 8009b32:	4299      	cmp	r1, r3
 8009b34:	d004      	beq.n	8009b40 <cleanup_stdio+0x30>
 8009b36:	4620      	mov	r0, r4
 8009b38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b3c:	f002 bb4e 	b.w	800c1dc <_fflush_r>
 8009b40:	bd10      	pop	{r4, pc}
 8009b42:	bf00      	nop
 8009b44:	20000788 	.word	0x20000788
 8009b48:	200007f0 	.word	0x200007f0
 8009b4c:	20000858 	.word	0x20000858

08009b50 <global_stdio_init.part.0>:
 8009b50:	b510      	push	{r4, lr}
 8009b52:	4b0b      	ldr	r3, [pc, #44]	@ (8009b80 <global_stdio_init.part.0+0x30>)
 8009b54:	4c0b      	ldr	r4, [pc, #44]	@ (8009b84 <global_stdio_init.part.0+0x34>)
 8009b56:	4a0c      	ldr	r2, [pc, #48]	@ (8009b88 <global_stdio_init.part.0+0x38>)
 8009b58:	601a      	str	r2, [r3, #0]
 8009b5a:	4620      	mov	r0, r4
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	2104      	movs	r1, #4
 8009b60:	f7ff ff94 	bl	8009a8c <std>
 8009b64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009b68:	2201      	movs	r2, #1
 8009b6a:	2109      	movs	r1, #9
 8009b6c:	f7ff ff8e 	bl	8009a8c <std>
 8009b70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009b74:	2202      	movs	r2, #2
 8009b76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b7a:	2112      	movs	r1, #18
 8009b7c:	f7ff bf86 	b.w	8009a8c <std>
 8009b80:	200008c0 	.word	0x200008c0
 8009b84:	20000788 	.word	0x20000788
 8009b88:	08009af9 	.word	0x08009af9

08009b8c <__sfp_lock_acquire>:
 8009b8c:	4801      	ldr	r0, [pc, #4]	@ (8009b94 <__sfp_lock_acquire+0x8>)
 8009b8e:	f000 b934 	b.w	8009dfa <__retarget_lock_acquire_recursive>
 8009b92:	bf00      	nop
 8009b94:	200008c9 	.word	0x200008c9

08009b98 <__sfp_lock_release>:
 8009b98:	4801      	ldr	r0, [pc, #4]	@ (8009ba0 <__sfp_lock_release+0x8>)
 8009b9a:	f000 b92f 	b.w	8009dfc <__retarget_lock_release_recursive>
 8009b9e:	bf00      	nop
 8009ba0:	200008c9 	.word	0x200008c9

08009ba4 <__sinit>:
 8009ba4:	b510      	push	{r4, lr}
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	f7ff fff0 	bl	8009b8c <__sfp_lock_acquire>
 8009bac:	6a23      	ldr	r3, [r4, #32]
 8009bae:	b11b      	cbz	r3, 8009bb8 <__sinit+0x14>
 8009bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bb4:	f7ff bff0 	b.w	8009b98 <__sfp_lock_release>
 8009bb8:	4b04      	ldr	r3, [pc, #16]	@ (8009bcc <__sinit+0x28>)
 8009bba:	6223      	str	r3, [r4, #32]
 8009bbc:	4b04      	ldr	r3, [pc, #16]	@ (8009bd0 <__sinit+0x2c>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d1f5      	bne.n	8009bb0 <__sinit+0xc>
 8009bc4:	f7ff ffc4 	bl	8009b50 <global_stdio_init.part.0>
 8009bc8:	e7f2      	b.n	8009bb0 <__sinit+0xc>
 8009bca:	bf00      	nop
 8009bcc:	08009b11 	.word	0x08009b11
 8009bd0:	200008c0 	.word	0x200008c0

08009bd4 <_fwalk_sglue>:
 8009bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bd8:	4607      	mov	r7, r0
 8009bda:	4688      	mov	r8, r1
 8009bdc:	4614      	mov	r4, r2
 8009bde:	2600      	movs	r6, #0
 8009be0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009be4:	f1b9 0901 	subs.w	r9, r9, #1
 8009be8:	d505      	bpl.n	8009bf6 <_fwalk_sglue+0x22>
 8009bea:	6824      	ldr	r4, [r4, #0]
 8009bec:	2c00      	cmp	r4, #0
 8009bee:	d1f7      	bne.n	8009be0 <_fwalk_sglue+0xc>
 8009bf0:	4630      	mov	r0, r6
 8009bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bf6:	89ab      	ldrh	r3, [r5, #12]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d907      	bls.n	8009c0c <_fwalk_sglue+0x38>
 8009bfc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c00:	3301      	adds	r3, #1
 8009c02:	d003      	beq.n	8009c0c <_fwalk_sglue+0x38>
 8009c04:	4629      	mov	r1, r5
 8009c06:	4638      	mov	r0, r7
 8009c08:	47c0      	blx	r8
 8009c0a:	4306      	orrs	r6, r0
 8009c0c:	3568      	adds	r5, #104	@ 0x68
 8009c0e:	e7e9      	b.n	8009be4 <_fwalk_sglue+0x10>

08009c10 <siprintf>:
 8009c10:	b40e      	push	{r1, r2, r3}
 8009c12:	b510      	push	{r4, lr}
 8009c14:	b09d      	sub	sp, #116	@ 0x74
 8009c16:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009c18:	9002      	str	r0, [sp, #8]
 8009c1a:	9006      	str	r0, [sp, #24]
 8009c1c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009c20:	480a      	ldr	r0, [pc, #40]	@ (8009c4c <siprintf+0x3c>)
 8009c22:	9107      	str	r1, [sp, #28]
 8009c24:	9104      	str	r1, [sp, #16]
 8009c26:	490a      	ldr	r1, [pc, #40]	@ (8009c50 <siprintf+0x40>)
 8009c28:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c2c:	9105      	str	r1, [sp, #20]
 8009c2e:	2400      	movs	r4, #0
 8009c30:	a902      	add	r1, sp, #8
 8009c32:	6800      	ldr	r0, [r0, #0]
 8009c34:	9301      	str	r3, [sp, #4]
 8009c36:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009c38:	f002 f950 	bl	800bedc <_svfiprintf_r>
 8009c3c:	9b02      	ldr	r3, [sp, #8]
 8009c3e:	701c      	strb	r4, [r3, #0]
 8009c40:	b01d      	add	sp, #116	@ 0x74
 8009c42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c46:	b003      	add	sp, #12
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	20000208 	.word	0x20000208
 8009c50:	ffff0208 	.word	0xffff0208

08009c54 <__sread>:
 8009c54:	b510      	push	{r4, lr}
 8009c56:	460c      	mov	r4, r1
 8009c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c5c:	f000 f87e 	bl	8009d5c <_read_r>
 8009c60:	2800      	cmp	r0, #0
 8009c62:	bfab      	itete	ge
 8009c64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009c66:	89a3      	ldrhlt	r3, [r4, #12]
 8009c68:	181b      	addge	r3, r3, r0
 8009c6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009c6e:	bfac      	ite	ge
 8009c70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009c72:	81a3      	strhlt	r3, [r4, #12]
 8009c74:	bd10      	pop	{r4, pc}

08009c76 <__swrite>:
 8009c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c7a:	461f      	mov	r7, r3
 8009c7c:	898b      	ldrh	r3, [r1, #12]
 8009c7e:	05db      	lsls	r3, r3, #23
 8009c80:	4605      	mov	r5, r0
 8009c82:	460c      	mov	r4, r1
 8009c84:	4616      	mov	r6, r2
 8009c86:	d505      	bpl.n	8009c94 <__swrite+0x1e>
 8009c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c8c:	2302      	movs	r3, #2
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f000 f852 	bl	8009d38 <_lseek_r>
 8009c94:	89a3      	ldrh	r3, [r4, #12]
 8009c96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c9e:	81a3      	strh	r3, [r4, #12]
 8009ca0:	4632      	mov	r2, r6
 8009ca2:	463b      	mov	r3, r7
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009caa:	f000 b869 	b.w	8009d80 <_write_r>

08009cae <__sseek>:
 8009cae:	b510      	push	{r4, lr}
 8009cb0:	460c      	mov	r4, r1
 8009cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cb6:	f000 f83f 	bl	8009d38 <_lseek_r>
 8009cba:	1c43      	adds	r3, r0, #1
 8009cbc:	89a3      	ldrh	r3, [r4, #12]
 8009cbe:	bf15      	itete	ne
 8009cc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009cc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009cc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009cca:	81a3      	strheq	r3, [r4, #12]
 8009ccc:	bf18      	it	ne
 8009cce:	81a3      	strhne	r3, [r4, #12]
 8009cd0:	bd10      	pop	{r4, pc}

08009cd2 <__sclose>:
 8009cd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cd6:	f000 b81f 	b.w	8009d18 <_close_r>

08009cda <memset>:
 8009cda:	4402      	add	r2, r0
 8009cdc:	4603      	mov	r3, r0
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d100      	bne.n	8009ce4 <memset+0xa>
 8009ce2:	4770      	bx	lr
 8009ce4:	f803 1b01 	strb.w	r1, [r3], #1
 8009ce8:	e7f9      	b.n	8009cde <memset+0x4>

08009cea <strncmp>:
 8009cea:	b510      	push	{r4, lr}
 8009cec:	b16a      	cbz	r2, 8009d0a <strncmp+0x20>
 8009cee:	3901      	subs	r1, #1
 8009cf0:	1884      	adds	r4, r0, r2
 8009cf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cf6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d103      	bne.n	8009d06 <strncmp+0x1c>
 8009cfe:	42a0      	cmp	r0, r4
 8009d00:	d001      	beq.n	8009d06 <strncmp+0x1c>
 8009d02:	2a00      	cmp	r2, #0
 8009d04:	d1f5      	bne.n	8009cf2 <strncmp+0x8>
 8009d06:	1ad0      	subs	r0, r2, r3
 8009d08:	bd10      	pop	{r4, pc}
 8009d0a:	4610      	mov	r0, r2
 8009d0c:	e7fc      	b.n	8009d08 <strncmp+0x1e>
	...

08009d10 <_localeconv_r>:
 8009d10:	4800      	ldr	r0, [pc, #0]	@ (8009d14 <_localeconv_r+0x4>)
 8009d12:	4770      	bx	lr
 8009d14:	2000018c 	.word	0x2000018c

08009d18 <_close_r>:
 8009d18:	b538      	push	{r3, r4, r5, lr}
 8009d1a:	4d06      	ldr	r5, [pc, #24]	@ (8009d34 <_close_r+0x1c>)
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	4604      	mov	r4, r0
 8009d20:	4608      	mov	r0, r1
 8009d22:	602b      	str	r3, [r5, #0]
 8009d24:	f7f9 f954 	bl	8002fd0 <_close>
 8009d28:	1c43      	adds	r3, r0, #1
 8009d2a:	d102      	bne.n	8009d32 <_close_r+0x1a>
 8009d2c:	682b      	ldr	r3, [r5, #0]
 8009d2e:	b103      	cbz	r3, 8009d32 <_close_r+0x1a>
 8009d30:	6023      	str	r3, [r4, #0]
 8009d32:	bd38      	pop	{r3, r4, r5, pc}
 8009d34:	200008c4 	.word	0x200008c4

08009d38 <_lseek_r>:
 8009d38:	b538      	push	{r3, r4, r5, lr}
 8009d3a:	4d07      	ldr	r5, [pc, #28]	@ (8009d58 <_lseek_r+0x20>)
 8009d3c:	4604      	mov	r4, r0
 8009d3e:	4608      	mov	r0, r1
 8009d40:	4611      	mov	r1, r2
 8009d42:	2200      	movs	r2, #0
 8009d44:	602a      	str	r2, [r5, #0]
 8009d46:	461a      	mov	r2, r3
 8009d48:	f7f9 f969 	bl	800301e <_lseek>
 8009d4c:	1c43      	adds	r3, r0, #1
 8009d4e:	d102      	bne.n	8009d56 <_lseek_r+0x1e>
 8009d50:	682b      	ldr	r3, [r5, #0]
 8009d52:	b103      	cbz	r3, 8009d56 <_lseek_r+0x1e>
 8009d54:	6023      	str	r3, [r4, #0]
 8009d56:	bd38      	pop	{r3, r4, r5, pc}
 8009d58:	200008c4 	.word	0x200008c4

08009d5c <_read_r>:
 8009d5c:	b538      	push	{r3, r4, r5, lr}
 8009d5e:	4d07      	ldr	r5, [pc, #28]	@ (8009d7c <_read_r+0x20>)
 8009d60:	4604      	mov	r4, r0
 8009d62:	4608      	mov	r0, r1
 8009d64:	4611      	mov	r1, r2
 8009d66:	2200      	movs	r2, #0
 8009d68:	602a      	str	r2, [r5, #0]
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	f7f9 f8f7 	bl	8002f5e <_read>
 8009d70:	1c43      	adds	r3, r0, #1
 8009d72:	d102      	bne.n	8009d7a <_read_r+0x1e>
 8009d74:	682b      	ldr	r3, [r5, #0]
 8009d76:	b103      	cbz	r3, 8009d7a <_read_r+0x1e>
 8009d78:	6023      	str	r3, [r4, #0]
 8009d7a:	bd38      	pop	{r3, r4, r5, pc}
 8009d7c:	200008c4 	.word	0x200008c4

08009d80 <_write_r>:
 8009d80:	b538      	push	{r3, r4, r5, lr}
 8009d82:	4d07      	ldr	r5, [pc, #28]	@ (8009da0 <_write_r+0x20>)
 8009d84:	4604      	mov	r4, r0
 8009d86:	4608      	mov	r0, r1
 8009d88:	4611      	mov	r1, r2
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	602a      	str	r2, [r5, #0]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	f7f9 f902 	bl	8002f98 <_write>
 8009d94:	1c43      	adds	r3, r0, #1
 8009d96:	d102      	bne.n	8009d9e <_write_r+0x1e>
 8009d98:	682b      	ldr	r3, [r5, #0]
 8009d9a:	b103      	cbz	r3, 8009d9e <_write_r+0x1e>
 8009d9c:	6023      	str	r3, [r4, #0]
 8009d9e:	bd38      	pop	{r3, r4, r5, pc}
 8009da0:	200008c4 	.word	0x200008c4

08009da4 <__errno>:
 8009da4:	4b01      	ldr	r3, [pc, #4]	@ (8009dac <__errno+0x8>)
 8009da6:	6818      	ldr	r0, [r3, #0]
 8009da8:	4770      	bx	lr
 8009daa:	bf00      	nop
 8009dac:	20000208 	.word	0x20000208

08009db0 <__libc_init_array>:
 8009db0:	b570      	push	{r4, r5, r6, lr}
 8009db2:	4d0d      	ldr	r5, [pc, #52]	@ (8009de8 <__libc_init_array+0x38>)
 8009db4:	4c0d      	ldr	r4, [pc, #52]	@ (8009dec <__libc_init_array+0x3c>)
 8009db6:	1b64      	subs	r4, r4, r5
 8009db8:	10a4      	asrs	r4, r4, #2
 8009dba:	2600      	movs	r6, #0
 8009dbc:	42a6      	cmp	r6, r4
 8009dbe:	d109      	bne.n	8009dd4 <__libc_init_array+0x24>
 8009dc0:	4d0b      	ldr	r5, [pc, #44]	@ (8009df0 <__libc_init_array+0x40>)
 8009dc2:	4c0c      	ldr	r4, [pc, #48]	@ (8009df4 <__libc_init_array+0x44>)
 8009dc4:	f002 fed8 	bl	800cb78 <_init>
 8009dc8:	1b64      	subs	r4, r4, r5
 8009dca:	10a4      	asrs	r4, r4, #2
 8009dcc:	2600      	movs	r6, #0
 8009dce:	42a6      	cmp	r6, r4
 8009dd0:	d105      	bne.n	8009dde <__libc_init_array+0x2e>
 8009dd2:	bd70      	pop	{r4, r5, r6, pc}
 8009dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dd8:	4798      	blx	r3
 8009dda:	3601      	adds	r6, #1
 8009ddc:	e7ee      	b.n	8009dbc <__libc_init_array+0xc>
 8009dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8009de2:	4798      	blx	r3
 8009de4:	3601      	adds	r6, #1
 8009de6:	e7f2      	b.n	8009dce <__libc_init_array+0x1e>
 8009de8:	0800d020 	.word	0x0800d020
 8009dec:	0800d020 	.word	0x0800d020
 8009df0:	0800d020 	.word	0x0800d020
 8009df4:	0800d024 	.word	0x0800d024

08009df8 <__retarget_lock_init_recursive>:
 8009df8:	4770      	bx	lr

08009dfa <__retarget_lock_acquire_recursive>:
 8009dfa:	4770      	bx	lr

08009dfc <__retarget_lock_release_recursive>:
 8009dfc:	4770      	bx	lr

08009dfe <memcpy>:
 8009dfe:	440a      	add	r2, r1
 8009e00:	4291      	cmp	r1, r2
 8009e02:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e06:	d100      	bne.n	8009e0a <memcpy+0xc>
 8009e08:	4770      	bx	lr
 8009e0a:	b510      	push	{r4, lr}
 8009e0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e14:	4291      	cmp	r1, r2
 8009e16:	d1f9      	bne.n	8009e0c <memcpy+0xe>
 8009e18:	bd10      	pop	{r4, pc}
 8009e1a:	0000      	movs	r0, r0
 8009e1c:	0000      	movs	r0, r0
	...

08009e20 <nan>:
 8009e20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009e28 <nan+0x8>
 8009e24:	4770      	bx	lr
 8009e26:	bf00      	nop
 8009e28:	00000000 	.word	0x00000000
 8009e2c:	7ff80000 	.word	0x7ff80000

08009e30 <nanf>:
 8009e30:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009e38 <nanf+0x8>
 8009e34:	4770      	bx	lr
 8009e36:	bf00      	nop
 8009e38:	7fc00000 	.word	0x7fc00000

08009e3c <__assert_func>:
 8009e3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e3e:	4614      	mov	r4, r2
 8009e40:	461a      	mov	r2, r3
 8009e42:	4b09      	ldr	r3, [pc, #36]	@ (8009e68 <__assert_func+0x2c>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4605      	mov	r5, r0
 8009e48:	68d8      	ldr	r0, [r3, #12]
 8009e4a:	b14c      	cbz	r4, 8009e60 <__assert_func+0x24>
 8009e4c:	4b07      	ldr	r3, [pc, #28]	@ (8009e6c <__assert_func+0x30>)
 8009e4e:	9100      	str	r1, [sp, #0]
 8009e50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e54:	4906      	ldr	r1, [pc, #24]	@ (8009e70 <__assert_func+0x34>)
 8009e56:	462b      	mov	r3, r5
 8009e58:	f002 f9e8 	bl	800c22c <fiprintf>
 8009e5c:	f002 fa22 	bl	800c2a4 <abort>
 8009e60:	4b04      	ldr	r3, [pc, #16]	@ (8009e74 <__assert_func+0x38>)
 8009e62:	461c      	mov	r4, r3
 8009e64:	e7f3      	b.n	8009e4e <__assert_func+0x12>
 8009e66:	bf00      	nop
 8009e68:	20000208 	.word	0x20000208
 8009e6c:	0800cc1b 	.word	0x0800cc1b
 8009e70:	0800cc28 	.word	0x0800cc28
 8009e74:	0800cc56 	.word	0x0800cc56

08009e78 <quorem>:
 8009e78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e7c:	6903      	ldr	r3, [r0, #16]
 8009e7e:	690c      	ldr	r4, [r1, #16]
 8009e80:	42a3      	cmp	r3, r4
 8009e82:	4607      	mov	r7, r0
 8009e84:	db7e      	blt.n	8009f84 <quorem+0x10c>
 8009e86:	3c01      	subs	r4, #1
 8009e88:	f101 0814 	add.w	r8, r1, #20
 8009e8c:	00a3      	lsls	r3, r4, #2
 8009e8e:	f100 0514 	add.w	r5, r0, #20
 8009e92:	9300      	str	r3, [sp, #0]
 8009e94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e98:	9301      	str	r3, [sp, #4]
 8009e9a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009eaa:	fbb2 f6f3 	udiv	r6, r2, r3
 8009eae:	d32e      	bcc.n	8009f0e <quorem+0x96>
 8009eb0:	f04f 0a00 	mov.w	sl, #0
 8009eb4:	46c4      	mov	ip, r8
 8009eb6:	46ae      	mov	lr, r5
 8009eb8:	46d3      	mov	fp, sl
 8009eba:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009ebe:	b298      	uxth	r0, r3
 8009ec0:	fb06 a000 	mla	r0, r6, r0, sl
 8009ec4:	0c02      	lsrs	r2, r0, #16
 8009ec6:	0c1b      	lsrs	r3, r3, #16
 8009ec8:	fb06 2303 	mla	r3, r6, r3, r2
 8009ecc:	f8de 2000 	ldr.w	r2, [lr]
 8009ed0:	b280      	uxth	r0, r0
 8009ed2:	b292      	uxth	r2, r2
 8009ed4:	1a12      	subs	r2, r2, r0
 8009ed6:	445a      	add	r2, fp
 8009ed8:	f8de 0000 	ldr.w	r0, [lr]
 8009edc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009ee6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009eea:	b292      	uxth	r2, r2
 8009eec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009ef0:	45e1      	cmp	r9, ip
 8009ef2:	f84e 2b04 	str.w	r2, [lr], #4
 8009ef6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009efa:	d2de      	bcs.n	8009eba <quorem+0x42>
 8009efc:	9b00      	ldr	r3, [sp, #0]
 8009efe:	58eb      	ldr	r3, [r5, r3]
 8009f00:	b92b      	cbnz	r3, 8009f0e <quorem+0x96>
 8009f02:	9b01      	ldr	r3, [sp, #4]
 8009f04:	3b04      	subs	r3, #4
 8009f06:	429d      	cmp	r5, r3
 8009f08:	461a      	mov	r2, r3
 8009f0a:	d32f      	bcc.n	8009f6c <quorem+0xf4>
 8009f0c:	613c      	str	r4, [r7, #16]
 8009f0e:	4638      	mov	r0, r7
 8009f10:	f001 fd12 	bl	800b938 <__mcmp>
 8009f14:	2800      	cmp	r0, #0
 8009f16:	db25      	blt.n	8009f64 <quorem+0xec>
 8009f18:	4629      	mov	r1, r5
 8009f1a:	2000      	movs	r0, #0
 8009f1c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f20:	f8d1 c000 	ldr.w	ip, [r1]
 8009f24:	fa1f fe82 	uxth.w	lr, r2
 8009f28:	fa1f f38c 	uxth.w	r3, ip
 8009f2c:	eba3 030e 	sub.w	r3, r3, lr
 8009f30:	4403      	add	r3, r0
 8009f32:	0c12      	lsrs	r2, r2, #16
 8009f34:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009f38:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f42:	45c1      	cmp	r9, r8
 8009f44:	f841 3b04 	str.w	r3, [r1], #4
 8009f48:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009f4c:	d2e6      	bcs.n	8009f1c <quorem+0xa4>
 8009f4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f56:	b922      	cbnz	r2, 8009f62 <quorem+0xea>
 8009f58:	3b04      	subs	r3, #4
 8009f5a:	429d      	cmp	r5, r3
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	d30b      	bcc.n	8009f78 <quorem+0x100>
 8009f60:	613c      	str	r4, [r7, #16]
 8009f62:	3601      	adds	r6, #1
 8009f64:	4630      	mov	r0, r6
 8009f66:	b003      	add	sp, #12
 8009f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f6c:	6812      	ldr	r2, [r2, #0]
 8009f6e:	3b04      	subs	r3, #4
 8009f70:	2a00      	cmp	r2, #0
 8009f72:	d1cb      	bne.n	8009f0c <quorem+0x94>
 8009f74:	3c01      	subs	r4, #1
 8009f76:	e7c6      	b.n	8009f06 <quorem+0x8e>
 8009f78:	6812      	ldr	r2, [r2, #0]
 8009f7a:	3b04      	subs	r3, #4
 8009f7c:	2a00      	cmp	r2, #0
 8009f7e:	d1ef      	bne.n	8009f60 <quorem+0xe8>
 8009f80:	3c01      	subs	r4, #1
 8009f82:	e7ea      	b.n	8009f5a <quorem+0xe2>
 8009f84:	2000      	movs	r0, #0
 8009f86:	e7ee      	b.n	8009f66 <quorem+0xee>

08009f88 <_dtoa_r>:
 8009f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f8c:	69c7      	ldr	r7, [r0, #28]
 8009f8e:	b097      	sub	sp, #92	@ 0x5c
 8009f90:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009f94:	ec55 4b10 	vmov	r4, r5, d0
 8009f98:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009f9a:	9107      	str	r1, [sp, #28]
 8009f9c:	4681      	mov	r9, r0
 8009f9e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009fa0:	9311      	str	r3, [sp, #68]	@ 0x44
 8009fa2:	b97f      	cbnz	r7, 8009fc4 <_dtoa_r+0x3c>
 8009fa4:	2010      	movs	r0, #16
 8009fa6:	f001 f943 	bl	800b230 <malloc>
 8009faa:	4602      	mov	r2, r0
 8009fac:	f8c9 001c 	str.w	r0, [r9, #28]
 8009fb0:	b920      	cbnz	r0, 8009fbc <_dtoa_r+0x34>
 8009fb2:	4ba9      	ldr	r3, [pc, #676]	@ (800a258 <_dtoa_r+0x2d0>)
 8009fb4:	21ef      	movs	r1, #239	@ 0xef
 8009fb6:	48a9      	ldr	r0, [pc, #676]	@ (800a25c <_dtoa_r+0x2d4>)
 8009fb8:	f7ff ff40 	bl	8009e3c <__assert_func>
 8009fbc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009fc0:	6007      	str	r7, [r0, #0]
 8009fc2:	60c7      	str	r7, [r0, #12]
 8009fc4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009fc8:	6819      	ldr	r1, [r3, #0]
 8009fca:	b159      	cbz	r1, 8009fe4 <_dtoa_r+0x5c>
 8009fcc:	685a      	ldr	r2, [r3, #4]
 8009fce:	604a      	str	r2, [r1, #4]
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	4093      	lsls	r3, r2
 8009fd4:	608b      	str	r3, [r1, #8]
 8009fd6:	4648      	mov	r0, r9
 8009fd8:	f001 fa32 	bl	800b440 <_Bfree>
 8009fdc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	601a      	str	r2, [r3, #0]
 8009fe4:	1e2b      	subs	r3, r5, #0
 8009fe6:	bfb9      	ittee	lt
 8009fe8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009fec:	9305      	strlt	r3, [sp, #20]
 8009fee:	2300      	movge	r3, #0
 8009ff0:	6033      	strge	r3, [r6, #0]
 8009ff2:	9f05      	ldr	r7, [sp, #20]
 8009ff4:	4b9a      	ldr	r3, [pc, #616]	@ (800a260 <_dtoa_r+0x2d8>)
 8009ff6:	bfbc      	itt	lt
 8009ff8:	2201      	movlt	r2, #1
 8009ffa:	6032      	strlt	r2, [r6, #0]
 8009ffc:	43bb      	bics	r3, r7
 8009ffe:	d112      	bne.n	800a026 <_dtoa_r+0x9e>
 800a000:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a002:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a006:	6013      	str	r3, [r2, #0]
 800a008:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a00c:	4323      	orrs	r3, r4
 800a00e:	f000 855a 	beq.w	800aac6 <_dtoa_r+0xb3e>
 800a012:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a014:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a274 <_dtoa_r+0x2ec>
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f000 855c 	beq.w	800aad6 <_dtoa_r+0xb4e>
 800a01e:	f10a 0303 	add.w	r3, sl, #3
 800a022:	f000 bd56 	b.w	800aad2 <_dtoa_r+0xb4a>
 800a026:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a02a:	2200      	movs	r2, #0
 800a02c:	ec51 0b17 	vmov	r0, r1, d7
 800a030:	2300      	movs	r3, #0
 800a032:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a036:	f7f6 fd4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800a03a:	4680      	mov	r8, r0
 800a03c:	b158      	cbz	r0, 800a056 <_dtoa_r+0xce>
 800a03e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a040:	2301      	movs	r3, #1
 800a042:	6013      	str	r3, [r2, #0]
 800a044:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a046:	b113      	cbz	r3, 800a04e <_dtoa_r+0xc6>
 800a048:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a04a:	4b86      	ldr	r3, [pc, #536]	@ (800a264 <_dtoa_r+0x2dc>)
 800a04c:	6013      	str	r3, [r2, #0]
 800a04e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a278 <_dtoa_r+0x2f0>
 800a052:	f000 bd40 	b.w	800aad6 <_dtoa_r+0xb4e>
 800a056:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a05a:	aa14      	add	r2, sp, #80	@ 0x50
 800a05c:	a915      	add	r1, sp, #84	@ 0x54
 800a05e:	4648      	mov	r0, r9
 800a060:	f001 fd8a 	bl	800bb78 <__d2b>
 800a064:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a068:	9002      	str	r0, [sp, #8]
 800a06a:	2e00      	cmp	r6, #0
 800a06c:	d078      	beq.n	800a160 <_dtoa_r+0x1d8>
 800a06e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a070:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a078:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a07c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a080:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a084:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a088:	4619      	mov	r1, r3
 800a08a:	2200      	movs	r2, #0
 800a08c:	4b76      	ldr	r3, [pc, #472]	@ (800a268 <_dtoa_r+0x2e0>)
 800a08e:	f7f6 f903 	bl	8000298 <__aeabi_dsub>
 800a092:	a36b      	add	r3, pc, #428	@ (adr r3, 800a240 <_dtoa_r+0x2b8>)
 800a094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a098:	f7f6 fab6 	bl	8000608 <__aeabi_dmul>
 800a09c:	a36a      	add	r3, pc, #424	@ (adr r3, 800a248 <_dtoa_r+0x2c0>)
 800a09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a2:	f7f6 f8fb 	bl	800029c <__adddf3>
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	4630      	mov	r0, r6
 800a0aa:	460d      	mov	r5, r1
 800a0ac:	f7f6 fa42 	bl	8000534 <__aeabi_i2d>
 800a0b0:	a367      	add	r3, pc, #412	@ (adr r3, 800a250 <_dtoa_r+0x2c8>)
 800a0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b6:	f7f6 faa7 	bl	8000608 <__aeabi_dmul>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	460b      	mov	r3, r1
 800a0be:	4620      	mov	r0, r4
 800a0c0:	4629      	mov	r1, r5
 800a0c2:	f7f6 f8eb 	bl	800029c <__adddf3>
 800a0c6:	4604      	mov	r4, r0
 800a0c8:	460d      	mov	r5, r1
 800a0ca:	f7f6 fd4d 	bl	8000b68 <__aeabi_d2iz>
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	4607      	mov	r7, r0
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	4620      	mov	r0, r4
 800a0d6:	4629      	mov	r1, r5
 800a0d8:	f7f6 fd08 	bl	8000aec <__aeabi_dcmplt>
 800a0dc:	b140      	cbz	r0, 800a0f0 <_dtoa_r+0x168>
 800a0de:	4638      	mov	r0, r7
 800a0e0:	f7f6 fa28 	bl	8000534 <__aeabi_i2d>
 800a0e4:	4622      	mov	r2, r4
 800a0e6:	462b      	mov	r3, r5
 800a0e8:	f7f6 fcf6 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0ec:	b900      	cbnz	r0, 800a0f0 <_dtoa_r+0x168>
 800a0ee:	3f01      	subs	r7, #1
 800a0f0:	2f16      	cmp	r7, #22
 800a0f2:	d852      	bhi.n	800a19a <_dtoa_r+0x212>
 800a0f4:	4b5d      	ldr	r3, [pc, #372]	@ (800a26c <_dtoa_r+0x2e4>)
 800a0f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a102:	f7f6 fcf3 	bl	8000aec <__aeabi_dcmplt>
 800a106:	2800      	cmp	r0, #0
 800a108:	d049      	beq.n	800a19e <_dtoa_r+0x216>
 800a10a:	3f01      	subs	r7, #1
 800a10c:	2300      	movs	r3, #0
 800a10e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a110:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a112:	1b9b      	subs	r3, r3, r6
 800a114:	1e5a      	subs	r2, r3, #1
 800a116:	bf45      	ittet	mi
 800a118:	f1c3 0301 	rsbmi	r3, r3, #1
 800a11c:	9300      	strmi	r3, [sp, #0]
 800a11e:	2300      	movpl	r3, #0
 800a120:	2300      	movmi	r3, #0
 800a122:	9206      	str	r2, [sp, #24]
 800a124:	bf54      	ite	pl
 800a126:	9300      	strpl	r3, [sp, #0]
 800a128:	9306      	strmi	r3, [sp, #24]
 800a12a:	2f00      	cmp	r7, #0
 800a12c:	db39      	blt.n	800a1a2 <_dtoa_r+0x21a>
 800a12e:	9b06      	ldr	r3, [sp, #24]
 800a130:	970d      	str	r7, [sp, #52]	@ 0x34
 800a132:	443b      	add	r3, r7
 800a134:	9306      	str	r3, [sp, #24]
 800a136:	2300      	movs	r3, #0
 800a138:	9308      	str	r3, [sp, #32]
 800a13a:	9b07      	ldr	r3, [sp, #28]
 800a13c:	2b09      	cmp	r3, #9
 800a13e:	d863      	bhi.n	800a208 <_dtoa_r+0x280>
 800a140:	2b05      	cmp	r3, #5
 800a142:	bfc4      	itt	gt
 800a144:	3b04      	subgt	r3, #4
 800a146:	9307      	strgt	r3, [sp, #28]
 800a148:	9b07      	ldr	r3, [sp, #28]
 800a14a:	f1a3 0302 	sub.w	r3, r3, #2
 800a14e:	bfcc      	ite	gt
 800a150:	2400      	movgt	r4, #0
 800a152:	2401      	movle	r4, #1
 800a154:	2b03      	cmp	r3, #3
 800a156:	d863      	bhi.n	800a220 <_dtoa_r+0x298>
 800a158:	e8df f003 	tbb	[pc, r3]
 800a15c:	2b375452 	.word	0x2b375452
 800a160:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a164:	441e      	add	r6, r3
 800a166:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a16a:	2b20      	cmp	r3, #32
 800a16c:	bfc1      	itttt	gt
 800a16e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a172:	409f      	lslgt	r7, r3
 800a174:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a178:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a17c:	bfd6      	itet	le
 800a17e:	f1c3 0320 	rsble	r3, r3, #32
 800a182:	ea47 0003 	orrgt.w	r0, r7, r3
 800a186:	fa04 f003 	lslle.w	r0, r4, r3
 800a18a:	f7f6 f9c3 	bl	8000514 <__aeabi_ui2d>
 800a18e:	2201      	movs	r2, #1
 800a190:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a194:	3e01      	subs	r6, #1
 800a196:	9212      	str	r2, [sp, #72]	@ 0x48
 800a198:	e776      	b.n	800a088 <_dtoa_r+0x100>
 800a19a:	2301      	movs	r3, #1
 800a19c:	e7b7      	b.n	800a10e <_dtoa_r+0x186>
 800a19e:	9010      	str	r0, [sp, #64]	@ 0x40
 800a1a0:	e7b6      	b.n	800a110 <_dtoa_r+0x188>
 800a1a2:	9b00      	ldr	r3, [sp, #0]
 800a1a4:	1bdb      	subs	r3, r3, r7
 800a1a6:	9300      	str	r3, [sp, #0]
 800a1a8:	427b      	negs	r3, r7
 800a1aa:	9308      	str	r3, [sp, #32]
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	930d      	str	r3, [sp, #52]	@ 0x34
 800a1b0:	e7c3      	b.n	800a13a <_dtoa_r+0x1b2>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a1b8:	eb07 0b03 	add.w	fp, r7, r3
 800a1bc:	f10b 0301 	add.w	r3, fp, #1
 800a1c0:	2b01      	cmp	r3, #1
 800a1c2:	9303      	str	r3, [sp, #12]
 800a1c4:	bfb8      	it	lt
 800a1c6:	2301      	movlt	r3, #1
 800a1c8:	e006      	b.n	800a1d8 <_dtoa_r+0x250>
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	dd28      	ble.n	800a226 <_dtoa_r+0x29e>
 800a1d4:	469b      	mov	fp, r3
 800a1d6:	9303      	str	r3, [sp, #12]
 800a1d8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a1dc:	2100      	movs	r1, #0
 800a1de:	2204      	movs	r2, #4
 800a1e0:	f102 0514 	add.w	r5, r2, #20
 800a1e4:	429d      	cmp	r5, r3
 800a1e6:	d926      	bls.n	800a236 <_dtoa_r+0x2ae>
 800a1e8:	6041      	str	r1, [r0, #4]
 800a1ea:	4648      	mov	r0, r9
 800a1ec:	f001 f8e8 	bl	800b3c0 <_Balloc>
 800a1f0:	4682      	mov	sl, r0
 800a1f2:	2800      	cmp	r0, #0
 800a1f4:	d142      	bne.n	800a27c <_dtoa_r+0x2f4>
 800a1f6:	4b1e      	ldr	r3, [pc, #120]	@ (800a270 <_dtoa_r+0x2e8>)
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	f240 11af 	movw	r1, #431	@ 0x1af
 800a1fe:	e6da      	b.n	8009fb6 <_dtoa_r+0x2e>
 800a200:	2300      	movs	r3, #0
 800a202:	e7e3      	b.n	800a1cc <_dtoa_r+0x244>
 800a204:	2300      	movs	r3, #0
 800a206:	e7d5      	b.n	800a1b4 <_dtoa_r+0x22c>
 800a208:	2401      	movs	r4, #1
 800a20a:	2300      	movs	r3, #0
 800a20c:	9307      	str	r3, [sp, #28]
 800a20e:	9409      	str	r4, [sp, #36]	@ 0x24
 800a210:	f04f 3bff 	mov.w	fp, #4294967295
 800a214:	2200      	movs	r2, #0
 800a216:	f8cd b00c 	str.w	fp, [sp, #12]
 800a21a:	2312      	movs	r3, #18
 800a21c:	920c      	str	r2, [sp, #48]	@ 0x30
 800a21e:	e7db      	b.n	800a1d8 <_dtoa_r+0x250>
 800a220:	2301      	movs	r3, #1
 800a222:	9309      	str	r3, [sp, #36]	@ 0x24
 800a224:	e7f4      	b.n	800a210 <_dtoa_r+0x288>
 800a226:	f04f 0b01 	mov.w	fp, #1
 800a22a:	f8cd b00c 	str.w	fp, [sp, #12]
 800a22e:	465b      	mov	r3, fp
 800a230:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a234:	e7d0      	b.n	800a1d8 <_dtoa_r+0x250>
 800a236:	3101      	adds	r1, #1
 800a238:	0052      	lsls	r2, r2, #1
 800a23a:	e7d1      	b.n	800a1e0 <_dtoa_r+0x258>
 800a23c:	f3af 8000 	nop.w
 800a240:	636f4361 	.word	0x636f4361
 800a244:	3fd287a7 	.word	0x3fd287a7
 800a248:	8b60c8b3 	.word	0x8b60c8b3
 800a24c:	3fc68a28 	.word	0x3fc68a28
 800a250:	509f79fb 	.word	0x509f79fb
 800a254:	3fd34413 	.word	0x3fd34413
 800a258:	0800cc64 	.word	0x0800cc64
 800a25c:	0800cc7b 	.word	0x0800cc7b
 800a260:	7ff00000 	.word	0x7ff00000
 800a264:	0800cbeb 	.word	0x0800cbeb
 800a268:	3ff80000 	.word	0x3ff80000
 800a26c:	0800ce38 	.word	0x0800ce38
 800a270:	0800ccd3 	.word	0x0800ccd3
 800a274:	0800cc60 	.word	0x0800cc60
 800a278:	0800cbea 	.word	0x0800cbea
 800a27c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a280:	6018      	str	r0, [r3, #0]
 800a282:	9b03      	ldr	r3, [sp, #12]
 800a284:	2b0e      	cmp	r3, #14
 800a286:	f200 80a1 	bhi.w	800a3cc <_dtoa_r+0x444>
 800a28a:	2c00      	cmp	r4, #0
 800a28c:	f000 809e 	beq.w	800a3cc <_dtoa_r+0x444>
 800a290:	2f00      	cmp	r7, #0
 800a292:	dd33      	ble.n	800a2fc <_dtoa_r+0x374>
 800a294:	4b9c      	ldr	r3, [pc, #624]	@ (800a508 <_dtoa_r+0x580>)
 800a296:	f007 020f 	and.w	r2, r7, #15
 800a29a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a29e:	ed93 7b00 	vldr	d7, [r3]
 800a2a2:	05f8      	lsls	r0, r7, #23
 800a2a4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a2a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a2ac:	d516      	bpl.n	800a2dc <_dtoa_r+0x354>
 800a2ae:	4b97      	ldr	r3, [pc, #604]	@ (800a50c <_dtoa_r+0x584>)
 800a2b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a2b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a2b8:	f7f6 fad0 	bl	800085c <__aeabi_ddiv>
 800a2bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2c0:	f004 040f 	and.w	r4, r4, #15
 800a2c4:	2603      	movs	r6, #3
 800a2c6:	4d91      	ldr	r5, [pc, #580]	@ (800a50c <_dtoa_r+0x584>)
 800a2c8:	b954      	cbnz	r4, 800a2e0 <_dtoa_r+0x358>
 800a2ca:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a2ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a2d2:	f7f6 fac3 	bl	800085c <__aeabi_ddiv>
 800a2d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2da:	e028      	b.n	800a32e <_dtoa_r+0x3a6>
 800a2dc:	2602      	movs	r6, #2
 800a2de:	e7f2      	b.n	800a2c6 <_dtoa_r+0x33e>
 800a2e0:	07e1      	lsls	r1, r4, #31
 800a2e2:	d508      	bpl.n	800a2f6 <_dtoa_r+0x36e>
 800a2e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a2e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a2ec:	f7f6 f98c 	bl	8000608 <__aeabi_dmul>
 800a2f0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a2f4:	3601      	adds	r6, #1
 800a2f6:	1064      	asrs	r4, r4, #1
 800a2f8:	3508      	adds	r5, #8
 800a2fa:	e7e5      	b.n	800a2c8 <_dtoa_r+0x340>
 800a2fc:	f000 80af 	beq.w	800a45e <_dtoa_r+0x4d6>
 800a300:	427c      	negs	r4, r7
 800a302:	4b81      	ldr	r3, [pc, #516]	@ (800a508 <_dtoa_r+0x580>)
 800a304:	4d81      	ldr	r5, [pc, #516]	@ (800a50c <_dtoa_r+0x584>)
 800a306:	f004 020f 	and.w	r2, r4, #15
 800a30a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a312:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a316:	f7f6 f977 	bl	8000608 <__aeabi_dmul>
 800a31a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a31e:	1124      	asrs	r4, r4, #4
 800a320:	2300      	movs	r3, #0
 800a322:	2602      	movs	r6, #2
 800a324:	2c00      	cmp	r4, #0
 800a326:	f040 808f 	bne.w	800a448 <_dtoa_r+0x4c0>
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d1d3      	bne.n	800a2d6 <_dtoa_r+0x34e>
 800a32e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a330:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a334:	2b00      	cmp	r3, #0
 800a336:	f000 8094 	beq.w	800a462 <_dtoa_r+0x4da>
 800a33a:	4b75      	ldr	r3, [pc, #468]	@ (800a510 <_dtoa_r+0x588>)
 800a33c:	2200      	movs	r2, #0
 800a33e:	4620      	mov	r0, r4
 800a340:	4629      	mov	r1, r5
 800a342:	f7f6 fbd3 	bl	8000aec <__aeabi_dcmplt>
 800a346:	2800      	cmp	r0, #0
 800a348:	f000 808b 	beq.w	800a462 <_dtoa_r+0x4da>
 800a34c:	9b03      	ldr	r3, [sp, #12]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	f000 8087 	beq.w	800a462 <_dtoa_r+0x4da>
 800a354:	f1bb 0f00 	cmp.w	fp, #0
 800a358:	dd34      	ble.n	800a3c4 <_dtoa_r+0x43c>
 800a35a:	4620      	mov	r0, r4
 800a35c:	4b6d      	ldr	r3, [pc, #436]	@ (800a514 <_dtoa_r+0x58c>)
 800a35e:	2200      	movs	r2, #0
 800a360:	4629      	mov	r1, r5
 800a362:	f7f6 f951 	bl	8000608 <__aeabi_dmul>
 800a366:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a36a:	f107 38ff 	add.w	r8, r7, #4294967295
 800a36e:	3601      	adds	r6, #1
 800a370:	465c      	mov	r4, fp
 800a372:	4630      	mov	r0, r6
 800a374:	f7f6 f8de 	bl	8000534 <__aeabi_i2d>
 800a378:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a37c:	f7f6 f944 	bl	8000608 <__aeabi_dmul>
 800a380:	4b65      	ldr	r3, [pc, #404]	@ (800a518 <_dtoa_r+0x590>)
 800a382:	2200      	movs	r2, #0
 800a384:	f7f5 ff8a 	bl	800029c <__adddf3>
 800a388:	4605      	mov	r5, r0
 800a38a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a38e:	2c00      	cmp	r4, #0
 800a390:	d16a      	bne.n	800a468 <_dtoa_r+0x4e0>
 800a392:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a396:	4b61      	ldr	r3, [pc, #388]	@ (800a51c <_dtoa_r+0x594>)
 800a398:	2200      	movs	r2, #0
 800a39a:	f7f5 ff7d 	bl	8000298 <__aeabi_dsub>
 800a39e:	4602      	mov	r2, r0
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a3a6:	462a      	mov	r2, r5
 800a3a8:	4633      	mov	r3, r6
 800a3aa:	f7f6 fbbd 	bl	8000b28 <__aeabi_dcmpgt>
 800a3ae:	2800      	cmp	r0, #0
 800a3b0:	f040 8298 	bne.w	800a8e4 <_dtoa_r+0x95c>
 800a3b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3b8:	462a      	mov	r2, r5
 800a3ba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a3be:	f7f6 fb95 	bl	8000aec <__aeabi_dcmplt>
 800a3c2:	bb38      	cbnz	r0, 800a414 <_dtoa_r+0x48c>
 800a3c4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a3c8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a3cc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	f2c0 8157 	blt.w	800a682 <_dtoa_r+0x6fa>
 800a3d4:	2f0e      	cmp	r7, #14
 800a3d6:	f300 8154 	bgt.w	800a682 <_dtoa_r+0x6fa>
 800a3da:	4b4b      	ldr	r3, [pc, #300]	@ (800a508 <_dtoa_r+0x580>)
 800a3dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a3e0:	ed93 7b00 	vldr	d7, [r3]
 800a3e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	ed8d 7b00 	vstr	d7, [sp]
 800a3ec:	f280 80e5 	bge.w	800a5ba <_dtoa_r+0x632>
 800a3f0:	9b03      	ldr	r3, [sp, #12]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	f300 80e1 	bgt.w	800a5ba <_dtoa_r+0x632>
 800a3f8:	d10c      	bne.n	800a414 <_dtoa_r+0x48c>
 800a3fa:	4b48      	ldr	r3, [pc, #288]	@ (800a51c <_dtoa_r+0x594>)
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	ec51 0b17 	vmov	r0, r1, d7
 800a402:	f7f6 f901 	bl	8000608 <__aeabi_dmul>
 800a406:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a40a:	f7f6 fb83 	bl	8000b14 <__aeabi_dcmpge>
 800a40e:	2800      	cmp	r0, #0
 800a410:	f000 8266 	beq.w	800a8e0 <_dtoa_r+0x958>
 800a414:	2400      	movs	r4, #0
 800a416:	4625      	mov	r5, r4
 800a418:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a41a:	4656      	mov	r6, sl
 800a41c:	ea6f 0803 	mvn.w	r8, r3
 800a420:	2700      	movs	r7, #0
 800a422:	4621      	mov	r1, r4
 800a424:	4648      	mov	r0, r9
 800a426:	f001 f80b 	bl	800b440 <_Bfree>
 800a42a:	2d00      	cmp	r5, #0
 800a42c:	f000 80bd 	beq.w	800a5aa <_dtoa_r+0x622>
 800a430:	b12f      	cbz	r7, 800a43e <_dtoa_r+0x4b6>
 800a432:	42af      	cmp	r7, r5
 800a434:	d003      	beq.n	800a43e <_dtoa_r+0x4b6>
 800a436:	4639      	mov	r1, r7
 800a438:	4648      	mov	r0, r9
 800a43a:	f001 f801 	bl	800b440 <_Bfree>
 800a43e:	4629      	mov	r1, r5
 800a440:	4648      	mov	r0, r9
 800a442:	f000 fffd 	bl	800b440 <_Bfree>
 800a446:	e0b0      	b.n	800a5aa <_dtoa_r+0x622>
 800a448:	07e2      	lsls	r2, r4, #31
 800a44a:	d505      	bpl.n	800a458 <_dtoa_r+0x4d0>
 800a44c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a450:	f7f6 f8da 	bl	8000608 <__aeabi_dmul>
 800a454:	3601      	adds	r6, #1
 800a456:	2301      	movs	r3, #1
 800a458:	1064      	asrs	r4, r4, #1
 800a45a:	3508      	adds	r5, #8
 800a45c:	e762      	b.n	800a324 <_dtoa_r+0x39c>
 800a45e:	2602      	movs	r6, #2
 800a460:	e765      	b.n	800a32e <_dtoa_r+0x3a6>
 800a462:	9c03      	ldr	r4, [sp, #12]
 800a464:	46b8      	mov	r8, r7
 800a466:	e784      	b.n	800a372 <_dtoa_r+0x3ea>
 800a468:	4b27      	ldr	r3, [pc, #156]	@ (800a508 <_dtoa_r+0x580>)
 800a46a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a46c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a470:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a474:	4454      	add	r4, sl
 800a476:	2900      	cmp	r1, #0
 800a478:	d054      	beq.n	800a524 <_dtoa_r+0x59c>
 800a47a:	4929      	ldr	r1, [pc, #164]	@ (800a520 <_dtoa_r+0x598>)
 800a47c:	2000      	movs	r0, #0
 800a47e:	f7f6 f9ed 	bl	800085c <__aeabi_ddiv>
 800a482:	4633      	mov	r3, r6
 800a484:	462a      	mov	r2, r5
 800a486:	f7f5 ff07 	bl	8000298 <__aeabi_dsub>
 800a48a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a48e:	4656      	mov	r6, sl
 800a490:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a494:	f7f6 fb68 	bl	8000b68 <__aeabi_d2iz>
 800a498:	4605      	mov	r5, r0
 800a49a:	f7f6 f84b 	bl	8000534 <__aeabi_i2d>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4a6:	f7f5 fef7 	bl	8000298 <__aeabi_dsub>
 800a4aa:	3530      	adds	r5, #48	@ 0x30
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	460b      	mov	r3, r1
 800a4b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a4b4:	f806 5b01 	strb.w	r5, [r6], #1
 800a4b8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a4bc:	f7f6 fb16 	bl	8000aec <__aeabi_dcmplt>
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	d172      	bne.n	800a5aa <_dtoa_r+0x622>
 800a4c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a4c8:	4911      	ldr	r1, [pc, #68]	@ (800a510 <_dtoa_r+0x588>)
 800a4ca:	2000      	movs	r0, #0
 800a4cc:	f7f5 fee4 	bl	8000298 <__aeabi_dsub>
 800a4d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a4d4:	f7f6 fb0a 	bl	8000aec <__aeabi_dcmplt>
 800a4d8:	2800      	cmp	r0, #0
 800a4da:	f040 80b4 	bne.w	800a646 <_dtoa_r+0x6be>
 800a4de:	42a6      	cmp	r6, r4
 800a4e0:	f43f af70 	beq.w	800a3c4 <_dtoa_r+0x43c>
 800a4e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a4e8:	4b0a      	ldr	r3, [pc, #40]	@ (800a514 <_dtoa_r+0x58c>)
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f7f6 f88c 	bl	8000608 <__aeabi_dmul>
 800a4f0:	4b08      	ldr	r3, [pc, #32]	@ (800a514 <_dtoa_r+0x58c>)
 800a4f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4fc:	f7f6 f884 	bl	8000608 <__aeabi_dmul>
 800a500:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a504:	e7c4      	b.n	800a490 <_dtoa_r+0x508>
 800a506:	bf00      	nop
 800a508:	0800ce38 	.word	0x0800ce38
 800a50c:	0800ce10 	.word	0x0800ce10
 800a510:	3ff00000 	.word	0x3ff00000
 800a514:	40240000 	.word	0x40240000
 800a518:	401c0000 	.word	0x401c0000
 800a51c:	40140000 	.word	0x40140000
 800a520:	3fe00000 	.word	0x3fe00000
 800a524:	4631      	mov	r1, r6
 800a526:	4628      	mov	r0, r5
 800a528:	f7f6 f86e 	bl	8000608 <__aeabi_dmul>
 800a52c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a530:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a532:	4656      	mov	r6, sl
 800a534:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a538:	f7f6 fb16 	bl	8000b68 <__aeabi_d2iz>
 800a53c:	4605      	mov	r5, r0
 800a53e:	f7f5 fff9 	bl	8000534 <__aeabi_i2d>
 800a542:	4602      	mov	r2, r0
 800a544:	460b      	mov	r3, r1
 800a546:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a54a:	f7f5 fea5 	bl	8000298 <__aeabi_dsub>
 800a54e:	3530      	adds	r5, #48	@ 0x30
 800a550:	f806 5b01 	strb.w	r5, [r6], #1
 800a554:	4602      	mov	r2, r0
 800a556:	460b      	mov	r3, r1
 800a558:	42a6      	cmp	r6, r4
 800a55a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a55e:	f04f 0200 	mov.w	r2, #0
 800a562:	d124      	bne.n	800a5ae <_dtoa_r+0x626>
 800a564:	4baf      	ldr	r3, [pc, #700]	@ (800a824 <_dtoa_r+0x89c>)
 800a566:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a56a:	f7f5 fe97 	bl	800029c <__adddf3>
 800a56e:	4602      	mov	r2, r0
 800a570:	460b      	mov	r3, r1
 800a572:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a576:	f7f6 fad7 	bl	8000b28 <__aeabi_dcmpgt>
 800a57a:	2800      	cmp	r0, #0
 800a57c:	d163      	bne.n	800a646 <_dtoa_r+0x6be>
 800a57e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a582:	49a8      	ldr	r1, [pc, #672]	@ (800a824 <_dtoa_r+0x89c>)
 800a584:	2000      	movs	r0, #0
 800a586:	f7f5 fe87 	bl	8000298 <__aeabi_dsub>
 800a58a:	4602      	mov	r2, r0
 800a58c:	460b      	mov	r3, r1
 800a58e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a592:	f7f6 faab 	bl	8000aec <__aeabi_dcmplt>
 800a596:	2800      	cmp	r0, #0
 800a598:	f43f af14 	beq.w	800a3c4 <_dtoa_r+0x43c>
 800a59c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a59e:	1e73      	subs	r3, r6, #1
 800a5a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a5a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a5a6:	2b30      	cmp	r3, #48	@ 0x30
 800a5a8:	d0f8      	beq.n	800a59c <_dtoa_r+0x614>
 800a5aa:	4647      	mov	r7, r8
 800a5ac:	e03b      	b.n	800a626 <_dtoa_r+0x69e>
 800a5ae:	4b9e      	ldr	r3, [pc, #632]	@ (800a828 <_dtoa_r+0x8a0>)
 800a5b0:	f7f6 f82a 	bl	8000608 <__aeabi_dmul>
 800a5b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5b8:	e7bc      	b.n	800a534 <_dtoa_r+0x5ac>
 800a5ba:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a5be:	4656      	mov	r6, sl
 800a5c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5c4:	4620      	mov	r0, r4
 800a5c6:	4629      	mov	r1, r5
 800a5c8:	f7f6 f948 	bl	800085c <__aeabi_ddiv>
 800a5cc:	f7f6 facc 	bl	8000b68 <__aeabi_d2iz>
 800a5d0:	4680      	mov	r8, r0
 800a5d2:	f7f5 ffaf 	bl	8000534 <__aeabi_i2d>
 800a5d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5da:	f7f6 f815 	bl	8000608 <__aeabi_dmul>
 800a5de:	4602      	mov	r2, r0
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	4629      	mov	r1, r5
 800a5e6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a5ea:	f7f5 fe55 	bl	8000298 <__aeabi_dsub>
 800a5ee:	f806 4b01 	strb.w	r4, [r6], #1
 800a5f2:	9d03      	ldr	r5, [sp, #12]
 800a5f4:	eba6 040a 	sub.w	r4, r6, sl
 800a5f8:	42a5      	cmp	r5, r4
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	460b      	mov	r3, r1
 800a5fe:	d133      	bne.n	800a668 <_dtoa_r+0x6e0>
 800a600:	f7f5 fe4c 	bl	800029c <__adddf3>
 800a604:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a608:	4604      	mov	r4, r0
 800a60a:	460d      	mov	r5, r1
 800a60c:	f7f6 fa8c 	bl	8000b28 <__aeabi_dcmpgt>
 800a610:	b9c0      	cbnz	r0, 800a644 <_dtoa_r+0x6bc>
 800a612:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a616:	4620      	mov	r0, r4
 800a618:	4629      	mov	r1, r5
 800a61a:	f7f6 fa5d 	bl	8000ad8 <__aeabi_dcmpeq>
 800a61e:	b110      	cbz	r0, 800a626 <_dtoa_r+0x69e>
 800a620:	f018 0f01 	tst.w	r8, #1
 800a624:	d10e      	bne.n	800a644 <_dtoa_r+0x6bc>
 800a626:	9902      	ldr	r1, [sp, #8]
 800a628:	4648      	mov	r0, r9
 800a62a:	f000 ff09 	bl	800b440 <_Bfree>
 800a62e:	2300      	movs	r3, #0
 800a630:	7033      	strb	r3, [r6, #0]
 800a632:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a634:	3701      	adds	r7, #1
 800a636:	601f      	str	r7, [r3, #0]
 800a638:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	f000 824b 	beq.w	800aad6 <_dtoa_r+0xb4e>
 800a640:	601e      	str	r6, [r3, #0]
 800a642:	e248      	b.n	800aad6 <_dtoa_r+0xb4e>
 800a644:	46b8      	mov	r8, r7
 800a646:	4633      	mov	r3, r6
 800a648:	461e      	mov	r6, r3
 800a64a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a64e:	2a39      	cmp	r2, #57	@ 0x39
 800a650:	d106      	bne.n	800a660 <_dtoa_r+0x6d8>
 800a652:	459a      	cmp	sl, r3
 800a654:	d1f8      	bne.n	800a648 <_dtoa_r+0x6c0>
 800a656:	2230      	movs	r2, #48	@ 0x30
 800a658:	f108 0801 	add.w	r8, r8, #1
 800a65c:	f88a 2000 	strb.w	r2, [sl]
 800a660:	781a      	ldrb	r2, [r3, #0]
 800a662:	3201      	adds	r2, #1
 800a664:	701a      	strb	r2, [r3, #0]
 800a666:	e7a0      	b.n	800a5aa <_dtoa_r+0x622>
 800a668:	4b6f      	ldr	r3, [pc, #444]	@ (800a828 <_dtoa_r+0x8a0>)
 800a66a:	2200      	movs	r2, #0
 800a66c:	f7f5 ffcc 	bl	8000608 <__aeabi_dmul>
 800a670:	2200      	movs	r2, #0
 800a672:	2300      	movs	r3, #0
 800a674:	4604      	mov	r4, r0
 800a676:	460d      	mov	r5, r1
 800a678:	f7f6 fa2e 	bl	8000ad8 <__aeabi_dcmpeq>
 800a67c:	2800      	cmp	r0, #0
 800a67e:	d09f      	beq.n	800a5c0 <_dtoa_r+0x638>
 800a680:	e7d1      	b.n	800a626 <_dtoa_r+0x69e>
 800a682:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a684:	2a00      	cmp	r2, #0
 800a686:	f000 80ea 	beq.w	800a85e <_dtoa_r+0x8d6>
 800a68a:	9a07      	ldr	r2, [sp, #28]
 800a68c:	2a01      	cmp	r2, #1
 800a68e:	f300 80cd 	bgt.w	800a82c <_dtoa_r+0x8a4>
 800a692:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a694:	2a00      	cmp	r2, #0
 800a696:	f000 80c1 	beq.w	800a81c <_dtoa_r+0x894>
 800a69a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a69e:	9c08      	ldr	r4, [sp, #32]
 800a6a0:	9e00      	ldr	r6, [sp, #0]
 800a6a2:	9a00      	ldr	r2, [sp, #0]
 800a6a4:	441a      	add	r2, r3
 800a6a6:	9200      	str	r2, [sp, #0]
 800a6a8:	9a06      	ldr	r2, [sp, #24]
 800a6aa:	2101      	movs	r1, #1
 800a6ac:	441a      	add	r2, r3
 800a6ae:	4648      	mov	r0, r9
 800a6b0:	9206      	str	r2, [sp, #24]
 800a6b2:	f000 ffc3 	bl	800b63c <__i2b>
 800a6b6:	4605      	mov	r5, r0
 800a6b8:	b166      	cbz	r6, 800a6d4 <_dtoa_r+0x74c>
 800a6ba:	9b06      	ldr	r3, [sp, #24]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	dd09      	ble.n	800a6d4 <_dtoa_r+0x74c>
 800a6c0:	42b3      	cmp	r3, r6
 800a6c2:	9a00      	ldr	r2, [sp, #0]
 800a6c4:	bfa8      	it	ge
 800a6c6:	4633      	movge	r3, r6
 800a6c8:	1ad2      	subs	r2, r2, r3
 800a6ca:	9200      	str	r2, [sp, #0]
 800a6cc:	9a06      	ldr	r2, [sp, #24]
 800a6ce:	1af6      	subs	r6, r6, r3
 800a6d0:	1ad3      	subs	r3, r2, r3
 800a6d2:	9306      	str	r3, [sp, #24]
 800a6d4:	9b08      	ldr	r3, [sp, #32]
 800a6d6:	b30b      	cbz	r3, 800a71c <_dtoa_r+0x794>
 800a6d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	f000 80c6 	beq.w	800a86c <_dtoa_r+0x8e4>
 800a6e0:	2c00      	cmp	r4, #0
 800a6e2:	f000 80c0 	beq.w	800a866 <_dtoa_r+0x8de>
 800a6e6:	4629      	mov	r1, r5
 800a6e8:	4622      	mov	r2, r4
 800a6ea:	4648      	mov	r0, r9
 800a6ec:	f001 f85e 	bl	800b7ac <__pow5mult>
 800a6f0:	9a02      	ldr	r2, [sp, #8]
 800a6f2:	4601      	mov	r1, r0
 800a6f4:	4605      	mov	r5, r0
 800a6f6:	4648      	mov	r0, r9
 800a6f8:	f000 ffb6 	bl	800b668 <__multiply>
 800a6fc:	9902      	ldr	r1, [sp, #8]
 800a6fe:	4680      	mov	r8, r0
 800a700:	4648      	mov	r0, r9
 800a702:	f000 fe9d 	bl	800b440 <_Bfree>
 800a706:	9b08      	ldr	r3, [sp, #32]
 800a708:	1b1b      	subs	r3, r3, r4
 800a70a:	9308      	str	r3, [sp, #32]
 800a70c:	f000 80b1 	beq.w	800a872 <_dtoa_r+0x8ea>
 800a710:	9a08      	ldr	r2, [sp, #32]
 800a712:	4641      	mov	r1, r8
 800a714:	4648      	mov	r0, r9
 800a716:	f001 f849 	bl	800b7ac <__pow5mult>
 800a71a:	9002      	str	r0, [sp, #8]
 800a71c:	2101      	movs	r1, #1
 800a71e:	4648      	mov	r0, r9
 800a720:	f000 ff8c 	bl	800b63c <__i2b>
 800a724:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a726:	4604      	mov	r4, r0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	f000 81d8 	beq.w	800aade <_dtoa_r+0xb56>
 800a72e:	461a      	mov	r2, r3
 800a730:	4601      	mov	r1, r0
 800a732:	4648      	mov	r0, r9
 800a734:	f001 f83a 	bl	800b7ac <__pow5mult>
 800a738:	9b07      	ldr	r3, [sp, #28]
 800a73a:	2b01      	cmp	r3, #1
 800a73c:	4604      	mov	r4, r0
 800a73e:	f300 809f 	bgt.w	800a880 <_dtoa_r+0x8f8>
 800a742:	9b04      	ldr	r3, [sp, #16]
 800a744:	2b00      	cmp	r3, #0
 800a746:	f040 8097 	bne.w	800a878 <_dtoa_r+0x8f0>
 800a74a:	9b05      	ldr	r3, [sp, #20]
 800a74c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a750:	2b00      	cmp	r3, #0
 800a752:	f040 8093 	bne.w	800a87c <_dtoa_r+0x8f4>
 800a756:	9b05      	ldr	r3, [sp, #20]
 800a758:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a75c:	0d1b      	lsrs	r3, r3, #20
 800a75e:	051b      	lsls	r3, r3, #20
 800a760:	b133      	cbz	r3, 800a770 <_dtoa_r+0x7e8>
 800a762:	9b00      	ldr	r3, [sp, #0]
 800a764:	3301      	adds	r3, #1
 800a766:	9300      	str	r3, [sp, #0]
 800a768:	9b06      	ldr	r3, [sp, #24]
 800a76a:	3301      	adds	r3, #1
 800a76c:	9306      	str	r3, [sp, #24]
 800a76e:	2301      	movs	r3, #1
 800a770:	9308      	str	r3, [sp, #32]
 800a772:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a774:	2b00      	cmp	r3, #0
 800a776:	f000 81b8 	beq.w	800aaea <_dtoa_r+0xb62>
 800a77a:	6923      	ldr	r3, [r4, #16]
 800a77c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a780:	6918      	ldr	r0, [r3, #16]
 800a782:	f000 ff0f 	bl	800b5a4 <__hi0bits>
 800a786:	f1c0 0020 	rsb	r0, r0, #32
 800a78a:	9b06      	ldr	r3, [sp, #24]
 800a78c:	4418      	add	r0, r3
 800a78e:	f010 001f 	ands.w	r0, r0, #31
 800a792:	f000 8082 	beq.w	800a89a <_dtoa_r+0x912>
 800a796:	f1c0 0320 	rsb	r3, r0, #32
 800a79a:	2b04      	cmp	r3, #4
 800a79c:	dd73      	ble.n	800a886 <_dtoa_r+0x8fe>
 800a79e:	9b00      	ldr	r3, [sp, #0]
 800a7a0:	f1c0 001c 	rsb	r0, r0, #28
 800a7a4:	4403      	add	r3, r0
 800a7a6:	9300      	str	r3, [sp, #0]
 800a7a8:	9b06      	ldr	r3, [sp, #24]
 800a7aa:	4403      	add	r3, r0
 800a7ac:	4406      	add	r6, r0
 800a7ae:	9306      	str	r3, [sp, #24]
 800a7b0:	9b00      	ldr	r3, [sp, #0]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	dd05      	ble.n	800a7c2 <_dtoa_r+0x83a>
 800a7b6:	9902      	ldr	r1, [sp, #8]
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	4648      	mov	r0, r9
 800a7bc:	f001 f850 	bl	800b860 <__lshift>
 800a7c0:	9002      	str	r0, [sp, #8]
 800a7c2:	9b06      	ldr	r3, [sp, #24]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	dd05      	ble.n	800a7d4 <_dtoa_r+0x84c>
 800a7c8:	4621      	mov	r1, r4
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	4648      	mov	r0, r9
 800a7ce:	f001 f847 	bl	800b860 <__lshift>
 800a7d2:	4604      	mov	r4, r0
 800a7d4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d061      	beq.n	800a89e <_dtoa_r+0x916>
 800a7da:	9802      	ldr	r0, [sp, #8]
 800a7dc:	4621      	mov	r1, r4
 800a7de:	f001 f8ab 	bl	800b938 <__mcmp>
 800a7e2:	2800      	cmp	r0, #0
 800a7e4:	da5b      	bge.n	800a89e <_dtoa_r+0x916>
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	9902      	ldr	r1, [sp, #8]
 800a7ea:	220a      	movs	r2, #10
 800a7ec:	4648      	mov	r0, r9
 800a7ee:	f000 fe49 	bl	800b484 <__multadd>
 800a7f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7f4:	9002      	str	r0, [sp, #8]
 800a7f6:	f107 38ff 	add.w	r8, r7, #4294967295
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	f000 8177 	beq.w	800aaee <_dtoa_r+0xb66>
 800a800:	4629      	mov	r1, r5
 800a802:	2300      	movs	r3, #0
 800a804:	220a      	movs	r2, #10
 800a806:	4648      	mov	r0, r9
 800a808:	f000 fe3c 	bl	800b484 <__multadd>
 800a80c:	f1bb 0f00 	cmp.w	fp, #0
 800a810:	4605      	mov	r5, r0
 800a812:	dc6f      	bgt.n	800a8f4 <_dtoa_r+0x96c>
 800a814:	9b07      	ldr	r3, [sp, #28]
 800a816:	2b02      	cmp	r3, #2
 800a818:	dc49      	bgt.n	800a8ae <_dtoa_r+0x926>
 800a81a:	e06b      	b.n	800a8f4 <_dtoa_r+0x96c>
 800a81c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a81e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a822:	e73c      	b.n	800a69e <_dtoa_r+0x716>
 800a824:	3fe00000 	.word	0x3fe00000
 800a828:	40240000 	.word	0x40240000
 800a82c:	9b03      	ldr	r3, [sp, #12]
 800a82e:	1e5c      	subs	r4, r3, #1
 800a830:	9b08      	ldr	r3, [sp, #32]
 800a832:	42a3      	cmp	r3, r4
 800a834:	db09      	blt.n	800a84a <_dtoa_r+0x8c2>
 800a836:	1b1c      	subs	r4, r3, r4
 800a838:	9b03      	ldr	r3, [sp, #12]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	f6bf af30 	bge.w	800a6a0 <_dtoa_r+0x718>
 800a840:	9b00      	ldr	r3, [sp, #0]
 800a842:	9a03      	ldr	r2, [sp, #12]
 800a844:	1a9e      	subs	r6, r3, r2
 800a846:	2300      	movs	r3, #0
 800a848:	e72b      	b.n	800a6a2 <_dtoa_r+0x71a>
 800a84a:	9b08      	ldr	r3, [sp, #32]
 800a84c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a84e:	9408      	str	r4, [sp, #32]
 800a850:	1ae3      	subs	r3, r4, r3
 800a852:	441a      	add	r2, r3
 800a854:	9e00      	ldr	r6, [sp, #0]
 800a856:	9b03      	ldr	r3, [sp, #12]
 800a858:	920d      	str	r2, [sp, #52]	@ 0x34
 800a85a:	2400      	movs	r4, #0
 800a85c:	e721      	b.n	800a6a2 <_dtoa_r+0x71a>
 800a85e:	9c08      	ldr	r4, [sp, #32]
 800a860:	9e00      	ldr	r6, [sp, #0]
 800a862:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a864:	e728      	b.n	800a6b8 <_dtoa_r+0x730>
 800a866:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a86a:	e751      	b.n	800a710 <_dtoa_r+0x788>
 800a86c:	9a08      	ldr	r2, [sp, #32]
 800a86e:	9902      	ldr	r1, [sp, #8]
 800a870:	e750      	b.n	800a714 <_dtoa_r+0x78c>
 800a872:	f8cd 8008 	str.w	r8, [sp, #8]
 800a876:	e751      	b.n	800a71c <_dtoa_r+0x794>
 800a878:	2300      	movs	r3, #0
 800a87a:	e779      	b.n	800a770 <_dtoa_r+0x7e8>
 800a87c:	9b04      	ldr	r3, [sp, #16]
 800a87e:	e777      	b.n	800a770 <_dtoa_r+0x7e8>
 800a880:	2300      	movs	r3, #0
 800a882:	9308      	str	r3, [sp, #32]
 800a884:	e779      	b.n	800a77a <_dtoa_r+0x7f2>
 800a886:	d093      	beq.n	800a7b0 <_dtoa_r+0x828>
 800a888:	9a00      	ldr	r2, [sp, #0]
 800a88a:	331c      	adds	r3, #28
 800a88c:	441a      	add	r2, r3
 800a88e:	9200      	str	r2, [sp, #0]
 800a890:	9a06      	ldr	r2, [sp, #24]
 800a892:	441a      	add	r2, r3
 800a894:	441e      	add	r6, r3
 800a896:	9206      	str	r2, [sp, #24]
 800a898:	e78a      	b.n	800a7b0 <_dtoa_r+0x828>
 800a89a:	4603      	mov	r3, r0
 800a89c:	e7f4      	b.n	800a888 <_dtoa_r+0x900>
 800a89e:	9b03      	ldr	r3, [sp, #12]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	46b8      	mov	r8, r7
 800a8a4:	dc20      	bgt.n	800a8e8 <_dtoa_r+0x960>
 800a8a6:	469b      	mov	fp, r3
 800a8a8:	9b07      	ldr	r3, [sp, #28]
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	dd1e      	ble.n	800a8ec <_dtoa_r+0x964>
 800a8ae:	f1bb 0f00 	cmp.w	fp, #0
 800a8b2:	f47f adb1 	bne.w	800a418 <_dtoa_r+0x490>
 800a8b6:	4621      	mov	r1, r4
 800a8b8:	465b      	mov	r3, fp
 800a8ba:	2205      	movs	r2, #5
 800a8bc:	4648      	mov	r0, r9
 800a8be:	f000 fde1 	bl	800b484 <__multadd>
 800a8c2:	4601      	mov	r1, r0
 800a8c4:	4604      	mov	r4, r0
 800a8c6:	9802      	ldr	r0, [sp, #8]
 800a8c8:	f001 f836 	bl	800b938 <__mcmp>
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	f77f ada3 	ble.w	800a418 <_dtoa_r+0x490>
 800a8d2:	4656      	mov	r6, sl
 800a8d4:	2331      	movs	r3, #49	@ 0x31
 800a8d6:	f806 3b01 	strb.w	r3, [r6], #1
 800a8da:	f108 0801 	add.w	r8, r8, #1
 800a8de:	e59f      	b.n	800a420 <_dtoa_r+0x498>
 800a8e0:	9c03      	ldr	r4, [sp, #12]
 800a8e2:	46b8      	mov	r8, r7
 800a8e4:	4625      	mov	r5, r4
 800a8e6:	e7f4      	b.n	800a8d2 <_dtoa_r+0x94a>
 800a8e8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a8ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	f000 8101 	beq.w	800aaf6 <_dtoa_r+0xb6e>
 800a8f4:	2e00      	cmp	r6, #0
 800a8f6:	dd05      	ble.n	800a904 <_dtoa_r+0x97c>
 800a8f8:	4629      	mov	r1, r5
 800a8fa:	4632      	mov	r2, r6
 800a8fc:	4648      	mov	r0, r9
 800a8fe:	f000 ffaf 	bl	800b860 <__lshift>
 800a902:	4605      	mov	r5, r0
 800a904:	9b08      	ldr	r3, [sp, #32]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d05c      	beq.n	800a9c4 <_dtoa_r+0xa3c>
 800a90a:	6869      	ldr	r1, [r5, #4]
 800a90c:	4648      	mov	r0, r9
 800a90e:	f000 fd57 	bl	800b3c0 <_Balloc>
 800a912:	4606      	mov	r6, r0
 800a914:	b928      	cbnz	r0, 800a922 <_dtoa_r+0x99a>
 800a916:	4b82      	ldr	r3, [pc, #520]	@ (800ab20 <_dtoa_r+0xb98>)
 800a918:	4602      	mov	r2, r0
 800a91a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a91e:	f7ff bb4a 	b.w	8009fb6 <_dtoa_r+0x2e>
 800a922:	692a      	ldr	r2, [r5, #16]
 800a924:	3202      	adds	r2, #2
 800a926:	0092      	lsls	r2, r2, #2
 800a928:	f105 010c 	add.w	r1, r5, #12
 800a92c:	300c      	adds	r0, #12
 800a92e:	f7ff fa66 	bl	8009dfe <memcpy>
 800a932:	2201      	movs	r2, #1
 800a934:	4631      	mov	r1, r6
 800a936:	4648      	mov	r0, r9
 800a938:	f000 ff92 	bl	800b860 <__lshift>
 800a93c:	f10a 0301 	add.w	r3, sl, #1
 800a940:	9300      	str	r3, [sp, #0]
 800a942:	eb0a 030b 	add.w	r3, sl, fp
 800a946:	9308      	str	r3, [sp, #32]
 800a948:	9b04      	ldr	r3, [sp, #16]
 800a94a:	f003 0301 	and.w	r3, r3, #1
 800a94e:	462f      	mov	r7, r5
 800a950:	9306      	str	r3, [sp, #24]
 800a952:	4605      	mov	r5, r0
 800a954:	9b00      	ldr	r3, [sp, #0]
 800a956:	9802      	ldr	r0, [sp, #8]
 800a958:	4621      	mov	r1, r4
 800a95a:	f103 3bff 	add.w	fp, r3, #4294967295
 800a95e:	f7ff fa8b 	bl	8009e78 <quorem>
 800a962:	4603      	mov	r3, r0
 800a964:	3330      	adds	r3, #48	@ 0x30
 800a966:	9003      	str	r0, [sp, #12]
 800a968:	4639      	mov	r1, r7
 800a96a:	9802      	ldr	r0, [sp, #8]
 800a96c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a96e:	f000 ffe3 	bl	800b938 <__mcmp>
 800a972:	462a      	mov	r2, r5
 800a974:	9004      	str	r0, [sp, #16]
 800a976:	4621      	mov	r1, r4
 800a978:	4648      	mov	r0, r9
 800a97a:	f000 fff9 	bl	800b970 <__mdiff>
 800a97e:	68c2      	ldr	r2, [r0, #12]
 800a980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a982:	4606      	mov	r6, r0
 800a984:	bb02      	cbnz	r2, 800a9c8 <_dtoa_r+0xa40>
 800a986:	4601      	mov	r1, r0
 800a988:	9802      	ldr	r0, [sp, #8]
 800a98a:	f000 ffd5 	bl	800b938 <__mcmp>
 800a98e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a990:	4602      	mov	r2, r0
 800a992:	4631      	mov	r1, r6
 800a994:	4648      	mov	r0, r9
 800a996:	920c      	str	r2, [sp, #48]	@ 0x30
 800a998:	9309      	str	r3, [sp, #36]	@ 0x24
 800a99a:	f000 fd51 	bl	800b440 <_Bfree>
 800a99e:	9b07      	ldr	r3, [sp, #28]
 800a9a0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a9a2:	9e00      	ldr	r6, [sp, #0]
 800a9a4:	ea42 0103 	orr.w	r1, r2, r3
 800a9a8:	9b06      	ldr	r3, [sp, #24]
 800a9aa:	4319      	orrs	r1, r3
 800a9ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9ae:	d10d      	bne.n	800a9cc <_dtoa_r+0xa44>
 800a9b0:	2b39      	cmp	r3, #57	@ 0x39
 800a9b2:	d027      	beq.n	800aa04 <_dtoa_r+0xa7c>
 800a9b4:	9a04      	ldr	r2, [sp, #16]
 800a9b6:	2a00      	cmp	r2, #0
 800a9b8:	dd01      	ble.n	800a9be <_dtoa_r+0xa36>
 800a9ba:	9b03      	ldr	r3, [sp, #12]
 800a9bc:	3331      	adds	r3, #49	@ 0x31
 800a9be:	f88b 3000 	strb.w	r3, [fp]
 800a9c2:	e52e      	b.n	800a422 <_dtoa_r+0x49a>
 800a9c4:	4628      	mov	r0, r5
 800a9c6:	e7b9      	b.n	800a93c <_dtoa_r+0x9b4>
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	e7e2      	b.n	800a992 <_dtoa_r+0xa0a>
 800a9cc:	9904      	ldr	r1, [sp, #16]
 800a9ce:	2900      	cmp	r1, #0
 800a9d0:	db04      	blt.n	800a9dc <_dtoa_r+0xa54>
 800a9d2:	9807      	ldr	r0, [sp, #28]
 800a9d4:	4301      	orrs	r1, r0
 800a9d6:	9806      	ldr	r0, [sp, #24]
 800a9d8:	4301      	orrs	r1, r0
 800a9da:	d120      	bne.n	800aa1e <_dtoa_r+0xa96>
 800a9dc:	2a00      	cmp	r2, #0
 800a9de:	ddee      	ble.n	800a9be <_dtoa_r+0xa36>
 800a9e0:	9902      	ldr	r1, [sp, #8]
 800a9e2:	9300      	str	r3, [sp, #0]
 800a9e4:	2201      	movs	r2, #1
 800a9e6:	4648      	mov	r0, r9
 800a9e8:	f000 ff3a 	bl	800b860 <__lshift>
 800a9ec:	4621      	mov	r1, r4
 800a9ee:	9002      	str	r0, [sp, #8]
 800a9f0:	f000 ffa2 	bl	800b938 <__mcmp>
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	9b00      	ldr	r3, [sp, #0]
 800a9f8:	dc02      	bgt.n	800aa00 <_dtoa_r+0xa78>
 800a9fa:	d1e0      	bne.n	800a9be <_dtoa_r+0xa36>
 800a9fc:	07da      	lsls	r2, r3, #31
 800a9fe:	d5de      	bpl.n	800a9be <_dtoa_r+0xa36>
 800aa00:	2b39      	cmp	r3, #57	@ 0x39
 800aa02:	d1da      	bne.n	800a9ba <_dtoa_r+0xa32>
 800aa04:	2339      	movs	r3, #57	@ 0x39
 800aa06:	f88b 3000 	strb.w	r3, [fp]
 800aa0a:	4633      	mov	r3, r6
 800aa0c:	461e      	mov	r6, r3
 800aa0e:	3b01      	subs	r3, #1
 800aa10:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800aa14:	2a39      	cmp	r2, #57	@ 0x39
 800aa16:	d04e      	beq.n	800aab6 <_dtoa_r+0xb2e>
 800aa18:	3201      	adds	r2, #1
 800aa1a:	701a      	strb	r2, [r3, #0]
 800aa1c:	e501      	b.n	800a422 <_dtoa_r+0x49a>
 800aa1e:	2a00      	cmp	r2, #0
 800aa20:	dd03      	ble.n	800aa2a <_dtoa_r+0xaa2>
 800aa22:	2b39      	cmp	r3, #57	@ 0x39
 800aa24:	d0ee      	beq.n	800aa04 <_dtoa_r+0xa7c>
 800aa26:	3301      	adds	r3, #1
 800aa28:	e7c9      	b.n	800a9be <_dtoa_r+0xa36>
 800aa2a:	9a00      	ldr	r2, [sp, #0]
 800aa2c:	9908      	ldr	r1, [sp, #32]
 800aa2e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aa32:	428a      	cmp	r2, r1
 800aa34:	d028      	beq.n	800aa88 <_dtoa_r+0xb00>
 800aa36:	9902      	ldr	r1, [sp, #8]
 800aa38:	2300      	movs	r3, #0
 800aa3a:	220a      	movs	r2, #10
 800aa3c:	4648      	mov	r0, r9
 800aa3e:	f000 fd21 	bl	800b484 <__multadd>
 800aa42:	42af      	cmp	r7, r5
 800aa44:	9002      	str	r0, [sp, #8]
 800aa46:	f04f 0300 	mov.w	r3, #0
 800aa4a:	f04f 020a 	mov.w	r2, #10
 800aa4e:	4639      	mov	r1, r7
 800aa50:	4648      	mov	r0, r9
 800aa52:	d107      	bne.n	800aa64 <_dtoa_r+0xadc>
 800aa54:	f000 fd16 	bl	800b484 <__multadd>
 800aa58:	4607      	mov	r7, r0
 800aa5a:	4605      	mov	r5, r0
 800aa5c:	9b00      	ldr	r3, [sp, #0]
 800aa5e:	3301      	adds	r3, #1
 800aa60:	9300      	str	r3, [sp, #0]
 800aa62:	e777      	b.n	800a954 <_dtoa_r+0x9cc>
 800aa64:	f000 fd0e 	bl	800b484 <__multadd>
 800aa68:	4629      	mov	r1, r5
 800aa6a:	4607      	mov	r7, r0
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	220a      	movs	r2, #10
 800aa70:	4648      	mov	r0, r9
 800aa72:	f000 fd07 	bl	800b484 <__multadd>
 800aa76:	4605      	mov	r5, r0
 800aa78:	e7f0      	b.n	800aa5c <_dtoa_r+0xad4>
 800aa7a:	f1bb 0f00 	cmp.w	fp, #0
 800aa7e:	bfcc      	ite	gt
 800aa80:	465e      	movgt	r6, fp
 800aa82:	2601      	movle	r6, #1
 800aa84:	4456      	add	r6, sl
 800aa86:	2700      	movs	r7, #0
 800aa88:	9902      	ldr	r1, [sp, #8]
 800aa8a:	9300      	str	r3, [sp, #0]
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	4648      	mov	r0, r9
 800aa90:	f000 fee6 	bl	800b860 <__lshift>
 800aa94:	4621      	mov	r1, r4
 800aa96:	9002      	str	r0, [sp, #8]
 800aa98:	f000 ff4e 	bl	800b938 <__mcmp>
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	dcb4      	bgt.n	800aa0a <_dtoa_r+0xa82>
 800aaa0:	d102      	bne.n	800aaa8 <_dtoa_r+0xb20>
 800aaa2:	9b00      	ldr	r3, [sp, #0]
 800aaa4:	07db      	lsls	r3, r3, #31
 800aaa6:	d4b0      	bmi.n	800aa0a <_dtoa_r+0xa82>
 800aaa8:	4633      	mov	r3, r6
 800aaaa:	461e      	mov	r6, r3
 800aaac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aab0:	2a30      	cmp	r2, #48	@ 0x30
 800aab2:	d0fa      	beq.n	800aaaa <_dtoa_r+0xb22>
 800aab4:	e4b5      	b.n	800a422 <_dtoa_r+0x49a>
 800aab6:	459a      	cmp	sl, r3
 800aab8:	d1a8      	bne.n	800aa0c <_dtoa_r+0xa84>
 800aaba:	2331      	movs	r3, #49	@ 0x31
 800aabc:	f108 0801 	add.w	r8, r8, #1
 800aac0:	f88a 3000 	strb.w	r3, [sl]
 800aac4:	e4ad      	b.n	800a422 <_dtoa_r+0x49a>
 800aac6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aac8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ab24 <_dtoa_r+0xb9c>
 800aacc:	b11b      	cbz	r3, 800aad6 <_dtoa_r+0xb4e>
 800aace:	f10a 0308 	add.w	r3, sl, #8
 800aad2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800aad4:	6013      	str	r3, [r2, #0]
 800aad6:	4650      	mov	r0, sl
 800aad8:	b017      	add	sp, #92	@ 0x5c
 800aada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aade:	9b07      	ldr	r3, [sp, #28]
 800aae0:	2b01      	cmp	r3, #1
 800aae2:	f77f ae2e 	ble.w	800a742 <_dtoa_r+0x7ba>
 800aae6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aae8:	9308      	str	r3, [sp, #32]
 800aaea:	2001      	movs	r0, #1
 800aaec:	e64d      	b.n	800a78a <_dtoa_r+0x802>
 800aaee:	f1bb 0f00 	cmp.w	fp, #0
 800aaf2:	f77f aed9 	ble.w	800a8a8 <_dtoa_r+0x920>
 800aaf6:	4656      	mov	r6, sl
 800aaf8:	9802      	ldr	r0, [sp, #8]
 800aafa:	4621      	mov	r1, r4
 800aafc:	f7ff f9bc 	bl	8009e78 <quorem>
 800ab00:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ab04:	f806 3b01 	strb.w	r3, [r6], #1
 800ab08:	eba6 020a 	sub.w	r2, r6, sl
 800ab0c:	4593      	cmp	fp, r2
 800ab0e:	ddb4      	ble.n	800aa7a <_dtoa_r+0xaf2>
 800ab10:	9902      	ldr	r1, [sp, #8]
 800ab12:	2300      	movs	r3, #0
 800ab14:	220a      	movs	r2, #10
 800ab16:	4648      	mov	r0, r9
 800ab18:	f000 fcb4 	bl	800b484 <__multadd>
 800ab1c:	9002      	str	r0, [sp, #8]
 800ab1e:	e7eb      	b.n	800aaf8 <_dtoa_r+0xb70>
 800ab20:	0800ccd3 	.word	0x0800ccd3
 800ab24:	0800cc57 	.word	0x0800cc57

0800ab28 <_free_r>:
 800ab28:	b538      	push	{r3, r4, r5, lr}
 800ab2a:	4605      	mov	r5, r0
 800ab2c:	2900      	cmp	r1, #0
 800ab2e:	d041      	beq.n	800abb4 <_free_r+0x8c>
 800ab30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab34:	1f0c      	subs	r4, r1, #4
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	bfb8      	it	lt
 800ab3a:	18e4      	addlt	r4, r4, r3
 800ab3c:	f000 fc34 	bl	800b3a8 <__malloc_lock>
 800ab40:	4a1d      	ldr	r2, [pc, #116]	@ (800abb8 <_free_r+0x90>)
 800ab42:	6813      	ldr	r3, [r2, #0]
 800ab44:	b933      	cbnz	r3, 800ab54 <_free_r+0x2c>
 800ab46:	6063      	str	r3, [r4, #4]
 800ab48:	6014      	str	r4, [r2, #0]
 800ab4a:	4628      	mov	r0, r5
 800ab4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab50:	f000 bc30 	b.w	800b3b4 <__malloc_unlock>
 800ab54:	42a3      	cmp	r3, r4
 800ab56:	d908      	bls.n	800ab6a <_free_r+0x42>
 800ab58:	6820      	ldr	r0, [r4, #0]
 800ab5a:	1821      	adds	r1, r4, r0
 800ab5c:	428b      	cmp	r3, r1
 800ab5e:	bf01      	itttt	eq
 800ab60:	6819      	ldreq	r1, [r3, #0]
 800ab62:	685b      	ldreq	r3, [r3, #4]
 800ab64:	1809      	addeq	r1, r1, r0
 800ab66:	6021      	streq	r1, [r4, #0]
 800ab68:	e7ed      	b.n	800ab46 <_free_r+0x1e>
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	b10b      	cbz	r3, 800ab74 <_free_r+0x4c>
 800ab70:	42a3      	cmp	r3, r4
 800ab72:	d9fa      	bls.n	800ab6a <_free_r+0x42>
 800ab74:	6811      	ldr	r1, [r2, #0]
 800ab76:	1850      	adds	r0, r2, r1
 800ab78:	42a0      	cmp	r0, r4
 800ab7a:	d10b      	bne.n	800ab94 <_free_r+0x6c>
 800ab7c:	6820      	ldr	r0, [r4, #0]
 800ab7e:	4401      	add	r1, r0
 800ab80:	1850      	adds	r0, r2, r1
 800ab82:	4283      	cmp	r3, r0
 800ab84:	6011      	str	r1, [r2, #0]
 800ab86:	d1e0      	bne.n	800ab4a <_free_r+0x22>
 800ab88:	6818      	ldr	r0, [r3, #0]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	6053      	str	r3, [r2, #4]
 800ab8e:	4408      	add	r0, r1
 800ab90:	6010      	str	r0, [r2, #0]
 800ab92:	e7da      	b.n	800ab4a <_free_r+0x22>
 800ab94:	d902      	bls.n	800ab9c <_free_r+0x74>
 800ab96:	230c      	movs	r3, #12
 800ab98:	602b      	str	r3, [r5, #0]
 800ab9a:	e7d6      	b.n	800ab4a <_free_r+0x22>
 800ab9c:	6820      	ldr	r0, [r4, #0]
 800ab9e:	1821      	adds	r1, r4, r0
 800aba0:	428b      	cmp	r3, r1
 800aba2:	bf04      	itt	eq
 800aba4:	6819      	ldreq	r1, [r3, #0]
 800aba6:	685b      	ldreq	r3, [r3, #4]
 800aba8:	6063      	str	r3, [r4, #4]
 800abaa:	bf04      	itt	eq
 800abac:	1809      	addeq	r1, r1, r0
 800abae:	6021      	streq	r1, [r4, #0]
 800abb0:	6054      	str	r4, [r2, #4]
 800abb2:	e7ca      	b.n	800ab4a <_free_r+0x22>
 800abb4:	bd38      	pop	{r3, r4, r5, pc}
 800abb6:	bf00      	nop
 800abb8:	200008d0 	.word	0x200008d0

0800abbc <rshift>:
 800abbc:	6903      	ldr	r3, [r0, #16]
 800abbe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800abc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800abc6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800abca:	f100 0414 	add.w	r4, r0, #20
 800abce:	dd45      	ble.n	800ac5c <rshift+0xa0>
 800abd0:	f011 011f 	ands.w	r1, r1, #31
 800abd4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800abd8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800abdc:	d10c      	bne.n	800abf8 <rshift+0x3c>
 800abde:	f100 0710 	add.w	r7, r0, #16
 800abe2:	4629      	mov	r1, r5
 800abe4:	42b1      	cmp	r1, r6
 800abe6:	d334      	bcc.n	800ac52 <rshift+0x96>
 800abe8:	1a9b      	subs	r3, r3, r2
 800abea:	009b      	lsls	r3, r3, #2
 800abec:	1eea      	subs	r2, r5, #3
 800abee:	4296      	cmp	r6, r2
 800abf0:	bf38      	it	cc
 800abf2:	2300      	movcc	r3, #0
 800abf4:	4423      	add	r3, r4
 800abf6:	e015      	b.n	800ac24 <rshift+0x68>
 800abf8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800abfc:	f1c1 0820 	rsb	r8, r1, #32
 800ac00:	40cf      	lsrs	r7, r1
 800ac02:	f105 0e04 	add.w	lr, r5, #4
 800ac06:	46a1      	mov	r9, r4
 800ac08:	4576      	cmp	r6, lr
 800ac0a:	46f4      	mov	ip, lr
 800ac0c:	d815      	bhi.n	800ac3a <rshift+0x7e>
 800ac0e:	1a9a      	subs	r2, r3, r2
 800ac10:	0092      	lsls	r2, r2, #2
 800ac12:	3a04      	subs	r2, #4
 800ac14:	3501      	adds	r5, #1
 800ac16:	42ae      	cmp	r6, r5
 800ac18:	bf38      	it	cc
 800ac1a:	2200      	movcc	r2, #0
 800ac1c:	18a3      	adds	r3, r4, r2
 800ac1e:	50a7      	str	r7, [r4, r2]
 800ac20:	b107      	cbz	r7, 800ac24 <rshift+0x68>
 800ac22:	3304      	adds	r3, #4
 800ac24:	1b1a      	subs	r2, r3, r4
 800ac26:	42a3      	cmp	r3, r4
 800ac28:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ac2c:	bf08      	it	eq
 800ac2e:	2300      	moveq	r3, #0
 800ac30:	6102      	str	r2, [r0, #16]
 800ac32:	bf08      	it	eq
 800ac34:	6143      	streq	r3, [r0, #20]
 800ac36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac3a:	f8dc c000 	ldr.w	ip, [ip]
 800ac3e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ac42:	ea4c 0707 	orr.w	r7, ip, r7
 800ac46:	f849 7b04 	str.w	r7, [r9], #4
 800ac4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ac4e:	40cf      	lsrs	r7, r1
 800ac50:	e7da      	b.n	800ac08 <rshift+0x4c>
 800ac52:	f851 cb04 	ldr.w	ip, [r1], #4
 800ac56:	f847 cf04 	str.w	ip, [r7, #4]!
 800ac5a:	e7c3      	b.n	800abe4 <rshift+0x28>
 800ac5c:	4623      	mov	r3, r4
 800ac5e:	e7e1      	b.n	800ac24 <rshift+0x68>

0800ac60 <__hexdig_fun>:
 800ac60:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ac64:	2b09      	cmp	r3, #9
 800ac66:	d802      	bhi.n	800ac6e <__hexdig_fun+0xe>
 800ac68:	3820      	subs	r0, #32
 800ac6a:	b2c0      	uxtb	r0, r0
 800ac6c:	4770      	bx	lr
 800ac6e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ac72:	2b05      	cmp	r3, #5
 800ac74:	d801      	bhi.n	800ac7a <__hexdig_fun+0x1a>
 800ac76:	3847      	subs	r0, #71	@ 0x47
 800ac78:	e7f7      	b.n	800ac6a <__hexdig_fun+0xa>
 800ac7a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ac7e:	2b05      	cmp	r3, #5
 800ac80:	d801      	bhi.n	800ac86 <__hexdig_fun+0x26>
 800ac82:	3827      	subs	r0, #39	@ 0x27
 800ac84:	e7f1      	b.n	800ac6a <__hexdig_fun+0xa>
 800ac86:	2000      	movs	r0, #0
 800ac88:	4770      	bx	lr
	...

0800ac8c <__gethex>:
 800ac8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac90:	b085      	sub	sp, #20
 800ac92:	468a      	mov	sl, r1
 800ac94:	9302      	str	r3, [sp, #8]
 800ac96:	680b      	ldr	r3, [r1, #0]
 800ac98:	9001      	str	r0, [sp, #4]
 800ac9a:	4690      	mov	r8, r2
 800ac9c:	1c9c      	adds	r4, r3, #2
 800ac9e:	46a1      	mov	r9, r4
 800aca0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800aca4:	2830      	cmp	r0, #48	@ 0x30
 800aca6:	d0fa      	beq.n	800ac9e <__gethex+0x12>
 800aca8:	eba9 0303 	sub.w	r3, r9, r3
 800acac:	f1a3 0b02 	sub.w	fp, r3, #2
 800acb0:	f7ff ffd6 	bl	800ac60 <__hexdig_fun>
 800acb4:	4605      	mov	r5, r0
 800acb6:	2800      	cmp	r0, #0
 800acb8:	d168      	bne.n	800ad8c <__gethex+0x100>
 800acba:	49a0      	ldr	r1, [pc, #640]	@ (800af3c <__gethex+0x2b0>)
 800acbc:	2201      	movs	r2, #1
 800acbe:	4648      	mov	r0, r9
 800acc0:	f7ff f813 	bl	8009cea <strncmp>
 800acc4:	4607      	mov	r7, r0
 800acc6:	2800      	cmp	r0, #0
 800acc8:	d167      	bne.n	800ad9a <__gethex+0x10e>
 800acca:	f899 0001 	ldrb.w	r0, [r9, #1]
 800acce:	4626      	mov	r6, r4
 800acd0:	f7ff ffc6 	bl	800ac60 <__hexdig_fun>
 800acd4:	2800      	cmp	r0, #0
 800acd6:	d062      	beq.n	800ad9e <__gethex+0x112>
 800acd8:	4623      	mov	r3, r4
 800acda:	7818      	ldrb	r0, [r3, #0]
 800acdc:	2830      	cmp	r0, #48	@ 0x30
 800acde:	4699      	mov	r9, r3
 800ace0:	f103 0301 	add.w	r3, r3, #1
 800ace4:	d0f9      	beq.n	800acda <__gethex+0x4e>
 800ace6:	f7ff ffbb 	bl	800ac60 <__hexdig_fun>
 800acea:	fab0 f580 	clz	r5, r0
 800acee:	096d      	lsrs	r5, r5, #5
 800acf0:	f04f 0b01 	mov.w	fp, #1
 800acf4:	464a      	mov	r2, r9
 800acf6:	4616      	mov	r6, r2
 800acf8:	3201      	adds	r2, #1
 800acfa:	7830      	ldrb	r0, [r6, #0]
 800acfc:	f7ff ffb0 	bl	800ac60 <__hexdig_fun>
 800ad00:	2800      	cmp	r0, #0
 800ad02:	d1f8      	bne.n	800acf6 <__gethex+0x6a>
 800ad04:	498d      	ldr	r1, [pc, #564]	@ (800af3c <__gethex+0x2b0>)
 800ad06:	2201      	movs	r2, #1
 800ad08:	4630      	mov	r0, r6
 800ad0a:	f7fe ffee 	bl	8009cea <strncmp>
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	d13f      	bne.n	800ad92 <__gethex+0x106>
 800ad12:	b944      	cbnz	r4, 800ad26 <__gethex+0x9a>
 800ad14:	1c74      	adds	r4, r6, #1
 800ad16:	4622      	mov	r2, r4
 800ad18:	4616      	mov	r6, r2
 800ad1a:	3201      	adds	r2, #1
 800ad1c:	7830      	ldrb	r0, [r6, #0]
 800ad1e:	f7ff ff9f 	bl	800ac60 <__hexdig_fun>
 800ad22:	2800      	cmp	r0, #0
 800ad24:	d1f8      	bne.n	800ad18 <__gethex+0x8c>
 800ad26:	1ba4      	subs	r4, r4, r6
 800ad28:	00a7      	lsls	r7, r4, #2
 800ad2a:	7833      	ldrb	r3, [r6, #0]
 800ad2c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ad30:	2b50      	cmp	r3, #80	@ 0x50
 800ad32:	d13e      	bne.n	800adb2 <__gethex+0x126>
 800ad34:	7873      	ldrb	r3, [r6, #1]
 800ad36:	2b2b      	cmp	r3, #43	@ 0x2b
 800ad38:	d033      	beq.n	800ada2 <__gethex+0x116>
 800ad3a:	2b2d      	cmp	r3, #45	@ 0x2d
 800ad3c:	d034      	beq.n	800ada8 <__gethex+0x11c>
 800ad3e:	1c71      	adds	r1, r6, #1
 800ad40:	2400      	movs	r4, #0
 800ad42:	7808      	ldrb	r0, [r1, #0]
 800ad44:	f7ff ff8c 	bl	800ac60 <__hexdig_fun>
 800ad48:	1e43      	subs	r3, r0, #1
 800ad4a:	b2db      	uxtb	r3, r3
 800ad4c:	2b18      	cmp	r3, #24
 800ad4e:	d830      	bhi.n	800adb2 <__gethex+0x126>
 800ad50:	f1a0 0210 	sub.w	r2, r0, #16
 800ad54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ad58:	f7ff ff82 	bl	800ac60 <__hexdig_fun>
 800ad5c:	f100 3cff 	add.w	ip, r0, #4294967295
 800ad60:	fa5f fc8c 	uxtb.w	ip, ip
 800ad64:	f1bc 0f18 	cmp.w	ip, #24
 800ad68:	f04f 030a 	mov.w	r3, #10
 800ad6c:	d91e      	bls.n	800adac <__gethex+0x120>
 800ad6e:	b104      	cbz	r4, 800ad72 <__gethex+0xe6>
 800ad70:	4252      	negs	r2, r2
 800ad72:	4417      	add	r7, r2
 800ad74:	f8ca 1000 	str.w	r1, [sl]
 800ad78:	b1ed      	cbz	r5, 800adb6 <__gethex+0x12a>
 800ad7a:	f1bb 0f00 	cmp.w	fp, #0
 800ad7e:	bf0c      	ite	eq
 800ad80:	2506      	moveq	r5, #6
 800ad82:	2500      	movne	r5, #0
 800ad84:	4628      	mov	r0, r5
 800ad86:	b005      	add	sp, #20
 800ad88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad8c:	2500      	movs	r5, #0
 800ad8e:	462c      	mov	r4, r5
 800ad90:	e7b0      	b.n	800acf4 <__gethex+0x68>
 800ad92:	2c00      	cmp	r4, #0
 800ad94:	d1c7      	bne.n	800ad26 <__gethex+0x9a>
 800ad96:	4627      	mov	r7, r4
 800ad98:	e7c7      	b.n	800ad2a <__gethex+0x9e>
 800ad9a:	464e      	mov	r6, r9
 800ad9c:	462f      	mov	r7, r5
 800ad9e:	2501      	movs	r5, #1
 800ada0:	e7c3      	b.n	800ad2a <__gethex+0x9e>
 800ada2:	2400      	movs	r4, #0
 800ada4:	1cb1      	adds	r1, r6, #2
 800ada6:	e7cc      	b.n	800ad42 <__gethex+0xb6>
 800ada8:	2401      	movs	r4, #1
 800adaa:	e7fb      	b.n	800ada4 <__gethex+0x118>
 800adac:	fb03 0002 	mla	r0, r3, r2, r0
 800adb0:	e7ce      	b.n	800ad50 <__gethex+0xc4>
 800adb2:	4631      	mov	r1, r6
 800adb4:	e7de      	b.n	800ad74 <__gethex+0xe8>
 800adb6:	eba6 0309 	sub.w	r3, r6, r9
 800adba:	3b01      	subs	r3, #1
 800adbc:	4629      	mov	r1, r5
 800adbe:	2b07      	cmp	r3, #7
 800adc0:	dc0a      	bgt.n	800add8 <__gethex+0x14c>
 800adc2:	9801      	ldr	r0, [sp, #4]
 800adc4:	f000 fafc 	bl	800b3c0 <_Balloc>
 800adc8:	4604      	mov	r4, r0
 800adca:	b940      	cbnz	r0, 800adde <__gethex+0x152>
 800adcc:	4b5c      	ldr	r3, [pc, #368]	@ (800af40 <__gethex+0x2b4>)
 800adce:	4602      	mov	r2, r0
 800add0:	21e4      	movs	r1, #228	@ 0xe4
 800add2:	485c      	ldr	r0, [pc, #368]	@ (800af44 <__gethex+0x2b8>)
 800add4:	f7ff f832 	bl	8009e3c <__assert_func>
 800add8:	3101      	adds	r1, #1
 800adda:	105b      	asrs	r3, r3, #1
 800addc:	e7ef      	b.n	800adbe <__gethex+0x132>
 800adde:	f100 0a14 	add.w	sl, r0, #20
 800ade2:	2300      	movs	r3, #0
 800ade4:	4655      	mov	r5, sl
 800ade6:	469b      	mov	fp, r3
 800ade8:	45b1      	cmp	r9, r6
 800adea:	d337      	bcc.n	800ae5c <__gethex+0x1d0>
 800adec:	f845 bb04 	str.w	fp, [r5], #4
 800adf0:	eba5 050a 	sub.w	r5, r5, sl
 800adf4:	10ad      	asrs	r5, r5, #2
 800adf6:	6125      	str	r5, [r4, #16]
 800adf8:	4658      	mov	r0, fp
 800adfa:	f000 fbd3 	bl	800b5a4 <__hi0bits>
 800adfe:	016d      	lsls	r5, r5, #5
 800ae00:	f8d8 6000 	ldr.w	r6, [r8]
 800ae04:	1a2d      	subs	r5, r5, r0
 800ae06:	42b5      	cmp	r5, r6
 800ae08:	dd54      	ble.n	800aeb4 <__gethex+0x228>
 800ae0a:	1bad      	subs	r5, r5, r6
 800ae0c:	4629      	mov	r1, r5
 800ae0e:	4620      	mov	r0, r4
 800ae10:	f000 ff5f 	bl	800bcd2 <__any_on>
 800ae14:	4681      	mov	r9, r0
 800ae16:	b178      	cbz	r0, 800ae38 <__gethex+0x1ac>
 800ae18:	1e6b      	subs	r3, r5, #1
 800ae1a:	1159      	asrs	r1, r3, #5
 800ae1c:	f003 021f 	and.w	r2, r3, #31
 800ae20:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ae24:	f04f 0901 	mov.w	r9, #1
 800ae28:	fa09 f202 	lsl.w	r2, r9, r2
 800ae2c:	420a      	tst	r2, r1
 800ae2e:	d003      	beq.n	800ae38 <__gethex+0x1ac>
 800ae30:	454b      	cmp	r3, r9
 800ae32:	dc36      	bgt.n	800aea2 <__gethex+0x216>
 800ae34:	f04f 0902 	mov.w	r9, #2
 800ae38:	4629      	mov	r1, r5
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	f7ff febe 	bl	800abbc <rshift>
 800ae40:	442f      	add	r7, r5
 800ae42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ae46:	42bb      	cmp	r3, r7
 800ae48:	da42      	bge.n	800aed0 <__gethex+0x244>
 800ae4a:	9801      	ldr	r0, [sp, #4]
 800ae4c:	4621      	mov	r1, r4
 800ae4e:	f000 faf7 	bl	800b440 <_Bfree>
 800ae52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae54:	2300      	movs	r3, #0
 800ae56:	6013      	str	r3, [r2, #0]
 800ae58:	25a3      	movs	r5, #163	@ 0xa3
 800ae5a:	e793      	b.n	800ad84 <__gethex+0xf8>
 800ae5c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800ae60:	2a2e      	cmp	r2, #46	@ 0x2e
 800ae62:	d012      	beq.n	800ae8a <__gethex+0x1fe>
 800ae64:	2b20      	cmp	r3, #32
 800ae66:	d104      	bne.n	800ae72 <__gethex+0x1e6>
 800ae68:	f845 bb04 	str.w	fp, [r5], #4
 800ae6c:	f04f 0b00 	mov.w	fp, #0
 800ae70:	465b      	mov	r3, fp
 800ae72:	7830      	ldrb	r0, [r6, #0]
 800ae74:	9303      	str	r3, [sp, #12]
 800ae76:	f7ff fef3 	bl	800ac60 <__hexdig_fun>
 800ae7a:	9b03      	ldr	r3, [sp, #12]
 800ae7c:	f000 000f 	and.w	r0, r0, #15
 800ae80:	4098      	lsls	r0, r3
 800ae82:	ea4b 0b00 	orr.w	fp, fp, r0
 800ae86:	3304      	adds	r3, #4
 800ae88:	e7ae      	b.n	800ade8 <__gethex+0x15c>
 800ae8a:	45b1      	cmp	r9, r6
 800ae8c:	d8ea      	bhi.n	800ae64 <__gethex+0x1d8>
 800ae8e:	492b      	ldr	r1, [pc, #172]	@ (800af3c <__gethex+0x2b0>)
 800ae90:	9303      	str	r3, [sp, #12]
 800ae92:	2201      	movs	r2, #1
 800ae94:	4630      	mov	r0, r6
 800ae96:	f7fe ff28 	bl	8009cea <strncmp>
 800ae9a:	9b03      	ldr	r3, [sp, #12]
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	d1e1      	bne.n	800ae64 <__gethex+0x1d8>
 800aea0:	e7a2      	b.n	800ade8 <__gethex+0x15c>
 800aea2:	1ea9      	subs	r1, r5, #2
 800aea4:	4620      	mov	r0, r4
 800aea6:	f000 ff14 	bl	800bcd2 <__any_on>
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	d0c2      	beq.n	800ae34 <__gethex+0x1a8>
 800aeae:	f04f 0903 	mov.w	r9, #3
 800aeb2:	e7c1      	b.n	800ae38 <__gethex+0x1ac>
 800aeb4:	da09      	bge.n	800aeca <__gethex+0x23e>
 800aeb6:	1b75      	subs	r5, r6, r5
 800aeb8:	4621      	mov	r1, r4
 800aeba:	9801      	ldr	r0, [sp, #4]
 800aebc:	462a      	mov	r2, r5
 800aebe:	f000 fccf 	bl	800b860 <__lshift>
 800aec2:	1b7f      	subs	r7, r7, r5
 800aec4:	4604      	mov	r4, r0
 800aec6:	f100 0a14 	add.w	sl, r0, #20
 800aeca:	f04f 0900 	mov.w	r9, #0
 800aece:	e7b8      	b.n	800ae42 <__gethex+0x1b6>
 800aed0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aed4:	42bd      	cmp	r5, r7
 800aed6:	dd6f      	ble.n	800afb8 <__gethex+0x32c>
 800aed8:	1bed      	subs	r5, r5, r7
 800aeda:	42ae      	cmp	r6, r5
 800aedc:	dc34      	bgt.n	800af48 <__gethex+0x2bc>
 800aede:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aee2:	2b02      	cmp	r3, #2
 800aee4:	d022      	beq.n	800af2c <__gethex+0x2a0>
 800aee6:	2b03      	cmp	r3, #3
 800aee8:	d024      	beq.n	800af34 <__gethex+0x2a8>
 800aeea:	2b01      	cmp	r3, #1
 800aeec:	d115      	bne.n	800af1a <__gethex+0x28e>
 800aeee:	42ae      	cmp	r6, r5
 800aef0:	d113      	bne.n	800af1a <__gethex+0x28e>
 800aef2:	2e01      	cmp	r6, #1
 800aef4:	d10b      	bne.n	800af0e <__gethex+0x282>
 800aef6:	9a02      	ldr	r2, [sp, #8]
 800aef8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aefc:	6013      	str	r3, [r2, #0]
 800aefe:	2301      	movs	r3, #1
 800af00:	6123      	str	r3, [r4, #16]
 800af02:	f8ca 3000 	str.w	r3, [sl]
 800af06:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af08:	2562      	movs	r5, #98	@ 0x62
 800af0a:	601c      	str	r4, [r3, #0]
 800af0c:	e73a      	b.n	800ad84 <__gethex+0xf8>
 800af0e:	1e71      	subs	r1, r6, #1
 800af10:	4620      	mov	r0, r4
 800af12:	f000 fede 	bl	800bcd2 <__any_on>
 800af16:	2800      	cmp	r0, #0
 800af18:	d1ed      	bne.n	800aef6 <__gethex+0x26a>
 800af1a:	9801      	ldr	r0, [sp, #4]
 800af1c:	4621      	mov	r1, r4
 800af1e:	f000 fa8f 	bl	800b440 <_Bfree>
 800af22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af24:	2300      	movs	r3, #0
 800af26:	6013      	str	r3, [r2, #0]
 800af28:	2550      	movs	r5, #80	@ 0x50
 800af2a:	e72b      	b.n	800ad84 <__gethex+0xf8>
 800af2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d1f3      	bne.n	800af1a <__gethex+0x28e>
 800af32:	e7e0      	b.n	800aef6 <__gethex+0x26a>
 800af34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800af36:	2b00      	cmp	r3, #0
 800af38:	d1dd      	bne.n	800aef6 <__gethex+0x26a>
 800af3a:	e7ee      	b.n	800af1a <__gethex+0x28e>
 800af3c:	0800cbd8 	.word	0x0800cbd8
 800af40:	0800ccd3 	.word	0x0800ccd3
 800af44:	0800cce4 	.word	0x0800cce4
 800af48:	1e6f      	subs	r7, r5, #1
 800af4a:	f1b9 0f00 	cmp.w	r9, #0
 800af4e:	d130      	bne.n	800afb2 <__gethex+0x326>
 800af50:	b127      	cbz	r7, 800af5c <__gethex+0x2d0>
 800af52:	4639      	mov	r1, r7
 800af54:	4620      	mov	r0, r4
 800af56:	f000 febc 	bl	800bcd2 <__any_on>
 800af5a:	4681      	mov	r9, r0
 800af5c:	117a      	asrs	r2, r7, #5
 800af5e:	2301      	movs	r3, #1
 800af60:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800af64:	f007 071f 	and.w	r7, r7, #31
 800af68:	40bb      	lsls	r3, r7
 800af6a:	4213      	tst	r3, r2
 800af6c:	4629      	mov	r1, r5
 800af6e:	4620      	mov	r0, r4
 800af70:	bf18      	it	ne
 800af72:	f049 0902 	orrne.w	r9, r9, #2
 800af76:	f7ff fe21 	bl	800abbc <rshift>
 800af7a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800af7e:	1b76      	subs	r6, r6, r5
 800af80:	2502      	movs	r5, #2
 800af82:	f1b9 0f00 	cmp.w	r9, #0
 800af86:	d047      	beq.n	800b018 <__gethex+0x38c>
 800af88:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800af8c:	2b02      	cmp	r3, #2
 800af8e:	d015      	beq.n	800afbc <__gethex+0x330>
 800af90:	2b03      	cmp	r3, #3
 800af92:	d017      	beq.n	800afc4 <__gethex+0x338>
 800af94:	2b01      	cmp	r3, #1
 800af96:	d109      	bne.n	800afac <__gethex+0x320>
 800af98:	f019 0f02 	tst.w	r9, #2
 800af9c:	d006      	beq.n	800afac <__gethex+0x320>
 800af9e:	f8da 3000 	ldr.w	r3, [sl]
 800afa2:	ea49 0903 	orr.w	r9, r9, r3
 800afa6:	f019 0f01 	tst.w	r9, #1
 800afaa:	d10e      	bne.n	800afca <__gethex+0x33e>
 800afac:	f045 0510 	orr.w	r5, r5, #16
 800afb0:	e032      	b.n	800b018 <__gethex+0x38c>
 800afb2:	f04f 0901 	mov.w	r9, #1
 800afb6:	e7d1      	b.n	800af5c <__gethex+0x2d0>
 800afb8:	2501      	movs	r5, #1
 800afba:	e7e2      	b.n	800af82 <__gethex+0x2f6>
 800afbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afbe:	f1c3 0301 	rsb	r3, r3, #1
 800afc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800afc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d0f0      	beq.n	800afac <__gethex+0x320>
 800afca:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800afce:	f104 0314 	add.w	r3, r4, #20
 800afd2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800afd6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800afda:	f04f 0c00 	mov.w	ip, #0
 800afde:	4618      	mov	r0, r3
 800afe0:	f853 2b04 	ldr.w	r2, [r3], #4
 800afe4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800afe8:	d01b      	beq.n	800b022 <__gethex+0x396>
 800afea:	3201      	adds	r2, #1
 800afec:	6002      	str	r2, [r0, #0]
 800afee:	2d02      	cmp	r5, #2
 800aff0:	f104 0314 	add.w	r3, r4, #20
 800aff4:	d13c      	bne.n	800b070 <__gethex+0x3e4>
 800aff6:	f8d8 2000 	ldr.w	r2, [r8]
 800affa:	3a01      	subs	r2, #1
 800affc:	42b2      	cmp	r2, r6
 800affe:	d109      	bne.n	800b014 <__gethex+0x388>
 800b000:	1171      	asrs	r1, r6, #5
 800b002:	2201      	movs	r2, #1
 800b004:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b008:	f006 061f 	and.w	r6, r6, #31
 800b00c:	fa02 f606 	lsl.w	r6, r2, r6
 800b010:	421e      	tst	r6, r3
 800b012:	d13a      	bne.n	800b08a <__gethex+0x3fe>
 800b014:	f045 0520 	orr.w	r5, r5, #32
 800b018:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b01a:	601c      	str	r4, [r3, #0]
 800b01c:	9b02      	ldr	r3, [sp, #8]
 800b01e:	601f      	str	r7, [r3, #0]
 800b020:	e6b0      	b.n	800ad84 <__gethex+0xf8>
 800b022:	4299      	cmp	r1, r3
 800b024:	f843 cc04 	str.w	ip, [r3, #-4]
 800b028:	d8d9      	bhi.n	800afde <__gethex+0x352>
 800b02a:	68a3      	ldr	r3, [r4, #8]
 800b02c:	459b      	cmp	fp, r3
 800b02e:	db17      	blt.n	800b060 <__gethex+0x3d4>
 800b030:	6861      	ldr	r1, [r4, #4]
 800b032:	9801      	ldr	r0, [sp, #4]
 800b034:	3101      	adds	r1, #1
 800b036:	f000 f9c3 	bl	800b3c0 <_Balloc>
 800b03a:	4681      	mov	r9, r0
 800b03c:	b918      	cbnz	r0, 800b046 <__gethex+0x3ba>
 800b03e:	4b1a      	ldr	r3, [pc, #104]	@ (800b0a8 <__gethex+0x41c>)
 800b040:	4602      	mov	r2, r0
 800b042:	2184      	movs	r1, #132	@ 0x84
 800b044:	e6c5      	b.n	800add2 <__gethex+0x146>
 800b046:	6922      	ldr	r2, [r4, #16]
 800b048:	3202      	adds	r2, #2
 800b04a:	f104 010c 	add.w	r1, r4, #12
 800b04e:	0092      	lsls	r2, r2, #2
 800b050:	300c      	adds	r0, #12
 800b052:	f7fe fed4 	bl	8009dfe <memcpy>
 800b056:	4621      	mov	r1, r4
 800b058:	9801      	ldr	r0, [sp, #4]
 800b05a:	f000 f9f1 	bl	800b440 <_Bfree>
 800b05e:	464c      	mov	r4, r9
 800b060:	6923      	ldr	r3, [r4, #16]
 800b062:	1c5a      	adds	r2, r3, #1
 800b064:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b068:	6122      	str	r2, [r4, #16]
 800b06a:	2201      	movs	r2, #1
 800b06c:	615a      	str	r2, [r3, #20]
 800b06e:	e7be      	b.n	800afee <__gethex+0x362>
 800b070:	6922      	ldr	r2, [r4, #16]
 800b072:	455a      	cmp	r2, fp
 800b074:	dd0b      	ble.n	800b08e <__gethex+0x402>
 800b076:	2101      	movs	r1, #1
 800b078:	4620      	mov	r0, r4
 800b07a:	f7ff fd9f 	bl	800abbc <rshift>
 800b07e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b082:	3701      	adds	r7, #1
 800b084:	42bb      	cmp	r3, r7
 800b086:	f6ff aee0 	blt.w	800ae4a <__gethex+0x1be>
 800b08a:	2501      	movs	r5, #1
 800b08c:	e7c2      	b.n	800b014 <__gethex+0x388>
 800b08e:	f016 061f 	ands.w	r6, r6, #31
 800b092:	d0fa      	beq.n	800b08a <__gethex+0x3fe>
 800b094:	4453      	add	r3, sl
 800b096:	f1c6 0620 	rsb	r6, r6, #32
 800b09a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b09e:	f000 fa81 	bl	800b5a4 <__hi0bits>
 800b0a2:	42b0      	cmp	r0, r6
 800b0a4:	dbe7      	blt.n	800b076 <__gethex+0x3ea>
 800b0a6:	e7f0      	b.n	800b08a <__gethex+0x3fe>
 800b0a8:	0800ccd3 	.word	0x0800ccd3

0800b0ac <L_shift>:
 800b0ac:	f1c2 0208 	rsb	r2, r2, #8
 800b0b0:	0092      	lsls	r2, r2, #2
 800b0b2:	b570      	push	{r4, r5, r6, lr}
 800b0b4:	f1c2 0620 	rsb	r6, r2, #32
 800b0b8:	6843      	ldr	r3, [r0, #4]
 800b0ba:	6804      	ldr	r4, [r0, #0]
 800b0bc:	fa03 f506 	lsl.w	r5, r3, r6
 800b0c0:	432c      	orrs	r4, r5
 800b0c2:	40d3      	lsrs	r3, r2
 800b0c4:	6004      	str	r4, [r0, #0]
 800b0c6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b0ca:	4288      	cmp	r0, r1
 800b0cc:	d3f4      	bcc.n	800b0b8 <L_shift+0xc>
 800b0ce:	bd70      	pop	{r4, r5, r6, pc}

0800b0d0 <__match>:
 800b0d0:	b530      	push	{r4, r5, lr}
 800b0d2:	6803      	ldr	r3, [r0, #0]
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0da:	b914      	cbnz	r4, 800b0e2 <__match+0x12>
 800b0dc:	6003      	str	r3, [r0, #0]
 800b0de:	2001      	movs	r0, #1
 800b0e0:	bd30      	pop	{r4, r5, pc}
 800b0e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0e6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b0ea:	2d19      	cmp	r5, #25
 800b0ec:	bf98      	it	ls
 800b0ee:	3220      	addls	r2, #32
 800b0f0:	42a2      	cmp	r2, r4
 800b0f2:	d0f0      	beq.n	800b0d6 <__match+0x6>
 800b0f4:	2000      	movs	r0, #0
 800b0f6:	e7f3      	b.n	800b0e0 <__match+0x10>

0800b0f8 <__hexnan>:
 800b0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0fc:	680b      	ldr	r3, [r1, #0]
 800b0fe:	6801      	ldr	r1, [r0, #0]
 800b100:	115e      	asrs	r6, r3, #5
 800b102:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b106:	f013 031f 	ands.w	r3, r3, #31
 800b10a:	b087      	sub	sp, #28
 800b10c:	bf18      	it	ne
 800b10e:	3604      	addne	r6, #4
 800b110:	2500      	movs	r5, #0
 800b112:	1f37      	subs	r7, r6, #4
 800b114:	4682      	mov	sl, r0
 800b116:	4690      	mov	r8, r2
 800b118:	9301      	str	r3, [sp, #4]
 800b11a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b11e:	46b9      	mov	r9, r7
 800b120:	463c      	mov	r4, r7
 800b122:	9502      	str	r5, [sp, #8]
 800b124:	46ab      	mov	fp, r5
 800b126:	784a      	ldrb	r2, [r1, #1]
 800b128:	1c4b      	adds	r3, r1, #1
 800b12a:	9303      	str	r3, [sp, #12]
 800b12c:	b342      	cbz	r2, 800b180 <__hexnan+0x88>
 800b12e:	4610      	mov	r0, r2
 800b130:	9105      	str	r1, [sp, #20]
 800b132:	9204      	str	r2, [sp, #16]
 800b134:	f7ff fd94 	bl	800ac60 <__hexdig_fun>
 800b138:	2800      	cmp	r0, #0
 800b13a:	d151      	bne.n	800b1e0 <__hexnan+0xe8>
 800b13c:	9a04      	ldr	r2, [sp, #16]
 800b13e:	9905      	ldr	r1, [sp, #20]
 800b140:	2a20      	cmp	r2, #32
 800b142:	d818      	bhi.n	800b176 <__hexnan+0x7e>
 800b144:	9b02      	ldr	r3, [sp, #8]
 800b146:	459b      	cmp	fp, r3
 800b148:	dd13      	ble.n	800b172 <__hexnan+0x7a>
 800b14a:	454c      	cmp	r4, r9
 800b14c:	d206      	bcs.n	800b15c <__hexnan+0x64>
 800b14e:	2d07      	cmp	r5, #7
 800b150:	dc04      	bgt.n	800b15c <__hexnan+0x64>
 800b152:	462a      	mov	r2, r5
 800b154:	4649      	mov	r1, r9
 800b156:	4620      	mov	r0, r4
 800b158:	f7ff ffa8 	bl	800b0ac <L_shift>
 800b15c:	4544      	cmp	r4, r8
 800b15e:	d952      	bls.n	800b206 <__hexnan+0x10e>
 800b160:	2300      	movs	r3, #0
 800b162:	f1a4 0904 	sub.w	r9, r4, #4
 800b166:	f844 3c04 	str.w	r3, [r4, #-4]
 800b16a:	f8cd b008 	str.w	fp, [sp, #8]
 800b16e:	464c      	mov	r4, r9
 800b170:	461d      	mov	r5, r3
 800b172:	9903      	ldr	r1, [sp, #12]
 800b174:	e7d7      	b.n	800b126 <__hexnan+0x2e>
 800b176:	2a29      	cmp	r2, #41	@ 0x29
 800b178:	d157      	bne.n	800b22a <__hexnan+0x132>
 800b17a:	3102      	adds	r1, #2
 800b17c:	f8ca 1000 	str.w	r1, [sl]
 800b180:	f1bb 0f00 	cmp.w	fp, #0
 800b184:	d051      	beq.n	800b22a <__hexnan+0x132>
 800b186:	454c      	cmp	r4, r9
 800b188:	d206      	bcs.n	800b198 <__hexnan+0xa0>
 800b18a:	2d07      	cmp	r5, #7
 800b18c:	dc04      	bgt.n	800b198 <__hexnan+0xa0>
 800b18e:	462a      	mov	r2, r5
 800b190:	4649      	mov	r1, r9
 800b192:	4620      	mov	r0, r4
 800b194:	f7ff ff8a 	bl	800b0ac <L_shift>
 800b198:	4544      	cmp	r4, r8
 800b19a:	d936      	bls.n	800b20a <__hexnan+0x112>
 800b19c:	f1a8 0204 	sub.w	r2, r8, #4
 800b1a0:	4623      	mov	r3, r4
 800b1a2:	f853 1b04 	ldr.w	r1, [r3], #4
 800b1a6:	f842 1f04 	str.w	r1, [r2, #4]!
 800b1aa:	429f      	cmp	r7, r3
 800b1ac:	d2f9      	bcs.n	800b1a2 <__hexnan+0xaa>
 800b1ae:	1b3b      	subs	r3, r7, r4
 800b1b0:	f023 0303 	bic.w	r3, r3, #3
 800b1b4:	3304      	adds	r3, #4
 800b1b6:	3401      	adds	r4, #1
 800b1b8:	3e03      	subs	r6, #3
 800b1ba:	42b4      	cmp	r4, r6
 800b1bc:	bf88      	it	hi
 800b1be:	2304      	movhi	r3, #4
 800b1c0:	4443      	add	r3, r8
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	f843 2b04 	str.w	r2, [r3], #4
 800b1c8:	429f      	cmp	r7, r3
 800b1ca:	d2fb      	bcs.n	800b1c4 <__hexnan+0xcc>
 800b1cc:	683b      	ldr	r3, [r7, #0]
 800b1ce:	b91b      	cbnz	r3, 800b1d8 <__hexnan+0xe0>
 800b1d0:	4547      	cmp	r7, r8
 800b1d2:	d128      	bne.n	800b226 <__hexnan+0x12e>
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	603b      	str	r3, [r7, #0]
 800b1d8:	2005      	movs	r0, #5
 800b1da:	b007      	add	sp, #28
 800b1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1e0:	3501      	adds	r5, #1
 800b1e2:	2d08      	cmp	r5, #8
 800b1e4:	f10b 0b01 	add.w	fp, fp, #1
 800b1e8:	dd06      	ble.n	800b1f8 <__hexnan+0x100>
 800b1ea:	4544      	cmp	r4, r8
 800b1ec:	d9c1      	bls.n	800b172 <__hexnan+0x7a>
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b1f4:	2501      	movs	r5, #1
 800b1f6:	3c04      	subs	r4, #4
 800b1f8:	6822      	ldr	r2, [r4, #0]
 800b1fa:	f000 000f 	and.w	r0, r0, #15
 800b1fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b202:	6020      	str	r0, [r4, #0]
 800b204:	e7b5      	b.n	800b172 <__hexnan+0x7a>
 800b206:	2508      	movs	r5, #8
 800b208:	e7b3      	b.n	800b172 <__hexnan+0x7a>
 800b20a:	9b01      	ldr	r3, [sp, #4]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d0dd      	beq.n	800b1cc <__hexnan+0xd4>
 800b210:	f1c3 0320 	rsb	r3, r3, #32
 800b214:	f04f 32ff 	mov.w	r2, #4294967295
 800b218:	40da      	lsrs	r2, r3
 800b21a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b21e:	4013      	ands	r3, r2
 800b220:	f846 3c04 	str.w	r3, [r6, #-4]
 800b224:	e7d2      	b.n	800b1cc <__hexnan+0xd4>
 800b226:	3f04      	subs	r7, #4
 800b228:	e7d0      	b.n	800b1cc <__hexnan+0xd4>
 800b22a:	2004      	movs	r0, #4
 800b22c:	e7d5      	b.n	800b1da <__hexnan+0xe2>
	...

0800b230 <malloc>:
 800b230:	4b02      	ldr	r3, [pc, #8]	@ (800b23c <malloc+0xc>)
 800b232:	4601      	mov	r1, r0
 800b234:	6818      	ldr	r0, [r3, #0]
 800b236:	f000 b825 	b.w	800b284 <_malloc_r>
 800b23a:	bf00      	nop
 800b23c:	20000208 	.word	0x20000208

0800b240 <sbrk_aligned>:
 800b240:	b570      	push	{r4, r5, r6, lr}
 800b242:	4e0f      	ldr	r6, [pc, #60]	@ (800b280 <sbrk_aligned+0x40>)
 800b244:	460c      	mov	r4, r1
 800b246:	6831      	ldr	r1, [r6, #0]
 800b248:	4605      	mov	r5, r0
 800b24a:	b911      	cbnz	r1, 800b252 <sbrk_aligned+0x12>
 800b24c:	f001 f81a 	bl	800c284 <_sbrk_r>
 800b250:	6030      	str	r0, [r6, #0]
 800b252:	4621      	mov	r1, r4
 800b254:	4628      	mov	r0, r5
 800b256:	f001 f815 	bl	800c284 <_sbrk_r>
 800b25a:	1c43      	adds	r3, r0, #1
 800b25c:	d103      	bne.n	800b266 <sbrk_aligned+0x26>
 800b25e:	f04f 34ff 	mov.w	r4, #4294967295
 800b262:	4620      	mov	r0, r4
 800b264:	bd70      	pop	{r4, r5, r6, pc}
 800b266:	1cc4      	adds	r4, r0, #3
 800b268:	f024 0403 	bic.w	r4, r4, #3
 800b26c:	42a0      	cmp	r0, r4
 800b26e:	d0f8      	beq.n	800b262 <sbrk_aligned+0x22>
 800b270:	1a21      	subs	r1, r4, r0
 800b272:	4628      	mov	r0, r5
 800b274:	f001 f806 	bl	800c284 <_sbrk_r>
 800b278:	3001      	adds	r0, #1
 800b27a:	d1f2      	bne.n	800b262 <sbrk_aligned+0x22>
 800b27c:	e7ef      	b.n	800b25e <sbrk_aligned+0x1e>
 800b27e:	bf00      	nop
 800b280:	200008cc 	.word	0x200008cc

0800b284 <_malloc_r>:
 800b284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b288:	1ccd      	adds	r5, r1, #3
 800b28a:	f025 0503 	bic.w	r5, r5, #3
 800b28e:	3508      	adds	r5, #8
 800b290:	2d0c      	cmp	r5, #12
 800b292:	bf38      	it	cc
 800b294:	250c      	movcc	r5, #12
 800b296:	2d00      	cmp	r5, #0
 800b298:	4606      	mov	r6, r0
 800b29a:	db01      	blt.n	800b2a0 <_malloc_r+0x1c>
 800b29c:	42a9      	cmp	r1, r5
 800b29e:	d904      	bls.n	800b2aa <_malloc_r+0x26>
 800b2a0:	230c      	movs	r3, #12
 800b2a2:	6033      	str	r3, [r6, #0]
 800b2a4:	2000      	movs	r0, #0
 800b2a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b380 <_malloc_r+0xfc>
 800b2ae:	f000 f87b 	bl	800b3a8 <__malloc_lock>
 800b2b2:	f8d8 3000 	ldr.w	r3, [r8]
 800b2b6:	461c      	mov	r4, r3
 800b2b8:	bb44      	cbnz	r4, 800b30c <_malloc_r+0x88>
 800b2ba:	4629      	mov	r1, r5
 800b2bc:	4630      	mov	r0, r6
 800b2be:	f7ff ffbf 	bl	800b240 <sbrk_aligned>
 800b2c2:	1c43      	adds	r3, r0, #1
 800b2c4:	4604      	mov	r4, r0
 800b2c6:	d158      	bne.n	800b37a <_malloc_r+0xf6>
 800b2c8:	f8d8 4000 	ldr.w	r4, [r8]
 800b2cc:	4627      	mov	r7, r4
 800b2ce:	2f00      	cmp	r7, #0
 800b2d0:	d143      	bne.n	800b35a <_malloc_r+0xd6>
 800b2d2:	2c00      	cmp	r4, #0
 800b2d4:	d04b      	beq.n	800b36e <_malloc_r+0xea>
 800b2d6:	6823      	ldr	r3, [r4, #0]
 800b2d8:	4639      	mov	r1, r7
 800b2da:	4630      	mov	r0, r6
 800b2dc:	eb04 0903 	add.w	r9, r4, r3
 800b2e0:	f000 ffd0 	bl	800c284 <_sbrk_r>
 800b2e4:	4581      	cmp	r9, r0
 800b2e6:	d142      	bne.n	800b36e <_malloc_r+0xea>
 800b2e8:	6821      	ldr	r1, [r4, #0]
 800b2ea:	1a6d      	subs	r5, r5, r1
 800b2ec:	4629      	mov	r1, r5
 800b2ee:	4630      	mov	r0, r6
 800b2f0:	f7ff ffa6 	bl	800b240 <sbrk_aligned>
 800b2f4:	3001      	adds	r0, #1
 800b2f6:	d03a      	beq.n	800b36e <_malloc_r+0xea>
 800b2f8:	6823      	ldr	r3, [r4, #0]
 800b2fa:	442b      	add	r3, r5
 800b2fc:	6023      	str	r3, [r4, #0]
 800b2fe:	f8d8 3000 	ldr.w	r3, [r8]
 800b302:	685a      	ldr	r2, [r3, #4]
 800b304:	bb62      	cbnz	r2, 800b360 <_malloc_r+0xdc>
 800b306:	f8c8 7000 	str.w	r7, [r8]
 800b30a:	e00f      	b.n	800b32c <_malloc_r+0xa8>
 800b30c:	6822      	ldr	r2, [r4, #0]
 800b30e:	1b52      	subs	r2, r2, r5
 800b310:	d420      	bmi.n	800b354 <_malloc_r+0xd0>
 800b312:	2a0b      	cmp	r2, #11
 800b314:	d917      	bls.n	800b346 <_malloc_r+0xc2>
 800b316:	1961      	adds	r1, r4, r5
 800b318:	42a3      	cmp	r3, r4
 800b31a:	6025      	str	r5, [r4, #0]
 800b31c:	bf18      	it	ne
 800b31e:	6059      	strne	r1, [r3, #4]
 800b320:	6863      	ldr	r3, [r4, #4]
 800b322:	bf08      	it	eq
 800b324:	f8c8 1000 	streq.w	r1, [r8]
 800b328:	5162      	str	r2, [r4, r5]
 800b32a:	604b      	str	r3, [r1, #4]
 800b32c:	4630      	mov	r0, r6
 800b32e:	f000 f841 	bl	800b3b4 <__malloc_unlock>
 800b332:	f104 000b 	add.w	r0, r4, #11
 800b336:	1d23      	adds	r3, r4, #4
 800b338:	f020 0007 	bic.w	r0, r0, #7
 800b33c:	1ac2      	subs	r2, r0, r3
 800b33e:	bf1c      	itt	ne
 800b340:	1a1b      	subne	r3, r3, r0
 800b342:	50a3      	strne	r3, [r4, r2]
 800b344:	e7af      	b.n	800b2a6 <_malloc_r+0x22>
 800b346:	6862      	ldr	r2, [r4, #4]
 800b348:	42a3      	cmp	r3, r4
 800b34a:	bf0c      	ite	eq
 800b34c:	f8c8 2000 	streq.w	r2, [r8]
 800b350:	605a      	strne	r2, [r3, #4]
 800b352:	e7eb      	b.n	800b32c <_malloc_r+0xa8>
 800b354:	4623      	mov	r3, r4
 800b356:	6864      	ldr	r4, [r4, #4]
 800b358:	e7ae      	b.n	800b2b8 <_malloc_r+0x34>
 800b35a:	463c      	mov	r4, r7
 800b35c:	687f      	ldr	r7, [r7, #4]
 800b35e:	e7b6      	b.n	800b2ce <_malloc_r+0x4a>
 800b360:	461a      	mov	r2, r3
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	42a3      	cmp	r3, r4
 800b366:	d1fb      	bne.n	800b360 <_malloc_r+0xdc>
 800b368:	2300      	movs	r3, #0
 800b36a:	6053      	str	r3, [r2, #4]
 800b36c:	e7de      	b.n	800b32c <_malloc_r+0xa8>
 800b36e:	230c      	movs	r3, #12
 800b370:	6033      	str	r3, [r6, #0]
 800b372:	4630      	mov	r0, r6
 800b374:	f000 f81e 	bl	800b3b4 <__malloc_unlock>
 800b378:	e794      	b.n	800b2a4 <_malloc_r+0x20>
 800b37a:	6005      	str	r5, [r0, #0]
 800b37c:	e7d6      	b.n	800b32c <_malloc_r+0xa8>
 800b37e:	bf00      	nop
 800b380:	200008d0 	.word	0x200008d0

0800b384 <__ascii_mbtowc>:
 800b384:	b082      	sub	sp, #8
 800b386:	b901      	cbnz	r1, 800b38a <__ascii_mbtowc+0x6>
 800b388:	a901      	add	r1, sp, #4
 800b38a:	b142      	cbz	r2, 800b39e <__ascii_mbtowc+0x1a>
 800b38c:	b14b      	cbz	r3, 800b3a2 <__ascii_mbtowc+0x1e>
 800b38e:	7813      	ldrb	r3, [r2, #0]
 800b390:	600b      	str	r3, [r1, #0]
 800b392:	7812      	ldrb	r2, [r2, #0]
 800b394:	1e10      	subs	r0, r2, #0
 800b396:	bf18      	it	ne
 800b398:	2001      	movne	r0, #1
 800b39a:	b002      	add	sp, #8
 800b39c:	4770      	bx	lr
 800b39e:	4610      	mov	r0, r2
 800b3a0:	e7fb      	b.n	800b39a <__ascii_mbtowc+0x16>
 800b3a2:	f06f 0001 	mvn.w	r0, #1
 800b3a6:	e7f8      	b.n	800b39a <__ascii_mbtowc+0x16>

0800b3a8 <__malloc_lock>:
 800b3a8:	4801      	ldr	r0, [pc, #4]	@ (800b3b0 <__malloc_lock+0x8>)
 800b3aa:	f7fe bd26 	b.w	8009dfa <__retarget_lock_acquire_recursive>
 800b3ae:	bf00      	nop
 800b3b0:	200008c8 	.word	0x200008c8

0800b3b4 <__malloc_unlock>:
 800b3b4:	4801      	ldr	r0, [pc, #4]	@ (800b3bc <__malloc_unlock+0x8>)
 800b3b6:	f7fe bd21 	b.w	8009dfc <__retarget_lock_release_recursive>
 800b3ba:	bf00      	nop
 800b3bc:	200008c8 	.word	0x200008c8

0800b3c0 <_Balloc>:
 800b3c0:	b570      	push	{r4, r5, r6, lr}
 800b3c2:	69c6      	ldr	r6, [r0, #28]
 800b3c4:	4604      	mov	r4, r0
 800b3c6:	460d      	mov	r5, r1
 800b3c8:	b976      	cbnz	r6, 800b3e8 <_Balloc+0x28>
 800b3ca:	2010      	movs	r0, #16
 800b3cc:	f7ff ff30 	bl	800b230 <malloc>
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	61e0      	str	r0, [r4, #28]
 800b3d4:	b920      	cbnz	r0, 800b3e0 <_Balloc+0x20>
 800b3d6:	4b18      	ldr	r3, [pc, #96]	@ (800b438 <_Balloc+0x78>)
 800b3d8:	4818      	ldr	r0, [pc, #96]	@ (800b43c <_Balloc+0x7c>)
 800b3da:	216b      	movs	r1, #107	@ 0x6b
 800b3dc:	f7fe fd2e 	bl	8009e3c <__assert_func>
 800b3e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3e4:	6006      	str	r6, [r0, #0]
 800b3e6:	60c6      	str	r6, [r0, #12]
 800b3e8:	69e6      	ldr	r6, [r4, #28]
 800b3ea:	68f3      	ldr	r3, [r6, #12]
 800b3ec:	b183      	cbz	r3, 800b410 <_Balloc+0x50>
 800b3ee:	69e3      	ldr	r3, [r4, #28]
 800b3f0:	68db      	ldr	r3, [r3, #12]
 800b3f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b3f6:	b9b8      	cbnz	r0, 800b428 <_Balloc+0x68>
 800b3f8:	2101      	movs	r1, #1
 800b3fa:	fa01 f605 	lsl.w	r6, r1, r5
 800b3fe:	1d72      	adds	r2, r6, #5
 800b400:	0092      	lsls	r2, r2, #2
 800b402:	4620      	mov	r0, r4
 800b404:	f000 ff55 	bl	800c2b2 <_calloc_r>
 800b408:	b160      	cbz	r0, 800b424 <_Balloc+0x64>
 800b40a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b40e:	e00e      	b.n	800b42e <_Balloc+0x6e>
 800b410:	2221      	movs	r2, #33	@ 0x21
 800b412:	2104      	movs	r1, #4
 800b414:	4620      	mov	r0, r4
 800b416:	f000 ff4c 	bl	800c2b2 <_calloc_r>
 800b41a:	69e3      	ldr	r3, [r4, #28]
 800b41c:	60f0      	str	r0, [r6, #12]
 800b41e:	68db      	ldr	r3, [r3, #12]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d1e4      	bne.n	800b3ee <_Balloc+0x2e>
 800b424:	2000      	movs	r0, #0
 800b426:	bd70      	pop	{r4, r5, r6, pc}
 800b428:	6802      	ldr	r2, [r0, #0]
 800b42a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b42e:	2300      	movs	r3, #0
 800b430:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b434:	e7f7      	b.n	800b426 <_Balloc+0x66>
 800b436:	bf00      	nop
 800b438:	0800cc64 	.word	0x0800cc64
 800b43c:	0800cd44 	.word	0x0800cd44

0800b440 <_Bfree>:
 800b440:	b570      	push	{r4, r5, r6, lr}
 800b442:	69c6      	ldr	r6, [r0, #28]
 800b444:	4605      	mov	r5, r0
 800b446:	460c      	mov	r4, r1
 800b448:	b976      	cbnz	r6, 800b468 <_Bfree+0x28>
 800b44a:	2010      	movs	r0, #16
 800b44c:	f7ff fef0 	bl	800b230 <malloc>
 800b450:	4602      	mov	r2, r0
 800b452:	61e8      	str	r0, [r5, #28]
 800b454:	b920      	cbnz	r0, 800b460 <_Bfree+0x20>
 800b456:	4b09      	ldr	r3, [pc, #36]	@ (800b47c <_Bfree+0x3c>)
 800b458:	4809      	ldr	r0, [pc, #36]	@ (800b480 <_Bfree+0x40>)
 800b45a:	218f      	movs	r1, #143	@ 0x8f
 800b45c:	f7fe fcee 	bl	8009e3c <__assert_func>
 800b460:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b464:	6006      	str	r6, [r0, #0]
 800b466:	60c6      	str	r6, [r0, #12]
 800b468:	b13c      	cbz	r4, 800b47a <_Bfree+0x3a>
 800b46a:	69eb      	ldr	r3, [r5, #28]
 800b46c:	6862      	ldr	r2, [r4, #4]
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b474:	6021      	str	r1, [r4, #0]
 800b476:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b47a:	bd70      	pop	{r4, r5, r6, pc}
 800b47c:	0800cc64 	.word	0x0800cc64
 800b480:	0800cd44 	.word	0x0800cd44

0800b484 <__multadd>:
 800b484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b488:	690d      	ldr	r5, [r1, #16]
 800b48a:	4607      	mov	r7, r0
 800b48c:	460c      	mov	r4, r1
 800b48e:	461e      	mov	r6, r3
 800b490:	f101 0c14 	add.w	ip, r1, #20
 800b494:	2000      	movs	r0, #0
 800b496:	f8dc 3000 	ldr.w	r3, [ip]
 800b49a:	b299      	uxth	r1, r3
 800b49c:	fb02 6101 	mla	r1, r2, r1, r6
 800b4a0:	0c1e      	lsrs	r6, r3, #16
 800b4a2:	0c0b      	lsrs	r3, r1, #16
 800b4a4:	fb02 3306 	mla	r3, r2, r6, r3
 800b4a8:	b289      	uxth	r1, r1
 800b4aa:	3001      	adds	r0, #1
 800b4ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b4b0:	4285      	cmp	r5, r0
 800b4b2:	f84c 1b04 	str.w	r1, [ip], #4
 800b4b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b4ba:	dcec      	bgt.n	800b496 <__multadd+0x12>
 800b4bc:	b30e      	cbz	r6, 800b502 <__multadd+0x7e>
 800b4be:	68a3      	ldr	r3, [r4, #8]
 800b4c0:	42ab      	cmp	r3, r5
 800b4c2:	dc19      	bgt.n	800b4f8 <__multadd+0x74>
 800b4c4:	6861      	ldr	r1, [r4, #4]
 800b4c6:	4638      	mov	r0, r7
 800b4c8:	3101      	adds	r1, #1
 800b4ca:	f7ff ff79 	bl	800b3c0 <_Balloc>
 800b4ce:	4680      	mov	r8, r0
 800b4d0:	b928      	cbnz	r0, 800b4de <__multadd+0x5a>
 800b4d2:	4602      	mov	r2, r0
 800b4d4:	4b0c      	ldr	r3, [pc, #48]	@ (800b508 <__multadd+0x84>)
 800b4d6:	480d      	ldr	r0, [pc, #52]	@ (800b50c <__multadd+0x88>)
 800b4d8:	21ba      	movs	r1, #186	@ 0xba
 800b4da:	f7fe fcaf 	bl	8009e3c <__assert_func>
 800b4de:	6922      	ldr	r2, [r4, #16]
 800b4e0:	3202      	adds	r2, #2
 800b4e2:	f104 010c 	add.w	r1, r4, #12
 800b4e6:	0092      	lsls	r2, r2, #2
 800b4e8:	300c      	adds	r0, #12
 800b4ea:	f7fe fc88 	bl	8009dfe <memcpy>
 800b4ee:	4621      	mov	r1, r4
 800b4f0:	4638      	mov	r0, r7
 800b4f2:	f7ff ffa5 	bl	800b440 <_Bfree>
 800b4f6:	4644      	mov	r4, r8
 800b4f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b4fc:	3501      	adds	r5, #1
 800b4fe:	615e      	str	r6, [r3, #20]
 800b500:	6125      	str	r5, [r4, #16]
 800b502:	4620      	mov	r0, r4
 800b504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b508:	0800ccd3 	.word	0x0800ccd3
 800b50c:	0800cd44 	.word	0x0800cd44

0800b510 <__s2b>:
 800b510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b514:	460c      	mov	r4, r1
 800b516:	4615      	mov	r5, r2
 800b518:	461f      	mov	r7, r3
 800b51a:	2209      	movs	r2, #9
 800b51c:	3308      	adds	r3, #8
 800b51e:	4606      	mov	r6, r0
 800b520:	fb93 f3f2 	sdiv	r3, r3, r2
 800b524:	2100      	movs	r1, #0
 800b526:	2201      	movs	r2, #1
 800b528:	429a      	cmp	r2, r3
 800b52a:	db09      	blt.n	800b540 <__s2b+0x30>
 800b52c:	4630      	mov	r0, r6
 800b52e:	f7ff ff47 	bl	800b3c0 <_Balloc>
 800b532:	b940      	cbnz	r0, 800b546 <__s2b+0x36>
 800b534:	4602      	mov	r2, r0
 800b536:	4b19      	ldr	r3, [pc, #100]	@ (800b59c <__s2b+0x8c>)
 800b538:	4819      	ldr	r0, [pc, #100]	@ (800b5a0 <__s2b+0x90>)
 800b53a:	21d3      	movs	r1, #211	@ 0xd3
 800b53c:	f7fe fc7e 	bl	8009e3c <__assert_func>
 800b540:	0052      	lsls	r2, r2, #1
 800b542:	3101      	adds	r1, #1
 800b544:	e7f0      	b.n	800b528 <__s2b+0x18>
 800b546:	9b08      	ldr	r3, [sp, #32]
 800b548:	6143      	str	r3, [r0, #20]
 800b54a:	2d09      	cmp	r5, #9
 800b54c:	f04f 0301 	mov.w	r3, #1
 800b550:	6103      	str	r3, [r0, #16]
 800b552:	dd16      	ble.n	800b582 <__s2b+0x72>
 800b554:	f104 0909 	add.w	r9, r4, #9
 800b558:	46c8      	mov	r8, r9
 800b55a:	442c      	add	r4, r5
 800b55c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b560:	4601      	mov	r1, r0
 800b562:	3b30      	subs	r3, #48	@ 0x30
 800b564:	220a      	movs	r2, #10
 800b566:	4630      	mov	r0, r6
 800b568:	f7ff ff8c 	bl	800b484 <__multadd>
 800b56c:	45a0      	cmp	r8, r4
 800b56e:	d1f5      	bne.n	800b55c <__s2b+0x4c>
 800b570:	f1a5 0408 	sub.w	r4, r5, #8
 800b574:	444c      	add	r4, r9
 800b576:	1b2d      	subs	r5, r5, r4
 800b578:	1963      	adds	r3, r4, r5
 800b57a:	42bb      	cmp	r3, r7
 800b57c:	db04      	blt.n	800b588 <__s2b+0x78>
 800b57e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b582:	340a      	adds	r4, #10
 800b584:	2509      	movs	r5, #9
 800b586:	e7f6      	b.n	800b576 <__s2b+0x66>
 800b588:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b58c:	4601      	mov	r1, r0
 800b58e:	3b30      	subs	r3, #48	@ 0x30
 800b590:	220a      	movs	r2, #10
 800b592:	4630      	mov	r0, r6
 800b594:	f7ff ff76 	bl	800b484 <__multadd>
 800b598:	e7ee      	b.n	800b578 <__s2b+0x68>
 800b59a:	bf00      	nop
 800b59c:	0800ccd3 	.word	0x0800ccd3
 800b5a0:	0800cd44 	.word	0x0800cd44

0800b5a4 <__hi0bits>:
 800b5a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	bf36      	itet	cc
 800b5ac:	0403      	lslcc	r3, r0, #16
 800b5ae:	2000      	movcs	r0, #0
 800b5b0:	2010      	movcc	r0, #16
 800b5b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b5b6:	bf3c      	itt	cc
 800b5b8:	021b      	lslcc	r3, r3, #8
 800b5ba:	3008      	addcc	r0, #8
 800b5bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b5c0:	bf3c      	itt	cc
 800b5c2:	011b      	lslcc	r3, r3, #4
 800b5c4:	3004      	addcc	r0, #4
 800b5c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b5ca:	bf3c      	itt	cc
 800b5cc:	009b      	lslcc	r3, r3, #2
 800b5ce:	3002      	addcc	r0, #2
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	db05      	blt.n	800b5e0 <__hi0bits+0x3c>
 800b5d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b5d8:	f100 0001 	add.w	r0, r0, #1
 800b5dc:	bf08      	it	eq
 800b5de:	2020      	moveq	r0, #32
 800b5e0:	4770      	bx	lr

0800b5e2 <__lo0bits>:
 800b5e2:	6803      	ldr	r3, [r0, #0]
 800b5e4:	4602      	mov	r2, r0
 800b5e6:	f013 0007 	ands.w	r0, r3, #7
 800b5ea:	d00b      	beq.n	800b604 <__lo0bits+0x22>
 800b5ec:	07d9      	lsls	r1, r3, #31
 800b5ee:	d421      	bmi.n	800b634 <__lo0bits+0x52>
 800b5f0:	0798      	lsls	r0, r3, #30
 800b5f2:	bf49      	itett	mi
 800b5f4:	085b      	lsrmi	r3, r3, #1
 800b5f6:	089b      	lsrpl	r3, r3, #2
 800b5f8:	2001      	movmi	r0, #1
 800b5fa:	6013      	strmi	r3, [r2, #0]
 800b5fc:	bf5c      	itt	pl
 800b5fe:	6013      	strpl	r3, [r2, #0]
 800b600:	2002      	movpl	r0, #2
 800b602:	4770      	bx	lr
 800b604:	b299      	uxth	r1, r3
 800b606:	b909      	cbnz	r1, 800b60c <__lo0bits+0x2a>
 800b608:	0c1b      	lsrs	r3, r3, #16
 800b60a:	2010      	movs	r0, #16
 800b60c:	b2d9      	uxtb	r1, r3
 800b60e:	b909      	cbnz	r1, 800b614 <__lo0bits+0x32>
 800b610:	3008      	adds	r0, #8
 800b612:	0a1b      	lsrs	r3, r3, #8
 800b614:	0719      	lsls	r1, r3, #28
 800b616:	bf04      	itt	eq
 800b618:	091b      	lsreq	r3, r3, #4
 800b61a:	3004      	addeq	r0, #4
 800b61c:	0799      	lsls	r1, r3, #30
 800b61e:	bf04      	itt	eq
 800b620:	089b      	lsreq	r3, r3, #2
 800b622:	3002      	addeq	r0, #2
 800b624:	07d9      	lsls	r1, r3, #31
 800b626:	d403      	bmi.n	800b630 <__lo0bits+0x4e>
 800b628:	085b      	lsrs	r3, r3, #1
 800b62a:	f100 0001 	add.w	r0, r0, #1
 800b62e:	d003      	beq.n	800b638 <__lo0bits+0x56>
 800b630:	6013      	str	r3, [r2, #0]
 800b632:	4770      	bx	lr
 800b634:	2000      	movs	r0, #0
 800b636:	4770      	bx	lr
 800b638:	2020      	movs	r0, #32
 800b63a:	4770      	bx	lr

0800b63c <__i2b>:
 800b63c:	b510      	push	{r4, lr}
 800b63e:	460c      	mov	r4, r1
 800b640:	2101      	movs	r1, #1
 800b642:	f7ff febd 	bl	800b3c0 <_Balloc>
 800b646:	4602      	mov	r2, r0
 800b648:	b928      	cbnz	r0, 800b656 <__i2b+0x1a>
 800b64a:	4b05      	ldr	r3, [pc, #20]	@ (800b660 <__i2b+0x24>)
 800b64c:	4805      	ldr	r0, [pc, #20]	@ (800b664 <__i2b+0x28>)
 800b64e:	f240 1145 	movw	r1, #325	@ 0x145
 800b652:	f7fe fbf3 	bl	8009e3c <__assert_func>
 800b656:	2301      	movs	r3, #1
 800b658:	6144      	str	r4, [r0, #20]
 800b65a:	6103      	str	r3, [r0, #16]
 800b65c:	bd10      	pop	{r4, pc}
 800b65e:	bf00      	nop
 800b660:	0800ccd3 	.word	0x0800ccd3
 800b664:	0800cd44 	.word	0x0800cd44

0800b668 <__multiply>:
 800b668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b66c:	4617      	mov	r7, r2
 800b66e:	690a      	ldr	r2, [r1, #16]
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	429a      	cmp	r2, r3
 800b674:	bfa8      	it	ge
 800b676:	463b      	movge	r3, r7
 800b678:	4689      	mov	r9, r1
 800b67a:	bfa4      	itt	ge
 800b67c:	460f      	movge	r7, r1
 800b67e:	4699      	movge	r9, r3
 800b680:	693d      	ldr	r5, [r7, #16]
 800b682:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	6879      	ldr	r1, [r7, #4]
 800b68a:	eb05 060a 	add.w	r6, r5, sl
 800b68e:	42b3      	cmp	r3, r6
 800b690:	b085      	sub	sp, #20
 800b692:	bfb8      	it	lt
 800b694:	3101      	addlt	r1, #1
 800b696:	f7ff fe93 	bl	800b3c0 <_Balloc>
 800b69a:	b930      	cbnz	r0, 800b6aa <__multiply+0x42>
 800b69c:	4602      	mov	r2, r0
 800b69e:	4b41      	ldr	r3, [pc, #260]	@ (800b7a4 <__multiply+0x13c>)
 800b6a0:	4841      	ldr	r0, [pc, #260]	@ (800b7a8 <__multiply+0x140>)
 800b6a2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b6a6:	f7fe fbc9 	bl	8009e3c <__assert_func>
 800b6aa:	f100 0414 	add.w	r4, r0, #20
 800b6ae:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b6b2:	4623      	mov	r3, r4
 800b6b4:	2200      	movs	r2, #0
 800b6b6:	4573      	cmp	r3, lr
 800b6b8:	d320      	bcc.n	800b6fc <__multiply+0x94>
 800b6ba:	f107 0814 	add.w	r8, r7, #20
 800b6be:	f109 0114 	add.w	r1, r9, #20
 800b6c2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b6c6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b6ca:	9302      	str	r3, [sp, #8]
 800b6cc:	1beb      	subs	r3, r5, r7
 800b6ce:	3b15      	subs	r3, #21
 800b6d0:	f023 0303 	bic.w	r3, r3, #3
 800b6d4:	3304      	adds	r3, #4
 800b6d6:	3715      	adds	r7, #21
 800b6d8:	42bd      	cmp	r5, r7
 800b6da:	bf38      	it	cc
 800b6dc:	2304      	movcc	r3, #4
 800b6de:	9301      	str	r3, [sp, #4]
 800b6e0:	9b02      	ldr	r3, [sp, #8]
 800b6e2:	9103      	str	r1, [sp, #12]
 800b6e4:	428b      	cmp	r3, r1
 800b6e6:	d80c      	bhi.n	800b702 <__multiply+0x9a>
 800b6e8:	2e00      	cmp	r6, #0
 800b6ea:	dd03      	ble.n	800b6f4 <__multiply+0x8c>
 800b6ec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d055      	beq.n	800b7a0 <__multiply+0x138>
 800b6f4:	6106      	str	r6, [r0, #16]
 800b6f6:	b005      	add	sp, #20
 800b6f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6fc:	f843 2b04 	str.w	r2, [r3], #4
 800b700:	e7d9      	b.n	800b6b6 <__multiply+0x4e>
 800b702:	f8b1 a000 	ldrh.w	sl, [r1]
 800b706:	f1ba 0f00 	cmp.w	sl, #0
 800b70a:	d01f      	beq.n	800b74c <__multiply+0xe4>
 800b70c:	46c4      	mov	ip, r8
 800b70e:	46a1      	mov	r9, r4
 800b710:	2700      	movs	r7, #0
 800b712:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b716:	f8d9 3000 	ldr.w	r3, [r9]
 800b71a:	fa1f fb82 	uxth.w	fp, r2
 800b71e:	b29b      	uxth	r3, r3
 800b720:	fb0a 330b 	mla	r3, sl, fp, r3
 800b724:	443b      	add	r3, r7
 800b726:	f8d9 7000 	ldr.w	r7, [r9]
 800b72a:	0c12      	lsrs	r2, r2, #16
 800b72c:	0c3f      	lsrs	r7, r7, #16
 800b72e:	fb0a 7202 	mla	r2, sl, r2, r7
 800b732:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b736:	b29b      	uxth	r3, r3
 800b738:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b73c:	4565      	cmp	r5, ip
 800b73e:	f849 3b04 	str.w	r3, [r9], #4
 800b742:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b746:	d8e4      	bhi.n	800b712 <__multiply+0xaa>
 800b748:	9b01      	ldr	r3, [sp, #4]
 800b74a:	50e7      	str	r7, [r4, r3]
 800b74c:	9b03      	ldr	r3, [sp, #12]
 800b74e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b752:	3104      	adds	r1, #4
 800b754:	f1b9 0f00 	cmp.w	r9, #0
 800b758:	d020      	beq.n	800b79c <__multiply+0x134>
 800b75a:	6823      	ldr	r3, [r4, #0]
 800b75c:	4647      	mov	r7, r8
 800b75e:	46a4      	mov	ip, r4
 800b760:	f04f 0a00 	mov.w	sl, #0
 800b764:	f8b7 b000 	ldrh.w	fp, [r7]
 800b768:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b76c:	fb09 220b 	mla	r2, r9, fp, r2
 800b770:	4452      	add	r2, sl
 800b772:	b29b      	uxth	r3, r3
 800b774:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b778:	f84c 3b04 	str.w	r3, [ip], #4
 800b77c:	f857 3b04 	ldr.w	r3, [r7], #4
 800b780:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b784:	f8bc 3000 	ldrh.w	r3, [ip]
 800b788:	fb09 330a 	mla	r3, r9, sl, r3
 800b78c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b790:	42bd      	cmp	r5, r7
 800b792:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b796:	d8e5      	bhi.n	800b764 <__multiply+0xfc>
 800b798:	9a01      	ldr	r2, [sp, #4]
 800b79a:	50a3      	str	r3, [r4, r2]
 800b79c:	3404      	adds	r4, #4
 800b79e:	e79f      	b.n	800b6e0 <__multiply+0x78>
 800b7a0:	3e01      	subs	r6, #1
 800b7a2:	e7a1      	b.n	800b6e8 <__multiply+0x80>
 800b7a4:	0800ccd3 	.word	0x0800ccd3
 800b7a8:	0800cd44 	.word	0x0800cd44

0800b7ac <__pow5mult>:
 800b7ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7b0:	4615      	mov	r5, r2
 800b7b2:	f012 0203 	ands.w	r2, r2, #3
 800b7b6:	4607      	mov	r7, r0
 800b7b8:	460e      	mov	r6, r1
 800b7ba:	d007      	beq.n	800b7cc <__pow5mult+0x20>
 800b7bc:	4c25      	ldr	r4, [pc, #148]	@ (800b854 <__pow5mult+0xa8>)
 800b7be:	3a01      	subs	r2, #1
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b7c6:	f7ff fe5d 	bl	800b484 <__multadd>
 800b7ca:	4606      	mov	r6, r0
 800b7cc:	10ad      	asrs	r5, r5, #2
 800b7ce:	d03d      	beq.n	800b84c <__pow5mult+0xa0>
 800b7d0:	69fc      	ldr	r4, [r7, #28]
 800b7d2:	b97c      	cbnz	r4, 800b7f4 <__pow5mult+0x48>
 800b7d4:	2010      	movs	r0, #16
 800b7d6:	f7ff fd2b 	bl	800b230 <malloc>
 800b7da:	4602      	mov	r2, r0
 800b7dc:	61f8      	str	r0, [r7, #28]
 800b7de:	b928      	cbnz	r0, 800b7ec <__pow5mult+0x40>
 800b7e0:	4b1d      	ldr	r3, [pc, #116]	@ (800b858 <__pow5mult+0xac>)
 800b7e2:	481e      	ldr	r0, [pc, #120]	@ (800b85c <__pow5mult+0xb0>)
 800b7e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b7e8:	f7fe fb28 	bl	8009e3c <__assert_func>
 800b7ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b7f0:	6004      	str	r4, [r0, #0]
 800b7f2:	60c4      	str	r4, [r0, #12]
 800b7f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b7f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b7fc:	b94c      	cbnz	r4, 800b812 <__pow5mult+0x66>
 800b7fe:	f240 2171 	movw	r1, #625	@ 0x271
 800b802:	4638      	mov	r0, r7
 800b804:	f7ff ff1a 	bl	800b63c <__i2b>
 800b808:	2300      	movs	r3, #0
 800b80a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b80e:	4604      	mov	r4, r0
 800b810:	6003      	str	r3, [r0, #0]
 800b812:	f04f 0900 	mov.w	r9, #0
 800b816:	07eb      	lsls	r3, r5, #31
 800b818:	d50a      	bpl.n	800b830 <__pow5mult+0x84>
 800b81a:	4631      	mov	r1, r6
 800b81c:	4622      	mov	r2, r4
 800b81e:	4638      	mov	r0, r7
 800b820:	f7ff ff22 	bl	800b668 <__multiply>
 800b824:	4631      	mov	r1, r6
 800b826:	4680      	mov	r8, r0
 800b828:	4638      	mov	r0, r7
 800b82a:	f7ff fe09 	bl	800b440 <_Bfree>
 800b82e:	4646      	mov	r6, r8
 800b830:	106d      	asrs	r5, r5, #1
 800b832:	d00b      	beq.n	800b84c <__pow5mult+0xa0>
 800b834:	6820      	ldr	r0, [r4, #0]
 800b836:	b938      	cbnz	r0, 800b848 <__pow5mult+0x9c>
 800b838:	4622      	mov	r2, r4
 800b83a:	4621      	mov	r1, r4
 800b83c:	4638      	mov	r0, r7
 800b83e:	f7ff ff13 	bl	800b668 <__multiply>
 800b842:	6020      	str	r0, [r4, #0]
 800b844:	f8c0 9000 	str.w	r9, [r0]
 800b848:	4604      	mov	r4, r0
 800b84a:	e7e4      	b.n	800b816 <__pow5mult+0x6a>
 800b84c:	4630      	mov	r0, r6
 800b84e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b852:	bf00      	nop
 800b854:	0800ce00 	.word	0x0800ce00
 800b858:	0800cc64 	.word	0x0800cc64
 800b85c:	0800cd44 	.word	0x0800cd44

0800b860 <__lshift>:
 800b860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b864:	460c      	mov	r4, r1
 800b866:	6849      	ldr	r1, [r1, #4]
 800b868:	6923      	ldr	r3, [r4, #16]
 800b86a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b86e:	68a3      	ldr	r3, [r4, #8]
 800b870:	4607      	mov	r7, r0
 800b872:	4691      	mov	r9, r2
 800b874:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b878:	f108 0601 	add.w	r6, r8, #1
 800b87c:	42b3      	cmp	r3, r6
 800b87e:	db0b      	blt.n	800b898 <__lshift+0x38>
 800b880:	4638      	mov	r0, r7
 800b882:	f7ff fd9d 	bl	800b3c0 <_Balloc>
 800b886:	4605      	mov	r5, r0
 800b888:	b948      	cbnz	r0, 800b89e <__lshift+0x3e>
 800b88a:	4602      	mov	r2, r0
 800b88c:	4b28      	ldr	r3, [pc, #160]	@ (800b930 <__lshift+0xd0>)
 800b88e:	4829      	ldr	r0, [pc, #164]	@ (800b934 <__lshift+0xd4>)
 800b890:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b894:	f7fe fad2 	bl	8009e3c <__assert_func>
 800b898:	3101      	adds	r1, #1
 800b89a:	005b      	lsls	r3, r3, #1
 800b89c:	e7ee      	b.n	800b87c <__lshift+0x1c>
 800b89e:	2300      	movs	r3, #0
 800b8a0:	f100 0114 	add.w	r1, r0, #20
 800b8a4:	f100 0210 	add.w	r2, r0, #16
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	4553      	cmp	r3, sl
 800b8ac:	db33      	blt.n	800b916 <__lshift+0xb6>
 800b8ae:	6920      	ldr	r0, [r4, #16]
 800b8b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b8b4:	f104 0314 	add.w	r3, r4, #20
 800b8b8:	f019 091f 	ands.w	r9, r9, #31
 800b8bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b8c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b8c4:	d02b      	beq.n	800b91e <__lshift+0xbe>
 800b8c6:	f1c9 0e20 	rsb	lr, r9, #32
 800b8ca:	468a      	mov	sl, r1
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	6818      	ldr	r0, [r3, #0]
 800b8d0:	fa00 f009 	lsl.w	r0, r0, r9
 800b8d4:	4310      	orrs	r0, r2
 800b8d6:	f84a 0b04 	str.w	r0, [sl], #4
 800b8da:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8de:	459c      	cmp	ip, r3
 800b8e0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b8e4:	d8f3      	bhi.n	800b8ce <__lshift+0x6e>
 800b8e6:	ebac 0304 	sub.w	r3, ip, r4
 800b8ea:	3b15      	subs	r3, #21
 800b8ec:	f023 0303 	bic.w	r3, r3, #3
 800b8f0:	3304      	adds	r3, #4
 800b8f2:	f104 0015 	add.w	r0, r4, #21
 800b8f6:	4560      	cmp	r0, ip
 800b8f8:	bf88      	it	hi
 800b8fa:	2304      	movhi	r3, #4
 800b8fc:	50ca      	str	r2, [r1, r3]
 800b8fe:	b10a      	cbz	r2, 800b904 <__lshift+0xa4>
 800b900:	f108 0602 	add.w	r6, r8, #2
 800b904:	3e01      	subs	r6, #1
 800b906:	4638      	mov	r0, r7
 800b908:	612e      	str	r6, [r5, #16]
 800b90a:	4621      	mov	r1, r4
 800b90c:	f7ff fd98 	bl	800b440 <_Bfree>
 800b910:	4628      	mov	r0, r5
 800b912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b916:	f842 0f04 	str.w	r0, [r2, #4]!
 800b91a:	3301      	adds	r3, #1
 800b91c:	e7c5      	b.n	800b8aa <__lshift+0x4a>
 800b91e:	3904      	subs	r1, #4
 800b920:	f853 2b04 	ldr.w	r2, [r3], #4
 800b924:	f841 2f04 	str.w	r2, [r1, #4]!
 800b928:	459c      	cmp	ip, r3
 800b92a:	d8f9      	bhi.n	800b920 <__lshift+0xc0>
 800b92c:	e7ea      	b.n	800b904 <__lshift+0xa4>
 800b92e:	bf00      	nop
 800b930:	0800ccd3 	.word	0x0800ccd3
 800b934:	0800cd44 	.word	0x0800cd44

0800b938 <__mcmp>:
 800b938:	690a      	ldr	r2, [r1, #16]
 800b93a:	4603      	mov	r3, r0
 800b93c:	6900      	ldr	r0, [r0, #16]
 800b93e:	1a80      	subs	r0, r0, r2
 800b940:	b530      	push	{r4, r5, lr}
 800b942:	d10e      	bne.n	800b962 <__mcmp+0x2a>
 800b944:	3314      	adds	r3, #20
 800b946:	3114      	adds	r1, #20
 800b948:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b94c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b950:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b954:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b958:	4295      	cmp	r5, r2
 800b95a:	d003      	beq.n	800b964 <__mcmp+0x2c>
 800b95c:	d205      	bcs.n	800b96a <__mcmp+0x32>
 800b95e:	f04f 30ff 	mov.w	r0, #4294967295
 800b962:	bd30      	pop	{r4, r5, pc}
 800b964:	42a3      	cmp	r3, r4
 800b966:	d3f3      	bcc.n	800b950 <__mcmp+0x18>
 800b968:	e7fb      	b.n	800b962 <__mcmp+0x2a>
 800b96a:	2001      	movs	r0, #1
 800b96c:	e7f9      	b.n	800b962 <__mcmp+0x2a>
	...

0800b970 <__mdiff>:
 800b970:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b974:	4689      	mov	r9, r1
 800b976:	4606      	mov	r6, r0
 800b978:	4611      	mov	r1, r2
 800b97a:	4648      	mov	r0, r9
 800b97c:	4614      	mov	r4, r2
 800b97e:	f7ff ffdb 	bl	800b938 <__mcmp>
 800b982:	1e05      	subs	r5, r0, #0
 800b984:	d112      	bne.n	800b9ac <__mdiff+0x3c>
 800b986:	4629      	mov	r1, r5
 800b988:	4630      	mov	r0, r6
 800b98a:	f7ff fd19 	bl	800b3c0 <_Balloc>
 800b98e:	4602      	mov	r2, r0
 800b990:	b928      	cbnz	r0, 800b99e <__mdiff+0x2e>
 800b992:	4b3f      	ldr	r3, [pc, #252]	@ (800ba90 <__mdiff+0x120>)
 800b994:	f240 2137 	movw	r1, #567	@ 0x237
 800b998:	483e      	ldr	r0, [pc, #248]	@ (800ba94 <__mdiff+0x124>)
 800b99a:	f7fe fa4f 	bl	8009e3c <__assert_func>
 800b99e:	2301      	movs	r3, #1
 800b9a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b9a4:	4610      	mov	r0, r2
 800b9a6:	b003      	add	sp, #12
 800b9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ac:	bfbc      	itt	lt
 800b9ae:	464b      	movlt	r3, r9
 800b9b0:	46a1      	movlt	r9, r4
 800b9b2:	4630      	mov	r0, r6
 800b9b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b9b8:	bfba      	itte	lt
 800b9ba:	461c      	movlt	r4, r3
 800b9bc:	2501      	movlt	r5, #1
 800b9be:	2500      	movge	r5, #0
 800b9c0:	f7ff fcfe 	bl	800b3c0 <_Balloc>
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	b918      	cbnz	r0, 800b9d0 <__mdiff+0x60>
 800b9c8:	4b31      	ldr	r3, [pc, #196]	@ (800ba90 <__mdiff+0x120>)
 800b9ca:	f240 2145 	movw	r1, #581	@ 0x245
 800b9ce:	e7e3      	b.n	800b998 <__mdiff+0x28>
 800b9d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b9d4:	6926      	ldr	r6, [r4, #16]
 800b9d6:	60c5      	str	r5, [r0, #12]
 800b9d8:	f109 0310 	add.w	r3, r9, #16
 800b9dc:	f109 0514 	add.w	r5, r9, #20
 800b9e0:	f104 0e14 	add.w	lr, r4, #20
 800b9e4:	f100 0b14 	add.w	fp, r0, #20
 800b9e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b9ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b9f0:	9301      	str	r3, [sp, #4]
 800b9f2:	46d9      	mov	r9, fp
 800b9f4:	f04f 0c00 	mov.w	ip, #0
 800b9f8:	9b01      	ldr	r3, [sp, #4]
 800b9fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b9fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ba02:	9301      	str	r3, [sp, #4]
 800ba04:	fa1f f38a 	uxth.w	r3, sl
 800ba08:	4619      	mov	r1, r3
 800ba0a:	b283      	uxth	r3, r0
 800ba0c:	1acb      	subs	r3, r1, r3
 800ba0e:	0c00      	lsrs	r0, r0, #16
 800ba10:	4463      	add	r3, ip
 800ba12:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ba16:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ba1a:	b29b      	uxth	r3, r3
 800ba1c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ba20:	4576      	cmp	r6, lr
 800ba22:	f849 3b04 	str.w	r3, [r9], #4
 800ba26:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba2a:	d8e5      	bhi.n	800b9f8 <__mdiff+0x88>
 800ba2c:	1b33      	subs	r3, r6, r4
 800ba2e:	3b15      	subs	r3, #21
 800ba30:	f023 0303 	bic.w	r3, r3, #3
 800ba34:	3415      	adds	r4, #21
 800ba36:	3304      	adds	r3, #4
 800ba38:	42a6      	cmp	r6, r4
 800ba3a:	bf38      	it	cc
 800ba3c:	2304      	movcc	r3, #4
 800ba3e:	441d      	add	r5, r3
 800ba40:	445b      	add	r3, fp
 800ba42:	461e      	mov	r6, r3
 800ba44:	462c      	mov	r4, r5
 800ba46:	4544      	cmp	r4, r8
 800ba48:	d30e      	bcc.n	800ba68 <__mdiff+0xf8>
 800ba4a:	f108 0103 	add.w	r1, r8, #3
 800ba4e:	1b49      	subs	r1, r1, r5
 800ba50:	f021 0103 	bic.w	r1, r1, #3
 800ba54:	3d03      	subs	r5, #3
 800ba56:	45a8      	cmp	r8, r5
 800ba58:	bf38      	it	cc
 800ba5a:	2100      	movcc	r1, #0
 800ba5c:	440b      	add	r3, r1
 800ba5e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ba62:	b191      	cbz	r1, 800ba8a <__mdiff+0x11a>
 800ba64:	6117      	str	r7, [r2, #16]
 800ba66:	e79d      	b.n	800b9a4 <__mdiff+0x34>
 800ba68:	f854 1b04 	ldr.w	r1, [r4], #4
 800ba6c:	46e6      	mov	lr, ip
 800ba6e:	0c08      	lsrs	r0, r1, #16
 800ba70:	fa1c fc81 	uxtah	ip, ip, r1
 800ba74:	4471      	add	r1, lr
 800ba76:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ba7a:	b289      	uxth	r1, r1
 800ba7c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ba80:	f846 1b04 	str.w	r1, [r6], #4
 800ba84:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ba88:	e7dd      	b.n	800ba46 <__mdiff+0xd6>
 800ba8a:	3f01      	subs	r7, #1
 800ba8c:	e7e7      	b.n	800ba5e <__mdiff+0xee>
 800ba8e:	bf00      	nop
 800ba90:	0800ccd3 	.word	0x0800ccd3
 800ba94:	0800cd44 	.word	0x0800cd44

0800ba98 <__ulp>:
 800ba98:	b082      	sub	sp, #8
 800ba9a:	ed8d 0b00 	vstr	d0, [sp]
 800ba9e:	9a01      	ldr	r2, [sp, #4]
 800baa0:	4b0f      	ldr	r3, [pc, #60]	@ (800bae0 <__ulp+0x48>)
 800baa2:	4013      	ands	r3, r2
 800baa4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	dc08      	bgt.n	800babe <__ulp+0x26>
 800baac:	425b      	negs	r3, r3
 800baae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bab2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bab6:	da04      	bge.n	800bac2 <__ulp+0x2a>
 800bab8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800babc:	4113      	asrs	r3, r2
 800babe:	2200      	movs	r2, #0
 800bac0:	e008      	b.n	800bad4 <__ulp+0x3c>
 800bac2:	f1a2 0314 	sub.w	r3, r2, #20
 800bac6:	2b1e      	cmp	r3, #30
 800bac8:	bfda      	itte	le
 800baca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bace:	40da      	lsrle	r2, r3
 800bad0:	2201      	movgt	r2, #1
 800bad2:	2300      	movs	r3, #0
 800bad4:	4619      	mov	r1, r3
 800bad6:	4610      	mov	r0, r2
 800bad8:	ec41 0b10 	vmov	d0, r0, r1
 800badc:	b002      	add	sp, #8
 800bade:	4770      	bx	lr
 800bae0:	7ff00000 	.word	0x7ff00000

0800bae4 <__b2d>:
 800bae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bae8:	6906      	ldr	r6, [r0, #16]
 800baea:	f100 0814 	add.w	r8, r0, #20
 800baee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800baf2:	1f37      	subs	r7, r6, #4
 800baf4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800baf8:	4610      	mov	r0, r2
 800bafa:	f7ff fd53 	bl	800b5a4 <__hi0bits>
 800bafe:	f1c0 0320 	rsb	r3, r0, #32
 800bb02:	280a      	cmp	r0, #10
 800bb04:	600b      	str	r3, [r1, #0]
 800bb06:	491b      	ldr	r1, [pc, #108]	@ (800bb74 <__b2d+0x90>)
 800bb08:	dc15      	bgt.n	800bb36 <__b2d+0x52>
 800bb0a:	f1c0 0c0b 	rsb	ip, r0, #11
 800bb0e:	fa22 f30c 	lsr.w	r3, r2, ip
 800bb12:	45b8      	cmp	r8, r7
 800bb14:	ea43 0501 	orr.w	r5, r3, r1
 800bb18:	bf34      	ite	cc
 800bb1a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bb1e:	2300      	movcs	r3, #0
 800bb20:	3015      	adds	r0, #21
 800bb22:	fa02 f000 	lsl.w	r0, r2, r0
 800bb26:	fa23 f30c 	lsr.w	r3, r3, ip
 800bb2a:	4303      	orrs	r3, r0
 800bb2c:	461c      	mov	r4, r3
 800bb2e:	ec45 4b10 	vmov	d0, r4, r5
 800bb32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb36:	45b8      	cmp	r8, r7
 800bb38:	bf3a      	itte	cc
 800bb3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bb3e:	f1a6 0708 	subcc.w	r7, r6, #8
 800bb42:	2300      	movcs	r3, #0
 800bb44:	380b      	subs	r0, #11
 800bb46:	d012      	beq.n	800bb6e <__b2d+0x8a>
 800bb48:	f1c0 0120 	rsb	r1, r0, #32
 800bb4c:	fa23 f401 	lsr.w	r4, r3, r1
 800bb50:	4082      	lsls	r2, r0
 800bb52:	4322      	orrs	r2, r4
 800bb54:	4547      	cmp	r7, r8
 800bb56:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bb5a:	bf8c      	ite	hi
 800bb5c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bb60:	2200      	movls	r2, #0
 800bb62:	4083      	lsls	r3, r0
 800bb64:	40ca      	lsrs	r2, r1
 800bb66:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	e7de      	b.n	800bb2c <__b2d+0x48>
 800bb6e:	ea42 0501 	orr.w	r5, r2, r1
 800bb72:	e7db      	b.n	800bb2c <__b2d+0x48>
 800bb74:	3ff00000 	.word	0x3ff00000

0800bb78 <__d2b>:
 800bb78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb7c:	460f      	mov	r7, r1
 800bb7e:	2101      	movs	r1, #1
 800bb80:	ec59 8b10 	vmov	r8, r9, d0
 800bb84:	4616      	mov	r6, r2
 800bb86:	f7ff fc1b 	bl	800b3c0 <_Balloc>
 800bb8a:	4604      	mov	r4, r0
 800bb8c:	b930      	cbnz	r0, 800bb9c <__d2b+0x24>
 800bb8e:	4602      	mov	r2, r0
 800bb90:	4b23      	ldr	r3, [pc, #140]	@ (800bc20 <__d2b+0xa8>)
 800bb92:	4824      	ldr	r0, [pc, #144]	@ (800bc24 <__d2b+0xac>)
 800bb94:	f240 310f 	movw	r1, #783	@ 0x30f
 800bb98:	f7fe f950 	bl	8009e3c <__assert_func>
 800bb9c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bba0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bba4:	b10d      	cbz	r5, 800bbaa <__d2b+0x32>
 800bba6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bbaa:	9301      	str	r3, [sp, #4]
 800bbac:	f1b8 0300 	subs.w	r3, r8, #0
 800bbb0:	d023      	beq.n	800bbfa <__d2b+0x82>
 800bbb2:	4668      	mov	r0, sp
 800bbb4:	9300      	str	r3, [sp, #0]
 800bbb6:	f7ff fd14 	bl	800b5e2 <__lo0bits>
 800bbba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bbbe:	b1d0      	cbz	r0, 800bbf6 <__d2b+0x7e>
 800bbc0:	f1c0 0320 	rsb	r3, r0, #32
 800bbc4:	fa02 f303 	lsl.w	r3, r2, r3
 800bbc8:	430b      	orrs	r3, r1
 800bbca:	40c2      	lsrs	r2, r0
 800bbcc:	6163      	str	r3, [r4, #20]
 800bbce:	9201      	str	r2, [sp, #4]
 800bbd0:	9b01      	ldr	r3, [sp, #4]
 800bbd2:	61a3      	str	r3, [r4, #24]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	bf0c      	ite	eq
 800bbd8:	2201      	moveq	r2, #1
 800bbda:	2202      	movne	r2, #2
 800bbdc:	6122      	str	r2, [r4, #16]
 800bbde:	b1a5      	cbz	r5, 800bc0a <__d2b+0x92>
 800bbe0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bbe4:	4405      	add	r5, r0
 800bbe6:	603d      	str	r5, [r7, #0]
 800bbe8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bbec:	6030      	str	r0, [r6, #0]
 800bbee:	4620      	mov	r0, r4
 800bbf0:	b003      	add	sp, #12
 800bbf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbf6:	6161      	str	r1, [r4, #20]
 800bbf8:	e7ea      	b.n	800bbd0 <__d2b+0x58>
 800bbfa:	a801      	add	r0, sp, #4
 800bbfc:	f7ff fcf1 	bl	800b5e2 <__lo0bits>
 800bc00:	9b01      	ldr	r3, [sp, #4]
 800bc02:	6163      	str	r3, [r4, #20]
 800bc04:	3020      	adds	r0, #32
 800bc06:	2201      	movs	r2, #1
 800bc08:	e7e8      	b.n	800bbdc <__d2b+0x64>
 800bc0a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bc0e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bc12:	6038      	str	r0, [r7, #0]
 800bc14:	6918      	ldr	r0, [r3, #16]
 800bc16:	f7ff fcc5 	bl	800b5a4 <__hi0bits>
 800bc1a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bc1e:	e7e5      	b.n	800bbec <__d2b+0x74>
 800bc20:	0800ccd3 	.word	0x0800ccd3
 800bc24:	0800cd44 	.word	0x0800cd44

0800bc28 <__ratio>:
 800bc28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc2c:	b085      	sub	sp, #20
 800bc2e:	e9cd 1000 	strd	r1, r0, [sp]
 800bc32:	a902      	add	r1, sp, #8
 800bc34:	f7ff ff56 	bl	800bae4 <__b2d>
 800bc38:	9800      	ldr	r0, [sp, #0]
 800bc3a:	a903      	add	r1, sp, #12
 800bc3c:	ec55 4b10 	vmov	r4, r5, d0
 800bc40:	f7ff ff50 	bl	800bae4 <__b2d>
 800bc44:	9b01      	ldr	r3, [sp, #4]
 800bc46:	6919      	ldr	r1, [r3, #16]
 800bc48:	9b00      	ldr	r3, [sp, #0]
 800bc4a:	691b      	ldr	r3, [r3, #16]
 800bc4c:	1ac9      	subs	r1, r1, r3
 800bc4e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bc52:	1a9b      	subs	r3, r3, r2
 800bc54:	ec5b ab10 	vmov	sl, fp, d0
 800bc58:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	bfce      	itee	gt
 800bc60:	462a      	movgt	r2, r5
 800bc62:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bc66:	465a      	movle	r2, fp
 800bc68:	462f      	mov	r7, r5
 800bc6a:	46d9      	mov	r9, fp
 800bc6c:	bfcc      	ite	gt
 800bc6e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bc72:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800bc76:	464b      	mov	r3, r9
 800bc78:	4652      	mov	r2, sl
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	4639      	mov	r1, r7
 800bc7e:	f7f4 fded 	bl	800085c <__aeabi_ddiv>
 800bc82:	ec41 0b10 	vmov	d0, r0, r1
 800bc86:	b005      	add	sp, #20
 800bc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bc8c <__copybits>:
 800bc8c:	3901      	subs	r1, #1
 800bc8e:	b570      	push	{r4, r5, r6, lr}
 800bc90:	1149      	asrs	r1, r1, #5
 800bc92:	6914      	ldr	r4, [r2, #16]
 800bc94:	3101      	adds	r1, #1
 800bc96:	f102 0314 	add.w	r3, r2, #20
 800bc9a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bc9e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bca2:	1f05      	subs	r5, r0, #4
 800bca4:	42a3      	cmp	r3, r4
 800bca6:	d30c      	bcc.n	800bcc2 <__copybits+0x36>
 800bca8:	1aa3      	subs	r3, r4, r2
 800bcaa:	3b11      	subs	r3, #17
 800bcac:	f023 0303 	bic.w	r3, r3, #3
 800bcb0:	3211      	adds	r2, #17
 800bcb2:	42a2      	cmp	r2, r4
 800bcb4:	bf88      	it	hi
 800bcb6:	2300      	movhi	r3, #0
 800bcb8:	4418      	add	r0, r3
 800bcba:	2300      	movs	r3, #0
 800bcbc:	4288      	cmp	r0, r1
 800bcbe:	d305      	bcc.n	800bccc <__copybits+0x40>
 800bcc0:	bd70      	pop	{r4, r5, r6, pc}
 800bcc2:	f853 6b04 	ldr.w	r6, [r3], #4
 800bcc6:	f845 6f04 	str.w	r6, [r5, #4]!
 800bcca:	e7eb      	b.n	800bca4 <__copybits+0x18>
 800bccc:	f840 3b04 	str.w	r3, [r0], #4
 800bcd0:	e7f4      	b.n	800bcbc <__copybits+0x30>

0800bcd2 <__any_on>:
 800bcd2:	f100 0214 	add.w	r2, r0, #20
 800bcd6:	6900      	ldr	r0, [r0, #16]
 800bcd8:	114b      	asrs	r3, r1, #5
 800bcda:	4298      	cmp	r0, r3
 800bcdc:	b510      	push	{r4, lr}
 800bcde:	db11      	blt.n	800bd04 <__any_on+0x32>
 800bce0:	dd0a      	ble.n	800bcf8 <__any_on+0x26>
 800bce2:	f011 011f 	ands.w	r1, r1, #31
 800bce6:	d007      	beq.n	800bcf8 <__any_on+0x26>
 800bce8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bcec:	fa24 f001 	lsr.w	r0, r4, r1
 800bcf0:	fa00 f101 	lsl.w	r1, r0, r1
 800bcf4:	428c      	cmp	r4, r1
 800bcf6:	d10b      	bne.n	800bd10 <__any_on+0x3e>
 800bcf8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bcfc:	4293      	cmp	r3, r2
 800bcfe:	d803      	bhi.n	800bd08 <__any_on+0x36>
 800bd00:	2000      	movs	r0, #0
 800bd02:	bd10      	pop	{r4, pc}
 800bd04:	4603      	mov	r3, r0
 800bd06:	e7f7      	b.n	800bcf8 <__any_on+0x26>
 800bd08:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bd0c:	2900      	cmp	r1, #0
 800bd0e:	d0f5      	beq.n	800bcfc <__any_on+0x2a>
 800bd10:	2001      	movs	r0, #1
 800bd12:	e7f6      	b.n	800bd02 <__any_on+0x30>

0800bd14 <_strtol_l.isra.0>:
 800bd14:	2b24      	cmp	r3, #36	@ 0x24
 800bd16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd1a:	4686      	mov	lr, r0
 800bd1c:	4690      	mov	r8, r2
 800bd1e:	d801      	bhi.n	800bd24 <_strtol_l.isra.0+0x10>
 800bd20:	2b01      	cmp	r3, #1
 800bd22:	d106      	bne.n	800bd32 <_strtol_l.isra.0+0x1e>
 800bd24:	f7fe f83e 	bl	8009da4 <__errno>
 800bd28:	2316      	movs	r3, #22
 800bd2a:	6003      	str	r3, [r0, #0]
 800bd2c:	2000      	movs	r0, #0
 800bd2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd32:	4834      	ldr	r0, [pc, #208]	@ (800be04 <_strtol_l.isra.0+0xf0>)
 800bd34:	460d      	mov	r5, r1
 800bd36:	462a      	mov	r2, r5
 800bd38:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd3c:	5d06      	ldrb	r6, [r0, r4]
 800bd3e:	f016 0608 	ands.w	r6, r6, #8
 800bd42:	d1f8      	bne.n	800bd36 <_strtol_l.isra.0+0x22>
 800bd44:	2c2d      	cmp	r4, #45	@ 0x2d
 800bd46:	d110      	bne.n	800bd6a <_strtol_l.isra.0+0x56>
 800bd48:	782c      	ldrb	r4, [r5, #0]
 800bd4a:	2601      	movs	r6, #1
 800bd4c:	1c95      	adds	r5, r2, #2
 800bd4e:	f033 0210 	bics.w	r2, r3, #16
 800bd52:	d115      	bne.n	800bd80 <_strtol_l.isra.0+0x6c>
 800bd54:	2c30      	cmp	r4, #48	@ 0x30
 800bd56:	d10d      	bne.n	800bd74 <_strtol_l.isra.0+0x60>
 800bd58:	782a      	ldrb	r2, [r5, #0]
 800bd5a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bd5e:	2a58      	cmp	r2, #88	@ 0x58
 800bd60:	d108      	bne.n	800bd74 <_strtol_l.isra.0+0x60>
 800bd62:	786c      	ldrb	r4, [r5, #1]
 800bd64:	3502      	adds	r5, #2
 800bd66:	2310      	movs	r3, #16
 800bd68:	e00a      	b.n	800bd80 <_strtol_l.isra.0+0x6c>
 800bd6a:	2c2b      	cmp	r4, #43	@ 0x2b
 800bd6c:	bf04      	itt	eq
 800bd6e:	782c      	ldrbeq	r4, [r5, #0]
 800bd70:	1c95      	addeq	r5, r2, #2
 800bd72:	e7ec      	b.n	800bd4e <_strtol_l.isra.0+0x3a>
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d1f6      	bne.n	800bd66 <_strtol_l.isra.0+0x52>
 800bd78:	2c30      	cmp	r4, #48	@ 0x30
 800bd7a:	bf14      	ite	ne
 800bd7c:	230a      	movne	r3, #10
 800bd7e:	2308      	moveq	r3, #8
 800bd80:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bd84:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bd88:	2200      	movs	r2, #0
 800bd8a:	fbbc f9f3 	udiv	r9, ip, r3
 800bd8e:	4610      	mov	r0, r2
 800bd90:	fb03 ca19 	mls	sl, r3, r9, ip
 800bd94:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bd98:	2f09      	cmp	r7, #9
 800bd9a:	d80f      	bhi.n	800bdbc <_strtol_l.isra.0+0xa8>
 800bd9c:	463c      	mov	r4, r7
 800bd9e:	42a3      	cmp	r3, r4
 800bda0:	dd1b      	ble.n	800bdda <_strtol_l.isra.0+0xc6>
 800bda2:	1c57      	adds	r7, r2, #1
 800bda4:	d007      	beq.n	800bdb6 <_strtol_l.isra.0+0xa2>
 800bda6:	4581      	cmp	r9, r0
 800bda8:	d314      	bcc.n	800bdd4 <_strtol_l.isra.0+0xc0>
 800bdaa:	d101      	bne.n	800bdb0 <_strtol_l.isra.0+0x9c>
 800bdac:	45a2      	cmp	sl, r4
 800bdae:	db11      	blt.n	800bdd4 <_strtol_l.isra.0+0xc0>
 800bdb0:	fb00 4003 	mla	r0, r0, r3, r4
 800bdb4:	2201      	movs	r2, #1
 800bdb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bdba:	e7eb      	b.n	800bd94 <_strtol_l.isra.0+0x80>
 800bdbc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bdc0:	2f19      	cmp	r7, #25
 800bdc2:	d801      	bhi.n	800bdc8 <_strtol_l.isra.0+0xb4>
 800bdc4:	3c37      	subs	r4, #55	@ 0x37
 800bdc6:	e7ea      	b.n	800bd9e <_strtol_l.isra.0+0x8a>
 800bdc8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bdcc:	2f19      	cmp	r7, #25
 800bdce:	d804      	bhi.n	800bdda <_strtol_l.isra.0+0xc6>
 800bdd0:	3c57      	subs	r4, #87	@ 0x57
 800bdd2:	e7e4      	b.n	800bd9e <_strtol_l.isra.0+0x8a>
 800bdd4:	f04f 32ff 	mov.w	r2, #4294967295
 800bdd8:	e7ed      	b.n	800bdb6 <_strtol_l.isra.0+0xa2>
 800bdda:	1c53      	adds	r3, r2, #1
 800bddc:	d108      	bne.n	800bdf0 <_strtol_l.isra.0+0xdc>
 800bdde:	2322      	movs	r3, #34	@ 0x22
 800bde0:	f8ce 3000 	str.w	r3, [lr]
 800bde4:	4660      	mov	r0, ip
 800bde6:	f1b8 0f00 	cmp.w	r8, #0
 800bdea:	d0a0      	beq.n	800bd2e <_strtol_l.isra.0+0x1a>
 800bdec:	1e69      	subs	r1, r5, #1
 800bdee:	e006      	b.n	800bdfe <_strtol_l.isra.0+0xea>
 800bdf0:	b106      	cbz	r6, 800bdf4 <_strtol_l.isra.0+0xe0>
 800bdf2:	4240      	negs	r0, r0
 800bdf4:	f1b8 0f00 	cmp.w	r8, #0
 800bdf8:	d099      	beq.n	800bd2e <_strtol_l.isra.0+0x1a>
 800bdfa:	2a00      	cmp	r2, #0
 800bdfc:	d1f6      	bne.n	800bdec <_strtol_l.isra.0+0xd8>
 800bdfe:	f8c8 1000 	str.w	r1, [r8]
 800be02:	e794      	b.n	800bd2e <_strtol_l.isra.0+0x1a>
 800be04:	0800cf01 	.word	0x0800cf01

0800be08 <_strtol_r>:
 800be08:	f7ff bf84 	b.w	800bd14 <_strtol_l.isra.0>

0800be0c <__ascii_wctomb>:
 800be0c:	4603      	mov	r3, r0
 800be0e:	4608      	mov	r0, r1
 800be10:	b141      	cbz	r1, 800be24 <__ascii_wctomb+0x18>
 800be12:	2aff      	cmp	r2, #255	@ 0xff
 800be14:	d904      	bls.n	800be20 <__ascii_wctomb+0x14>
 800be16:	228a      	movs	r2, #138	@ 0x8a
 800be18:	601a      	str	r2, [r3, #0]
 800be1a:	f04f 30ff 	mov.w	r0, #4294967295
 800be1e:	4770      	bx	lr
 800be20:	700a      	strb	r2, [r1, #0]
 800be22:	2001      	movs	r0, #1
 800be24:	4770      	bx	lr

0800be26 <__ssputs_r>:
 800be26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be2a:	688e      	ldr	r6, [r1, #8]
 800be2c:	461f      	mov	r7, r3
 800be2e:	42be      	cmp	r6, r7
 800be30:	680b      	ldr	r3, [r1, #0]
 800be32:	4682      	mov	sl, r0
 800be34:	460c      	mov	r4, r1
 800be36:	4690      	mov	r8, r2
 800be38:	d82d      	bhi.n	800be96 <__ssputs_r+0x70>
 800be3a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be3e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800be42:	d026      	beq.n	800be92 <__ssputs_r+0x6c>
 800be44:	6965      	ldr	r5, [r4, #20]
 800be46:	6909      	ldr	r1, [r1, #16]
 800be48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be4c:	eba3 0901 	sub.w	r9, r3, r1
 800be50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be54:	1c7b      	adds	r3, r7, #1
 800be56:	444b      	add	r3, r9
 800be58:	106d      	asrs	r5, r5, #1
 800be5a:	429d      	cmp	r5, r3
 800be5c:	bf38      	it	cc
 800be5e:	461d      	movcc	r5, r3
 800be60:	0553      	lsls	r3, r2, #21
 800be62:	d527      	bpl.n	800beb4 <__ssputs_r+0x8e>
 800be64:	4629      	mov	r1, r5
 800be66:	f7ff fa0d 	bl	800b284 <_malloc_r>
 800be6a:	4606      	mov	r6, r0
 800be6c:	b360      	cbz	r0, 800bec8 <__ssputs_r+0xa2>
 800be6e:	6921      	ldr	r1, [r4, #16]
 800be70:	464a      	mov	r2, r9
 800be72:	f7fd ffc4 	bl	8009dfe <memcpy>
 800be76:	89a3      	ldrh	r3, [r4, #12]
 800be78:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800be7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be80:	81a3      	strh	r3, [r4, #12]
 800be82:	6126      	str	r6, [r4, #16]
 800be84:	6165      	str	r5, [r4, #20]
 800be86:	444e      	add	r6, r9
 800be88:	eba5 0509 	sub.w	r5, r5, r9
 800be8c:	6026      	str	r6, [r4, #0]
 800be8e:	60a5      	str	r5, [r4, #8]
 800be90:	463e      	mov	r6, r7
 800be92:	42be      	cmp	r6, r7
 800be94:	d900      	bls.n	800be98 <__ssputs_r+0x72>
 800be96:	463e      	mov	r6, r7
 800be98:	6820      	ldr	r0, [r4, #0]
 800be9a:	4632      	mov	r2, r6
 800be9c:	4641      	mov	r1, r8
 800be9e:	f000 f9d7 	bl	800c250 <memmove>
 800bea2:	68a3      	ldr	r3, [r4, #8]
 800bea4:	1b9b      	subs	r3, r3, r6
 800bea6:	60a3      	str	r3, [r4, #8]
 800bea8:	6823      	ldr	r3, [r4, #0]
 800beaa:	4433      	add	r3, r6
 800beac:	6023      	str	r3, [r4, #0]
 800beae:	2000      	movs	r0, #0
 800beb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800beb4:	462a      	mov	r2, r5
 800beb6:	f000 fa10 	bl	800c2da <_realloc_r>
 800beba:	4606      	mov	r6, r0
 800bebc:	2800      	cmp	r0, #0
 800bebe:	d1e0      	bne.n	800be82 <__ssputs_r+0x5c>
 800bec0:	6921      	ldr	r1, [r4, #16]
 800bec2:	4650      	mov	r0, sl
 800bec4:	f7fe fe30 	bl	800ab28 <_free_r>
 800bec8:	230c      	movs	r3, #12
 800beca:	f8ca 3000 	str.w	r3, [sl]
 800bece:	89a3      	ldrh	r3, [r4, #12]
 800bed0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bed4:	81a3      	strh	r3, [r4, #12]
 800bed6:	f04f 30ff 	mov.w	r0, #4294967295
 800beda:	e7e9      	b.n	800beb0 <__ssputs_r+0x8a>

0800bedc <_svfiprintf_r>:
 800bedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bee0:	4698      	mov	r8, r3
 800bee2:	898b      	ldrh	r3, [r1, #12]
 800bee4:	061b      	lsls	r3, r3, #24
 800bee6:	b09d      	sub	sp, #116	@ 0x74
 800bee8:	4607      	mov	r7, r0
 800beea:	460d      	mov	r5, r1
 800beec:	4614      	mov	r4, r2
 800beee:	d510      	bpl.n	800bf12 <_svfiprintf_r+0x36>
 800bef0:	690b      	ldr	r3, [r1, #16]
 800bef2:	b973      	cbnz	r3, 800bf12 <_svfiprintf_r+0x36>
 800bef4:	2140      	movs	r1, #64	@ 0x40
 800bef6:	f7ff f9c5 	bl	800b284 <_malloc_r>
 800befa:	6028      	str	r0, [r5, #0]
 800befc:	6128      	str	r0, [r5, #16]
 800befe:	b930      	cbnz	r0, 800bf0e <_svfiprintf_r+0x32>
 800bf00:	230c      	movs	r3, #12
 800bf02:	603b      	str	r3, [r7, #0]
 800bf04:	f04f 30ff 	mov.w	r0, #4294967295
 800bf08:	b01d      	add	sp, #116	@ 0x74
 800bf0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf0e:	2340      	movs	r3, #64	@ 0x40
 800bf10:	616b      	str	r3, [r5, #20]
 800bf12:	2300      	movs	r3, #0
 800bf14:	9309      	str	r3, [sp, #36]	@ 0x24
 800bf16:	2320      	movs	r3, #32
 800bf18:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bf1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bf20:	2330      	movs	r3, #48	@ 0x30
 800bf22:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c0c0 <_svfiprintf_r+0x1e4>
 800bf26:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bf2a:	f04f 0901 	mov.w	r9, #1
 800bf2e:	4623      	mov	r3, r4
 800bf30:	469a      	mov	sl, r3
 800bf32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf36:	b10a      	cbz	r2, 800bf3c <_svfiprintf_r+0x60>
 800bf38:	2a25      	cmp	r2, #37	@ 0x25
 800bf3a:	d1f9      	bne.n	800bf30 <_svfiprintf_r+0x54>
 800bf3c:	ebba 0b04 	subs.w	fp, sl, r4
 800bf40:	d00b      	beq.n	800bf5a <_svfiprintf_r+0x7e>
 800bf42:	465b      	mov	r3, fp
 800bf44:	4622      	mov	r2, r4
 800bf46:	4629      	mov	r1, r5
 800bf48:	4638      	mov	r0, r7
 800bf4a:	f7ff ff6c 	bl	800be26 <__ssputs_r>
 800bf4e:	3001      	adds	r0, #1
 800bf50:	f000 80a7 	beq.w	800c0a2 <_svfiprintf_r+0x1c6>
 800bf54:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bf56:	445a      	add	r2, fp
 800bf58:	9209      	str	r2, [sp, #36]	@ 0x24
 800bf5a:	f89a 3000 	ldrb.w	r3, [sl]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	f000 809f 	beq.w	800c0a2 <_svfiprintf_r+0x1c6>
 800bf64:	2300      	movs	r3, #0
 800bf66:	f04f 32ff 	mov.w	r2, #4294967295
 800bf6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf6e:	f10a 0a01 	add.w	sl, sl, #1
 800bf72:	9304      	str	r3, [sp, #16]
 800bf74:	9307      	str	r3, [sp, #28]
 800bf76:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf7a:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf7c:	4654      	mov	r4, sl
 800bf7e:	2205      	movs	r2, #5
 800bf80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf84:	484e      	ldr	r0, [pc, #312]	@ (800c0c0 <_svfiprintf_r+0x1e4>)
 800bf86:	f7f4 f92b 	bl	80001e0 <memchr>
 800bf8a:	9a04      	ldr	r2, [sp, #16]
 800bf8c:	b9d8      	cbnz	r0, 800bfc6 <_svfiprintf_r+0xea>
 800bf8e:	06d0      	lsls	r0, r2, #27
 800bf90:	bf44      	itt	mi
 800bf92:	2320      	movmi	r3, #32
 800bf94:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf98:	0711      	lsls	r1, r2, #28
 800bf9a:	bf44      	itt	mi
 800bf9c:	232b      	movmi	r3, #43	@ 0x2b
 800bf9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bfa2:	f89a 3000 	ldrb.w	r3, [sl]
 800bfa6:	2b2a      	cmp	r3, #42	@ 0x2a
 800bfa8:	d015      	beq.n	800bfd6 <_svfiprintf_r+0xfa>
 800bfaa:	9a07      	ldr	r2, [sp, #28]
 800bfac:	4654      	mov	r4, sl
 800bfae:	2000      	movs	r0, #0
 800bfb0:	f04f 0c0a 	mov.w	ip, #10
 800bfb4:	4621      	mov	r1, r4
 800bfb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bfba:	3b30      	subs	r3, #48	@ 0x30
 800bfbc:	2b09      	cmp	r3, #9
 800bfbe:	d94b      	bls.n	800c058 <_svfiprintf_r+0x17c>
 800bfc0:	b1b0      	cbz	r0, 800bff0 <_svfiprintf_r+0x114>
 800bfc2:	9207      	str	r2, [sp, #28]
 800bfc4:	e014      	b.n	800bff0 <_svfiprintf_r+0x114>
 800bfc6:	eba0 0308 	sub.w	r3, r0, r8
 800bfca:	fa09 f303 	lsl.w	r3, r9, r3
 800bfce:	4313      	orrs	r3, r2
 800bfd0:	9304      	str	r3, [sp, #16]
 800bfd2:	46a2      	mov	sl, r4
 800bfd4:	e7d2      	b.n	800bf7c <_svfiprintf_r+0xa0>
 800bfd6:	9b03      	ldr	r3, [sp, #12]
 800bfd8:	1d19      	adds	r1, r3, #4
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	9103      	str	r1, [sp, #12]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	bfbb      	ittet	lt
 800bfe2:	425b      	neglt	r3, r3
 800bfe4:	f042 0202 	orrlt.w	r2, r2, #2
 800bfe8:	9307      	strge	r3, [sp, #28]
 800bfea:	9307      	strlt	r3, [sp, #28]
 800bfec:	bfb8      	it	lt
 800bfee:	9204      	strlt	r2, [sp, #16]
 800bff0:	7823      	ldrb	r3, [r4, #0]
 800bff2:	2b2e      	cmp	r3, #46	@ 0x2e
 800bff4:	d10a      	bne.n	800c00c <_svfiprintf_r+0x130>
 800bff6:	7863      	ldrb	r3, [r4, #1]
 800bff8:	2b2a      	cmp	r3, #42	@ 0x2a
 800bffa:	d132      	bne.n	800c062 <_svfiprintf_r+0x186>
 800bffc:	9b03      	ldr	r3, [sp, #12]
 800bffe:	1d1a      	adds	r2, r3, #4
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	9203      	str	r2, [sp, #12]
 800c004:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c008:	3402      	adds	r4, #2
 800c00a:	9305      	str	r3, [sp, #20]
 800c00c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c0d0 <_svfiprintf_r+0x1f4>
 800c010:	7821      	ldrb	r1, [r4, #0]
 800c012:	2203      	movs	r2, #3
 800c014:	4650      	mov	r0, sl
 800c016:	f7f4 f8e3 	bl	80001e0 <memchr>
 800c01a:	b138      	cbz	r0, 800c02c <_svfiprintf_r+0x150>
 800c01c:	9b04      	ldr	r3, [sp, #16]
 800c01e:	eba0 000a 	sub.w	r0, r0, sl
 800c022:	2240      	movs	r2, #64	@ 0x40
 800c024:	4082      	lsls	r2, r0
 800c026:	4313      	orrs	r3, r2
 800c028:	3401      	adds	r4, #1
 800c02a:	9304      	str	r3, [sp, #16]
 800c02c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c030:	4824      	ldr	r0, [pc, #144]	@ (800c0c4 <_svfiprintf_r+0x1e8>)
 800c032:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c036:	2206      	movs	r2, #6
 800c038:	f7f4 f8d2 	bl	80001e0 <memchr>
 800c03c:	2800      	cmp	r0, #0
 800c03e:	d036      	beq.n	800c0ae <_svfiprintf_r+0x1d2>
 800c040:	4b21      	ldr	r3, [pc, #132]	@ (800c0c8 <_svfiprintf_r+0x1ec>)
 800c042:	bb1b      	cbnz	r3, 800c08c <_svfiprintf_r+0x1b0>
 800c044:	9b03      	ldr	r3, [sp, #12]
 800c046:	3307      	adds	r3, #7
 800c048:	f023 0307 	bic.w	r3, r3, #7
 800c04c:	3308      	adds	r3, #8
 800c04e:	9303      	str	r3, [sp, #12]
 800c050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c052:	4433      	add	r3, r6
 800c054:	9309      	str	r3, [sp, #36]	@ 0x24
 800c056:	e76a      	b.n	800bf2e <_svfiprintf_r+0x52>
 800c058:	fb0c 3202 	mla	r2, ip, r2, r3
 800c05c:	460c      	mov	r4, r1
 800c05e:	2001      	movs	r0, #1
 800c060:	e7a8      	b.n	800bfb4 <_svfiprintf_r+0xd8>
 800c062:	2300      	movs	r3, #0
 800c064:	3401      	adds	r4, #1
 800c066:	9305      	str	r3, [sp, #20]
 800c068:	4619      	mov	r1, r3
 800c06a:	f04f 0c0a 	mov.w	ip, #10
 800c06e:	4620      	mov	r0, r4
 800c070:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c074:	3a30      	subs	r2, #48	@ 0x30
 800c076:	2a09      	cmp	r2, #9
 800c078:	d903      	bls.n	800c082 <_svfiprintf_r+0x1a6>
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d0c6      	beq.n	800c00c <_svfiprintf_r+0x130>
 800c07e:	9105      	str	r1, [sp, #20]
 800c080:	e7c4      	b.n	800c00c <_svfiprintf_r+0x130>
 800c082:	fb0c 2101 	mla	r1, ip, r1, r2
 800c086:	4604      	mov	r4, r0
 800c088:	2301      	movs	r3, #1
 800c08a:	e7f0      	b.n	800c06e <_svfiprintf_r+0x192>
 800c08c:	ab03      	add	r3, sp, #12
 800c08e:	9300      	str	r3, [sp, #0]
 800c090:	462a      	mov	r2, r5
 800c092:	4b0e      	ldr	r3, [pc, #56]	@ (800c0cc <_svfiprintf_r+0x1f0>)
 800c094:	a904      	add	r1, sp, #16
 800c096:	4638      	mov	r0, r7
 800c098:	f7fc ff34 	bl	8008f04 <_printf_float>
 800c09c:	1c42      	adds	r2, r0, #1
 800c09e:	4606      	mov	r6, r0
 800c0a0:	d1d6      	bne.n	800c050 <_svfiprintf_r+0x174>
 800c0a2:	89ab      	ldrh	r3, [r5, #12]
 800c0a4:	065b      	lsls	r3, r3, #25
 800c0a6:	f53f af2d 	bmi.w	800bf04 <_svfiprintf_r+0x28>
 800c0aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c0ac:	e72c      	b.n	800bf08 <_svfiprintf_r+0x2c>
 800c0ae:	ab03      	add	r3, sp, #12
 800c0b0:	9300      	str	r3, [sp, #0]
 800c0b2:	462a      	mov	r2, r5
 800c0b4:	4b05      	ldr	r3, [pc, #20]	@ (800c0cc <_svfiprintf_r+0x1f0>)
 800c0b6:	a904      	add	r1, sp, #16
 800c0b8:	4638      	mov	r0, r7
 800c0ba:	f7fd f9bb 	bl	8009434 <_printf_i>
 800c0be:	e7ed      	b.n	800c09c <_svfiprintf_r+0x1c0>
 800c0c0:	0800cd9d 	.word	0x0800cd9d
 800c0c4:	0800cda7 	.word	0x0800cda7
 800c0c8:	08008f05 	.word	0x08008f05
 800c0cc:	0800be27 	.word	0x0800be27
 800c0d0:	0800cda3 	.word	0x0800cda3

0800c0d4 <__sflush_r>:
 800c0d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0dc:	0716      	lsls	r6, r2, #28
 800c0de:	4605      	mov	r5, r0
 800c0e0:	460c      	mov	r4, r1
 800c0e2:	d454      	bmi.n	800c18e <__sflush_r+0xba>
 800c0e4:	684b      	ldr	r3, [r1, #4]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	dc02      	bgt.n	800c0f0 <__sflush_r+0x1c>
 800c0ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	dd48      	ble.n	800c182 <__sflush_r+0xae>
 800c0f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c0f2:	2e00      	cmp	r6, #0
 800c0f4:	d045      	beq.n	800c182 <__sflush_r+0xae>
 800c0f6:	2300      	movs	r3, #0
 800c0f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c0fc:	682f      	ldr	r7, [r5, #0]
 800c0fe:	6a21      	ldr	r1, [r4, #32]
 800c100:	602b      	str	r3, [r5, #0]
 800c102:	d030      	beq.n	800c166 <__sflush_r+0x92>
 800c104:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c106:	89a3      	ldrh	r3, [r4, #12]
 800c108:	0759      	lsls	r1, r3, #29
 800c10a:	d505      	bpl.n	800c118 <__sflush_r+0x44>
 800c10c:	6863      	ldr	r3, [r4, #4]
 800c10e:	1ad2      	subs	r2, r2, r3
 800c110:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c112:	b10b      	cbz	r3, 800c118 <__sflush_r+0x44>
 800c114:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c116:	1ad2      	subs	r2, r2, r3
 800c118:	2300      	movs	r3, #0
 800c11a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c11c:	6a21      	ldr	r1, [r4, #32]
 800c11e:	4628      	mov	r0, r5
 800c120:	47b0      	blx	r6
 800c122:	1c43      	adds	r3, r0, #1
 800c124:	89a3      	ldrh	r3, [r4, #12]
 800c126:	d106      	bne.n	800c136 <__sflush_r+0x62>
 800c128:	6829      	ldr	r1, [r5, #0]
 800c12a:	291d      	cmp	r1, #29
 800c12c:	d82b      	bhi.n	800c186 <__sflush_r+0xb2>
 800c12e:	4a2a      	ldr	r2, [pc, #168]	@ (800c1d8 <__sflush_r+0x104>)
 800c130:	40ca      	lsrs	r2, r1
 800c132:	07d6      	lsls	r6, r2, #31
 800c134:	d527      	bpl.n	800c186 <__sflush_r+0xb2>
 800c136:	2200      	movs	r2, #0
 800c138:	6062      	str	r2, [r4, #4]
 800c13a:	04d9      	lsls	r1, r3, #19
 800c13c:	6922      	ldr	r2, [r4, #16]
 800c13e:	6022      	str	r2, [r4, #0]
 800c140:	d504      	bpl.n	800c14c <__sflush_r+0x78>
 800c142:	1c42      	adds	r2, r0, #1
 800c144:	d101      	bne.n	800c14a <__sflush_r+0x76>
 800c146:	682b      	ldr	r3, [r5, #0]
 800c148:	b903      	cbnz	r3, 800c14c <__sflush_r+0x78>
 800c14a:	6560      	str	r0, [r4, #84]	@ 0x54
 800c14c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c14e:	602f      	str	r7, [r5, #0]
 800c150:	b1b9      	cbz	r1, 800c182 <__sflush_r+0xae>
 800c152:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c156:	4299      	cmp	r1, r3
 800c158:	d002      	beq.n	800c160 <__sflush_r+0x8c>
 800c15a:	4628      	mov	r0, r5
 800c15c:	f7fe fce4 	bl	800ab28 <_free_r>
 800c160:	2300      	movs	r3, #0
 800c162:	6363      	str	r3, [r4, #52]	@ 0x34
 800c164:	e00d      	b.n	800c182 <__sflush_r+0xae>
 800c166:	2301      	movs	r3, #1
 800c168:	4628      	mov	r0, r5
 800c16a:	47b0      	blx	r6
 800c16c:	4602      	mov	r2, r0
 800c16e:	1c50      	adds	r0, r2, #1
 800c170:	d1c9      	bne.n	800c106 <__sflush_r+0x32>
 800c172:	682b      	ldr	r3, [r5, #0]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d0c6      	beq.n	800c106 <__sflush_r+0x32>
 800c178:	2b1d      	cmp	r3, #29
 800c17a:	d001      	beq.n	800c180 <__sflush_r+0xac>
 800c17c:	2b16      	cmp	r3, #22
 800c17e:	d11e      	bne.n	800c1be <__sflush_r+0xea>
 800c180:	602f      	str	r7, [r5, #0]
 800c182:	2000      	movs	r0, #0
 800c184:	e022      	b.n	800c1cc <__sflush_r+0xf8>
 800c186:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c18a:	b21b      	sxth	r3, r3
 800c18c:	e01b      	b.n	800c1c6 <__sflush_r+0xf2>
 800c18e:	690f      	ldr	r7, [r1, #16]
 800c190:	2f00      	cmp	r7, #0
 800c192:	d0f6      	beq.n	800c182 <__sflush_r+0xae>
 800c194:	0793      	lsls	r3, r2, #30
 800c196:	680e      	ldr	r6, [r1, #0]
 800c198:	bf08      	it	eq
 800c19a:	694b      	ldreq	r3, [r1, #20]
 800c19c:	600f      	str	r7, [r1, #0]
 800c19e:	bf18      	it	ne
 800c1a0:	2300      	movne	r3, #0
 800c1a2:	eba6 0807 	sub.w	r8, r6, r7
 800c1a6:	608b      	str	r3, [r1, #8]
 800c1a8:	f1b8 0f00 	cmp.w	r8, #0
 800c1ac:	dde9      	ble.n	800c182 <__sflush_r+0xae>
 800c1ae:	6a21      	ldr	r1, [r4, #32]
 800c1b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c1b2:	4643      	mov	r3, r8
 800c1b4:	463a      	mov	r2, r7
 800c1b6:	4628      	mov	r0, r5
 800c1b8:	47b0      	blx	r6
 800c1ba:	2800      	cmp	r0, #0
 800c1bc:	dc08      	bgt.n	800c1d0 <__sflush_r+0xfc>
 800c1be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1c6:	81a3      	strh	r3, [r4, #12]
 800c1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1d0:	4407      	add	r7, r0
 800c1d2:	eba8 0800 	sub.w	r8, r8, r0
 800c1d6:	e7e7      	b.n	800c1a8 <__sflush_r+0xd4>
 800c1d8:	20400001 	.word	0x20400001

0800c1dc <_fflush_r>:
 800c1dc:	b538      	push	{r3, r4, r5, lr}
 800c1de:	690b      	ldr	r3, [r1, #16]
 800c1e0:	4605      	mov	r5, r0
 800c1e2:	460c      	mov	r4, r1
 800c1e4:	b913      	cbnz	r3, 800c1ec <_fflush_r+0x10>
 800c1e6:	2500      	movs	r5, #0
 800c1e8:	4628      	mov	r0, r5
 800c1ea:	bd38      	pop	{r3, r4, r5, pc}
 800c1ec:	b118      	cbz	r0, 800c1f6 <_fflush_r+0x1a>
 800c1ee:	6a03      	ldr	r3, [r0, #32]
 800c1f0:	b90b      	cbnz	r3, 800c1f6 <_fflush_r+0x1a>
 800c1f2:	f7fd fcd7 	bl	8009ba4 <__sinit>
 800c1f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d0f3      	beq.n	800c1e6 <_fflush_r+0xa>
 800c1fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c200:	07d0      	lsls	r0, r2, #31
 800c202:	d404      	bmi.n	800c20e <_fflush_r+0x32>
 800c204:	0599      	lsls	r1, r3, #22
 800c206:	d402      	bmi.n	800c20e <_fflush_r+0x32>
 800c208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c20a:	f7fd fdf6 	bl	8009dfa <__retarget_lock_acquire_recursive>
 800c20e:	4628      	mov	r0, r5
 800c210:	4621      	mov	r1, r4
 800c212:	f7ff ff5f 	bl	800c0d4 <__sflush_r>
 800c216:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c218:	07da      	lsls	r2, r3, #31
 800c21a:	4605      	mov	r5, r0
 800c21c:	d4e4      	bmi.n	800c1e8 <_fflush_r+0xc>
 800c21e:	89a3      	ldrh	r3, [r4, #12]
 800c220:	059b      	lsls	r3, r3, #22
 800c222:	d4e1      	bmi.n	800c1e8 <_fflush_r+0xc>
 800c224:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c226:	f7fd fde9 	bl	8009dfc <__retarget_lock_release_recursive>
 800c22a:	e7dd      	b.n	800c1e8 <_fflush_r+0xc>

0800c22c <fiprintf>:
 800c22c:	b40e      	push	{r1, r2, r3}
 800c22e:	b503      	push	{r0, r1, lr}
 800c230:	4601      	mov	r1, r0
 800c232:	ab03      	add	r3, sp, #12
 800c234:	4805      	ldr	r0, [pc, #20]	@ (800c24c <fiprintf+0x20>)
 800c236:	f853 2b04 	ldr.w	r2, [r3], #4
 800c23a:	6800      	ldr	r0, [r0, #0]
 800c23c:	9301      	str	r3, [sp, #4]
 800c23e:	f000 f8a3 	bl	800c388 <_vfiprintf_r>
 800c242:	b002      	add	sp, #8
 800c244:	f85d eb04 	ldr.w	lr, [sp], #4
 800c248:	b003      	add	sp, #12
 800c24a:	4770      	bx	lr
 800c24c:	20000208 	.word	0x20000208

0800c250 <memmove>:
 800c250:	4288      	cmp	r0, r1
 800c252:	b510      	push	{r4, lr}
 800c254:	eb01 0402 	add.w	r4, r1, r2
 800c258:	d902      	bls.n	800c260 <memmove+0x10>
 800c25a:	4284      	cmp	r4, r0
 800c25c:	4623      	mov	r3, r4
 800c25e:	d807      	bhi.n	800c270 <memmove+0x20>
 800c260:	1e43      	subs	r3, r0, #1
 800c262:	42a1      	cmp	r1, r4
 800c264:	d008      	beq.n	800c278 <memmove+0x28>
 800c266:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c26a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c26e:	e7f8      	b.n	800c262 <memmove+0x12>
 800c270:	4402      	add	r2, r0
 800c272:	4601      	mov	r1, r0
 800c274:	428a      	cmp	r2, r1
 800c276:	d100      	bne.n	800c27a <memmove+0x2a>
 800c278:	bd10      	pop	{r4, pc}
 800c27a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c27e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c282:	e7f7      	b.n	800c274 <memmove+0x24>

0800c284 <_sbrk_r>:
 800c284:	b538      	push	{r3, r4, r5, lr}
 800c286:	4d06      	ldr	r5, [pc, #24]	@ (800c2a0 <_sbrk_r+0x1c>)
 800c288:	2300      	movs	r3, #0
 800c28a:	4604      	mov	r4, r0
 800c28c:	4608      	mov	r0, r1
 800c28e:	602b      	str	r3, [r5, #0]
 800c290:	f7f6 fed2 	bl	8003038 <_sbrk>
 800c294:	1c43      	adds	r3, r0, #1
 800c296:	d102      	bne.n	800c29e <_sbrk_r+0x1a>
 800c298:	682b      	ldr	r3, [r5, #0]
 800c29a:	b103      	cbz	r3, 800c29e <_sbrk_r+0x1a>
 800c29c:	6023      	str	r3, [r4, #0]
 800c29e:	bd38      	pop	{r3, r4, r5, pc}
 800c2a0:	200008c4 	.word	0x200008c4

0800c2a4 <abort>:
 800c2a4:	b508      	push	{r3, lr}
 800c2a6:	2006      	movs	r0, #6
 800c2a8:	f000 fa42 	bl	800c730 <raise>
 800c2ac:	2001      	movs	r0, #1
 800c2ae:	f7f6 fe4b 	bl	8002f48 <_exit>

0800c2b2 <_calloc_r>:
 800c2b2:	b570      	push	{r4, r5, r6, lr}
 800c2b4:	fba1 5402 	umull	r5, r4, r1, r2
 800c2b8:	b934      	cbnz	r4, 800c2c8 <_calloc_r+0x16>
 800c2ba:	4629      	mov	r1, r5
 800c2bc:	f7fe ffe2 	bl	800b284 <_malloc_r>
 800c2c0:	4606      	mov	r6, r0
 800c2c2:	b928      	cbnz	r0, 800c2d0 <_calloc_r+0x1e>
 800c2c4:	4630      	mov	r0, r6
 800c2c6:	bd70      	pop	{r4, r5, r6, pc}
 800c2c8:	220c      	movs	r2, #12
 800c2ca:	6002      	str	r2, [r0, #0]
 800c2cc:	2600      	movs	r6, #0
 800c2ce:	e7f9      	b.n	800c2c4 <_calloc_r+0x12>
 800c2d0:	462a      	mov	r2, r5
 800c2d2:	4621      	mov	r1, r4
 800c2d4:	f7fd fd01 	bl	8009cda <memset>
 800c2d8:	e7f4      	b.n	800c2c4 <_calloc_r+0x12>

0800c2da <_realloc_r>:
 800c2da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2de:	4607      	mov	r7, r0
 800c2e0:	4614      	mov	r4, r2
 800c2e2:	460d      	mov	r5, r1
 800c2e4:	b921      	cbnz	r1, 800c2f0 <_realloc_r+0x16>
 800c2e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c2ea:	4611      	mov	r1, r2
 800c2ec:	f7fe bfca 	b.w	800b284 <_malloc_r>
 800c2f0:	b92a      	cbnz	r2, 800c2fe <_realloc_r+0x24>
 800c2f2:	f7fe fc19 	bl	800ab28 <_free_r>
 800c2f6:	4625      	mov	r5, r4
 800c2f8:	4628      	mov	r0, r5
 800c2fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c2fe:	f000 fa33 	bl	800c768 <_malloc_usable_size_r>
 800c302:	4284      	cmp	r4, r0
 800c304:	4606      	mov	r6, r0
 800c306:	d802      	bhi.n	800c30e <_realloc_r+0x34>
 800c308:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c30c:	d8f4      	bhi.n	800c2f8 <_realloc_r+0x1e>
 800c30e:	4621      	mov	r1, r4
 800c310:	4638      	mov	r0, r7
 800c312:	f7fe ffb7 	bl	800b284 <_malloc_r>
 800c316:	4680      	mov	r8, r0
 800c318:	b908      	cbnz	r0, 800c31e <_realloc_r+0x44>
 800c31a:	4645      	mov	r5, r8
 800c31c:	e7ec      	b.n	800c2f8 <_realloc_r+0x1e>
 800c31e:	42b4      	cmp	r4, r6
 800c320:	4622      	mov	r2, r4
 800c322:	4629      	mov	r1, r5
 800c324:	bf28      	it	cs
 800c326:	4632      	movcs	r2, r6
 800c328:	f7fd fd69 	bl	8009dfe <memcpy>
 800c32c:	4629      	mov	r1, r5
 800c32e:	4638      	mov	r0, r7
 800c330:	f7fe fbfa 	bl	800ab28 <_free_r>
 800c334:	e7f1      	b.n	800c31a <_realloc_r+0x40>

0800c336 <__sfputc_r>:
 800c336:	6893      	ldr	r3, [r2, #8]
 800c338:	3b01      	subs	r3, #1
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	b410      	push	{r4}
 800c33e:	6093      	str	r3, [r2, #8]
 800c340:	da08      	bge.n	800c354 <__sfputc_r+0x1e>
 800c342:	6994      	ldr	r4, [r2, #24]
 800c344:	42a3      	cmp	r3, r4
 800c346:	db01      	blt.n	800c34c <__sfputc_r+0x16>
 800c348:	290a      	cmp	r1, #10
 800c34a:	d103      	bne.n	800c354 <__sfputc_r+0x1e>
 800c34c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c350:	f000 b932 	b.w	800c5b8 <__swbuf_r>
 800c354:	6813      	ldr	r3, [r2, #0]
 800c356:	1c58      	adds	r0, r3, #1
 800c358:	6010      	str	r0, [r2, #0]
 800c35a:	7019      	strb	r1, [r3, #0]
 800c35c:	4608      	mov	r0, r1
 800c35e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c362:	4770      	bx	lr

0800c364 <__sfputs_r>:
 800c364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c366:	4606      	mov	r6, r0
 800c368:	460f      	mov	r7, r1
 800c36a:	4614      	mov	r4, r2
 800c36c:	18d5      	adds	r5, r2, r3
 800c36e:	42ac      	cmp	r4, r5
 800c370:	d101      	bne.n	800c376 <__sfputs_r+0x12>
 800c372:	2000      	movs	r0, #0
 800c374:	e007      	b.n	800c386 <__sfputs_r+0x22>
 800c376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c37a:	463a      	mov	r2, r7
 800c37c:	4630      	mov	r0, r6
 800c37e:	f7ff ffda 	bl	800c336 <__sfputc_r>
 800c382:	1c43      	adds	r3, r0, #1
 800c384:	d1f3      	bne.n	800c36e <__sfputs_r+0xa>
 800c386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c388 <_vfiprintf_r>:
 800c388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c38c:	460d      	mov	r5, r1
 800c38e:	b09d      	sub	sp, #116	@ 0x74
 800c390:	4614      	mov	r4, r2
 800c392:	4698      	mov	r8, r3
 800c394:	4606      	mov	r6, r0
 800c396:	b118      	cbz	r0, 800c3a0 <_vfiprintf_r+0x18>
 800c398:	6a03      	ldr	r3, [r0, #32]
 800c39a:	b90b      	cbnz	r3, 800c3a0 <_vfiprintf_r+0x18>
 800c39c:	f7fd fc02 	bl	8009ba4 <__sinit>
 800c3a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c3a2:	07d9      	lsls	r1, r3, #31
 800c3a4:	d405      	bmi.n	800c3b2 <_vfiprintf_r+0x2a>
 800c3a6:	89ab      	ldrh	r3, [r5, #12]
 800c3a8:	059a      	lsls	r2, r3, #22
 800c3aa:	d402      	bmi.n	800c3b2 <_vfiprintf_r+0x2a>
 800c3ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c3ae:	f7fd fd24 	bl	8009dfa <__retarget_lock_acquire_recursive>
 800c3b2:	89ab      	ldrh	r3, [r5, #12]
 800c3b4:	071b      	lsls	r3, r3, #28
 800c3b6:	d501      	bpl.n	800c3bc <_vfiprintf_r+0x34>
 800c3b8:	692b      	ldr	r3, [r5, #16]
 800c3ba:	b99b      	cbnz	r3, 800c3e4 <_vfiprintf_r+0x5c>
 800c3bc:	4629      	mov	r1, r5
 800c3be:	4630      	mov	r0, r6
 800c3c0:	f000 f938 	bl	800c634 <__swsetup_r>
 800c3c4:	b170      	cbz	r0, 800c3e4 <_vfiprintf_r+0x5c>
 800c3c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c3c8:	07dc      	lsls	r4, r3, #31
 800c3ca:	d504      	bpl.n	800c3d6 <_vfiprintf_r+0x4e>
 800c3cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c3d0:	b01d      	add	sp, #116	@ 0x74
 800c3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3d6:	89ab      	ldrh	r3, [r5, #12]
 800c3d8:	0598      	lsls	r0, r3, #22
 800c3da:	d4f7      	bmi.n	800c3cc <_vfiprintf_r+0x44>
 800c3dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c3de:	f7fd fd0d 	bl	8009dfc <__retarget_lock_release_recursive>
 800c3e2:	e7f3      	b.n	800c3cc <_vfiprintf_r+0x44>
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c3e8:	2320      	movs	r3, #32
 800c3ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c3ee:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3f2:	2330      	movs	r3, #48	@ 0x30
 800c3f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c5a4 <_vfiprintf_r+0x21c>
 800c3f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c3fc:	f04f 0901 	mov.w	r9, #1
 800c400:	4623      	mov	r3, r4
 800c402:	469a      	mov	sl, r3
 800c404:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c408:	b10a      	cbz	r2, 800c40e <_vfiprintf_r+0x86>
 800c40a:	2a25      	cmp	r2, #37	@ 0x25
 800c40c:	d1f9      	bne.n	800c402 <_vfiprintf_r+0x7a>
 800c40e:	ebba 0b04 	subs.w	fp, sl, r4
 800c412:	d00b      	beq.n	800c42c <_vfiprintf_r+0xa4>
 800c414:	465b      	mov	r3, fp
 800c416:	4622      	mov	r2, r4
 800c418:	4629      	mov	r1, r5
 800c41a:	4630      	mov	r0, r6
 800c41c:	f7ff ffa2 	bl	800c364 <__sfputs_r>
 800c420:	3001      	adds	r0, #1
 800c422:	f000 80a7 	beq.w	800c574 <_vfiprintf_r+0x1ec>
 800c426:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c428:	445a      	add	r2, fp
 800c42a:	9209      	str	r2, [sp, #36]	@ 0x24
 800c42c:	f89a 3000 	ldrb.w	r3, [sl]
 800c430:	2b00      	cmp	r3, #0
 800c432:	f000 809f 	beq.w	800c574 <_vfiprintf_r+0x1ec>
 800c436:	2300      	movs	r3, #0
 800c438:	f04f 32ff 	mov.w	r2, #4294967295
 800c43c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c440:	f10a 0a01 	add.w	sl, sl, #1
 800c444:	9304      	str	r3, [sp, #16]
 800c446:	9307      	str	r3, [sp, #28]
 800c448:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c44c:	931a      	str	r3, [sp, #104]	@ 0x68
 800c44e:	4654      	mov	r4, sl
 800c450:	2205      	movs	r2, #5
 800c452:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c456:	4853      	ldr	r0, [pc, #332]	@ (800c5a4 <_vfiprintf_r+0x21c>)
 800c458:	f7f3 fec2 	bl	80001e0 <memchr>
 800c45c:	9a04      	ldr	r2, [sp, #16]
 800c45e:	b9d8      	cbnz	r0, 800c498 <_vfiprintf_r+0x110>
 800c460:	06d1      	lsls	r1, r2, #27
 800c462:	bf44      	itt	mi
 800c464:	2320      	movmi	r3, #32
 800c466:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c46a:	0713      	lsls	r3, r2, #28
 800c46c:	bf44      	itt	mi
 800c46e:	232b      	movmi	r3, #43	@ 0x2b
 800c470:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c474:	f89a 3000 	ldrb.w	r3, [sl]
 800c478:	2b2a      	cmp	r3, #42	@ 0x2a
 800c47a:	d015      	beq.n	800c4a8 <_vfiprintf_r+0x120>
 800c47c:	9a07      	ldr	r2, [sp, #28]
 800c47e:	4654      	mov	r4, sl
 800c480:	2000      	movs	r0, #0
 800c482:	f04f 0c0a 	mov.w	ip, #10
 800c486:	4621      	mov	r1, r4
 800c488:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c48c:	3b30      	subs	r3, #48	@ 0x30
 800c48e:	2b09      	cmp	r3, #9
 800c490:	d94b      	bls.n	800c52a <_vfiprintf_r+0x1a2>
 800c492:	b1b0      	cbz	r0, 800c4c2 <_vfiprintf_r+0x13a>
 800c494:	9207      	str	r2, [sp, #28]
 800c496:	e014      	b.n	800c4c2 <_vfiprintf_r+0x13a>
 800c498:	eba0 0308 	sub.w	r3, r0, r8
 800c49c:	fa09 f303 	lsl.w	r3, r9, r3
 800c4a0:	4313      	orrs	r3, r2
 800c4a2:	9304      	str	r3, [sp, #16]
 800c4a4:	46a2      	mov	sl, r4
 800c4a6:	e7d2      	b.n	800c44e <_vfiprintf_r+0xc6>
 800c4a8:	9b03      	ldr	r3, [sp, #12]
 800c4aa:	1d19      	adds	r1, r3, #4
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	9103      	str	r1, [sp, #12]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	bfbb      	ittet	lt
 800c4b4:	425b      	neglt	r3, r3
 800c4b6:	f042 0202 	orrlt.w	r2, r2, #2
 800c4ba:	9307      	strge	r3, [sp, #28]
 800c4bc:	9307      	strlt	r3, [sp, #28]
 800c4be:	bfb8      	it	lt
 800c4c0:	9204      	strlt	r2, [sp, #16]
 800c4c2:	7823      	ldrb	r3, [r4, #0]
 800c4c4:	2b2e      	cmp	r3, #46	@ 0x2e
 800c4c6:	d10a      	bne.n	800c4de <_vfiprintf_r+0x156>
 800c4c8:	7863      	ldrb	r3, [r4, #1]
 800c4ca:	2b2a      	cmp	r3, #42	@ 0x2a
 800c4cc:	d132      	bne.n	800c534 <_vfiprintf_r+0x1ac>
 800c4ce:	9b03      	ldr	r3, [sp, #12]
 800c4d0:	1d1a      	adds	r2, r3, #4
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	9203      	str	r2, [sp, #12]
 800c4d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c4da:	3402      	adds	r4, #2
 800c4dc:	9305      	str	r3, [sp, #20]
 800c4de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c5b4 <_vfiprintf_r+0x22c>
 800c4e2:	7821      	ldrb	r1, [r4, #0]
 800c4e4:	2203      	movs	r2, #3
 800c4e6:	4650      	mov	r0, sl
 800c4e8:	f7f3 fe7a 	bl	80001e0 <memchr>
 800c4ec:	b138      	cbz	r0, 800c4fe <_vfiprintf_r+0x176>
 800c4ee:	9b04      	ldr	r3, [sp, #16]
 800c4f0:	eba0 000a 	sub.w	r0, r0, sl
 800c4f4:	2240      	movs	r2, #64	@ 0x40
 800c4f6:	4082      	lsls	r2, r0
 800c4f8:	4313      	orrs	r3, r2
 800c4fa:	3401      	adds	r4, #1
 800c4fc:	9304      	str	r3, [sp, #16]
 800c4fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c502:	4829      	ldr	r0, [pc, #164]	@ (800c5a8 <_vfiprintf_r+0x220>)
 800c504:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c508:	2206      	movs	r2, #6
 800c50a:	f7f3 fe69 	bl	80001e0 <memchr>
 800c50e:	2800      	cmp	r0, #0
 800c510:	d03f      	beq.n	800c592 <_vfiprintf_r+0x20a>
 800c512:	4b26      	ldr	r3, [pc, #152]	@ (800c5ac <_vfiprintf_r+0x224>)
 800c514:	bb1b      	cbnz	r3, 800c55e <_vfiprintf_r+0x1d6>
 800c516:	9b03      	ldr	r3, [sp, #12]
 800c518:	3307      	adds	r3, #7
 800c51a:	f023 0307 	bic.w	r3, r3, #7
 800c51e:	3308      	adds	r3, #8
 800c520:	9303      	str	r3, [sp, #12]
 800c522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c524:	443b      	add	r3, r7
 800c526:	9309      	str	r3, [sp, #36]	@ 0x24
 800c528:	e76a      	b.n	800c400 <_vfiprintf_r+0x78>
 800c52a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c52e:	460c      	mov	r4, r1
 800c530:	2001      	movs	r0, #1
 800c532:	e7a8      	b.n	800c486 <_vfiprintf_r+0xfe>
 800c534:	2300      	movs	r3, #0
 800c536:	3401      	adds	r4, #1
 800c538:	9305      	str	r3, [sp, #20]
 800c53a:	4619      	mov	r1, r3
 800c53c:	f04f 0c0a 	mov.w	ip, #10
 800c540:	4620      	mov	r0, r4
 800c542:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c546:	3a30      	subs	r2, #48	@ 0x30
 800c548:	2a09      	cmp	r2, #9
 800c54a:	d903      	bls.n	800c554 <_vfiprintf_r+0x1cc>
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d0c6      	beq.n	800c4de <_vfiprintf_r+0x156>
 800c550:	9105      	str	r1, [sp, #20]
 800c552:	e7c4      	b.n	800c4de <_vfiprintf_r+0x156>
 800c554:	fb0c 2101 	mla	r1, ip, r1, r2
 800c558:	4604      	mov	r4, r0
 800c55a:	2301      	movs	r3, #1
 800c55c:	e7f0      	b.n	800c540 <_vfiprintf_r+0x1b8>
 800c55e:	ab03      	add	r3, sp, #12
 800c560:	9300      	str	r3, [sp, #0]
 800c562:	462a      	mov	r2, r5
 800c564:	4b12      	ldr	r3, [pc, #72]	@ (800c5b0 <_vfiprintf_r+0x228>)
 800c566:	a904      	add	r1, sp, #16
 800c568:	4630      	mov	r0, r6
 800c56a:	f7fc fccb 	bl	8008f04 <_printf_float>
 800c56e:	4607      	mov	r7, r0
 800c570:	1c78      	adds	r0, r7, #1
 800c572:	d1d6      	bne.n	800c522 <_vfiprintf_r+0x19a>
 800c574:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c576:	07d9      	lsls	r1, r3, #31
 800c578:	d405      	bmi.n	800c586 <_vfiprintf_r+0x1fe>
 800c57a:	89ab      	ldrh	r3, [r5, #12]
 800c57c:	059a      	lsls	r2, r3, #22
 800c57e:	d402      	bmi.n	800c586 <_vfiprintf_r+0x1fe>
 800c580:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c582:	f7fd fc3b 	bl	8009dfc <__retarget_lock_release_recursive>
 800c586:	89ab      	ldrh	r3, [r5, #12]
 800c588:	065b      	lsls	r3, r3, #25
 800c58a:	f53f af1f 	bmi.w	800c3cc <_vfiprintf_r+0x44>
 800c58e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c590:	e71e      	b.n	800c3d0 <_vfiprintf_r+0x48>
 800c592:	ab03      	add	r3, sp, #12
 800c594:	9300      	str	r3, [sp, #0]
 800c596:	462a      	mov	r2, r5
 800c598:	4b05      	ldr	r3, [pc, #20]	@ (800c5b0 <_vfiprintf_r+0x228>)
 800c59a:	a904      	add	r1, sp, #16
 800c59c:	4630      	mov	r0, r6
 800c59e:	f7fc ff49 	bl	8009434 <_printf_i>
 800c5a2:	e7e4      	b.n	800c56e <_vfiprintf_r+0x1e6>
 800c5a4:	0800cd9d 	.word	0x0800cd9d
 800c5a8:	0800cda7 	.word	0x0800cda7
 800c5ac:	08008f05 	.word	0x08008f05
 800c5b0:	0800c365 	.word	0x0800c365
 800c5b4:	0800cda3 	.word	0x0800cda3

0800c5b8 <__swbuf_r>:
 800c5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ba:	460e      	mov	r6, r1
 800c5bc:	4614      	mov	r4, r2
 800c5be:	4605      	mov	r5, r0
 800c5c0:	b118      	cbz	r0, 800c5ca <__swbuf_r+0x12>
 800c5c2:	6a03      	ldr	r3, [r0, #32]
 800c5c4:	b90b      	cbnz	r3, 800c5ca <__swbuf_r+0x12>
 800c5c6:	f7fd faed 	bl	8009ba4 <__sinit>
 800c5ca:	69a3      	ldr	r3, [r4, #24]
 800c5cc:	60a3      	str	r3, [r4, #8]
 800c5ce:	89a3      	ldrh	r3, [r4, #12]
 800c5d0:	071a      	lsls	r2, r3, #28
 800c5d2:	d501      	bpl.n	800c5d8 <__swbuf_r+0x20>
 800c5d4:	6923      	ldr	r3, [r4, #16]
 800c5d6:	b943      	cbnz	r3, 800c5ea <__swbuf_r+0x32>
 800c5d8:	4621      	mov	r1, r4
 800c5da:	4628      	mov	r0, r5
 800c5dc:	f000 f82a 	bl	800c634 <__swsetup_r>
 800c5e0:	b118      	cbz	r0, 800c5ea <__swbuf_r+0x32>
 800c5e2:	f04f 37ff 	mov.w	r7, #4294967295
 800c5e6:	4638      	mov	r0, r7
 800c5e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5ea:	6823      	ldr	r3, [r4, #0]
 800c5ec:	6922      	ldr	r2, [r4, #16]
 800c5ee:	1a98      	subs	r0, r3, r2
 800c5f0:	6963      	ldr	r3, [r4, #20]
 800c5f2:	b2f6      	uxtb	r6, r6
 800c5f4:	4283      	cmp	r3, r0
 800c5f6:	4637      	mov	r7, r6
 800c5f8:	dc05      	bgt.n	800c606 <__swbuf_r+0x4e>
 800c5fa:	4621      	mov	r1, r4
 800c5fc:	4628      	mov	r0, r5
 800c5fe:	f7ff fded 	bl	800c1dc <_fflush_r>
 800c602:	2800      	cmp	r0, #0
 800c604:	d1ed      	bne.n	800c5e2 <__swbuf_r+0x2a>
 800c606:	68a3      	ldr	r3, [r4, #8]
 800c608:	3b01      	subs	r3, #1
 800c60a:	60a3      	str	r3, [r4, #8]
 800c60c:	6823      	ldr	r3, [r4, #0]
 800c60e:	1c5a      	adds	r2, r3, #1
 800c610:	6022      	str	r2, [r4, #0]
 800c612:	701e      	strb	r6, [r3, #0]
 800c614:	6962      	ldr	r2, [r4, #20]
 800c616:	1c43      	adds	r3, r0, #1
 800c618:	429a      	cmp	r2, r3
 800c61a:	d004      	beq.n	800c626 <__swbuf_r+0x6e>
 800c61c:	89a3      	ldrh	r3, [r4, #12]
 800c61e:	07db      	lsls	r3, r3, #31
 800c620:	d5e1      	bpl.n	800c5e6 <__swbuf_r+0x2e>
 800c622:	2e0a      	cmp	r6, #10
 800c624:	d1df      	bne.n	800c5e6 <__swbuf_r+0x2e>
 800c626:	4621      	mov	r1, r4
 800c628:	4628      	mov	r0, r5
 800c62a:	f7ff fdd7 	bl	800c1dc <_fflush_r>
 800c62e:	2800      	cmp	r0, #0
 800c630:	d0d9      	beq.n	800c5e6 <__swbuf_r+0x2e>
 800c632:	e7d6      	b.n	800c5e2 <__swbuf_r+0x2a>

0800c634 <__swsetup_r>:
 800c634:	b538      	push	{r3, r4, r5, lr}
 800c636:	4b29      	ldr	r3, [pc, #164]	@ (800c6dc <__swsetup_r+0xa8>)
 800c638:	4605      	mov	r5, r0
 800c63a:	6818      	ldr	r0, [r3, #0]
 800c63c:	460c      	mov	r4, r1
 800c63e:	b118      	cbz	r0, 800c648 <__swsetup_r+0x14>
 800c640:	6a03      	ldr	r3, [r0, #32]
 800c642:	b90b      	cbnz	r3, 800c648 <__swsetup_r+0x14>
 800c644:	f7fd faae 	bl	8009ba4 <__sinit>
 800c648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c64c:	0719      	lsls	r1, r3, #28
 800c64e:	d422      	bmi.n	800c696 <__swsetup_r+0x62>
 800c650:	06da      	lsls	r2, r3, #27
 800c652:	d407      	bmi.n	800c664 <__swsetup_r+0x30>
 800c654:	2209      	movs	r2, #9
 800c656:	602a      	str	r2, [r5, #0]
 800c658:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c65c:	81a3      	strh	r3, [r4, #12]
 800c65e:	f04f 30ff 	mov.w	r0, #4294967295
 800c662:	e033      	b.n	800c6cc <__swsetup_r+0x98>
 800c664:	0758      	lsls	r0, r3, #29
 800c666:	d512      	bpl.n	800c68e <__swsetup_r+0x5a>
 800c668:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c66a:	b141      	cbz	r1, 800c67e <__swsetup_r+0x4a>
 800c66c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c670:	4299      	cmp	r1, r3
 800c672:	d002      	beq.n	800c67a <__swsetup_r+0x46>
 800c674:	4628      	mov	r0, r5
 800c676:	f7fe fa57 	bl	800ab28 <_free_r>
 800c67a:	2300      	movs	r3, #0
 800c67c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c67e:	89a3      	ldrh	r3, [r4, #12]
 800c680:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c684:	81a3      	strh	r3, [r4, #12]
 800c686:	2300      	movs	r3, #0
 800c688:	6063      	str	r3, [r4, #4]
 800c68a:	6923      	ldr	r3, [r4, #16]
 800c68c:	6023      	str	r3, [r4, #0]
 800c68e:	89a3      	ldrh	r3, [r4, #12]
 800c690:	f043 0308 	orr.w	r3, r3, #8
 800c694:	81a3      	strh	r3, [r4, #12]
 800c696:	6923      	ldr	r3, [r4, #16]
 800c698:	b94b      	cbnz	r3, 800c6ae <__swsetup_r+0x7a>
 800c69a:	89a3      	ldrh	r3, [r4, #12]
 800c69c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c6a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c6a4:	d003      	beq.n	800c6ae <__swsetup_r+0x7a>
 800c6a6:	4621      	mov	r1, r4
 800c6a8:	4628      	mov	r0, r5
 800c6aa:	f000 f88b 	bl	800c7c4 <__smakebuf_r>
 800c6ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6b2:	f013 0201 	ands.w	r2, r3, #1
 800c6b6:	d00a      	beq.n	800c6ce <__swsetup_r+0x9a>
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	60a2      	str	r2, [r4, #8]
 800c6bc:	6962      	ldr	r2, [r4, #20]
 800c6be:	4252      	negs	r2, r2
 800c6c0:	61a2      	str	r2, [r4, #24]
 800c6c2:	6922      	ldr	r2, [r4, #16]
 800c6c4:	b942      	cbnz	r2, 800c6d8 <__swsetup_r+0xa4>
 800c6c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c6ca:	d1c5      	bne.n	800c658 <__swsetup_r+0x24>
 800c6cc:	bd38      	pop	{r3, r4, r5, pc}
 800c6ce:	0799      	lsls	r1, r3, #30
 800c6d0:	bf58      	it	pl
 800c6d2:	6962      	ldrpl	r2, [r4, #20]
 800c6d4:	60a2      	str	r2, [r4, #8]
 800c6d6:	e7f4      	b.n	800c6c2 <__swsetup_r+0x8e>
 800c6d8:	2000      	movs	r0, #0
 800c6da:	e7f7      	b.n	800c6cc <__swsetup_r+0x98>
 800c6dc:	20000208 	.word	0x20000208

0800c6e0 <_raise_r>:
 800c6e0:	291f      	cmp	r1, #31
 800c6e2:	b538      	push	{r3, r4, r5, lr}
 800c6e4:	4605      	mov	r5, r0
 800c6e6:	460c      	mov	r4, r1
 800c6e8:	d904      	bls.n	800c6f4 <_raise_r+0x14>
 800c6ea:	2316      	movs	r3, #22
 800c6ec:	6003      	str	r3, [r0, #0]
 800c6ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c6f2:	bd38      	pop	{r3, r4, r5, pc}
 800c6f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c6f6:	b112      	cbz	r2, 800c6fe <_raise_r+0x1e>
 800c6f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c6fc:	b94b      	cbnz	r3, 800c712 <_raise_r+0x32>
 800c6fe:	4628      	mov	r0, r5
 800c700:	f000 f830 	bl	800c764 <_getpid_r>
 800c704:	4622      	mov	r2, r4
 800c706:	4601      	mov	r1, r0
 800c708:	4628      	mov	r0, r5
 800c70a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c70e:	f000 b817 	b.w	800c740 <_kill_r>
 800c712:	2b01      	cmp	r3, #1
 800c714:	d00a      	beq.n	800c72c <_raise_r+0x4c>
 800c716:	1c59      	adds	r1, r3, #1
 800c718:	d103      	bne.n	800c722 <_raise_r+0x42>
 800c71a:	2316      	movs	r3, #22
 800c71c:	6003      	str	r3, [r0, #0]
 800c71e:	2001      	movs	r0, #1
 800c720:	e7e7      	b.n	800c6f2 <_raise_r+0x12>
 800c722:	2100      	movs	r1, #0
 800c724:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c728:	4620      	mov	r0, r4
 800c72a:	4798      	blx	r3
 800c72c:	2000      	movs	r0, #0
 800c72e:	e7e0      	b.n	800c6f2 <_raise_r+0x12>

0800c730 <raise>:
 800c730:	4b02      	ldr	r3, [pc, #8]	@ (800c73c <raise+0xc>)
 800c732:	4601      	mov	r1, r0
 800c734:	6818      	ldr	r0, [r3, #0]
 800c736:	f7ff bfd3 	b.w	800c6e0 <_raise_r>
 800c73a:	bf00      	nop
 800c73c:	20000208 	.word	0x20000208

0800c740 <_kill_r>:
 800c740:	b538      	push	{r3, r4, r5, lr}
 800c742:	4d07      	ldr	r5, [pc, #28]	@ (800c760 <_kill_r+0x20>)
 800c744:	2300      	movs	r3, #0
 800c746:	4604      	mov	r4, r0
 800c748:	4608      	mov	r0, r1
 800c74a:	4611      	mov	r1, r2
 800c74c:	602b      	str	r3, [r5, #0]
 800c74e:	f7f6 fbeb 	bl	8002f28 <_kill>
 800c752:	1c43      	adds	r3, r0, #1
 800c754:	d102      	bne.n	800c75c <_kill_r+0x1c>
 800c756:	682b      	ldr	r3, [r5, #0]
 800c758:	b103      	cbz	r3, 800c75c <_kill_r+0x1c>
 800c75a:	6023      	str	r3, [r4, #0]
 800c75c:	bd38      	pop	{r3, r4, r5, pc}
 800c75e:	bf00      	nop
 800c760:	200008c4 	.word	0x200008c4

0800c764 <_getpid_r>:
 800c764:	f7f6 bbd8 	b.w	8002f18 <_getpid>

0800c768 <_malloc_usable_size_r>:
 800c768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c76c:	1f18      	subs	r0, r3, #4
 800c76e:	2b00      	cmp	r3, #0
 800c770:	bfbc      	itt	lt
 800c772:	580b      	ldrlt	r3, [r1, r0]
 800c774:	18c0      	addlt	r0, r0, r3
 800c776:	4770      	bx	lr

0800c778 <__swhatbuf_r>:
 800c778:	b570      	push	{r4, r5, r6, lr}
 800c77a:	460c      	mov	r4, r1
 800c77c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c780:	2900      	cmp	r1, #0
 800c782:	b096      	sub	sp, #88	@ 0x58
 800c784:	4615      	mov	r5, r2
 800c786:	461e      	mov	r6, r3
 800c788:	da0d      	bge.n	800c7a6 <__swhatbuf_r+0x2e>
 800c78a:	89a3      	ldrh	r3, [r4, #12]
 800c78c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c790:	f04f 0100 	mov.w	r1, #0
 800c794:	bf14      	ite	ne
 800c796:	2340      	movne	r3, #64	@ 0x40
 800c798:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c79c:	2000      	movs	r0, #0
 800c79e:	6031      	str	r1, [r6, #0]
 800c7a0:	602b      	str	r3, [r5, #0]
 800c7a2:	b016      	add	sp, #88	@ 0x58
 800c7a4:	bd70      	pop	{r4, r5, r6, pc}
 800c7a6:	466a      	mov	r2, sp
 800c7a8:	f000 f848 	bl	800c83c <_fstat_r>
 800c7ac:	2800      	cmp	r0, #0
 800c7ae:	dbec      	blt.n	800c78a <__swhatbuf_r+0x12>
 800c7b0:	9901      	ldr	r1, [sp, #4]
 800c7b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c7b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c7ba:	4259      	negs	r1, r3
 800c7bc:	4159      	adcs	r1, r3
 800c7be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c7c2:	e7eb      	b.n	800c79c <__swhatbuf_r+0x24>

0800c7c4 <__smakebuf_r>:
 800c7c4:	898b      	ldrh	r3, [r1, #12]
 800c7c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c7c8:	079d      	lsls	r5, r3, #30
 800c7ca:	4606      	mov	r6, r0
 800c7cc:	460c      	mov	r4, r1
 800c7ce:	d507      	bpl.n	800c7e0 <__smakebuf_r+0x1c>
 800c7d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c7d4:	6023      	str	r3, [r4, #0]
 800c7d6:	6123      	str	r3, [r4, #16]
 800c7d8:	2301      	movs	r3, #1
 800c7da:	6163      	str	r3, [r4, #20]
 800c7dc:	b003      	add	sp, #12
 800c7de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7e0:	ab01      	add	r3, sp, #4
 800c7e2:	466a      	mov	r2, sp
 800c7e4:	f7ff ffc8 	bl	800c778 <__swhatbuf_r>
 800c7e8:	9f00      	ldr	r7, [sp, #0]
 800c7ea:	4605      	mov	r5, r0
 800c7ec:	4639      	mov	r1, r7
 800c7ee:	4630      	mov	r0, r6
 800c7f0:	f7fe fd48 	bl	800b284 <_malloc_r>
 800c7f4:	b948      	cbnz	r0, 800c80a <__smakebuf_r+0x46>
 800c7f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7fa:	059a      	lsls	r2, r3, #22
 800c7fc:	d4ee      	bmi.n	800c7dc <__smakebuf_r+0x18>
 800c7fe:	f023 0303 	bic.w	r3, r3, #3
 800c802:	f043 0302 	orr.w	r3, r3, #2
 800c806:	81a3      	strh	r3, [r4, #12]
 800c808:	e7e2      	b.n	800c7d0 <__smakebuf_r+0xc>
 800c80a:	89a3      	ldrh	r3, [r4, #12]
 800c80c:	6020      	str	r0, [r4, #0]
 800c80e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c812:	81a3      	strh	r3, [r4, #12]
 800c814:	9b01      	ldr	r3, [sp, #4]
 800c816:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c81a:	b15b      	cbz	r3, 800c834 <__smakebuf_r+0x70>
 800c81c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c820:	4630      	mov	r0, r6
 800c822:	f000 f81d 	bl	800c860 <_isatty_r>
 800c826:	b128      	cbz	r0, 800c834 <__smakebuf_r+0x70>
 800c828:	89a3      	ldrh	r3, [r4, #12]
 800c82a:	f023 0303 	bic.w	r3, r3, #3
 800c82e:	f043 0301 	orr.w	r3, r3, #1
 800c832:	81a3      	strh	r3, [r4, #12]
 800c834:	89a3      	ldrh	r3, [r4, #12]
 800c836:	431d      	orrs	r5, r3
 800c838:	81a5      	strh	r5, [r4, #12]
 800c83a:	e7cf      	b.n	800c7dc <__smakebuf_r+0x18>

0800c83c <_fstat_r>:
 800c83c:	b538      	push	{r3, r4, r5, lr}
 800c83e:	4d07      	ldr	r5, [pc, #28]	@ (800c85c <_fstat_r+0x20>)
 800c840:	2300      	movs	r3, #0
 800c842:	4604      	mov	r4, r0
 800c844:	4608      	mov	r0, r1
 800c846:	4611      	mov	r1, r2
 800c848:	602b      	str	r3, [r5, #0]
 800c84a:	f7f6 fbcd 	bl	8002fe8 <_fstat>
 800c84e:	1c43      	adds	r3, r0, #1
 800c850:	d102      	bne.n	800c858 <_fstat_r+0x1c>
 800c852:	682b      	ldr	r3, [r5, #0]
 800c854:	b103      	cbz	r3, 800c858 <_fstat_r+0x1c>
 800c856:	6023      	str	r3, [r4, #0]
 800c858:	bd38      	pop	{r3, r4, r5, pc}
 800c85a:	bf00      	nop
 800c85c:	200008c4 	.word	0x200008c4

0800c860 <_isatty_r>:
 800c860:	b538      	push	{r3, r4, r5, lr}
 800c862:	4d06      	ldr	r5, [pc, #24]	@ (800c87c <_isatty_r+0x1c>)
 800c864:	2300      	movs	r3, #0
 800c866:	4604      	mov	r4, r0
 800c868:	4608      	mov	r0, r1
 800c86a:	602b      	str	r3, [r5, #0]
 800c86c:	f7f6 fbcc 	bl	8003008 <_isatty>
 800c870:	1c43      	adds	r3, r0, #1
 800c872:	d102      	bne.n	800c87a <_isatty_r+0x1a>
 800c874:	682b      	ldr	r3, [r5, #0]
 800c876:	b103      	cbz	r3, 800c87a <_isatty_r+0x1a>
 800c878:	6023      	str	r3, [r4, #0]
 800c87a:	bd38      	pop	{r3, r4, r5, pc}
 800c87c:	200008c4 	.word	0x200008c4

0800c880 <fmod>:
 800c880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c882:	ed2d 8b02 	vpush	{d8}
 800c886:	ec57 6b10 	vmov	r6, r7, d0
 800c88a:	ec55 4b11 	vmov	r4, r5, d1
 800c88e:	f000 f86b 	bl	800c968 <__ieee754_fmod>
 800c892:	4622      	mov	r2, r4
 800c894:	462b      	mov	r3, r5
 800c896:	4630      	mov	r0, r6
 800c898:	4639      	mov	r1, r7
 800c89a:	eeb0 8a40 	vmov.f32	s16, s0
 800c89e:	eef0 8a60 	vmov.f32	s17, s1
 800c8a2:	f7f4 f94b 	bl	8000b3c <__aeabi_dcmpun>
 800c8a6:	b990      	cbnz	r0, 800c8ce <fmod+0x4e>
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	4620      	mov	r0, r4
 800c8ae:	4629      	mov	r1, r5
 800c8b0:	f7f4 f912 	bl	8000ad8 <__aeabi_dcmpeq>
 800c8b4:	b158      	cbz	r0, 800c8ce <fmod+0x4e>
 800c8b6:	f7fd fa75 	bl	8009da4 <__errno>
 800c8ba:	2321      	movs	r3, #33	@ 0x21
 800c8bc:	6003      	str	r3, [r0, #0]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	4610      	mov	r0, r2
 800c8c4:	4619      	mov	r1, r3
 800c8c6:	f7f3 ffc9 	bl	800085c <__aeabi_ddiv>
 800c8ca:	ec41 0b18 	vmov	d8, r0, r1
 800c8ce:	eeb0 0a48 	vmov.f32	s0, s16
 800c8d2:	eef0 0a68 	vmov.f32	s1, s17
 800c8d6:	ecbd 8b02 	vpop	{d8}
 800c8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c8dc <round>:
 800c8dc:	ec51 0b10 	vmov	r0, r1, d0
 800c8e0:	b570      	push	{r4, r5, r6, lr}
 800c8e2:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800c8e6:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800c8ea:	2a13      	cmp	r2, #19
 800c8ec:	460b      	mov	r3, r1
 800c8ee:	4605      	mov	r5, r0
 800c8f0:	dc1b      	bgt.n	800c92a <round+0x4e>
 800c8f2:	2a00      	cmp	r2, #0
 800c8f4:	da0b      	bge.n	800c90e <round+0x32>
 800c8f6:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800c8fa:	3201      	adds	r2, #1
 800c8fc:	bf04      	itt	eq
 800c8fe:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800c902:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800c906:	2200      	movs	r2, #0
 800c908:	4619      	mov	r1, r3
 800c90a:	4610      	mov	r0, r2
 800c90c:	e015      	b.n	800c93a <round+0x5e>
 800c90e:	4c15      	ldr	r4, [pc, #84]	@ (800c964 <round+0x88>)
 800c910:	4114      	asrs	r4, r2
 800c912:	ea04 0601 	and.w	r6, r4, r1
 800c916:	4306      	orrs	r6, r0
 800c918:	d00f      	beq.n	800c93a <round+0x5e>
 800c91a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800c91e:	fa41 f202 	asr.w	r2, r1, r2
 800c922:	4413      	add	r3, r2
 800c924:	ea23 0304 	bic.w	r3, r3, r4
 800c928:	e7ed      	b.n	800c906 <round+0x2a>
 800c92a:	2a33      	cmp	r2, #51	@ 0x33
 800c92c:	dd08      	ble.n	800c940 <round+0x64>
 800c92e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800c932:	d102      	bne.n	800c93a <round+0x5e>
 800c934:	4602      	mov	r2, r0
 800c936:	f7f3 fcb1 	bl	800029c <__adddf3>
 800c93a:	ec41 0b10 	vmov	d0, r0, r1
 800c93e:	bd70      	pop	{r4, r5, r6, pc}
 800c940:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800c944:	f04f 34ff 	mov.w	r4, #4294967295
 800c948:	40f4      	lsrs	r4, r6
 800c94a:	4204      	tst	r4, r0
 800c94c:	d0f5      	beq.n	800c93a <round+0x5e>
 800c94e:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800c952:	2201      	movs	r2, #1
 800c954:	408a      	lsls	r2, r1
 800c956:	1952      	adds	r2, r2, r5
 800c958:	bf28      	it	cs
 800c95a:	3301      	addcs	r3, #1
 800c95c:	ea22 0204 	bic.w	r2, r2, r4
 800c960:	e7d2      	b.n	800c908 <round+0x2c>
 800c962:	bf00      	nop
 800c964:	000fffff 	.word	0x000fffff

0800c968 <__ieee754_fmod>:
 800c968:	ec53 2b11 	vmov	r2, r3, d1
 800c96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c970:	f023 4800 	bic.w	r8, r3, #2147483648	@ 0x80000000
 800c974:	ea52 0408 	orrs.w	r4, r2, r8
 800c978:	ec51 0b10 	vmov	r0, r1, d0
 800c97c:	461e      	mov	r6, r3
 800c97e:	4696      	mov	lr, r2
 800c980:	4694      	mov	ip, r2
 800c982:	d00c      	beq.n	800c99e <__ieee754_fmod+0x36>
 800c984:	4d76      	ldr	r5, [pc, #472]	@ (800cb60 <__ieee754_fmod+0x1f8>)
 800c986:	f021 4900 	bic.w	r9, r1, #2147483648	@ 0x80000000
 800c98a:	45a9      	cmp	r9, r5
 800c98c:	460c      	mov	r4, r1
 800c98e:	d806      	bhi.n	800c99e <__ieee754_fmod+0x36>
 800c990:	4255      	negs	r5, r2
 800c992:	4f74      	ldr	r7, [pc, #464]	@ (800cb64 <__ieee754_fmod+0x1fc>)
 800c994:	4315      	orrs	r5, r2
 800c996:	ea48 75d5 	orr.w	r5, r8, r5, lsr #31
 800c99a:	42bd      	cmp	r5, r7
 800c99c:	d909      	bls.n	800c9b2 <__ieee754_fmod+0x4a>
 800c99e:	f7f3 fe33 	bl	8000608 <__aeabi_dmul>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	460b      	mov	r3, r1
 800c9a6:	f7f3 ff59 	bl	800085c <__aeabi_ddiv>
 800c9aa:	ec41 0b10 	vmov	d0, r0, r1
 800c9ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9b2:	45c1      	cmp	r9, r8
 800c9b4:	4682      	mov	sl, r0
 800c9b6:	4607      	mov	r7, r0
 800c9b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800c9bc:	dc09      	bgt.n	800c9d2 <__ieee754_fmod+0x6a>
 800c9be:	dbf4      	blt.n	800c9aa <__ieee754_fmod+0x42>
 800c9c0:	4282      	cmp	r2, r0
 800c9c2:	d8f2      	bhi.n	800c9aa <__ieee754_fmod+0x42>
 800c9c4:	d105      	bne.n	800c9d2 <__ieee754_fmod+0x6a>
 800c9c6:	4b68      	ldr	r3, [pc, #416]	@ (800cb68 <__ieee754_fmod+0x200>)
 800c9c8:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800c9cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c9d0:	e7eb      	b.n	800c9aa <__ieee754_fmod+0x42>
 800c9d2:	4964      	ldr	r1, [pc, #400]	@ (800cb64 <__ieee754_fmod+0x1fc>)
 800c9d4:	420c      	tst	r4, r1
 800c9d6:	d148      	bne.n	800ca6a <__ieee754_fmod+0x102>
 800c9d8:	f1b9 0f00 	cmp.w	r9, #0
 800c9dc:	d13d      	bne.n	800ca5a <__ieee754_fmod+0xf2>
 800c9de:	4a63      	ldr	r2, [pc, #396]	@ (800cb6c <__ieee754_fmod+0x204>)
 800c9e0:	4653      	mov	r3, sl
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	dc36      	bgt.n	800ca54 <__ieee754_fmod+0xec>
 800c9e6:	420e      	tst	r6, r1
 800c9e8:	d14f      	bne.n	800ca8a <__ieee754_fmod+0x122>
 800c9ea:	f1b8 0f00 	cmp.w	r8, #0
 800c9ee:	d144      	bne.n	800ca7a <__ieee754_fmod+0x112>
 800c9f0:	4b5e      	ldr	r3, [pc, #376]	@ (800cb6c <__ieee754_fmod+0x204>)
 800c9f2:	4671      	mov	r1, lr
 800c9f4:	2900      	cmp	r1, #0
 800c9f6:	dc3d      	bgt.n	800ca74 <__ieee754_fmod+0x10c>
 800c9f8:	485d      	ldr	r0, [pc, #372]	@ (800cb70 <__ieee754_fmod+0x208>)
 800c9fa:	4282      	cmp	r2, r0
 800c9fc:	db4a      	blt.n	800ca94 <__ieee754_fmod+0x12c>
 800c9fe:	f3c4 0113 	ubfx	r1, r4, #0, #20
 800ca02:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800ca06:	485a      	ldr	r0, [pc, #360]	@ (800cb70 <__ieee754_fmod+0x208>)
 800ca08:	4283      	cmp	r3, r0
 800ca0a:	db57      	blt.n	800cabc <__ieee754_fmod+0x154>
 800ca0c:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800ca10:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800ca14:	1ad0      	subs	r0, r2, r3
 800ca16:	1b8a      	subs	r2, r1, r6
 800ca18:	eba7 040c 	sub.w	r4, r7, ip
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	d162      	bne.n	800cae6 <__ieee754_fmod+0x17e>
 800ca20:	4567      	cmp	r7, ip
 800ca22:	bf38      	it	cc
 800ca24:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800ca28:	2a00      	cmp	r2, #0
 800ca2a:	bfbc      	itt	lt
 800ca2c:	463c      	movlt	r4, r7
 800ca2e:	460a      	movlt	r2, r1
 800ca30:	ea52 0104 	orrs.w	r1, r2, r4
 800ca34:	d0c7      	beq.n	800c9c6 <__ieee754_fmod+0x5e>
 800ca36:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 800ca3a:	db69      	blt.n	800cb10 <__ieee754_fmod+0x1a8>
 800ca3c:	494c      	ldr	r1, [pc, #304]	@ (800cb70 <__ieee754_fmod+0x208>)
 800ca3e:	428b      	cmp	r3, r1
 800ca40:	db6c      	blt.n	800cb1c <__ieee754_fmod+0x1b4>
 800ca42:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 800ca46:	432a      	orrs	r2, r5
 800ca48:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800ca4c:	ea42 5103 	orr.w	r1, r2, r3, lsl #20
 800ca50:	4620      	mov	r0, r4
 800ca52:	e7aa      	b.n	800c9aa <__ieee754_fmod+0x42>
 800ca54:	3a01      	subs	r2, #1
 800ca56:	005b      	lsls	r3, r3, #1
 800ca58:	e7c3      	b.n	800c9e2 <__ieee754_fmod+0x7a>
 800ca5a:	4a45      	ldr	r2, [pc, #276]	@ (800cb70 <__ieee754_fmod+0x208>)
 800ca5c:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	ddc0      	ble.n	800c9e6 <__ieee754_fmod+0x7e>
 800ca64:	3a01      	subs	r2, #1
 800ca66:	005b      	lsls	r3, r3, #1
 800ca68:	e7fa      	b.n	800ca60 <__ieee754_fmod+0xf8>
 800ca6a:	ea4f 5229 	mov.w	r2, r9, asr #20
 800ca6e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800ca72:	e7b8      	b.n	800c9e6 <__ieee754_fmod+0x7e>
 800ca74:	3b01      	subs	r3, #1
 800ca76:	0049      	lsls	r1, r1, #1
 800ca78:	e7bc      	b.n	800c9f4 <__ieee754_fmod+0x8c>
 800ca7a:	4b3d      	ldr	r3, [pc, #244]	@ (800cb70 <__ieee754_fmod+0x208>)
 800ca7c:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 800ca80:	2900      	cmp	r1, #0
 800ca82:	ddb9      	ble.n	800c9f8 <__ieee754_fmod+0x90>
 800ca84:	3b01      	subs	r3, #1
 800ca86:	0049      	lsls	r1, r1, #1
 800ca88:	e7fa      	b.n	800ca80 <__ieee754_fmod+0x118>
 800ca8a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ca8e:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ca92:	e7b1      	b.n	800c9f8 <__ieee754_fmod+0x90>
 800ca94:	1a80      	subs	r0, r0, r2
 800ca96:	281f      	cmp	r0, #31
 800ca98:	dc0a      	bgt.n	800cab0 <__ieee754_fmod+0x148>
 800ca9a:	f202 411e 	addw	r1, r2, #1054	@ 0x41e
 800ca9e:	fa09 f900 	lsl.w	r9, r9, r0
 800caa2:	fa2a f101 	lsr.w	r1, sl, r1
 800caa6:	ea41 0109 	orr.w	r1, r1, r9
 800caaa:	fa0a f700 	lsl.w	r7, sl, r0
 800caae:	e7aa      	b.n	800ca06 <__ieee754_fmod+0x9e>
 800cab0:	4930      	ldr	r1, [pc, #192]	@ (800cb74 <__ieee754_fmod+0x20c>)
 800cab2:	1a89      	subs	r1, r1, r2
 800cab4:	fa0a f101 	lsl.w	r1, sl, r1
 800cab8:	2700      	movs	r7, #0
 800caba:	e7a4      	b.n	800ca06 <__ieee754_fmod+0x9e>
 800cabc:	1ac0      	subs	r0, r0, r3
 800cabe:	281f      	cmp	r0, #31
 800cac0:	dc0a      	bgt.n	800cad8 <__ieee754_fmod+0x170>
 800cac2:	f203 461e 	addw	r6, r3, #1054	@ 0x41e
 800cac6:	fa08 f800 	lsl.w	r8, r8, r0
 800caca:	fa2e f606 	lsr.w	r6, lr, r6
 800cace:	ea46 0608 	orr.w	r6, r6, r8
 800cad2:	fa0e fc00 	lsl.w	ip, lr, r0
 800cad6:	e79d      	b.n	800ca14 <__ieee754_fmod+0xac>
 800cad8:	4e26      	ldr	r6, [pc, #152]	@ (800cb74 <__ieee754_fmod+0x20c>)
 800cada:	1af6      	subs	r6, r6, r3
 800cadc:	fa0e f606 	lsl.w	r6, lr, r6
 800cae0:	f04f 0c00 	mov.w	ip, #0
 800cae4:	e796      	b.n	800ca14 <__ieee754_fmod+0xac>
 800cae6:	4567      	cmp	r7, ip
 800cae8:	bf38      	it	cc
 800caea:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800caee:	2a00      	cmp	r2, #0
 800caf0:	da05      	bge.n	800cafe <__ieee754_fmod+0x196>
 800caf2:	0ffa      	lsrs	r2, r7, #31
 800caf4:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800caf8:	007f      	lsls	r7, r7, #1
 800cafa:	3801      	subs	r0, #1
 800cafc:	e78b      	b.n	800ca16 <__ieee754_fmod+0xae>
 800cafe:	ea52 0104 	orrs.w	r1, r2, r4
 800cb02:	f43f af60 	beq.w	800c9c6 <__ieee754_fmod+0x5e>
 800cb06:	0fe1      	lsrs	r1, r4, #31
 800cb08:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800cb0c:	0067      	lsls	r7, r4, #1
 800cb0e:	e7f4      	b.n	800cafa <__ieee754_fmod+0x192>
 800cb10:	0fe1      	lsrs	r1, r4, #31
 800cb12:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800cb16:	0064      	lsls	r4, r4, #1
 800cb18:	3b01      	subs	r3, #1
 800cb1a:	e78c      	b.n	800ca36 <__ieee754_fmod+0xce>
 800cb1c:	1ac9      	subs	r1, r1, r3
 800cb1e:	2914      	cmp	r1, #20
 800cb20:	dc0a      	bgt.n	800cb38 <__ieee754_fmod+0x1d0>
 800cb22:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 800cb26:	fa02 f303 	lsl.w	r3, r2, r3
 800cb2a:	40cc      	lsrs	r4, r1
 800cb2c:	4323      	orrs	r3, r4
 800cb2e:	410a      	asrs	r2, r1
 800cb30:	ea42 0105 	orr.w	r1, r2, r5
 800cb34:	4618      	mov	r0, r3
 800cb36:	e738      	b.n	800c9aa <__ieee754_fmod+0x42>
 800cb38:	291f      	cmp	r1, #31
 800cb3a:	dc07      	bgt.n	800cb4c <__ieee754_fmod+0x1e4>
 800cb3c:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 800cb40:	40cc      	lsrs	r4, r1
 800cb42:	fa02 f303 	lsl.w	r3, r2, r3
 800cb46:	4323      	orrs	r3, r4
 800cb48:	462a      	mov	r2, r5
 800cb4a:	e7f1      	b.n	800cb30 <__ieee754_fmod+0x1c8>
 800cb4c:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 800cb50:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 800cb54:	f503 437b 	add.w	r3, r3, #64256	@ 0xfb00
 800cb58:	33e2      	adds	r3, #226	@ 0xe2
 800cb5a:	fa42 f303 	asr.w	r3, r2, r3
 800cb5e:	e7f3      	b.n	800cb48 <__ieee754_fmod+0x1e0>
 800cb60:	7fefffff 	.word	0x7fefffff
 800cb64:	7ff00000 	.word	0x7ff00000
 800cb68:	0800d008 	.word	0x0800d008
 800cb6c:	fffffbed 	.word	0xfffffbed
 800cb70:	fffffc02 	.word	0xfffffc02
 800cb74:	fffffbe2 	.word	0xfffffbe2

0800cb78 <_init>:
 800cb78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb7a:	bf00      	nop
 800cb7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb7e:	bc08      	pop	{r3}
 800cb80:	469e      	mov	lr, r3
 800cb82:	4770      	bx	lr

0800cb84 <_fini>:
 800cb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb86:	bf00      	nop
 800cb88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb8a:	bc08      	pop	{r3}
 800cb8c:	469e      	mov	lr, r3
 800cb8e:	4770      	bx	lr
