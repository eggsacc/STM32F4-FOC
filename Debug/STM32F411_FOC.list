
STM32F411_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc68  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  0800be08  0800be08  0000ce08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c2e8  0800c2e8  0000e258  2**0
                  CONTENTS
  4 .ARM          00000008  0800c2e8  0800c2e8  0000d2e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2f0  0800c2f0  0000e258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c2f0  0800c2f0  0000d2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c2f4  0800c2f4  0000d2f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000258  20000000  0800c2f8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000434  20000258  0800c550  0000e258  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000068c  0800c550  0000e68c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e258  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144a9  00000000  00000000  0000e288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e82  00000000  00000000  00022731  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b0  00000000  00000000  000255b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dd5  00000000  00000000  00026768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000182ba  00000000  00000000  0002753d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016de2  00000000  00000000  0003f7f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093927  00000000  00000000  000565d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9f00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061c4  00000000  00000000  000e9f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f0108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000258 	.word	0x20000258
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bdf0 	.word	0x0800bdf0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000025c 	.word	0x2000025c
 80001dc:	0800bdf0 	.word	0x0800bdf0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <AS5600_ReadRegister>:

/*
 * Static low level functions to read/write to registers
 */
static HAL_StatusTypeDef AS5600_ReadRegister(AS5600 *dev, uint8_t reg, uint8_t *data)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af04      	add	r7, sp, #16
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	607a      	str	r2, [r7, #4]
 8001000:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(dev->i2cHandle, AS5600_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6818      	ldr	r0, [r3, #0]
 8001006:	7afb      	ldrb	r3, [r7, #11]
 8001008:	b29a      	uxth	r2, r3
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	9302      	str	r3, [sp, #8]
 8001010:	2301      	movs	r3, #1
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2301      	movs	r3, #1
 800101a:	216c      	movs	r1, #108	@ 0x6c
 800101c:	f002 fc22 	bl	8003864 <HAL_I2C_Mem_Read>
 8001020:	4603      	mov	r3, r0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <AS5600_ReadRegisters>:

static HAL_StatusTypeDef AS5600_ReadRegisters(AS5600 *dev, uint8_t reg, uint8_t *data, uint8_t length)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b088      	sub	sp, #32
 800102e:	af04      	add	r7, sp, #16
 8001030:	60f8      	str	r0, [r7, #12]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	461a      	mov	r2, r3
 8001036:	460b      	mov	r3, r1
 8001038:	72fb      	strb	r3, [r7, #11]
 800103a:	4613      	mov	r3, r2
 800103c:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(dev->i2cHandle, AS5600_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6818      	ldr	r0, [r3, #0]
 8001042:	7afb      	ldrb	r3, [r7, #11]
 8001044:	b29a      	uxth	r2, r3
 8001046:	7abb      	ldrb	r3, [r7, #10]
 8001048:	b29b      	uxth	r3, r3
 800104a:	f04f 31ff 	mov.w	r1, #4294967295
 800104e:	9102      	str	r1, [sp, #8]
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2301      	movs	r3, #1
 8001058:	216c      	movs	r1, #108	@ 0x6c
 800105a:	f002 fc03 	bl	8003864 <HAL_I2C_Mem_Read>
 800105e:	4603      	mov	r3, r0
}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <AS5600_ZeroAngle>:
/*
 * @brief Zeroes the sensor value.
 * @param[in] AS5600* sensor
 */
void AS5600_ZeroAngle(AS5600* dev)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	dev->total_angle_rad = 0;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
	dev->prev_raw_angle = AS5600_ReadRawAngle(dev);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f000 f879 	bl	8001170 <AS5600_ReadRawAngle>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	809a      	strh	r2, [r3, #4]
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <AS5600_Init>:
/*
 * Initialization
 * Pass the struct to each function as pointer
 */
uint8_t AS5600_Init(AS5600* dev, I2C_HandleTypeDef* i2c_handle, uint8_t zero)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	4613      	mov	r3, r2
 800109c:	71fb      	strb	r3, [r7, #7]
	/* Set struct params */
	dev->i2cHandle = i2c_handle;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	601a      	str	r2, [r3, #0]
	dev->total_angle_rad = 0;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f04f 0200 	mov.w	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
	dev->prev_time_us = 0;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]

	uint8_t err_num = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	77fb      	strb	r3, [r7, #31]

	/*
	 * Check magnet strength
	 */
	HAL_StatusTypeDef magnet_status;
	uint8_t regdata = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	767b      	strb	r3, [r7, #25]

	magnet_status = AS5600_ReadRegister(dev, MAGNET_STATUS_REG, &regdata);
 80010ba:	f107 0319 	add.w	r3, r7, #25
 80010be:	461a      	mov	r2, r3
 80010c0:	210b      	movs	r1, #11
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f7ff ff96 	bl	8000ff4 <AS5600_ReadRegister>
 80010c8:	4603      	mov	r3, r0
 80010ca:	77bb      	strb	r3, [r7, #30]
	err_num += (magnet_status != HAL_OK);
 80010cc:	7fbb      	ldrb	r3, [r7, #30]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	bf14      	ite	ne
 80010d2:	2301      	movne	r3, #1
 80010d4:	2300      	moveq	r3, #0
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	461a      	mov	r2, r3
 80010da:	7ffb      	ldrb	r3, [r7, #31]
 80010dc:	4413      	add	r3, r2
 80010de:	77fb      	strb	r3, [r7, #31]

	/* bit[5] indicates magnet present if set */
	if(!(regdata & (1 << 5))){
 80010e0:	7e7b      	ldrb	r3, [r7, #25]
 80010e2:	f003 0320 	and.w	r3, r3, #32
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <AS5600_Init+0x5e>

		return 255;
 80010ea:	23ff      	movs	r3, #255	@ 0xff
 80010ec:	e038      	b.n	8001160 <AS5600_Init+0xd0>
	}

	/* initialize starting angle */
	uint8_t regdata_angle[2] = {0, 0};
 80010ee:	2300      	movs	r3, #0
 80010f0:	82bb      	strh	r3, [r7, #20]
	HAL_StatusTypeDef status = AS5600_ReadRegisters(dev, RAW_ANGLE_MSB_REG, regdata_angle, 2);
 80010f2:	f107 0214 	add.w	r2, r7, #20
 80010f6:	2302      	movs	r3, #2
 80010f8:	210c      	movs	r1, #12
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f7ff ff95 	bl	800102a <AS5600_ReadRegisters>
 8001100:	4603      	mov	r3, r0
 8001102:	777b      	strb	r3, [r7, #29]

	/* Mask & shift 4 MSB left by 8 and concatenate with 8 LSBs */
	uint16_t raw_angle = (((regdata_angle[0] & 0x0F) << 8) | regdata_angle[1]);
 8001104:	7d3b      	ldrb	r3, [r7, #20]
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	b21b      	sxth	r3, r3
 800110a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800110e:	b21a      	sxth	r2, r3
 8001110:	7d7b      	ldrb	r3, [r7, #21]
 8001112:	b21b      	sxth	r3, r3
 8001114:	4313      	orrs	r3, r2
 8001116:	b21b      	sxth	r3, r3
 8001118:	837b      	strh	r3, [r7, #26]

	err_num += (status != HAL_OK);
 800111a:	7f7b      	ldrb	r3, [r7, #29]
 800111c:	2b00      	cmp	r3, #0
 800111e:	bf14      	ite	ne
 8001120:	2301      	movne	r3, #1
 8001122:	2300      	moveq	r3, #0
 8001124:	b2db      	uxtb	r3, r3
 8001126:	461a      	mov	r2, r3
 8001128:	7ffb      	ldrb	r3, [r7, #31]
 800112a:	4413      	add	r3, r2
 800112c:	77fb      	strb	r3, [r7, #31]

	dev->prev_raw_angle = raw_angle;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	8b7a      	ldrh	r2, [r7, #26]
 8001132:	809a      	strh	r2, [r3, #4]

	if(!zero)
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d111      	bne.n	800115e <AS5600_Init+0xce>
	{
		dev->total_angle_rad = raw_angle * BIT_TO_RAD;
 800113a:	8b7b      	ldrh	r3, [r7, #26]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff f9f9 	bl	8000534 <__aeabi_i2d>
 8001142:	a309      	add	r3, pc, #36	@ (adr r3, 8001168 <AS5600_Init+0xd8>)
 8001144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001148:	f7ff fa5e 	bl	8000608 <__aeabi_dmul>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4610      	mov	r0, r2
 8001152:	4619      	mov	r1, r3
 8001154:	f7ff fd50 	bl	8000bf8 <__aeabi_d2f>
 8001158:	4602      	mov	r2, r0
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	609a      	str	r2, [r3, #8]
	}

	return err_num;
 800115e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3720      	adds	r7, #32
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	8b5cd7aa 	.word	0x8b5cd7aa
 800116c:	3f59238d 	.word	0x3f59238d

08001170 <AS5600_ReadRawAngle>:

	return dev->total_angle_rad;
}

uint16_t AS5600_ReadRawAngle(AS5600 *dev)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	uint8_t regdata[2] = {0, 0};
 8001178:	2300      	movs	r3, #0
 800117a:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef status = AS5600_ReadRegisters(dev, RAW_ANGLE_MSB_REG, regdata, 2);
 800117c:	f107 0208 	add.w	r2, r7, #8
 8001180:	2302      	movs	r3, #2
 8001182:	210c      	movs	r1, #12
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff50 	bl	800102a <AS5600_ReadRegisters>
 800118a:	4603      	mov	r3, r0
 800118c:	73fb      	strb	r3, [r7, #15]

	/* Return early if register read fails */
	if(status != HAL_OK)
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <AS5600_ReadRawAngle+0x28>
	{
		return 0;;
 8001194:	2300      	movs	r3, #0
 8001196:	e00b      	b.n	80011b0 <AS5600_ReadRawAngle+0x40>
	}

	/* Mask & shift 4 MSB left by 8 and concatenate with 8 LSBs */
	uint16_t raw_angle = (((regdata[0] & 0x0F) << 8) | regdata[1]);
 8001198:	7a3b      	ldrb	r3, [r7, #8]
 800119a:	021b      	lsls	r3, r3, #8
 800119c:	b21b      	sxth	r3, r3
 800119e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	7a7b      	ldrb	r3, [r7, #9]
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	81bb      	strh	r3, [r7, #12]
	return raw_angle;
 80011ae:	89bb      	ldrh	r3, [r7, #12]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <_cos>:
/*
 * @brief Cosine approximation
 * @param[in] angle(radians)
 * @return cos(angle)
 */
__STATIC_INLINE float _cos(float angle) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	ed87 0a01 	vstr	s0, [r7, #4]
  float _angle = angle + _PI_2;
 80011c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80011c6:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001210 <_cos+0x58>
 80011ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011ce:	edc7 7a03 	vstr	s15, [r7, #12]
  _angle = _angle > _2PI ? _angle - _2PI : _angle;
 80011d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80011d6:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001214 <_cos+0x5c>
 80011da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e2:	dd06      	ble.n	80011f2 <_cos+0x3a>
 80011e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80011e8:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001214 <_cos+0x5c>
 80011ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80011f0:	e001      	b.n	80011f6 <_cos+0x3e>
 80011f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80011f6:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(_angle);
 80011fa:	ed97 0a03 	vldr	s0, [r7, #12]
 80011fe:	f000 fafb 	bl	80017f8 <_sin>
 8001202:	eef0 7a40 	vmov.f32	s15, s0
}
 8001206:	eeb0 0a67 	vmov.f32	s0, s15
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	3fc90fdb 	.word	0x3fc90fdb
 8001214:	40c90fdb 	.word	0x40c90fdb

08001218 <_normalizeAngle>:
/*
 * @brief Normalize angle to [0, 2pi]
 * @param[in] angle(radians)
 * @return normalized_angle
 */
__STATIC_INLINE float _normalizeAngle(float angle){
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);       // fmod(x,y) returns remainder of x/y
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff f998 	bl	8000558 <__aeabi_f2d>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 8001278 <_normalizeAngle+0x60>
 8001230:	ec43 2b10 	vmov	d0, r2, r3
 8001234:	f00a fca4 	bl	800bb80 <fmod>
 8001238:	ec53 2b10 	vmov	r2, r3, d0
 800123c:	4610      	mov	r0, r2
 800123e:	4619      	mov	r1, r3
 8001240:	f7ff fcda 	bl	8000bf8 <__aeabi_d2f>
 8001244:	4603      	mov	r3, r0
 8001246:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + _2PI);    // add 2pi to negative angles to make positive
 8001248:	edd7 7a03 	vldr	s15, [r7, #12]
 800124c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001254:	db02      	blt.n	800125c <_normalizeAngle+0x44>
 8001256:	edd7 7a03 	vldr	s15, [r7, #12]
 800125a:	e005      	b.n	8001268 <_normalizeAngle+0x50>
 800125c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001260:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001280 <_normalizeAngle+0x68>
 8001264:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001268:	eeb0 0a67 	vmov.f32	s0, s15
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	f3af 8000 	nop.w
 8001278:	60000000 	.word	0x60000000
 800127c:	401921fb 	.word	0x401921fb
 8001280:	40c90fdb 	.word	0x40c90fdb

08001284 <_electricalAngle>:
 * @brief Calculates electrical angle from rotor angle
 * @param[in] shaft_angle(radians)
 * @param[in] pole_pairs
 * @return electrical angle
 */
__STATIC_INLINE float _electricalAngle(float shaft_angle, uint8_t pole_pairs){
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	ed87 0a01 	vstr	s0, [r7, #4]
 800128e:	4603      	mov	r3, r0
 8001290:	70fb      	strb	r3, [r7, #3]
  return (shaft_angle * pole_pairs);
 8001292:	78fb      	ldrb	r3, [r7, #3]
 8001294:	ee07 3a90 	vmov	s15, r3
 8001298:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800129c:	edd7 7a01 	vldr	s15, [r7, #4]
 80012a0:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80012a4:	eeb0 0a67 	vmov.f32	s0, s15
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <PWM_Start_3_Channel>:
/*
 * @brief Starts PWM channels 1, 2, 3 of specified timer.
 * @param[in] TIM_HandleTypeDef timer
 */
void PWM_Start_3_Channel(TIM_HandleTypeDef* timer)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(timer, TIM_CHANNEL_1);
 80012ba:	2100      	movs	r1, #0
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f003 fd6f 	bl	8004da0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer, TIM_CHANNEL_2);
 80012c2:	2104      	movs	r1, #4
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f003 fd6b 	bl	8004da0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer, TIM_CHANNEL_3);
 80012ca:	2108      	movs	r1, #8
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f003 fd67 	bl	8004da0 <HAL_TIM_PWM_Start>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <SetPWM>:
 * @scope static
 * @brief Set pwm duty cycle of timer channels
 * @param[in] BLDCMotor* motor
 */
__STATIC_INLINE void SetPWM(BLDCMotor* motor)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	uint16_t ARR = motor->timer->Instance->ARR;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	69db      	ldr	r3, [r3, #28]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ec:	81fb      	strh	r3, [r7, #14]
	motor->timer->Instance->CCR1 = _constrain(motor->pv->Ua / motor->supply_voltage, 0.0f, 1.0f) * ARR;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	edd3 6a00 	vldr	s13, [r3]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	ed93 7a02 	vldr	s14, [r3, #8]
 80012fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001300:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001308:	d502      	bpl.n	8001310 <SetPWM+0x34>
 800130a:	eddf 7a56 	vldr	s15, [pc, #344]	@ 8001464 <SetPWM+0x188>
 800130e:	e01b      	b.n	8001348 <SetPWM+0x6c>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	edd3 6a00 	vldr	s13, [r3]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	ed93 7a02 	vldr	s14, [r3, #8]
 800131e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001322:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001326:	eef4 7ac7 	vcmpe.f32	s15, s14
 800132a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132e:	dd02      	ble.n	8001336 <SetPWM+0x5a>
 8001330:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001334:	e008      	b.n	8001348 <SetPWM+0x6c>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	edd3 6a00 	vldr	s13, [r3]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	ed93 7a02 	vldr	s14, [r3, #8]
 8001344:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001348:	89fb      	ldrh	r3, [r7, #14]
 800134a:	ee07 3a10 	vmov	s14, r3
 800134e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001352:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69db      	ldr	r3, [r3, #28]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001360:	ee17 2a90 	vmov	r2, s15
 8001364:	635a      	str	r2, [r3, #52]	@ 0x34
	motor->timer->Instance->CCR2 = _constrain(motor->pv->Ub / motor->supply_voltage, 0.0f, 1.0f) * ARR;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	695b      	ldr	r3, [r3, #20]
 800136a:	edd3 6a01 	vldr	s13, [r3, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	ed93 7a02 	vldr	s14, [r3, #8]
 8001374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001378:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800137c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001380:	d502      	bpl.n	8001388 <SetPWM+0xac>
 8001382:	eddf 7a38 	vldr	s15, [pc, #224]	@ 8001464 <SetPWM+0x188>
 8001386:	e01b      	b.n	80013c0 <SetPWM+0xe4>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	695b      	ldr	r3, [r3, #20]
 800138c:	edd3 6a01 	vldr	s13, [r3, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	ed93 7a02 	vldr	s14, [r3, #8]
 8001396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800139a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800139e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a6:	dd02      	ble.n	80013ae <SetPWM+0xd2>
 80013a8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80013ac:	e008      	b.n	80013c0 <SetPWM+0xe4>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	edd3 6a01 	vldr	s13, [r3, #4]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	ed93 7a02 	vldr	s14, [r3, #8]
 80013bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013c0:	89fb      	ldrh	r3, [r7, #14]
 80013c2:	ee07 3a10 	vmov	s14, r3
 80013c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80013ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013d8:	ee17 2a90 	vmov	r2, s15
 80013dc:	639a      	str	r2, [r3, #56]	@ 0x38
	motor->timer->Instance->CCR3 = _constrain(motor->pv->Uc / motor->supply_voltage, 0.0f, 1.0f) * ARR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	edd3 6a02 	vldr	s13, [r3, #8]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	ed93 7a02 	vldr	s14, [r3, #8]
 80013ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f8:	d502      	bpl.n	8001400 <SetPWM+0x124>
 80013fa:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8001464 <SetPWM+0x188>
 80013fe:	e01b      	b.n	8001438 <SetPWM+0x15c>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	695b      	ldr	r3, [r3, #20]
 8001404:	edd3 6a02 	vldr	s13, [r3, #8]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	ed93 7a02 	vldr	s14, [r3, #8]
 800140e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001412:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800141a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800141e:	dd02      	ble.n	8001426 <SetPWM+0x14a>
 8001420:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8001424:	e008      	b.n	8001438 <SetPWM+0x15c>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	edd3 6a02 	vldr	s13, [r3, #8]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	ed93 7a02 	vldr	s14, [r3, #8]
 8001434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001438:	89fb      	ldrh	r3, [r7, #14]
 800143a:	ee07 3a10 	vmov	s14, r3
 800143e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001442:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69db      	ldr	r3, [r3, #28]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001450:	ee17 2a90 	vmov	r2, s15
 8001454:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001456:	bf00      	nop
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	00000000 	.word	0x00000000

08001468 <Var_t_Init>:
 * @scope Static
 * @brief Initializers for motor sub-structs
 * @retval Struct_t struct
 */
static Var_t Var_t_Init()
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	Var_t vars = {
 8001470:	f04f 0300 	mov.w	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
		.shaft_angle = 0,
		.prev_us = 0
	};

	return vars;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	461a      	mov	r2, r3
 800147e:	f107 0308 	add.w	r3, r7, #8
 8001482:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001486:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <DQ_t_Init>:

static DQ_t DQ_t_Init()
{
 8001496:	b480      	push	{r7}
 8001498:	b087      	sub	sp, #28
 800149a:	af00      	add	r7, sp, #0
	DQ_t dq = {
 800149c:	f04f 0300 	mov.w	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	f04f 0300 	mov.w	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
		.Ud = 0,
		.Uq = 0
	};

	return dq;
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	f107 0208 	add.w	r2, r7, #8
 80014b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	ee07 2a10 	vmov	s14, r2
 80014c0:	ee07 3a90 	vmov	s15, r3
}
 80014c4:	eeb0 0a47 	vmov.f32	s0, s14
 80014c8:	eef0 0a67 	vmov.f32	s1, s15
 80014cc:	371c      	adds	r7, #28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <PV_t_Init>:

static PV_t PV_t_Init()
{
 80014d6:	b480      	push	{r7}
 80014d8:	b08b      	sub	sp, #44	@ 0x2c
 80014da:	af00      	add	r7, sp, #0
	PV_t pv = {
 80014dc:	f04f 0300 	mov.w	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	f04f 0300 	mov.w	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
		.Ua = 0,
		.Ub = 0,
		.Uc = 0
	};

	return pv;
 80014ee:	f107 031c 	add.w	r3, r7, #28
 80014f2:	f107 0210 	add.w	r2, r7, #16
 80014f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80014f8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80014fc:	69f9      	ldr	r1, [r7, #28]
 80014fe:	6a3a      	ldr	r2, [r7, #32]
 8001500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001502:	ee06 1a90 	vmov	s13, r1
 8001506:	ee07 2a10 	vmov	s14, r2
 800150a:	ee07 3a90 	vmov	s15, r3
}
 800150e:	eeb0 0a66 	vmov.f32	s0, s13
 8001512:	eef0 0a47 	vmov.f32	s1, s14
 8001516:	eeb0 1a67 	vmov.f32	s2, s15
 800151a:	372c      	adds	r7, #44	@ 0x2c
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <BLDCMotor_Init>:
 * - Voltage limit is 3V by default.
 *
 * @retval BLDCMotor motor
 */
void BLDCMotor_Init(BLDCMotor* motor, Var_t* var, DQ_t* dq, PV_t* pv, PID_t* pid, LPF_t* lpf, TIM_HandleTypeDef* timer, uint8_t pole_pairs)
{
 8001524:	b5b0      	push	{r4, r5, r7, lr}
 8001526:	b090      	sub	sp, #64	@ 0x40
 8001528:	af00      	add	r7, sp, #0
 800152a:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800152c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800152e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001530:	633b      	str	r3, [r7, #48]	@ 0x30
	/* De-reference & initialize sub-structs */
	*var = Var_t_Init();
 8001532:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8001534:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff95 	bl	8001468 <Var_t_Init>
 800153e:	4622      	mov	r2, r4
 8001540:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001544:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001548:	e882 0003 	stmia.w	r2, {r0, r1}
	*dq = DQ_t_Init();
 800154c:	f7ff ffa3 	bl	8001496 <DQ_t_Init>
 8001550:	eeb0 7a40 	vmov.f32	s14, s0
 8001554:	eef0 7a60 	vmov.f32	s15, s1
 8001558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800155a:	ed83 7a00 	vstr	s14, [r3]
 800155e:	edc3 7a01 	vstr	s15, [r3, #4]
	*pv = PV_t_Init();
 8001562:	f7ff ffb8 	bl	80014d6 <PV_t_Init>
 8001566:	eef0 6a40 	vmov.f32	s13, s0
 800156a:	eeb0 7a60 	vmov.f32	s14, s1
 800156e:	eef0 7a41 	vmov.f32	s15, s2
 8001572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001574:	edc3 6a00 	vstr	s13, [r3]
 8001578:	ed83 7a01 	vstr	s14, [r3, #4]
 800157c:	edc3 7a02 	vstr	s15, [r3, #8]
	*pid = PID_Init();
 8001580:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 8001582:	463b      	mov	r3, r7
 8001584:	4618      	mov	r0, r3
 8001586:	f000 fc99 	bl	8001ebc <PID_Init>
 800158a:	4625      	mov	r5, r4
 800158c:	463c      	mov	r4, r7
 800158e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001590:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001592:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001594:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001596:	e894 0003 	ldmia.w	r4, {r0, r1}
 800159a:	e885 0003 	stmia.w	r5, {r0, r1}
	*lpf = LPF_Init();
 800159e:	6d7c      	ldr	r4, [r7, #84]	@ 0x54
 80015a0:	463b      	mov	r3, r7
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 f9a8 	bl	80018f8 <LPF_Init>
 80015a8:	463b      	mov	r3, r7
 80015aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80015ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	/* BLDCMotor struct initialization */
	motor->vars = var;
 80015b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80015b6:	60da      	str	r2, [r3, #12]
	motor->dq = dq;
 80015b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80015bc:	611a      	str	r2, [r3, #16]
	motor->pv = pv;
 80015be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80015c2:	615a      	str	r2, [r3, #20]
	motor->sensor = NULL;
 80015c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015c6:	2200      	movs	r2, #0
 80015c8:	619a      	str	r2, [r3, #24]
	motor->timer = timer;
 80015ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80015ce:	61da      	str	r2, [r3, #28]
	motor->pid = pid;
 80015d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80015d4:	621a      	str	r2, [r3, #32]
	motor->lpf = lpf;
 80015d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015d8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80015da:	625a      	str	r2, [r3, #36]	@ 0x24
	motor->sensor_dir = 1;
 80015dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015de:	2201      	movs	r2, #1
 80015e0:	701a      	strb	r2, [r3, #0]
	motor->pole_pairs = pole_pairs;
 80015e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015e4:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 80015e8:	705a      	strb	r2, [r3, #1]
	motor->supply_voltage = 12;
 80015ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015ec:	4a04      	ldr	r2, [pc, #16]	@ (8001600 <BLDCMotor_Init+0xdc>)
 80015ee:	609a      	str	r2, [r3, #8]
	motor->voltage_limit = 3;
 80015f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015f2:	4a04      	ldr	r2, [pc, #16]	@ (8001604 <BLDCMotor_Init+0xe0>)
 80015f4:	605a      	str	r2, [r3, #4]
}
 80015f6:	bf00      	nop
 80015f8:	3740      	adds	r7, #64	@ 0x40
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bdb0      	pop	{r4, r5, r7, pc}
 80015fe:	bf00      	nop
 8001600:	41400000 	.word	0x41400000
 8001604:	40400000 	.word	0x40400000

08001608 <SetTorque>:
/*
 * @brief Inverse Clarke & Park transformations to calculate phase voltages
 * @param[in] BLDCMotor* motor
 * @note Calls setpwm()
 */
void SetTorque(BLDCMotor* motor) {
 8001608:	b580      	push	{r7, lr}
 800160a:	ed2d 8b02 	vpush	{d8}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	/* Constrain Uq to within voltage range */
	motor->dq->Uq = _constrain(motor->dq->Uq, -motor->voltage_limit, motor->voltage_limit);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	ed93 7a00 	vldr	s14, [r3]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001622:	eef1 7a67 	vneg.f32	s15, s15
 8001626:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800162a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800162e:	d505      	bpl.n	800163c <SetTorque+0x34>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	edd3 7a01 	vldr	s15, [r3, #4]
 8001636:	eef1 7a67 	vneg.f32	s15, s15
 800163a:	e013      	b.n	8001664 <SetTorque+0x5c>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	691b      	ldr	r3, [r3, #16]
 8001640:	ed93 7a00 	vldr	s14, [r3]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	edd3 7a01 	vldr	s15, [r3, #4]
 800164a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800164e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001652:	dd03      	ble.n	800165c <SetTorque+0x54>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	edd3 7a01 	vldr	s15, [r3, #4]
 800165a:	e003      	b.n	8001664 <SetTorque+0x5c>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	edd3 7a00 	vldr	s15, [r3]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	edc3 7a00 	vstr	s15, [r3]
    /* Normalize electric angle */
    float el_angle = _normalizeAngle(_electricalAngle(motor->vars->shaft_angle, motor->pole_pairs));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	edd3 7a00 	vldr	s15, [r3]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	785b      	ldrb	r3, [r3, #1]
 8001678:	4618      	mov	r0, r3
 800167a:	eeb0 0a67 	vmov.f32	s0, s15
 800167e:	f7ff fe01 	bl	8001284 <_electricalAngle>
 8001682:	eef0 7a40 	vmov.f32	s15, s0
 8001686:	eeb0 0a67 	vmov.f32	s0, s15
 800168a:	f7ff fdc5 	bl	8001218 <_normalizeAngle>
 800168e:	ed87 0a05 	vstr	s0, [r7, #20]

	/* Inverse park transform */
	float Ualpha = -(motor->dq->Uq) * _sin(el_angle);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	edd3 7a00 	vldr	s15, [r3]
 800169a:	eeb1 8a67 	vneg.f32	s16, s15
 800169e:	ed97 0a05 	vldr	s0, [r7, #20]
 80016a2:	f000 f8a9 	bl	80017f8 <_sin>
 80016a6:	eef0 7a40 	vmov.f32	s15, s0
 80016aa:	ee68 7a27 	vmul.f32	s15, s16, s15
 80016ae:	edc7 7a04 	vstr	s15, [r7, #16]
	float Ubeta = motor->dq->Uq * _cos(el_angle);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	ed93 8a00 	vldr	s16, [r3]
 80016ba:	ed97 0a05 	vldr	s0, [r7, #20]
 80016be:	f7ff fd7b 	bl	80011b8 <_cos>
 80016c2:	eef0 7a40 	vmov.f32	s15, s0
 80016c6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80016ca:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Inverse Clarke transform */
	motor->pv->Ua = Ualpha + motor->supply_voltage / 2.0f;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	edd3 7a02 	vldr	s15, [r3, #8]
 80016d4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80016d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80016e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e8:	edc3 7a00 	vstr	s15, [r3]
	motor->pv->Ub = (_SQRT3 * Ubeta - Ualpha) / 2.0f + motor->supply_voltage / 2.0f;
 80016ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80016f0:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001770 <SetTorque+0x168>
 80016f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80016fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001700:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001704:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	edd3 6a02 	vldr	s13, [r3, #8]
 800170e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001712:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800171e:	edc3 7a01 	vstr	s15, [r3, #4]
	motor->pv->Uc = (- Ualpha - _SQRT3 * Ubeta) / 2.0f + motor->supply_voltage / 2.0f;
 8001722:	edd7 7a04 	vldr	s15, [r7, #16]
 8001726:	eeb1 7a67 	vneg.f32	s14, s15
 800172a:	edd7 7a03 	vldr	s15, [r7, #12]
 800172e:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8001770 <SetTorque+0x168>
 8001732:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001736:	ee77 7a67 	vsub.f32	s15, s14, s15
 800173a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800173e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	edd3 6a02 	vldr	s13, [r3, #8]
 8001748:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800174c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	695b      	ldr	r3, [r3, #20]
 8001754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001758:	edc3 7a02 	vstr	s15, [r3, #8]

	SetPWM(motor);
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff fdbd 	bl	80012dc <SetPWM>
}
 8001762:	bf00      	nop
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	ecbd 8b02 	vpop	{d8}
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	3fddb3d7 	.word	0x3fddb3d7

08001774 <LinkSensor>:
 * @param[in] BLDCMotor* motor
 * @param[in] AS5600* sensor
 * @param[in] I2C_HandleTypeDef *i2c_handle
 */
void LinkSensor(BLDCMotor* motor, AS5600* sensor, I2C_HandleTypeDef *i2c_handle)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
	uint8_t init_stat = AS5600_Init(sensor, i2c_handle, 1);
 8001780:	2201      	movs	r2, #1
 8001782:	6879      	ldr	r1, [r7, #4]
 8001784:	68b8      	ldr	r0, [r7, #8]
 8001786:	f7ff fc83 	bl	8001090 <AS5600_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	75fb      	strb	r3, [r7, #23]

	/* Check if sensor link successful */
	if(init_stat != 0)
 800178e:	7dfb      	ldrb	r3, [r7, #23]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d003      	beq.n	800179c <LinkSensor+0x28>
	{
		motor->sensor = NULL;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2200      	movs	r2, #0
 8001798:	619a      	str	r2, [r3, #24]
		return;
 800179a:	e028      	b.n	80017ee <LinkSensor+0x7a>
	}

	motor->sensor = sensor;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	619a      	str	r2, [r3, #24]

	motor->dq->Uq = motor->voltage_limit / 2;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	ed93 7a01 	vldr	s14, [r3, #4]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80017b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017b4:	edc3 7a00 	vstr	s15, [r3]
	motor->vars->shaft_angle = _PI_2;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	4a0d      	ldr	r2, [pc, #52]	@ (80017f4 <LinkSensor+0x80>)
 80017be:	601a      	str	r2, [r3, #0]
	SetTorque(motor);
 80017c0:	68f8      	ldr	r0, [r7, #12]
 80017c2:	f7ff ff21 	bl	8001608 <SetTorque>
	HAL_Delay(1500);
 80017c6:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80017ca:	f001 f861 	bl	8002890 <HAL_Delay>
	AS5600_ZeroAngle(sensor);
 80017ce:	68b8      	ldr	r0, [r7, #8]
 80017d0:	f7ff fc4a 	bl	8001068 <AS5600_ZeroAngle>
	motor->dq->Uq = 0;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
	motor->vars->shaft_angle = 0;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
	SetTorque(motor);
 80017e8:	68f8      	ldr	r0, [r7, #12]
 80017ea:	f7ff ff0d 	bl	8001608 <SetTorque>
}
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	3fc90fdb 	.word	0x3fc90fdb

080017f8 <_sin>:
/*
 * @brief Sine approximation using look-up table
 * @param[in] angle(radians)
 * @return sin(angle)
 */
float _sin(float angle){
 80017f8:	b480      	push	{r7}
 80017fa:	b087      	sub	sp, #28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	ed87 0a01 	vstr	s0, [r7, #4]

  int32_t first, second;
  uint16_t index = (uint16_t)(angle / _2PI * 65536.0f);
 8001802:	ed97 7a01 	vldr	s14, [r7, #4]
 8001806:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80018e8 <_sin+0xf0>
 800180a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800180e:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80018ec <_sin+0xf4>
 8001812:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800181a:	ee17 3a90 	vmov	r3, s15
 800181e:	81fb      	strh	r3, [r7, #14]
  int frac = index & 0xff;
 8001820:	89fb      	ldrh	r3, [r7, #14]
 8001822:	b2db      	uxtb	r3, r3
 8001824:	60bb      	str	r3, [r7, #8]
  index = (index >> 8) & 0xff;
 8001826:	89fb      	ldrh	r3, [r7, #14]
 8001828:	0a1b      	lsrs	r3, r3, #8
 800182a:	81fb      	strh	r3, [r7, #14]

  if (index < 64){
 800182c:	89fb      	ldrh	r3, [r7, #14]
 800182e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001830:	d80b      	bhi.n	800184a <_sin+0x52>
    first = (int32_t)sineLUT[index];
 8001832:	89fb      	ldrh	r3, [r7, #14]
 8001834:	4a2e      	ldr	r2, [pc, #184]	@ (80018f0 <_sin+0xf8>)
 8001836:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800183a:	617b      	str	r3, [r7, #20]
    second = (int32_t)sineLUT[index + 1];
 800183c:	89fb      	ldrh	r3, [r7, #14]
 800183e:	3301      	adds	r3, #1
 8001840:	4a2b      	ldr	r2, [pc, #172]	@ (80018f0 <_sin+0xf8>)
 8001842:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	e033      	b.n	80018b2 <_sin+0xba>
  }
  else if (index < 128){
 800184a:	89fb      	ldrh	r3, [r7, #14]
 800184c:	2b7f      	cmp	r3, #127	@ 0x7f
 800184e:	d80e      	bhi.n	800186e <_sin+0x76>
    first = (int32_t)sineLUT[128 - index];
 8001850:	89fb      	ldrh	r3, [r7, #14]
 8001852:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001856:	4a26      	ldr	r2, [pc, #152]	@ (80018f0 <_sin+0xf8>)
 8001858:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800185c:	617b      	str	r3, [r7, #20]
    second = (int32_t)sineLUT[127 - index];
 800185e:	89fb      	ldrh	r3, [r7, #14]
 8001860:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8001864:	4a22      	ldr	r2, [pc, #136]	@ (80018f0 <_sin+0xf8>)
 8001866:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	e021      	b.n	80018b2 <_sin+0xba>
  }
  else if (index < 192){
 800186e:	89fb      	ldrh	r3, [r7, #14]
 8001870:	2bbf      	cmp	r3, #191	@ 0xbf
 8001872:	d80e      	bhi.n	8001892 <_sin+0x9a>
    first = -(int32_t)sineLUT[index - 128];
 8001874:	89fb      	ldrh	r3, [r7, #14]
 8001876:	3b80      	subs	r3, #128	@ 0x80
 8001878:	4a1d      	ldr	r2, [pc, #116]	@ (80018f0 <_sin+0xf8>)
 800187a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800187e:	425b      	negs	r3, r3
 8001880:	617b      	str	r3, [r7, #20]
    second = -(int32_t)sineLUT[index - 127];
 8001882:	89fb      	ldrh	r3, [r7, #14]
 8001884:	3b7f      	subs	r3, #127	@ 0x7f
 8001886:	4a1a      	ldr	r2, [pc, #104]	@ (80018f0 <_sin+0xf8>)
 8001888:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800188c:	425b      	negs	r3, r3
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	e00f      	b.n	80018b2 <_sin+0xba>
  }
  else {
    first = -(int32_t)sineLUT[256 - index];
 8001892:	89fb      	ldrh	r3, [r7, #14]
 8001894:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8001898:	4a15      	ldr	r2, [pc, #84]	@ (80018f0 <_sin+0xf8>)
 800189a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800189e:	425b      	negs	r3, r3
 80018a0:	617b      	str	r3, [r7, #20]
    second = -(int32_t)sineLUT[255 - index];
 80018a2:	89fb      	ldrh	r3, [r7, #14]
 80018a4:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80018a8:	4a11      	ldr	r2, [pc, #68]	@ (80018f0 <_sin+0xf8>)
 80018aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018ae:	425b      	negs	r3, r3
 80018b0:	613b      	str	r3, [r7, #16]
  }

  return (first + (((second - first) * frac) >> 8)) / 32768.0f;
 80018b2:	693a      	ldr	r2, [r7, #16]
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	68ba      	ldr	r2, [r7, #8]
 80018ba:	fb02 f303 	mul.w	r3, r2, r3
 80018be:	121a      	asrs	r2, r3, #8
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	4413      	add	r3, r2
 80018c4:	ee07 3a90 	vmov	s15, r3
 80018c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018cc:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80018f4 <_sin+0xfc>
 80018d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80018d4:	eef0 7a66 	vmov.f32	s15, s13
}
 80018d8:	eeb0 0a67 	vmov.f32	s0, s15
 80018dc:	371c      	adds	r7, #28
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40c90fdb 	.word	0x40c90fdb
 80018ec:	47800000 	.word	0x47800000
 80018f0:	20000000 	.word	0x20000000
 80018f4:	47000000 	.word	0x47000000

080018f8 <LPF_Init>:

/*
 * @brief LPF struct initialization function
 */
LPF_t LPF_Init()
{
 80018f8:	b490      	push	{r4, r7}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	LPF_t lpf_dev = {
 8001900:	4b09      	ldr	r3, [pc, #36]	@ (8001928 <LPF_Init+0x30>)
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	f04f 0300 	mov.w	r3, #0
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
			.prev_data = 0,
			.prev_us = 0,
			.time_const = 0.1
	};

	return lpf_dev;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	461c      	mov	r4, r3
 8001912:	f107 030c 	add.w	r3, r7, #12
 8001916:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800191a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	3718      	adds	r7, #24
 8001922:	46bd      	mov	sp, r7
 8001924:	bc90      	pop	{r4, r7}
 8001926:	4770      	bx	lr
 8001928:	3dcccccd 	.word	0x3dcccccd

0800192c <DWT_Init>:

/*
 * Timer utility functions to return number of microseconds since power up.
 */
__STATIC_INLINE void DWT_Init(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8001930:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <DWT_Init+0x28>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	4a07      	ldr	r2, [pc, #28]	@ (8001954 <DWT_Init+0x28>)
 8001936:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800193a:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 800193c:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <DWT_Init+0x2c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a05      	ldr	r2, [pc, #20]	@ (8001958 <DWT_Init+0x2c>)
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	6013      	str	r3, [r2, #0]
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000edf0 	.word	0xe000edf0
 8001958:	e0001000 	.word	0xe0001000

0800195c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800195c:	b590      	push	{r4, r7, lr}
 800195e:	b0a7      	sub	sp, #156	@ 0x9c
 8001960:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001962:	f000 ff53 	bl	800280c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001966:	f000 f83f 	bl	80019e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800196a:	f000 fa2f 	bl	8001dcc <MX_GPIO_Init>
  MX_DMA_Init();
 800196e:	f000 fa05 	bl	8001d7c <MX_DMA_Init>
  MX_I2C1_Init();
 8001972:	f000 f8a1 	bl	8001ab8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001976:	f000 f8fb 	bl	8001b70 <MX_TIM2_Init>
  MX_I2C2_Init();
 800197a:	f000 f8cb 	bl	8001b14 <MX_I2C2_Init>
  MX_TIM3_Init();
 800197e:	f000 f965 	bl	8001c4c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001982:	f000 f9d1 	bl	8001d28 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Start PWM channels */
  PWM_Start_3_Channel(&htim2);
 8001986:	4815      	ldr	r0, [pc, #84]	@ (80019dc <main+0x80>)
 8001988:	f7ff fc93 	bl	80012b2 <PWM_Start_3_Channel>

  DWT_Init();
 800198c:	f7ff ffce 	bl	800192c <DWT_Init>
  /* Create sensor & motor object */
  AS5600 s1;
  BLDCMotor m1;

  /* Init motor object */
  BLDC_Init(m1, htim2, 7);
 8001990:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8001994:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001998:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800199c:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80019a0:	2307      	movs	r3, #7
 80019a2:	9303      	str	r3, [sp, #12]
 80019a4:	4b0d      	ldr	r3, [pc, #52]	@ (80019dc <main+0x80>)
 80019a6:	9302      	str	r3, [sp, #8]
 80019a8:	463b      	mov	r3, r7
 80019aa:	9301      	str	r3, [sp, #4]
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	4623      	mov	r3, r4
 80019b4:	f7ff fdb6 	bl	8001524 <BLDCMotor_Init>

  /* Attach sensor to motor object & initialize */
  LinkSensor(&m1, &s1, &hi2c1);
 80019b8:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 80019bc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80019c0:	4a07      	ldr	r2, [pc, #28]	@ (80019e0 <main+0x84>)
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fed6 	bl	8001774 <LinkSensor>

  SerialCommander_Init(&m1, &huart1);
 80019c8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80019cc:	4905      	ldr	r1, [pc, #20]	@ (80019e4 <main+0x88>)
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 fa98 	bl	8001f04 <SerialCommander_Init>

    /* USER CODE BEGIN 3 */
	  //CLPositionControl(&m1, 2.0);
	  //OLVelocityControl(&m1, 10);
	  //CLVelocityControl(&m1, 6);
	  SerialCommander_EventUpdate();
 80019d4:	f000 fae6 	bl	8001fa4 <SerialCommander_EventUpdate>
 80019d8:	e7fc      	b.n	80019d4 <main+0x78>
 80019da:	bf00      	nop
 80019dc:	2000031c 	.word	0x2000031c
 80019e0:	20000274 	.word	0x20000274
 80019e4:	200003ac 	.word	0x200003ac

080019e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b094      	sub	sp, #80	@ 0x50
 80019ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ee:	f107 0320 	add.w	r3, r7, #32
 80019f2:	2230      	movs	r2, #48	@ 0x30
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f006 f8e9 	bl	8007bce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019fc:	f107 030c 	add.w	r3, r7, #12
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	4b27      	ldr	r3, [pc, #156]	@ (8001ab0 <SystemClock_Config+0xc8>)
 8001a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a14:	4a26      	ldr	r2, [pc, #152]	@ (8001ab0 <SystemClock_Config+0xc8>)
 8001a16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a1c:	4b24      	ldr	r3, [pc, #144]	@ (8001ab0 <SystemClock_Config+0xc8>)
 8001a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a28:	2300      	movs	r3, #0
 8001a2a:	607b      	str	r3, [r7, #4]
 8001a2c:	4b21      	ldr	r3, [pc, #132]	@ (8001ab4 <SystemClock_Config+0xcc>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a20      	ldr	r2, [pc, #128]	@ (8001ab4 <SystemClock_Config+0xcc>)
 8001a32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab4 <SystemClock_Config+0xcc>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001a40:	607b      	str	r3, [r7, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a44:	2301      	movs	r3, #1
 8001a46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a4c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001a58:	2319      	movs	r3, #25
 8001a5a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001a5c:	23c0      	movs	r3, #192	@ 0xc0
 8001a5e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a60:	2302      	movs	r3, #2
 8001a62:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a64:	2304      	movs	r3, #4
 8001a66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a68:	f107 0320 	add.w	r3, r7, #32
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f002 fc01 	bl	8004274 <HAL_RCC_OscConfig>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a78:	f000 fa1a 	bl	8001eb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a7c:	230f      	movs	r3, #15
 8001a7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a80:	2302      	movs	r3, #2
 8001a82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a92:	f107 030c 	add.w	r3, r7, #12
 8001a96:	2103      	movs	r1, #3
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f002 fe63 	bl	8004764 <HAL_RCC_ClockConfig>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d001      	beq.n	8001aa8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001aa4:	f000 fa04 	bl	8001eb0 <Error_Handler>
  }
}
 8001aa8:	bf00      	nop
 8001aaa:	3750      	adds	r7, #80	@ 0x50
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	40007000 	.word	0x40007000

08001ab8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001abc:	4b12      	ldr	r3, [pc, #72]	@ (8001b08 <MX_I2C1_Init+0x50>)
 8001abe:	4a13      	ldr	r2, [pc, #76]	@ (8001b0c <MX_I2C1_Init+0x54>)
 8001ac0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ac2:	4b11      	ldr	r3, [pc, #68]	@ (8001b08 <MX_I2C1_Init+0x50>)
 8001ac4:	4a12      	ldr	r2, [pc, #72]	@ (8001b10 <MX_I2C1_Init+0x58>)
 8001ac6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b08 <MX_I2C1_Init+0x50>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ace:	4b0e      	ldr	r3, [pc, #56]	@ (8001b08 <MX_I2C1_Init+0x50>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b08 <MX_I2C1_Init+0x50>)
 8001ad6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ada:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001adc:	4b0a      	ldr	r3, [pc, #40]	@ (8001b08 <MX_I2C1_Init+0x50>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ae2:	4b09      	ldr	r3, [pc, #36]	@ (8001b08 <MX_I2C1_Init+0x50>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ae8:	4b07      	ldr	r3, [pc, #28]	@ (8001b08 <MX_I2C1_Init+0x50>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aee:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <MX_I2C1_Init+0x50>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001af4:	4804      	ldr	r0, [pc, #16]	@ (8001b08 <MX_I2C1_Init+0x50>)
 8001af6:	f001 fd71 	bl	80035dc <HAL_I2C_Init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b00:	f000 f9d6 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000274 	.word	0x20000274
 8001b0c:	40005400 	.word	0x40005400
 8001b10:	000186a0 	.word	0x000186a0

08001b14 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b18:	4b12      	ldr	r3, [pc, #72]	@ (8001b64 <MX_I2C2_Init+0x50>)
 8001b1a:	4a13      	ldr	r2, [pc, #76]	@ (8001b68 <MX_I2C2_Init+0x54>)
 8001b1c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001b1e:	4b11      	ldr	r3, [pc, #68]	@ (8001b64 <MX_I2C2_Init+0x50>)
 8001b20:	4a12      	ldr	r2, [pc, #72]	@ (8001b6c <MX_I2C2_Init+0x58>)
 8001b22:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b24:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <MX_I2C2_Init+0x50>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <MX_I2C2_Init+0x50>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b30:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <MX_I2C2_Init+0x50>)
 8001b32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001b36:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b38:	4b0a      	ldr	r3, [pc, #40]	@ (8001b64 <MX_I2C2_Init+0x50>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001b3e:	4b09      	ldr	r3, [pc, #36]	@ (8001b64 <MX_I2C2_Init+0x50>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b44:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <MX_I2C2_Init+0x50>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b4a:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <MX_I2C2_Init+0x50>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b50:	4804      	ldr	r0, [pc, #16]	@ (8001b64 <MX_I2C2_Init+0x50>)
 8001b52:	f001 fd43 	bl	80035dc <HAL_I2C_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001b5c:	f000 f9a8 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	200002c8 	.word	0x200002c8
 8001b68:	40005800 	.word	0x40005800
 8001b6c:	000186a0 	.word	0x000186a0

08001b70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08a      	sub	sp, #40	@ 0x28
 8001b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b76:	f107 0320 	add.w	r3, r7, #32
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]
 8001b8a:	60da      	str	r2, [r3, #12]
 8001b8c:	611a      	str	r2, [r3, #16]
 8001b8e:	615a      	str	r2, [r3, #20]
 8001b90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b92:	4b2d      	ldr	r3, [pc, #180]	@ (8001c48 <MX_TIM2_Init+0xd8>)
 8001b94:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8001b9a:	4b2b      	ldr	r3, [pc, #172]	@ (8001c48 <MX_TIM2_Init+0xd8>)
 8001b9c:	220a      	movs	r2, #10
 8001b9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba0:	4b29      	ldr	r3, [pc, #164]	@ (8001c48 <MX_TIM2_Init+0xd8>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001ba6:	4b28      	ldr	r3, [pc, #160]	@ (8001c48 <MX_TIM2_Init+0xd8>)
 8001ba8:	22ff      	movs	r2, #255	@ 0xff
 8001baa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bac:	4b26      	ldr	r3, [pc, #152]	@ (8001c48 <MX_TIM2_Init+0xd8>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bb2:	4b25      	ldr	r3, [pc, #148]	@ (8001c48 <MX_TIM2_Init+0xd8>)
 8001bb4:	2280      	movs	r2, #128	@ 0x80
 8001bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001bb8:	4823      	ldr	r0, [pc, #140]	@ (8001c48 <MX_TIM2_Init+0xd8>)
 8001bba:	f003 f8a1 	bl	8004d00 <HAL_TIM_PWM_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001bc4:	f000 f974 	bl	8001eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bd0:	f107 0320 	add.w	r3, r7, #32
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	481c      	ldr	r0, [pc, #112]	@ (8001c48 <MX_TIM2_Init+0xd8>)
 8001bd8:	f003 fdaa 	bl	8005730 <HAL_TIMEx_MasterConfigSynchronization>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001be2:	f000 f965 	bl	8001eb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001be6:	2360      	movs	r3, #96	@ 0x60
 8001be8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bf6:	1d3b      	adds	r3, r7, #4
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4812      	ldr	r0, [pc, #72]	@ (8001c48 <MX_TIM2_Init+0xd8>)
 8001bfe:	f003 fa6f 	bl	80050e0 <HAL_TIM_PWM_ConfigChannel>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001c08:	f000 f952 	bl	8001eb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	2204      	movs	r2, #4
 8001c10:	4619      	mov	r1, r3
 8001c12:	480d      	ldr	r0, [pc, #52]	@ (8001c48 <MX_TIM2_Init+0xd8>)
 8001c14:	f003 fa64 	bl	80050e0 <HAL_TIM_PWM_ConfigChannel>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001c1e:	f000 f947 	bl	8001eb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	2208      	movs	r2, #8
 8001c26:	4619      	mov	r1, r3
 8001c28:	4807      	ldr	r0, [pc, #28]	@ (8001c48 <MX_TIM2_Init+0xd8>)
 8001c2a:	f003 fa59 	bl	80050e0 <HAL_TIM_PWM_ConfigChannel>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8001c34:	f000 f93c 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001c38:	4803      	ldr	r0, [pc, #12]	@ (8001c48 <MX_TIM2_Init+0xd8>)
 8001c3a:	f000 fae7 	bl	800220c <HAL_TIM_MspPostInit>

}
 8001c3e:	bf00      	nop
 8001c40:	3728      	adds	r7, #40	@ 0x28
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	2000031c 	.word	0x2000031c

08001c4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	@ 0x28
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c52:	f107 0320 	add.w	r3, r7, #32
 8001c56:	2200      	movs	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	60da      	str	r2, [r3, #12]
 8001c68:	611a      	str	r2, [r3, #16]
 8001c6a:	615a      	str	r2, [r3, #20]
 8001c6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c6e:	4b2c      	ldr	r3, [pc, #176]	@ (8001d20 <MX_TIM3_Init+0xd4>)
 8001c70:	4a2c      	ldr	r2, [pc, #176]	@ (8001d24 <MX_TIM3_Init+0xd8>)
 8001c72:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10;
 8001c74:	4b2a      	ldr	r3, [pc, #168]	@ (8001d20 <MX_TIM3_Init+0xd4>)
 8001c76:	220a      	movs	r2, #10
 8001c78:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7a:	4b29      	ldr	r3, [pc, #164]	@ (8001d20 <MX_TIM3_Init+0xd4>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8001c80:	4b27      	ldr	r3, [pc, #156]	@ (8001d20 <MX_TIM3_Init+0xd4>)
 8001c82:	22ff      	movs	r2, #255	@ 0xff
 8001c84:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c86:	4b26      	ldr	r3, [pc, #152]	@ (8001d20 <MX_TIM3_Init+0xd4>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c8c:	4b24      	ldr	r3, [pc, #144]	@ (8001d20 <MX_TIM3_Init+0xd4>)
 8001c8e:	2280      	movs	r2, #128	@ 0x80
 8001c90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c92:	4823      	ldr	r0, [pc, #140]	@ (8001d20 <MX_TIM3_Init+0xd4>)
 8001c94:	f003 f834 	bl	8004d00 <HAL_TIM_PWM_Init>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001c9e:	f000 f907 	bl	8001eb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001caa:	f107 0320 	add.w	r3, r7, #32
 8001cae:	4619      	mov	r1, r3
 8001cb0:	481b      	ldr	r0, [pc, #108]	@ (8001d20 <MX_TIM3_Init+0xd4>)
 8001cb2:	f003 fd3d 	bl	8005730 <HAL_TIMEx_MasterConfigSynchronization>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001cbc:	f000 f8f8 	bl	8001eb0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cc0:	2360      	movs	r3, #96	@ 0x60
 8001cc2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4812      	ldr	r0, [pc, #72]	@ (8001d20 <MX_TIM3_Init+0xd4>)
 8001cd8:	f003 fa02 	bl	80050e0 <HAL_TIM_PWM_ConfigChannel>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001ce2:	f000 f8e5 	bl	8001eb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	2204      	movs	r2, #4
 8001cea:	4619      	mov	r1, r3
 8001cec:	480c      	ldr	r0, [pc, #48]	@ (8001d20 <MX_TIM3_Init+0xd4>)
 8001cee:	f003 f9f7 	bl	80050e0 <HAL_TIM_PWM_ConfigChannel>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001cf8:	f000 f8da 	bl	8001eb0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cfc:	1d3b      	adds	r3, r7, #4
 8001cfe:	2208      	movs	r2, #8
 8001d00:	4619      	mov	r1, r3
 8001d02:	4807      	ldr	r0, [pc, #28]	@ (8001d20 <MX_TIM3_Init+0xd4>)
 8001d04:	f003 f9ec 	bl	80050e0 <HAL_TIM_PWM_ConfigChannel>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8001d0e:	f000 f8cf 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d12:	4803      	ldr	r0, [pc, #12]	@ (8001d20 <MX_TIM3_Init+0xd4>)
 8001d14:	f000 fa7a 	bl	800220c <HAL_TIM_MspPostInit>

}
 8001d18:	bf00      	nop
 8001d1a:	3728      	adds	r7, #40	@ 0x28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20000364 	.word	0x20000364
 8001d24:	40000400 	.word	0x40000400

08001d28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d2c:	4b11      	ldr	r3, [pc, #68]	@ (8001d74 <MX_USART1_UART_Init+0x4c>)
 8001d2e:	4a12      	ldr	r2, [pc, #72]	@ (8001d78 <MX_USART1_UART_Init+0x50>)
 8001d30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d32:	4b10      	ldr	r3, [pc, #64]	@ (8001d74 <MX_USART1_UART_Init+0x4c>)
 8001d34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d74 <MX_USART1_UART_Init+0x4c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d40:	4b0c      	ldr	r3, [pc, #48]	@ (8001d74 <MX_USART1_UART_Init+0x4c>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d46:	4b0b      	ldr	r3, [pc, #44]	@ (8001d74 <MX_USART1_UART_Init+0x4c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d4c:	4b09      	ldr	r3, [pc, #36]	@ (8001d74 <MX_USART1_UART_Init+0x4c>)
 8001d4e:	220c      	movs	r2, #12
 8001d50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d52:	4b08      	ldr	r3, [pc, #32]	@ (8001d74 <MX_USART1_UART_Init+0x4c>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d58:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <MX_USART1_UART_Init+0x4c>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d5e:	4805      	ldr	r0, [pc, #20]	@ (8001d74 <MX_USART1_UART_Init+0x4c>)
 8001d60:	f003 fd68 	bl	8005834 <HAL_UART_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d6a:	f000 f8a1 	bl	8001eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d6e:	bf00      	nop
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200003ac 	.word	0x200003ac
 8001d78:	40011000 	.word	0x40011000

08001d7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	607b      	str	r3, [r7, #4]
 8001d86:	4b10      	ldr	r3, [pc, #64]	@ (8001dc8 <MX_DMA_Init+0x4c>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	4a0f      	ldr	r2, [pc, #60]	@ (8001dc8 <MX_DMA_Init+0x4c>)
 8001d8c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d92:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc8 <MX_DMA_Init+0x4c>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d9a:	607b      	str	r3, [r7, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2100      	movs	r1, #0
 8001da2:	203a      	movs	r0, #58	@ 0x3a
 8001da4:	f000 fe50 	bl	8002a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001da8:	203a      	movs	r0, #58	@ 0x3a
 8001daa:	f000 fe69 	bl	8002a80 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001dae:	2200      	movs	r2, #0
 8001db0:	2100      	movs	r1, #0
 8001db2:	2046      	movs	r0, #70	@ 0x46
 8001db4:	f000 fe48 	bl	8002a48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001db8:	2046      	movs	r0, #70	@ 0x46
 8001dba:	f000 fe61 	bl	8002a80 <HAL_NVIC_EnableIRQ>

}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800

08001dcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08a      	sub	sp, #40	@ 0x28
 8001dd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd2:	f107 0314 	add.w	r3, r7, #20
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	60da      	str	r2, [r3, #12]
 8001de0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	4b27      	ldr	r3, [pc, #156]	@ (8001e84 <MX_GPIO_Init+0xb8>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	4a26      	ldr	r2, [pc, #152]	@ (8001e84 <MX_GPIO_Init+0xb8>)
 8001dec:	f043 0304 	orr.w	r3, r3, #4
 8001df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df2:	4b24      	ldr	r3, [pc, #144]	@ (8001e84 <MX_GPIO_Init+0xb8>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	4b20      	ldr	r3, [pc, #128]	@ (8001e84 <MX_GPIO_Init+0xb8>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e06:	4a1f      	ldr	r2, [pc, #124]	@ (8001e84 <MX_GPIO_Init+0xb8>)
 8001e08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8001e84 <MX_GPIO_Init+0xb8>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	4b19      	ldr	r3, [pc, #100]	@ (8001e84 <MX_GPIO_Init+0xb8>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	4a18      	ldr	r2, [pc, #96]	@ (8001e84 <MX_GPIO_Init+0xb8>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e2a:	4b16      	ldr	r3, [pc, #88]	@ (8001e84 <MX_GPIO_Init+0xb8>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	4b12      	ldr	r3, [pc, #72]	@ (8001e84 <MX_GPIO_Init+0xb8>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	4a11      	ldr	r2, [pc, #68]	@ (8001e84 <MX_GPIO_Init+0xb8>)
 8001e40:	f043 0302 	orr.w	r3, r3, #2
 8001e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e46:	4b0f      	ldr	r3, [pc, #60]	@ (8001e84 <MX_GPIO_Init+0xb8>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001e52:	2200      	movs	r2, #0
 8001e54:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001e58:	480b      	ldr	r0, [pc, #44]	@ (8001e88 <MX_GPIO_Init+0xbc>)
 8001e5a:	f001 fba5 	bl	80035a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e64:	2301      	movs	r3, #1
 8001e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4619      	mov	r1, r3
 8001e76:	4804      	ldr	r0, [pc, #16]	@ (8001e88 <MX_GPIO_Init+0xbc>)
 8001e78:	f001 fa12 	bl	80032a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e7c:	bf00      	nop
 8001e7e:	3728      	adds	r7, #40	@ 0x28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40023800 	.word	0x40023800
 8001e88:	40020800 	.word	0x40020800

08001e8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a04      	ldr	r2, [pc, #16]	@ (8001eac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d101      	bne.n	8001ea2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e9e:	f000 fcd7 	bl	8002850 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	3708      	adds	r7, #8
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	40010000 	.word	0x40010000

08001eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb4:	b672      	cpsid	i
}
 8001eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eb8:	bf00      	nop
 8001eba:	e7fd      	b.n	8001eb8 <Error_Handler+0x8>

08001ebc <PID_Init>:
 * @params[in] float ki
 * @params[in] float kd
 * @retval PID structure
 */
PID_t PID_Init()
{
 8001ebc:	b4b0      	push	{r4, r5, r7}
 8001ebe:	b08d      	sub	sp, #52	@ 0x34
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	PID_t PID_dev =
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8001f00 <PID_Init+0x44>)
 8001ec6:	f107 0408 	add.w	r4, r7, #8
 8001eca:	461d      	mov	r5, r3
 8001ecc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ece:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ed0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ed4:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ed8:	e884 0003 	stmia.w	r4, {r0, r1}
		.upper_bound = 10,
		.timestamp_us = 0,
		.mode = 2
	};

	return PID_dev;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	461d      	mov	r5, r3
 8001ee0:	f107 0408 	add.w	r4, r7, #8
 8001ee4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ee6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ee8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eec:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ef0:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	3734      	adds	r7, #52	@ 0x34
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bcb0      	pop	{r4, r5, r7}
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	0800be08 	.word	0x0800be08

08001f04 <SerialCommander_Init>:
 * @param[in] motor ptr
 * @param[in] UART handle
 * @retval -
 */
void SerialCommander_Init(BLDCMotor* motor, UART_HandleTypeDef* huart)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
	uart_dev = huart;
 8001f0e:	4a08      	ldr	r2, [pc, #32]	@ (8001f30 <SerialCommander_Init+0x2c>)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	6013      	str	r3, [r2, #0]
	bldc_dev = motor;
 8001f14:	4a07      	ldr	r2, [pc, #28]	@ (8001f34 <SerialCommander_Init+0x30>)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6013      	str	r3, [r2, #0]
	HAL_UARTEx_ReceiveToIdle_DMA(uart_dev, rx_buff, 32);
 8001f1a:	4b05      	ldr	r3, [pc, #20]	@ (8001f30 <SerialCommander_Init+0x2c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	4905      	ldr	r1, [pc, #20]	@ (8001f38 <SerialCommander_Init+0x34>)
 8001f22:	4618      	mov	r0, r3
 8001f24:	f003 fd46 	bl	80059b4 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	200004b4 	.word	0x200004b4
 8001f34:	200004b8 	.word	0x200004b8
 8001f38:	200004bc 	.word	0x200004bc

08001f3c <HAL_UARTEx_RxEventCallback>:
/*
 * @brief DMA receive to idle interrupt callback function
 * @note Sets the receive flag to 1
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	807b      	strh	r3, [r7, #2]
	/* Indicate incoming data */
	rx_flag = 1;
 8001f48:	4b09      	ldr	r3, [pc, #36]	@ (8001f70 <HAL_UARTEx_RxEventCallback+0x34>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	701a      	strb	r2, [r3, #0]

	/* Insert null terminator for C string */
	if(Size > 15)
 8001f4e:	887b      	ldrh	r3, [r7, #2]
 8001f50:	2b0f      	cmp	r3, #15
 8001f52:	d903      	bls.n	8001f5c <HAL_UARTEx_RxEventCallback+0x20>
	{
		rx_buff[15] = '\0';
 8001f54:	4b07      	ldr	r3, [pc, #28]	@ (8001f74 <HAL_UARTEx_RxEventCallback+0x38>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	73da      	strb	r2, [r3, #15]
	}
	else
	{
		rx_buff[Size] = '\0';
	}
}
 8001f5a:	e003      	b.n	8001f64 <HAL_UARTEx_RxEventCallback+0x28>
		rx_buff[Size] = '\0';
 8001f5c:	887b      	ldrh	r3, [r7, #2]
 8001f5e:	4a05      	ldr	r2, [pc, #20]	@ (8001f74 <HAL_UARTEx_RxEventCallback+0x38>)
 8001f60:	2100      	movs	r1, #0
 8001f62:	54d1      	strb	r1, [r2, r3]
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	200004ec 	.word	0x200004ec
 8001f74:	200004bc 	.word	0x200004bc

08001f78 <Serial_Print>:
 * @param[in] UART handle
 * @param[in] string
 * @retval -
 */
void Serial_Print(const char* s)
{
 8001f78:	b590      	push	{r4, r7, lr}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(uart_dev, s, strlen(s));
 8001f80:	4b07      	ldr	r3, [pc, #28]	@ (8001fa0 <Serial_Print+0x28>)
 8001f82:	681c      	ldr	r4, [r3, #0]
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7fe f97b 	bl	8000280 <strlen>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	461a      	mov	r2, r3
 8001f90:	6879      	ldr	r1, [r7, #4]
 8001f92:	4620      	mov	r0, r4
 8001f94:	f003 fc9e 	bl	80058d4 <HAL_UART_Transmit_DMA>
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd90      	pop	{r4, r7, pc}
 8001fa0:	200004b4 	.word	0x200004b4

08001fa4 <SerialCommander_EventUpdate>:
 * @brief Event updater; to be called repeatedly in main loop
 * @param[in] -
 * @retval -
 */
void SerialCommander_EventUpdate()
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
	if(rx_flag)
 8001faa:	4b1b      	ldr	r3, [pc, #108]	@ (8002018 <SerialCommander_EventUpdate+0x74>)
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d02d      	beq.n	800200e <SerialCommander_EventUpdate+0x6a>
	{
		char cmd;
		float val;

		if(rx_buff[2] != '\0')
 8001fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800201c <SerialCommander_EventUpdate+0x78>)
 8001fb4:	789b      	ldrb	r3, [r3, #2]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <SerialCommander_EventUpdate+0x22>
		{
			sscanf(rx_buff, "%c %f", &cmd, &val);
 8001fba:	463b      	mov	r3, r7
 8001fbc:	1dfa      	adds	r2, r7, #7
 8001fbe:	4918      	ldr	r1, [pc, #96]	@ (8002020 <SerialCommander_EventUpdate+0x7c>)
 8001fc0:	4816      	ldr	r0, [pc, #88]	@ (800201c <SerialCommander_EventUpdate+0x78>)
 8001fc2:	f005 fd95 	bl	8007af0 <siscanf>
		}

		switch (cmd)
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	2b54      	cmp	r3, #84	@ 0x54
 8001fca:	d00f      	beq.n	8001fec <SerialCommander_EventUpdate+0x48>
 8001fcc:	2b56      	cmp	r3, #86	@ 0x56
 8001fce:	d111      	bne.n	8001ff4 <SerialCommander_EventUpdate+0x50>
		{
		case 'V':
			sprintf((const char*)&tx_buff, "Velocity: %f", val);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fac0 	bl	8000558 <__aeabi_f2d>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	4911      	ldr	r1, [pc, #68]	@ (8002024 <SerialCommander_EventUpdate+0x80>)
 8001fde:	4812      	ldr	r0, [pc, #72]	@ (8002028 <SerialCommander_EventUpdate+0x84>)
 8001fe0:	f005 fd66 	bl	8007ab0 <siprintf>
			Serial_Print((const char*)&tx_buff);
 8001fe4:	4810      	ldr	r0, [pc, #64]	@ (8002028 <SerialCommander_EventUpdate+0x84>)
 8001fe6:	f7ff ffc7 	bl	8001f78 <Serial_Print>
			break;
 8001fea:	e006      	b.n	8001ffa <SerialCommander_EventUpdate+0x56>
		case 'T':
			Serial_Print("T\n");
 8001fec:	480f      	ldr	r0, [pc, #60]	@ (800202c <SerialCommander_EventUpdate+0x88>)
 8001fee:	f7ff ffc3 	bl	8001f78 <Serial_Print>
			break;
 8001ff2:	e002      	b.n	8001ffa <SerialCommander_EventUpdate+0x56>
		default:
			Serial_Print("Invalid command\n");
 8001ff4:	480e      	ldr	r0, [pc, #56]	@ (8002030 <SerialCommander_EventUpdate+0x8c>)
 8001ff6:	f7ff ffbf 	bl	8001f78 <Serial_Print>
		}

		rx_flag = 0;
 8001ffa:	4b07      	ldr	r3, [pc, #28]	@ (8002018 <SerialCommander_EventUpdate+0x74>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
		HAL_UARTEx_ReceiveToIdle_DMA(uart_dev, rx_buff, 32);
 8002000:	4b0c      	ldr	r3, [pc, #48]	@ (8002034 <SerialCommander_EventUpdate+0x90>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2220      	movs	r2, #32
 8002006:	4905      	ldr	r1, [pc, #20]	@ (800201c <SerialCommander_EventUpdate+0x78>)
 8002008:	4618      	mov	r0, r3
 800200a:	f003 fcd3 	bl	80059b4 <HAL_UARTEx_ReceiveToIdle_DMA>
	}
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200004ec 	.word	0x200004ec
 800201c:	200004bc 	.word	0x200004bc
 8002020:	0800be30 	.word	0x0800be30
 8002024:	0800be38 	.word	0x0800be38
 8002028:	200004cc 	.word	0x200004cc
 800202c:	0800be48 	.word	0x0800be48
 8002030:	0800be4c 	.word	0x0800be4c
 8002034:	200004b4 	.word	0x200004b4

08002038 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	607b      	str	r3, [r7, #4]
 8002042:	4b10      	ldr	r3, [pc, #64]	@ (8002084 <HAL_MspInit+0x4c>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002046:	4a0f      	ldr	r2, [pc, #60]	@ (8002084 <HAL_MspInit+0x4c>)
 8002048:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800204c:	6453      	str	r3, [r2, #68]	@ 0x44
 800204e:	4b0d      	ldr	r3, [pc, #52]	@ (8002084 <HAL_MspInit+0x4c>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002052:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002056:	607b      	str	r3, [r7, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	603b      	str	r3, [r7, #0]
 800205e:	4b09      	ldr	r3, [pc, #36]	@ (8002084 <HAL_MspInit+0x4c>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002062:	4a08      	ldr	r2, [pc, #32]	@ (8002084 <HAL_MspInit+0x4c>)
 8002064:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002068:	6413      	str	r3, [r2, #64]	@ 0x40
 800206a:	4b06      	ldr	r3, [pc, #24]	@ (8002084 <HAL_MspInit+0x4c>)
 800206c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800206e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002072:	603b      	str	r3, [r7, #0]
 8002074:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40023800 	.word	0x40023800

08002088 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08c      	sub	sp, #48	@ 0x30
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002090:	f107 031c 	add.w	r3, r7, #28
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a3a      	ldr	r2, [pc, #232]	@ (8002190 <HAL_I2C_MspInit+0x108>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d12c      	bne.n	8002104 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	61bb      	str	r3, [r7, #24]
 80020ae:	4b39      	ldr	r3, [pc, #228]	@ (8002194 <HAL_I2C_MspInit+0x10c>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b2:	4a38      	ldr	r2, [pc, #224]	@ (8002194 <HAL_I2C_MspInit+0x10c>)
 80020b4:	f043 0302 	orr.w	r3, r3, #2
 80020b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ba:	4b36      	ldr	r3, [pc, #216]	@ (8002194 <HAL_I2C_MspInit+0x10c>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	61bb      	str	r3, [r7, #24]
 80020c4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020c6:	23c0      	movs	r3, #192	@ 0xc0
 80020c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020ca:	2312      	movs	r3, #18
 80020cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d2:	2303      	movs	r3, #3
 80020d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020d6:	2304      	movs	r3, #4
 80020d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020da:	f107 031c 	add.w	r3, r7, #28
 80020de:	4619      	mov	r1, r3
 80020e0:	482d      	ldr	r0, [pc, #180]	@ (8002198 <HAL_I2C_MspInit+0x110>)
 80020e2:	f001 f8dd 	bl	80032a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	4b2a      	ldr	r3, [pc, #168]	@ (8002194 <HAL_I2C_MspInit+0x10c>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ee:	4a29      	ldr	r2, [pc, #164]	@ (8002194 <HAL_I2C_MspInit+0x10c>)
 80020f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020f6:	4b27      	ldr	r3, [pc, #156]	@ (8002194 <HAL_I2C_MspInit+0x10c>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002102:	e041      	b.n	8002188 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a24      	ldr	r2, [pc, #144]	@ (800219c <HAL_I2C_MspInit+0x114>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d13c      	bne.n	8002188 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	4b20      	ldr	r3, [pc, #128]	@ (8002194 <HAL_I2C_MspInit+0x10c>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	4a1f      	ldr	r2, [pc, #124]	@ (8002194 <HAL_I2C_MspInit+0x10c>)
 8002118:	f043 0302 	orr.w	r3, r3, #2
 800211c:	6313      	str	r3, [r2, #48]	@ 0x30
 800211e:	4b1d      	ldr	r3, [pc, #116]	@ (8002194 <HAL_I2C_MspInit+0x10c>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800212a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800212e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002130:	2312      	movs	r3, #18
 8002132:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002138:	2303      	movs	r3, #3
 800213a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800213c:	2304      	movs	r3, #4
 800213e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002140:	f107 031c 	add.w	r3, r7, #28
 8002144:	4619      	mov	r1, r3
 8002146:	4814      	ldr	r0, [pc, #80]	@ (8002198 <HAL_I2C_MspInit+0x110>)
 8002148:	f001 f8aa 	bl	80032a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800214c:	2308      	movs	r3, #8
 800214e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002150:	2312      	movs	r3, #18
 8002152:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002158:	2303      	movs	r3, #3
 800215a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800215c:	2309      	movs	r3, #9
 800215e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002160:	f107 031c 	add.w	r3, r7, #28
 8002164:	4619      	mov	r1, r3
 8002166:	480c      	ldr	r0, [pc, #48]	@ (8002198 <HAL_I2C_MspInit+0x110>)
 8002168:	f001 f89a 	bl	80032a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800216c:	2300      	movs	r3, #0
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	4b08      	ldr	r3, [pc, #32]	@ (8002194 <HAL_I2C_MspInit+0x10c>)
 8002172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002174:	4a07      	ldr	r2, [pc, #28]	@ (8002194 <HAL_I2C_MspInit+0x10c>)
 8002176:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800217a:	6413      	str	r3, [r2, #64]	@ 0x40
 800217c:	4b05      	ldr	r3, [pc, #20]	@ (8002194 <HAL_I2C_MspInit+0x10c>)
 800217e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002180:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	68fb      	ldr	r3, [r7, #12]
}
 8002188:	bf00      	nop
 800218a:	3730      	adds	r7, #48	@ 0x30
 800218c:	46bd      	mov	sp, r7
 800218e:	bd80      	pop	{r7, pc}
 8002190:	40005400 	.word	0x40005400
 8002194:	40023800 	.word	0x40023800
 8002198:	40020400 	.word	0x40020400
 800219c:	40005800 	.word	0x40005800

080021a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021b0:	d10e      	bne.n	80021d0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	4b13      	ldr	r3, [pc, #76]	@ (8002204 <HAL_TIM_PWM_MspInit+0x64>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	4a12      	ldr	r2, [pc, #72]	@ (8002204 <HAL_TIM_PWM_MspInit+0x64>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021c2:	4b10      	ldr	r3, [pc, #64]	@ (8002204 <HAL_TIM_PWM_MspInit+0x64>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80021ce:	e012      	b.n	80021f6 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a0c      	ldr	r2, [pc, #48]	@ (8002208 <HAL_TIM_PWM_MspInit+0x68>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d10d      	bne.n	80021f6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	4b09      	ldr	r3, [pc, #36]	@ (8002204 <HAL_TIM_PWM_MspInit+0x64>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e2:	4a08      	ldr	r2, [pc, #32]	@ (8002204 <HAL_TIM_PWM_MspInit+0x64>)
 80021e4:	f043 0302 	orr.w	r3, r3, #2
 80021e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021ea:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <HAL_TIM_PWM_MspInit+0x64>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]
}
 80021f6:	bf00      	nop
 80021f8:	3714      	adds	r7, #20
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40023800 	.word	0x40023800
 8002208:	40000400 	.word	0x40000400

0800220c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b08a      	sub	sp, #40	@ 0x28
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002214:	f107 0314 	add.w	r3, r7, #20
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800222c:	d11e      	bne.n	800226c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	4b31      	ldr	r3, [pc, #196]	@ (80022f8 <HAL_TIM_MspPostInit+0xec>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	4a30      	ldr	r2, [pc, #192]	@ (80022f8 <HAL_TIM_MspPostInit+0xec>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	6313      	str	r3, [r2, #48]	@ 0x30
 800223e:	4b2e      	ldr	r3, [pc, #184]	@ (80022f8 <HAL_TIM_MspPostInit+0xec>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800224a:	2307      	movs	r3, #7
 800224c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224e:	2302      	movs	r3, #2
 8002250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002256:	2300      	movs	r3, #0
 8002258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800225a:	2301      	movs	r3, #1
 800225c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225e:	f107 0314 	add.w	r3, r7, #20
 8002262:	4619      	mov	r1, r3
 8002264:	4825      	ldr	r0, [pc, #148]	@ (80022fc <HAL_TIM_MspPostInit+0xf0>)
 8002266:	f001 f81b 	bl	80032a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800226a:	e040      	b.n	80022ee <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a23      	ldr	r2, [pc, #140]	@ (8002300 <HAL_TIM_MspPostInit+0xf4>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d13b      	bne.n	80022ee <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	4b1f      	ldr	r3, [pc, #124]	@ (80022f8 <HAL_TIM_MspPostInit+0xec>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	4a1e      	ldr	r2, [pc, #120]	@ (80022f8 <HAL_TIM_MspPostInit+0xec>)
 8002280:	f043 0301 	orr.w	r3, r3, #1
 8002284:	6313      	str	r3, [r2, #48]	@ 0x30
 8002286:	4b1c      	ldr	r3, [pc, #112]	@ (80022f8 <HAL_TIM_MspPostInit+0xec>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	60bb      	str	r3, [r7, #8]
 8002296:	4b18      	ldr	r3, [pc, #96]	@ (80022f8 <HAL_TIM_MspPostInit+0xec>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	4a17      	ldr	r2, [pc, #92]	@ (80022f8 <HAL_TIM_MspPostInit+0xec>)
 800229c:	f043 0302 	orr.w	r3, r3, #2
 80022a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022a2:	4b15      	ldr	r3, [pc, #84]	@ (80022f8 <HAL_TIM_MspPostInit+0xec>)
 80022a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	60bb      	str	r3, [r7, #8]
 80022ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022ae:	23c0      	movs	r3, #192	@ 0xc0
 80022b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ba:	2300      	movs	r3, #0
 80022bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022be:	2302      	movs	r3, #2
 80022c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c2:	f107 0314 	add.w	r3, r7, #20
 80022c6:	4619      	mov	r1, r3
 80022c8:	480c      	ldr	r0, [pc, #48]	@ (80022fc <HAL_TIM_MspPostInit+0xf0>)
 80022ca:	f000 ffe9 	bl	80032a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022ce:	2301      	movs	r3, #1
 80022d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d2:	2302      	movs	r3, #2
 80022d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022da:	2300      	movs	r3, #0
 80022dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022de:	2302      	movs	r3, #2
 80022e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e2:	f107 0314 	add.w	r3, r7, #20
 80022e6:	4619      	mov	r1, r3
 80022e8:	4806      	ldr	r0, [pc, #24]	@ (8002304 <HAL_TIM_MspPostInit+0xf8>)
 80022ea:	f000 ffd9 	bl	80032a0 <HAL_GPIO_Init>
}
 80022ee:	bf00      	nop
 80022f0:	3728      	adds	r7, #40	@ 0x28
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40023800 	.word	0x40023800
 80022fc:	40020000 	.word	0x40020000
 8002300:	40000400 	.word	0x40000400
 8002304:	40020400 	.word	0x40020400

08002308 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b08a      	sub	sp, #40	@ 0x28
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002310:	f107 0314 	add.w	r3, r7, #20
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	605a      	str	r2, [r3, #4]
 800231a:	609a      	str	r2, [r3, #8]
 800231c:	60da      	str	r2, [r3, #12]
 800231e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a4c      	ldr	r2, [pc, #304]	@ (8002458 <HAL_UART_MspInit+0x150>)
 8002326:	4293      	cmp	r3, r2
 8002328:	f040 8091 	bne.w	800244e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800232c:	2300      	movs	r3, #0
 800232e:	613b      	str	r3, [r7, #16]
 8002330:	4b4a      	ldr	r3, [pc, #296]	@ (800245c <HAL_UART_MspInit+0x154>)
 8002332:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002334:	4a49      	ldr	r2, [pc, #292]	@ (800245c <HAL_UART_MspInit+0x154>)
 8002336:	f043 0310 	orr.w	r3, r3, #16
 800233a:	6453      	str	r3, [r2, #68]	@ 0x44
 800233c:	4b47      	ldr	r3, [pc, #284]	@ (800245c <HAL_UART_MspInit+0x154>)
 800233e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002340:	f003 0310 	and.w	r3, r3, #16
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002348:	2300      	movs	r3, #0
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	4b43      	ldr	r3, [pc, #268]	@ (800245c <HAL_UART_MspInit+0x154>)
 800234e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002350:	4a42      	ldr	r2, [pc, #264]	@ (800245c <HAL_UART_MspInit+0x154>)
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	6313      	str	r3, [r2, #48]	@ 0x30
 8002358:	4b40      	ldr	r3, [pc, #256]	@ (800245c <HAL_UART_MspInit+0x154>)
 800235a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002364:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002368:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236a:	2302      	movs	r3, #2
 800236c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002372:	2303      	movs	r3, #3
 8002374:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002376:	2307      	movs	r3, #7
 8002378:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800237a:	f107 0314 	add.w	r3, r7, #20
 800237e:	4619      	mov	r1, r3
 8002380:	4837      	ldr	r0, [pc, #220]	@ (8002460 <HAL_UART_MspInit+0x158>)
 8002382:	f000 ff8d 	bl	80032a0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002386:	4b37      	ldr	r3, [pc, #220]	@ (8002464 <HAL_UART_MspInit+0x15c>)
 8002388:	4a37      	ldr	r2, [pc, #220]	@ (8002468 <HAL_UART_MspInit+0x160>)
 800238a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800238c:	4b35      	ldr	r3, [pc, #212]	@ (8002464 <HAL_UART_MspInit+0x15c>)
 800238e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002392:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002394:	4b33      	ldr	r3, [pc, #204]	@ (8002464 <HAL_UART_MspInit+0x15c>)
 8002396:	2240      	movs	r2, #64	@ 0x40
 8002398:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800239a:	4b32      	ldr	r3, [pc, #200]	@ (8002464 <HAL_UART_MspInit+0x15c>)
 800239c:	2200      	movs	r2, #0
 800239e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023a0:	4b30      	ldr	r3, [pc, #192]	@ (8002464 <HAL_UART_MspInit+0x15c>)
 80023a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023a6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002464 <HAL_UART_MspInit+0x15c>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023ae:	4b2d      	ldr	r3, [pc, #180]	@ (8002464 <HAL_UART_MspInit+0x15c>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80023b4:	4b2b      	ldr	r3, [pc, #172]	@ (8002464 <HAL_UART_MspInit+0x15c>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80023ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002464 <HAL_UART_MspInit+0x15c>)
 80023bc:	2200      	movs	r2, #0
 80023be:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023c0:	4b28      	ldr	r3, [pc, #160]	@ (8002464 <HAL_UART_MspInit+0x15c>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80023c6:	4827      	ldr	r0, [pc, #156]	@ (8002464 <HAL_UART_MspInit+0x15c>)
 80023c8:	f000 fb68 	bl	8002a9c <HAL_DMA_Init>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80023d2:	f7ff fd6d 	bl	8001eb0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a22      	ldr	r2, [pc, #136]	@ (8002464 <HAL_UART_MspInit+0x15c>)
 80023da:	639a      	str	r2, [r3, #56]	@ 0x38
 80023dc:	4a21      	ldr	r2, [pc, #132]	@ (8002464 <HAL_UART_MspInit+0x15c>)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80023e2:	4b22      	ldr	r3, [pc, #136]	@ (800246c <HAL_UART_MspInit+0x164>)
 80023e4:	4a22      	ldr	r2, [pc, #136]	@ (8002470 <HAL_UART_MspInit+0x168>)
 80023e6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80023e8:	4b20      	ldr	r3, [pc, #128]	@ (800246c <HAL_UART_MspInit+0x164>)
 80023ea:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80023ee:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023f0:	4b1e      	ldr	r3, [pc, #120]	@ (800246c <HAL_UART_MspInit+0x164>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023f6:	4b1d      	ldr	r3, [pc, #116]	@ (800246c <HAL_UART_MspInit+0x164>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023fc:	4b1b      	ldr	r3, [pc, #108]	@ (800246c <HAL_UART_MspInit+0x164>)
 80023fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002402:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002404:	4b19      	ldr	r3, [pc, #100]	@ (800246c <HAL_UART_MspInit+0x164>)
 8002406:	2200      	movs	r2, #0
 8002408:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800240a:	4b18      	ldr	r3, [pc, #96]	@ (800246c <HAL_UART_MspInit+0x164>)
 800240c:	2200      	movs	r2, #0
 800240e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002410:	4b16      	ldr	r3, [pc, #88]	@ (800246c <HAL_UART_MspInit+0x164>)
 8002412:	2200      	movs	r2, #0
 8002414:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002416:	4b15      	ldr	r3, [pc, #84]	@ (800246c <HAL_UART_MspInit+0x164>)
 8002418:	2200      	movs	r2, #0
 800241a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800241c:	4b13      	ldr	r3, [pc, #76]	@ (800246c <HAL_UART_MspInit+0x164>)
 800241e:	2200      	movs	r2, #0
 8002420:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002422:	4812      	ldr	r0, [pc, #72]	@ (800246c <HAL_UART_MspInit+0x164>)
 8002424:	f000 fb3a 	bl	8002a9c <HAL_DMA_Init>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800242e:	f7ff fd3f 	bl	8001eb0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a0d      	ldr	r2, [pc, #52]	@ (800246c <HAL_UART_MspInit+0x164>)
 8002436:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002438:	4a0c      	ldr	r2, [pc, #48]	@ (800246c <HAL_UART_MspInit+0x164>)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800243e:	2200      	movs	r2, #0
 8002440:	2100      	movs	r1, #0
 8002442:	2025      	movs	r0, #37	@ 0x25
 8002444:	f000 fb00 	bl	8002a48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002448:	2025      	movs	r0, #37	@ 0x25
 800244a:	f000 fb19 	bl	8002a80 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800244e:	bf00      	nop
 8002450:	3728      	adds	r7, #40	@ 0x28
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	40011000 	.word	0x40011000
 800245c:	40023800 	.word	0x40023800
 8002460:	40020000 	.word	0x40020000
 8002464:	200003f4 	.word	0x200003f4
 8002468:	400264b8 	.word	0x400264b8
 800246c:	20000454 	.word	0x20000454
 8002470:	40026440 	.word	0x40026440

08002474 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b08c      	sub	sp, #48	@ 0x30
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800247c:	2300      	movs	r3, #0
 800247e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002484:	2300      	movs	r3, #0
 8002486:	60bb      	str	r3, [r7, #8]
 8002488:	4b2e      	ldr	r3, [pc, #184]	@ (8002544 <HAL_InitTick+0xd0>)
 800248a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800248c:	4a2d      	ldr	r2, [pc, #180]	@ (8002544 <HAL_InitTick+0xd0>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	6453      	str	r3, [r2, #68]	@ 0x44
 8002494:	4b2b      	ldr	r3, [pc, #172]	@ (8002544 <HAL_InitTick+0xd0>)
 8002496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	60bb      	str	r3, [r7, #8]
 800249e:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80024a0:	f107 020c 	add.w	r2, r7, #12
 80024a4:	f107 0310 	add.w	r3, r7, #16
 80024a8:	4611      	mov	r1, r2
 80024aa:	4618      	mov	r0, r3
 80024ac:	f002 fb3a 	bl	8004b24 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80024b0:	f002 fb24 	bl	8004afc <HAL_RCC_GetPCLK2Freq>
 80024b4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b8:	4a23      	ldr	r2, [pc, #140]	@ (8002548 <HAL_InitTick+0xd4>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	0c9b      	lsrs	r3, r3, #18
 80024c0:	3b01      	subs	r3, #1
 80024c2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80024c4:	4b21      	ldr	r3, [pc, #132]	@ (800254c <HAL_InitTick+0xd8>)
 80024c6:	4a22      	ldr	r2, [pc, #136]	@ (8002550 <HAL_InitTick+0xdc>)
 80024c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80024ca:	4b20      	ldr	r3, [pc, #128]	@ (800254c <HAL_InitTick+0xd8>)
 80024cc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80024d0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80024d2:	4a1e      	ldr	r2, [pc, #120]	@ (800254c <HAL_InitTick+0xd8>)
 80024d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80024d8:	4b1c      	ldr	r3, [pc, #112]	@ (800254c <HAL_InitTick+0xd8>)
 80024da:	2200      	movs	r2, #0
 80024dc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024de:	4b1b      	ldr	r3, [pc, #108]	@ (800254c <HAL_InitTick+0xd8>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024e4:	4b19      	ldr	r3, [pc, #100]	@ (800254c <HAL_InitTick+0xd8>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80024ea:	4818      	ldr	r0, [pc, #96]	@ (800254c <HAL_InitTick+0xd8>)
 80024ec:	f002 fb4c 	bl	8004b88 <HAL_TIM_Base_Init>
 80024f0:	4603      	mov	r3, r0
 80024f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80024f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d11b      	bne.n	8002536 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80024fe:	4813      	ldr	r0, [pc, #76]	@ (800254c <HAL_InitTick+0xd8>)
 8002500:	f002 fb9c 	bl	8004c3c <HAL_TIM_Base_Start_IT>
 8002504:	4603      	mov	r3, r0
 8002506:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800250a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800250e:	2b00      	cmp	r3, #0
 8002510:	d111      	bne.n	8002536 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002512:	2019      	movs	r0, #25
 8002514:	f000 fab4 	bl	8002a80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b0f      	cmp	r3, #15
 800251c:	d808      	bhi.n	8002530 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800251e:	2200      	movs	r2, #0
 8002520:	6879      	ldr	r1, [r7, #4]
 8002522:	2019      	movs	r0, #25
 8002524:	f000 fa90 	bl	8002a48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002528:	4a0a      	ldr	r2, [pc, #40]	@ (8002554 <HAL_InitTick+0xe0>)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6013      	str	r3, [r2, #0]
 800252e:	e002      	b.n	8002536 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002536:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800253a:	4618      	mov	r0, r3
 800253c:	3730      	adds	r7, #48	@ 0x30
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40023800 	.word	0x40023800
 8002548:	431bde83 	.word	0x431bde83
 800254c:	200004f0 	.word	0x200004f0
 8002550:	40010000 	.word	0x40010000
 8002554:	20000088 	.word	0x20000088

08002558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800255c:	bf00      	nop
 800255e:	e7fd      	b.n	800255c <NMI_Handler+0x4>

08002560 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002564:	bf00      	nop
 8002566:	e7fd      	b.n	8002564 <HardFault_Handler+0x4>

08002568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800256c:	bf00      	nop
 800256e:	e7fd      	b.n	800256c <MemManage_Handler+0x4>

08002570 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002574:	bf00      	nop
 8002576:	e7fd      	b.n	8002574 <BusFault_Handler+0x4>

08002578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800257c:	bf00      	nop
 800257e:	e7fd      	b.n	800257c <UsageFault_Handler+0x4>

08002580 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800258e:	b480      	push	{r7}
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025aa:	b480      	push	{r7}
 80025ac:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025ae:	bf00      	nop
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025bc:	4802      	ldr	r0, [pc, #8]	@ (80025c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80025be:	f002 fc9f 	bl	8004f00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	200004f0 	.word	0x200004f0

080025cc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025d0:	4802      	ldr	r0, [pc, #8]	@ (80025dc <USART1_IRQHandler+0x10>)
 80025d2:	f003 fa4d 	bl	8005a70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	200003ac 	.word	0x200003ac

080025e0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80025e4:	4802      	ldr	r0, [pc, #8]	@ (80025f0 <DMA2_Stream2_IRQHandler+0x10>)
 80025e6:	f000 fbf1 	bl	8002dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000454 	.word	0x20000454

080025f4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80025f8:	4802      	ldr	r0, [pc, #8]	@ (8002604 <DMA2_Stream7_IRQHandler+0x10>)
 80025fa:	f000 fbe7 	bl	8002dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	200003f4 	.word	0x200003f4

08002608 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return 1;
 800260c:	2301      	movs	r3, #1
}
 800260e:	4618      	mov	r0, r3
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <_kill>:

int _kill(int pid, int sig)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002622:	f005 fb27 	bl	8007c74 <__errno>
 8002626:	4603      	mov	r3, r0
 8002628:	2216      	movs	r2, #22
 800262a:	601a      	str	r2, [r3, #0]
  return -1;
 800262c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002630:	4618      	mov	r0, r3
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <_exit>:

void _exit (int status)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002640:	f04f 31ff 	mov.w	r1, #4294967295
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff ffe7 	bl	8002618 <_kill>
  while (1) {}    /* Make sure we hang here */
 800264a:	bf00      	nop
 800264c:	e7fd      	b.n	800264a <_exit+0x12>

0800264e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b086      	sub	sp, #24
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	e00a      	b.n	8002676 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002660:	f3af 8000 	nop.w
 8002664:	4601      	mov	r1, r0
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	60ba      	str	r2, [r7, #8]
 800266c:	b2ca      	uxtb	r2, r1
 800266e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	3301      	adds	r3, #1
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	429a      	cmp	r2, r3
 800267c:	dbf0      	blt.n	8002660 <_read+0x12>
  }

  return len;
 800267e:	687b      	ldr	r3, [r7, #4]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	e009      	b.n	80026ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	60ba      	str	r2, [r7, #8]
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	3301      	adds	r3, #1
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	dbf1      	blt.n	800269a <_write+0x12>
  }
  return len;
 80026b6:	687b      	ldr	r3, [r7, #4]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <_close>:

int _close(int file)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026e8:	605a      	str	r2, [r3, #4]
  return 0;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <_isatty>:

int _isatty(int file)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002700:	2301      	movs	r3, #1
}
 8002702:	4618      	mov	r0, r3
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800270e:	b480      	push	{r7}
 8002710:	b085      	sub	sp, #20
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002730:	4a14      	ldr	r2, [pc, #80]	@ (8002784 <_sbrk+0x5c>)
 8002732:	4b15      	ldr	r3, [pc, #84]	@ (8002788 <_sbrk+0x60>)
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800273c:	4b13      	ldr	r3, [pc, #76]	@ (800278c <_sbrk+0x64>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d102      	bne.n	800274a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002744:	4b11      	ldr	r3, [pc, #68]	@ (800278c <_sbrk+0x64>)
 8002746:	4a12      	ldr	r2, [pc, #72]	@ (8002790 <_sbrk+0x68>)
 8002748:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800274a:	4b10      	ldr	r3, [pc, #64]	@ (800278c <_sbrk+0x64>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4413      	add	r3, r2
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	429a      	cmp	r2, r3
 8002756:	d207      	bcs.n	8002768 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002758:	f005 fa8c 	bl	8007c74 <__errno>
 800275c:	4603      	mov	r3, r0
 800275e:	220c      	movs	r2, #12
 8002760:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002762:	f04f 33ff 	mov.w	r3, #4294967295
 8002766:	e009      	b.n	800277c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002768:	4b08      	ldr	r3, [pc, #32]	@ (800278c <_sbrk+0x64>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800276e:	4b07      	ldr	r3, [pc, #28]	@ (800278c <_sbrk+0x64>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4413      	add	r3, r2
 8002776:	4a05      	ldr	r2, [pc, #20]	@ (800278c <_sbrk+0x64>)
 8002778:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800277a:	68fb      	ldr	r3, [r7, #12]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	20020000 	.word	0x20020000
 8002788:	00000400 	.word	0x00000400
 800278c:	20000538 	.word	0x20000538
 8002790:	20000690 	.word	0x20000690

08002794 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002798:	4b06      	ldr	r3, [pc, #24]	@ (80027b4 <SystemInit+0x20>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279e:	4a05      	ldr	r2, [pc, #20]	@ (80027b4 <SystemInit+0x20>)
 80027a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	e000ed00 	.word	0xe000ed00

080027b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80027b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027f0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027bc:	f7ff ffea 	bl	8002794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027c0:	480c      	ldr	r0, [pc, #48]	@ (80027f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027c2:	490d      	ldr	r1, [pc, #52]	@ (80027f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027c4:	4a0d      	ldr	r2, [pc, #52]	@ (80027fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027c8:	e002      	b.n	80027d0 <LoopCopyDataInit>

080027ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ce:	3304      	adds	r3, #4

080027d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027d4:	d3f9      	bcc.n	80027ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002800 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027d8:	4c0a      	ldr	r4, [pc, #40]	@ (8002804 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027dc:	e001      	b.n	80027e2 <LoopFillZerobss>

080027de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027e0:	3204      	adds	r2, #4

080027e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027e4:	d3fb      	bcc.n	80027de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027e6:	f005 fa4b 	bl	8007c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ea:	f7ff f8b7 	bl	800195c <main>
  bx  lr    
 80027ee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027f0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027f8:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 80027fc:	0800c2f8 	.word	0x0800c2f8
  ldr r2, =_sbss
 8002800:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8002804:	2000068c 	.word	0x2000068c

08002808 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002808:	e7fe      	b.n	8002808 <ADC_IRQHandler>
	...

0800280c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002810:	4b0e      	ldr	r3, [pc, #56]	@ (800284c <HAL_Init+0x40>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a0d      	ldr	r2, [pc, #52]	@ (800284c <HAL_Init+0x40>)
 8002816:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800281a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800281c:	4b0b      	ldr	r3, [pc, #44]	@ (800284c <HAL_Init+0x40>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a0a      	ldr	r2, [pc, #40]	@ (800284c <HAL_Init+0x40>)
 8002822:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002826:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002828:	4b08      	ldr	r3, [pc, #32]	@ (800284c <HAL_Init+0x40>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a07      	ldr	r2, [pc, #28]	@ (800284c <HAL_Init+0x40>)
 800282e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002832:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002834:	2003      	movs	r0, #3
 8002836:	f000 f8fc 	bl	8002a32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800283a:	200f      	movs	r0, #15
 800283c:	f7ff fe1a 	bl	8002474 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002840:	f7ff fbfa 	bl	8002038 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40023c00 	.word	0x40023c00

08002850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002854:	4b06      	ldr	r3, [pc, #24]	@ (8002870 <HAL_IncTick+0x20>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	4b06      	ldr	r3, [pc, #24]	@ (8002874 <HAL_IncTick+0x24>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4413      	add	r3, r2
 8002860:	4a04      	ldr	r2, [pc, #16]	@ (8002874 <HAL_IncTick+0x24>)
 8002862:	6013      	str	r3, [r2, #0]
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	2000008c 	.word	0x2000008c
 8002874:	2000053c 	.word	0x2000053c

08002878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return uwTick;
 800287c:	4b03      	ldr	r3, [pc, #12]	@ (800288c <HAL_GetTick+0x14>)
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	2000053c 	.word	0x2000053c

08002890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002898:	f7ff ffee 	bl	8002878 <HAL_GetTick>
 800289c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a8:	d005      	beq.n	80028b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028aa:	4b0a      	ldr	r3, [pc, #40]	@ (80028d4 <HAL_Delay+0x44>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4413      	add	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028b6:	bf00      	nop
 80028b8:	f7ff ffde 	bl	8002878 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d8f7      	bhi.n	80028b8 <HAL_Delay+0x28>
  {
  }
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	2000008c 	.word	0x2000008c

080028d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f003 0307 	and.w	r3, r3, #7
 80028e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e8:	4b0c      	ldr	r3, [pc, #48]	@ (800291c <__NVIC_SetPriorityGrouping+0x44>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028f4:	4013      	ands	r3, r2
 80028f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002900:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002904:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800290a:	4a04      	ldr	r2, [pc, #16]	@ (800291c <__NVIC_SetPriorityGrouping+0x44>)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	60d3      	str	r3, [r2, #12]
}
 8002910:	bf00      	nop
 8002912:	3714      	adds	r7, #20
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002924:	4b04      	ldr	r3, [pc, #16]	@ (8002938 <__NVIC_GetPriorityGrouping+0x18>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	0a1b      	lsrs	r3, r3, #8
 800292a:	f003 0307 	and.w	r3, r3, #7
}
 800292e:	4618      	mov	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	4603      	mov	r3, r0
 8002944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	2b00      	cmp	r3, #0
 800294c:	db0b      	blt.n	8002966 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800294e:	79fb      	ldrb	r3, [r7, #7]
 8002950:	f003 021f 	and.w	r2, r3, #31
 8002954:	4907      	ldr	r1, [pc, #28]	@ (8002974 <__NVIC_EnableIRQ+0x38>)
 8002956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295a:	095b      	lsrs	r3, r3, #5
 800295c:	2001      	movs	r0, #1
 800295e:	fa00 f202 	lsl.w	r2, r0, r2
 8002962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	e000e100 	.word	0xe000e100

08002978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	6039      	str	r1, [r7, #0]
 8002982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002988:	2b00      	cmp	r3, #0
 800298a:	db0a      	blt.n	80029a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	b2da      	uxtb	r2, r3
 8002990:	490c      	ldr	r1, [pc, #48]	@ (80029c4 <__NVIC_SetPriority+0x4c>)
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	0112      	lsls	r2, r2, #4
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	440b      	add	r3, r1
 800299c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029a0:	e00a      	b.n	80029b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	4908      	ldr	r1, [pc, #32]	@ (80029c8 <__NVIC_SetPriority+0x50>)
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	3b04      	subs	r3, #4
 80029b0:	0112      	lsls	r2, r2, #4
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	440b      	add	r3, r1
 80029b6:	761a      	strb	r2, [r3, #24]
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	e000e100 	.word	0xe000e100
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b089      	sub	sp, #36	@ 0x24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f1c3 0307 	rsb	r3, r3, #7
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	bf28      	it	cs
 80029ea:	2304      	movcs	r3, #4
 80029ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3304      	adds	r3, #4
 80029f2:	2b06      	cmp	r3, #6
 80029f4:	d902      	bls.n	80029fc <NVIC_EncodePriority+0x30>
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	3b03      	subs	r3, #3
 80029fa:	e000      	b.n	80029fe <NVIC_EncodePriority+0x32>
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a00:	f04f 32ff 	mov.w	r2, #4294967295
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0a:	43da      	mvns	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	401a      	ands	r2, r3
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a14:	f04f 31ff 	mov.w	r1, #4294967295
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1e:	43d9      	mvns	r1, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a24:	4313      	orrs	r3, r2
         );
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3724      	adds	r7, #36	@ 0x24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff ff4c 	bl	80028d8 <__NVIC_SetPriorityGrouping>
}
 8002a40:	bf00      	nop
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
 8002a54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a5a:	f7ff ff61 	bl	8002920 <__NVIC_GetPriorityGrouping>
 8002a5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	68b9      	ldr	r1, [r7, #8]
 8002a64:	6978      	ldr	r0, [r7, #20]
 8002a66:	f7ff ffb1 	bl	80029cc <NVIC_EncodePriority>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a70:	4611      	mov	r1, r2
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff ff80 	bl	8002978 <__NVIC_SetPriority>
}
 8002a78:	bf00      	nop
 8002a7a:	3718      	adds	r7, #24
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff ff54 	bl	800293c <__NVIC_EnableIRQ>
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002aa8:	f7ff fee6 	bl	8002878 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e099      	b.n	8002bec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f022 0201 	bic.w	r2, r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ad8:	e00f      	b.n	8002afa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ada:	f7ff fecd 	bl	8002878 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b05      	cmp	r3, #5
 8002ae6:	d908      	bls.n	8002afa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2220      	movs	r2, #32
 8002aec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2203      	movs	r2, #3
 8002af2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e078      	b.n	8002bec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d1e8      	bne.n	8002ada <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	4b38      	ldr	r3, [pc, #224]	@ (8002bf4 <HAL_DMA_Init+0x158>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b46:	697a      	ldr	r2, [r7, #20]
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b50:	2b04      	cmp	r3, #4
 8002b52:	d107      	bne.n	8002b64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	f023 0307 	bic.w	r3, r3, #7
 8002b7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d117      	bne.n	8002bbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00e      	beq.n	8002bbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 fb01 	bl	80031a8 <DMA_CheckFifoParam>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2240      	movs	r2, #64	@ 0x40
 8002bb0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e016      	b.n	8002bec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fab8 	bl	800313c <DMA_CalcBaseAndBitshift>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd4:	223f      	movs	r2, #63	@ 0x3f
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002bea:	2300      	movs	r3, #0
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	f010803f 	.word	0xf010803f

08002bf8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_DMA_Start_IT+0x26>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e040      	b.n	8002ca0 <HAL_DMA_Start_IT+0xa8>
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d12f      	bne.n	8002c92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2202      	movs	r2, #2
 8002c36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68b9      	ldr	r1, [r7, #8]
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 fa4a 	bl	80030e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c50:	223f      	movs	r2, #63	@ 0x3f
 8002c52:	409a      	lsls	r2, r3
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0216 	orr.w	r2, r2, #22
 8002c66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d007      	beq.n	8002c80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0208 	orr.w	r2, r2, #8
 8002c7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0201 	orr.w	r2, r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	e005      	b.n	8002c9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002cb6:	f7ff fddf 	bl	8002878 <HAL_GetTick>
 8002cba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d008      	beq.n	8002cda <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2280      	movs	r2, #128	@ 0x80
 8002ccc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e052      	b.n	8002d80 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0216 	bic.w	r2, r2, #22
 8002ce8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695a      	ldr	r2, [r3, #20]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cf8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d103      	bne.n	8002d0a <HAL_DMA_Abort+0x62>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d007      	beq.n	8002d1a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0208 	bic.w	r2, r2, #8
 8002d18:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 0201 	bic.w	r2, r2, #1
 8002d28:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d2a:	e013      	b.n	8002d54 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d2c:	f7ff fda4 	bl	8002878 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b05      	cmp	r3, #5
 8002d38:	d90c      	bls.n	8002d54 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2203      	movs	r2, #3
 8002d44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e015      	b.n	8002d80 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1e4      	bne.n	8002d2c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d66:	223f      	movs	r2, #63	@ 0x3f
 8002d68:	409a      	lsls	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d004      	beq.n	8002da6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2280      	movs	r2, #128	@ 0x80
 8002da0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e00c      	b.n	8002dc0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2205      	movs	r2, #5
 8002daa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f022 0201 	bic.w	r2, r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002dd8:	4b8e      	ldr	r3, [pc, #568]	@ (8003014 <HAL_DMA_IRQHandler+0x248>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a8e      	ldr	r2, [pc, #568]	@ (8003018 <HAL_DMA_IRQHandler+0x24c>)
 8002dde:	fba2 2303 	umull	r2, r3, r2, r3
 8002de2:	0a9b      	lsrs	r3, r3, #10
 8002de4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002df6:	2208      	movs	r2, #8
 8002df8:	409a      	lsls	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d01a      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0304 	and.w	r3, r3, #4
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d013      	beq.n	8002e38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0204 	bic.w	r2, r2, #4
 8002e1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e24:	2208      	movs	r2, #8
 8002e26:	409a      	lsls	r2, r3
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e30:	f043 0201 	orr.w	r2, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	409a      	lsls	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d012      	beq.n	8002e6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00b      	beq.n	8002e6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e66:	f043 0202 	orr.w	r2, r3, #2
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e72:	2204      	movs	r2, #4
 8002e74:	409a      	lsls	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d012      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00b      	beq.n	8002ea4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e90:	2204      	movs	r2, #4
 8002e92:	409a      	lsls	r2, r3
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e9c:	f043 0204 	orr.w	r2, r3, #4
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea8:	2210      	movs	r2, #16
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d043      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0308 	and.w	r3, r3, #8
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d03c      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec6:	2210      	movs	r2, #16
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d018      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d108      	bne.n	8002efc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d024      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	4798      	blx	r3
 8002efa:	e01f      	b.n	8002f3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d01b      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	4798      	blx	r3
 8002f0c:	e016      	b.n	8002f3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d107      	bne.n	8002f2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f022 0208 	bic.w	r2, r2, #8
 8002f2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f40:	2220      	movs	r2, #32
 8002f42:	409a      	lsls	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4013      	ands	r3, r2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 808f 	beq.w	800306c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 8087 	beq.w	800306c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f62:	2220      	movs	r2, #32
 8002f64:	409a      	lsls	r2, r3
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b05      	cmp	r3, #5
 8002f74:	d136      	bne.n	8002fe4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 0216 	bic.w	r2, r2, #22
 8002f84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	695a      	ldr	r2, [r3, #20]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d103      	bne.n	8002fa6 <HAL_DMA_IRQHandler+0x1da>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d007      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 0208 	bic.w	r2, r2, #8
 8002fb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fba:	223f      	movs	r2, #63	@ 0x3f
 8002fbc:	409a      	lsls	r2, r3
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d07e      	beq.n	80030d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	4798      	blx	r3
        }
        return;
 8002fe2:	e079      	b.n	80030d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d01d      	beq.n	800302e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10d      	bne.n	800301c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003004:	2b00      	cmp	r3, #0
 8003006:	d031      	beq.n	800306c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	4798      	blx	r3
 8003010:	e02c      	b.n	800306c <HAL_DMA_IRQHandler+0x2a0>
 8003012:	bf00      	nop
 8003014:	20000084 	.word	0x20000084
 8003018:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003020:	2b00      	cmp	r3, #0
 8003022:	d023      	beq.n	800306c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	4798      	blx	r3
 800302c:	e01e      	b.n	800306c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10f      	bne.n	800305c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0210 	bic.w	r2, r2, #16
 800304a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003070:	2b00      	cmp	r3, #0
 8003072:	d032      	beq.n	80030da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003078:	f003 0301 	and.w	r3, r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	d022      	beq.n	80030c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2205      	movs	r2, #5
 8003084:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0201 	bic.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	3301      	adds	r3, #1
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d307      	bcc.n	80030b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f2      	bne.n	8003098 <HAL_DMA_IRQHandler+0x2cc>
 80030b2:	e000      	b.n	80030b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80030b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2201      	movs	r2, #1
 80030ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d005      	beq.n	80030da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	4798      	blx	r3
 80030d6:	e000      	b.n	80030da <HAL_DMA_IRQHandler+0x30e>
        return;
 80030d8:	bf00      	nop
    }
  }
}
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80030fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	2b40      	cmp	r3, #64	@ 0x40
 800310c:	d108      	bne.n	8003120 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800311e:	e007      	b.n	8003130 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	60da      	str	r2, [r3, #12]
}
 8003130:	bf00      	nop
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	3b10      	subs	r3, #16
 800314c:	4a14      	ldr	r2, [pc, #80]	@ (80031a0 <DMA_CalcBaseAndBitshift+0x64>)
 800314e:	fba2 2303 	umull	r2, r3, r2, r3
 8003152:	091b      	lsrs	r3, r3, #4
 8003154:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003156:	4a13      	ldr	r2, [pc, #76]	@ (80031a4 <DMA_CalcBaseAndBitshift+0x68>)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4413      	add	r3, r2
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2b03      	cmp	r3, #3
 8003168:	d909      	bls.n	800317e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003172:	f023 0303 	bic.w	r3, r3, #3
 8003176:	1d1a      	adds	r2, r3, #4
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	659a      	str	r2, [r3, #88]	@ 0x58
 800317c:	e007      	b.n	800318e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003186:	f023 0303 	bic.w	r3, r3, #3
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	aaaaaaab 	.word	0xaaaaaaab
 80031a4:	0800be84 	.word	0x0800be84

080031a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031b0:	2300      	movs	r3, #0
 80031b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d11f      	bne.n	8003202 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d856      	bhi.n	8003276 <DMA_CheckFifoParam+0xce>
 80031c8:	a201      	add	r2, pc, #4	@ (adr r2, 80031d0 <DMA_CheckFifoParam+0x28>)
 80031ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ce:	bf00      	nop
 80031d0:	080031e1 	.word	0x080031e1
 80031d4:	080031f3 	.word	0x080031f3
 80031d8:	080031e1 	.word	0x080031e1
 80031dc:	08003277 	.word	0x08003277
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d046      	beq.n	800327a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031f0:	e043      	b.n	800327a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80031fa:	d140      	bne.n	800327e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003200:	e03d      	b.n	800327e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800320a:	d121      	bne.n	8003250 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b03      	cmp	r3, #3
 8003210:	d837      	bhi.n	8003282 <DMA_CheckFifoParam+0xda>
 8003212:	a201      	add	r2, pc, #4	@ (adr r2, 8003218 <DMA_CheckFifoParam+0x70>)
 8003214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003218:	08003229 	.word	0x08003229
 800321c:	0800322f 	.word	0x0800322f
 8003220:	08003229 	.word	0x08003229
 8003224:	08003241 	.word	0x08003241
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	73fb      	strb	r3, [r7, #15]
      break;
 800322c:	e030      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003232:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d025      	beq.n	8003286 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800323e:	e022      	b.n	8003286 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003244:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003248:	d11f      	bne.n	800328a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800324e:	e01c      	b.n	800328a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b02      	cmp	r3, #2
 8003254:	d903      	bls.n	800325e <DMA_CheckFifoParam+0xb6>
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2b03      	cmp	r3, #3
 800325a:	d003      	beq.n	8003264 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800325c:	e018      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	73fb      	strb	r3, [r7, #15]
      break;
 8003262:	e015      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003268:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00e      	beq.n	800328e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	73fb      	strb	r3, [r7, #15]
      break;
 8003274:	e00b      	b.n	800328e <DMA_CheckFifoParam+0xe6>
      break;
 8003276:	bf00      	nop
 8003278:	e00a      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      break;
 800327a:	bf00      	nop
 800327c:	e008      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      break;
 800327e:	bf00      	nop
 8003280:	e006      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      break;
 8003282:	bf00      	nop
 8003284:	e004      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      break;
 8003286:	bf00      	nop
 8003288:	e002      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      break;   
 800328a:	bf00      	nop
 800328c:	e000      	b.n	8003290 <DMA_CheckFifoParam+0xe8>
      break;
 800328e:	bf00      	nop
    }
  } 
  
  return status; 
 8003290:	7bfb      	ldrb	r3, [r7, #15]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop

080032a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b089      	sub	sp, #36	@ 0x24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032ae:	2300      	movs	r3, #0
 80032b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032b6:	2300      	movs	r3, #0
 80032b8:	61fb      	str	r3, [r7, #28]
 80032ba:	e159      	b.n	8003570 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032bc:	2201      	movs	r2, #1
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	4013      	ands	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	f040 8148 	bne.w	800356a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d005      	beq.n	80032f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d130      	bne.n	8003354 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	2203      	movs	r2, #3
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	43db      	mvns	r3, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4013      	ands	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4313      	orrs	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003328:	2201      	movs	r2, #1
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	fa02 f303 	lsl.w	r3, r2, r3
 8003330:	43db      	mvns	r3, r3
 8003332:	69ba      	ldr	r2, [r7, #24]
 8003334:	4013      	ands	r3, r2
 8003336:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	091b      	lsrs	r3, r3, #4
 800333e:	f003 0201 	and.w	r2, r3, #1
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4313      	orrs	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	2b03      	cmp	r3, #3
 800335e:	d017      	beq.n	8003390 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	2203      	movs	r2, #3
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4013      	ands	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	4313      	orrs	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d123      	bne.n	80033e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	08da      	lsrs	r2, r3, #3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3208      	adds	r2, #8
 80033a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	220f      	movs	r2, #15
 80033b4:	fa02 f303 	lsl.w	r3, r2, r3
 80033b8:	43db      	mvns	r3, r3
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	4013      	ands	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	691a      	ldr	r2, [r3, #16]
 80033c4:	69fb      	ldr	r3, [r7, #28]
 80033c6:	f003 0307 	and.w	r3, r3, #7
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	69ba      	ldr	r2, [r7, #24]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	08da      	lsrs	r2, r3, #3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	3208      	adds	r2, #8
 80033de:	69b9      	ldr	r1, [r7, #24]
 80033e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	2203      	movs	r2, #3
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4013      	ands	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 0203 	and.w	r2, r3, #3
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	69ba      	ldr	r2, [r7, #24]
 800340e:	4313      	orrs	r3, r2
 8003410:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003420:	2b00      	cmp	r3, #0
 8003422:	f000 80a2 	beq.w	800356a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	4b57      	ldr	r3, [pc, #348]	@ (8003588 <HAL_GPIO_Init+0x2e8>)
 800342c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342e:	4a56      	ldr	r2, [pc, #344]	@ (8003588 <HAL_GPIO_Init+0x2e8>)
 8003430:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003434:	6453      	str	r3, [r2, #68]	@ 0x44
 8003436:	4b54      	ldr	r3, [pc, #336]	@ (8003588 <HAL_GPIO_Init+0x2e8>)
 8003438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800343a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003442:	4a52      	ldr	r2, [pc, #328]	@ (800358c <HAL_GPIO_Init+0x2ec>)
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	089b      	lsrs	r3, r3, #2
 8003448:	3302      	adds	r3, #2
 800344a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800344e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	220f      	movs	r2, #15
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	43db      	mvns	r3, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4013      	ands	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a49      	ldr	r2, [pc, #292]	@ (8003590 <HAL_GPIO_Init+0x2f0>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d019      	beq.n	80034a2 <HAL_GPIO_Init+0x202>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a48      	ldr	r2, [pc, #288]	@ (8003594 <HAL_GPIO_Init+0x2f4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d013      	beq.n	800349e <HAL_GPIO_Init+0x1fe>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a47      	ldr	r2, [pc, #284]	@ (8003598 <HAL_GPIO_Init+0x2f8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00d      	beq.n	800349a <HAL_GPIO_Init+0x1fa>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a46      	ldr	r2, [pc, #280]	@ (800359c <HAL_GPIO_Init+0x2fc>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d007      	beq.n	8003496 <HAL_GPIO_Init+0x1f6>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a45      	ldr	r2, [pc, #276]	@ (80035a0 <HAL_GPIO_Init+0x300>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d101      	bne.n	8003492 <HAL_GPIO_Init+0x1f2>
 800348e:	2304      	movs	r3, #4
 8003490:	e008      	b.n	80034a4 <HAL_GPIO_Init+0x204>
 8003492:	2307      	movs	r3, #7
 8003494:	e006      	b.n	80034a4 <HAL_GPIO_Init+0x204>
 8003496:	2303      	movs	r3, #3
 8003498:	e004      	b.n	80034a4 <HAL_GPIO_Init+0x204>
 800349a:	2302      	movs	r3, #2
 800349c:	e002      	b.n	80034a4 <HAL_GPIO_Init+0x204>
 800349e:	2301      	movs	r3, #1
 80034a0:	e000      	b.n	80034a4 <HAL_GPIO_Init+0x204>
 80034a2:	2300      	movs	r3, #0
 80034a4:	69fa      	ldr	r2, [r7, #28]
 80034a6:	f002 0203 	and.w	r2, r2, #3
 80034aa:	0092      	lsls	r2, r2, #2
 80034ac:	4093      	lsls	r3, r2
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034b4:	4935      	ldr	r1, [pc, #212]	@ (800358c <HAL_GPIO_Init+0x2ec>)
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	089b      	lsrs	r3, r3, #2
 80034ba:	3302      	adds	r3, #2
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034c2:	4b38      	ldr	r3, [pc, #224]	@ (80035a4 <HAL_GPIO_Init+0x304>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	43db      	mvns	r3, r3
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4013      	ands	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80034de:	69ba      	ldr	r2, [r7, #24]
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034e6:	4a2f      	ldr	r2, [pc, #188]	@ (80035a4 <HAL_GPIO_Init+0x304>)
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034ec:	4b2d      	ldr	r3, [pc, #180]	@ (80035a4 <HAL_GPIO_Init+0x304>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	43db      	mvns	r3, r3
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	4013      	ands	r3, r2
 80034fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	4313      	orrs	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003510:	4a24      	ldr	r2, [pc, #144]	@ (80035a4 <HAL_GPIO_Init+0x304>)
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003516:	4b23      	ldr	r3, [pc, #140]	@ (80035a4 <HAL_GPIO_Init+0x304>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	43db      	mvns	r3, r3
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	4013      	ands	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d003      	beq.n	800353a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	4313      	orrs	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800353a:	4a1a      	ldr	r2, [pc, #104]	@ (80035a4 <HAL_GPIO_Init+0x304>)
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003540:	4b18      	ldr	r3, [pc, #96]	@ (80035a4 <HAL_GPIO_Init+0x304>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	43db      	mvns	r3, r3
 800354a:	69ba      	ldr	r2, [r7, #24]
 800354c:	4013      	ands	r3, r2
 800354e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d003      	beq.n	8003564 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	4313      	orrs	r3, r2
 8003562:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003564:	4a0f      	ldr	r2, [pc, #60]	@ (80035a4 <HAL_GPIO_Init+0x304>)
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	3301      	adds	r3, #1
 800356e:	61fb      	str	r3, [r7, #28]
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	2b0f      	cmp	r3, #15
 8003574:	f67f aea2 	bls.w	80032bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003578:	bf00      	nop
 800357a:	bf00      	nop
 800357c:	3724      	adds	r7, #36	@ 0x24
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	40023800 	.word	0x40023800
 800358c:	40013800 	.word	0x40013800
 8003590:	40020000 	.word	0x40020000
 8003594:	40020400 	.word	0x40020400
 8003598:	40020800 	.word	0x40020800
 800359c:	40020c00 	.word	0x40020c00
 80035a0:	40021000 	.word	0x40021000
 80035a4:	40013c00 	.word	0x40013c00

080035a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	807b      	strh	r3, [r7, #2]
 80035b4:	4613      	mov	r3, r2
 80035b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035b8:	787b      	ldrb	r3, [r7, #1]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035be:	887a      	ldrh	r2, [r7, #2]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035c4:	e003      	b.n	80035ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035c6:	887b      	ldrh	r3, [r7, #2]
 80035c8:	041a      	lsls	r2, r3, #16
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	619a      	str	r2, [r3, #24]
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
	...

080035dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e12b      	b.n	8003846 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d106      	bne.n	8003608 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7fe fd40 	bl	8002088 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2224      	movs	r2, #36	@ 0x24
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0201 	bic.w	r2, r2, #1
 800361e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800362e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800363e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003640:	f001 fa48 	bl	8004ad4 <HAL_RCC_GetPCLK1Freq>
 8003644:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	4a81      	ldr	r2, [pc, #516]	@ (8003850 <HAL_I2C_Init+0x274>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d807      	bhi.n	8003660 <HAL_I2C_Init+0x84>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	4a80      	ldr	r2, [pc, #512]	@ (8003854 <HAL_I2C_Init+0x278>)
 8003654:	4293      	cmp	r3, r2
 8003656:	bf94      	ite	ls
 8003658:	2301      	movls	r3, #1
 800365a:	2300      	movhi	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	e006      	b.n	800366e <HAL_I2C_Init+0x92>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	4a7d      	ldr	r2, [pc, #500]	@ (8003858 <HAL_I2C_Init+0x27c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	bf94      	ite	ls
 8003668:	2301      	movls	r3, #1
 800366a:	2300      	movhi	r3, #0
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e0e7      	b.n	8003846 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	4a78      	ldr	r2, [pc, #480]	@ (800385c <HAL_I2C_Init+0x280>)
 800367a:	fba2 2303 	umull	r2, r3, r2, r3
 800367e:	0c9b      	lsrs	r3, r3, #18
 8003680:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68ba      	ldr	r2, [r7, #8]
 8003692:	430a      	orrs	r2, r1
 8003694:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	4a6a      	ldr	r2, [pc, #424]	@ (8003850 <HAL_I2C_Init+0x274>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d802      	bhi.n	80036b0 <HAL_I2C_Init+0xd4>
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	3301      	adds	r3, #1
 80036ae:	e009      	b.n	80036c4 <HAL_I2C_Init+0xe8>
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80036b6:	fb02 f303 	mul.w	r3, r2, r3
 80036ba:	4a69      	ldr	r2, [pc, #420]	@ (8003860 <HAL_I2C_Init+0x284>)
 80036bc:	fba2 2303 	umull	r2, r3, r2, r3
 80036c0:	099b      	lsrs	r3, r3, #6
 80036c2:	3301      	adds	r3, #1
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	6812      	ldr	r2, [r2, #0]
 80036c8:	430b      	orrs	r3, r1
 80036ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80036d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	495c      	ldr	r1, [pc, #368]	@ (8003850 <HAL_I2C_Init+0x274>)
 80036e0:	428b      	cmp	r3, r1
 80036e2:	d819      	bhi.n	8003718 <HAL_I2C_Init+0x13c>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	1e59      	subs	r1, r3, #1
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80036f2:	1c59      	adds	r1, r3, #1
 80036f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80036f8:	400b      	ands	r3, r1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <HAL_I2C_Init+0x138>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	1e59      	subs	r1, r3, #1
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	fbb1 f3f3 	udiv	r3, r1, r3
 800370c:	3301      	adds	r3, #1
 800370e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003712:	e051      	b.n	80037b8 <HAL_I2C_Init+0x1dc>
 8003714:	2304      	movs	r3, #4
 8003716:	e04f      	b.n	80037b8 <HAL_I2C_Init+0x1dc>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d111      	bne.n	8003744 <HAL_I2C_Init+0x168>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	1e58      	subs	r0, r3, #1
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6859      	ldr	r1, [r3, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	440b      	add	r3, r1
 800372e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003732:	3301      	adds	r3, #1
 8003734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003738:	2b00      	cmp	r3, #0
 800373a:	bf0c      	ite	eq
 800373c:	2301      	moveq	r3, #1
 800373e:	2300      	movne	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	e012      	b.n	800376a <HAL_I2C_Init+0x18e>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	1e58      	subs	r0, r3, #1
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6859      	ldr	r1, [r3, #4]
 800374c:	460b      	mov	r3, r1
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	0099      	lsls	r1, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	fbb0 f3f3 	udiv	r3, r0, r3
 800375a:	3301      	adds	r3, #1
 800375c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003760:	2b00      	cmp	r3, #0
 8003762:	bf0c      	ite	eq
 8003764:	2301      	moveq	r3, #1
 8003766:	2300      	movne	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <HAL_I2C_Init+0x196>
 800376e:	2301      	movs	r3, #1
 8003770:	e022      	b.n	80037b8 <HAL_I2C_Init+0x1dc>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10e      	bne.n	8003798 <HAL_I2C_Init+0x1bc>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	1e58      	subs	r0, r3, #1
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6859      	ldr	r1, [r3, #4]
 8003782:	460b      	mov	r3, r1
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	440b      	add	r3, r1
 8003788:	fbb0 f3f3 	udiv	r3, r0, r3
 800378c:	3301      	adds	r3, #1
 800378e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003792:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003796:	e00f      	b.n	80037b8 <HAL_I2C_Init+0x1dc>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	1e58      	subs	r0, r3, #1
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6859      	ldr	r1, [r3, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	0099      	lsls	r1, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ae:	3301      	adds	r3, #1
 80037b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	6809      	ldr	r1, [r1, #0]
 80037bc:	4313      	orrs	r3, r2
 80037be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69da      	ldr	r2, [r3, #28]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a1b      	ldr	r3, [r3, #32]
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80037e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6911      	ldr	r1, [r2, #16]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	68d2      	ldr	r2, [r2, #12]
 80037f2:	4311      	orrs	r1, r2
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	6812      	ldr	r2, [r2, #0]
 80037f8:	430b      	orrs	r3, r1
 80037fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	695a      	ldr	r2, [r3, #20]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	430a      	orrs	r2, r1
 8003816:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2220      	movs	r2, #32
 8003832:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3710      	adds	r7, #16
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
 800384e:	bf00      	nop
 8003850:	000186a0 	.word	0x000186a0
 8003854:	001e847f 	.word	0x001e847f
 8003858:	003d08ff 	.word	0x003d08ff
 800385c:	431bde83 	.word	0x431bde83
 8003860:	10624dd3 	.word	0x10624dd3

08003864 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b08c      	sub	sp, #48	@ 0x30
 8003868:	af02      	add	r7, sp, #8
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	4608      	mov	r0, r1
 800386e:	4611      	mov	r1, r2
 8003870:	461a      	mov	r2, r3
 8003872:	4603      	mov	r3, r0
 8003874:	817b      	strh	r3, [r7, #10]
 8003876:	460b      	mov	r3, r1
 8003878:	813b      	strh	r3, [r7, #8]
 800387a:	4613      	mov	r3, r2
 800387c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800387e:	f7fe fffb 	bl	8002878 <HAL_GetTick>
 8003882:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b20      	cmp	r3, #32
 800388e:	f040 8214 	bne.w	8003cba <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	2319      	movs	r3, #25
 8003898:	2201      	movs	r2, #1
 800389a:	497b      	ldr	r1, [pc, #492]	@ (8003a88 <HAL_I2C_Mem_Read+0x224>)
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 fafb 	bl	8003e98 <I2C_WaitOnFlagUntilTimeout>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80038a8:	2302      	movs	r3, #2
 80038aa:	e207      	b.n	8003cbc <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d101      	bne.n	80038ba <HAL_I2C_Mem_Read+0x56>
 80038b6:	2302      	movs	r3, #2
 80038b8:	e200      	b.n	8003cbc <HAL_I2C_Mem_Read+0x458>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d007      	beq.n	80038e0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f042 0201 	orr.w	r2, r2, #1
 80038de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2222      	movs	r2, #34	@ 0x22
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2240      	movs	r2, #64	@ 0x40
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2200      	movs	r2, #0
 8003904:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800390a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003910:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4a5b      	ldr	r2, [pc, #364]	@ (8003a8c <HAL_I2C_Mem_Read+0x228>)
 8003920:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003922:	88f8      	ldrh	r0, [r7, #6]
 8003924:	893a      	ldrh	r2, [r7, #8]
 8003926:	8979      	ldrh	r1, [r7, #10]
 8003928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800392a:	9301      	str	r3, [sp, #4]
 800392c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	4603      	mov	r3, r0
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 f9c8 	bl	8003cc8 <I2C_RequestMemoryRead>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e1bc      	b.n	8003cbc <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003946:	2b00      	cmp	r3, #0
 8003948:	d113      	bne.n	8003972 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800394a:	2300      	movs	r3, #0
 800394c:	623b      	str	r3, [r7, #32]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	623b      	str	r3, [r7, #32]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	623b      	str	r3, [r7, #32]
 800395e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	e190      	b.n	8003c94 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003976:	2b01      	cmp	r3, #1
 8003978:	d11b      	bne.n	80039b2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003988:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	61fb      	str	r3, [r7, #28]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	61fb      	str	r3, [r7, #28]
 800399e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039ae:	601a      	str	r2, [r3, #0]
 80039b0:	e170      	b.n	8003c94 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d11b      	bne.n	80039f2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039da:	2300      	movs	r3, #0
 80039dc:	61bb      	str	r3, [r7, #24]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	61bb      	str	r3, [r7, #24]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	699b      	ldr	r3, [r3, #24]
 80039ec:	61bb      	str	r3, [r7, #24]
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	e150      	b.n	8003c94 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039f2:	2300      	movs	r3, #0
 80039f4:	617b      	str	r3, [r7, #20]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	617b      	str	r3, [r7, #20]
 8003a06:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a08:	e144      	b.n	8003c94 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a0e:	2b03      	cmp	r3, #3
 8003a10:	f200 80f1 	bhi.w	8003bf6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d123      	bne.n	8003a64 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a1e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 fb9b 	bl	800415c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e145      	b.n	8003cbc <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	691a      	ldr	r2, [r3, #16]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a42:	1c5a      	adds	r2, r3, #1
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a4c:	3b01      	subs	r3, #1
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a62:	e117      	b.n	8003c94 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d14e      	bne.n	8003b0a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6e:	9300      	str	r3, [sp, #0]
 8003a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a72:	2200      	movs	r2, #0
 8003a74:	4906      	ldr	r1, [pc, #24]	@ (8003a90 <HAL_I2C_Mem_Read+0x22c>)
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f000 fa0e 	bl	8003e98 <I2C_WaitOnFlagUntilTimeout>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d008      	beq.n	8003a94 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e11a      	b.n	8003cbc <HAL_I2C_Mem_Read+0x458>
 8003a86:	bf00      	nop
 8003a88:	00100002 	.word	0x00100002
 8003a8c:	ffff0000 	.word	0xffff0000
 8003a90:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	691a      	ldr	r2, [r3, #16]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aae:	b2d2      	uxtb	r2, r2
 8003ab0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ab6:	1c5a      	adds	r2, r3, #1
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae8:	1c5a      	adds	r2, r3, #1
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b08:	e0c4      	b.n	8003c94 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b10:	2200      	movs	r2, #0
 8003b12:	496c      	ldr	r1, [pc, #432]	@ (8003cc4 <HAL_I2C_Mem_Read+0x460>)
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 f9bf 	bl	8003e98 <I2C_WaitOnFlagUntilTimeout>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e0cb      	b.n	8003cbc <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	691a      	ldr	r2, [r3, #16]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b46:	1c5a      	adds	r2, r3, #1
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b50:	3b01      	subs	r3, #1
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	4955      	ldr	r1, [pc, #340]	@ (8003cc4 <HAL_I2C_Mem_Read+0x460>)
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f000 f991 	bl	8003e98 <I2C_WaitOnFlagUntilTimeout>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e09d      	b.n	8003cbc <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	691a      	ldr	r2, [r3, #16]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9a:	b2d2      	uxtb	r2, r2
 8003b9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bac:	3b01      	subs	r3, #1
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	3b01      	subs	r3, #1
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	691a      	ldr	r2, [r3, #16]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bde:	3b01      	subs	r3, #1
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003bf4:	e04e      	b.n	8003c94 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bf8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 faae 	bl	800415c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e058      	b.n	8003cbc <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	691a      	ldr	r2, [r3, #16]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c14:	b2d2      	uxtb	r2, r2
 8003c16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c1c:	1c5a      	adds	r2, r3, #1
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	f003 0304 	and.w	r3, r3, #4
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d124      	bne.n	8003c94 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c4e:	2b03      	cmp	r3, #3
 8003c50:	d107      	bne.n	8003c62 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c60:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	691a      	ldr	r2, [r3, #16]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6c:	b2d2      	uxtb	r2, r2
 8003c6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	b29a      	uxth	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	f47f aeb6 	bne.w	8003a0a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	e000      	b.n	8003cbc <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003cba:	2302      	movs	r3, #2
  }
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3728      	adds	r7, #40	@ 0x28
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	00010004 	.word	0x00010004

08003cc8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b088      	sub	sp, #32
 8003ccc:	af02      	add	r7, sp, #8
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	4608      	mov	r0, r1
 8003cd2:	4611      	mov	r1, r2
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	817b      	strh	r3, [r7, #10]
 8003cda:	460b      	mov	r3, r1
 8003cdc:	813b      	strh	r3, [r7, #8]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003cf0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d00:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 f8c2 	bl	8003e98 <I2C_WaitOnFlagUntilTimeout>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d00d      	beq.n	8003d36 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d28:	d103      	bne.n	8003d32 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d30:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e0aa      	b.n	8003e8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d36:	897b      	ldrh	r3, [r7, #10]
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003d44:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d48:	6a3a      	ldr	r2, [r7, #32]
 8003d4a:	4952      	ldr	r1, [pc, #328]	@ (8003e94 <I2C_RequestMemoryRead+0x1cc>)
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f000 f91d 	bl	8003f8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d52:	4603      	mov	r3, r0
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e097      	b.n	8003e8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699b      	ldr	r3, [r3, #24]
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d74:	6a39      	ldr	r1, [r7, #32]
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 f9a8 	bl	80040cc <I2C_WaitOnTXEFlagUntilTimeout>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00d      	beq.n	8003d9e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d86:	2b04      	cmp	r3, #4
 8003d88:	d107      	bne.n	8003d9a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d98:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e076      	b.n	8003e8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d9e:	88fb      	ldrh	r3, [r7, #6]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d105      	bne.n	8003db0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003da4:	893b      	ldrh	r3, [r7, #8]
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	611a      	str	r2, [r3, #16]
 8003dae:	e021      	b.n	8003df4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003db0:	893b      	ldrh	r3, [r7, #8]
 8003db2:	0a1b      	lsrs	r3, r3, #8
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	b2da      	uxtb	r2, r3
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dc0:	6a39      	ldr	r1, [r7, #32]
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 f982 	bl	80040cc <I2C_WaitOnTXEFlagUntilTimeout>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00d      	beq.n	8003dea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d107      	bne.n	8003de6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003de4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e050      	b.n	8003e8c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dea:	893b      	ldrh	r3, [r7, #8]
 8003dec:	b2da      	uxtb	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003df4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003df6:	6a39      	ldr	r1, [r7, #32]
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 f967 	bl	80040cc <I2C_WaitOnTXEFlagUntilTimeout>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00d      	beq.n	8003e20 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d107      	bne.n	8003e1c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e1a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e035      	b.n	8003e8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e2e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e32:	9300      	str	r3, [sp, #0]
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 f82b 	bl	8003e98 <I2C_WaitOnFlagUntilTimeout>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00d      	beq.n	8003e64 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e56:	d103      	bne.n	8003e60 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e5e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e013      	b.n	8003e8c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e64:	897b      	ldrh	r3, [r7, #10]
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	f043 0301 	orr.w	r3, r3, #1
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e76:	6a3a      	ldr	r2, [r7, #32]
 8003e78:	4906      	ldr	r1, [pc, #24]	@ (8003e94 <I2C_RequestMemoryRead+0x1cc>)
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 f886 	bl	8003f8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e000      	b.n	8003e8c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3718      	adds	r7, #24
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	00010002 	.word	0x00010002

08003e98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	603b      	str	r3, [r7, #0]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ea8:	e048      	b.n	8003f3c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb0:	d044      	beq.n	8003f3c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb2:	f7fe fce1 	bl	8002878 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	69bb      	ldr	r3, [r7, #24]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d302      	bcc.n	8003ec8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d139      	bne.n	8003f3c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	0c1b      	lsrs	r3, r3, #16
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d10d      	bne.n	8003eee <I2C_WaitOnFlagUntilTimeout+0x56>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	43da      	mvns	r2, r3
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	4013      	ands	r3, r2
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	bf0c      	ite	eq
 8003ee4:	2301      	moveq	r3, #1
 8003ee6:	2300      	movne	r3, #0
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	461a      	mov	r2, r3
 8003eec:	e00c      	b.n	8003f08 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	43da      	mvns	r2, r3
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	bf0c      	ite	eq
 8003f00:	2301      	moveq	r3, #1
 8003f02:	2300      	movne	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	461a      	mov	r2, r3
 8003f08:	79fb      	ldrb	r3, [r7, #7]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d116      	bne.n	8003f3c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f28:	f043 0220 	orr.w	r2, r3, #32
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e023      	b.n	8003f84 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	0c1b      	lsrs	r3, r3, #16
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d10d      	bne.n	8003f62 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	43da      	mvns	r2, r3
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	4013      	ands	r3, r2
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	bf0c      	ite	eq
 8003f58:	2301      	moveq	r3, #1
 8003f5a:	2300      	movne	r3, #0
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	461a      	mov	r2, r3
 8003f60:	e00c      	b.n	8003f7c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	43da      	mvns	r2, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	bf0c      	ite	eq
 8003f74:	2301      	moveq	r3, #1
 8003f76:	2300      	movne	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	79fb      	ldrb	r3, [r7, #7]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d093      	beq.n	8003eaa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3710      	adds	r7, #16
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f9a:	e071      	b.n	8004080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003faa:	d123      	bne.n	8003ff4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fe0:	f043 0204 	orr.w	r2, r3, #4
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e067      	b.n	80040c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffa:	d041      	beq.n	8004080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ffc:	f7fe fc3c 	bl	8002878 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	429a      	cmp	r2, r3
 800400a:	d302      	bcc.n	8004012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d136      	bne.n	8004080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	0c1b      	lsrs	r3, r3, #16
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b01      	cmp	r3, #1
 800401a:	d10c      	bne.n	8004036 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	43da      	mvns	r2, r3
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	4013      	ands	r3, r2
 8004028:	b29b      	uxth	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	bf14      	ite	ne
 800402e:	2301      	movne	r3, #1
 8004030:	2300      	moveq	r3, #0
 8004032:	b2db      	uxtb	r3, r3
 8004034:	e00b      	b.n	800404e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	43da      	mvns	r2, r3
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	4013      	ands	r3, r2
 8004042:	b29b      	uxth	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	bf14      	ite	ne
 8004048:	2301      	movne	r3, #1
 800404a:	2300      	moveq	r3, #0
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d016      	beq.n	8004080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2220      	movs	r2, #32
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406c:	f043 0220 	orr.w	r2, r3, #32
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e021      	b.n	80040c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	0c1b      	lsrs	r3, r3, #16
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b01      	cmp	r3, #1
 8004088:	d10c      	bne.n	80040a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	43da      	mvns	r2, r3
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	4013      	ands	r3, r2
 8004096:	b29b      	uxth	r3, r3
 8004098:	2b00      	cmp	r3, #0
 800409a:	bf14      	ite	ne
 800409c:	2301      	movne	r3, #1
 800409e:	2300      	moveq	r3, #0
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	e00b      	b.n	80040bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	43da      	mvns	r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4013      	ands	r3, r2
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	bf14      	ite	ne
 80040b6:	2301      	movne	r3, #1
 80040b8:	2300      	moveq	r3, #0
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f47f af6d 	bne.w	8003f9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040d8:	e034      	b.n	8004144 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f89b 	bl	8004216 <I2C_IsAcknowledgeFailed>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e034      	b.n	8004154 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f0:	d028      	beq.n	8004144 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040f2:	f7fe fbc1 	bl	8002878 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d302      	bcc.n	8004108 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d11d      	bne.n	8004144 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004112:	2b80      	cmp	r3, #128	@ 0x80
 8004114:	d016      	beq.n	8004144 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004130:	f043 0220 	orr.w	r2, r3, #32
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e007      	b.n	8004154 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800414e:	2b80      	cmp	r3, #128	@ 0x80
 8004150:	d1c3      	bne.n	80040da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004168:	e049      	b.n	80041fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	f003 0310 	and.w	r3, r3, #16
 8004174:	2b10      	cmp	r3, #16
 8004176:	d119      	bne.n	80041ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f06f 0210 	mvn.w	r2, #16
 8004180:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e030      	b.n	800420e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ac:	f7fe fb64 	bl	8002878 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d302      	bcc.n	80041c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d11d      	bne.n	80041fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041cc:	2b40      	cmp	r3, #64	@ 0x40
 80041ce:	d016      	beq.n	80041fe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2200      	movs	r2, #0
 80041d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2220      	movs	r2, #32
 80041da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ea:	f043 0220 	orr.w	r2, r3, #32
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e007      	b.n	800420e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	695b      	ldr	r3, [r3, #20]
 8004204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004208:	2b40      	cmp	r3, #64	@ 0x40
 800420a:	d1ae      	bne.n	800416a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	695b      	ldr	r3, [r3, #20]
 8004224:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004228:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800422c:	d11b      	bne.n	8004266 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004236:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2220      	movs	r2, #32
 8004242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004252:	f043 0204 	orr.w	r2, r3, #4
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e000      	b.n	8004268 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e267      	b.n	8004756 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d075      	beq.n	800437e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004292:	4b88      	ldr	r3, [pc, #544]	@ (80044b4 <HAL_RCC_OscConfig+0x240>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f003 030c 	and.w	r3, r3, #12
 800429a:	2b04      	cmp	r3, #4
 800429c:	d00c      	beq.n	80042b8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800429e:	4b85      	ldr	r3, [pc, #532]	@ (80044b4 <HAL_RCC_OscConfig+0x240>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80042a6:	2b08      	cmp	r3, #8
 80042a8:	d112      	bne.n	80042d0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80042aa:	4b82      	ldr	r3, [pc, #520]	@ (80044b4 <HAL_RCC_OscConfig+0x240>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042b6:	d10b      	bne.n	80042d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b8:	4b7e      	ldr	r3, [pc, #504]	@ (80044b4 <HAL_RCC_OscConfig+0x240>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d05b      	beq.n	800437c <HAL_RCC_OscConfig+0x108>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d157      	bne.n	800437c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e242      	b.n	8004756 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042d8:	d106      	bne.n	80042e8 <HAL_RCC_OscConfig+0x74>
 80042da:	4b76      	ldr	r3, [pc, #472]	@ (80044b4 <HAL_RCC_OscConfig+0x240>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a75      	ldr	r2, [pc, #468]	@ (80044b4 <HAL_RCC_OscConfig+0x240>)
 80042e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	e01d      	b.n	8004324 <HAL_RCC_OscConfig+0xb0>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042f0:	d10c      	bne.n	800430c <HAL_RCC_OscConfig+0x98>
 80042f2:	4b70      	ldr	r3, [pc, #448]	@ (80044b4 <HAL_RCC_OscConfig+0x240>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a6f      	ldr	r2, [pc, #444]	@ (80044b4 <HAL_RCC_OscConfig+0x240>)
 80042f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	4b6d      	ldr	r3, [pc, #436]	@ (80044b4 <HAL_RCC_OscConfig+0x240>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a6c      	ldr	r2, [pc, #432]	@ (80044b4 <HAL_RCC_OscConfig+0x240>)
 8004304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	e00b      	b.n	8004324 <HAL_RCC_OscConfig+0xb0>
 800430c:	4b69      	ldr	r3, [pc, #420]	@ (80044b4 <HAL_RCC_OscConfig+0x240>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a68      	ldr	r2, [pc, #416]	@ (80044b4 <HAL_RCC_OscConfig+0x240>)
 8004312:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004316:	6013      	str	r3, [r2, #0]
 8004318:	4b66      	ldr	r3, [pc, #408]	@ (80044b4 <HAL_RCC_OscConfig+0x240>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a65      	ldr	r2, [pc, #404]	@ (80044b4 <HAL_RCC_OscConfig+0x240>)
 800431e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d013      	beq.n	8004354 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432c:	f7fe faa4 	bl	8002878 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004334:	f7fe faa0 	bl	8002878 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b64      	cmp	r3, #100	@ 0x64
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e207      	b.n	8004756 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004346:	4b5b      	ldr	r3, [pc, #364]	@ (80044b4 <HAL_RCC_OscConfig+0x240>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0f0      	beq.n	8004334 <HAL_RCC_OscConfig+0xc0>
 8004352:	e014      	b.n	800437e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004354:	f7fe fa90 	bl	8002878 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800435c:	f7fe fa8c 	bl	8002878 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b64      	cmp	r3, #100	@ 0x64
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e1f3      	b.n	8004756 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436e:	4b51      	ldr	r3, [pc, #324]	@ (80044b4 <HAL_RCC_OscConfig+0x240>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1f0      	bne.n	800435c <HAL_RCC_OscConfig+0xe8>
 800437a:	e000      	b.n	800437e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800437c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d063      	beq.n	8004452 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800438a:	4b4a      	ldr	r3, [pc, #296]	@ (80044b4 <HAL_RCC_OscConfig+0x240>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 030c 	and.w	r3, r3, #12
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00b      	beq.n	80043ae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004396:	4b47      	ldr	r3, [pc, #284]	@ (80044b4 <HAL_RCC_OscConfig+0x240>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d11c      	bne.n	80043dc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043a2:	4b44      	ldr	r3, [pc, #272]	@ (80044b4 <HAL_RCC_OscConfig+0x240>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d116      	bne.n	80043dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ae:	4b41      	ldr	r3, [pc, #260]	@ (80044b4 <HAL_RCC_OscConfig+0x240>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d005      	beq.n	80043c6 <HAL_RCC_OscConfig+0x152>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d001      	beq.n	80043c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e1c7      	b.n	8004756 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c6:	4b3b      	ldr	r3, [pc, #236]	@ (80044b4 <HAL_RCC_OscConfig+0x240>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	4937      	ldr	r1, [pc, #220]	@ (80044b4 <HAL_RCC_OscConfig+0x240>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043da:	e03a      	b.n	8004452 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d020      	beq.n	8004426 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043e4:	4b34      	ldr	r3, [pc, #208]	@ (80044b8 <HAL_RCC_OscConfig+0x244>)
 80043e6:	2201      	movs	r2, #1
 80043e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ea:	f7fe fa45 	bl	8002878 <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f0:	e008      	b.n	8004404 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043f2:	f7fe fa41 	bl	8002878 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e1a8      	b.n	8004756 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004404:	4b2b      	ldr	r3, [pc, #172]	@ (80044b4 <HAL_RCC_OscConfig+0x240>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0f0      	beq.n	80043f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004410:	4b28      	ldr	r3, [pc, #160]	@ (80044b4 <HAL_RCC_OscConfig+0x240>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	4925      	ldr	r1, [pc, #148]	@ (80044b4 <HAL_RCC_OscConfig+0x240>)
 8004420:	4313      	orrs	r3, r2
 8004422:	600b      	str	r3, [r1, #0]
 8004424:	e015      	b.n	8004452 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004426:	4b24      	ldr	r3, [pc, #144]	@ (80044b8 <HAL_RCC_OscConfig+0x244>)
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442c:	f7fe fa24 	bl	8002878 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004434:	f7fe fa20 	bl	8002878 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e187      	b.n	8004756 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004446:	4b1b      	ldr	r3, [pc, #108]	@ (80044b4 <HAL_RCC_OscConfig+0x240>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f0      	bne.n	8004434 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b00      	cmp	r3, #0
 800445c:	d036      	beq.n	80044cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d016      	beq.n	8004494 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004466:	4b15      	ldr	r3, [pc, #84]	@ (80044bc <HAL_RCC_OscConfig+0x248>)
 8004468:	2201      	movs	r2, #1
 800446a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446c:	f7fe fa04 	bl	8002878 <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004474:	f7fe fa00 	bl	8002878 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e167      	b.n	8004756 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004486:	4b0b      	ldr	r3, [pc, #44]	@ (80044b4 <HAL_RCC_OscConfig+0x240>)
 8004488:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0f0      	beq.n	8004474 <HAL_RCC_OscConfig+0x200>
 8004492:	e01b      	b.n	80044cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004494:	4b09      	ldr	r3, [pc, #36]	@ (80044bc <HAL_RCC_OscConfig+0x248>)
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800449a:	f7fe f9ed 	bl	8002878 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a0:	e00e      	b.n	80044c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a2:	f7fe f9e9 	bl	8002878 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d907      	bls.n	80044c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e150      	b.n	8004756 <HAL_RCC_OscConfig+0x4e2>
 80044b4:	40023800 	.word	0x40023800
 80044b8:	42470000 	.word	0x42470000
 80044bc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c0:	4b88      	ldr	r3, [pc, #544]	@ (80046e4 <HAL_RCC_OscConfig+0x470>)
 80044c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1ea      	bne.n	80044a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 8097 	beq.w	8004608 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044da:	2300      	movs	r3, #0
 80044dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044de:	4b81      	ldr	r3, [pc, #516]	@ (80046e4 <HAL_RCC_OscConfig+0x470>)
 80044e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10f      	bne.n	800450a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ea:	2300      	movs	r3, #0
 80044ec:	60bb      	str	r3, [r7, #8]
 80044ee:	4b7d      	ldr	r3, [pc, #500]	@ (80046e4 <HAL_RCC_OscConfig+0x470>)
 80044f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f2:	4a7c      	ldr	r2, [pc, #496]	@ (80046e4 <HAL_RCC_OscConfig+0x470>)
 80044f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80044fa:	4b7a      	ldr	r3, [pc, #488]	@ (80046e4 <HAL_RCC_OscConfig+0x470>)
 80044fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004502:	60bb      	str	r3, [r7, #8]
 8004504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004506:	2301      	movs	r3, #1
 8004508:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450a:	4b77      	ldr	r3, [pc, #476]	@ (80046e8 <HAL_RCC_OscConfig+0x474>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004512:	2b00      	cmp	r3, #0
 8004514:	d118      	bne.n	8004548 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004516:	4b74      	ldr	r3, [pc, #464]	@ (80046e8 <HAL_RCC_OscConfig+0x474>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a73      	ldr	r2, [pc, #460]	@ (80046e8 <HAL_RCC_OscConfig+0x474>)
 800451c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004522:	f7fe f9a9 	bl	8002878 <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004528:	e008      	b.n	800453c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800452a:	f7fe f9a5 	bl	8002878 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e10c      	b.n	8004756 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453c:	4b6a      	ldr	r3, [pc, #424]	@ (80046e8 <HAL_RCC_OscConfig+0x474>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0f0      	beq.n	800452a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d106      	bne.n	800455e <HAL_RCC_OscConfig+0x2ea>
 8004550:	4b64      	ldr	r3, [pc, #400]	@ (80046e4 <HAL_RCC_OscConfig+0x470>)
 8004552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004554:	4a63      	ldr	r2, [pc, #396]	@ (80046e4 <HAL_RCC_OscConfig+0x470>)
 8004556:	f043 0301 	orr.w	r3, r3, #1
 800455a:	6713      	str	r3, [r2, #112]	@ 0x70
 800455c:	e01c      	b.n	8004598 <HAL_RCC_OscConfig+0x324>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	2b05      	cmp	r3, #5
 8004564:	d10c      	bne.n	8004580 <HAL_RCC_OscConfig+0x30c>
 8004566:	4b5f      	ldr	r3, [pc, #380]	@ (80046e4 <HAL_RCC_OscConfig+0x470>)
 8004568:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800456a:	4a5e      	ldr	r2, [pc, #376]	@ (80046e4 <HAL_RCC_OscConfig+0x470>)
 800456c:	f043 0304 	orr.w	r3, r3, #4
 8004570:	6713      	str	r3, [r2, #112]	@ 0x70
 8004572:	4b5c      	ldr	r3, [pc, #368]	@ (80046e4 <HAL_RCC_OscConfig+0x470>)
 8004574:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004576:	4a5b      	ldr	r2, [pc, #364]	@ (80046e4 <HAL_RCC_OscConfig+0x470>)
 8004578:	f043 0301 	orr.w	r3, r3, #1
 800457c:	6713      	str	r3, [r2, #112]	@ 0x70
 800457e:	e00b      	b.n	8004598 <HAL_RCC_OscConfig+0x324>
 8004580:	4b58      	ldr	r3, [pc, #352]	@ (80046e4 <HAL_RCC_OscConfig+0x470>)
 8004582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004584:	4a57      	ldr	r2, [pc, #348]	@ (80046e4 <HAL_RCC_OscConfig+0x470>)
 8004586:	f023 0301 	bic.w	r3, r3, #1
 800458a:	6713      	str	r3, [r2, #112]	@ 0x70
 800458c:	4b55      	ldr	r3, [pc, #340]	@ (80046e4 <HAL_RCC_OscConfig+0x470>)
 800458e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004590:	4a54      	ldr	r2, [pc, #336]	@ (80046e4 <HAL_RCC_OscConfig+0x470>)
 8004592:	f023 0304 	bic.w	r3, r3, #4
 8004596:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d015      	beq.n	80045cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a0:	f7fe f96a 	bl	8002878 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a6:	e00a      	b.n	80045be <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a8:	f7fe f966 	bl	8002878 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e0cb      	b.n	8004756 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045be:	4b49      	ldr	r3, [pc, #292]	@ (80046e4 <HAL_RCC_OscConfig+0x470>)
 80045c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0ee      	beq.n	80045a8 <HAL_RCC_OscConfig+0x334>
 80045ca:	e014      	b.n	80045f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045cc:	f7fe f954 	bl	8002878 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045d2:	e00a      	b.n	80045ea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d4:	f7fe f950 	bl	8002878 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e0b5      	b.n	8004756 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ea:	4b3e      	ldr	r3, [pc, #248]	@ (80046e4 <HAL_RCC_OscConfig+0x470>)
 80045ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1ee      	bne.n	80045d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045f6:	7dfb      	ldrb	r3, [r7, #23]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d105      	bne.n	8004608 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045fc:	4b39      	ldr	r3, [pc, #228]	@ (80046e4 <HAL_RCC_OscConfig+0x470>)
 80045fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004600:	4a38      	ldr	r2, [pc, #224]	@ (80046e4 <HAL_RCC_OscConfig+0x470>)
 8004602:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004606:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 80a1 	beq.w	8004754 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004612:	4b34      	ldr	r3, [pc, #208]	@ (80046e4 <HAL_RCC_OscConfig+0x470>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 030c 	and.w	r3, r3, #12
 800461a:	2b08      	cmp	r3, #8
 800461c:	d05c      	beq.n	80046d8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d141      	bne.n	80046aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004626:	4b31      	ldr	r3, [pc, #196]	@ (80046ec <HAL_RCC_OscConfig+0x478>)
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462c:	f7fe f924 	bl	8002878 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004634:	f7fe f920 	bl	8002878 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e087      	b.n	8004756 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004646:	4b27      	ldr	r3, [pc, #156]	@ (80046e4 <HAL_RCC_OscConfig+0x470>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f0      	bne.n	8004634 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69da      	ldr	r2, [r3, #28]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004660:	019b      	lsls	r3, r3, #6
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004668:	085b      	lsrs	r3, r3, #1
 800466a:	3b01      	subs	r3, #1
 800466c:	041b      	lsls	r3, r3, #16
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004674:	061b      	lsls	r3, r3, #24
 8004676:	491b      	ldr	r1, [pc, #108]	@ (80046e4 <HAL_RCC_OscConfig+0x470>)
 8004678:	4313      	orrs	r3, r2
 800467a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800467c:	4b1b      	ldr	r3, [pc, #108]	@ (80046ec <HAL_RCC_OscConfig+0x478>)
 800467e:	2201      	movs	r2, #1
 8004680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004682:	f7fe f8f9 	bl	8002878 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800468a:	f7fe f8f5 	bl	8002878 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e05c      	b.n	8004756 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800469c:	4b11      	ldr	r3, [pc, #68]	@ (80046e4 <HAL_RCC_OscConfig+0x470>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0f0      	beq.n	800468a <HAL_RCC_OscConfig+0x416>
 80046a8:	e054      	b.n	8004754 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046aa:	4b10      	ldr	r3, [pc, #64]	@ (80046ec <HAL_RCC_OscConfig+0x478>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b0:	f7fe f8e2 	bl	8002878 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b8:	f7fe f8de 	bl	8002878 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e045      	b.n	8004756 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ca:	4b06      	ldr	r3, [pc, #24]	@ (80046e4 <HAL_RCC_OscConfig+0x470>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1f0      	bne.n	80046b8 <HAL_RCC_OscConfig+0x444>
 80046d6:	e03d      	b.n	8004754 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d107      	bne.n	80046f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e038      	b.n	8004756 <HAL_RCC_OscConfig+0x4e2>
 80046e4:	40023800 	.word	0x40023800
 80046e8:	40007000 	.word	0x40007000
 80046ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004760 <HAL_RCC_OscConfig+0x4ec>)
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	699b      	ldr	r3, [r3, #24]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d028      	beq.n	8004750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004708:	429a      	cmp	r2, r3
 800470a:	d121      	bne.n	8004750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004716:	429a      	cmp	r2, r3
 8004718:	d11a      	bne.n	8004750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004720:	4013      	ands	r3, r2
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004726:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004728:	4293      	cmp	r3, r2
 800472a:	d111      	bne.n	8004750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004736:	085b      	lsrs	r3, r3, #1
 8004738:	3b01      	subs	r3, #1
 800473a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800473c:	429a      	cmp	r2, r3
 800473e:	d107      	bne.n	8004750 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800474c:	429a      	cmp	r2, r3
 800474e:	d001      	beq.n	8004754 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e000      	b.n	8004756 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3718      	adds	r7, #24
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	40023800 	.word	0x40023800

08004764 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d101      	bne.n	8004778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e0cc      	b.n	8004912 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004778:	4b68      	ldr	r3, [pc, #416]	@ (800491c <HAL_RCC_ClockConfig+0x1b8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0307 	and.w	r3, r3, #7
 8004780:	683a      	ldr	r2, [r7, #0]
 8004782:	429a      	cmp	r2, r3
 8004784:	d90c      	bls.n	80047a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004786:	4b65      	ldr	r3, [pc, #404]	@ (800491c <HAL_RCC_ClockConfig+0x1b8>)
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	b2d2      	uxtb	r2, r2
 800478c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800478e:	4b63      	ldr	r3, [pc, #396]	@ (800491c <HAL_RCC_ClockConfig+0x1b8>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0307 	and.w	r3, r3, #7
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	429a      	cmp	r2, r3
 800479a:	d001      	beq.n	80047a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	e0b8      	b.n	8004912 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d020      	beq.n	80047ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d005      	beq.n	80047c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047b8:	4b59      	ldr	r3, [pc, #356]	@ (8004920 <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	4a58      	ldr	r2, [pc, #352]	@ (8004920 <HAL_RCC_ClockConfig+0x1bc>)
 80047be:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0308 	and.w	r3, r3, #8
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d005      	beq.n	80047dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047d0:	4b53      	ldr	r3, [pc, #332]	@ (8004920 <HAL_RCC_ClockConfig+0x1bc>)
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	4a52      	ldr	r2, [pc, #328]	@ (8004920 <HAL_RCC_ClockConfig+0x1bc>)
 80047d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047dc:	4b50      	ldr	r3, [pc, #320]	@ (8004920 <HAL_RCC_ClockConfig+0x1bc>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	494d      	ldr	r1, [pc, #308]	@ (8004920 <HAL_RCC_ClockConfig+0x1bc>)
 80047ea:	4313      	orrs	r3, r2
 80047ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d044      	beq.n	8004884 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d107      	bne.n	8004812 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004802:	4b47      	ldr	r3, [pc, #284]	@ (8004920 <HAL_RCC_ClockConfig+0x1bc>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d119      	bne.n	8004842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e07f      	b.n	8004912 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2b02      	cmp	r3, #2
 8004818:	d003      	beq.n	8004822 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800481e:	2b03      	cmp	r3, #3
 8004820:	d107      	bne.n	8004832 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004822:	4b3f      	ldr	r3, [pc, #252]	@ (8004920 <HAL_RCC_ClockConfig+0x1bc>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d109      	bne.n	8004842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e06f      	b.n	8004912 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004832:	4b3b      	ldr	r3, [pc, #236]	@ (8004920 <HAL_RCC_ClockConfig+0x1bc>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e067      	b.n	8004912 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004842:	4b37      	ldr	r3, [pc, #220]	@ (8004920 <HAL_RCC_ClockConfig+0x1bc>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f023 0203 	bic.w	r2, r3, #3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	4934      	ldr	r1, [pc, #208]	@ (8004920 <HAL_RCC_ClockConfig+0x1bc>)
 8004850:	4313      	orrs	r3, r2
 8004852:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004854:	f7fe f810 	bl	8002878 <HAL_GetTick>
 8004858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485a:	e00a      	b.n	8004872 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800485c:	f7fe f80c 	bl	8002878 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800486a:	4293      	cmp	r3, r2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e04f      	b.n	8004912 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004872:	4b2b      	ldr	r3, [pc, #172]	@ (8004920 <HAL_RCC_ClockConfig+0x1bc>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 020c 	and.w	r2, r3, #12
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	429a      	cmp	r2, r3
 8004882:	d1eb      	bne.n	800485c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004884:	4b25      	ldr	r3, [pc, #148]	@ (800491c <HAL_RCC_ClockConfig+0x1b8>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0307 	and.w	r3, r3, #7
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	d20c      	bcs.n	80048ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004892:	4b22      	ldr	r3, [pc, #136]	@ (800491c <HAL_RCC_ClockConfig+0x1b8>)
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	b2d2      	uxtb	r2, r2
 8004898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800489a:	4b20      	ldr	r3, [pc, #128]	@ (800491c <HAL_RCC_ClockConfig+0x1b8>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0307 	and.w	r3, r3, #7
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d001      	beq.n	80048ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e032      	b.n	8004912 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0304 	and.w	r3, r3, #4
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d008      	beq.n	80048ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048b8:	4b19      	ldr	r3, [pc, #100]	@ (8004920 <HAL_RCC_ClockConfig+0x1bc>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	4916      	ldr	r1, [pc, #88]	@ (8004920 <HAL_RCC_ClockConfig+0x1bc>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d009      	beq.n	80048ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048d6:	4b12      	ldr	r3, [pc, #72]	@ (8004920 <HAL_RCC_ClockConfig+0x1bc>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	490e      	ldr	r1, [pc, #56]	@ (8004920 <HAL_RCC_ClockConfig+0x1bc>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048ea:	f000 f821 	bl	8004930 <HAL_RCC_GetSysClockFreq>
 80048ee:	4602      	mov	r2, r0
 80048f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004920 <HAL_RCC_ClockConfig+0x1bc>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	091b      	lsrs	r3, r3, #4
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	490a      	ldr	r1, [pc, #40]	@ (8004924 <HAL_RCC_ClockConfig+0x1c0>)
 80048fc:	5ccb      	ldrb	r3, [r1, r3]
 80048fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004902:	4a09      	ldr	r2, [pc, #36]	@ (8004928 <HAL_RCC_ClockConfig+0x1c4>)
 8004904:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004906:	4b09      	ldr	r3, [pc, #36]	@ (800492c <HAL_RCC_ClockConfig+0x1c8>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f7fd fdb2 	bl	8002474 <HAL_InitTick>

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	40023c00 	.word	0x40023c00
 8004920:	40023800 	.word	0x40023800
 8004924:	0800be6c 	.word	0x0800be6c
 8004928:	20000084 	.word	0x20000084
 800492c:	20000088 	.word	0x20000088

08004930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004934:	b090      	sub	sp, #64	@ 0x40
 8004936:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800493c:	2300      	movs	r3, #0
 800493e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004948:	4b59      	ldr	r3, [pc, #356]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x180>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f003 030c 	and.w	r3, r3, #12
 8004950:	2b08      	cmp	r3, #8
 8004952:	d00d      	beq.n	8004970 <HAL_RCC_GetSysClockFreq+0x40>
 8004954:	2b08      	cmp	r3, #8
 8004956:	f200 80a1 	bhi.w	8004a9c <HAL_RCC_GetSysClockFreq+0x16c>
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <HAL_RCC_GetSysClockFreq+0x34>
 800495e:	2b04      	cmp	r3, #4
 8004960:	d003      	beq.n	800496a <HAL_RCC_GetSysClockFreq+0x3a>
 8004962:	e09b      	b.n	8004a9c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004964:	4b53      	ldr	r3, [pc, #332]	@ (8004ab4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004966:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004968:	e09b      	b.n	8004aa2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800496a:	4b53      	ldr	r3, [pc, #332]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x188>)
 800496c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800496e:	e098      	b.n	8004aa2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004970:	4b4f      	ldr	r3, [pc, #316]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004978:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800497a:	4b4d      	ldr	r3, [pc, #308]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x180>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d028      	beq.n	80049d8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004986:	4b4a      	ldr	r3, [pc, #296]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	099b      	lsrs	r3, r3, #6
 800498c:	2200      	movs	r2, #0
 800498e:	623b      	str	r3, [r7, #32]
 8004990:	627a      	str	r2, [r7, #36]	@ 0x24
 8004992:	6a3b      	ldr	r3, [r7, #32]
 8004994:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004998:	2100      	movs	r1, #0
 800499a:	4b47      	ldr	r3, [pc, #284]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x188>)
 800499c:	fb03 f201 	mul.w	r2, r3, r1
 80049a0:	2300      	movs	r3, #0
 80049a2:	fb00 f303 	mul.w	r3, r0, r3
 80049a6:	4413      	add	r3, r2
 80049a8:	4a43      	ldr	r2, [pc, #268]	@ (8004ab8 <HAL_RCC_GetSysClockFreq+0x188>)
 80049aa:	fba0 1202 	umull	r1, r2, r0, r2
 80049ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049b0:	460a      	mov	r2, r1
 80049b2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80049b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049b6:	4413      	add	r3, r2
 80049b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049bc:	2200      	movs	r2, #0
 80049be:	61bb      	str	r3, [r7, #24]
 80049c0:	61fa      	str	r2, [r7, #28]
 80049c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049c6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80049ca:	f7fc f965 	bl	8000c98 <__aeabi_uldivmod>
 80049ce:	4602      	mov	r2, r0
 80049d0:	460b      	mov	r3, r1
 80049d2:	4613      	mov	r3, r2
 80049d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049d6:	e053      	b.n	8004a80 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049d8:	4b35      	ldr	r3, [pc, #212]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x180>)
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	099b      	lsrs	r3, r3, #6
 80049de:	2200      	movs	r2, #0
 80049e0:	613b      	str	r3, [r7, #16]
 80049e2:	617a      	str	r2, [r7, #20]
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80049ea:	f04f 0b00 	mov.w	fp, #0
 80049ee:	4652      	mov	r2, sl
 80049f0:	465b      	mov	r3, fp
 80049f2:	f04f 0000 	mov.w	r0, #0
 80049f6:	f04f 0100 	mov.w	r1, #0
 80049fa:	0159      	lsls	r1, r3, #5
 80049fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a00:	0150      	lsls	r0, r2, #5
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	ebb2 080a 	subs.w	r8, r2, sl
 8004a0a:	eb63 090b 	sbc.w	r9, r3, fp
 8004a0e:	f04f 0200 	mov.w	r2, #0
 8004a12:	f04f 0300 	mov.w	r3, #0
 8004a16:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004a1a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004a1e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004a22:	ebb2 0408 	subs.w	r4, r2, r8
 8004a26:	eb63 0509 	sbc.w	r5, r3, r9
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	f04f 0300 	mov.w	r3, #0
 8004a32:	00eb      	lsls	r3, r5, #3
 8004a34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a38:	00e2      	lsls	r2, r4, #3
 8004a3a:	4614      	mov	r4, r2
 8004a3c:	461d      	mov	r5, r3
 8004a3e:	eb14 030a 	adds.w	r3, r4, sl
 8004a42:	603b      	str	r3, [r7, #0]
 8004a44:	eb45 030b 	adc.w	r3, r5, fp
 8004a48:	607b      	str	r3, [r7, #4]
 8004a4a:	f04f 0200 	mov.w	r2, #0
 8004a4e:	f04f 0300 	mov.w	r3, #0
 8004a52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a56:	4629      	mov	r1, r5
 8004a58:	028b      	lsls	r3, r1, #10
 8004a5a:	4621      	mov	r1, r4
 8004a5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a60:	4621      	mov	r1, r4
 8004a62:	028a      	lsls	r2, r1, #10
 8004a64:	4610      	mov	r0, r2
 8004a66:	4619      	mov	r1, r3
 8004a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	60bb      	str	r3, [r7, #8]
 8004a6e:	60fa      	str	r2, [r7, #12]
 8004a70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a74:	f7fc f910 	bl	8000c98 <__aeabi_uldivmod>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004a80:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	0c1b      	lsrs	r3, r3, #16
 8004a86:	f003 0303 	and.w	r3, r3, #3
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004a90:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a98:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a9a:	e002      	b.n	8004aa2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a9c:	4b05      	ldr	r3, [pc, #20]	@ (8004ab4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004aa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3740      	adds	r7, #64	@ 0x40
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aae:	bf00      	nop
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	00f42400 	.word	0x00f42400
 8004ab8:	017d7840 	.word	0x017d7840

08004abc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ac0:	4b03      	ldr	r3, [pc, #12]	@ (8004ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	20000084 	.word	0x20000084

08004ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ad8:	f7ff fff0 	bl	8004abc <HAL_RCC_GetHCLKFreq>
 8004adc:	4602      	mov	r2, r0
 8004ade:	4b05      	ldr	r3, [pc, #20]	@ (8004af4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	0a9b      	lsrs	r3, r3, #10
 8004ae4:	f003 0307 	and.w	r3, r3, #7
 8004ae8:	4903      	ldr	r1, [pc, #12]	@ (8004af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aea:	5ccb      	ldrb	r3, [r1, r3]
 8004aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	bd80      	pop	{r7, pc}
 8004af4:	40023800 	.word	0x40023800
 8004af8:	0800be7c 	.word	0x0800be7c

08004afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b00:	f7ff ffdc 	bl	8004abc <HAL_RCC_GetHCLKFreq>
 8004b04:	4602      	mov	r2, r0
 8004b06:	4b05      	ldr	r3, [pc, #20]	@ (8004b1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	0b5b      	lsrs	r3, r3, #13
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	4903      	ldr	r1, [pc, #12]	@ (8004b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b12:	5ccb      	ldrb	r3, [r1, r3]
 8004b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	40023800 	.word	0x40023800
 8004b20:	0800be7c 	.word	0x0800be7c

08004b24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	220f      	movs	r2, #15
 8004b32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b34:	4b12      	ldr	r3, [pc, #72]	@ (8004b80 <HAL_RCC_GetClockConfig+0x5c>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 0203 	and.w	r2, r3, #3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004b40:	4b0f      	ldr	r3, [pc, #60]	@ (8004b80 <HAL_RCC_GetClockConfig+0x5c>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004b80 <HAL_RCC_GetClockConfig+0x5c>)
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004b58:	4b09      	ldr	r3, [pc, #36]	@ (8004b80 <HAL_RCC_GetClockConfig+0x5c>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	08db      	lsrs	r3, r3, #3
 8004b5e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004b66:	4b07      	ldr	r3, [pc, #28]	@ (8004b84 <HAL_RCC_GetClockConfig+0x60>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0207 	and.w	r2, r3, #7
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	601a      	str	r2, [r3, #0]
}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	40023800 	.word	0x40023800
 8004b84:	40023c00 	.word	0x40023c00

08004b88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e041      	b.n	8004c1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d106      	bne.n	8004bb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f839 	bl	8004c26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	4610      	mov	r0, r2
 8004bc8:	f000 fb74 	bl	80052b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3708      	adds	r7, #8
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004c26:	b480      	push	{r7}
 8004c28:	b083      	sub	sp, #12
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004c2e:	bf00      	nop
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
	...

08004c3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d001      	beq.n	8004c54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e044      	b.n	8004cde <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68da      	ldr	r2, [r3, #12]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f042 0201 	orr.w	r2, r2, #1
 8004c6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a1e      	ldr	r2, [pc, #120]	@ (8004cec <HAL_TIM_Base_Start_IT+0xb0>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d018      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x6c>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c7e:	d013      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x6c>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a1a      	ldr	r2, [pc, #104]	@ (8004cf0 <HAL_TIM_Base_Start_IT+0xb4>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d00e      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x6c>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a19      	ldr	r2, [pc, #100]	@ (8004cf4 <HAL_TIM_Base_Start_IT+0xb8>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d009      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x6c>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a17      	ldr	r2, [pc, #92]	@ (8004cf8 <HAL_TIM_Base_Start_IT+0xbc>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d004      	beq.n	8004ca8 <HAL_TIM_Base_Start_IT+0x6c>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a16      	ldr	r2, [pc, #88]	@ (8004cfc <HAL_TIM_Base_Start_IT+0xc0>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d111      	bne.n	8004ccc <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 0307 	and.w	r3, r3, #7
 8004cb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b06      	cmp	r3, #6
 8004cb8:	d010      	beq.n	8004cdc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 0201 	orr.w	r2, r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cca:	e007      	b.n	8004cdc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3714      	adds	r7, #20
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	40010000 	.word	0x40010000
 8004cf0:	40000400 	.word	0x40000400
 8004cf4:	40000800 	.word	0x40000800
 8004cf8:	40000c00 	.word	0x40000c00
 8004cfc:	40014000 	.word	0x40014000

08004d00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	e041      	b.n	8004d96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d106      	bne.n	8004d2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f7fd fa3a 	bl	80021a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2202      	movs	r2, #2
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4610      	mov	r0, r2
 8004d40:	f000 fab8 	bl	80052b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2201      	movs	r2, #1
 8004d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
	...

08004da0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d109      	bne.n	8004dc4 <HAL_TIM_PWM_Start+0x24>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	bf14      	ite	ne
 8004dbc:	2301      	movne	r3, #1
 8004dbe:	2300      	moveq	r3, #0
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	e022      	b.n	8004e0a <HAL_TIM_PWM_Start+0x6a>
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	d109      	bne.n	8004dde <HAL_TIM_PWM_Start+0x3e>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	bf14      	ite	ne
 8004dd6:	2301      	movne	r3, #1
 8004dd8:	2300      	moveq	r3, #0
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	e015      	b.n	8004e0a <HAL_TIM_PWM_Start+0x6a>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d109      	bne.n	8004df8 <HAL_TIM_PWM_Start+0x58>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	bf14      	ite	ne
 8004df0:	2301      	movne	r3, #1
 8004df2:	2300      	moveq	r3, #0
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	e008      	b.n	8004e0a <HAL_TIM_PWM_Start+0x6a>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	bf14      	ite	ne
 8004e04:	2301      	movne	r3, #1
 8004e06:	2300      	moveq	r3, #0
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d001      	beq.n	8004e12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e068      	b.n	8004ee4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d104      	bne.n	8004e22 <HAL_TIM_PWM_Start+0x82>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2202      	movs	r2, #2
 8004e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e20:	e013      	b.n	8004e4a <HAL_TIM_PWM_Start+0xaa>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d104      	bne.n	8004e32 <HAL_TIM_PWM_Start+0x92>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e30:	e00b      	b.n	8004e4a <HAL_TIM_PWM_Start+0xaa>
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	2b08      	cmp	r3, #8
 8004e36:	d104      	bne.n	8004e42 <HAL_TIM_PWM_Start+0xa2>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e40:	e003      	b.n	8004e4a <HAL_TIM_PWM_Start+0xaa>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2202      	movs	r2, #2
 8004e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	6839      	ldr	r1, [r7, #0]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 fc46 	bl	80056e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a23      	ldr	r2, [pc, #140]	@ (8004eec <HAL_TIM_PWM_Start+0x14c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d107      	bne.n	8004e72 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e70:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a1d      	ldr	r2, [pc, #116]	@ (8004eec <HAL_TIM_PWM_Start+0x14c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d018      	beq.n	8004eae <HAL_TIM_PWM_Start+0x10e>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e84:	d013      	beq.n	8004eae <HAL_TIM_PWM_Start+0x10e>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a19      	ldr	r2, [pc, #100]	@ (8004ef0 <HAL_TIM_PWM_Start+0x150>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d00e      	beq.n	8004eae <HAL_TIM_PWM_Start+0x10e>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a17      	ldr	r2, [pc, #92]	@ (8004ef4 <HAL_TIM_PWM_Start+0x154>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d009      	beq.n	8004eae <HAL_TIM_PWM_Start+0x10e>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a16      	ldr	r2, [pc, #88]	@ (8004ef8 <HAL_TIM_PWM_Start+0x158>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d004      	beq.n	8004eae <HAL_TIM_PWM_Start+0x10e>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a14      	ldr	r2, [pc, #80]	@ (8004efc <HAL_TIM_PWM_Start+0x15c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d111      	bne.n	8004ed2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2b06      	cmp	r3, #6
 8004ebe:	d010      	beq.n	8004ee2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0201 	orr.w	r2, r2, #1
 8004ece:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed0:	e007      	b.n	8004ee2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f042 0201 	orr.w	r2, r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40010000 	.word	0x40010000
 8004ef0:	40000400 	.word	0x40000400
 8004ef4:	40000800 	.word	0x40000800
 8004ef8:	40000c00 	.word	0x40000c00
 8004efc:	40014000 	.word	0x40014000

08004f00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d020      	beq.n	8004f64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f003 0302 	and.w	r3, r3, #2
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d01b      	beq.n	8004f64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0202 	mvn.w	r2, #2
 8004f34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	699b      	ldr	r3, [r3, #24]
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f994 	bl	8005278 <HAL_TIM_IC_CaptureCallback>
 8004f50:	e005      	b.n	8004f5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f986 	bl	8005264 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f997 	bl	800528c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f003 0304 	and.w	r3, r3, #4
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d020      	beq.n	8004fb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d01b      	beq.n	8004fb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f06f 0204 	mvn.w	r2, #4
 8004f80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2202      	movs	r2, #2
 8004f86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699b      	ldr	r3, [r3, #24]
 8004f8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f96e 	bl	8005278 <HAL_TIM_IC_CaptureCallback>
 8004f9c:	e005      	b.n	8004faa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f960 	bl	8005264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 f971 	bl	800528c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f003 0308 	and.w	r3, r3, #8
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d020      	beq.n	8004ffc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f003 0308 	and.w	r3, r3, #8
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d01b      	beq.n	8004ffc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f06f 0208 	mvn.w	r2, #8
 8004fcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2204      	movs	r2, #4
 8004fd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	69db      	ldr	r3, [r3, #28]
 8004fda:	f003 0303 	and.w	r3, r3, #3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d003      	beq.n	8004fea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 f948 	bl	8005278 <HAL_TIM_IC_CaptureCallback>
 8004fe8:	e005      	b.n	8004ff6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f93a 	bl	8005264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 f94b 	bl	800528c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	f003 0310 	and.w	r3, r3, #16
 8005002:	2b00      	cmp	r3, #0
 8005004:	d020      	beq.n	8005048 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f003 0310 	and.w	r3, r3, #16
 800500c:	2b00      	cmp	r3, #0
 800500e:	d01b      	beq.n	8005048 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f06f 0210 	mvn.w	r2, #16
 8005018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2208      	movs	r2, #8
 800501e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	69db      	ldr	r3, [r3, #28]
 8005026:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f000 f922 	bl	8005278 <HAL_TIM_IC_CaptureCallback>
 8005034:	e005      	b.n	8005042 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 f914 	bl	8005264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f000 f925 	bl	800528c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	2b00      	cmp	r3, #0
 8005050:	d00c      	beq.n	800506c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b00      	cmp	r3, #0
 800505a:	d007      	beq.n	800506c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f06f 0201 	mvn.w	r2, #1
 8005064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f7fc ff10 	bl	8001e8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00c      	beq.n	8005090 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800507c:	2b00      	cmp	r3, #0
 800507e:	d007      	beq.n	8005090 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 fbc8 	bl	8005820 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00c      	beq.n	80050b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d007      	beq.n	80050b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f8f6 	bl	80052a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f003 0320 	and.w	r3, r3, #32
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00c      	beq.n	80050d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f003 0320 	and.w	r3, r3, #32
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d007      	beq.n	80050d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f06f 0220 	mvn.w	r2, #32
 80050d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fb9a 	bl	800580c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050d8:	bf00      	nop
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050ec:	2300      	movs	r3, #0
 80050ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050fa:	2302      	movs	r3, #2
 80050fc:	e0ae      	b.n	800525c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b0c      	cmp	r3, #12
 800510a:	f200 809f 	bhi.w	800524c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800510e:	a201      	add	r2, pc, #4	@ (adr r2, 8005114 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005114:	08005149 	.word	0x08005149
 8005118:	0800524d 	.word	0x0800524d
 800511c:	0800524d 	.word	0x0800524d
 8005120:	0800524d 	.word	0x0800524d
 8005124:	08005189 	.word	0x08005189
 8005128:	0800524d 	.word	0x0800524d
 800512c:	0800524d 	.word	0x0800524d
 8005130:	0800524d 	.word	0x0800524d
 8005134:	080051cb 	.word	0x080051cb
 8005138:	0800524d 	.word	0x0800524d
 800513c:	0800524d 	.word	0x0800524d
 8005140:	0800524d 	.word	0x0800524d
 8005144:	0800520b 	.word	0x0800520b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68b9      	ldr	r1, [r7, #8]
 800514e:	4618      	mov	r0, r3
 8005150:	f000 f93c 	bl	80053cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699a      	ldr	r2, [r3, #24]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0208 	orr.w	r2, r2, #8
 8005162:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699a      	ldr	r2, [r3, #24]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0204 	bic.w	r2, r2, #4
 8005172:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6999      	ldr	r1, [r3, #24]
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	691a      	ldr	r2, [r3, #16]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	619a      	str	r2, [r3, #24]
      break;
 8005186:	e064      	b.n	8005252 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68b9      	ldr	r1, [r7, #8]
 800518e:	4618      	mov	r0, r3
 8005190:	f000 f982 	bl	8005498 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699a      	ldr	r2, [r3, #24]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80051a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699a      	ldr	r2, [r3, #24]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6999      	ldr	r1, [r3, #24]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	021a      	lsls	r2, r3, #8
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	619a      	str	r2, [r3, #24]
      break;
 80051c8:	e043      	b.n	8005252 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68b9      	ldr	r1, [r7, #8]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 f9cd 	bl	8005570 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	69da      	ldr	r2, [r3, #28]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f042 0208 	orr.w	r2, r2, #8
 80051e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	69da      	ldr	r2, [r3, #28]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0204 	bic.w	r2, r2, #4
 80051f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	69d9      	ldr	r1, [r3, #28]
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	691a      	ldr	r2, [r3, #16]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	61da      	str	r2, [r3, #28]
      break;
 8005208:	e023      	b.n	8005252 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68b9      	ldr	r1, [r7, #8]
 8005210:	4618      	mov	r0, r3
 8005212:	f000 fa17 	bl	8005644 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	69da      	ldr	r2, [r3, #28]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005224:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	69da      	ldr	r2, [r3, #28]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005234:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69d9      	ldr	r1, [r3, #28]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	021a      	lsls	r2, r3, #8
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	61da      	str	r2, [r3, #28]
      break;
 800524a:	e002      	b.n	8005252 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	75fb      	strb	r3, [r7, #23]
      break;
 8005250:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800525a:	7dfb      	ldrb	r3, [r7, #23]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3718      	adds	r7, #24
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005280:	bf00      	nop
 8005282:	370c      	adds	r7, #12
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr

0800528c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b085      	sub	sp, #20
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a3a      	ldr	r2, [pc, #232]	@ (80053b0 <TIM_Base_SetConfig+0xfc>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d00f      	beq.n	80052ec <TIM_Base_SetConfig+0x38>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052d2:	d00b      	beq.n	80052ec <TIM_Base_SetConfig+0x38>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a37      	ldr	r2, [pc, #220]	@ (80053b4 <TIM_Base_SetConfig+0x100>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d007      	beq.n	80052ec <TIM_Base_SetConfig+0x38>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a36      	ldr	r2, [pc, #216]	@ (80053b8 <TIM_Base_SetConfig+0x104>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d003      	beq.n	80052ec <TIM_Base_SetConfig+0x38>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a35      	ldr	r2, [pc, #212]	@ (80053bc <TIM_Base_SetConfig+0x108>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d108      	bne.n	80052fe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a2b      	ldr	r2, [pc, #172]	@ (80053b0 <TIM_Base_SetConfig+0xfc>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d01b      	beq.n	800533e <TIM_Base_SetConfig+0x8a>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800530c:	d017      	beq.n	800533e <TIM_Base_SetConfig+0x8a>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a28      	ldr	r2, [pc, #160]	@ (80053b4 <TIM_Base_SetConfig+0x100>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d013      	beq.n	800533e <TIM_Base_SetConfig+0x8a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a27      	ldr	r2, [pc, #156]	@ (80053b8 <TIM_Base_SetConfig+0x104>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d00f      	beq.n	800533e <TIM_Base_SetConfig+0x8a>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a26      	ldr	r2, [pc, #152]	@ (80053bc <TIM_Base_SetConfig+0x108>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d00b      	beq.n	800533e <TIM_Base_SetConfig+0x8a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a25      	ldr	r2, [pc, #148]	@ (80053c0 <TIM_Base_SetConfig+0x10c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d007      	beq.n	800533e <TIM_Base_SetConfig+0x8a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a24      	ldr	r2, [pc, #144]	@ (80053c4 <TIM_Base_SetConfig+0x110>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d003      	beq.n	800533e <TIM_Base_SetConfig+0x8a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a23      	ldr	r2, [pc, #140]	@ (80053c8 <TIM_Base_SetConfig+0x114>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d108      	bne.n	8005350 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005344:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	4313      	orrs	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	4313      	orrs	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a0e      	ldr	r2, [pc, #56]	@ (80053b0 <TIM_Base_SetConfig+0xfc>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d103      	bne.n	8005384 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	691a      	ldr	r2, [r3, #16]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b01      	cmp	r3, #1
 8005394:	d105      	bne.n	80053a2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f023 0201 	bic.w	r2, r3, #1
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	611a      	str	r2, [r3, #16]
  }
}
 80053a2:	bf00      	nop
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	40010000 	.word	0x40010000
 80053b4:	40000400 	.word	0x40000400
 80053b8:	40000800 	.word	0x40000800
 80053bc:	40000c00 	.word	0x40000c00
 80053c0:	40014000 	.word	0x40014000
 80053c4:	40014400 	.word	0x40014400
 80053c8:	40014800 	.word	0x40014800

080053cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	f023 0201 	bic.w	r2, r3, #1
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 0303 	bic.w	r3, r3, #3
 8005402:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	f023 0302 	bic.w	r3, r3, #2
 8005414:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	4313      	orrs	r3, r2
 800541e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a1c      	ldr	r2, [pc, #112]	@ (8005494 <TIM_OC1_SetConfig+0xc8>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d10c      	bne.n	8005442 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	f023 0308 	bic.w	r3, r3, #8
 800542e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	68db      	ldr	r3, [r3, #12]
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	4313      	orrs	r3, r2
 8005438:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	f023 0304 	bic.w	r3, r3, #4
 8005440:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a13      	ldr	r2, [pc, #76]	@ (8005494 <TIM_OC1_SetConfig+0xc8>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d111      	bne.n	800546e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005450:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005458:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	695b      	ldr	r3, [r3, #20]
 800545e:	693a      	ldr	r2, [r7, #16]
 8005460:	4313      	orrs	r3, r2
 8005462:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	4313      	orrs	r3, r2
 800546c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	697a      	ldr	r2, [r7, #20]
 8005486:	621a      	str	r2, [r3, #32]
}
 8005488:	bf00      	nop
 800548a:	371c      	adds	r7, #28
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	40010000 	.word	0x40010000

08005498 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005498:	b480      	push	{r7}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	f023 0210 	bic.w	r2, r3, #16
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80054c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	021b      	lsls	r3, r3, #8
 80054d6:	68fa      	ldr	r2, [r7, #12]
 80054d8:	4313      	orrs	r3, r2
 80054da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f023 0320 	bic.w	r3, r3, #32
 80054e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	011b      	lsls	r3, r3, #4
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a1e      	ldr	r2, [pc, #120]	@ (800556c <TIM_OC2_SetConfig+0xd4>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d10d      	bne.n	8005514 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	011b      	lsls	r3, r3, #4
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	4313      	orrs	r3, r2
 800550a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005512:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a15      	ldr	r2, [pc, #84]	@ (800556c <TIM_OC2_SetConfig+0xd4>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d113      	bne.n	8005544 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005522:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800552a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	4313      	orrs	r3, r2
 8005536:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	699b      	ldr	r3, [r3, #24]
 800553c:	009b      	lsls	r3, r3, #2
 800553e:	693a      	ldr	r2, [r7, #16]
 8005540:	4313      	orrs	r3, r2
 8005542:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	685a      	ldr	r2, [r3, #4]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	621a      	str	r2, [r3, #32]
}
 800555e:	bf00      	nop
 8005560:	371c      	adds	r7, #28
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
 800556a:	bf00      	nop
 800556c:	40010000 	.word	0x40010000

08005570 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800559e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f023 0303 	bic.w	r3, r3, #3
 80055a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80055b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	021b      	lsls	r3, r3, #8
 80055c0:	697a      	ldr	r2, [r7, #20]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005640 <TIM_OC3_SetConfig+0xd0>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d10d      	bne.n	80055ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	021b      	lsls	r3, r3, #8
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	4313      	orrs	r3, r2
 80055e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	4a14      	ldr	r2, [pc, #80]	@ (8005640 <TIM_OC3_SetConfig+0xd0>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d113      	bne.n	800561a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005600:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	011b      	lsls	r3, r3, #4
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	4313      	orrs	r3, r2
 800560c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	011b      	lsls	r3, r3, #4
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	4313      	orrs	r3, r2
 8005618:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	621a      	str	r2, [r3, #32]
}
 8005634:	bf00      	nop
 8005636:	371c      	adds	r7, #28
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr
 8005640:	40010000 	.word	0x40010000

08005644 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005644:	b480      	push	{r7}
 8005646:	b087      	sub	sp, #28
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800567a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	021b      	lsls	r3, r3, #8
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	4313      	orrs	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800568e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	031b      	lsls	r3, r3, #12
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	4313      	orrs	r3, r2
 800569a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a10      	ldr	r2, [pc, #64]	@ (80056e0 <TIM_OC4_SetConfig+0x9c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d109      	bne.n	80056b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80056aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	695b      	ldr	r3, [r3, #20]
 80056b0:	019b      	lsls	r3, r3, #6
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	621a      	str	r2, [r3, #32]
}
 80056d2:	bf00      	nop
 80056d4:	371c      	adds	r7, #28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	40010000 	.word	0x40010000

080056e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b087      	sub	sp, #28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	f003 031f 	and.w	r3, r3, #31
 80056f6:	2201      	movs	r2, #1
 80056f8:	fa02 f303 	lsl.w	r3, r2, r3
 80056fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6a1a      	ldr	r2, [r3, #32]
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	43db      	mvns	r3, r3
 8005706:	401a      	ands	r2, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6a1a      	ldr	r2, [r3, #32]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	f003 031f 	and.w	r3, r3, #31
 8005716:	6879      	ldr	r1, [r7, #4]
 8005718:	fa01 f303 	lsl.w	r3, r1, r3
 800571c:	431a      	orrs	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	621a      	str	r2, [r3, #32]
}
 8005722:	bf00      	nop
 8005724:	371c      	adds	r7, #28
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
	...

08005730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005730:	b480      	push	{r7}
 8005732:	b085      	sub	sp, #20
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005740:	2b01      	cmp	r3, #1
 8005742:	d101      	bne.n	8005748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005744:	2302      	movs	r3, #2
 8005746:	e050      	b.n	80057ea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800576e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a1c      	ldr	r2, [pc, #112]	@ (80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d018      	beq.n	80057be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005794:	d013      	beq.n	80057be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a18      	ldr	r2, [pc, #96]	@ (80057fc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d00e      	beq.n	80057be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a16      	ldr	r2, [pc, #88]	@ (8005800 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d009      	beq.n	80057be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a15      	ldr	r2, [pc, #84]	@ (8005804 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d004      	beq.n	80057be <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a13      	ldr	r2, [pc, #76]	@ (8005808 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d10c      	bne.n	80057d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40010000 	.word	0x40010000
 80057fc:	40000400 	.word	0x40000400
 8005800:	40000800 	.word	0x40000800
 8005804:	40000c00 	.word	0x40000c00
 8005808:	40014000 	.word	0x40014000

0800580c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e042      	b.n	80058cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b00      	cmp	r3, #0
 8005850:	d106      	bne.n	8005860 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7fc fd54 	bl	8002308 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2224      	movs	r2, #36	@ 0x24
 8005864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005876:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 ff77 	bl	800676c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	691a      	ldr	r2, [r3, #16]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800588c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	695a      	ldr	r2, [r3, #20]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800589c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68da      	ldr	r2, [r3, #12]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2220      	movs	r2, #32
 80058c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80058ca:	2300      	movs	r3, #0
}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3708      	adds	r7, #8
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b08c      	sub	sp, #48	@ 0x30
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	4613      	mov	r3, r2
 80058e0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	2b20      	cmp	r3, #32
 80058ec:	d156      	bne.n	800599c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d002      	beq.n	80058fa <HAL_UART_Transmit_DMA+0x26>
 80058f4:	88fb      	ldrh	r3, [r7, #6]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d101      	bne.n	80058fe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e04f      	b.n	800599e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	88fa      	ldrh	r2, [r7, #6]
 8005908:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	88fa      	ldrh	r2, [r7, #6]
 800590e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2200      	movs	r2, #0
 8005914:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2221      	movs	r2, #33	@ 0x21
 800591a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005922:	4a21      	ldr	r2, [pc, #132]	@ (80059a8 <HAL_UART_Transmit_DMA+0xd4>)
 8005924:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800592a:	4a20      	ldr	r2, [pc, #128]	@ (80059ac <HAL_UART_Transmit_DMA+0xd8>)
 800592c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005932:	4a1f      	ldr	r2, [pc, #124]	@ (80059b0 <HAL_UART_Transmit_DMA+0xdc>)
 8005934:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800593a:	2200      	movs	r2, #0
 800593c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800593e:	f107 0308 	add.w	r3, r7, #8
 8005942:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800594a:	6819      	ldr	r1, [r3, #0]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	3304      	adds	r3, #4
 8005952:	461a      	mov	r2, r3
 8005954:	88fb      	ldrh	r3, [r7, #6]
 8005956:	f7fd f94f 	bl	8002bf8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005962:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	3314      	adds	r3, #20
 800596a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	e853 3f00 	ldrex	r3, [r3]
 8005972:	617b      	str	r3, [r7, #20]
   return(result);
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800597a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	3314      	adds	r3, #20
 8005982:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005984:	627a      	str	r2, [r7, #36]	@ 0x24
 8005986:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005988:	6a39      	ldr	r1, [r7, #32]
 800598a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800598c:	e841 2300 	strex	r3, r2, [r1]
 8005990:	61fb      	str	r3, [r7, #28]
   return(result);
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1e5      	bne.n	8005964 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005998:	2300      	movs	r3, #0
 800599a:	e000      	b.n	800599e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800599c:	2302      	movs	r3, #2
  }
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3730      	adds	r7, #48	@ 0x30
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	08005ff9 	.word	0x08005ff9
 80059ac:	08006093 	.word	0x08006093
 80059b0:	08006217 	.word	0x08006217

080059b4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08c      	sub	sp, #48	@ 0x30
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	4613      	mov	r3, r2
 80059c0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b20      	cmp	r3, #32
 80059cc:	d14a      	bne.n	8005a64 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d002      	beq.n	80059da <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80059d4:	88fb      	ldrh	r3, [r7, #6]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e043      	b.n	8005a66 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2201      	movs	r2, #1
 80059e2:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80059ea:	88fb      	ldrh	r3, [r7, #6]
 80059ec:	461a      	mov	r2, r3
 80059ee:	68b9      	ldr	r1, [r7, #8]
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 fc5b 	bl	80062ac <UART_Start_Receive_DMA>
 80059f6:	4603      	mov	r3, r0
 80059f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80059fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d12c      	bne.n	8005a5e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d125      	bne.n	8005a58 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	613b      	str	r3, [r7, #16]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	613b      	str	r3, [r7, #16]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	613b      	str	r3, [r7, #16]
 8005a20:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	330c      	adds	r3, #12
 8005a28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	e853 3f00 	ldrex	r3, [r3]
 8005a30:	617b      	str	r3, [r7, #20]
   return(result);
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f043 0310 	orr.w	r3, r3, #16
 8005a38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	330c      	adds	r3, #12
 8005a40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a42:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a46:	6a39      	ldr	r1, [r7, #32]
 8005a48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a4a:	e841 2300 	strex	r3, r2, [r1]
 8005a4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1e5      	bne.n	8005a22 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8005a56:	e002      	b.n	8005a5e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005a5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005a62:	e000      	b.n	8005a66 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005a64:	2302      	movs	r3, #2
  }
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3730      	adds	r7, #48	@ 0x30
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
	...

08005a70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b0ba      	sub	sp, #232	@ 0xe8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aa6:	f003 030f 	and.w	r3, r3, #15
 8005aaa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005aae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10f      	bne.n	8005ad6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005aba:	f003 0320 	and.w	r3, r3, #32
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d009      	beq.n	8005ad6 <HAL_UART_IRQHandler+0x66>
 8005ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ac6:	f003 0320 	and.w	r3, r3, #32
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d003      	beq.n	8005ad6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fd8d 	bl	80065ee <UART_Receive_IT>
      return;
 8005ad4:	e25b      	b.n	8005f8e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005ad6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	f000 80de 	beq.w	8005c9c <HAL_UART_IRQHandler+0x22c>
 8005ae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d106      	bne.n	8005afa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005af0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f000 80d1 	beq.w	8005c9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005afe:	f003 0301 	and.w	r3, r3, #1
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00b      	beq.n	8005b1e <HAL_UART_IRQHandler+0xae>
 8005b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d005      	beq.n	8005b1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b16:	f043 0201 	orr.w	r2, r3, #1
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b22:	f003 0304 	and.w	r3, r3, #4
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00b      	beq.n	8005b42 <HAL_UART_IRQHandler+0xd2>
 8005b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d005      	beq.n	8005b42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b3a:	f043 0202 	orr.w	r2, r3, #2
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00b      	beq.n	8005b66 <HAL_UART_IRQHandler+0xf6>
 8005b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b52:	f003 0301 	and.w	r3, r3, #1
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d005      	beq.n	8005b66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b5e:	f043 0204 	orr.w	r2, r3, #4
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b6a:	f003 0308 	and.w	r3, r3, #8
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d011      	beq.n	8005b96 <HAL_UART_IRQHandler+0x126>
 8005b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b76:	f003 0320 	and.w	r3, r3, #32
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d105      	bne.n	8005b8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d005      	beq.n	8005b96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b8e:	f043 0208 	orr.w	r2, r3, #8
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 81f2 	beq.w	8005f84 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ba4:	f003 0320 	and.w	r3, r3, #32
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d008      	beq.n	8005bbe <HAL_UART_IRQHandler+0x14e>
 8005bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bb0:	f003 0320 	and.w	r3, r3, #32
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fd18 	bl	80065ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc8:	2b40      	cmp	r3, #64	@ 0x40
 8005bca:	bf0c      	ite	eq
 8005bcc:	2301      	moveq	r3, #1
 8005bce:	2300      	movne	r3, #0
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bda:	f003 0308 	and.w	r3, r3, #8
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d103      	bne.n	8005bea <HAL_UART_IRQHandler+0x17a>
 8005be2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d04f      	beq.n	8005c8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fc20 	bl	8006430 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bfa:	2b40      	cmp	r3, #64	@ 0x40
 8005bfc:	d141      	bne.n	8005c82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	3314      	adds	r3, #20
 8005c04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005c0c:	e853 3f00 	ldrex	r3, [r3]
 8005c10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005c14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005c18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3314      	adds	r3, #20
 8005c26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005c2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005c36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005c3a:	e841 2300 	strex	r3, r2, [r1]
 8005c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005c42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1d9      	bne.n	8005bfe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d013      	beq.n	8005c7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c56:	4a7e      	ldr	r2, [pc, #504]	@ (8005e50 <HAL_UART_IRQHandler+0x3e0>)
 8005c58:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7fd f892 	bl	8002d88 <HAL_DMA_Abort_IT>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d016      	beq.n	8005c98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005c74:	4610      	mov	r0, r2
 8005c76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c78:	e00e      	b.n	8005c98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f9b2 	bl	8005fe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c80:	e00a      	b.n	8005c98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f9ae 	bl	8005fe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c88:	e006      	b.n	8005c98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f9aa 	bl	8005fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005c96:	e175      	b.n	8005f84 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c98:	bf00      	nop
    return;
 8005c9a:	e173      	b.n	8005f84 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	f040 814f 	bne.w	8005f44 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005caa:	f003 0310 	and.w	r3, r3, #16
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f000 8148 	beq.w	8005f44 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cb8:	f003 0310 	and.w	r3, r3, #16
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 8141 	beq.w	8005f44 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60bb      	str	r3, [r7, #8]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	60bb      	str	r3, [r7, #8]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	60bb      	str	r3, [r7, #8]
 8005cd6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ce2:	2b40      	cmp	r3, #64	@ 0x40
 8005ce4:	f040 80b6 	bne.w	8005e54 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005cf4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 8145 	beq.w	8005f88 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d06:	429a      	cmp	r2, r3
 8005d08:	f080 813e 	bcs.w	8005f88 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005d12:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d1e:	f000 8088 	beq.w	8005e32 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	330c      	adds	r3, #12
 8005d28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d30:	e853 3f00 	ldrex	r3, [r3]
 8005d34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005d38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005d3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	330c      	adds	r3, #12
 8005d4a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005d4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005d52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d56:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005d5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005d5e:	e841 2300 	strex	r3, r2, [r1]
 8005d62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005d66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1d9      	bne.n	8005d22 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	3314      	adds	r3, #20
 8005d74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005d78:	e853 3f00 	ldrex	r3, [r3]
 8005d7c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005d7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d80:	f023 0301 	bic.w	r3, r3, #1
 8005d84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	3314      	adds	r3, #20
 8005d8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005d92:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005d96:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d98:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005d9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005d9e:	e841 2300 	strex	r3, r2, [r1]
 8005da2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005da4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d1e1      	bne.n	8005d6e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3314      	adds	r3, #20
 8005db0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005db4:	e853 3f00 	ldrex	r3, [r3]
 8005db8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005dba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005dbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3314      	adds	r3, #20
 8005dca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005dce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005dd0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005dd4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005dd6:	e841 2300 	strex	r3, r2, [r1]
 8005dda:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005ddc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1e3      	bne.n	8005daa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2220      	movs	r2, #32
 8005de6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	330c      	adds	r3, #12
 8005df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dfa:	e853 3f00 	ldrex	r3, [r3]
 8005dfe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005e00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e02:	f023 0310 	bic.w	r3, r3, #16
 8005e06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	330c      	adds	r3, #12
 8005e10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005e14:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005e16:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e18:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005e1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e1c:	e841 2300 	strex	r3, r2, [r1]
 8005e20:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005e22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d1e3      	bne.n	8005df0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7fc ff3b 	bl	8002ca8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2202      	movs	r2, #2
 8005e36:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	4619      	mov	r1, r3
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f7fc f877 	bl	8001f3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e4e:	e09b      	b.n	8005f88 <HAL_UART_IRQHandler+0x518>
 8005e50:	080064f7 	.word	0x080064f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 808e 	beq.w	8005f8c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005e70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 8089 	beq.w	8005f8c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	330c      	adds	r3, #12
 8005e80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e84:	e853 3f00 	ldrex	r3, [r3]
 8005e88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005e90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	330c      	adds	r3, #12
 8005e9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005e9e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ea0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ea4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ea6:	e841 2300 	strex	r3, r2, [r1]
 8005eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005eac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1e3      	bne.n	8005e7a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	3314      	adds	r3, #20
 8005eb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebc:	e853 3f00 	ldrex	r3, [r3]
 8005ec0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	f023 0301 	bic.w	r3, r3, #1
 8005ec8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	3314      	adds	r3, #20
 8005ed2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005ed6:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005edc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ede:	e841 2300 	strex	r3, r2, [r1]
 8005ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1e3      	bne.n	8005eb2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2220      	movs	r2, #32
 8005eee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	330c      	adds	r3, #12
 8005efe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	e853 3f00 	ldrex	r3, [r3]
 8005f06:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f023 0310 	bic.w	r3, r3, #16
 8005f0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	330c      	adds	r3, #12
 8005f18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005f1c:	61fa      	str	r2, [r7, #28]
 8005f1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f20:	69b9      	ldr	r1, [r7, #24]
 8005f22:	69fa      	ldr	r2, [r7, #28]
 8005f24:	e841 2300 	strex	r3, r2, [r1]
 8005f28:	617b      	str	r3, [r7, #20]
   return(result);
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1e3      	bne.n	8005ef8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2202      	movs	r2, #2
 8005f34:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f7fb fffd 	bl	8001f3c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f42:	e023      	b.n	8005f8c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d009      	beq.n	8005f64 <HAL_UART_IRQHandler+0x4f4>
 8005f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d003      	beq.n	8005f64 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fade 	bl	800651e <UART_Transmit_IT>
    return;
 8005f62:	e014      	b.n	8005f8e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d00e      	beq.n	8005f8e <HAL_UART_IRQHandler+0x51e>
 8005f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d008      	beq.n	8005f8e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 fb1e 	bl	80065be <UART_EndTransmit_IT>
    return;
 8005f82:	e004      	b.n	8005f8e <HAL_UART_IRQHandler+0x51e>
    return;
 8005f84:	bf00      	nop
 8005f86:	e002      	b.n	8005f8e <HAL_UART_IRQHandler+0x51e>
      return;
 8005f88:	bf00      	nop
 8005f8a:	e000      	b.n	8005f8e <HAL_UART_IRQHandler+0x51e>
      return;
 8005f8c:	bf00      	nop
  }
}
 8005f8e:	37e8      	adds	r7, #232	@ 0xe8
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005f9c:	bf00      	nop
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005fb0:	bf00      	nop
 8005fb2:	370c      	adds	r7, #12
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005fc4:	bf00      	nop
 8005fc6:	370c      	adds	r7, #12
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005fec:	bf00      	nop
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b090      	sub	sp, #64	@ 0x40
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006004:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006010:	2b00      	cmp	r3, #0
 8006012:	d137      	bne.n	8006084 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006016:	2200      	movs	r2, #0
 8006018:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800601a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	3314      	adds	r3, #20
 8006020:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006024:	e853 3f00 	ldrex	r3, [r3]
 8006028:	623b      	str	r3, [r7, #32]
   return(result);
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006030:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006032:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	3314      	adds	r3, #20
 8006038:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800603a:	633a      	str	r2, [r7, #48]	@ 0x30
 800603c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006040:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006042:	e841 2300 	strex	r3, r2, [r1]
 8006046:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800604a:	2b00      	cmp	r3, #0
 800604c:	d1e5      	bne.n	800601a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800604e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	330c      	adds	r3, #12
 8006054:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	e853 3f00 	ldrex	r3, [r3]
 800605c:	60fb      	str	r3, [r7, #12]
   return(result);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006064:	637b      	str	r3, [r7, #52]	@ 0x34
 8006066:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	330c      	adds	r3, #12
 800606c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800606e:	61fa      	str	r2, [r7, #28]
 8006070:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006072:	69b9      	ldr	r1, [r7, #24]
 8006074:	69fa      	ldr	r2, [r7, #28]
 8006076:	e841 2300 	strex	r3, r2, [r1]
 800607a:	617b      	str	r3, [r7, #20]
   return(result);
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1e5      	bne.n	800604e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006082:	e002      	b.n	800608a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006084:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006086:	f7ff ff85 	bl	8005f94 <HAL_UART_TxCpltCallback>
}
 800608a:	bf00      	nop
 800608c:	3740      	adds	r7, #64	@ 0x40
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006092:	b580      	push	{r7, lr}
 8006094:	b084      	sub	sp, #16
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800609e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f7ff ff81 	bl	8005fa8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060a6:	bf00      	nop
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b09c      	sub	sp, #112	@ 0x70
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ba:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d172      	bne.n	80061b0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80060ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060cc:	2200      	movs	r2, #0
 80060ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	330c      	adds	r3, #12
 80060d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060da:	e853 3f00 	ldrex	r3, [r3]
 80060de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80060e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80060e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	330c      	adds	r3, #12
 80060ee:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80060f0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80060f2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80060f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80060f8:	e841 2300 	strex	r3, r2, [r1]
 80060fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80060fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1e5      	bne.n	80060d0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006104:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3314      	adds	r3, #20
 800610a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800610e:	e853 3f00 	ldrex	r3, [r3]
 8006112:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006116:	f023 0301 	bic.w	r3, r3, #1
 800611a:	667b      	str	r3, [r7, #100]	@ 0x64
 800611c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3314      	adds	r3, #20
 8006122:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006124:	647a      	str	r2, [r7, #68]	@ 0x44
 8006126:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006128:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800612a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800612c:	e841 2300 	strex	r3, r2, [r1]
 8006130:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1e5      	bne.n	8006104 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006138:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3314      	adds	r3, #20
 800613e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006142:	e853 3f00 	ldrex	r3, [r3]
 8006146:	623b      	str	r3, [r7, #32]
   return(result);
 8006148:	6a3b      	ldr	r3, [r7, #32]
 800614a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800614e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006150:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3314      	adds	r3, #20
 8006156:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006158:	633a      	str	r2, [r7, #48]	@ 0x30
 800615a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800615e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006160:	e841 2300 	strex	r3, r2, [r1]
 8006164:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1e5      	bne.n	8006138 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800616c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800616e:	2220      	movs	r2, #32
 8006170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006174:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006176:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006178:	2b01      	cmp	r3, #1
 800617a:	d119      	bne.n	80061b0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800617c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	330c      	adds	r3, #12
 8006182:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	e853 3f00 	ldrex	r3, [r3]
 800618a:	60fb      	str	r3, [r7, #12]
   return(result);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f023 0310 	bic.w	r3, r3, #16
 8006192:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006194:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	330c      	adds	r3, #12
 800619a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800619c:	61fa      	str	r2, [r7, #28]
 800619e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061a0:	69b9      	ldr	r1, [r7, #24]
 80061a2:	69fa      	ldr	r2, [r7, #28]
 80061a4:	e841 2300 	strex	r3, r2, [r1]
 80061a8:	617b      	str	r3, [r7, #20]
   return(result);
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1e5      	bne.n	800617c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061b2:	2200      	movs	r2, #0
 80061b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d106      	bne.n	80061cc <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80061c2:	4619      	mov	r1, r3
 80061c4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80061c6:	f7fb feb9 	bl	8001f3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80061ca:	e002      	b.n	80061d2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80061cc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80061ce:	f7ff fef5 	bl	8005fbc <HAL_UART_RxCpltCallback>
}
 80061d2:	bf00      	nop
 80061d4:	3770      	adds	r7, #112	@ 0x70
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b084      	sub	sp, #16
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2201      	movs	r2, #1
 80061ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d108      	bne.n	8006208 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80061fa:	085b      	lsrs	r3, r3, #1
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	4619      	mov	r1, r3
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f7fb fe9b 	bl	8001f3c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006206:	e002      	b.n	800620e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f7ff fee1 	bl	8005fd0 <HAL_UART_RxHalfCpltCallback>
}
 800620e:	bf00      	nop
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006216:	b580      	push	{r7, lr}
 8006218:	b084      	sub	sp, #16
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800621e:	2300      	movs	r3, #0
 8006220:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006226:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	695b      	ldr	r3, [r3, #20]
 800622e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006232:	2b80      	cmp	r3, #128	@ 0x80
 8006234:	bf0c      	ite	eq
 8006236:	2301      	moveq	r3, #1
 8006238:	2300      	movne	r3, #0
 800623a:	b2db      	uxtb	r3, r3
 800623c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b21      	cmp	r3, #33	@ 0x21
 8006248:	d108      	bne.n	800625c <UART_DMAError+0x46>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d005      	beq.n	800625c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	2200      	movs	r2, #0
 8006254:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006256:	68b8      	ldr	r0, [r7, #8]
 8006258:	f000 f8c2 	bl	80063e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006266:	2b40      	cmp	r3, #64	@ 0x40
 8006268:	bf0c      	ite	eq
 800626a:	2301      	moveq	r3, #1
 800626c:	2300      	movne	r3, #0
 800626e:	b2db      	uxtb	r3, r3
 8006270:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b22      	cmp	r3, #34	@ 0x22
 800627c:	d108      	bne.n	8006290 <UART_DMAError+0x7a>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d005      	beq.n	8006290 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2200      	movs	r2, #0
 8006288:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800628a:	68b8      	ldr	r0, [r7, #8]
 800628c:	f000 f8d0 	bl	8006430 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006294:	f043 0210 	orr.w	r2, r3, #16
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800629c:	68b8      	ldr	r0, [r7, #8]
 800629e:	f7ff fea1 	bl	8005fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062a2:	bf00      	nop
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
	...

080062ac <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b098      	sub	sp, #96	@ 0x60
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	4613      	mov	r3, r2
 80062b8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80062ba:	68ba      	ldr	r2, [r7, #8]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	88fa      	ldrh	r2, [r7, #6]
 80062c4:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2222      	movs	r2, #34	@ 0x22
 80062d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062d8:	4a3e      	ldr	r2, [pc, #248]	@ (80063d4 <UART_Start_Receive_DMA+0x128>)
 80062da:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062e0:	4a3d      	ldr	r2, [pc, #244]	@ (80063d8 <UART_Start_Receive_DMA+0x12c>)
 80062e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062e8:	4a3c      	ldr	r2, [pc, #240]	@ (80063dc <UART_Start_Receive_DMA+0x130>)
 80062ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062f0:	2200      	movs	r2, #0
 80062f2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80062f4:	f107 0308 	add.w	r3, r7, #8
 80062f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	3304      	adds	r3, #4
 8006304:	4619      	mov	r1, r3
 8006306:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	88fb      	ldrh	r3, [r7, #6]
 800630c:	f7fc fc74 	bl	8002bf8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006310:	2300      	movs	r3, #0
 8006312:	613b      	str	r3, [r7, #16]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	613b      	str	r3, [r7, #16]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	613b      	str	r3, [r7, #16]
 8006324:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d019      	beq.n	8006362 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	330c      	adds	r3, #12
 8006334:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006338:	e853 3f00 	ldrex	r3, [r3]
 800633c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800633e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006340:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006344:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	330c      	adds	r3, #12
 800634c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800634e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006350:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006352:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006354:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006356:	e841 2300 	strex	r3, r2, [r1]
 800635a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800635c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800635e:	2b00      	cmp	r3, #0
 8006360:	d1e5      	bne.n	800632e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	3314      	adds	r3, #20
 8006368:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800636a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800636c:	e853 3f00 	ldrex	r3, [r3]
 8006370:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006374:	f043 0301 	orr.w	r3, r3, #1
 8006378:	657b      	str	r3, [r7, #84]	@ 0x54
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	3314      	adds	r3, #20
 8006380:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006382:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006384:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006386:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006388:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800638a:	e841 2300 	strex	r3, r2, [r1]
 800638e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1e5      	bne.n	8006362 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	3314      	adds	r3, #20
 800639c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639e:	69bb      	ldr	r3, [r7, #24]
 80063a0:	e853 3f00 	ldrex	r3, [r3]
 80063a4:	617b      	str	r3, [r7, #20]
   return(result);
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	3314      	adds	r3, #20
 80063b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80063b6:	627a      	str	r2, [r7, #36]	@ 0x24
 80063b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ba:	6a39      	ldr	r1, [r7, #32]
 80063bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063be:	e841 2300 	strex	r3, r2, [r1]
 80063c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80063c4:	69fb      	ldr	r3, [r7, #28]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1e5      	bne.n	8006396 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80063ca:	2300      	movs	r3, #0
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3760      	adds	r7, #96	@ 0x60
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	080060af 	.word	0x080060af
 80063d8:	080061db 	.word	0x080061db
 80063dc:	08006217 	.word	0x08006217

080063e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b089      	sub	sp, #36	@ 0x24
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	330c      	adds	r3, #12
 80063ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	e853 3f00 	ldrex	r3, [r3]
 80063f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80063fe:	61fb      	str	r3, [r7, #28]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	330c      	adds	r3, #12
 8006406:	69fa      	ldr	r2, [r7, #28]
 8006408:	61ba      	str	r2, [r7, #24]
 800640a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640c:	6979      	ldr	r1, [r7, #20]
 800640e:	69ba      	ldr	r2, [r7, #24]
 8006410:	e841 2300 	strex	r3, r2, [r1]
 8006414:	613b      	str	r3, [r7, #16]
   return(result);
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1e5      	bne.n	80063e8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2220      	movs	r2, #32
 8006420:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006424:	bf00      	nop
 8006426:	3724      	adds	r7, #36	@ 0x24
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006430:	b480      	push	{r7}
 8006432:	b095      	sub	sp, #84	@ 0x54
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	330c      	adds	r3, #12
 800643e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006442:	e853 3f00 	ldrex	r3, [r3]
 8006446:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800644e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	330c      	adds	r3, #12
 8006456:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006458:	643a      	str	r2, [r7, #64]	@ 0x40
 800645a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800645e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006460:	e841 2300 	strex	r3, r2, [r1]
 8006464:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1e5      	bne.n	8006438 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3314      	adds	r3, #20
 8006472:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006474:	6a3b      	ldr	r3, [r7, #32]
 8006476:	e853 3f00 	ldrex	r3, [r3]
 800647a:	61fb      	str	r3, [r7, #28]
   return(result);
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	f023 0301 	bic.w	r3, r3, #1
 8006482:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	3314      	adds	r3, #20
 800648a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800648c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800648e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006490:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006492:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006494:	e841 2300 	strex	r3, r2, [r1]
 8006498:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800649a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1e5      	bne.n	800646c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d119      	bne.n	80064dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	330c      	adds	r3, #12
 80064ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	e853 3f00 	ldrex	r3, [r3]
 80064b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	f023 0310 	bic.w	r3, r3, #16
 80064be:	647b      	str	r3, [r7, #68]	@ 0x44
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	330c      	adds	r3, #12
 80064c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064c8:	61ba      	str	r2, [r7, #24]
 80064ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064cc:	6979      	ldr	r1, [r7, #20]
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	e841 2300 	strex	r3, r2, [r1]
 80064d4:	613b      	str	r3, [r7, #16]
   return(result);
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1e5      	bne.n	80064a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2220      	movs	r2, #32
 80064e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80064ea:	bf00      	nop
 80064ec:	3754      	adds	r7, #84	@ 0x54
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr

080064f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b084      	sub	sp, #16
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006502:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f7ff fd67 	bl	8005fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006516:	bf00      	nop
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}

0800651e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800651e:	b480      	push	{r7}
 8006520:	b085      	sub	sp, #20
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b21      	cmp	r3, #33	@ 0x21
 8006530:	d13e      	bne.n	80065b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800653a:	d114      	bne.n	8006566 <UART_Transmit_IT+0x48>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d110      	bne.n	8006566 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a1b      	ldr	r3, [r3, #32]
 8006548:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	881b      	ldrh	r3, [r3, #0]
 800654e:	461a      	mov	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006558:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	1c9a      	adds	r2, r3, #2
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	621a      	str	r2, [r3, #32]
 8006564:	e008      	b.n	8006578 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a1b      	ldr	r3, [r3, #32]
 800656a:	1c59      	adds	r1, r3, #1
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	6211      	str	r1, [r2, #32]
 8006570:	781a      	ldrb	r2, [r3, #0]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800657c:	b29b      	uxth	r3, r3
 800657e:	3b01      	subs	r3, #1
 8006580:	b29b      	uxth	r3, r3
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	4619      	mov	r1, r3
 8006586:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10f      	bne.n	80065ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68da      	ldr	r2, [r3, #12]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800659a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	68da      	ldr	r2, [r3, #12]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80065ac:	2300      	movs	r3, #0
 80065ae:	e000      	b.n	80065b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80065b0:	2302      	movs	r3, #2
  }
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3714      	adds	r7, #20
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065be:	b580      	push	{r7, lr}
 80065c0:	b082      	sub	sp, #8
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68da      	ldr	r2, [r3, #12]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065d4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2220      	movs	r2, #32
 80065da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7ff fcd8 	bl	8005f94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3708      	adds	r7, #8
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}

080065ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b08c      	sub	sp, #48	@ 0x30
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b22      	cmp	r3, #34	@ 0x22
 8006600:	f040 80ae 	bne.w	8006760 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800660c:	d117      	bne.n	800663e <UART_Receive_IT+0x50>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d113      	bne.n	800663e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006616:	2300      	movs	r3, #0
 8006618:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800661e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	b29b      	uxth	r3, r3
 8006628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800662c:	b29a      	uxth	r2, r3
 800662e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006630:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006636:	1c9a      	adds	r2, r3, #2
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	629a      	str	r2, [r3, #40]	@ 0x28
 800663c:	e026      	b.n	800668c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006642:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006644:	2300      	movs	r3, #0
 8006646:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006650:	d007      	beq.n	8006662 <UART_Receive_IT+0x74>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10a      	bne.n	8006670 <UART_Receive_IT+0x82>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d106      	bne.n	8006670 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	b2da      	uxtb	r2, r3
 800666a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800666c:	701a      	strb	r2, [r3, #0]
 800666e:	e008      	b.n	8006682 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	b2db      	uxtb	r3, r3
 8006678:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800667c:	b2da      	uxtb	r2, r3
 800667e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006680:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006686:	1c5a      	adds	r2, r3, #1
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006690:	b29b      	uxth	r3, r3
 8006692:	3b01      	subs	r3, #1
 8006694:	b29b      	uxth	r3, r3
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	4619      	mov	r1, r3
 800669a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800669c:	2b00      	cmp	r3, #0
 800669e:	d15d      	bne.n	800675c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68da      	ldr	r2, [r3, #12]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0220 	bic.w	r2, r2, #32
 80066ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68da      	ldr	r2, [r3, #12]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80066be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	695a      	ldr	r2, [r3, #20]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f022 0201 	bic.w	r2, r2, #1
 80066ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2220      	movs	r2, #32
 80066d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e2:	2b01      	cmp	r3, #1
 80066e4:	d135      	bne.n	8006752 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	330c      	adds	r3, #12
 80066f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	e853 3f00 	ldrex	r3, [r3]
 80066fa:	613b      	str	r3, [r7, #16]
   return(result);
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	f023 0310 	bic.w	r3, r3, #16
 8006702:	627b      	str	r3, [r7, #36]	@ 0x24
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	330c      	adds	r3, #12
 800670a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800670c:	623a      	str	r2, [r7, #32]
 800670e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006710:	69f9      	ldr	r1, [r7, #28]
 8006712:	6a3a      	ldr	r2, [r7, #32]
 8006714:	e841 2300 	strex	r3, r2, [r1]
 8006718:	61bb      	str	r3, [r7, #24]
   return(result);
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1e5      	bne.n	80066ec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0310 	and.w	r3, r3, #16
 800672a:	2b10      	cmp	r3, #16
 800672c:	d10a      	bne.n	8006744 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800672e:	2300      	movs	r3, #0
 8006730:	60fb      	str	r3, [r7, #12]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	60fb      	str	r3, [r7, #12]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	60fb      	str	r3, [r7, #12]
 8006742:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006748:	4619      	mov	r1, r3
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7fb fbf6 	bl	8001f3c <HAL_UARTEx_RxEventCallback>
 8006750:	e002      	b.n	8006758 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7ff fc32 	bl	8005fbc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006758:	2300      	movs	r3, #0
 800675a:	e002      	b.n	8006762 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800675c:	2300      	movs	r3, #0
 800675e:	e000      	b.n	8006762 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006760:	2302      	movs	r3, #2
  }
}
 8006762:	4618      	mov	r0, r3
 8006764:	3730      	adds	r7, #48	@ 0x30
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
	...

0800676c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800676c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006770:	b0c0      	sub	sp, #256	@ 0x100
 8006772:	af00      	add	r7, sp, #0
 8006774:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006784:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006788:	68d9      	ldr	r1, [r3, #12]
 800678a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	ea40 0301 	orr.w	r3, r0, r1
 8006794:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006796:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800679a:	689a      	ldr	r2, [r3, #8]
 800679c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	431a      	orrs	r2, r3
 80067a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	431a      	orrs	r2, r3
 80067ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067b0:	69db      	ldr	r3, [r3, #28]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80067b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80067c4:	f021 010c 	bic.w	r1, r1, #12
 80067c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80067d2:	430b      	orrs	r3, r1
 80067d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80067d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80067e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067e6:	6999      	ldr	r1, [r3, #24]
 80067e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	ea40 0301 	orr.w	r3, r0, r1
 80067f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80067f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	4b8f      	ldr	r3, [pc, #572]	@ (8006a38 <UART_SetConfig+0x2cc>)
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d005      	beq.n	800680c <UART_SetConfig+0xa0>
 8006800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	4b8d      	ldr	r3, [pc, #564]	@ (8006a3c <UART_SetConfig+0x2d0>)
 8006808:	429a      	cmp	r2, r3
 800680a:	d104      	bne.n	8006816 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800680c:	f7fe f976 	bl	8004afc <HAL_RCC_GetPCLK2Freq>
 8006810:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006814:	e003      	b.n	800681e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006816:	f7fe f95d 	bl	8004ad4 <HAL_RCC_GetPCLK1Freq>
 800681a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800681e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006822:	69db      	ldr	r3, [r3, #28]
 8006824:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006828:	f040 810c 	bne.w	8006a44 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800682c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006830:	2200      	movs	r2, #0
 8006832:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006836:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800683a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800683e:	4622      	mov	r2, r4
 8006840:	462b      	mov	r3, r5
 8006842:	1891      	adds	r1, r2, r2
 8006844:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006846:	415b      	adcs	r3, r3
 8006848:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800684a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800684e:	4621      	mov	r1, r4
 8006850:	eb12 0801 	adds.w	r8, r2, r1
 8006854:	4629      	mov	r1, r5
 8006856:	eb43 0901 	adc.w	r9, r3, r1
 800685a:	f04f 0200 	mov.w	r2, #0
 800685e:	f04f 0300 	mov.w	r3, #0
 8006862:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006866:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800686a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800686e:	4690      	mov	r8, r2
 8006870:	4699      	mov	r9, r3
 8006872:	4623      	mov	r3, r4
 8006874:	eb18 0303 	adds.w	r3, r8, r3
 8006878:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800687c:	462b      	mov	r3, r5
 800687e:	eb49 0303 	adc.w	r3, r9, r3
 8006882:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	2200      	movs	r2, #0
 800688e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006892:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006896:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800689a:	460b      	mov	r3, r1
 800689c:	18db      	adds	r3, r3, r3
 800689e:	653b      	str	r3, [r7, #80]	@ 0x50
 80068a0:	4613      	mov	r3, r2
 80068a2:	eb42 0303 	adc.w	r3, r2, r3
 80068a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80068a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80068ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80068b0:	f7fa f9f2 	bl	8000c98 <__aeabi_uldivmod>
 80068b4:	4602      	mov	r2, r0
 80068b6:	460b      	mov	r3, r1
 80068b8:	4b61      	ldr	r3, [pc, #388]	@ (8006a40 <UART_SetConfig+0x2d4>)
 80068ba:	fba3 2302 	umull	r2, r3, r3, r2
 80068be:	095b      	lsrs	r3, r3, #5
 80068c0:	011c      	lsls	r4, r3, #4
 80068c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068c6:	2200      	movs	r2, #0
 80068c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80068cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80068d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80068d4:	4642      	mov	r2, r8
 80068d6:	464b      	mov	r3, r9
 80068d8:	1891      	adds	r1, r2, r2
 80068da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80068dc:	415b      	adcs	r3, r3
 80068de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80068e4:	4641      	mov	r1, r8
 80068e6:	eb12 0a01 	adds.w	sl, r2, r1
 80068ea:	4649      	mov	r1, r9
 80068ec:	eb43 0b01 	adc.w	fp, r3, r1
 80068f0:	f04f 0200 	mov.w	r2, #0
 80068f4:	f04f 0300 	mov.w	r3, #0
 80068f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80068fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006900:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006904:	4692      	mov	sl, r2
 8006906:	469b      	mov	fp, r3
 8006908:	4643      	mov	r3, r8
 800690a:	eb1a 0303 	adds.w	r3, sl, r3
 800690e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006912:	464b      	mov	r3, r9
 8006914:	eb4b 0303 	adc.w	r3, fp, r3
 8006918:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800691c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006928:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800692c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006930:	460b      	mov	r3, r1
 8006932:	18db      	adds	r3, r3, r3
 8006934:	643b      	str	r3, [r7, #64]	@ 0x40
 8006936:	4613      	mov	r3, r2
 8006938:	eb42 0303 	adc.w	r3, r2, r3
 800693c:	647b      	str	r3, [r7, #68]	@ 0x44
 800693e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006942:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006946:	f7fa f9a7 	bl	8000c98 <__aeabi_uldivmod>
 800694a:	4602      	mov	r2, r0
 800694c:	460b      	mov	r3, r1
 800694e:	4611      	mov	r1, r2
 8006950:	4b3b      	ldr	r3, [pc, #236]	@ (8006a40 <UART_SetConfig+0x2d4>)
 8006952:	fba3 2301 	umull	r2, r3, r3, r1
 8006956:	095b      	lsrs	r3, r3, #5
 8006958:	2264      	movs	r2, #100	@ 0x64
 800695a:	fb02 f303 	mul.w	r3, r2, r3
 800695e:	1acb      	subs	r3, r1, r3
 8006960:	00db      	lsls	r3, r3, #3
 8006962:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006966:	4b36      	ldr	r3, [pc, #216]	@ (8006a40 <UART_SetConfig+0x2d4>)
 8006968:	fba3 2302 	umull	r2, r3, r3, r2
 800696c:	095b      	lsrs	r3, r3, #5
 800696e:	005b      	lsls	r3, r3, #1
 8006970:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006974:	441c      	add	r4, r3
 8006976:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800697a:	2200      	movs	r2, #0
 800697c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006980:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006984:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006988:	4642      	mov	r2, r8
 800698a:	464b      	mov	r3, r9
 800698c:	1891      	adds	r1, r2, r2
 800698e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006990:	415b      	adcs	r3, r3
 8006992:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006994:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006998:	4641      	mov	r1, r8
 800699a:	1851      	adds	r1, r2, r1
 800699c:	6339      	str	r1, [r7, #48]	@ 0x30
 800699e:	4649      	mov	r1, r9
 80069a0:	414b      	adcs	r3, r1
 80069a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80069a4:	f04f 0200 	mov.w	r2, #0
 80069a8:	f04f 0300 	mov.w	r3, #0
 80069ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80069b0:	4659      	mov	r1, fp
 80069b2:	00cb      	lsls	r3, r1, #3
 80069b4:	4651      	mov	r1, sl
 80069b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069ba:	4651      	mov	r1, sl
 80069bc:	00ca      	lsls	r2, r1, #3
 80069be:	4610      	mov	r0, r2
 80069c0:	4619      	mov	r1, r3
 80069c2:	4603      	mov	r3, r0
 80069c4:	4642      	mov	r2, r8
 80069c6:	189b      	adds	r3, r3, r2
 80069c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069cc:	464b      	mov	r3, r9
 80069ce:	460a      	mov	r2, r1
 80069d0:	eb42 0303 	adc.w	r3, r2, r3
 80069d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80069d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80069e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80069e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80069ec:	460b      	mov	r3, r1
 80069ee:	18db      	adds	r3, r3, r3
 80069f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069f2:	4613      	mov	r3, r2
 80069f4:	eb42 0303 	adc.w	r3, r2, r3
 80069f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80069fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006a02:	f7fa f949 	bl	8000c98 <__aeabi_uldivmod>
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a40 <UART_SetConfig+0x2d4>)
 8006a0c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a10:	095b      	lsrs	r3, r3, #5
 8006a12:	2164      	movs	r1, #100	@ 0x64
 8006a14:	fb01 f303 	mul.w	r3, r1, r3
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	00db      	lsls	r3, r3, #3
 8006a1c:	3332      	adds	r3, #50	@ 0x32
 8006a1e:	4a08      	ldr	r2, [pc, #32]	@ (8006a40 <UART_SetConfig+0x2d4>)
 8006a20:	fba2 2303 	umull	r2, r3, r2, r3
 8006a24:	095b      	lsrs	r3, r3, #5
 8006a26:	f003 0207 	and.w	r2, r3, #7
 8006a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4422      	add	r2, r4
 8006a32:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a34:	e106      	b.n	8006c44 <UART_SetConfig+0x4d8>
 8006a36:	bf00      	nop
 8006a38:	40011000 	.word	0x40011000
 8006a3c:	40011400 	.word	0x40011400
 8006a40:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006a4e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006a52:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006a56:	4642      	mov	r2, r8
 8006a58:	464b      	mov	r3, r9
 8006a5a:	1891      	adds	r1, r2, r2
 8006a5c:	6239      	str	r1, [r7, #32]
 8006a5e:	415b      	adcs	r3, r3
 8006a60:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a62:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a66:	4641      	mov	r1, r8
 8006a68:	1854      	adds	r4, r2, r1
 8006a6a:	4649      	mov	r1, r9
 8006a6c:	eb43 0501 	adc.w	r5, r3, r1
 8006a70:	f04f 0200 	mov.w	r2, #0
 8006a74:	f04f 0300 	mov.w	r3, #0
 8006a78:	00eb      	lsls	r3, r5, #3
 8006a7a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a7e:	00e2      	lsls	r2, r4, #3
 8006a80:	4614      	mov	r4, r2
 8006a82:	461d      	mov	r5, r3
 8006a84:	4643      	mov	r3, r8
 8006a86:	18e3      	adds	r3, r4, r3
 8006a88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006a8c:	464b      	mov	r3, r9
 8006a8e:	eb45 0303 	adc.w	r3, r5, r3
 8006a92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006aa2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006aa6:	f04f 0200 	mov.w	r2, #0
 8006aaa:	f04f 0300 	mov.w	r3, #0
 8006aae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006ab2:	4629      	mov	r1, r5
 8006ab4:	008b      	lsls	r3, r1, #2
 8006ab6:	4621      	mov	r1, r4
 8006ab8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006abc:	4621      	mov	r1, r4
 8006abe:	008a      	lsls	r2, r1, #2
 8006ac0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006ac4:	f7fa f8e8 	bl	8000c98 <__aeabi_uldivmod>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	4b60      	ldr	r3, [pc, #384]	@ (8006c50 <UART_SetConfig+0x4e4>)
 8006ace:	fba3 2302 	umull	r2, r3, r3, r2
 8006ad2:	095b      	lsrs	r3, r3, #5
 8006ad4:	011c      	lsls	r4, r3, #4
 8006ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ada:	2200      	movs	r2, #0
 8006adc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ae0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006ae4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006ae8:	4642      	mov	r2, r8
 8006aea:	464b      	mov	r3, r9
 8006aec:	1891      	adds	r1, r2, r2
 8006aee:	61b9      	str	r1, [r7, #24]
 8006af0:	415b      	adcs	r3, r3
 8006af2:	61fb      	str	r3, [r7, #28]
 8006af4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006af8:	4641      	mov	r1, r8
 8006afa:	1851      	adds	r1, r2, r1
 8006afc:	6139      	str	r1, [r7, #16]
 8006afe:	4649      	mov	r1, r9
 8006b00:	414b      	adcs	r3, r1
 8006b02:	617b      	str	r3, [r7, #20]
 8006b04:	f04f 0200 	mov.w	r2, #0
 8006b08:	f04f 0300 	mov.w	r3, #0
 8006b0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b10:	4659      	mov	r1, fp
 8006b12:	00cb      	lsls	r3, r1, #3
 8006b14:	4651      	mov	r1, sl
 8006b16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b1a:	4651      	mov	r1, sl
 8006b1c:	00ca      	lsls	r2, r1, #3
 8006b1e:	4610      	mov	r0, r2
 8006b20:	4619      	mov	r1, r3
 8006b22:	4603      	mov	r3, r0
 8006b24:	4642      	mov	r2, r8
 8006b26:	189b      	adds	r3, r3, r2
 8006b28:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b2c:	464b      	mov	r3, r9
 8006b2e:	460a      	mov	r2, r1
 8006b30:	eb42 0303 	adc.w	r3, r2, r3
 8006b34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b42:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006b44:	f04f 0200 	mov.w	r2, #0
 8006b48:	f04f 0300 	mov.w	r3, #0
 8006b4c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006b50:	4649      	mov	r1, r9
 8006b52:	008b      	lsls	r3, r1, #2
 8006b54:	4641      	mov	r1, r8
 8006b56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b5a:	4641      	mov	r1, r8
 8006b5c:	008a      	lsls	r2, r1, #2
 8006b5e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006b62:	f7fa f899 	bl	8000c98 <__aeabi_uldivmod>
 8006b66:	4602      	mov	r2, r0
 8006b68:	460b      	mov	r3, r1
 8006b6a:	4611      	mov	r1, r2
 8006b6c:	4b38      	ldr	r3, [pc, #224]	@ (8006c50 <UART_SetConfig+0x4e4>)
 8006b6e:	fba3 2301 	umull	r2, r3, r3, r1
 8006b72:	095b      	lsrs	r3, r3, #5
 8006b74:	2264      	movs	r2, #100	@ 0x64
 8006b76:	fb02 f303 	mul.w	r3, r2, r3
 8006b7a:	1acb      	subs	r3, r1, r3
 8006b7c:	011b      	lsls	r3, r3, #4
 8006b7e:	3332      	adds	r3, #50	@ 0x32
 8006b80:	4a33      	ldr	r2, [pc, #204]	@ (8006c50 <UART_SetConfig+0x4e4>)
 8006b82:	fba2 2303 	umull	r2, r3, r2, r3
 8006b86:	095b      	lsrs	r3, r3, #5
 8006b88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006b8c:	441c      	add	r4, r3
 8006b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b92:	2200      	movs	r2, #0
 8006b94:	673b      	str	r3, [r7, #112]	@ 0x70
 8006b96:	677a      	str	r2, [r7, #116]	@ 0x74
 8006b98:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006b9c:	4642      	mov	r2, r8
 8006b9e:	464b      	mov	r3, r9
 8006ba0:	1891      	adds	r1, r2, r2
 8006ba2:	60b9      	str	r1, [r7, #8]
 8006ba4:	415b      	adcs	r3, r3
 8006ba6:	60fb      	str	r3, [r7, #12]
 8006ba8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bac:	4641      	mov	r1, r8
 8006bae:	1851      	adds	r1, r2, r1
 8006bb0:	6039      	str	r1, [r7, #0]
 8006bb2:	4649      	mov	r1, r9
 8006bb4:	414b      	adcs	r3, r1
 8006bb6:	607b      	str	r3, [r7, #4]
 8006bb8:	f04f 0200 	mov.w	r2, #0
 8006bbc:	f04f 0300 	mov.w	r3, #0
 8006bc0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006bc4:	4659      	mov	r1, fp
 8006bc6:	00cb      	lsls	r3, r1, #3
 8006bc8:	4651      	mov	r1, sl
 8006bca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bce:	4651      	mov	r1, sl
 8006bd0:	00ca      	lsls	r2, r1, #3
 8006bd2:	4610      	mov	r0, r2
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	4642      	mov	r2, r8
 8006bda:	189b      	adds	r3, r3, r2
 8006bdc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006bde:	464b      	mov	r3, r9
 8006be0:	460a      	mov	r2, r1
 8006be2:	eb42 0303 	adc.w	r3, r2, r3
 8006be6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	663b      	str	r3, [r7, #96]	@ 0x60
 8006bf2:	667a      	str	r2, [r7, #100]	@ 0x64
 8006bf4:	f04f 0200 	mov.w	r2, #0
 8006bf8:	f04f 0300 	mov.w	r3, #0
 8006bfc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006c00:	4649      	mov	r1, r9
 8006c02:	008b      	lsls	r3, r1, #2
 8006c04:	4641      	mov	r1, r8
 8006c06:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c0a:	4641      	mov	r1, r8
 8006c0c:	008a      	lsls	r2, r1, #2
 8006c0e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006c12:	f7fa f841 	bl	8000c98 <__aeabi_uldivmod>
 8006c16:	4602      	mov	r2, r0
 8006c18:	460b      	mov	r3, r1
 8006c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006c50 <UART_SetConfig+0x4e4>)
 8006c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c20:	095b      	lsrs	r3, r3, #5
 8006c22:	2164      	movs	r1, #100	@ 0x64
 8006c24:	fb01 f303 	mul.w	r3, r1, r3
 8006c28:	1ad3      	subs	r3, r2, r3
 8006c2a:	011b      	lsls	r3, r3, #4
 8006c2c:	3332      	adds	r3, #50	@ 0x32
 8006c2e:	4a08      	ldr	r2, [pc, #32]	@ (8006c50 <UART_SetConfig+0x4e4>)
 8006c30:	fba2 2303 	umull	r2, r3, r2, r3
 8006c34:	095b      	lsrs	r3, r3, #5
 8006c36:	f003 020f 	and.w	r2, r3, #15
 8006c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4422      	add	r2, r4
 8006c42:	609a      	str	r2, [r3, #8]
}
 8006c44:	bf00      	nop
 8006c46:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c50:	51eb851f 	.word	0x51eb851f

08006c54 <__cvt>:
 8006c54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c58:	ec57 6b10 	vmov	r6, r7, d0
 8006c5c:	2f00      	cmp	r7, #0
 8006c5e:	460c      	mov	r4, r1
 8006c60:	4619      	mov	r1, r3
 8006c62:	463b      	mov	r3, r7
 8006c64:	bfbb      	ittet	lt
 8006c66:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006c6a:	461f      	movlt	r7, r3
 8006c6c:	2300      	movge	r3, #0
 8006c6e:	232d      	movlt	r3, #45	@ 0x2d
 8006c70:	700b      	strb	r3, [r1, #0]
 8006c72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c74:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006c78:	4691      	mov	r9, r2
 8006c7a:	f023 0820 	bic.w	r8, r3, #32
 8006c7e:	bfbc      	itt	lt
 8006c80:	4632      	movlt	r2, r6
 8006c82:	4616      	movlt	r6, r2
 8006c84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006c88:	d005      	beq.n	8006c96 <__cvt+0x42>
 8006c8a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006c8e:	d100      	bne.n	8006c92 <__cvt+0x3e>
 8006c90:	3401      	adds	r4, #1
 8006c92:	2102      	movs	r1, #2
 8006c94:	e000      	b.n	8006c98 <__cvt+0x44>
 8006c96:	2103      	movs	r1, #3
 8006c98:	ab03      	add	r3, sp, #12
 8006c9a:	9301      	str	r3, [sp, #4]
 8006c9c:	ab02      	add	r3, sp, #8
 8006c9e:	9300      	str	r3, [sp, #0]
 8006ca0:	ec47 6b10 	vmov	d0, r6, r7
 8006ca4:	4653      	mov	r3, sl
 8006ca6:	4622      	mov	r2, r4
 8006ca8:	f001 f8a2 	bl	8007df0 <_dtoa_r>
 8006cac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006cb0:	4605      	mov	r5, r0
 8006cb2:	d119      	bne.n	8006ce8 <__cvt+0x94>
 8006cb4:	f019 0f01 	tst.w	r9, #1
 8006cb8:	d00e      	beq.n	8006cd8 <__cvt+0x84>
 8006cba:	eb00 0904 	add.w	r9, r0, r4
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	4639      	mov	r1, r7
 8006cc6:	f7f9 ff07 	bl	8000ad8 <__aeabi_dcmpeq>
 8006cca:	b108      	cbz	r0, 8006cd0 <__cvt+0x7c>
 8006ccc:	f8cd 900c 	str.w	r9, [sp, #12]
 8006cd0:	2230      	movs	r2, #48	@ 0x30
 8006cd2:	9b03      	ldr	r3, [sp, #12]
 8006cd4:	454b      	cmp	r3, r9
 8006cd6:	d31e      	bcc.n	8006d16 <__cvt+0xc2>
 8006cd8:	9b03      	ldr	r3, [sp, #12]
 8006cda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006cdc:	1b5b      	subs	r3, r3, r5
 8006cde:	4628      	mov	r0, r5
 8006ce0:	6013      	str	r3, [r2, #0]
 8006ce2:	b004      	add	sp, #16
 8006ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006cec:	eb00 0904 	add.w	r9, r0, r4
 8006cf0:	d1e5      	bne.n	8006cbe <__cvt+0x6a>
 8006cf2:	7803      	ldrb	r3, [r0, #0]
 8006cf4:	2b30      	cmp	r3, #48	@ 0x30
 8006cf6:	d10a      	bne.n	8006d0e <__cvt+0xba>
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	4630      	mov	r0, r6
 8006cfe:	4639      	mov	r1, r7
 8006d00:	f7f9 feea 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d04:	b918      	cbnz	r0, 8006d0e <__cvt+0xba>
 8006d06:	f1c4 0401 	rsb	r4, r4, #1
 8006d0a:	f8ca 4000 	str.w	r4, [sl]
 8006d0e:	f8da 3000 	ldr.w	r3, [sl]
 8006d12:	4499      	add	r9, r3
 8006d14:	e7d3      	b.n	8006cbe <__cvt+0x6a>
 8006d16:	1c59      	adds	r1, r3, #1
 8006d18:	9103      	str	r1, [sp, #12]
 8006d1a:	701a      	strb	r2, [r3, #0]
 8006d1c:	e7d9      	b.n	8006cd2 <__cvt+0x7e>

08006d1e <__exponent>:
 8006d1e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d20:	2900      	cmp	r1, #0
 8006d22:	bfba      	itte	lt
 8006d24:	4249      	neglt	r1, r1
 8006d26:	232d      	movlt	r3, #45	@ 0x2d
 8006d28:	232b      	movge	r3, #43	@ 0x2b
 8006d2a:	2909      	cmp	r1, #9
 8006d2c:	7002      	strb	r2, [r0, #0]
 8006d2e:	7043      	strb	r3, [r0, #1]
 8006d30:	dd29      	ble.n	8006d86 <__exponent+0x68>
 8006d32:	f10d 0307 	add.w	r3, sp, #7
 8006d36:	461d      	mov	r5, r3
 8006d38:	270a      	movs	r7, #10
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006d40:	fb07 1416 	mls	r4, r7, r6, r1
 8006d44:	3430      	adds	r4, #48	@ 0x30
 8006d46:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	2c63      	cmp	r4, #99	@ 0x63
 8006d4e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006d52:	4631      	mov	r1, r6
 8006d54:	dcf1      	bgt.n	8006d3a <__exponent+0x1c>
 8006d56:	3130      	adds	r1, #48	@ 0x30
 8006d58:	1e94      	subs	r4, r2, #2
 8006d5a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006d5e:	1c41      	adds	r1, r0, #1
 8006d60:	4623      	mov	r3, r4
 8006d62:	42ab      	cmp	r3, r5
 8006d64:	d30a      	bcc.n	8006d7c <__exponent+0x5e>
 8006d66:	f10d 0309 	add.w	r3, sp, #9
 8006d6a:	1a9b      	subs	r3, r3, r2
 8006d6c:	42ac      	cmp	r4, r5
 8006d6e:	bf88      	it	hi
 8006d70:	2300      	movhi	r3, #0
 8006d72:	3302      	adds	r3, #2
 8006d74:	4403      	add	r3, r0
 8006d76:	1a18      	subs	r0, r3, r0
 8006d78:	b003      	add	sp, #12
 8006d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d7c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006d80:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006d84:	e7ed      	b.n	8006d62 <__exponent+0x44>
 8006d86:	2330      	movs	r3, #48	@ 0x30
 8006d88:	3130      	adds	r1, #48	@ 0x30
 8006d8a:	7083      	strb	r3, [r0, #2]
 8006d8c:	70c1      	strb	r1, [r0, #3]
 8006d8e:	1d03      	adds	r3, r0, #4
 8006d90:	e7f1      	b.n	8006d76 <__exponent+0x58>
	...

08006d94 <_printf_float>:
 8006d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d98:	b08d      	sub	sp, #52	@ 0x34
 8006d9a:	460c      	mov	r4, r1
 8006d9c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006da0:	4616      	mov	r6, r2
 8006da2:	461f      	mov	r7, r3
 8006da4:	4605      	mov	r5, r0
 8006da6:	f000 ff1b 	bl	8007be0 <_localeconv_r>
 8006daa:	6803      	ldr	r3, [r0, #0]
 8006dac:	9304      	str	r3, [sp, #16]
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7f9 fa66 	bl	8000280 <strlen>
 8006db4:	2300      	movs	r3, #0
 8006db6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006db8:	f8d8 3000 	ldr.w	r3, [r8]
 8006dbc:	9005      	str	r0, [sp, #20]
 8006dbe:	3307      	adds	r3, #7
 8006dc0:	f023 0307 	bic.w	r3, r3, #7
 8006dc4:	f103 0208 	add.w	r2, r3, #8
 8006dc8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006dcc:	f8d4 b000 	ldr.w	fp, [r4]
 8006dd0:	f8c8 2000 	str.w	r2, [r8]
 8006dd4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006dd8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006ddc:	9307      	str	r3, [sp, #28]
 8006dde:	f8cd 8018 	str.w	r8, [sp, #24]
 8006de2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006de6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006dea:	4b9c      	ldr	r3, [pc, #624]	@ (800705c <_printf_float+0x2c8>)
 8006dec:	f04f 32ff 	mov.w	r2, #4294967295
 8006df0:	f7f9 fea4 	bl	8000b3c <__aeabi_dcmpun>
 8006df4:	bb70      	cbnz	r0, 8006e54 <_printf_float+0xc0>
 8006df6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006dfa:	4b98      	ldr	r3, [pc, #608]	@ (800705c <_printf_float+0x2c8>)
 8006dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8006e00:	f7f9 fe7e 	bl	8000b00 <__aeabi_dcmple>
 8006e04:	bb30      	cbnz	r0, 8006e54 <_printf_float+0xc0>
 8006e06:	2200      	movs	r2, #0
 8006e08:	2300      	movs	r3, #0
 8006e0a:	4640      	mov	r0, r8
 8006e0c:	4649      	mov	r1, r9
 8006e0e:	f7f9 fe6d 	bl	8000aec <__aeabi_dcmplt>
 8006e12:	b110      	cbz	r0, 8006e1a <_printf_float+0x86>
 8006e14:	232d      	movs	r3, #45	@ 0x2d
 8006e16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e1a:	4a91      	ldr	r2, [pc, #580]	@ (8007060 <_printf_float+0x2cc>)
 8006e1c:	4b91      	ldr	r3, [pc, #580]	@ (8007064 <_printf_float+0x2d0>)
 8006e1e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006e22:	bf94      	ite	ls
 8006e24:	4690      	movls	r8, r2
 8006e26:	4698      	movhi	r8, r3
 8006e28:	2303      	movs	r3, #3
 8006e2a:	6123      	str	r3, [r4, #16]
 8006e2c:	f02b 0304 	bic.w	r3, fp, #4
 8006e30:	6023      	str	r3, [r4, #0]
 8006e32:	f04f 0900 	mov.w	r9, #0
 8006e36:	9700      	str	r7, [sp, #0]
 8006e38:	4633      	mov	r3, r6
 8006e3a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006e3c:	4621      	mov	r1, r4
 8006e3e:	4628      	mov	r0, r5
 8006e40:	f000 f9d2 	bl	80071e8 <_printf_common>
 8006e44:	3001      	adds	r0, #1
 8006e46:	f040 808d 	bne.w	8006f64 <_printf_float+0x1d0>
 8006e4a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e4e:	b00d      	add	sp, #52	@ 0x34
 8006e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e54:	4642      	mov	r2, r8
 8006e56:	464b      	mov	r3, r9
 8006e58:	4640      	mov	r0, r8
 8006e5a:	4649      	mov	r1, r9
 8006e5c:	f7f9 fe6e 	bl	8000b3c <__aeabi_dcmpun>
 8006e60:	b140      	cbz	r0, 8006e74 <_printf_float+0xe0>
 8006e62:	464b      	mov	r3, r9
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	bfbc      	itt	lt
 8006e68:	232d      	movlt	r3, #45	@ 0x2d
 8006e6a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006e6e:	4a7e      	ldr	r2, [pc, #504]	@ (8007068 <_printf_float+0x2d4>)
 8006e70:	4b7e      	ldr	r3, [pc, #504]	@ (800706c <_printf_float+0x2d8>)
 8006e72:	e7d4      	b.n	8006e1e <_printf_float+0x8a>
 8006e74:	6863      	ldr	r3, [r4, #4]
 8006e76:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006e7a:	9206      	str	r2, [sp, #24]
 8006e7c:	1c5a      	adds	r2, r3, #1
 8006e7e:	d13b      	bne.n	8006ef8 <_printf_float+0x164>
 8006e80:	2306      	movs	r3, #6
 8006e82:	6063      	str	r3, [r4, #4]
 8006e84:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006e88:	2300      	movs	r3, #0
 8006e8a:	6022      	str	r2, [r4, #0]
 8006e8c:	9303      	str	r3, [sp, #12]
 8006e8e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006e90:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006e94:	ab09      	add	r3, sp, #36	@ 0x24
 8006e96:	9300      	str	r3, [sp, #0]
 8006e98:	6861      	ldr	r1, [r4, #4]
 8006e9a:	ec49 8b10 	vmov	d0, r8, r9
 8006e9e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	f7ff fed6 	bl	8006c54 <__cvt>
 8006ea8:	9b06      	ldr	r3, [sp, #24]
 8006eaa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006eac:	2b47      	cmp	r3, #71	@ 0x47
 8006eae:	4680      	mov	r8, r0
 8006eb0:	d129      	bne.n	8006f06 <_printf_float+0x172>
 8006eb2:	1cc8      	adds	r0, r1, #3
 8006eb4:	db02      	blt.n	8006ebc <_printf_float+0x128>
 8006eb6:	6863      	ldr	r3, [r4, #4]
 8006eb8:	4299      	cmp	r1, r3
 8006eba:	dd41      	ble.n	8006f40 <_printf_float+0x1ac>
 8006ebc:	f1aa 0a02 	sub.w	sl, sl, #2
 8006ec0:	fa5f fa8a 	uxtb.w	sl, sl
 8006ec4:	3901      	subs	r1, #1
 8006ec6:	4652      	mov	r2, sl
 8006ec8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006ecc:	9109      	str	r1, [sp, #36]	@ 0x24
 8006ece:	f7ff ff26 	bl	8006d1e <__exponent>
 8006ed2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ed4:	1813      	adds	r3, r2, r0
 8006ed6:	2a01      	cmp	r2, #1
 8006ed8:	4681      	mov	r9, r0
 8006eda:	6123      	str	r3, [r4, #16]
 8006edc:	dc02      	bgt.n	8006ee4 <_printf_float+0x150>
 8006ede:	6822      	ldr	r2, [r4, #0]
 8006ee0:	07d2      	lsls	r2, r2, #31
 8006ee2:	d501      	bpl.n	8006ee8 <_printf_float+0x154>
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	6123      	str	r3, [r4, #16]
 8006ee8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d0a2      	beq.n	8006e36 <_printf_float+0xa2>
 8006ef0:	232d      	movs	r3, #45	@ 0x2d
 8006ef2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ef6:	e79e      	b.n	8006e36 <_printf_float+0xa2>
 8006ef8:	9a06      	ldr	r2, [sp, #24]
 8006efa:	2a47      	cmp	r2, #71	@ 0x47
 8006efc:	d1c2      	bne.n	8006e84 <_printf_float+0xf0>
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1c0      	bne.n	8006e84 <_printf_float+0xf0>
 8006f02:	2301      	movs	r3, #1
 8006f04:	e7bd      	b.n	8006e82 <_printf_float+0xee>
 8006f06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006f0a:	d9db      	bls.n	8006ec4 <_printf_float+0x130>
 8006f0c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006f10:	d118      	bne.n	8006f44 <_printf_float+0x1b0>
 8006f12:	2900      	cmp	r1, #0
 8006f14:	6863      	ldr	r3, [r4, #4]
 8006f16:	dd0b      	ble.n	8006f30 <_printf_float+0x19c>
 8006f18:	6121      	str	r1, [r4, #16]
 8006f1a:	b913      	cbnz	r3, 8006f22 <_printf_float+0x18e>
 8006f1c:	6822      	ldr	r2, [r4, #0]
 8006f1e:	07d0      	lsls	r0, r2, #31
 8006f20:	d502      	bpl.n	8006f28 <_printf_float+0x194>
 8006f22:	3301      	adds	r3, #1
 8006f24:	440b      	add	r3, r1
 8006f26:	6123      	str	r3, [r4, #16]
 8006f28:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006f2a:	f04f 0900 	mov.w	r9, #0
 8006f2e:	e7db      	b.n	8006ee8 <_printf_float+0x154>
 8006f30:	b913      	cbnz	r3, 8006f38 <_printf_float+0x1a4>
 8006f32:	6822      	ldr	r2, [r4, #0]
 8006f34:	07d2      	lsls	r2, r2, #31
 8006f36:	d501      	bpl.n	8006f3c <_printf_float+0x1a8>
 8006f38:	3302      	adds	r3, #2
 8006f3a:	e7f4      	b.n	8006f26 <_printf_float+0x192>
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	e7f2      	b.n	8006f26 <_printf_float+0x192>
 8006f40:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006f44:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f46:	4299      	cmp	r1, r3
 8006f48:	db05      	blt.n	8006f56 <_printf_float+0x1c2>
 8006f4a:	6823      	ldr	r3, [r4, #0]
 8006f4c:	6121      	str	r1, [r4, #16]
 8006f4e:	07d8      	lsls	r0, r3, #31
 8006f50:	d5ea      	bpl.n	8006f28 <_printf_float+0x194>
 8006f52:	1c4b      	adds	r3, r1, #1
 8006f54:	e7e7      	b.n	8006f26 <_printf_float+0x192>
 8006f56:	2900      	cmp	r1, #0
 8006f58:	bfd4      	ite	le
 8006f5a:	f1c1 0202 	rsble	r2, r1, #2
 8006f5e:	2201      	movgt	r2, #1
 8006f60:	4413      	add	r3, r2
 8006f62:	e7e0      	b.n	8006f26 <_printf_float+0x192>
 8006f64:	6823      	ldr	r3, [r4, #0]
 8006f66:	055a      	lsls	r2, r3, #21
 8006f68:	d407      	bmi.n	8006f7a <_printf_float+0x1e6>
 8006f6a:	6923      	ldr	r3, [r4, #16]
 8006f6c:	4642      	mov	r2, r8
 8006f6e:	4631      	mov	r1, r6
 8006f70:	4628      	mov	r0, r5
 8006f72:	47b8      	blx	r7
 8006f74:	3001      	adds	r0, #1
 8006f76:	d12b      	bne.n	8006fd0 <_printf_float+0x23c>
 8006f78:	e767      	b.n	8006e4a <_printf_float+0xb6>
 8006f7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006f7e:	f240 80dd 	bls.w	800713c <_printf_float+0x3a8>
 8006f82:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006f86:	2200      	movs	r2, #0
 8006f88:	2300      	movs	r3, #0
 8006f8a:	f7f9 fda5 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f8e:	2800      	cmp	r0, #0
 8006f90:	d033      	beq.n	8006ffa <_printf_float+0x266>
 8006f92:	4a37      	ldr	r2, [pc, #220]	@ (8007070 <_printf_float+0x2dc>)
 8006f94:	2301      	movs	r3, #1
 8006f96:	4631      	mov	r1, r6
 8006f98:	4628      	mov	r0, r5
 8006f9a:	47b8      	blx	r7
 8006f9c:	3001      	adds	r0, #1
 8006f9e:	f43f af54 	beq.w	8006e4a <_printf_float+0xb6>
 8006fa2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006fa6:	4543      	cmp	r3, r8
 8006fa8:	db02      	blt.n	8006fb0 <_printf_float+0x21c>
 8006faa:	6823      	ldr	r3, [r4, #0]
 8006fac:	07d8      	lsls	r0, r3, #31
 8006fae:	d50f      	bpl.n	8006fd0 <_printf_float+0x23c>
 8006fb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fb4:	4631      	mov	r1, r6
 8006fb6:	4628      	mov	r0, r5
 8006fb8:	47b8      	blx	r7
 8006fba:	3001      	adds	r0, #1
 8006fbc:	f43f af45 	beq.w	8006e4a <_printf_float+0xb6>
 8006fc0:	f04f 0900 	mov.w	r9, #0
 8006fc4:	f108 38ff 	add.w	r8, r8, #4294967295
 8006fc8:	f104 0a1a 	add.w	sl, r4, #26
 8006fcc:	45c8      	cmp	r8, r9
 8006fce:	dc09      	bgt.n	8006fe4 <_printf_float+0x250>
 8006fd0:	6823      	ldr	r3, [r4, #0]
 8006fd2:	079b      	lsls	r3, r3, #30
 8006fd4:	f100 8103 	bmi.w	80071de <_printf_float+0x44a>
 8006fd8:	68e0      	ldr	r0, [r4, #12]
 8006fda:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006fdc:	4298      	cmp	r0, r3
 8006fde:	bfb8      	it	lt
 8006fe0:	4618      	movlt	r0, r3
 8006fe2:	e734      	b.n	8006e4e <_printf_float+0xba>
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	4652      	mov	r2, sl
 8006fe8:	4631      	mov	r1, r6
 8006fea:	4628      	mov	r0, r5
 8006fec:	47b8      	blx	r7
 8006fee:	3001      	adds	r0, #1
 8006ff0:	f43f af2b 	beq.w	8006e4a <_printf_float+0xb6>
 8006ff4:	f109 0901 	add.w	r9, r9, #1
 8006ff8:	e7e8      	b.n	8006fcc <_printf_float+0x238>
 8006ffa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	dc39      	bgt.n	8007074 <_printf_float+0x2e0>
 8007000:	4a1b      	ldr	r2, [pc, #108]	@ (8007070 <_printf_float+0x2dc>)
 8007002:	2301      	movs	r3, #1
 8007004:	4631      	mov	r1, r6
 8007006:	4628      	mov	r0, r5
 8007008:	47b8      	blx	r7
 800700a:	3001      	adds	r0, #1
 800700c:	f43f af1d 	beq.w	8006e4a <_printf_float+0xb6>
 8007010:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007014:	ea59 0303 	orrs.w	r3, r9, r3
 8007018:	d102      	bne.n	8007020 <_printf_float+0x28c>
 800701a:	6823      	ldr	r3, [r4, #0]
 800701c:	07d9      	lsls	r1, r3, #31
 800701e:	d5d7      	bpl.n	8006fd0 <_printf_float+0x23c>
 8007020:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007024:	4631      	mov	r1, r6
 8007026:	4628      	mov	r0, r5
 8007028:	47b8      	blx	r7
 800702a:	3001      	adds	r0, #1
 800702c:	f43f af0d 	beq.w	8006e4a <_printf_float+0xb6>
 8007030:	f04f 0a00 	mov.w	sl, #0
 8007034:	f104 0b1a 	add.w	fp, r4, #26
 8007038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800703a:	425b      	negs	r3, r3
 800703c:	4553      	cmp	r3, sl
 800703e:	dc01      	bgt.n	8007044 <_printf_float+0x2b0>
 8007040:	464b      	mov	r3, r9
 8007042:	e793      	b.n	8006f6c <_printf_float+0x1d8>
 8007044:	2301      	movs	r3, #1
 8007046:	465a      	mov	r2, fp
 8007048:	4631      	mov	r1, r6
 800704a:	4628      	mov	r0, r5
 800704c:	47b8      	blx	r7
 800704e:	3001      	adds	r0, #1
 8007050:	f43f aefb 	beq.w	8006e4a <_printf_float+0xb6>
 8007054:	f10a 0a01 	add.w	sl, sl, #1
 8007058:	e7ee      	b.n	8007038 <_printf_float+0x2a4>
 800705a:	bf00      	nop
 800705c:	7fefffff 	.word	0x7fefffff
 8007060:	0800be8c 	.word	0x0800be8c
 8007064:	0800be90 	.word	0x0800be90
 8007068:	0800be94 	.word	0x0800be94
 800706c:	0800be98 	.word	0x0800be98
 8007070:	0800c228 	.word	0x0800c228
 8007074:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007076:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800707a:	4553      	cmp	r3, sl
 800707c:	bfa8      	it	ge
 800707e:	4653      	movge	r3, sl
 8007080:	2b00      	cmp	r3, #0
 8007082:	4699      	mov	r9, r3
 8007084:	dc36      	bgt.n	80070f4 <_printf_float+0x360>
 8007086:	f04f 0b00 	mov.w	fp, #0
 800708a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800708e:	f104 021a 	add.w	r2, r4, #26
 8007092:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007094:	9306      	str	r3, [sp, #24]
 8007096:	eba3 0309 	sub.w	r3, r3, r9
 800709a:	455b      	cmp	r3, fp
 800709c:	dc31      	bgt.n	8007102 <_printf_float+0x36e>
 800709e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070a0:	459a      	cmp	sl, r3
 80070a2:	dc3a      	bgt.n	800711a <_printf_float+0x386>
 80070a4:	6823      	ldr	r3, [r4, #0]
 80070a6:	07da      	lsls	r2, r3, #31
 80070a8:	d437      	bmi.n	800711a <_printf_float+0x386>
 80070aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070ac:	ebaa 0903 	sub.w	r9, sl, r3
 80070b0:	9b06      	ldr	r3, [sp, #24]
 80070b2:	ebaa 0303 	sub.w	r3, sl, r3
 80070b6:	4599      	cmp	r9, r3
 80070b8:	bfa8      	it	ge
 80070ba:	4699      	movge	r9, r3
 80070bc:	f1b9 0f00 	cmp.w	r9, #0
 80070c0:	dc33      	bgt.n	800712a <_printf_float+0x396>
 80070c2:	f04f 0800 	mov.w	r8, #0
 80070c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070ca:	f104 0b1a 	add.w	fp, r4, #26
 80070ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070d0:	ebaa 0303 	sub.w	r3, sl, r3
 80070d4:	eba3 0309 	sub.w	r3, r3, r9
 80070d8:	4543      	cmp	r3, r8
 80070da:	f77f af79 	ble.w	8006fd0 <_printf_float+0x23c>
 80070de:	2301      	movs	r3, #1
 80070e0:	465a      	mov	r2, fp
 80070e2:	4631      	mov	r1, r6
 80070e4:	4628      	mov	r0, r5
 80070e6:	47b8      	blx	r7
 80070e8:	3001      	adds	r0, #1
 80070ea:	f43f aeae 	beq.w	8006e4a <_printf_float+0xb6>
 80070ee:	f108 0801 	add.w	r8, r8, #1
 80070f2:	e7ec      	b.n	80070ce <_printf_float+0x33a>
 80070f4:	4642      	mov	r2, r8
 80070f6:	4631      	mov	r1, r6
 80070f8:	4628      	mov	r0, r5
 80070fa:	47b8      	blx	r7
 80070fc:	3001      	adds	r0, #1
 80070fe:	d1c2      	bne.n	8007086 <_printf_float+0x2f2>
 8007100:	e6a3      	b.n	8006e4a <_printf_float+0xb6>
 8007102:	2301      	movs	r3, #1
 8007104:	4631      	mov	r1, r6
 8007106:	4628      	mov	r0, r5
 8007108:	9206      	str	r2, [sp, #24]
 800710a:	47b8      	blx	r7
 800710c:	3001      	adds	r0, #1
 800710e:	f43f ae9c 	beq.w	8006e4a <_printf_float+0xb6>
 8007112:	9a06      	ldr	r2, [sp, #24]
 8007114:	f10b 0b01 	add.w	fp, fp, #1
 8007118:	e7bb      	b.n	8007092 <_printf_float+0x2fe>
 800711a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800711e:	4631      	mov	r1, r6
 8007120:	4628      	mov	r0, r5
 8007122:	47b8      	blx	r7
 8007124:	3001      	adds	r0, #1
 8007126:	d1c0      	bne.n	80070aa <_printf_float+0x316>
 8007128:	e68f      	b.n	8006e4a <_printf_float+0xb6>
 800712a:	9a06      	ldr	r2, [sp, #24]
 800712c:	464b      	mov	r3, r9
 800712e:	4442      	add	r2, r8
 8007130:	4631      	mov	r1, r6
 8007132:	4628      	mov	r0, r5
 8007134:	47b8      	blx	r7
 8007136:	3001      	adds	r0, #1
 8007138:	d1c3      	bne.n	80070c2 <_printf_float+0x32e>
 800713a:	e686      	b.n	8006e4a <_printf_float+0xb6>
 800713c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007140:	f1ba 0f01 	cmp.w	sl, #1
 8007144:	dc01      	bgt.n	800714a <_printf_float+0x3b6>
 8007146:	07db      	lsls	r3, r3, #31
 8007148:	d536      	bpl.n	80071b8 <_printf_float+0x424>
 800714a:	2301      	movs	r3, #1
 800714c:	4642      	mov	r2, r8
 800714e:	4631      	mov	r1, r6
 8007150:	4628      	mov	r0, r5
 8007152:	47b8      	blx	r7
 8007154:	3001      	adds	r0, #1
 8007156:	f43f ae78 	beq.w	8006e4a <_printf_float+0xb6>
 800715a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800715e:	4631      	mov	r1, r6
 8007160:	4628      	mov	r0, r5
 8007162:	47b8      	blx	r7
 8007164:	3001      	adds	r0, #1
 8007166:	f43f ae70 	beq.w	8006e4a <_printf_float+0xb6>
 800716a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800716e:	2200      	movs	r2, #0
 8007170:	2300      	movs	r3, #0
 8007172:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007176:	f7f9 fcaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800717a:	b9c0      	cbnz	r0, 80071ae <_printf_float+0x41a>
 800717c:	4653      	mov	r3, sl
 800717e:	f108 0201 	add.w	r2, r8, #1
 8007182:	4631      	mov	r1, r6
 8007184:	4628      	mov	r0, r5
 8007186:	47b8      	blx	r7
 8007188:	3001      	adds	r0, #1
 800718a:	d10c      	bne.n	80071a6 <_printf_float+0x412>
 800718c:	e65d      	b.n	8006e4a <_printf_float+0xb6>
 800718e:	2301      	movs	r3, #1
 8007190:	465a      	mov	r2, fp
 8007192:	4631      	mov	r1, r6
 8007194:	4628      	mov	r0, r5
 8007196:	47b8      	blx	r7
 8007198:	3001      	adds	r0, #1
 800719a:	f43f ae56 	beq.w	8006e4a <_printf_float+0xb6>
 800719e:	f108 0801 	add.w	r8, r8, #1
 80071a2:	45d0      	cmp	r8, sl
 80071a4:	dbf3      	blt.n	800718e <_printf_float+0x3fa>
 80071a6:	464b      	mov	r3, r9
 80071a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80071ac:	e6df      	b.n	8006f6e <_printf_float+0x1da>
 80071ae:	f04f 0800 	mov.w	r8, #0
 80071b2:	f104 0b1a 	add.w	fp, r4, #26
 80071b6:	e7f4      	b.n	80071a2 <_printf_float+0x40e>
 80071b8:	2301      	movs	r3, #1
 80071ba:	4642      	mov	r2, r8
 80071bc:	e7e1      	b.n	8007182 <_printf_float+0x3ee>
 80071be:	2301      	movs	r3, #1
 80071c0:	464a      	mov	r2, r9
 80071c2:	4631      	mov	r1, r6
 80071c4:	4628      	mov	r0, r5
 80071c6:	47b8      	blx	r7
 80071c8:	3001      	adds	r0, #1
 80071ca:	f43f ae3e 	beq.w	8006e4a <_printf_float+0xb6>
 80071ce:	f108 0801 	add.w	r8, r8, #1
 80071d2:	68e3      	ldr	r3, [r4, #12]
 80071d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80071d6:	1a5b      	subs	r3, r3, r1
 80071d8:	4543      	cmp	r3, r8
 80071da:	dcf0      	bgt.n	80071be <_printf_float+0x42a>
 80071dc:	e6fc      	b.n	8006fd8 <_printf_float+0x244>
 80071de:	f04f 0800 	mov.w	r8, #0
 80071e2:	f104 0919 	add.w	r9, r4, #25
 80071e6:	e7f4      	b.n	80071d2 <_printf_float+0x43e>

080071e8 <_printf_common>:
 80071e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071ec:	4616      	mov	r6, r2
 80071ee:	4698      	mov	r8, r3
 80071f0:	688a      	ldr	r2, [r1, #8]
 80071f2:	690b      	ldr	r3, [r1, #16]
 80071f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80071f8:	4293      	cmp	r3, r2
 80071fa:	bfb8      	it	lt
 80071fc:	4613      	movlt	r3, r2
 80071fe:	6033      	str	r3, [r6, #0]
 8007200:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007204:	4607      	mov	r7, r0
 8007206:	460c      	mov	r4, r1
 8007208:	b10a      	cbz	r2, 800720e <_printf_common+0x26>
 800720a:	3301      	adds	r3, #1
 800720c:	6033      	str	r3, [r6, #0]
 800720e:	6823      	ldr	r3, [r4, #0]
 8007210:	0699      	lsls	r1, r3, #26
 8007212:	bf42      	ittt	mi
 8007214:	6833      	ldrmi	r3, [r6, #0]
 8007216:	3302      	addmi	r3, #2
 8007218:	6033      	strmi	r3, [r6, #0]
 800721a:	6825      	ldr	r5, [r4, #0]
 800721c:	f015 0506 	ands.w	r5, r5, #6
 8007220:	d106      	bne.n	8007230 <_printf_common+0x48>
 8007222:	f104 0a19 	add.w	sl, r4, #25
 8007226:	68e3      	ldr	r3, [r4, #12]
 8007228:	6832      	ldr	r2, [r6, #0]
 800722a:	1a9b      	subs	r3, r3, r2
 800722c:	42ab      	cmp	r3, r5
 800722e:	dc26      	bgt.n	800727e <_printf_common+0x96>
 8007230:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007234:	6822      	ldr	r2, [r4, #0]
 8007236:	3b00      	subs	r3, #0
 8007238:	bf18      	it	ne
 800723a:	2301      	movne	r3, #1
 800723c:	0692      	lsls	r2, r2, #26
 800723e:	d42b      	bmi.n	8007298 <_printf_common+0xb0>
 8007240:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007244:	4641      	mov	r1, r8
 8007246:	4638      	mov	r0, r7
 8007248:	47c8      	blx	r9
 800724a:	3001      	adds	r0, #1
 800724c:	d01e      	beq.n	800728c <_printf_common+0xa4>
 800724e:	6823      	ldr	r3, [r4, #0]
 8007250:	6922      	ldr	r2, [r4, #16]
 8007252:	f003 0306 	and.w	r3, r3, #6
 8007256:	2b04      	cmp	r3, #4
 8007258:	bf02      	ittt	eq
 800725a:	68e5      	ldreq	r5, [r4, #12]
 800725c:	6833      	ldreq	r3, [r6, #0]
 800725e:	1aed      	subeq	r5, r5, r3
 8007260:	68a3      	ldr	r3, [r4, #8]
 8007262:	bf0c      	ite	eq
 8007264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007268:	2500      	movne	r5, #0
 800726a:	4293      	cmp	r3, r2
 800726c:	bfc4      	itt	gt
 800726e:	1a9b      	subgt	r3, r3, r2
 8007270:	18ed      	addgt	r5, r5, r3
 8007272:	2600      	movs	r6, #0
 8007274:	341a      	adds	r4, #26
 8007276:	42b5      	cmp	r5, r6
 8007278:	d11a      	bne.n	80072b0 <_printf_common+0xc8>
 800727a:	2000      	movs	r0, #0
 800727c:	e008      	b.n	8007290 <_printf_common+0xa8>
 800727e:	2301      	movs	r3, #1
 8007280:	4652      	mov	r2, sl
 8007282:	4641      	mov	r1, r8
 8007284:	4638      	mov	r0, r7
 8007286:	47c8      	blx	r9
 8007288:	3001      	adds	r0, #1
 800728a:	d103      	bne.n	8007294 <_printf_common+0xac>
 800728c:	f04f 30ff 	mov.w	r0, #4294967295
 8007290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007294:	3501      	adds	r5, #1
 8007296:	e7c6      	b.n	8007226 <_printf_common+0x3e>
 8007298:	18e1      	adds	r1, r4, r3
 800729a:	1c5a      	adds	r2, r3, #1
 800729c:	2030      	movs	r0, #48	@ 0x30
 800729e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80072a2:	4422      	add	r2, r4
 80072a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80072a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80072ac:	3302      	adds	r3, #2
 80072ae:	e7c7      	b.n	8007240 <_printf_common+0x58>
 80072b0:	2301      	movs	r3, #1
 80072b2:	4622      	mov	r2, r4
 80072b4:	4641      	mov	r1, r8
 80072b6:	4638      	mov	r0, r7
 80072b8:	47c8      	blx	r9
 80072ba:	3001      	adds	r0, #1
 80072bc:	d0e6      	beq.n	800728c <_printf_common+0xa4>
 80072be:	3601      	adds	r6, #1
 80072c0:	e7d9      	b.n	8007276 <_printf_common+0x8e>
	...

080072c4 <_printf_i>:
 80072c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80072c8:	7e0f      	ldrb	r7, [r1, #24]
 80072ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80072cc:	2f78      	cmp	r7, #120	@ 0x78
 80072ce:	4691      	mov	r9, r2
 80072d0:	4680      	mov	r8, r0
 80072d2:	460c      	mov	r4, r1
 80072d4:	469a      	mov	sl, r3
 80072d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80072da:	d807      	bhi.n	80072ec <_printf_i+0x28>
 80072dc:	2f62      	cmp	r7, #98	@ 0x62
 80072de:	d80a      	bhi.n	80072f6 <_printf_i+0x32>
 80072e0:	2f00      	cmp	r7, #0
 80072e2:	f000 80d2 	beq.w	800748a <_printf_i+0x1c6>
 80072e6:	2f58      	cmp	r7, #88	@ 0x58
 80072e8:	f000 80b9 	beq.w	800745e <_printf_i+0x19a>
 80072ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80072f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80072f4:	e03a      	b.n	800736c <_printf_i+0xa8>
 80072f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80072fa:	2b15      	cmp	r3, #21
 80072fc:	d8f6      	bhi.n	80072ec <_printf_i+0x28>
 80072fe:	a101      	add	r1, pc, #4	@ (adr r1, 8007304 <_printf_i+0x40>)
 8007300:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007304:	0800735d 	.word	0x0800735d
 8007308:	08007371 	.word	0x08007371
 800730c:	080072ed 	.word	0x080072ed
 8007310:	080072ed 	.word	0x080072ed
 8007314:	080072ed 	.word	0x080072ed
 8007318:	080072ed 	.word	0x080072ed
 800731c:	08007371 	.word	0x08007371
 8007320:	080072ed 	.word	0x080072ed
 8007324:	080072ed 	.word	0x080072ed
 8007328:	080072ed 	.word	0x080072ed
 800732c:	080072ed 	.word	0x080072ed
 8007330:	08007471 	.word	0x08007471
 8007334:	0800739b 	.word	0x0800739b
 8007338:	0800742b 	.word	0x0800742b
 800733c:	080072ed 	.word	0x080072ed
 8007340:	080072ed 	.word	0x080072ed
 8007344:	08007493 	.word	0x08007493
 8007348:	080072ed 	.word	0x080072ed
 800734c:	0800739b 	.word	0x0800739b
 8007350:	080072ed 	.word	0x080072ed
 8007354:	080072ed 	.word	0x080072ed
 8007358:	08007433 	.word	0x08007433
 800735c:	6833      	ldr	r3, [r6, #0]
 800735e:	1d1a      	adds	r2, r3, #4
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6032      	str	r2, [r6, #0]
 8007364:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007368:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800736c:	2301      	movs	r3, #1
 800736e:	e09d      	b.n	80074ac <_printf_i+0x1e8>
 8007370:	6833      	ldr	r3, [r6, #0]
 8007372:	6820      	ldr	r0, [r4, #0]
 8007374:	1d19      	adds	r1, r3, #4
 8007376:	6031      	str	r1, [r6, #0]
 8007378:	0606      	lsls	r6, r0, #24
 800737a:	d501      	bpl.n	8007380 <_printf_i+0xbc>
 800737c:	681d      	ldr	r5, [r3, #0]
 800737e:	e003      	b.n	8007388 <_printf_i+0xc4>
 8007380:	0645      	lsls	r5, r0, #25
 8007382:	d5fb      	bpl.n	800737c <_printf_i+0xb8>
 8007384:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007388:	2d00      	cmp	r5, #0
 800738a:	da03      	bge.n	8007394 <_printf_i+0xd0>
 800738c:	232d      	movs	r3, #45	@ 0x2d
 800738e:	426d      	negs	r5, r5
 8007390:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007394:	4859      	ldr	r0, [pc, #356]	@ (80074fc <_printf_i+0x238>)
 8007396:	230a      	movs	r3, #10
 8007398:	e011      	b.n	80073be <_printf_i+0xfa>
 800739a:	6821      	ldr	r1, [r4, #0]
 800739c:	6833      	ldr	r3, [r6, #0]
 800739e:	0608      	lsls	r0, r1, #24
 80073a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80073a4:	d402      	bmi.n	80073ac <_printf_i+0xe8>
 80073a6:	0649      	lsls	r1, r1, #25
 80073a8:	bf48      	it	mi
 80073aa:	b2ad      	uxthmi	r5, r5
 80073ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80073ae:	4853      	ldr	r0, [pc, #332]	@ (80074fc <_printf_i+0x238>)
 80073b0:	6033      	str	r3, [r6, #0]
 80073b2:	bf14      	ite	ne
 80073b4:	230a      	movne	r3, #10
 80073b6:	2308      	moveq	r3, #8
 80073b8:	2100      	movs	r1, #0
 80073ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80073be:	6866      	ldr	r6, [r4, #4]
 80073c0:	60a6      	str	r6, [r4, #8]
 80073c2:	2e00      	cmp	r6, #0
 80073c4:	bfa2      	ittt	ge
 80073c6:	6821      	ldrge	r1, [r4, #0]
 80073c8:	f021 0104 	bicge.w	r1, r1, #4
 80073cc:	6021      	strge	r1, [r4, #0]
 80073ce:	b90d      	cbnz	r5, 80073d4 <_printf_i+0x110>
 80073d0:	2e00      	cmp	r6, #0
 80073d2:	d04b      	beq.n	800746c <_printf_i+0x1a8>
 80073d4:	4616      	mov	r6, r2
 80073d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80073da:	fb03 5711 	mls	r7, r3, r1, r5
 80073de:	5dc7      	ldrb	r7, [r0, r7]
 80073e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80073e4:	462f      	mov	r7, r5
 80073e6:	42bb      	cmp	r3, r7
 80073e8:	460d      	mov	r5, r1
 80073ea:	d9f4      	bls.n	80073d6 <_printf_i+0x112>
 80073ec:	2b08      	cmp	r3, #8
 80073ee:	d10b      	bne.n	8007408 <_printf_i+0x144>
 80073f0:	6823      	ldr	r3, [r4, #0]
 80073f2:	07df      	lsls	r7, r3, #31
 80073f4:	d508      	bpl.n	8007408 <_printf_i+0x144>
 80073f6:	6923      	ldr	r3, [r4, #16]
 80073f8:	6861      	ldr	r1, [r4, #4]
 80073fa:	4299      	cmp	r1, r3
 80073fc:	bfde      	ittt	le
 80073fe:	2330      	movle	r3, #48	@ 0x30
 8007400:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007404:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007408:	1b92      	subs	r2, r2, r6
 800740a:	6122      	str	r2, [r4, #16]
 800740c:	f8cd a000 	str.w	sl, [sp]
 8007410:	464b      	mov	r3, r9
 8007412:	aa03      	add	r2, sp, #12
 8007414:	4621      	mov	r1, r4
 8007416:	4640      	mov	r0, r8
 8007418:	f7ff fee6 	bl	80071e8 <_printf_common>
 800741c:	3001      	adds	r0, #1
 800741e:	d14a      	bne.n	80074b6 <_printf_i+0x1f2>
 8007420:	f04f 30ff 	mov.w	r0, #4294967295
 8007424:	b004      	add	sp, #16
 8007426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	f043 0320 	orr.w	r3, r3, #32
 8007430:	6023      	str	r3, [r4, #0]
 8007432:	4833      	ldr	r0, [pc, #204]	@ (8007500 <_printf_i+0x23c>)
 8007434:	2778      	movs	r7, #120	@ 0x78
 8007436:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800743a:	6823      	ldr	r3, [r4, #0]
 800743c:	6831      	ldr	r1, [r6, #0]
 800743e:	061f      	lsls	r7, r3, #24
 8007440:	f851 5b04 	ldr.w	r5, [r1], #4
 8007444:	d402      	bmi.n	800744c <_printf_i+0x188>
 8007446:	065f      	lsls	r7, r3, #25
 8007448:	bf48      	it	mi
 800744a:	b2ad      	uxthmi	r5, r5
 800744c:	6031      	str	r1, [r6, #0]
 800744e:	07d9      	lsls	r1, r3, #31
 8007450:	bf44      	itt	mi
 8007452:	f043 0320 	orrmi.w	r3, r3, #32
 8007456:	6023      	strmi	r3, [r4, #0]
 8007458:	b11d      	cbz	r5, 8007462 <_printf_i+0x19e>
 800745a:	2310      	movs	r3, #16
 800745c:	e7ac      	b.n	80073b8 <_printf_i+0xf4>
 800745e:	4827      	ldr	r0, [pc, #156]	@ (80074fc <_printf_i+0x238>)
 8007460:	e7e9      	b.n	8007436 <_printf_i+0x172>
 8007462:	6823      	ldr	r3, [r4, #0]
 8007464:	f023 0320 	bic.w	r3, r3, #32
 8007468:	6023      	str	r3, [r4, #0]
 800746a:	e7f6      	b.n	800745a <_printf_i+0x196>
 800746c:	4616      	mov	r6, r2
 800746e:	e7bd      	b.n	80073ec <_printf_i+0x128>
 8007470:	6833      	ldr	r3, [r6, #0]
 8007472:	6825      	ldr	r5, [r4, #0]
 8007474:	6961      	ldr	r1, [r4, #20]
 8007476:	1d18      	adds	r0, r3, #4
 8007478:	6030      	str	r0, [r6, #0]
 800747a:	062e      	lsls	r6, r5, #24
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	d501      	bpl.n	8007484 <_printf_i+0x1c0>
 8007480:	6019      	str	r1, [r3, #0]
 8007482:	e002      	b.n	800748a <_printf_i+0x1c6>
 8007484:	0668      	lsls	r0, r5, #25
 8007486:	d5fb      	bpl.n	8007480 <_printf_i+0x1bc>
 8007488:	8019      	strh	r1, [r3, #0]
 800748a:	2300      	movs	r3, #0
 800748c:	6123      	str	r3, [r4, #16]
 800748e:	4616      	mov	r6, r2
 8007490:	e7bc      	b.n	800740c <_printf_i+0x148>
 8007492:	6833      	ldr	r3, [r6, #0]
 8007494:	1d1a      	adds	r2, r3, #4
 8007496:	6032      	str	r2, [r6, #0]
 8007498:	681e      	ldr	r6, [r3, #0]
 800749a:	6862      	ldr	r2, [r4, #4]
 800749c:	2100      	movs	r1, #0
 800749e:	4630      	mov	r0, r6
 80074a0:	f7f8 fe9e 	bl	80001e0 <memchr>
 80074a4:	b108      	cbz	r0, 80074aa <_printf_i+0x1e6>
 80074a6:	1b80      	subs	r0, r0, r6
 80074a8:	6060      	str	r0, [r4, #4]
 80074aa:	6863      	ldr	r3, [r4, #4]
 80074ac:	6123      	str	r3, [r4, #16]
 80074ae:	2300      	movs	r3, #0
 80074b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80074b4:	e7aa      	b.n	800740c <_printf_i+0x148>
 80074b6:	6923      	ldr	r3, [r4, #16]
 80074b8:	4632      	mov	r2, r6
 80074ba:	4649      	mov	r1, r9
 80074bc:	4640      	mov	r0, r8
 80074be:	47d0      	blx	sl
 80074c0:	3001      	adds	r0, #1
 80074c2:	d0ad      	beq.n	8007420 <_printf_i+0x15c>
 80074c4:	6823      	ldr	r3, [r4, #0]
 80074c6:	079b      	lsls	r3, r3, #30
 80074c8:	d413      	bmi.n	80074f2 <_printf_i+0x22e>
 80074ca:	68e0      	ldr	r0, [r4, #12]
 80074cc:	9b03      	ldr	r3, [sp, #12]
 80074ce:	4298      	cmp	r0, r3
 80074d0:	bfb8      	it	lt
 80074d2:	4618      	movlt	r0, r3
 80074d4:	e7a6      	b.n	8007424 <_printf_i+0x160>
 80074d6:	2301      	movs	r3, #1
 80074d8:	4632      	mov	r2, r6
 80074da:	4649      	mov	r1, r9
 80074dc:	4640      	mov	r0, r8
 80074de:	47d0      	blx	sl
 80074e0:	3001      	adds	r0, #1
 80074e2:	d09d      	beq.n	8007420 <_printf_i+0x15c>
 80074e4:	3501      	adds	r5, #1
 80074e6:	68e3      	ldr	r3, [r4, #12]
 80074e8:	9903      	ldr	r1, [sp, #12]
 80074ea:	1a5b      	subs	r3, r3, r1
 80074ec:	42ab      	cmp	r3, r5
 80074ee:	dcf2      	bgt.n	80074d6 <_printf_i+0x212>
 80074f0:	e7eb      	b.n	80074ca <_printf_i+0x206>
 80074f2:	2500      	movs	r5, #0
 80074f4:	f104 0619 	add.w	r6, r4, #25
 80074f8:	e7f5      	b.n	80074e6 <_printf_i+0x222>
 80074fa:	bf00      	nop
 80074fc:	0800be9c 	.word	0x0800be9c
 8007500:	0800bead 	.word	0x0800bead

08007504 <_scanf_float>:
 8007504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007508:	b087      	sub	sp, #28
 800750a:	4617      	mov	r7, r2
 800750c:	9303      	str	r3, [sp, #12]
 800750e:	688b      	ldr	r3, [r1, #8]
 8007510:	1e5a      	subs	r2, r3, #1
 8007512:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007516:	bf81      	itttt	hi
 8007518:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800751c:	eb03 0b05 	addhi.w	fp, r3, r5
 8007520:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007524:	608b      	strhi	r3, [r1, #8]
 8007526:	680b      	ldr	r3, [r1, #0]
 8007528:	460a      	mov	r2, r1
 800752a:	f04f 0500 	mov.w	r5, #0
 800752e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007532:	f842 3b1c 	str.w	r3, [r2], #28
 8007536:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800753a:	4680      	mov	r8, r0
 800753c:	460c      	mov	r4, r1
 800753e:	bf98      	it	ls
 8007540:	f04f 0b00 	movls.w	fp, #0
 8007544:	9201      	str	r2, [sp, #4]
 8007546:	4616      	mov	r6, r2
 8007548:	46aa      	mov	sl, r5
 800754a:	46a9      	mov	r9, r5
 800754c:	9502      	str	r5, [sp, #8]
 800754e:	68a2      	ldr	r2, [r4, #8]
 8007550:	b152      	cbz	r2, 8007568 <_scanf_float+0x64>
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	2b4e      	cmp	r3, #78	@ 0x4e
 8007558:	d864      	bhi.n	8007624 <_scanf_float+0x120>
 800755a:	2b40      	cmp	r3, #64	@ 0x40
 800755c:	d83c      	bhi.n	80075d8 <_scanf_float+0xd4>
 800755e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007562:	b2c8      	uxtb	r0, r1
 8007564:	280e      	cmp	r0, #14
 8007566:	d93a      	bls.n	80075de <_scanf_float+0xda>
 8007568:	f1b9 0f00 	cmp.w	r9, #0
 800756c:	d003      	beq.n	8007576 <_scanf_float+0x72>
 800756e:	6823      	ldr	r3, [r4, #0]
 8007570:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007574:	6023      	str	r3, [r4, #0]
 8007576:	f10a 3aff 	add.w	sl, sl, #4294967295
 800757a:	f1ba 0f01 	cmp.w	sl, #1
 800757e:	f200 8117 	bhi.w	80077b0 <_scanf_float+0x2ac>
 8007582:	9b01      	ldr	r3, [sp, #4]
 8007584:	429e      	cmp	r6, r3
 8007586:	f200 8108 	bhi.w	800779a <_scanf_float+0x296>
 800758a:	2001      	movs	r0, #1
 800758c:	b007      	add	sp, #28
 800758e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007592:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007596:	2a0d      	cmp	r2, #13
 8007598:	d8e6      	bhi.n	8007568 <_scanf_float+0x64>
 800759a:	a101      	add	r1, pc, #4	@ (adr r1, 80075a0 <_scanf_float+0x9c>)
 800759c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80075a0:	080076e7 	.word	0x080076e7
 80075a4:	08007569 	.word	0x08007569
 80075a8:	08007569 	.word	0x08007569
 80075ac:	08007569 	.word	0x08007569
 80075b0:	08007747 	.word	0x08007747
 80075b4:	0800771f 	.word	0x0800771f
 80075b8:	08007569 	.word	0x08007569
 80075bc:	08007569 	.word	0x08007569
 80075c0:	080076f5 	.word	0x080076f5
 80075c4:	08007569 	.word	0x08007569
 80075c8:	08007569 	.word	0x08007569
 80075cc:	08007569 	.word	0x08007569
 80075d0:	08007569 	.word	0x08007569
 80075d4:	080076ad 	.word	0x080076ad
 80075d8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80075dc:	e7db      	b.n	8007596 <_scanf_float+0x92>
 80075de:	290e      	cmp	r1, #14
 80075e0:	d8c2      	bhi.n	8007568 <_scanf_float+0x64>
 80075e2:	a001      	add	r0, pc, #4	@ (adr r0, 80075e8 <_scanf_float+0xe4>)
 80075e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80075e8:	0800769d 	.word	0x0800769d
 80075ec:	08007569 	.word	0x08007569
 80075f0:	0800769d 	.word	0x0800769d
 80075f4:	08007733 	.word	0x08007733
 80075f8:	08007569 	.word	0x08007569
 80075fc:	08007645 	.word	0x08007645
 8007600:	08007683 	.word	0x08007683
 8007604:	08007683 	.word	0x08007683
 8007608:	08007683 	.word	0x08007683
 800760c:	08007683 	.word	0x08007683
 8007610:	08007683 	.word	0x08007683
 8007614:	08007683 	.word	0x08007683
 8007618:	08007683 	.word	0x08007683
 800761c:	08007683 	.word	0x08007683
 8007620:	08007683 	.word	0x08007683
 8007624:	2b6e      	cmp	r3, #110	@ 0x6e
 8007626:	d809      	bhi.n	800763c <_scanf_float+0x138>
 8007628:	2b60      	cmp	r3, #96	@ 0x60
 800762a:	d8b2      	bhi.n	8007592 <_scanf_float+0x8e>
 800762c:	2b54      	cmp	r3, #84	@ 0x54
 800762e:	d07b      	beq.n	8007728 <_scanf_float+0x224>
 8007630:	2b59      	cmp	r3, #89	@ 0x59
 8007632:	d199      	bne.n	8007568 <_scanf_float+0x64>
 8007634:	2d07      	cmp	r5, #7
 8007636:	d197      	bne.n	8007568 <_scanf_float+0x64>
 8007638:	2508      	movs	r5, #8
 800763a:	e02c      	b.n	8007696 <_scanf_float+0x192>
 800763c:	2b74      	cmp	r3, #116	@ 0x74
 800763e:	d073      	beq.n	8007728 <_scanf_float+0x224>
 8007640:	2b79      	cmp	r3, #121	@ 0x79
 8007642:	e7f6      	b.n	8007632 <_scanf_float+0x12e>
 8007644:	6821      	ldr	r1, [r4, #0]
 8007646:	05c8      	lsls	r0, r1, #23
 8007648:	d51b      	bpl.n	8007682 <_scanf_float+0x17e>
 800764a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800764e:	6021      	str	r1, [r4, #0]
 8007650:	f109 0901 	add.w	r9, r9, #1
 8007654:	f1bb 0f00 	cmp.w	fp, #0
 8007658:	d003      	beq.n	8007662 <_scanf_float+0x15e>
 800765a:	3201      	adds	r2, #1
 800765c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007660:	60a2      	str	r2, [r4, #8]
 8007662:	68a3      	ldr	r3, [r4, #8]
 8007664:	3b01      	subs	r3, #1
 8007666:	60a3      	str	r3, [r4, #8]
 8007668:	6923      	ldr	r3, [r4, #16]
 800766a:	3301      	adds	r3, #1
 800766c:	6123      	str	r3, [r4, #16]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	3b01      	subs	r3, #1
 8007672:	2b00      	cmp	r3, #0
 8007674:	607b      	str	r3, [r7, #4]
 8007676:	f340 8087 	ble.w	8007788 <_scanf_float+0x284>
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	3301      	adds	r3, #1
 800767e:	603b      	str	r3, [r7, #0]
 8007680:	e765      	b.n	800754e <_scanf_float+0x4a>
 8007682:	eb1a 0105 	adds.w	r1, sl, r5
 8007686:	f47f af6f 	bne.w	8007568 <_scanf_float+0x64>
 800768a:	6822      	ldr	r2, [r4, #0]
 800768c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007690:	6022      	str	r2, [r4, #0]
 8007692:	460d      	mov	r5, r1
 8007694:	468a      	mov	sl, r1
 8007696:	f806 3b01 	strb.w	r3, [r6], #1
 800769a:	e7e2      	b.n	8007662 <_scanf_float+0x15e>
 800769c:	6822      	ldr	r2, [r4, #0]
 800769e:	0610      	lsls	r0, r2, #24
 80076a0:	f57f af62 	bpl.w	8007568 <_scanf_float+0x64>
 80076a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80076a8:	6022      	str	r2, [r4, #0]
 80076aa:	e7f4      	b.n	8007696 <_scanf_float+0x192>
 80076ac:	f1ba 0f00 	cmp.w	sl, #0
 80076b0:	d10e      	bne.n	80076d0 <_scanf_float+0x1cc>
 80076b2:	f1b9 0f00 	cmp.w	r9, #0
 80076b6:	d10e      	bne.n	80076d6 <_scanf_float+0x1d2>
 80076b8:	6822      	ldr	r2, [r4, #0]
 80076ba:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80076be:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80076c2:	d108      	bne.n	80076d6 <_scanf_float+0x1d2>
 80076c4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80076c8:	6022      	str	r2, [r4, #0]
 80076ca:	f04f 0a01 	mov.w	sl, #1
 80076ce:	e7e2      	b.n	8007696 <_scanf_float+0x192>
 80076d0:	f1ba 0f02 	cmp.w	sl, #2
 80076d4:	d055      	beq.n	8007782 <_scanf_float+0x27e>
 80076d6:	2d01      	cmp	r5, #1
 80076d8:	d002      	beq.n	80076e0 <_scanf_float+0x1dc>
 80076da:	2d04      	cmp	r5, #4
 80076dc:	f47f af44 	bne.w	8007568 <_scanf_float+0x64>
 80076e0:	3501      	adds	r5, #1
 80076e2:	b2ed      	uxtb	r5, r5
 80076e4:	e7d7      	b.n	8007696 <_scanf_float+0x192>
 80076e6:	f1ba 0f01 	cmp.w	sl, #1
 80076ea:	f47f af3d 	bne.w	8007568 <_scanf_float+0x64>
 80076ee:	f04f 0a02 	mov.w	sl, #2
 80076f2:	e7d0      	b.n	8007696 <_scanf_float+0x192>
 80076f4:	b97d      	cbnz	r5, 8007716 <_scanf_float+0x212>
 80076f6:	f1b9 0f00 	cmp.w	r9, #0
 80076fa:	f47f af38 	bne.w	800756e <_scanf_float+0x6a>
 80076fe:	6822      	ldr	r2, [r4, #0]
 8007700:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007704:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007708:	f040 8108 	bne.w	800791c <_scanf_float+0x418>
 800770c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007710:	6022      	str	r2, [r4, #0]
 8007712:	2501      	movs	r5, #1
 8007714:	e7bf      	b.n	8007696 <_scanf_float+0x192>
 8007716:	2d03      	cmp	r5, #3
 8007718:	d0e2      	beq.n	80076e0 <_scanf_float+0x1dc>
 800771a:	2d05      	cmp	r5, #5
 800771c:	e7de      	b.n	80076dc <_scanf_float+0x1d8>
 800771e:	2d02      	cmp	r5, #2
 8007720:	f47f af22 	bne.w	8007568 <_scanf_float+0x64>
 8007724:	2503      	movs	r5, #3
 8007726:	e7b6      	b.n	8007696 <_scanf_float+0x192>
 8007728:	2d06      	cmp	r5, #6
 800772a:	f47f af1d 	bne.w	8007568 <_scanf_float+0x64>
 800772e:	2507      	movs	r5, #7
 8007730:	e7b1      	b.n	8007696 <_scanf_float+0x192>
 8007732:	6822      	ldr	r2, [r4, #0]
 8007734:	0591      	lsls	r1, r2, #22
 8007736:	f57f af17 	bpl.w	8007568 <_scanf_float+0x64>
 800773a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800773e:	6022      	str	r2, [r4, #0]
 8007740:	f8cd 9008 	str.w	r9, [sp, #8]
 8007744:	e7a7      	b.n	8007696 <_scanf_float+0x192>
 8007746:	6822      	ldr	r2, [r4, #0]
 8007748:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800774c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007750:	d006      	beq.n	8007760 <_scanf_float+0x25c>
 8007752:	0550      	lsls	r0, r2, #21
 8007754:	f57f af08 	bpl.w	8007568 <_scanf_float+0x64>
 8007758:	f1b9 0f00 	cmp.w	r9, #0
 800775c:	f000 80de 	beq.w	800791c <_scanf_float+0x418>
 8007760:	0591      	lsls	r1, r2, #22
 8007762:	bf58      	it	pl
 8007764:	9902      	ldrpl	r1, [sp, #8]
 8007766:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800776a:	bf58      	it	pl
 800776c:	eba9 0101 	subpl.w	r1, r9, r1
 8007770:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007774:	bf58      	it	pl
 8007776:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800777a:	6022      	str	r2, [r4, #0]
 800777c:	f04f 0900 	mov.w	r9, #0
 8007780:	e789      	b.n	8007696 <_scanf_float+0x192>
 8007782:	f04f 0a03 	mov.w	sl, #3
 8007786:	e786      	b.n	8007696 <_scanf_float+0x192>
 8007788:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800778c:	4639      	mov	r1, r7
 800778e:	4640      	mov	r0, r8
 8007790:	4798      	blx	r3
 8007792:	2800      	cmp	r0, #0
 8007794:	f43f aedb 	beq.w	800754e <_scanf_float+0x4a>
 8007798:	e6e6      	b.n	8007568 <_scanf_float+0x64>
 800779a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800779e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80077a2:	463a      	mov	r2, r7
 80077a4:	4640      	mov	r0, r8
 80077a6:	4798      	blx	r3
 80077a8:	6923      	ldr	r3, [r4, #16]
 80077aa:	3b01      	subs	r3, #1
 80077ac:	6123      	str	r3, [r4, #16]
 80077ae:	e6e8      	b.n	8007582 <_scanf_float+0x7e>
 80077b0:	1e6b      	subs	r3, r5, #1
 80077b2:	2b06      	cmp	r3, #6
 80077b4:	d824      	bhi.n	8007800 <_scanf_float+0x2fc>
 80077b6:	2d02      	cmp	r5, #2
 80077b8:	d836      	bhi.n	8007828 <_scanf_float+0x324>
 80077ba:	9b01      	ldr	r3, [sp, #4]
 80077bc:	429e      	cmp	r6, r3
 80077be:	f67f aee4 	bls.w	800758a <_scanf_float+0x86>
 80077c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80077c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80077ca:	463a      	mov	r2, r7
 80077cc:	4640      	mov	r0, r8
 80077ce:	4798      	blx	r3
 80077d0:	6923      	ldr	r3, [r4, #16]
 80077d2:	3b01      	subs	r3, #1
 80077d4:	6123      	str	r3, [r4, #16]
 80077d6:	e7f0      	b.n	80077ba <_scanf_float+0x2b6>
 80077d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80077dc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80077e0:	463a      	mov	r2, r7
 80077e2:	4640      	mov	r0, r8
 80077e4:	4798      	blx	r3
 80077e6:	6923      	ldr	r3, [r4, #16]
 80077e8:	3b01      	subs	r3, #1
 80077ea:	6123      	str	r3, [r4, #16]
 80077ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077f0:	fa5f fa8a 	uxtb.w	sl, sl
 80077f4:	f1ba 0f02 	cmp.w	sl, #2
 80077f8:	d1ee      	bne.n	80077d8 <_scanf_float+0x2d4>
 80077fa:	3d03      	subs	r5, #3
 80077fc:	b2ed      	uxtb	r5, r5
 80077fe:	1b76      	subs	r6, r6, r5
 8007800:	6823      	ldr	r3, [r4, #0]
 8007802:	05da      	lsls	r2, r3, #23
 8007804:	d530      	bpl.n	8007868 <_scanf_float+0x364>
 8007806:	055b      	lsls	r3, r3, #21
 8007808:	d511      	bpl.n	800782e <_scanf_float+0x32a>
 800780a:	9b01      	ldr	r3, [sp, #4]
 800780c:	429e      	cmp	r6, r3
 800780e:	f67f aebc 	bls.w	800758a <_scanf_float+0x86>
 8007812:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007816:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800781a:	463a      	mov	r2, r7
 800781c:	4640      	mov	r0, r8
 800781e:	4798      	blx	r3
 8007820:	6923      	ldr	r3, [r4, #16]
 8007822:	3b01      	subs	r3, #1
 8007824:	6123      	str	r3, [r4, #16]
 8007826:	e7f0      	b.n	800780a <_scanf_float+0x306>
 8007828:	46aa      	mov	sl, r5
 800782a:	46b3      	mov	fp, r6
 800782c:	e7de      	b.n	80077ec <_scanf_float+0x2e8>
 800782e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007832:	6923      	ldr	r3, [r4, #16]
 8007834:	2965      	cmp	r1, #101	@ 0x65
 8007836:	f103 33ff 	add.w	r3, r3, #4294967295
 800783a:	f106 35ff 	add.w	r5, r6, #4294967295
 800783e:	6123      	str	r3, [r4, #16]
 8007840:	d00c      	beq.n	800785c <_scanf_float+0x358>
 8007842:	2945      	cmp	r1, #69	@ 0x45
 8007844:	d00a      	beq.n	800785c <_scanf_float+0x358>
 8007846:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800784a:	463a      	mov	r2, r7
 800784c:	4640      	mov	r0, r8
 800784e:	4798      	blx	r3
 8007850:	6923      	ldr	r3, [r4, #16]
 8007852:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007856:	3b01      	subs	r3, #1
 8007858:	1eb5      	subs	r5, r6, #2
 800785a:	6123      	str	r3, [r4, #16]
 800785c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007860:	463a      	mov	r2, r7
 8007862:	4640      	mov	r0, r8
 8007864:	4798      	blx	r3
 8007866:	462e      	mov	r6, r5
 8007868:	6822      	ldr	r2, [r4, #0]
 800786a:	f012 0210 	ands.w	r2, r2, #16
 800786e:	d001      	beq.n	8007874 <_scanf_float+0x370>
 8007870:	2000      	movs	r0, #0
 8007872:	e68b      	b.n	800758c <_scanf_float+0x88>
 8007874:	7032      	strb	r2, [r6, #0]
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800787c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007880:	d11c      	bne.n	80078bc <_scanf_float+0x3b8>
 8007882:	9b02      	ldr	r3, [sp, #8]
 8007884:	454b      	cmp	r3, r9
 8007886:	eba3 0209 	sub.w	r2, r3, r9
 800788a:	d123      	bne.n	80078d4 <_scanf_float+0x3d0>
 800788c:	9901      	ldr	r1, [sp, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	4640      	mov	r0, r8
 8007892:	f002 fc25 	bl	800a0e0 <_strtod_r>
 8007896:	9b03      	ldr	r3, [sp, #12]
 8007898:	6821      	ldr	r1, [r4, #0]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f011 0f02 	tst.w	r1, #2
 80078a0:	ec57 6b10 	vmov	r6, r7, d0
 80078a4:	f103 0204 	add.w	r2, r3, #4
 80078a8:	d01f      	beq.n	80078ea <_scanf_float+0x3e6>
 80078aa:	9903      	ldr	r1, [sp, #12]
 80078ac:	600a      	str	r2, [r1, #0]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	e9c3 6700 	strd	r6, r7, [r3]
 80078b4:	68e3      	ldr	r3, [r4, #12]
 80078b6:	3301      	adds	r3, #1
 80078b8:	60e3      	str	r3, [r4, #12]
 80078ba:	e7d9      	b.n	8007870 <_scanf_float+0x36c>
 80078bc:	9b04      	ldr	r3, [sp, #16]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d0e4      	beq.n	800788c <_scanf_float+0x388>
 80078c2:	9905      	ldr	r1, [sp, #20]
 80078c4:	230a      	movs	r3, #10
 80078c6:	3101      	adds	r1, #1
 80078c8:	4640      	mov	r0, r8
 80078ca:	f002 fc89 	bl	800a1e0 <_strtol_r>
 80078ce:	9b04      	ldr	r3, [sp, #16]
 80078d0:	9e05      	ldr	r6, [sp, #20]
 80078d2:	1ac2      	subs	r2, r0, r3
 80078d4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80078d8:	429e      	cmp	r6, r3
 80078da:	bf28      	it	cs
 80078dc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80078e0:	4910      	ldr	r1, [pc, #64]	@ (8007924 <_scanf_float+0x420>)
 80078e2:	4630      	mov	r0, r6
 80078e4:	f000 f8e4 	bl	8007ab0 <siprintf>
 80078e8:	e7d0      	b.n	800788c <_scanf_float+0x388>
 80078ea:	f011 0f04 	tst.w	r1, #4
 80078ee:	9903      	ldr	r1, [sp, #12]
 80078f0:	600a      	str	r2, [r1, #0]
 80078f2:	d1dc      	bne.n	80078ae <_scanf_float+0x3aa>
 80078f4:	681d      	ldr	r5, [r3, #0]
 80078f6:	4632      	mov	r2, r6
 80078f8:	463b      	mov	r3, r7
 80078fa:	4630      	mov	r0, r6
 80078fc:	4639      	mov	r1, r7
 80078fe:	f7f9 f91d 	bl	8000b3c <__aeabi_dcmpun>
 8007902:	b128      	cbz	r0, 8007910 <_scanf_float+0x40c>
 8007904:	4808      	ldr	r0, [pc, #32]	@ (8007928 <_scanf_float+0x424>)
 8007906:	f000 f9e3 	bl	8007cd0 <nanf>
 800790a:	ed85 0a00 	vstr	s0, [r5]
 800790e:	e7d1      	b.n	80078b4 <_scanf_float+0x3b0>
 8007910:	4630      	mov	r0, r6
 8007912:	4639      	mov	r1, r7
 8007914:	f7f9 f970 	bl	8000bf8 <__aeabi_d2f>
 8007918:	6028      	str	r0, [r5, #0]
 800791a:	e7cb      	b.n	80078b4 <_scanf_float+0x3b0>
 800791c:	f04f 0900 	mov.w	r9, #0
 8007920:	e629      	b.n	8007576 <_scanf_float+0x72>
 8007922:	bf00      	nop
 8007924:	0800bebe 	.word	0x0800bebe
 8007928:	0800c270 	.word	0x0800c270

0800792c <std>:
 800792c:	2300      	movs	r3, #0
 800792e:	b510      	push	{r4, lr}
 8007930:	4604      	mov	r4, r0
 8007932:	e9c0 3300 	strd	r3, r3, [r0]
 8007936:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800793a:	6083      	str	r3, [r0, #8]
 800793c:	8181      	strh	r1, [r0, #12]
 800793e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007940:	81c2      	strh	r2, [r0, #14]
 8007942:	6183      	str	r3, [r0, #24]
 8007944:	4619      	mov	r1, r3
 8007946:	2208      	movs	r2, #8
 8007948:	305c      	adds	r0, #92	@ 0x5c
 800794a:	f000 f940 	bl	8007bce <memset>
 800794e:	4b0d      	ldr	r3, [pc, #52]	@ (8007984 <std+0x58>)
 8007950:	6263      	str	r3, [r4, #36]	@ 0x24
 8007952:	4b0d      	ldr	r3, [pc, #52]	@ (8007988 <std+0x5c>)
 8007954:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007956:	4b0d      	ldr	r3, [pc, #52]	@ (800798c <std+0x60>)
 8007958:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800795a:	4b0d      	ldr	r3, [pc, #52]	@ (8007990 <std+0x64>)
 800795c:	6323      	str	r3, [r4, #48]	@ 0x30
 800795e:	4b0d      	ldr	r3, [pc, #52]	@ (8007994 <std+0x68>)
 8007960:	6224      	str	r4, [r4, #32]
 8007962:	429c      	cmp	r4, r3
 8007964:	d006      	beq.n	8007974 <std+0x48>
 8007966:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800796a:	4294      	cmp	r4, r2
 800796c:	d002      	beq.n	8007974 <std+0x48>
 800796e:	33d0      	adds	r3, #208	@ 0xd0
 8007970:	429c      	cmp	r4, r3
 8007972:	d105      	bne.n	8007980 <std+0x54>
 8007974:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800797c:	f000 b9a4 	b.w	8007cc8 <__retarget_lock_init_recursive>
 8007980:	bd10      	pop	{r4, pc}
 8007982:	bf00      	nop
 8007984:	08007b45 	.word	0x08007b45
 8007988:	08007b6b 	.word	0x08007b6b
 800798c:	08007ba3 	.word	0x08007ba3
 8007990:	08007bc7 	.word	0x08007bc7
 8007994:	20000540 	.word	0x20000540

08007998 <stdio_exit_handler>:
 8007998:	4a02      	ldr	r2, [pc, #8]	@ (80079a4 <stdio_exit_handler+0xc>)
 800799a:	4903      	ldr	r1, [pc, #12]	@ (80079a8 <stdio_exit_handler+0x10>)
 800799c:	4803      	ldr	r0, [pc, #12]	@ (80079ac <stdio_exit_handler+0x14>)
 800799e:	f000 b869 	b.w	8007a74 <_fwalk_sglue>
 80079a2:	bf00      	nop
 80079a4:	20000090 	.word	0x20000090
 80079a8:	0800abd1 	.word	0x0800abd1
 80079ac:	200000a0 	.word	0x200000a0

080079b0 <cleanup_stdio>:
 80079b0:	6841      	ldr	r1, [r0, #4]
 80079b2:	4b0c      	ldr	r3, [pc, #48]	@ (80079e4 <cleanup_stdio+0x34>)
 80079b4:	4299      	cmp	r1, r3
 80079b6:	b510      	push	{r4, lr}
 80079b8:	4604      	mov	r4, r0
 80079ba:	d001      	beq.n	80079c0 <cleanup_stdio+0x10>
 80079bc:	f003 f908 	bl	800abd0 <_fflush_r>
 80079c0:	68a1      	ldr	r1, [r4, #8]
 80079c2:	4b09      	ldr	r3, [pc, #36]	@ (80079e8 <cleanup_stdio+0x38>)
 80079c4:	4299      	cmp	r1, r3
 80079c6:	d002      	beq.n	80079ce <cleanup_stdio+0x1e>
 80079c8:	4620      	mov	r0, r4
 80079ca:	f003 f901 	bl	800abd0 <_fflush_r>
 80079ce:	68e1      	ldr	r1, [r4, #12]
 80079d0:	4b06      	ldr	r3, [pc, #24]	@ (80079ec <cleanup_stdio+0x3c>)
 80079d2:	4299      	cmp	r1, r3
 80079d4:	d004      	beq.n	80079e0 <cleanup_stdio+0x30>
 80079d6:	4620      	mov	r0, r4
 80079d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079dc:	f003 b8f8 	b.w	800abd0 <_fflush_r>
 80079e0:	bd10      	pop	{r4, pc}
 80079e2:	bf00      	nop
 80079e4:	20000540 	.word	0x20000540
 80079e8:	200005a8 	.word	0x200005a8
 80079ec:	20000610 	.word	0x20000610

080079f0 <global_stdio_init.part.0>:
 80079f0:	b510      	push	{r4, lr}
 80079f2:	4b0b      	ldr	r3, [pc, #44]	@ (8007a20 <global_stdio_init.part.0+0x30>)
 80079f4:	4c0b      	ldr	r4, [pc, #44]	@ (8007a24 <global_stdio_init.part.0+0x34>)
 80079f6:	4a0c      	ldr	r2, [pc, #48]	@ (8007a28 <global_stdio_init.part.0+0x38>)
 80079f8:	601a      	str	r2, [r3, #0]
 80079fa:	4620      	mov	r0, r4
 80079fc:	2200      	movs	r2, #0
 80079fe:	2104      	movs	r1, #4
 8007a00:	f7ff ff94 	bl	800792c <std>
 8007a04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007a08:	2201      	movs	r2, #1
 8007a0a:	2109      	movs	r1, #9
 8007a0c:	f7ff ff8e 	bl	800792c <std>
 8007a10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a14:	2202      	movs	r2, #2
 8007a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a1a:	2112      	movs	r1, #18
 8007a1c:	f7ff bf86 	b.w	800792c <std>
 8007a20:	20000678 	.word	0x20000678
 8007a24:	20000540 	.word	0x20000540
 8007a28:	08007999 	.word	0x08007999

08007a2c <__sfp_lock_acquire>:
 8007a2c:	4801      	ldr	r0, [pc, #4]	@ (8007a34 <__sfp_lock_acquire+0x8>)
 8007a2e:	f000 b94c 	b.w	8007cca <__retarget_lock_acquire_recursive>
 8007a32:	bf00      	nop
 8007a34:	20000681 	.word	0x20000681

08007a38 <__sfp_lock_release>:
 8007a38:	4801      	ldr	r0, [pc, #4]	@ (8007a40 <__sfp_lock_release+0x8>)
 8007a3a:	f000 b947 	b.w	8007ccc <__retarget_lock_release_recursive>
 8007a3e:	bf00      	nop
 8007a40:	20000681 	.word	0x20000681

08007a44 <__sinit>:
 8007a44:	b510      	push	{r4, lr}
 8007a46:	4604      	mov	r4, r0
 8007a48:	f7ff fff0 	bl	8007a2c <__sfp_lock_acquire>
 8007a4c:	6a23      	ldr	r3, [r4, #32]
 8007a4e:	b11b      	cbz	r3, 8007a58 <__sinit+0x14>
 8007a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a54:	f7ff bff0 	b.w	8007a38 <__sfp_lock_release>
 8007a58:	4b04      	ldr	r3, [pc, #16]	@ (8007a6c <__sinit+0x28>)
 8007a5a:	6223      	str	r3, [r4, #32]
 8007a5c:	4b04      	ldr	r3, [pc, #16]	@ (8007a70 <__sinit+0x2c>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d1f5      	bne.n	8007a50 <__sinit+0xc>
 8007a64:	f7ff ffc4 	bl	80079f0 <global_stdio_init.part.0>
 8007a68:	e7f2      	b.n	8007a50 <__sinit+0xc>
 8007a6a:	bf00      	nop
 8007a6c:	080079b1 	.word	0x080079b1
 8007a70:	20000678 	.word	0x20000678

08007a74 <_fwalk_sglue>:
 8007a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a78:	4607      	mov	r7, r0
 8007a7a:	4688      	mov	r8, r1
 8007a7c:	4614      	mov	r4, r2
 8007a7e:	2600      	movs	r6, #0
 8007a80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a84:	f1b9 0901 	subs.w	r9, r9, #1
 8007a88:	d505      	bpl.n	8007a96 <_fwalk_sglue+0x22>
 8007a8a:	6824      	ldr	r4, [r4, #0]
 8007a8c:	2c00      	cmp	r4, #0
 8007a8e:	d1f7      	bne.n	8007a80 <_fwalk_sglue+0xc>
 8007a90:	4630      	mov	r0, r6
 8007a92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a96:	89ab      	ldrh	r3, [r5, #12]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d907      	bls.n	8007aac <_fwalk_sglue+0x38>
 8007a9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	d003      	beq.n	8007aac <_fwalk_sglue+0x38>
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	4638      	mov	r0, r7
 8007aa8:	47c0      	blx	r8
 8007aaa:	4306      	orrs	r6, r0
 8007aac:	3568      	adds	r5, #104	@ 0x68
 8007aae:	e7e9      	b.n	8007a84 <_fwalk_sglue+0x10>

08007ab0 <siprintf>:
 8007ab0:	b40e      	push	{r1, r2, r3}
 8007ab2:	b500      	push	{lr}
 8007ab4:	b09c      	sub	sp, #112	@ 0x70
 8007ab6:	ab1d      	add	r3, sp, #116	@ 0x74
 8007ab8:	9002      	str	r0, [sp, #8]
 8007aba:	9006      	str	r0, [sp, #24]
 8007abc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007ac0:	4809      	ldr	r0, [pc, #36]	@ (8007ae8 <siprintf+0x38>)
 8007ac2:	9107      	str	r1, [sp, #28]
 8007ac4:	9104      	str	r1, [sp, #16]
 8007ac6:	4909      	ldr	r1, [pc, #36]	@ (8007aec <siprintf+0x3c>)
 8007ac8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007acc:	9105      	str	r1, [sp, #20]
 8007ace:	6800      	ldr	r0, [r0, #0]
 8007ad0:	9301      	str	r3, [sp, #4]
 8007ad2:	a902      	add	r1, sp, #8
 8007ad4:	f002 fbe2 	bl	800a29c <_svfiprintf_r>
 8007ad8:	9b02      	ldr	r3, [sp, #8]
 8007ada:	2200      	movs	r2, #0
 8007adc:	701a      	strb	r2, [r3, #0]
 8007ade:	b01c      	add	sp, #112	@ 0x70
 8007ae0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ae4:	b003      	add	sp, #12
 8007ae6:	4770      	bx	lr
 8007ae8:	2000009c 	.word	0x2000009c
 8007aec:	ffff0208 	.word	0xffff0208

08007af0 <siscanf>:
 8007af0:	b40e      	push	{r1, r2, r3}
 8007af2:	b530      	push	{r4, r5, lr}
 8007af4:	b09c      	sub	sp, #112	@ 0x70
 8007af6:	ac1f      	add	r4, sp, #124	@ 0x7c
 8007af8:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8007afc:	f854 5b04 	ldr.w	r5, [r4], #4
 8007b00:	f8ad 2014 	strh.w	r2, [sp, #20]
 8007b04:	9002      	str	r0, [sp, #8]
 8007b06:	9006      	str	r0, [sp, #24]
 8007b08:	f7f8 fbba 	bl	8000280 <strlen>
 8007b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8007b3c <siscanf+0x4c>)
 8007b0e:	9003      	str	r0, [sp, #12]
 8007b10:	9007      	str	r0, [sp, #28]
 8007b12:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b14:	480a      	ldr	r0, [pc, #40]	@ (8007b40 <siscanf+0x50>)
 8007b16:	9401      	str	r4, [sp, #4]
 8007b18:	2300      	movs	r3, #0
 8007b1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b1c:	9314      	str	r3, [sp, #80]	@ 0x50
 8007b1e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007b22:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007b26:	462a      	mov	r2, r5
 8007b28:	4623      	mov	r3, r4
 8007b2a:	a902      	add	r1, sp, #8
 8007b2c:	6800      	ldr	r0, [r0, #0]
 8007b2e:	f002 fd09 	bl	800a544 <__ssvfiscanf_r>
 8007b32:	b01c      	add	sp, #112	@ 0x70
 8007b34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b38:	b003      	add	sp, #12
 8007b3a:	4770      	bx	lr
 8007b3c:	08007b67 	.word	0x08007b67
 8007b40:	2000009c 	.word	0x2000009c

08007b44 <__sread>:
 8007b44:	b510      	push	{r4, lr}
 8007b46:	460c      	mov	r4, r1
 8007b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b4c:	f000 f86e 	bl	8007c2c <_read_r>
 8007b50:	2800      	cmp	r0, #0
 8007b52:	bfab      	itete	ge
 8007b54:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007b56:	89a3      	ldrhlt	r3, [r4, #12]
 8007b58:	181b      	addge	r3, r3, r0
 8007b5a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007b5e:	bfac      	ite	ge
 8007b60:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007b62:	81a3      	strhlt	r3, [r4, #12]
 8007b64:	bd10      	pop	{r4, pc}

08007b66 <__seofread>:
 8007b66:	2000      	movs	r0, #0
 8007b68:	4770      	bx	lr

08007b6a <__swrite>:
 8007b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b6e:	461f      	mov	r7, r3
 8007b70:	898b      	ldrh	r3, [r1, #12]
 8007b72:	05db      	lsls	r3, r3, #23
 8007b74:	4605      	mov	r5, r0
 8007b76:	460c      	mov	r4, r1
 8007b78:	4616      	mov	r6, r2
 8007b7a:	d505      	bpl.n	8007b88 <__swrite+0x1e>
 8007b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b80:	2302      	movs	r3, #2
 8007b82:	2200      	movs	r2, #0
 8007b84:	f000 f840 	bl	8007c08 <_lseek_r>
 8007b88:	89a3      	ldrh	r3, [r4, #12]
 8007b8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b92:	81a3      	strh	r3, [r4, #12]
 8007b94:	4632      	mov	r2, r6
 8007b96:	463b      	mov	r3, r7
 8007b98:	4628      	mov	r0, r5
 8007b9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b9e:	f000 b857 	b.w	8007c50 <_write_r>

08007ba2 <__sseek>:
 8007ba2:	b510      	push	{r4, lr}
 8007ba4:	460c      	mov	r4, r1
 8007ba6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007baa:	f000 f82d 	bl	8007c08 <_lseek_r>
 8007bae:	1c43      	adds	r3, r0, #1
 8007bb0:	89a3      	ldrh	r3, [r4, #12]
 8007bb2:	bf15      	itete	ne
 8007bb4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007bb6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007bba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007bbe:	81a3      	strheq	r3, [r4, #12]
 8007bc0:	bf18      	it	ne
 8007bc2:	81a3      	strhne	r3, [r4, #12]
 8007bc4:	bd10      	pop	{r4, pc}

08007bc6 <__sclose>:
 8007bc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bca:	f000 b80d 	b.w	8007be8 <_close_r>

08007bce <memset>:
 8007bce:	4402      	add	r2, r0
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d100      	bne.n	8007bd8 <memset+0xa>
 8007bd6:	4770      	bx	lr
 8007bd8:	f803 1b01 	strb.w	r1, [r3], #1
 8007bdc:	e7f9      	b.n	8007bd2 <memset+0x4>
	...

08007be0 <_localeconv_r>:
 8007be0:	4800      	ldr	r0, [pc, #0]	@ (8007be4 <_localeconv_r+0x4>)
 8007be2:	4770      	bx	lr
 8007be4:	200001dc 	.word	0x200001dc

08007be8 <_close_r>:
 8007be8:	b538      	push	{r3, r4, r5, lr}
 8007bea:	4d06      	ldr	r5, [pc, #24]	@ (8007c04 <_close_r+0x1c>)
 8007bec:	2300      	movs	r3, #0
 8007bee:	4604      	mov	r4, r0
 8007bf0:	4608      	mov	r0, r1
 8007bf2:	602b      	str	r3, [r5, #0]
 8007bf4:	f7fa fd64 	bl	80026c0 <_close>
 8007bf8:	1c43      	adds	r3, r0, #1
 8007bfa:	d102      	bne.n	8007c02 <_close_r+0x1a>
 8007bfc:	682b      	ldr	r3, [r5, #0]
 8007bfe:	b103      	cbz	r3, 8007c02 <_close_r+0x1a>
 8007c00:	6023      	str	r3, [r4, #0]
 8007c02:	bd38      	pop	{r3, r4, r5, pc}
 8007c04:	2000067c 	.word	0x2000067c

08007c08 <_lseek_r>:
 8007c08:	b538      	push	{r3, r4, r5, lr}
 8007c0a:	4d07      	ldr	r5, [pc, #28]	@ (8007c28 <_lseek_r+0x20>)
 8007c0c:	4604      	mov	r4, r0
 8007c0e:	4608      	mov	r0, r1
 8007c10:	4611      	mov	r1, r2
 8007c12:	2200      	movs	r2, #0
 8007c14:	602a      	str	r2, [r5, #0]
 8007c16:	461a      	mov	r2, r3
 8007c18:	f7fa fd79 	bl	800270e <_lseek>
 8007c1c:	1c43      	adds	r3, r0, #1
 8007c1e:	d102      	bne.n	8007c26 <_lseek_r+0x1e>
 8007c20:	682b      	ldr	r3, [r5, #0]
 8007c22:	b103      	cbz	r3, 8007c26 <_lseek_r+0x1e>
 8007c24:	6023      	str	r3, [r4, #0]
 8007c26:	bd38      	pop	{r3, r4, r5, pc}
 8007c28:	2000067c 	.word	0x2000067c

08007c2c <_read_r>:
 8007c2c:	b538      	push	{r3, r4, r5, lr}
 8007c2e:	4d07      	ldr	r5, [pc, #28]	@ (8007c4c <_read_r+0x20>)
 8007c30:	4604      	mov	r4, r0
 8007c32:	4608      	mov	r0, r1
 8007c34:	4611      	mov	r1, r2
 8007c36:	2200      	movs	r2, #0
 8007c38:	602a      	str	r2, [r5, #0]
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	f7fa fd07 	bl	800264e <_read>
 8007c40:	1c43      	adds	r3, r0, #1
 8007c42:	d102      	bne.n	8007c4a <_read_r+0x1e>
 8007c44:	682b      	ldr	r3, [r5, #0]
 8007c46:	b103      	cbz	r3, 8007c4a <_read_r+0x1e>
 8007c48:	6023      	str	r3, [r4, #0]
 8007c4a:	bd38      	pop	{r3, r4, r5, pc}
 8007c4c:	2000067c 	.word	0x2000067c

08007c50 <_write_r>:
 8007c50:	b538      	push	{r3, r4, r5, lr}
 8007c52:	4d07      	ldr	r5, [pc, #28]	@ (8007c70 <_write_r+0x20>)
 8007c54:	4604      	mov	r4, r0
 8007c56:	4608      	mov	r0, r1
 8007c58:	4611      	mov	r1, r2
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	602a      	str	r2, [r5, #0]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	f7fa fd12 	bl	8002688 <_write>
 8007c64:	1c43      	adds	r3, r0, #1
 8007c66:	d102      	bne.n	8007c6e <_write_r+0x1e>
 8007c68:	682b      	ldr	r3, [r5, #0]
 8007c6a:	b103      	cbz	r3, 8007c6e <_write_r+0x1e>
 8007c6c:	6023      	str	r3, [r4, #0]
 8007c6e:	bd38      	pop	{r3, r4, r5, pc}
 8007c70:	2000067c 	.word	0x2000067c

08007c74 <__errno>:
 8007c74:	4b01      	ldr	r3, [pc, #4]	@ (8007c7c <__errno+0x8>)
 8007c76:	6818      	ldr	r0, [r3, #0]
 8007c78:	4770      	bx	lr
 8007c7a:	bf00      	nop
 8007c7c:	2000009c 	.word	0x2000009c

08007c80 <__libc_init_array>:
 8007c80:	b570      	push	{r4, r5, r6, lr}
 8007c82:	4d0d      	ldr	r5, [pc, #52]	@ (8007cb8 <__libc_init_array+0x38>)
 8007c84:	4c0d      	ldr	r4, [pc, #52]	@ (8007cbc <__libc_init_array+0x3c>)
 8007c86:	1b64      	subs	r4, r4, r5
 8007c88:	10a4      	asrs	r4, r4, #2
 8007c8a:	2600      	movs	r6, #0
 8007c8c:	42a6      	cmp	r6, r4
 8007c8e:	d109      	bne.n	8007ca4 <__libc_init_array+0x24>
 8007c90:	4d0b      	ldr	r5, [pc, #44]	@ (8007cc0 <__libc_init_array+0x40>)
 8007c92:	4c0c      	ldr	r4, [pc, #48]	@ (8007cc4 <__libc_init_array+0x44>)
 8007c94:	f004 f8ac 	bl	800bdf0 <_init>
 8007c98:	1b64      	subs	r4, r4, r5
 8007c9a:	10a4      	asrs	r4, r4, #2
 8007c9c:	2600      	movs	r6, #0
 8007c9e:	42a6      	cmp	r6, r4
 8007ca0:	d105      	bne.n	8007cae <__libc_init_array+0x2e>
 8007ca2:	bd70      	pop	{r4, r5, r6, pc}
 8007ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ca8:	4798      	blx	r3
 8007caa:	3601      	adds	r6, #1
 8007cac:	e7ee      	b.n	8007c8c <__libc_init_array+0xc>
 8007cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cb2:	4798      	blx	r3
 8007cb4:	3601      	adds	r6, #1
 8007cb6:	e7f2      	b.n	8007c9e <__libc_init_array+0x1e>
 8007cb8:	0800c2f0 	.word	0x0800c2f0
 8007cbc:	0800c2f0 	.word	0x0800c2f0
 8007cc0:	0800c2f0 	.word	0x0800c2f0
 8007cc4:	0800c2f4 	.word	0x0800c2f4

08007cc8 <__retarget_lock_init_recursive>:
 8007cc8:	4770      	bx	lr

08007cca <__retarget_lock_acquire_recursive>:
 8007cca:	4770      	bx	lr

08007ccc <__retarget_lock_release_recursive>:
 8007ccc:	4770      	bx	lr
	...

08007cd0 <nanf>:
 8007cd0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007cd8 <nanf+0x8>
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	7fc00000 	.word	0x7fc00000

08007cdc <quorem>:
 8007cdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce0:	6903      	ldr	r3, [r0, #16]
 8007ce2:	690c      	ldr	r4, [r1, #16]
 8007ce4:	42a3      	cmp	r3, r4
 8007ce6:	4607      	mov	r7, r0
 8007ce8:	db7e      	blt.n	8007de8 <quorem+0x10c>
 8007cea:	3c01      	subs	r4, #1
 8007cec:	f101 0814 	add.w	r8, r1, #20
 8007cf0:	00a3      	lsls	r3, r4, #2
 8007cf2:	f100 0514 	add.w	r5, r0, #20
 8007cf6:	9300      	str	r3, [sp, #0]
 8007cf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cfc:	9301      	str	r3, [sp, #4]
 8007cfe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d06:	3301      	adds	r3, #1
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007d0e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d12:	d32e      	bcc.n	8007d72 <quorem+0x96>
 8007d14:	f04f 0a00 	mov.w	sl, #0
 8007d18:	46c4      	mov	ip, r8
 8007d1a:	46ae      	mov	lr, r5
 8007d1c:	46d3      	mov	fp, sl
 8007d1e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007d22:	b298      	uxth	r0, r3
 8007d24:	fb06 a000 	mla	r0, r6, r0, sl
 8007d28:	0c02      	lsrs	r2, r0, #16
 8007d2a:	0c1b      	lsrs	r3, r3, #16
 8007d2c:	fb06 2303 	mla	r3, r6, r3, r2
 8007d30:	f8de 2000 	ldr.w	r2, [lr]
 8007d34:	b280      	uxth	r0, r0
 8007d36:	b292      	uxth	r2, r2
 8007d38:	1a12      	subs	r2, r2, r0
 8007d3a:	445a      	add	r2, fp
 8007d3c:	f8de 0000 	ldr.w	r0, [lr]
 8007d40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007d4a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007d4e:	b292      	uxth	r2, r2
 8007d50:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007d54:	45e1      	cmp	r9, ip
 8007d56:	f84e 2b04 	str.w	r2, [lr], #4
 8007d5a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007d5e:	d2de      	bcs.n	8007d1e <quorem+0x42>
 8007d60:	9b00      	ldr	r3, [sp, #0]
 8007d62:	58eb      	ldr	r3, [r5, r3]
 8007d64:	b92b      	cbnz	r3, 8007d72 <quorem+0x96>
 8007d66:	9b01      	ldr	r3, [sp, #4]
 8007d68:	3b04      	subs	r3, #4
 8007d6a:	429d      	cmp	r5, r3
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	d32f      	bcc.n	8007dd0 <quorem+0xf4>
 8007d70:	613c      	str	r4, [r7, #16]
 8007d72:	4638      	mov	r0, r7
 8007d74:	f001 f9c4 	bl	8009100 <__mcmp>
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	db25      	blt.n	8007dc8 <quorem+0xec>
 8007d7c:	4629      	mov	r1, r5
 8007d7e:	2000      	movs	r0, #0
 8007d80:	f858 2b04 	ldr.w	r2, [r8], #4
 8007d84:	f8d1 c000 	ldr.w	ip, [r1]
 8007d88:	fa1f fe82 	uxth.w	lr, r2
 8007d8c:	fa1f f38c 	uxth.w	r3, ip
 8007d90:	eba3 030e 	sub.w	r3, r3, lr
 8007d94:	4403      	add	r3, r0
 8007d96:	0c12      	lsrs	r2, r2, #16
 8007d98:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007d9c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007da0:	b29b      	uxth	r3, r3
 8007da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007da6:	45c1      	cmp	r9, r8
 8007da8:	f841 3b04 	str.w	r3, [r1], #4
 8007dac:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007db0:	d2e6      	bcs.n	8007d80 <quorem+0xa4>
 8007db2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007db6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007dba:	b922      	cbnz	r2, 8007dc6 <quorem+0xea>
 8007dbc:	3b04      	subs	r3, #4
 8007dbe:	429d      	cmp	r5, r3
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	d30b      	bcc.n	8007ddc <quorem+0x100>
 8007dc4:	613c      	str	r4, [r7, #16]
 8007dc6:	3601      	adds	r6, #1
 8007dc8:	4630      	mov	r0, r6
 8007dca:	b003      	add	sp, #12
 8007dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd0:	6812      	ldr	r2, [r2, #0]
 8007dd2:	3b04      	subs	r3, #4
 8007dd4:	2a00      	cmp	r2, #0
 8007dd6:	d1cb      	bne.n	8007d70 <quorem+0x94>
 8007dd8:	3c01      	subs	r4, #1
 8007dda:	e7c6      	b.n	8007d6a <quorem+0x8e>
 8007ddc:	6812      	ldr	r2, [r2, #0]
 8007dde:	3b04      	subs	r3, #4
 8007de0:	2a00      	cmp	r2, #0
 8007de2:	d1ef      	bne.n	8007dc4 <quorem+0xe8>
 8007de4:	3c01      	subs	r4, #1
 8007de6:	e7ea      	b.n	8007dbe <quorem+0xe2>
 8007de8:	2000      	movs	r0, #0
 8007dea:	e7ee      	b.n	8007dca <quorem+0xee>
 8007dec:	0000      	movs	r0, r0
	...

08007df0 <_dtoa_r>:
 8007df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df4:	69c7      	ldr	r7, [r0, #28]
 8007df6:	b099      	sub	sp, #100	@ 0x64
 8007df8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007dfc:	ec55 4b10 	vmov	r4, r5, d0
 8007e00:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007e02:	9109      	str	r1, [sp, #36]	@ 0x24
 8007e04:	4683      	mov	fp, r0
 8007e06:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e08:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007e0a:	b97f      	cbnz	r7, 8007e2c <_dtoa_r+0x3c>
 8007e0c:	2010      	movs	r0, #16
 8007e0e:	f000 fdfd 	bl	8008a0c <malloc>
 8007e12:	4602      	mov	r2, r0
 8007e14:	f8cb 001c 	str.w	r0, [fp, #28]
 8007e18:	b920      	cbnz	r0, 8007e24 <_dtoa_r+0x34>
 8007e1a:	4ba7      	ldr	r3, [pc, #668]	@ (80080b8 <_dtoa_r+0x2c8>)
 8007e1c:	21ef      	movs	r1, #239	@ 0xef
 8007e1e:	48a7      	ldr	r0, [pc, #668]	@ (80080bc <_dtoa_r+0x2cc>)
 8007e20:	f002 ffc6 	bl	800adb0 <__assert_func>
 8007e24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007e28:	6007      	str	r7, [r0, #0]
 8007e2a:	60c7      	str	r7, [r0, #12]
 8007e2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007e30:	6819      	ldr	r1, [r3, #0]
 8007e32:	b159      	cbz	r1, 8007e4c <_dtoa_r+0x5c>
 8007e34:	685a      	ldr	r2, [r3, #4]
 8007e36:	604a      	str	r2, [r1, #4]
 8007e38:	2301      	movs	r3, #1
 8007e3a:	4093      	lsls	r3, r2
 8007e3c:	608b      	str	r3, [r1, #8]
 8007e3e:	4658      	mov	r0, fp
 8007e40:	f000 feda 	bl	8008bf8 <_Bfree>
 8007e44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	601a      	str	r2, [r3, #0]
 8007e4c:	1e2b      	subs	r3, r5, #0
 8007e4e:	bfb9      	ittee	lt
 8007e50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007e54:	9303      	strlt	r3, [sp, #12]
 8007e56:	2300      	movge	r3, #0
 8007e58:	6033      	strge	r3, [r6, #0]
 8007e5a:	9f03      	ldr	r7, [sp, #12]
 8007e5c:	4b98      	ldr	r3, [pc, #608]	@ (80080c0 <_dtoa_r+0x2d0>)
 8007e5e:	bfbc      	itt	lt
 8007e60:	2201      	movlt	r2, #1
 8007e62:	6032      	strlt	r2, [r6, #0]
 8007e64:	43bb      	bics	r3, r7
 8007e66:	d112      	bne.n	8007e8e <_dtoa_r+0x9e>
 8007e68:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007e6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007e6e:	6013      	str	r3, [r2, #0]
 8007e70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007e74:	4323      	orrs	r3, r4
 8007e76:	f000 854d 	beq.w	8008914 <_dtoa_r+0xb24>
 8007e7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007e7c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80080d4 <_dtoa_r+0x2e4>
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f000 854f 	beq.w	8008924 <_dtoa_r+0xb34>
 8007e86:	f10a 0303 	add.w	r3, sl, #3
 8007e8a:	f000 bd49 	b.w	8008920 <_dtoa_r+0xb30>
 8007e8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007e92:	2200      	movs	r2, #0
 8007e94:	ec51 0b17 	vmov	r0, r1, d7
 8007e98:	2300      	movs	r3, #0
 8007e9a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007e9e:	f7f8 fe1b 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ea2:	4680      	mov	r8, r0
 8007ea4:	b158      	cbz	r0, 8007ebe <_dtoa_r+0xce>
 8007ea6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	6013      	str	r3, [r2, #0]
 8007eac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007eae:	b113      	cbz	r3, 8007eb6 <_dtoa_r+0xc6>
 8007eb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007eb2:	4b84      	ldr	r3, [pc, #528]	@ (80080c4 <_dtoa_r+0x2d4>)
 8007eb4:	6013      	str	r3, [r2, #0]
 8007eb6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80080d8 <_dtoa_r+0x2e8>
 8007eba:	f000 bd33 	b.w	8008924 <_dtoa_r+0xb34>
 8007ebe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007ec2:	aa16      	add	r2, sp, #88	@ 0x58
 8007ec4:	a917      	add	r1, sp, #92	@ 0x5c
 8007ec6:	4658      	mov	r0, fp
 8007ec8:	f001 fa3a 	bl	8009340 <__d2b>
 8007ecc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007ed0:	4681      	mov	r9, r0
 8007ed2:	2e00      	cmp	r6, #0
 8007ed4:	d077      	beq.n	8007fc6 <_dtoa_r+0x1d6>
 8007ed6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ed8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007edc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ee0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ee4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007ee8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007eec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	4b74      	ldr	r3, [pc, #464]	@ (80080c8 <_dtoa_r+0x2d8>)
 8007ef6:	f7f8 f9cf 	bl	8000298 <__aeabi_dsub>
 8007efa:	a369      	add	r3, pc, #420	@ (adr r3, 80080a0 <_dtoa_r+0x2b0>)
 8007efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f00:	f7f8 fb82 	bl	8000608 <__aeabi_dmul>
 8007f04:	a368      	add	r3, pc, #416	@ (adr r3, 80080a8 <_dtoa_r+0x2b8>)
 8007f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0a:	f7f8 f9c7 	bl	800029c <__adddf3>
 8007f0e:	4604      	mov	r4, r0
 8007f10:	4630      	mov	r0, r6
 8007f12:	460d      	mov	r5, r1
 8007f14:	f7f8 fb0e 	bl	8000534 <__aeabi_i2d>
 8007f18:	a365      	add	r3, pc, #404	@ (adr r3, 80080b0 <_dtoa_r+0x2c0>)
 8007f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1e:	f7f8 fb73 	bl	8000608 <__aeabi_dmul>
 8007f22:	4602      	mov	r2, r0
 8007f24:	460b      	mov	r3, r1
 8007f26:	4620      	mov	r0, r4
 8007f28:	4629      	mov	r1, r5
 8007f2a:	f7f8 f9b7 	bl	800029c <__adddf3>
 8007f2e:	4604      	mov	r4, r0
 8007f30:	460d      	mov	r5, r1
 8007f32:	f7f8 fe19 	bl	8000b68 <__aeabi_d2iz>
 8007f36:	2200      	movs	r2, #0
 8007f38:	4607      	mov	r7, r0
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	4620      	mov	r0, r4
 8007f3e:	4629      	mov	r1, r5
 8007f40:	f7f8 fdd4 	bl	8000aec <__aeabi_dcmplt>
 8007f44:	b140      	cbz	r0, 8007f58 <_dtoa_r+0x168>
 8007f46:	4638      	mov	r0, r7
 8007f48:	f7f8 faf4 	bl	8000534 <__aeabi_i2d>
 8007f4c:	4622      	mov	r2, r4
 8007f4e:	462b      	mov	r3, r5
 8007f50:	f7f8 fdc2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f54:	b900      	cbnz	r0, 8007f58 <_dtoa_r+0x168>
 8007f56:	3f01      	subs	r7, #1
 8007f58:	2f16      	cmp	r7, #22
 8007f5a:	d851      	bhi.n	8008000 <_dtoa_r+0x210>
 8007f5c:	4b5b      	ldr	r3, [pc, #364]	@ (80080cc <_dtoa_r+0x2dc>)
 8007f5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f6a:	f7f8 fdbf 	bl	8000aec <__aeabi_dcmplt>
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	d048      	beq.n	8008004 <_dtoa_r+0x214>
 8007f72:	3f01      	subs	r7, #1
 8007f74:	2300      	movs	r3, #0
 8007f76:	9312      	str	r3, [sp, #72]	@ 0x48
 8007f78:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007f7a:	1b9b      	subs	r3, r3, r6
 8007f7c:	1e5a      	subs	r2, r3, #1
 8007f7e:	bf44      	itt	mi
 8007f80:	f1c3 0801 	rsbmi	r8, r3, #1
 8007f84:	2300      	movmi	r3, #0
 8007f86:	9208      	str	r2, [sp, #32]
 8007f88:	bf54      	ite	pl
 8007f8a:	f04f 0800 	movpl.w	r8, #0
 8007f8e:	9308      	strmi	r3, [sp, #32]
 8007f90:	2f00      	cmp	r7, #0
 8007f92:	db39      	blt.n	8008008 <_dtoa_r+0x218>
 8007f94:	9b08      	ldr	r3, [sp, #32]
 8007f96:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007f98:	443b      	add	r3, r7
 8007f9a:	9308      	str	r3, [sp, #32]
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fa2:	2b09      	cmp	r3, #9
 8007fa4:	d864      	bhi.n	8008070 <_dtoa_r+0x280>
 8007fa6:	2b05      	cmp	r3, #5
 8007fa8:	bfc4      	itt	gt
 8007faa:	3b04      	subgt	r3, #4
 8007fac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fb0:	f1a3 0302 	sub.w	r3, r3, #2
 8007fb4:	bfcc      	ite	gt
 8007fb6:	2400      	movgt	r4, #0
 8007fb8:	2401      	movle	r4, #1
 8007fba:	2b03      	cmp	r3, #3
 8007fbc:	d863      	bhi.n	8008086 <_dtoa_r+0x296>
 8007fbe:	e8df f003 	tbb	[pc, r3]
 8007fc2:	372a      	.short	0x372a
 8007fc4:	5535      	.short	0x5535
 8007fc6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007fca:	441e      	add	r6, r3
 8007fcc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007fd0:	2b20      	cmp	r3, #32
 8007fd2:	bfc1      	itttt	gt
 8007fd4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007fd8:	409f      	lslgt	r7, r3
 8007fda:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007fde:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007fe2:	bfd6      	itet	le
 8007fe4:	f1c3 0320 	rsble	r3, r3, #32
 8007fe8:	ea47 0003 	orrgt.w	r0, r7, r3
 8007fec:	fa04 f003 	lslle.w	r0, r4, r3
 8007ff0:	f7f8 fa90 	bl	8000514 <__aeabi_ui2d>
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007ffa:	3e01      	subs	r6, #1
 8007ffc:	9214      	str	r2, [sp, #80]	@ 0x50
 8007ffe:	e777      	b.n	8007ef0 <_dtoa_r+0x100>
 8008000:	2301      	movs	r3, #1
 8008002:	e7b8      	b.n	8007f76 <_dtoa_r+0x186>
 8008004:	9012      	str	r0, [sp, #72]	@ 0x48
 8008006:	e7b7      	b.n	8007f78 <_dtoa_r+0x188>
 8008008:	427b      	negs	r3, r7
 800800a:	930a      	str	r3, [sp, #40]	@ 0x28
 800800c:	2300      	movs	r3, #0
 800800e:	eba8 0807 	sub.w	r8, r8, r7
 8008012:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008014:	e7c4      	b.n	8007fa0 <_dtoa_r+0x1b0>
 8008016:	2300      	movs	r3, #0
 8008018:	930b      	str	r3, [sp, #44]	@ 0x2c
 800801a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800801c:	2b00      	cmp	r3, #0
 800801e:	dc35      	bgt.n	800808c <_dtoa_r+0x29c>
 8008020:	2301      	movs	r3, #1
 8008022:	9300      	str	r3, [sp, #0]
 8008024:	9307      	str	r3, [sp, #28]
 8008026:	461a      	mov	r2, r3
 8008028:	920e      	str	r2, [sp, #56]	@ 0x38
 800802a:	e00b      	b.n	8008044 <_dtoa_r+0x254>
 800802c:	2301      	movs	r3, #1
 800802e:	e7f3      	b.n	8008018 <_dtoa_r+0x228>
 8008030:	2300      	movs	r3, #0
 8008032:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008034:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008036:	18fb      	adds	r3, r7, r3
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	3301      	adds	r3, #1
 800803c:	2b01      	cmp	r3, #1
 800803e:	9307      	str	r3, [sp, #28]
 8008040:	bfb8      	it	lt
 8008042:	2301      	movlt	r3, #1
 8008044:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008048:	2100      	movs	r1, #0
 800804a:	2204      	movs	r2, #4
 800804c:	f102 0514 	add.w	r5, r2, #20
 8008050:	429d      	cmp	r5, r3
 8008052:	d91f      	bls.n	8008094 <_dtoa_r+0x2a4>
 8008054:	6041      	str	r1, [r0, #4]
 8008056:	4658      	mov	r0, fp
 8008058:	f000 fd8e 	bl	8008b78 <_Balloc>
 800805c:	4682      	mov	sl, r0
 800805e:	2800      	cmp	r0, #0
 8008060:	d13c      	bne.n	80080dc <_dtoa_r+0x2ec>
 8008062:	4b1b      	ldr	r3, [pc, #108]	@ (80080d0 <_dtoa_r+0x2e0>)
 8008064:	4602      	mov	r2, r0
 8008066:	f240 11af 	movw	r1, #431	@ 0x1af
 800806a:	e6d8      	b.n	8007e1e <_dtoa_r+0x2e>
 800806c:	2301      	movs	r3, #1
 800806e:	e7e0      	b.n	8008032 <_dtoa_r+0x242>
 8008070:	2401      	movs	r4, #1
 8008072:	2300      	movs	r3, #0
 8008074:	9309      	str	r3, [sp, #36]	@ 0x24
 8008076:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008078:	f04f 33ff 	mov.w	r3, #4294967295
 800807c:	9300      	str	r3, [sp, #0]
 800807e:	9307      	str	r3, [sp, #28]
 8008080:	2200      	movs	r2, #0
 8008082:	2312      	movs	r3, #18
 8008084:	e7d0      	b.n	8008028 <_dtoa_r+0x238>
 8008086:	2301      	movs	r3, #1
 8008088:	930b      	str	r3, [sp, #44]	@ 0x2c
 800808a:	e7f5      	b.n	8008078 <_dtoa_r+0x288>
 800808c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800808e:	9300      	str	r3, [sp, #0]
 8008090:	9307      	str	r3, [sp, #28]
 8008092:	e7d7      	b.n	8008044 <_dtoa_r+0x254>
 8008094:	3101      	adds	r1, #1
 8008096:	0052      	lsls	r2, r2, #1
 8008098:	e7d8      	b.n	800804c <_dtoa_r+0x25c>
 800809a:	bf00      	nop
 800809c:	f3af 8000 	nop.w
 80080a0:	636f4361 	.word	0x636f4361
 80080a4:	3fd287a7 	.word	0x3fd287a7
 80080a8:	8b60c8b3 	.word	0x8b60c8b3
 80080ac:	3fc68a28 	.word	0x3fc68a28
 80080b0:	509f79fb 	.word	0x509f79fb
 80080b4:	3fd34413 	.word	0x3fd34413
 80080b8:	0800bed0 	.word	0x0800bed0
 80080bc:	0800bee7 	.word	0x0800bee7
 80080c0:	7ff00000 	.word	0x7ff00000
 80080c4:	0800c229 	.word	0x0800c229
 80080c8:	3ff80000 	.word	0x3ff80000
 80080cc:	0800bfe0 	.word	0x0800bfe0
 80080d0:	0800bf3f 	.word	0x0800bf3f
 80080d4:	0800becc 	.word	0x0800becc
 80080d8:	0800c228 	.word	0x0800c228
 80080dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80080e0:	6018      	str	r0, [r3, #0]
 80080e2:	9b07      	ldr	r3, [sp, #28]
 80080e4:	2b0e      	cmp	r3, #14
 80080e6:	f200 80a4 	bhi.w	8008232 <_dtoa_r+0x442>
 80080ea:	2c00      	cmp	r4, #0
 80080ec:	f000 80a1 	beq.w	8008232 <_dtoa_r+0x442>
 80080f0:	2f00      	cmp	r7, #0
 80080f2:	dd33      	ble.n	800815c <_dtoa_r+0x36c>
 80080f4:	4bad      	ldr	r3, [pc, #692]	@ (80083ac <_dtoa_r+0x5bc>)
 80080f6:	f007 020f 	and.w	r2, r7, #15
 80080fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080fe:	ed93 7b00 	vldr	d7, [r3]
 8008102:	05f8      	lsls	r0, r7, #23
 8008104:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008108:	ea4f 1427 	mov.w	r4, r7, asr #4
 800810c:	d516      	bpl.n	800813c <_dtoa_r+0x34c>
 800810e:	4ba8      	ldr	r3, [pc, #672]	@ (80083b0 <_dtoa_r+0x5c0>)
 8008110:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008114:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008118:	f7f8 fba0 	bl	800085c <__aeabi_ddiv>
 800811c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008120:	f004 040f 	and.w	r4, r4, #15
 8008124:	2603      	movs	r6, #3
 8008126:	4da2      	ldr	r5, [pc, #648]	@ (80083b0 <_dtoa_r+0x5c0>)
 8008128:	b954      	cbnz	r4, 8008140 <_dtoa_r+0x350>
 800812a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800812e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008132:	f7f8 fb93 	bl	800085c <__aeabi_ddiv>
 8008136:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800813a:	e028      	b.n	800818e <_dtoa_r+0x39e>
 800813c:	2602      	movs	r6, #2
 800813e:	e7f2      	b.n	8008126 <_dtoa_r+0x336>
 8008140:	07e1      	lsls	r1, r4, #31
 8008142:	d508      	bpl.n	8008156 <_dtoa_r+0x366>
 8008144:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008148:	e9d5 2300 	ldrd	r2, r3, [r5]
 800814c:	f7f8 fa5c 	bl	8000608 <__aeabi_dmul>
 8008150:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008154:	3601      	adds	r6, #1
 8008156:	1064      	asrs	r4, r4, #1
 8008158:	3508      	adds	r5, #8
 800815a:	e7e5      	b.n	8008128 <_dtoa_r+0x338>
 800815c:	f000 80d2 	beq.w	8008304 <_dtoa_r+0x514>
 8008160:	427c      	negs	r4, r7
 8008162:	4b92      	ldr	r3, [pc, #584]	@ (80083ac <_dtoa_r+0x5bc>)
 8008164:	4d92      	ldr	r5, [pc, #584]	@ (80083b0 <_dtoa_r+0x5c0>)
 8008166:	f004 020f 	and.w	r2, r4, #15
 800816a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800816e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008172:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008176:	f7f8 fa47 	bl	8000608 <__aeabi_dmul>
 800817a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800817e:	1124      	asrs	r4, r4, #4
 8008180:	2300      	movs	r3, #0
 8008182:	2602      	movs	r6, #2
 8008184:	2c00      	cmp	r4, #0
 8008186:	f040 80b2 	bne.w	80082ee <_dtoa_r+0x4fe>
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1d3      	bne.n	8008136 <_dtoa_r+0x346>
 800818e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008190:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008194:	2b00      	cmp	r3, #0
 8008196:	f000 80b7 	beq.w	8008308 <_dtoa_r+0x518>
 800819a:	4b86      	ldr	r3, [pc, #536]	@ (80083b4 <_dtoa_r+0x5c4>)
 800819c:	2200      	movs	r2, #0
 800819e:	4620      	mov	r0, r4
 80081a0:	4629      	mov	r1, r5
 80081a2:	f7f8 fca3 	bl	8000aec <__aeabi_dcmplt>
 80081a6:	2800      	cmp	r0, #0
 80081a8:	f000 80ae 	beq.w	8008308 <_dtoa_r+0x518>
 80081ac:	9b07      	ldr	r3, [sp, #28]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	f000 80aa 	beq.w	8008308 <_dtoa_r+0x518>
 80081b4:	9b00      	ldr	r3, [sp, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	dd37      	ble.n	800822a <_dtoa_r+0x43a>
 80081ba:	1e7b      	subs	r3, r7, #1
 80081bc:	9304      	str	r3, [sp, #16]
 80081be:	4620      	mov	r0, r4
 80081c0:	4b7d      	ldr	r3, [pc, #500]	@ (80083b8 <_dtoa_r+0x5c8>)
 80081c2:	2200      	movs	r2, #0
 80081c4:	4629      	mov	r1, r5
 80081c6:	f7f8 fa1f 	bl	8000608 <__aeabi_dmul>
 80081ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081ce:	9c00      	ldr	r4, [sp, #0]
 80081d0:	3601      	adds	r6, #1
 80081d2:	4630      	mov	r0, r6
 80081d4:	f7f8 f9ae 	bl	8000534 <__aeabi_i2d>
 80081d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081dc:	f7f8 fa14 	bl	8000608 <__aeabi_dmul>
 80081e0:	4b76      	ldr	r3, [pc, #472]	@ (80083bc <_dtoa_r+0x5cc>)
 80081e2:	2200      	movs	r2, #0
 80081e4:	f7f8 f85a 	bl	800029c <__adddf3>
 80081e8:	4605      	mov	r5, r0
 80081ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80081ee:	2c00      	cmp	r4, #0
 80081f0:	f040 808d 	bne.w	800830e <_dtoa_r+0x51e>
 80081f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081f8:	4b71      	ldr	r3, [pc, #452]	@ (80083c0 <_dtoa_r+0x5d0>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	f7f8 f84c 	bl	8000298 <__aeabi_dsub>
 8008200:	4602      	mov	r2, r0
 8008202:	460b      	mov	r3, r1
 8008204:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008208:	462a      	mov	r2, r5
 800820a:	4633      	mov	r3, r6
 800820c:	f7f8 fc8c 	bl	8000b28 <__aeabi_dcmpgt>
 8008210:	2800      	cmp	r0, #0
 8008212:	f040 828b 	bne.w	800872c <_dtoa_r+0x93c>
 8008216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800821a:	462a      	mov	r2, r5
 800821c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008220:	f7f8 fc64 	bl	8000aec <__aeabi_dcmplt>
 8008224:	2800      	cmp	r0, #0
 8008226:	f040 8128 	bne.w	800847a <_dtoa_r+0x68a>
 800822a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800822e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008232:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008234:	2b00      	cmp	r3, #0
 8008236:	f2c0 815a 	blt.w	80084ee <_dtoa_r+0x6fe>
 800823a:	2f0e      	cmp	r7, #14
 800823c:	f300 8157 	bgt.w	80084ee <_dtoa_r+0x6fe>
 8008240:	4b5a      	ldr	r3, [pc, #360]	@ (80083ac <_dtoa_r+0x5bc>)
 8008242:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008246:	ed93 7b00 	vldr	d7, [r3]
 800824a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800824c:	2b00      	cmp	r3, #0
 800824e:	ed8d 7b00 	vstr	d7, [sp]
 8008252:	da03      	bge.n	800825c <_dtoa_r+0x46c>
 8008254:	9b07      	ldr	r3, [sp, #28]
 8008256:	2b00      	cmp	r3, #0
 8008258:	f340 8101 	ble.w	800845e <_dtoa_r+0x66e>
 800825c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008260:	4656      	mov	r6, sl
 8008262:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008266:	4620      	mov	r0, r4
 8008268:	4629      	mov	r1, r5
 800826a:	f7f8 faf7 	bl	800085c <__aeabi_ddiv>
 800826e:	f7f8 fc7b 	bl	8000b68 <__aeabi_d2iz>
 8008272:	4680      	mov	r8, r0
 8008274:	f7f8 f95e 	bl	8000534 <__aeabi_i2d>
 8008278:	e9dd 2300 	ldrd	r2, r3, [sp]
 800827c:	f7f8 f9c4 	bl	8000608 <__aeabi_dmul>
 8008280:	4602      	mov	r2, r0
 8008282:	460b      	mov	r3, r1
 8008284:	4620      	mov	r0, r4
 8008286:	4629      	mov	r1, r5
 8008288:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800828c:	f7f8 f804 	bl	8000298 <__aeabi_dsub>
 8008290:	f806 4b01 	strb.w	r4, [r6], #1
 8008294:	9d07      	ldr	r5, [sp, #28]
 8008296:	eba6 040a 	sub.w	r4, r6, sl
 800829a:	42a5      	cmp	r5, r4
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	f040 8117 	bne.w	80084d2 <_dtoa_r+0x6e2>
 80082a4:	f7f7 fffa 	bl	800029c <__adddf3>
 80082a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082ac:	4604      	mov	r4, r0
 80082ae:	460d      	mov	r5, r1
 80082b0:	f7f8 fc3a 	bl	8000b28 <__aeabi_dcmpgt>
 80082b4:	2800      	cmp	r0, #0
 80082b6:	f040 80f9 	bne.w	80084ac <_dtoa_r+0x6bc>
 80082ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082be:	4620      	mov	r0, r4
 80082c0:	4629      	mov	r1, r5
 80082c2:	f7f8 fc09 	bl	8000ad8 <__aeabi_dcmpeq>
 80082c6:	b118      	cbz	r0, 80082d0 <_dtoa_r+0x4e0>
 80082c8:	f018 0f01 	tst.w	r8, #1
 80082cc:	f040 80ee 	bne.w	80084ac <_dtoa_r+0x6bc>
 80082d0:	4649      	mov	r1, r9
 80082d2:	4658      	mov	r0, fp
 80082d4:	f000 fc90 	bl	8008bf8 <_Bfree>
 80082d8:	2300      	movs	r3, #0
 80082da:	7033      	strb	r3, [r6, #0]
 80082dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80082de:	3701      	adds	r7, #1
 80082e0:	601f      	str	r7, [r3, #0]
 80082e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f000 831d 	beq.w	8008924 <_dtoa_r+0xb34>
 80082ea:	601e      	str	r6, [r3, #0]
 80082ec:	e31a      	b.n	8008924 <_dtoa_r+0xb34>
 80082ee:	07e2      	lsls	r2, r4, #31
 80082f0:	d505      	bpl.n	80082fe <_dtoa_r+0x50e>
 80082f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80082f6:	f7f8 f987 	bl	8000608 <__aeabi_dmul>
 80082fa:	3601      	adds	r6, #1
 80082fc:	2301      	movs	r3, #1
 80082fe:	1064      	asrs	r4, r4, #1
 8008300:	3508      	adds	r5, #8
 8008302:	e73f      	b.n	8008184 <_dtoa_r+0x394>
 8008304:	2602      	movs	r6, #2
 8008306:	e742      	b.n	800818e <_dtoa_r+0x39e>
 8008308:	9c07      	ldr	r4, [sp, #28]
 800830a:	9704      	str	r7, [sp, #16]
 800830c:	e761      	b.n	80081d2 <_dtoa_r+0x3e2>
 800830e:	4b27      	ldr	r3, [pc, #156]	@ (80083ac <_dtoa_r+0x5bc>)
 8008310:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008312:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008316:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800831a:	4454      	add	r4, sl
 800831c:	2900      	cmp	r1, #0
 800831e:	d053      	beq.n	80083c8 <_dtoa_r+0x5d8>
 8008320:	4928      	ldr	r1, [pc, #160]	@ (80083c4 <_dtoa_r+0x5d4>)
 8008322:	2000      	movs	r0, #0
 8008324:	f7f8 fa9a 	bl	800085c <__aeabi_ddiv>
 8008328:	4633      	mov	r3, r6
 800832a:	462a      	mov	r2, r5
 800832c:	f7f7 ffb4 	bl	8000298 <__aeabi_dsub>
 8008330:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008334:	4656      	mov	r6, sl
 8008336:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800833a:	f7f8 fc15 	bl	8000b68 <__aeabi_d2iz>
 800833e:	4605      	mov	r5, r0
 8008340:	f7f8 f8f8 	bl	8000534 <__aeabi_i2d>
 8008344:	4602      	mov	r2, r0
 8008346:	460b      	mov	r3, r1
 8008348:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800834c:	f7f7 ffa4 	bl	8000298 <__aeabi_dsub>
 8008350:	3530      	adds	r5, #48	@ 0x30
 8008352:	4602      	mov	r2, r0
 8008354:	460b      	mov	r3, r1
 8008356:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800835a:	f806 5b01 	strb.w	r5, [r6], #1
 800835e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008362:	f7f8 fbc3 	bl	8000aec <__aeabi_dcmplt>
 8008366:	2800      	cmp	r0, #0
 8008368:	d171      	bne.n	800844e <_dtoa_r+0x65e>
 800836a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800836e:	4911      	ldr	r1, [pc, #68]	@ (80083b4 <_dtoa_r+0x5c4>)
 8008370:	2000      	movs	r0, #0
 8008372:	f7f7 ff91 	bl	8000298 <__aeabi_dsub>
 8008376:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800837a:	f7f8 fbb7 	bl	8000aec <__aeabi_dcmplt>
 800837e:	2800      	cmp	r0, #0
 8008380:	f040 8095 	bne.w	80084ae <_dtoa_r+0x6be>
 8008384:	42a6      	cmp	r6, r4
 8008386:	f43f af50 	beq.w	800822a <_dtoa_r+0x43a>
 800838a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800838e:	4b0a      	ldr	r3, [pc, #40]	@ (80083b8 <_dtoa_r+0x5c8>)
 8008390:	2200      	movs	r2, #0
 8008392:	f7f8 f939 	bl	8000608 <__aeabi_dmul>
 8008396:	4b08      	ldr	r3, [pc, #32]	@ (80083b8 <_dtoa_r+0x5c8>)
 8008398:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800839c:	2200      	movs	r2, #0
 800839e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083a2:	f7f8 f931 	bl	8000608 <__aeabi_dmul>
 80083a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80083aa:	e7c4      	b.n	8008336 <_dtoa_r+0x546>
 80083ac:	0800bfe0 	.word	0x0800bfe0
 80083b0:	0800bfb8 	.word	0x0800bfb8
 80083b4:	3ff00000 	.word	0x3ff00000
 80083b8:	40240000 	.word	0x40240000
 80083bc:	401c0000 	.word	0x401c0000
 80083c0:	40140000 	.word	0x40140000
 80083c4:	3fe00000 	.word	0x3fe00000
 80083c8:	4631      	mov	r1, r6
 80083ca:	4628      	mov	r0, r5
 80083cc:	f7f8 f91c 	bl	8000608 <__aeabi_dmul>
 80083d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80083d4:	9415      	str	r4, [sp, #84]	@ 0x54
 80083d6:	4656      	mov	r6, sl
 80083d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083dc:	f7f8 fbc4 	bl	8000b68 <__aeabi_d2iz>
 80083e0:	4605      	mov	r5, r0
 80083e2:	f7f8 f8a7 	bl	8000534 <__aeabi_i2d>
 80083e6:	4602      	mov	r2, r0
 80083e8:	460b      	mov	r3, r1
 80083ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083ee:	f7f7 ff53 	bl	8000298 <__aeabi_dsub>
 80083f2:	3530      	adds	r5, #48	@ 0x30
 80083f4:	f806 5b01 	strb.w	r5, [r6], #1
 80083f8:	4602      	mov	r2, r0
 80083fa:	460b      	mov	r3, r1
 80083fc:	42a6      	cmp	r6, r4
 80083fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008402:	f04f 0200 	mov.w	r2, #0
 8008406:	d124      	bne.n	8008452 <_dtoa_r+0x662>
 8008408:	4bac      	ldr	r3, [pc, #688]	@ (80086bc <_dtoa_r+0x8cc>)
 800840a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800840e:	f7f7 ff45 	bl	800029c <__adddf3>
 8008412:	4602      	mov	r2, r0
 8008414:	460b      	mov	r3, r1
 8008416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800841a:	f7f8 fb85 	bl	8000b28 <__aeabi_dcmpgt>
 800841e:	2800      	cmp	r0, #0
 8008420:	d145      	bne.n	80084ae <_dtoa_r+0x6be>
 8008422:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008426:	49a5      	ldr	r1, [pc, #660]	@ (80086bc <_dtoa_r+0x8cc>)
 8008428:	2000      	movs	r0, #0
 800842a:	f7f7 ff35 	bl	8000298 <__aeabi_dsub>
 800842e:	4602      	mov	r2, r0
 8008430:	460b      	mov	r3, r1
 8008432:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008436:	f7f8 fb59 	bl	8000aec <__aeabi_dcmplt>
 800843a:	2800      	cmp	r0, #0
 800843c:	f43f aef5 	beq.w	800822a <_dtoa_r+0x43a>
 8008440:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008442:	1e73      	subs	r3, r6, #1
 8008444:	9315      	str	r3, [sp, #84]	@ 0x54
 8008446:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800844a:	2b30      	cmp	r3, #48	@ 0x30
 800844c:	d0f8      	beq.n	8008440 <_dtoa_r+0x650>
 800844e:	9f04      	ldr	r7, [sp, #16]
 8008450:	e73e      	b.n	80082d0 <_dtoa_r+0x4e0>
 8008452:	4b9b      	ldr	r3, [pc, #620]	@ (80086c0 <_dtoa_r+0x8d0>)
 8008454:	f7f8 f8d8 	bl	8000608 <__aeabi_dmul>
 8008458:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800845c:	e7bc      	b.n	80083d8 <_dtoa_r+0x5e8>
 800845e:	d10c      	bne.n	800847a <_dtoa_r+0x68a>
 8008460:	4b98      	ldr	r3, [pc, #608]	@ (80086c4 <_dtoa_r+0x8d4>)
 8008462:	2200      	movs	r2, #0
 8008464:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008468:	f7f8 f8ce 	bl	8000608 <__aeabi_dmul>
 800846c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008470:	f7f8 fb50 	bl	8000b14 <__aeabi_dcmpge>
 8008474:	2800      	cmp	r0, #0
 8008476:	f000 8157 	beq.w	8008728 <_dtoa_r+0x938>
 800847a:	2400      	movs	r4, #0
 800847c:	4625      	mov	r5, r4
 800847e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008480:	43db      	mvns	r3, r3
 8008482:	9304      	str	r3, [sp, #16]
 8008484:	4656      	mov	r6, sl
 8008486:	2700      	movs	r7, #0
 8008488:	4621      	mov	r1, r4
 800848a:	4658      	mov	r0, fp
 800848c:	f000 fbb4 	bl	8008bf8 <_Bfree>
 8008490:	2d00      	cmp	r5, #0
 8008492:	d0dc      	beq.n	800844e <_dtoa_r+0x65e>
 8008494:	b12f      	cbz	r7, 80084a2 <_dtoa_r+0x6b2>
 8008496:	42af      	cmp	r7, r5
 8008498:	d003      	beq.n	80084a2 <_dtoa_r+0x6b2>
 800849a:	4639      	mov	r1, r7
 800849c:	4658      	mov	r0, fp
 800849e:	f000 fbab 	bl	8008bf8 <_Bfree>
 80084a2:	4629      	mov	r1, r5
 80084a4:	4658      	mov	r0, fp
 80084a6:	f000 fba7 	bl	8008bf8 <_Bfree>
 80084aa:	e7d0      	b.n	800844e <_dtoa_r+0x65e>
 80084ac:	9704      	str	r7, [sp, #16]
 80084ae:	4633      	mov	r3, r6
 80084b0:	461e      	mov	r6, r3
 80084b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084b6:	2a39      	cmp	r2, #57	@ 0x39
 80084b8:	d107      	bne.n	80084ca <_dtoa_r+0x6da>
 80084ba:	459a      	cmp	sl, r3
 80084bc:	d1f8      	bne.n	80084b0 <_dtoa_r+0x6c0>
 80084be:	9a04      	ldr	r2, [sp, #16]
 80084c0:	3201      	adds	r2, #1
 80084c2:	9204      	str	r2, [sp, #16]
 80084c4:	2230      	movs	r2, #48	@ 0x30
 80084c6:	f88a 2000 	strb.w	r2, [sl]
 80084ca:	781a      	ldrb	r2, [r3, #0]
 80084cc:	3201      	adds	r2, #1
 80084ce:	701a      	strb	r2, [r3, #0]
 80084d0:	e7bd      	b.n	800844e <_dtoa_r+0x65e>
 80084d2:	4b7b      	ldr	r3, [pc, #492]	@ (80086c0 <_dtoa_r+0x8d0>)
 80084d4:	2200      	movs	r2, #0
 80084d6:	f7f8 f897 	bl	8000608 <__aeabi_dmul>
 80084da:	2200      	movs	r2, #0
 80084dc:	2300      	movs	r3, #0
 80084de:	4604      	mov	r4, r0
 80084e0:	460d      	mov	r5, r1
 80084e2:	f7f8 faf9 	bl	8000ad8 <__aeabi_dcmpeq>
 80084e6:	2800      	cmp	r0, #0
 80084e8:	f43f aebb 	beq.w	8008262 <_dtoa_r+0x472>
 80084ec:	e6f0      	b.n	80082d0 <_dtoa_r+0x4e0>
 80084ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80084f0:	2a00      	cmp	r2, #0
 80084f2:	f000 80db 	beq.w	80086ac <_dtoa_r+0x8bc>
 80084f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084f8:	2a01      	cmp	r2, #1
 80084fa:	f300 80bf 	bgt.w	800867c <_dtoa_r+0x88c>
 80084fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008500:	2a00      	cmp	r2, #0
 8008502:	f000 80b7 	beq.w	8008674 <_dtoa_r+0x884>
 8008506:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800850a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800850c:	4646      	mov	r6, r8
 800850e:	9a08      	ldr	r2, [sp, #32]
 8008510:	2101      	movs	r1, #1
 8008512:	441a      	add	r2, r3
 8008514:	4658      	mov	r0, fp
 8008516:	4498      	add	r8, r3
 8008518:	9208      	str	r2, [sp, #32]
 800851a:	f000 fc6b 	bl	8008df4 <__i2b>
 800851e:	4605      	mov	r5, r0
 8008520:	b15e      	cbz	r6, 800853a <_dtoa_r+0x74a>
 8008522:	9b08      	ldr	r3, [sp, #32]
 8008524:	2b00      	cmp	r3, #0
 8008526:	dd08      	ble.n	800853a <_dtoa_r+0x74a>
 8008528:	42b3      	cmp	r3, r6
 800852a:	9a08      	ldr	r2, [sp, #32]
 800852c:	bfa8      	it	ge
 800852e:	4633      	movge	r3, r6
 8008530:	eba8 0803 	sub.w	r8, r8, r3
 8008534:	1af6      	subs	r6, r6, r3
 8008536:	1ad3      	subs	r3, r2, r3
 8008538:	9308      	str	r3, [sp, #32]
 800853a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800853c:	b1f3      	cbz	r3, 800857c <_dtoa_r+0x78c>
 800853e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008540:	2b00      	cmp	r3, #0
 8008542:	f000 80b7 	beq.w	80086b4 <_dtoa_r+0x8c4>
 8008546:	b18c      	cbz	r4, 800856c <_dtoa_r+0x77c>
 8008548:	4629      	mov	r1, r5
 800854a:	4622      	mov	r2, r4
 800854c:	4658      	mov	r0, fp
 800854e:	f000 fd11 	bl	8008f74 <__pow5mult>
 8008552:	464a      	mov	r2, r9
 8008554:	4601      	mov	r1, r0
 8008556:	4605      	mov	r5, r0
 8008558:	4658      	mov	r0, fp
 800855a:	f000 fc61 	bl	8008e20 <__multiply>
 800855e:	4649      	mov	r1, r9
 8008560:	9004      	str	r0, [sp, #16]
 8008562:	4658      	mov	r0, fp
 8008564:	f000 fb48 	bl	8008bf8 <_Bfree>
 8008568:	9b04      	ldr	r3, [sp, #16]
 800856a:	4699      	mov	r9, r3
 800856c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800856e:	1b1a      	subs	r2, r3, r4
 8008570:	d004      	beq.n	800857c <_dtoa_r+0x78c>
 8008572:	4649      	mov	r1, r9
 8008574:	4658      	mov	r0, fp
 8008576:	f000 fcfd 	bl	8008f74 <__pow5mult>
 800857a:	4681      	mov	r9, r0
 800857c:	2101      	movs	r1, #1
 800857e:	4658      	mov	r0, fp
 8008580:	f000 fc38 	bl	8008df4 <__i2b>
 8008584:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008586:	4604      	mov	r4, r0
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 81cf 	beq.w	800892c <_dtoa_r+0xb3c>
 800858e:	461a      	mov	r2, r3
 8008590:	4601      	mov	r1, r0
 8008592:	4658      	mov	r0, fp
 8008594:	f000 fcee 	bl	8008f74 <__pow5mult>
 8008598:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800859a:	2b01      	cmp	r3, #1
 800859c:	4604      	mov	r4, r0
 800859e:	f300 8095 	bgt.w	80086cc <_dtoa_r+0x8dc>
 80085a2:	9b02      	ldr	r3, [sp, #8]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f040 8087 	bne.w	80086b8 <_dtoa_r+0x8c8>
 80085aa:	9b03      	ldr	r3, [sp, #12]
 80085ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f040 8089 	bne.w	80086c8 <_dtoa_r+0x8d8>
 80085b6:	9b03      	ldr	r3, [sp, #12]
 80085b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80085bc:	0d1b      	lsrs	r3, r3, #20
 80085be:	051b      	lsls	r3, r3, #20
 80085c0:	b12b      	cbz	r3, 80085ce <_dtoa_r+0x7de>
 80085c2:	9b08      	ldr	r3, [sp, #32]
 80085c4:	3301      	adds	r3, #1
 80085c6:	9308      	str	r3, [sp, #32]
 80085c8:	f108 0801 	add.w	r8, r8, #1
 80085cc:	2301      	movs	r3, #1
 80085ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80085d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	f000 81b0 	beq.w	8008938 <_dtoa_r+0xb48>
 80085d8:	6923      	ldr	r3, [r4, #16]
 80085da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80085de:	6918      	ldr	r0, [r3, #16]
 80085e0:	f000 fbbc 	bl	8008d5c <__hi0bits>
 80085e4:	f1c0 0020 	rsb	r0, r0, #32
 80085e8:	9b08      	ldr	r3, [sp, #32]
 80085ea:	4418      	add	r0, r3
 80085ec:	f010 001f 	ands.w	r0, r0, #31
 80085f0:	d077      	beq.n	80086e2 <_dtoa_r+0x8f2>
 80085f2:	f1c0 0320 	rsb	r3, r0, #32
 80085f6:	2b04      	cmp	r3, #4
 80085f8:	dd6b      	ble.n	80086d2 <_dtoa_r+0x8e2>
 80085fa:	9b08      	ldr	r3, [sp, #32]
 80085fc:	f1c0 001c 	rsb	r0, r0, #28
 8008600:	4403      	add	r3, r0
 8008602:	4480      	add	r8, r0
 8008604:	4406      	add	r6, r0
 8008606:	9308      	str	r3, [sp, #32]
 8008608:	f1b8 0f00 	cmp.w	r8, #0
 800860c:	dd05      	ble.n	800861a <_dtoa_r+0x82a>
 800860e:	4649      	mov	r1, r9
 8008610:	4642      	mov	r2, r8
 8008612:	4658      	mov	r0, fp
 8008614:	f000 fd08 	bl	8009028 <__lshift>
 8008618:	4681      	mov	r9, r0
 800861a:	9b08      	ldr	r3, [sp, #32]
 800861c:	2b00      	cmp	r3, #0
 800861e:	dd05      	ble.n	800862c <_dtoa_r+0x83c>
 8008620:	4621      	mov	r1, r4
 8008622:	461a      	mov	r2, r3
 8008624:	4658      	mov	r0, fp
 8008626:	f000 fcff 	bl	8009028 <__lshift>
 800862a:	4604      	mov	r4, r0
 800862c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800862e:	2b00      	cmp	r3, #0
 8008630:	d059      	beq.n	80086e6 <_dtoa_r+0x8f6>
 8008632:	4621      	mov	r1, r4
 8008634:	4648      	mov	r0, r9
 8008636:	f000 fd63 	bl	8009100 <__mcmp>
 800863a:	2800      	cmp	r0, #0
 800863c:	da53      	bge.n	80086e6 <_dtoa_r+0x8f6>
 800863e:	1e7b      	subs	r3, r7, #1
 8008640:	9304      	str	r3, [sp, #16]
 8008642:	4649      	mov	r1, r9
 8008644:	2300      	movs	r3, #0
 8008646:	220a      	movs	r2, #10
 8008648:	4658      	mov	r0, fp
 800864a:	f000 faf7 	bl	8008c3c <__multadd>
 800864e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008650:	4681      	mov	r9, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	f000 8172 	beq.w	800893c <_dtoa_r+0xb4c>
 8008658:	2300      	movs	r3, #0
 800865a:	4629      	mov	r1, r5
 800865c:	220a      	movs	r2, #10
 800865e:	4658      	mov	r0, fp
 8008660:	f000 faec 	bl	8008c3c <__multadd>
 8008664:	9b00      	ldr	r3, [sp, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	4605      	mov	r5, r0
 800866a:	dc67      	bgt.n	800873c <_dtoa_r+0x94c>
 800866c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800866e:	2b02      	cmp	r3, #2
 8008670:	dc41      	bgt.n	80086f6 <_dtoa_r+0x906>
 8008672:	e063      	b.n	800873c <_dtoa_r+0x94c>
 8008674:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008676:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800867a:	e746      	b.n	800850a <_dtoa_r+0x71a>
 800867c:	9b07      	ldr	r3, [sp, #28]
 800867e:	1e5c      	subs	r4, r3, #1
 8008680:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008682:	42a3      	cmp	r3, r4
 8008684:	bfbf      	itttt	lt
 8008686:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008688:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800868a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800868c:	1ae3      	sublt	r3, r4, r3
 800868e:	bfb4      	ite	lt
 8008690:	18d2      	addlt	r2, r2, r3
 8008692:	1b1c      	subge	r4, r3, r4
 8008694:	9b07      	ldr	r3, [sp, #28]
 8008696:	bfbc      	itt	lt
 8008698:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800869a:	2400      	movlt	r4, #0
 800869c:	2b00      	cmp	r3, #0
 800869e:	bfb5      	itete	lt
 80086a0:	eba8 0603 	sublt.w	r6, r8, r3
 80086a4:	9b07      	ldrge	r3, [sp, #28]
 80086a6:	2300      	movlt	r3, #0
 80086a8:	4646      	movge	r6, r8
 80086aa:	e730      	b.n	800850e <_dtoa_r+0x71e>
 80086ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80086ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80086b0:	4646      	mov	r6, r8
 80086b2:	e735      	b.n	8008520 <_dtoa_r+0x730>
 80086b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80086b6:	e75c      	b.n	8008572 <_dtoa_r+0x782>
 80086b8:	2300      	movs	r3, #0
 80086ba:	e788      	b.n	80085ce <_dtoa_r+0x7de>
 80086bc:	3fe00000 	.word	0x3fe00000
 80086c0:	40240000 	.word	0x40240000
 80086c4:	40140000 	.word	0x40140000
 80086c8:	9b02      	ldr	r3, [sp, #8]
 80086ca:	e780      	b.n	80085ce <_dtoa_r+0x7de>
 80086cc:	2300      	movs	r3, #0
 80086ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80086d0:	e782      	b.n	80085d8 <_dtoa_r+0x7e8>
 80086d2:	d099      	beq.n	8008608 <_dtoa_r+0x818>
 80086d4:	9a08      	ldr	r2, [sp, #32]
 80086d6:	331c      	adds	r3, #28
 80086d8:	441a      	add	r2, r3
 80086da:	4498      	add	r8, r3
 80086dc:	441e      	add	r6, r3
 80086de:	9208      	str	r2, [sp, #32]
 80086e0:	e792      	b.n	8008608 <_dtoa_r+0x818>
 80086e2:	4603      	mov	r3, r0
 80086e4:	e7f6      	b.n	80086d4 <_dtoa_r+0x8e4>
 80086e6:	9b07      	ldr	r3, [sp, #28]
 80086e8:	9704      	str	r7, [sp, #16]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	dc20      	bgt.n	8008730 <_dtoa_r+0x940>
 80086ee:	9300      	str	r3, [sp, #0]
 80086f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	dd1e      	ble.n	8008734 <_dtoa_r+0x944>
 80086f6:	9b00      	ldr	r3, [sp, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f47f aec0 	bne.w	800847e <_dtoa_r+0x68e>
 80086fe:	4621      	mov	r1, r4
 8008700:	2205      	movs	r2, #5
 8008702:	4658      	mov	r0, fp
 8008704:	f000 fa9a 	bl	8008c3c <__multadd>
 8008708:	4601      	mov	r1, r0
 800870a:	4604      	mov	r4, r0
 800870c:	4648      	mov	r0, r9
 800870e:	f000 fcf7 	bl	8009100 <__mcmp>
 8008712:	2800      	cmp	r0, #0
 8008714:	f77f aeb3 	ble.w	800847e <_dtoa_r+0x68e>
 8008718:	4656      	mov	r6, sl
 800871a:	2331      	movs	r3, #49	@ 0x31
 800871c:	f806 3b01 	strb.w	r3, [r6], #1
 8008720:	9b04      	ldr	r3, [sp, #16]
 8008722:	3301      	adds	r3, #1
 8008724:	9304      	str	r3, [sp, #16]
 8008726:	e6ae      	b.n	8008486 <_dtoa_r+0x696>
 8008728:	9c07      	ldr	r4, [sp, #28]
 800872a:	9704      	str	r7, [sp, #16]
 800872c:	4625      	mov	r5, r4
 800872e:	e7f3      	b.n	8008718 <_dtoa_r+0x928>
 8008730:	9b07      	ldr	r3, [sp, #28]
 8008732:	9300      	str	r3, [sp, #0]
 8008734:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008736:	2b00      	cmp	r3, #0
 8008738:	f000 8104 	beq.w	8008944 <_dtoa_r+0xb54>
 800873c:	2e00      	cmp	r6, #0
 800873e:	dd05      	ble.n	800874c <_dtoa_r+0x95c>
 8008740:	4629      	mov	r1, r5
 8008742:	4632      	mov	r2, r6
 8008744:	4658      	mov	r0, fp
 8008746:	f000 fc6f 	bl	8009028 <__lshift>
 800874a:	4605      	mov	r5, r0
 800874c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800874e:	2b00      	cmp	r3, #0
 8008750:	d05a      	beq.n	8008808 <_dtoa_r+0xa18>
 8008752:	6869      	ldr	r1, [r5, #4]
 8008754:	4658      	mov	r0, fp
 8008756:	f000 fa0f 	bl	8008b78 <_Balloc>
 800875a:	4606      	mov	r6, r0
 800875c:	b928      	cbnz	r0, 800876a <_dtoa_r+0x97a>
 800875e:	4b84      	ldr	r3, [pc, #528]	@ (8008970 <_dtoa_r+0xb80>)
 8008760:	4602      	mov	r2, r0
 8008762:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008766:	f7ff bb5a 	b.w	8007e1e <_dtoa_r+0x2e>
 800876a:	692a      	ldr	r2, [r5, #16]
 800876c:	3202      	adds	r2, #2
 800876e:	0092      	lsls	r2, r2, #2
 8008770:	f105 010c 	add.w	r1, r5, #12
 8008774:	300c      	adds	r0, #12
 8008776:	f002 fb03 	bl	800ad80 <memcpy>
 800877a:	2201      	movs	r2, #1
 800877c:	4631      	mov	r1, r6
 800877e:	4658      	mov	r0, fp
 8008780:	f000 fc52 	bl	8009028 <__lshift>
 8008784:	f10a 0301 	add.w	r3, sl, #1
 8008788:	9307      	str	r3, [sp, #28]
 800878a:	9b00      	ldr	r3, [sp, #0]
 800878c:	4453      	add	r3, sl
 800878e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008790:	9b02      	ldr	r3, [sp, #8]
 8008792:	f003 0301 	and.w	r3, r3, #1
 8008796:	462f      	mov	r7, r5
 8008798:	930a      	str	r3, [sp, #40]	@ 0x28
 800879a:	4605      	mov	r5, r0
 800879c:	9b07      	ldr	r3, [sp, #28]
 800879e:	4621      	mov	r1, r4
 80087a0:	3b01      	subs	r3, #1
 80087a2:	4648      	mov	r0, r9
 80087a4:	9300      	str	r3, [sp, #0]
 80087a6:	f7ff fa99 	bl	8007cdc <quorem>
 80087aa:	4639      	mov	r1, r7
 80087ac:	9002      	str	r0, [sp, #8]
 80087ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80087b2:	4648      	mov	r0, r9
 80087b4:	f000 fca4 	bl	8009100 <__mcmp>
 80087b8:	462a      	mov	r2, r5
 80087ba:	9008      	str	r0, [sp, #32]
 80087bc:	4621      	mov	r1, r4
 80087be:	4658      	mov	r0, fp
 80087c0:	f000 fcba 	bl	8009138 <__mdiff>
 80087c4:	68c2      	ldr	r2, [r0, #12]
 80087c6:	4606      	mov	r6, r0
 80087c8:	bb02      	cbnz	r2, 800880c <_dtoa_r+0xa1c>
 80087ca:	4601      	mov	r1, r0
 80087cc:	4648      	mov	r0, r9
 80087ce:	f000 fc97 	bl	8009100 <__mcmp>
 80087d2:	4602      	mov	r2, r0
 80087d4:	4631      	mov	r1, r6
 80087d6:	4658      	mov	r0, fp
 80087d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80087da:	f000 fa0d 	bl	8008bf8 <_Bfree>
 80087de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087e2:	9e07      	ldr	r6, [sp, #28]
 80087e4:	ea43 0102 	orr.w	r1, r3, r2
 80087e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087ea:	4319      	orrs	r1, r3
 80087ec:	d110      	bne.n	8008810 <_dtoa_r+0xa20>
 80087ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80087f2:	d029      	beq.n	8008848 <_dtoa_r+0xa58>
 80087f4:	9b08      	ldr	r3, [sp, #32]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	dd02      	ble.n	8008800 <_dtoa_r+0xa10>
 80087fa:	9b02      	ldr	r3, [sp, #8]
 80087fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008800:	9b00      	ldr	r3, [sp, #0]
 8008802:	f883 8000 	strb.w	r8, [r3]
 8008806:	e63f      	b.n	8008488 <_dtoa_r+0x698>
 8008808:	4628      	mov	r0, r5
 800880a:	e7bb      	b.n	8008784 <_dtoa_r+0x994>
 800880c:	2201      	movs	r2, #1
 800880e:	e7e1      	b.n	80087d4 <_dtoa_r+0x9e4>
 8008810:	9b08      	ldr	r3, [sp, #32]
 8008812:	2b00      	cmp	r3, #0
 8008814:	db04      	blt.n	8008820 <_dtoa_r+0xa30>
 8008816:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008818:	430b      	orrs	r3, r1
 800881a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800881c:	430b      	orrs	r3, r1
 800881e:	d120      	bne.n	8008862 <_dtoa_r+0xa72>
 8008820:	2a00      	cmp	r2, #0
 8008822:	dded      	ble.n	8008800 <_dtoa_r+0xa10>
 8008824:	4649      	mov	r1, r9
 8008826:	2201      	movs	r2, #1
 8008828:	4658      	mov	r0, fp
 800882a:	f000 fbfd 	bl	8009028 <__lshift>
 800882e:	4621      	mov	r1, r4
 8008830:	4681      	mov	r9, r0
 8008832:	f000 fc65 	bl	8009100 <__mcmp>
 8008836:	2800      	cmp	r0, #0
 8008838:	dc03      	bgt.n	8008842 <_dtoa_r+0xa52>
 800883a:	d1e1      	bne.n	8008800 <_dtoa_r+0xa10>
 800883c:	f018 0f01 	tst.w	r8, #1
 8008840:	d0de      	beq.n	8008800 <_dtoa_r+0xa10>
 8008842:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008846:	d1d8      	bne.n	80087fa <_dtoa_r+0xa0a>
 8008848:	9a00      	ldr	r2, [sp, #0]
 800884a:	2339      	movs	r3, #57	@ 0x39
 800884c:	7013      	strb	r3, [r2, #0]
 800884e:	4633      	mov	r3, r6
 8008850:	461e      	mov	r6, r3
 8008852:	3b01      	subs	r3, #1
 8008854:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008858:	2a39      	cmp	r2, #57	@ 0x39
 800885a:	d052      	beq.n	8008902 <_dtoa_r+0xb12>
 800885c:	3201      	adds	r2, #1
 800885e:	701a      	strb	r2, [r3, #0]
 8008860:	e612      	b.n	8008488 <_dtoa_r+0x698>
 8008862:	2a00      	cmp	r2, #0
 8008864:	dd07      	ble.n	8008876 <_dtoa_r+0xa86>
 8008866:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800886a:	d0ed      	beq.n	8008848 <_dtoa_r+0xa58>
 800886c:	9a00      	ldr	r2, [sp, #0]
 800886e:	f108 0301 	add.w	r3, r8, #1
 8008872:	7013      	strb	r3, [r2, #0]
 8008874:	e608      	b.n	8008488 <_dtoa_r+0x698>
 8008876:	9b07      	ldr	r3, [sp, #28]
 8008878:	9a07      	ldr	r2, [sp, #28]
 800887a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800887e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008880:	4293      	cmp	r3, r2
 8008882:	d028      	beq.n	80088d6 <_dtoa_r+0xae6>
 8008884:	4649      	mov	r1, r9
 8008886:	2300      	movs	r3, #0
 8008888:	220a      	movs	r2, #10
 800888a:	4658      	mov	r0, fp
 800888c:	f000 f9d6 	bl	8008c3c <__multadd>
 8008890:	42af      	cmp	r7, r5
 8008892:	4681      	mov	r9, r0
 8008894:	f04f 0300 	mov.w	r3, #0
 8008898:	f04f 020a 	mov.w	r2, #10
 800889c:	4639      	mov	r1, r7
 800889e:	4658      	mov	r0, fp
 80088a0:	d107      	bne.n	80088b2 <_dtoa_r+0xac2>
 80088a2:	f000 f9cb 	bl	8008c3c <__multadd>
 80088a6:	4607      	mov	r7, r0
 80088a8:	4605      	mov	r5, r0
 80088aa:	9b07      	ldr	r3, [sp, #28]
 80088ac:	3301      	adds	r3, #1
 80088ae:	9307      	str	r3, [sp, #28]
 80088b0:	e774      	b.n	800879c <_dtoa_r+0x9ac>
 80088b2:	f000 f9c3 	bl	8008c3c <__multadd>
 80088b6:	4629      	mov	r1, r5
 80088b8:	4607      	mov	r7, r0
 80088ba:	2300      	movs	r3, #0
 80088bc:	220a      	movs	r2, #10
 80088be:	4658      	mov	r0, fp
 80088c0:	f000 f9bc 	bl	8008c3c <__multadd>
 80088c4:	4605      	mov	r5, r0
 80088c6:	e7f0      	b.n	80088aa <_dtoa_r+0xaba>
 80088c8:	9b00      	ldr	r3, [sp, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	bfcc      	ite	gt
 80088ce:	461e      	movgt	r6, r3
 80088d0:	2601      	movle	r6, #1
 80088d2:	4456      	add	r6, sl
 80088d4:	2700      	movs	r7, #0
 80088d6:	4649      	mov	r1, r9
 80088d8:	2201      	movs	r2, #1
 80088da:	4658      	mov	r0, fp
 80088dc:	f000 fba4 	bl	8009028 <__lshift>
 80088e0:	4621      	mov	r1, r4
 80088e2:	4681      	mov	r9, r0
 80088e4:	f000 fc0c 	bl	8009100 <__mcmp>
 80088e8:	2800      	cmp	r0, #0
 80088ea:	dcb0      	bgt.n	800884e <_dtoa_r+0xa5e>
 80088ec:	d102      	bne.n	80088f4 <_dtoa_r+0xb04>
 80088ee:	f018 0f01 	tst.w	r8, #1
 80088f2:	d1ac      	bne.n	800884e <_dtoa_r+0xa5e>
 80088f4:	4633      	mov	r3, r6
 80088f6:	461e      	mov	r6, r3
 80088f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088fc:	2a30      	cmp	r2, #48	@ 0x30
 80088fe:	d0fa      	beq.n	80088f6 <_dtoa_r+0xb06>
 8008900:	e5c2      	b.n	8008488 <_dtoa_r+0x698>
 8008902:	459a      	cmp	sl, r3
 8008904:	d1a4      	bne.n	8008850 <_dtoa_r+0xa60>
 8008906:	9b04      	ldr	r3, [sp, #16]
 8008908:	3301      	adds	r3, #1
 800890a:	9304      	str	r3, [sp, #16]
 800890c:	2331      	movs	r3, #49	@ 0x31
 800890e:	f88a 3000 	strb.w	r3, [sl]
 8008912:	e5b9      	b.n	8008488 <_dtoa_r+0x698>
 8008914:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008916:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008974 <_dtoa_r+0xb84>
 800891a:	b11b      	cbz	r3, 8008924 <_dtoa_r+0xb34>
 800891c:	f10a 0308 	add.w	r3, sl, #8
 8008920:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008922:	6013      	str	r3, [r2, #0]
 8008924:	4650      	mov	r0, sl
 8008926:	b019      	add	sp, #100	@ 0x64
 8008928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800892c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800892e:	2b01      	cmp	r3, #1
 8008930:	f77f ae37 	ble.w	80085a2 <_dtoa_r+0x7b2>
 8008934:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008936:	930a      	str	r3, [sp, #40]	@ 0x28
 8008938:	2001      	movs	r0, #1
 800893a:	e655      	b.n	80085e8 <_dtoa_r+0x7f8>
 800893c:	9b00      	ldr	r3, [sp, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	f77f aed6 	ble.w	80086f0 <_dtoa_r+0x900>
 8008944:	4656      	mov	r6, sl
 8008946:	4621      	mov	r1, r4
 8008948:	4648      	mov	r0, r9
 800894a:	f7ff f9c7 	bl	8007cdc <quorem>
 800894e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008952:	f806 8b01 	strb.w	r8, [r6], #1
 8008956:	9b00      	ldr	r3, [sp, #0]
 8008958:	eba6 020a 	sub.w	r2, r6, sl
 800895c:	4293      	cmp	r3, r2
 800895e:	ddb3      	ble.n	80088c8 <_dtoa_r+0xad8>
 8008960:	4649      	mov	r1, r9
 8008962:	2300      	movs	r3, #0
 8008964:	220a      	movs	r2, #10
 8008966:	4658      	mov	r0, fp
 8008968:	f000 f968 	bl	8008c3c <__multadd>
 800896c:	4681      	mov	r9, r0
 800896e:	e7ea      	b.n	8008946 <_dtoa_r+0xb56>
 8008970:	0800bf3f 	.word	0x0800bf3f
 8008974:	0800bec3 	.word	0x0800bec3

08008978 <_free_r>:
 8008978:	b538      	push	{r3, r4, r5, lr}
 800897a:	4605      	mov	r5, r0
 800897c:	2900      	cmp	r1, #0
 800897e:	d041      	beq.n	8008a04 <_free_r+0x8c>
 8008980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008984:	1f0c      	subs	r4, r1, #4
 8008986:	2b00      	cmp	r3, #0
 8008988:	bfb8      	it	lt
 800898a:	18e4      	addlt	r4, r4, r3
 800898c:	f000 f8e8 	bl	8008b60 <__malloc_lock>
 8008990:	4a1d      	ldr	r2, [pc, #116]	@ (8008a08 <_free_r+0x90>)
 8008992:	6813      	ldr	r3, [r2, #0]
 8008994:	b933      	cbnz	r3, 80089a4 <_free_r+0x2c>
 8008996:	6063      	str	r3, [r4, #4]
 8008998:	6014      	str	r4, [r2, #0]
 800899a:	4628      	mov	r0, r5
 800899c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089a0:	f000 b8e4 	b.w	8008b6c <__malloc_unlock>
 80089a4:	42a3      	cmp	r3, r4
 80089a6:	d908      	bls.n	80089ba <_free_r+0x42>
 80089a8:	6820      	ldr	r0, [r4, #0]
 80089aa:	1821      	adds	r1, r4, r0
 80089ac:	428b      	cmp	r3, r1
 80089ae:	bf01      	itttt	eq
 80089b0:	6819      	ldreq	r1, [r3, #0]
 80089b2:	685b      	ldreq	r3, [r3, #4]
 80089b4:	1809      	addeq	r1, r1, r0
 80089b6:	6021      	streq	r1, [r4, #0]
 80089b8:	e7ed      	b.n	8008996 <_free_r+0x1e>
 80089ba:	461a      	mov	r2, r3
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	b10b      	cbz	r3, 80089c4 <_free_r+0x4c>
 80089c0:	42a3      	cmp	r3, r4
 80089c2:	d9fa      	bls.n	80089ba <_free_r+0x42>
 80089c4:	6811      	ldr	r1, [r2, #0]
 80089c6:	1850      	adds	r0, r2, r1
 80089c8:	42a0      	cmp	r0, r4
 80089ca:	d10b      	bne.n	80089e4 <_free_r+0x6c>
 80089cc:	6820      	ldr	r0, [r4, #0]
 80089ce:	4401      	add	r1, r0
 80089d0:	1850      	adds	r0, r2, r1
 80089d2:	4283      	cmp	r3, r0
 80089d4:	6011      	str	r1, [r2, #0]
 80089d6:	d1e0      	bne.n	800899a <_free_r+0x22>
 80089d8:	6818      	ldr	r0, [r3, #0]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	6053      	str	r3, [r2, #4]
 80089de:	4408      	add	r0, r1
 80089e0:	6010      	str	r0, [r2, #0]
 80089e2:	e7da      	b.n	800899a <_free_r+0x22>
 80089e4:	d902      	bls.n	80089ec <_free_r+0x74>
 80089e6:	230c      	movs	r3, #12
 80089e8:	602b      	str	r3, [r5, #0]
 80089ea:	e7d6      	b.n	800899a <_free_r+0x22>
 80089ec:	6820      	ldr	r0, [r4, #0]
 80089ee:	1821      	adds	r1, r4, r0
 80089f0:	428b      	cmp	r3, r1
 80089f2:	bf04      	itt	eq
 80089f4:	6819      	ldreq	r1, [r3, #0]
 80089f6:	685b      	ldreq	r3, [r3, #4]
 80089f8:	6063      	str	r3, [r4, #4]
 80089fa:	bf04      	itt	eq
 80089fc:	1809      	addeq	r1, r1, r0
 80089fe:	6021      	streq	r1, [r4, #0]
 8008a00:	6054      	str	r4, [r2, #4]
 8008a02:	e7ca      	b.n	800899a <_free_r+0x22>
 8008a04:	bd38      	pop	{r3, r4, r5, pc}
 8008a06:	bf00      	nop
 8008a08:	20000688 	.word	0x20000688

08008a0c <malloc>:
 8008a0c:	4b02      	ldr	r3, [pc, #8]	@ (8008a18 <malloc+0xc>)
 8008a0e:	4601      	mov	r1, r0
 8008a10:	6818      	ldr	r0, [r3, #0]
 8008a12:	f000 b825 	b.w	8008a60 <_malloc_r>
 8008a16:	bf00      	nop
 8008a18:	2000009c 	.word	0x2000009c

08008a1c <sbrk_aligned>:
 8008a1c:	b570      	push	{r4, r5, r6, lr}
 8008a1e:	4e0f      	ldr	r6, [pc, #60]	@ (8008a5c <sbrk_aligned+0x40>)
 8008a20:	460c      	mov	r4, r1
 8008a22:	6831      	ldr	r1, [r6, #0]
 8008a24:	4605      	mov	r5, r0
 8008a26:	b911      	cbnz	r1, 8008a2e <sbrk_aligned+0x12>
 8008a28:	f002 f99a 	bl	800ad60 <_sbrk_r>
 8008a2c:	6030      	str	r0, [r6, #0]
 8008a2e:	4621      	mov	r1, r4
 8008a30:	4628      	mov	r0, r5
 8008a32:	f002 f995 	bl	800ad60 <_sbrk_r>
 8008a36:	1c43      	adds	r3, r0, #1
 8008a38:	d103      	bne.n	8008a42 <sbrk_aligned+0x26>
 8008a3a:	f04f 34ff 	mov.w	r4, #4294967295
 8008a3e:	4620      	mov	r0, r4
 8008a40:	bd70      	pop	{r4, r5, r6, pc}
 8008a42:	1cc4      	adds	r4, r0, #3
 8008a44:	f024 0403 	bic.w	r4, r4, #3
 8008a48:	42a0      	cmp	r0, r4
 8008a4a:	d0f8      	beq.n	8008a3e <sbrk_aligned+0x22>
 8008a4c:	1a21      	subs	r1, r4, r0
 8008a4e:	4628      	mov	r0, r5
 8008a50:	f002 f986 	bl	800ad60 <_sbrk_r>
 8008a54:	3001      	adds	r0, #1
 8008a56:	d1f2      	bne.n	8008a3e <sbrk_aligned+0x22>
 8008a58:	e7ef      	b.n	8008a3a <sbrk_aligned+0x1e>
 8008a5a:	bf00      	nop
 8008a5c:	20000684 	.word	0x20000684

08008a60 <_malloc_r>:
 8008a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a64:	1ccd      	adds	r5, r1, #3
 8008a66:	f025 0503 	bic.w	r5, r5, #3
 8008a6a:	3508      	adds	r5, #8
 8008a6c:	2d0c      	cmp	r5, #12
 8008a6e:	bf38      	it	cc
 8008a70:	250c      	movcc	r5, #12
 8008a72:	2d00      	cmp	r5, #0
 8008a74:	4606      	mov	r6, r0
 8008a76:	db01      	blt.n	8008a7c <_malloc_r+0x1c>
 8008a78:	42a9      	cmp	r1, r5
 8008a7a:	d904      	bls.n	8008a86 <_malloc_r+0x26>
 8008a7c:	230c      	movs	r3, #12
 8008a7e:	6033      	str	r3, [r6, #0]
 8008a80:	2000      	movs	r0, #0
 8008a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b5c <_malloc_r+0xfc>
 8008a8a:	f000 f869 	bl	8008b60 <__malloc_lock>
 8008a8e:	f8d8 3000 	ldr.w	r3, [r8]
 8008a92:	461c      	mov	r4, r3
 8008a94:	bb44      	cbnz	r4, 8008ae8 <_malloc_r+0x88>
 8008a96:	4629      	mov	r1, r5
 8008a98:	4630      	mov	r0, r6
 8008a9a:	f7ff ffbf 	bl	8008a1c <sbrk_aligned>
 8008a9e:	1c43      	adds	r3, r0, #1
 8008aa0:	4604      	mov	r4, r0
 8008aa2:	d158      	bne.n	8008b56 <_malloc_r+0xf6>
 8008aa4:	f8d8 4000 	ldr.w	r4, [r8]
 8008aa8:	4627      	mov	r7, r4
 8008aaa:	2f00      	cmp	r7, #0
 8008aac:	d143      	bne.n	8008b36 <_malloc_r+0xd6>
 8008aae:	2c00      	cmp	r4, #0
 8008ab0:	d04b      	beq.n	8008b4a <_malloc_r+0xea>
 8008ab2:	6823      	ldr	r3, [r4, #0]
 8008ab4:	4639      	mov	r1, r7
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	eb04 0903 	add.w	r9, r4, r3
 8008abc:	f002 f950 	bl	800ad60 <_sbrk_r>
 8008ac0:	4581      	cmp	r9, r0
 8008ac2:	d142      	bne.n	8008b4a <_malloc_r+0xea>
 8008ac4:	6821      	ldr	r1, [r4, #0]
 8008ac6:	1a6d      	subs	r5, r5, r1
 8008ac8:	4629      	mov	r1, r5
 8008aca:	4630      	mov	r0, r6
 8008acc:	f7ff ffa6 	bl	8008a1c <sbrk_aligned>
 8008ad0:	3001      	adds	r0, #1
 8008ad2:	d03a      	beq.n	8008b4a <_malloc_r+0xea>
 8008ad4:	6823      	ldr	r3, [r4, #0]
 8008ad6:	442b      	add	r3, r5
 8008ad8:	6023      	str	r3, [r4, #0]
 8008ada:	f8d8 3000 	ldr.w	r3, [r8]
 8008ade:	685a      	ldr	r2, [r3, #4]
 8008ae0:	bb62      	cbnz	r2, 8008b3c <_malloc_r+0xdc>
 8008ae2:	f8c8 7000 	str.w	r7, [r8]
 8008ae6:	e00f      	b.n	8008b08 <_malloc_r+0xa8>
 8008ae8:	6822      	ldr	r2, [r4, #0]
 8008aea:	1b52      	subs	r2, r2, r5
 8008aec:	d420      	bmi.n	8008b30 <_malloc_r+0xd0>
 8008aee:	2a0b      	cmp	r2, #11
 8008af0:	d917      	bls.n	8008b22 <_malloc_r+0xc2>
 8008af2:	1961      	adds	r1, r4, r5
 8008af4:	42a3      	cmp	r3, r4
 8008af6:	6025      	str	r5, [r4, #0]
 8008af8:	bf18      	it	ne
 8008afa:	6059      	strne	r1, [r3, #4]
 8008afc:	6863      	ldr	r3, [r4, #4]
 8008afe:	bf08      	it	eq
 8008b00:	f8c8 1000 	streq.w	r1, [r8]
 8008b04:	5162      	str	r2, [r4, r5]
 8008b06:	604b      	str	r3, [r1, #4]
 8008b08:	4630      	mov	r0, r6
 8008b0a:	f000 f82f 	bl	8008b6c <__malloc_unlock>
 8008b0e:	f104 000b 	add.w	r0, r4, #11
 8008b12:	1d23      	adds	r3, r4, #4
 8008b14:	f020 0007 	bic.w	r0, r0, #7
 8008b18:	1ac2      	subs	r2, r0, r3
 8008b1a:	bf1c      	itt	ne
 8008b1c:	1a1b      	subne	r3, r3, r0
 8008b1e:	50a3      	strne	r3, [r4, r2]
 8008b20:	e7af      	b.n	8008a82 <_malloc_r+0x22>
 8008b22:	6862      	ldr	r2, [r4, #4]
 8008b24:	42a3      	cmp	r3, r4
 8008b26:	bf0c      	ite	eq
 8008b28:	f8c8 2000 	streq.w	r2, [r8]
 8008b2c:	605a      	strne	r2, [r3, #4]
 8008b2e:	e7eb      	b.n	8008b08 <_malloc_r+0xa8>
 8008b30:	4623      	mov	r3, r4
 8008b32:	6864      	ldr	r4, [r4, #4]
 8008b34:	e7ae      	b.n	8008a94 <_malloc_r+0x34>
 8008b36:	463c      	mov	r4, r7
 8008b38:	687f      	ldr	r7, [r7, #4]
 8008b3a:	e7b6      	b.n	8008aaa <_malloc_r+0x4a>
 8008b3c:	461a      	mov	r2, r3
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	42a3      	cmp	r3, r4
 8008b42:	d1fb      	bne.n	8008b3c <_malloc_r+0xdc>
 8008b44:	2300      	movs	r3, #0
 8008b46:	6053      	str	r3, [r2, #4]
 8008b48:	e7de      	b.n	8008b08 <_malloc_r+0xa8>
 8008b4a:	230c      	movs	r3, #12
 8008b4c:	6033      	str	r3, [r6, #0]
 8008b4e:	4630      	mov	r0, r6
 8008b50:	f000 f80c 	bl	8008b6c <__malloc_unlock>
 8008b54:	e794      	b.n	8008a80 <_malloc_r+0x20>
 8008b56:	6005      	str	r5, [r0, #0]
 8008b58:	e7d6      	b.n	8008b08 <_malloc_r+0xa8>
 8008b5a:	bf00      	nop
 8008b5c:	20000688 	.word	0x20000688

08008b60 <__malloc_lock>:
 8008b60:	4801      	ldr	r0, [pc, #4]	@ (8008b68 <__malloc_lock+0x8>)
 8008b62:	f7ff b8b2 	b.w	8007cca <__retarget_lock_acquire_recursive>
 8008b66:	bf00      	nop
 8008b68:	20000680 	.word	0x20000680

08008b6c <__malloc_unlock>:
 8008b6c:	4801      	ldr	r0, [pc, #4]	@ (8008b74 <__malloc_unlock+0x8>)
 8008b6e:	f7ff b8ad 	b.w	8007ccc <__retarget_lock_release_recursive>
 8008b72:	bf00      	nop
 8008b74:	20000680 	.word	0x20000680

08008b78 <_Balloc>:
 8008b78:	b570      	push	{r4, r5, r6, lr}
 8008b7a:	69c6      	ldr	r6, [r0, #28]
 8008b7c:	4604      	mov	r4, r0
 8008b7e:	460d      	mov	r5, r1
 8008b80:	b976      	cbnz	r6, 8008ba0 <_Balloc+0x28>
 8008b82:	2010      	movs	r0, #16
 8008b84:	f7ff ff42 	bl	8008a0c <malloc>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	61e0      	str	r0, [r4, #28]
 8008b8c:	b920      	cbnz	r0, 8008b98 <_Balloc+0x20>
 8008b8e:	4b18      	ldr	r3, [pc, #96]	@ (8008bf0 <_Balloc+0x78>)
 8008b90:	4818      	ldr	r0, [pc, #96]	@ (8008bf4 <_Balloc+0x7c>)
 8008b92:	216b      	movs	r1, #107	@ 0x6b
 8008b94:	f002 f90c 	bl	800adb0 <__assert_func>
 8008b98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008b9c:	6006      	str	r6, [r0, #0]
 8008b9e:	60c6      	str	r6, [r0, #12]
 8008ba0:	69e6      	ldr	r6, [r4, #28]
 8008ba2:	68f3      	ldr	r3, [r6, #12]
 8008ba4:	b183      	cbz	r3, 8008bc8 <_Balloc+0x50>
 8008ba6:	69e3      	ldr	r3, [r4, #28]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008bae:	b9b8      	cbnz	r0, 8008be0 <_Balloc+0x68>
 8008bb0:	2101      	movs	r1, #1
 8008bb2:	fa01 f605 	lsl.w	r6, r1, r5
 8008bb6:	1d72      	adds	r2, r6, #5
 8008bb8:	0092      	lsls	r2, r2, #2
 8008bba:	4620      	mov	r0, r4
 8008bbc:	f002 f916 	bl	800adec <_calloc_r>
 8008bc0:	b160      	cbz	r0, 8008bdc <_Balloc+0x64>
 8008bc2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008bc6:	e00e      	b.n	8008be6 <_Balloc+0x6e>
 8008bc8:	2221      	movs	r2, #33	@ 0x21
 8008bca:	2104      	movs	r1, #4
 8008bcc:	4620      	mov	r0, r4
 8008bce:	f002 f90d 	bl	800adec <_calloc_r>
 8008bd2:	69e3      	ldr	r3, [r4, #28]
 8008bd4:	60f0      	str	r0, [r6, #12]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d1e4      	bne.n	8008ba6 <_Balloc+0x2e>
 8008bdc:	2000      	movs	r0, #0
 8008bde:	bd70      	pop	{r4, r5, r6, pc}
 8008be0:	6802      	ldr	r2, [r0, #0]
 8008be2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008be6:	2300      	movs	r3, #0
 8008be8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008bec:	e7f7      	b.n	8008bde <_Balloc+0x66>
 8008bee:	bf00      	nop
 8008bf0:	0800bed0 	.word	0x0800bed0
 8008bf4:	0800bf50 	.word	0x0800bf50

08008bf8 <_Bfree>:
 8008bf8:	b570      	push	{r4, r5, r6, lr}
 8008bfa:	69c6      	ldr	r6, [r0, #28]
 8008bfc:	4605      	mov	r5, r0
 8008bfe:	460c      	mov	r4, r1
 8008c00:	b976      	cbnz	r6, 8008c20 <_Bfree+0x28>
 8008c02:	2010      	movs	r0, #16
 8008c04:	f7ff ff02 	bl	8008a0c <malloc>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	61e8      	str	r0, [r5, #28]
 8008c0c:	b920      	cbnz	r0, 8008c18 <_Bfree+0x20>
 8008c0e:	4b09      	ldr	r3, [pc, #36]	@ (8008c34 <_Bfree+0x3c>)
 8008c10:	4809      	ldr	r0, [pc, #36]	@ (8008c38 <_Bfree+0x40>)
 8008c12:	218f      	movs	r1, #143	@ 0x8f
 8008c14:	f002 f8cc 	bl	800adb0 <__assert_func>
 8008c18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c1c:	6006      	str	r6, [r0, #0]
 8008c1e:	60c6      	str	r6, [r0, #12]
 8008c20:	b13c      	cbz	r4, 8008c32 <_Bfree+0x3a>
 8008c22:	69eb      	ldr	r3, [r5, #28]
 8008c24:	6862      	ldr	r2, [r4, #4]
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c2c:	6021      	str	r1, [r4, #0]
 8008c2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008c32:	bd70      	pop	{r4, r5, r6, pc}
 8008c34:	0800bed0 	.word	0x0800bed0
 8008c38:	0800bf50 	.word	0x0800bf50

08008c3c <__multadd>:
 8008c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c40:	690d      	ldr	r5, [r1, #16]
 8008c42:	4607      	mov	r7, r0
 8008c44:	460c      	mov	r4, r1
 8008c46:	461e      	mov	r6, r3
 8008c48:	f101 0c14 	add.w	ip, r1, #20
 8008c4c:	2000      	movs	r0, #0
 8008c4e:	f8dc 3000 	ldr.w	r3, [ip]
 8008c52:	b299      	uxth	r1, r3
 8008c54:	fb02 6101 	mla	r1, r2, r1, r6
 8008c58:	0c1e      	lsrs	r6, r3, #16
 8008c5a:	0c0b      	lsrs	r3, r1, #16
 8008c5c:	fb02 3306 	mla	r3, r2, r6, r3
 8008c60:	b289      	uxth	r1, r1
 8008c62:	3001      	adds	r0, #1
 8008c64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008c68:	4285      	cmp	r5, r0
 8008c6a:	f84c 1b04 	str.w	r1, [ip], #4
 8008c6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008c72:	dcec      	bgt.n	8008c4e <__multadd+0x12>
 8008c74:	b30e      	cbz	r6, 8008cba <__multadd+0x7e>
 8008c76:	68a3      	ldr	r3, [r4, #8]
 8008c78:	42ab      	cmp	r3, r5
 8008c7a:	dc19      	bgt.n	8008cb0 <__multadd+0x74>
 8008c7c:	6861      	ldr	r1, [r4, #4]
 8008c7e:	4638      	mov	r0, r7
 8008c80:	3101      	adds	r1, #1
 8008c82:	f7ff ff79 	bl	8008b78 <_Balloc>
 8008c86:	4680      	mov	r8, r0
 8008c88:	b928      	cbnz	r0, 8008c96 <__multadd+0x5a>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8008cc0 <__multadd+0x84>)
 8008c8e:	480d      	ldr	r0, [pc, #52]	@ (8008cc4 <__multadd+0x88>)
 8008c90:	21ba      	movs	r1, #186	@ 0xba
 8008c92:	f002 f88d 	bl	800adb0 <__assert_func>
 8008c96:	6922      	ldr	r2, [r4, #16]
 8008c98:	3202      	adds	r2, #2
 8008c9a:	f104 010c 	add.w	r1, r4, #12
 8008c9e:	0092      	lsls	r2, r2, #2
 8008ca0:	300c      	adds	r0, #12
 8008ca2:	f002 f86d 	bl	800ad80 <memcpy>
 8008ca6:	4621      	mov	r1, r4
 8008ca8:	4638      	mov	r0, r7
 8008caa:	f7ff ffa5 	bl	8008bf8 <_Bfree>
 8008cae:	4644      	mov	r4, r8
 8008cb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008cb4:	3501      	adds	r5, #1
 8008cb6:	615e      	str	r6, [r3, #20]
 8008cb8:	6125      	str	r5, [r4, #16]
 8008cba:	4620      	mov	r0, r4
 8008cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cc0:	0800bf3f 	.word	0x0800bf3f
 8008cc4:	0800bf50 	.word	0x0800bf50

08008cc8 <__s2b>:
 8008cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ccc:	460c      	mov	r4, r1
 8008cce:	4615      	mov	r5, r2
 8008cd0:	461f      	mov	r7, r3
 8008cd2:	2209      	movs	r2, #9
 8008cd4:	3308      	adds	r3, #8
 8008cd6:	4606      	mov	r6, r0
 8008cd8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cdc:	2100      	movs	r1, #0
 8008cde:	2201      	movs	r2, #1
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	db09      	blt.n	8008cf8 <__s2b+0x30>
 8008ce4:	4630      	mov	r0, r6
 8008ce6:	f7ff ff47 	bl	8008b78 <_Balloc>
 8008cea:	b940      	cbnz	r0, 8008cfe <__s2b+0x36>
 8008cec:	4602      	mov	r2, r0
 8008cee:	4b19      	ldr	r3, [pc, #100]	@ (8008d54 <__s2b+0x8c>)
 8008cf0:	4819      	ldr	r0, [pc, #100]	@ (8008d58 <__s2b+0x90>)
 8008cf2:	21d3      	movs	r1, #211	@ 0xd3
 8008cf4:	f002 f85c 	bl	800adb0 <__assert_func>
 8008cf8:	0052      	lsls	r2, r2, #1
 8008cfa:	3101      	adds	r1, #1
 8008cfc:	e7f0      	b.n	8008ce0 <__s2b+0x18>
 8008cfe:	9b08      	ldr	r3, [sp, #32]
 8008d00:	6143      	str	r3, [r0, #20]
 8008d02:	2d09      	cmp	r5, #9
 8008d04:	f04f 0301 	mov.w	r3, #1
 8008d08:	6103      	str	r3, [r0, #16]
 8008d0a:	dd16      	ble.n	8008d3a <__s2b+0x72>
 8008d0c:	f104 0909 	add.w	r9, r4, #9
 8008d10:	46c8      	mov	r8, r9
 8008d12:	442c      	add	r4, r5
 8008d14:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008d18:	4601      	mov	r1, r0
 8008d1a:	3b30      	subs	r3, #48	@ 0x30
 8008d1c:	220a      	movs	r2, #10
 8008d1e:	4630      	mov	r0, r6
 8008d20:	f7ff ff8c 	bl	8008c3c <__multadd>
 8008d24:	45a0      	cmp	r8, r4
 8008d26:	d1f5      	bne.n	8008d14 <__s2b+0x4c>
 8008d28:	f1a5 0408 	sub.w	r4, r5, #8
 8008d2c:	444c      	add	r4, r9
 8008d2e:	1b2d      	subs	r5, r5, r4
 8008d30:	1963      	adds	r3, r4, r5
 8008d32:	42bb      	cmp	r3, r7
 8008d34:	db04      	blt.n	8008d40 <__s2b+0x78>
 8008d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d3a:	340a      	adds	r4, #10
 8008d3c:	2509      	movs	r5, #9
 8008d3e:	e7f6      	b.n	8008d2e <__s2b+0x66>
 8008d40:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008d44:	4601      	mov	r1, r0
 8008d46:	3b30      	subs	r3, #48	@ 0x30
 8008d48:	220a      	movs	r2, #10
 8008d4a:	4630      	mov	r0, r6
 8008d4c:	f7ff ff76 	bl	8008c3c <__multadd>
 8008d50:	e7ee      	b.n	8008d30 <__s2b+0x68>
 8008d52:	bf00      	nop
 8008d54:	0800bf3f 	.word	0x0800bf3f
 8008d58:	0800bf50 	.word	0x0800bf50

08008d5c <__hi0bits>:
 8008d5c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008d60:	4603      	mov	r3, r0
 8008d62:	bf36      	itet	cc
 8008d64:	0403      	lslcc	r3, r0, #16
 8008d66:	2000      	movcs	r0, #0
 8008d68:	2010      	movcc	r0, #16
 8008d6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d6e:	bf3c      	itt	cc
 8008d70:	021b      	lslcc	r3, r3, #8
 8008d72:	3008      	addcc	r0, #8
 8008d74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d78:	bf3c      	itt	cc
 8008d7a:	011b      	lslcc	r3, r3, #4
 8008d7c:	3004      	addcc	r0, #4
 8008d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d82:	bf3c      	itt	cc
 8008d84:	009b      	lslcc	r3, r3, #2
 8008d86:	3002      	addcc	r0, #2
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	db05      	blt.n	8008d98 <__hi0bits+0x3c>
 8008d8c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008d90:	f100 0001 	add.w	r0, r0, #1
 8008d94:	bf08      	it	eq
 8008d96:	2020      	moveq	r0, #32
 8008d98:	4770      	bx	lr

08008d9a <__lo0bits>:
 8008d9a:	6803      	ldr	r3, [r0, #0]
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	f013 0007 	ands.w	r0, r3, #7
 8008da2:	d00b      	beq.n	8008dbc <__lo0bits+0x22>
 8008da4:	07d9      	lsls	r1, r3, #31
 8008da6:	d421      	bmi.n	8008dec <__lo0bits+0x52>
 8008da8:	0798      	lsls	r0, r3, #30
 8008daa:	bf49      	itett	mi
 8008dac:	085b      	lsrmi	r3, r3, #1
 8008dae:	089b      	lsrpl	r3, r3, #2
 8008db0:	2001      	movmi	r0, #1
 8008db2:	6013      	strmi	r3, [r2, #0]
 8008db4:	bf5c      	itt	pl
 8008db6:	6013      	strpl	r3, [r2, #0]
 8008db8:	2002      	movpl	r0, #2
 8008dba:	4770      	bx	lr
 8008dbc:	b299      	uxth	r1, r3
 8008dbe:	b909      	cbnz	r1, 8008dc4 <__lo0bits+0x2a>
 8008dc0:	0c1b      	lsrs	r3, r3, #16
 8008dc2:	2010      	movs	r0, #16
 8008dc4:	b2d9      	uxtb	r1, r3
 8008dc6:	b909      	cbnz	r1, 8008dcc <__lo0bits+0x32>
 8008dc8:	3008      	adds	r0, #8
 8008dca:	0a1b      	lsrs	r3, r3, #8
 8008dcc:	0719      	lsls	r1, r3, #28
 8008dce:	bf04      	itt	eq
 8008dd0:	091b      	lsreq	r3, r3, #4
 8008dd2:	3004      	addeq	r0, #4
 8008dd4:	0799      	lsls	r1, r3, #30
 8008dd6:	bf04      	itt	eq
 8008dd8:	089b      	lsreq	r3, r3, #2
 8008dda:	3002      	addeq	r0, #2
 8008ddc:	07d9      	lsls	r1, r3, #31
 8008dde:	d403      	bmi.n	8008de8 <__lo0bits+0x4e>
 8008de0:	085b      	lsrs	r3, r3, #1
 8008de2:	f100 0001 	add.w	r0, r0, #1
 8008de6:	d003      	beq.n	8008df0 <__lo0bits+0x56>
 8008de8:	6013      	str	r3, [r2, #0]
 8008dea:	4770      	bx	lr
 8008dec:	2000      	movs	r0, #0
 8008dee:	4770      	bx	lr
 8008df0:	2020      	movs	r0, #32
 8008df2:	4770      	bx	lr

08008df4 <__i2b>:
 8008df4:	b510      	push	{r4, lr}
 8008df6:	460c      	mov	r4, r1
 8008df8:	2101      	movs	r1, #1
 8008dfa:	f7ff febd 	bl	8008b78 <_Balloc>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	b928      	cbnz	r0, 8008e0e <__i2b+0x1a>
 8008e02:	4b05      	ldr	r3, [pc, #20]	@ (8008e18 <__i2b+0x24>)
 8008e04:	4805      	ldr	r0, [pc, #20]	@ (8008e1c <__i2b+0x28>)
 8008e06:	f240 1145 	movw	r1, #325	@ 0x145
 8008e0a:	f001 ffd1 	bl	800adb0 <__assert_func>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	6144      	str	r4, [r0, #20]
 8008e12:	6103      	str	r3, [r0, #16]
 8008e14:	bd10      	pop	{r4, pc}
 8008e16:	bf00      	nop
 8008e18:	0800bf3f 	.word	0x0800bf3f
 8008e1c:	0800bf50 	.word	0x0800bf50

08008e20 <__multiply>:
 8008e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e24:	4614      	mov	r4, r2
 8008e26:	690a      	ldr	r2, [r1, #16]
 8008e28:	6923      	ldr	r3, [r4, #16]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	bfa8      	it	ge
 8008e2e:	4623      	movge	r3, r4
 8008e30:	460f      	mov	r7, r1
 8008e32:	bfa4      	itt	ge
 8008e34:	460c      	movge	r4, r1
 8008e36:	461f      	movge	r7, r3
 8008e38:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008e3c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008e40:	68a3      	ldr	r3, [r4, #8]
 8008e42:	6861      	ldr	r1, [r4, #4]
 8008e44:	eb0a 0609 	add.w	r6, sl, r9
 8008e48:	42b3      	cmp	r3, r6
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	bfb8      	it	lt
 8008e4e:	3101      	addlt	r1, #1
 8008e50:	f7ff fe92 	bl	8008b78 <_Balloc>
 8008e54:	b930      	cbnz	r0, 8008e64 <__multiply+0x44>
 8008e56:	4602      	mov	r2, r0
 8008e58:	4b44      	ldr	r3, [pc, #272]	@ (8008f6c <__multiply+0x14c>)
 8008e5a:	4845      	ldr	r0, [pc, #276]	@ (8008f70 <__multiply+0x150>)
 8008e5c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008e60:	f001 ffa6 	bl	800adb0 <__assert_func>
 8008e64:	f100 0514 	add.w	r5, r0, #20
 8008e68:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008e6c:	462b      	mov	r3, r5
 8008e6e:	2200      	movs	r2, #0
 8008e70:	4543      	cmp	r3, r8
 8008e72:	d321      	bcc.n	8008eb8 <__multiply+0x98>
 8008e74:	f107 0114 	add.w	r1, r7, #20
 8008e78:	f104 0214 	add.w	r2, r4, #20
 8008e7c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008e80:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008e84:	9302      	str	r3, [sp, #8]
 8008e86:	1b13      	subs	r3, r2, r4
 8008e88:	3b15      	subs	r3, #21
 8008e8a:	f023 0303 	bic.w	r3, r3, #3
 8008e8e:	3304      	adds	r3, #4
 8008e90:	f104 0715 	add.w	r7, r4, #21
 8008e94:	42ba      	cmp	r2, r7
 8008e96:	bf38      	it	cc
 8008e98:	2304      	movcc	r3, #4
 8008e9a:	9301      	str	r3, [sp, #4]
 8008e9c:	9b02      	ldr	r3, [sp, #8]
 8008e9e:	9103      	str	r1, [sp, #12]
 8008ea0:	428b      	cmp	r3, r1
 8008ea2:	d80c      	bhi.n	8008ebe <__multiply+0x9e>
 8008ea4:	2e00      	cmp	r6, #0
 8008ea6:	dd03      	ble.n	8008eb0 <__multiply+0x90>
 8008ea8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d05b      	beq.n	8008f68 <__multiply+0x148>
 8008eb0:	6106      	str	r6, [r0, #16]
 8008eb2:	b005      	add	sp, #20
 8008eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb8:	f843 2b04 	str.w	r2, [r3], #4
 8008ebc:	e7d8      	b.n	8008e70 <__multiply+0x50>
 8008ebe:	f8b1 a000 	ldrh.w	sl, [r1]
 8008ec2:	f1ba 0f00 	cmp.w	sl, #0
 8008ec6:	d024      	beq.n	8008f12 <__multiply+0xf2>
 8008ec8:	f104 0e14 	add.w	lr, r4, #20
 8008ecc:	46a9      	mov	r9, r5
 8008ece:	f04f 0c00 	mov.w	ip, #0
 8008ed2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008ed6:	f8d9 3000 	ldr.w	r3, [r9]
 8008eda:	fa1f fb87 	uxth.w	fp, r7
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	fb0a 330b 	mla	r3, sl, fp, r3
 8008ee4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008ee8:	f8d9 7000 	ldr.w	r7, [r9]
 8008eec:	4463      	add	r3, ip
 8008eee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008ef2:	fb0a c70b 	mla	r7, sl, fp, ip
 8008ef6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008f00:	4572      	cmp	r2, lr
 8008f02:	f849 3b04 	str.w	r3, [r9], #4
 8008f06:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008f0a:	d8e2      	bhi.n	8008ed2 <__multiply+0xb2>
 8008f0c:	9b01      	ldr	r3, [sp, #4]
 8008f0e:	f845 c003 	str.w	ip, [r5, r3]
 8008f12:	9b03      	ldr	r3, [sp, #12]
 8008f14:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008f18:	3104      	adds	r1, #4
 8008f1a:	f1b9 0f00 	cmp.w	r9, #0
 8008f1e:	d021      	beq.n	8008f64 <__multiply+0x144>
 8008f20:	682b      	ldr	r3, [r5, #0]
 8008f22:	f104 0c14 	add.w	ip, r4, #20
 8008f26:	46ae      	mov	lr, r5
 8008f28:	f04f 0a00 	mov.w	sl, #0
 8008f2c:	f8bc b000 	ldrh.w	fp, [ip]
 8008f30:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008f34:	fb09 770b 	mla	r7, r9, fp, r7
 8008f38:	4457      	add	r7, sl
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008f40:	f84e 3b04 	str.w	r3, [lr], #4
 8008f44:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008f48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f4c:	f8be 3000 	ldrh.w	r3, [lr]
 8008f50:	fb09 330a 	mla	r3, r9, sl, r3
 8008f54:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008f58:	4562      	cmp	r2, ip
 8008f5a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f5e:	d8e5      	bhi.n	8008f2c <__multiply+0x10c>
 8008f60:	9f01      	ldr	r7, [sp, #4]
 8008f62:	51eb      	str	r3, [r5, r7]
 8008f64:	3504      	adds	r5, #4
 8008f66:	e799      	b.n	8008e9c <__multiply+0x7c>
 8008f68:	3e01      	subs	r6, #1
 8008f6a:	e79b      	b.n	8008ea4 <__multiply+0x84>
 8008f6c:	0800bf3f 	.word	0x0800bf3f
 8008f70:	0800bf50 	.word	0x0800bf50

08008f74 <__pow5mult>:
 8008f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f78:	4615      	mov	r5, r2
 8008f7a:	f012 0203 	ands.w	r2, r2, #3
 8008f7e:	4607      	mov	r7, r0
 8008f80:	460e      	mov	r6, r1
 8008f82:	d007      	beq.n	8008f94 <__pow5mult+0x20>
 8008f84:	4c25      	ldr	r4, [pc, #148]	@ (800901c <__pow5mult+0xa8>)
 8008f86:	3a01      	subs	r2, #1
 8008f88:	2300      	movs	r3, #0
 8008f8a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008f8e:	f7ff fe55 	bl	8008c3c <__multadd>
 8008f92:	4606      	mov	r6, r0
 8008f94:	10ad      	asrs	r5, r5, #2
 8008f96:	d03d      	beq.n	8009014 <__pow5mult+0xa0>
 8008f98:	69fc      	ldr	r4, [r7, #28]
 8008f9a:	b97c      	cbnz	r4, 8008fbc <__pow5mult+0x48>
 8008f9c:	2010      	movs	r0, #16
 8008f9e:	f7ff fd35 	bl	8008a0c <malloc>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	61f8      	str	r0, [r7, #28]
 8008fa6:	b928      	cbnz	r0, 8008fb4 <__pow5mult+0x40>
 8008fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8009020 <__pow5mult+0xac>)
 8008faa:	481e      	ldr	r0, [pc, #120]	@ (8009024 <__pow5mult+0xb0>)
 8008fac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008fb0:	f001 fefe 	bl	800adb0 <__assert_func>
 8008fb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fb8:	6004      	str	r4, [r0, #0]
 8008fba:	60c4      	str	r4, [r0, #12]
 8008fbc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008fc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008fc4:	b94c      	cbnz	r4, 8008fda <__pow5mult+0x66>
 8008fc6:	f240 2171 	movw	r1, #625	@ 0x271
 8008fca:	4638      	mov	r0, r7
 8008fcc:	f7ff ff12 	bl	8008df4 <__i2b>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	f8c8 0008 	str.w	r0, [r8, #8]
 8008fd6:	4604      	mov	r4, r0
 8008fd8:	6003      	str	r3, [r0, #0]
 8008fda:	f04f 0900 	mov.w	r9, #0
 8008fde:	07eb      	lsls	r3, r5, #31
 8008fe0:	d50a      	bpl.n	8008ff8 <__pow5mult+0x84>
 8008fe2:	4631      	mov	r1, r6
 8008fe4:	4622      	mov	r2, r4
 8008fe6:	4638      	mov	r0, r7
 8008fe8:	f7ff ff1a 	bl	8008e20 <__multiply>
 8008fec:	4631      	mov	r1, r6
 8008fee:	4680      	mov	r8, r0
 8008ff0:	4638      	mov	r0, r7
 8008ff2:	f7ff fe01 	bl	8008bf8 <_Bfree>
 8008ff6:	4646      	mov	r6, r8
 8008ff8:	106d      	asrs	r5, r5, #1
 8008ffa:	d00b      	beq.n	8009014 <__pow5mult+0xa0>
 8008ffc:	6820      	ldr	r0, [r4, #0]
 8008ffe:	b938      	cbnz	r0, 8009010 <__pow5mult+0x9c>
 8009000:	4622      	mov	r2, r4
 8009002:	4621      	mov	r1, r4
 8009004:	4638      	mov	r0, r7
 8009006:	f7ff ff0b 	bl	8008e20 <__multiply>
 800900a:	6020      	str	r0, [r4, #0]
 800900c:	f8c0 9000 	str.w	r9, [r0]
 8009010:	4604      	mov	r4, r0
 8009012:	e7e4      	b.n	8008fde <__pow5mult+0x6a>
 8009014:	4630      	mov	r0, r6
 8009016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800901a:	bf00      	nop
 800901c:	0800bfac 	.word	0x0800bfac
 8009020:	0800bed0 	.word	0x0800bed0
 8009024:	0800bf50 	.word	0x0800bf50

08009028 <__lshift>:
 8009028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800902c:	460c      	mov	r4, r1
 800902e:	6849      	ldr	r1, [r1, #4]
 8009030:	6923      	ldr	r3, [r4, #16]
 8009032:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009036:	68a3      	ldr	r3, [r4, #8]
 8009038:	4607      	mov	r7, r0
 800903a:	4691      	mov	r9, r2
 800903c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009040:	f108 0601 	add.w	r6, r8, #1
 8009044:	42b3      	cmp	r3, r6
 8009046:	db0b      	blt.n	8009060 <__lshift+0x38>
 8009048:	4638      	mov	r0, r7
 800904a:	f7ff fd95 	bl	8008b78 <_Balloc>
 800904e:	4605      	mov	r5, r0
 8009050:	b948      	cbnz	r0, 8009066 <__lshift+0x3e>
 8009052:	4602      	mov	r2, r0
 8009054:	4b28      	ldr	r3, [pc, #160]	@ (80090f8 <__lshift+0xd0>)
 8009056:	4829      	ldr	r0, [pc, #164]	@ (80090fc <__lshift+0xd4>)
 8009058:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800905c:	f001 fea8 	bl	800adb0 <__assert_func>
 8009060:	3101      	adds	r1, #1
 8009062:	005b      	lsls	r3, r3, #1
 8009064:	e7ee      	b.n	8009044 <__lshift+0x1c>
 8009066:	2300      	movs	r3, #0
 8009068:	f100 0114 	add.w	r1, r0, #20
 800906c:	f100 0210 	add.w	r2, r0, #16
 8009070:	4618      	mov	r0, r3
 8009072:	4553      	cmp	r3, sl
 8009074:	db33      	blt.n	80090de <__lshift+0xb6>
 8009076:	6920      	ldr	r0, [r4, #16]
 8009078:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800907c:	f104 0314 	add.w	r3, r4, #20
 8009080:	f019 091f 	ands.w	r9, r9, #31
 8009084:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009088:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800908c:	d02b      	beq.n	80090e6 <__lshift+0xbe>
 800908e:	f1c9 0e20 	rsb	lr, r9, #32
 8009092:	468a      	mov	sl, r1
 8009094:	2200      	movs	r2, #0
 8009096:	6818      	ldr	r0, [r3, #0]
 8009098:	fa00 f009 	lsl.w	r0, r0, r9
 800909c:	4310      	orrs	r0, r2
 800909e:	f84a 0b04 	str.w	r0, [sl], #4
 80090a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80090a6:	459c      	cmp	ip, r3
 80090a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80090ac:	d8f3      	bhi.n	8009096 <__lshift+0x6e>
 80090ae:	ebac 0304 	sub.w	r3, ip, r4
 80090b2:	3b15      	subs	r3, #21
 80090b4:	f023 0303 	bic.w	r3, r3, #3
 80090b8:	3304      	adds	r3, #4
 80090ba:	f104 0015 	add.w	r0, r4, #21
 80090be:	4584      	cmp	ip, r0
 80090c0:	bf38      	it	cc
 80090c2:	2304      	movcc	r3, #4
 80090c4:	50ca      	str	r2, [r1, r3]
 80090c6:	b10a      	cbz	r2, 80090cc <__lshift+0xa4>
 80090c8:	f108 0602 	add.w	r6, r8, #2
 80090cc:	3e01      	subs	r6, #1
 80090ce:	4638      	mov	r0, r7
 80090d0:	612e      	str	r6, [r5, #16]
 80090d2:	4621      	mov	r1, r4
 80090d4:	f7ff fd90 	bl	8008bf8 <_Bfree>
 80090d8:	4628      	mov	r0, r5
 80090da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090de:	f842 0f04 	str.w	r0, [r2, #4]!
 80090e2:	3301      	adds	r3, #1
 80090e4:	e7c5      	b.n	8009072 <__lshift+0x4a>
 80090e6:	3904      	subs	r1, #4
 80090e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80090ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80090f0:	459c      	cmp	ip, r3
 80090f2:	d8f9      	bhi.n	80090e8 <__lshift+0xc0>
 80090f4:	e7ea      	b.n	80090cc <__lshift+0xa4>
 80090f6:	bf00      	nop
 80090f8:	0800bf3f 	.word	0x0800bf3f
 80090fc:	0800bf50 	.word	0x0800bf50

08009100 <__mcmp>:
 8009100:	690a      	ldr	r2, [r1, #16]
 8009102:	4603      	mov	r3, r0
 8009104:	6900      	ldr	r0, [r0, #16]
 8009106:	1a80      	subs	r0, r0, r2
 8009108:	b530      	push	{r4, r5, lr}
 800910a:	d10e      	bne.n	800912a <__mcmp+0x2a>
 800910c:	3314      	adds	r3, #20
 800910e:	3114      	adds	r1, #20
 8009110:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009114:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009118:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800911c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009120:	4295      	cmp	r5, r2
 8009122:	d003      	beq.n	800912c <__mcmp+0x2c>
 8009124:	d205      	bcs.n	8009132 <__mcmp+0x32>
 8009126:	f04f 30ff 	mov.w	r0, #4294967295
 800912a:	bd30      	pop	{r4, r5, pc}
 800912c:	42a3      	cmp	r3, r4
 800912e:	d3f3      	bcc.n	8009118 <__mcmp+0x18>
 8009130:	e7fb      	b.n	800912a <__mcmp+0x2a>
 8009132:	2001      	movs	r0, #1
 8009134:	e7f9      	b.n	800912a <__mcmp+0x2a>
	...

08009138 <__mdiff>:
 8009138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800913c:	4689      	mov	r9, r1
 800913e:	4606      	mov	r6, r0
 8009140:	4611      	mov	r1, r2
 8009142:	4648      	mov	r0, r9
 8009144:	4614      	mov	r4, r2
 8009146:	f7ff ffdb 	bl	8009100 <__mcmp>
 800914a:	1e05      	subs	r5, r0, #0
 800914c:	d112      	bne.n	8009174 <__mdiff+0x3c>
 800914e:	4629      	mov	r1, r5
 8009150:	4630      	mov	r0, r6
 8009152:	f7ff fd11 	bl	8008b78 <_Balloc>
 8009156:	4602      	mov	r2, r0
 8009158:	b928      	cbnz	r0, 8009166 <__mdiff+0x2e>
 800915a:	4b3f      	ldr	r3, [pc, #252]	@ (8009258 <__mdiff+0x120>)
 800915c:	f240 2137 	movw	r1, #567	@ 0x237
 8009160:	483e      	ldr	r0, [pc, #248]	@ (800925c <__mdiff+0x124>)
 8009162:	f001 fe25 	bl	800adb0 <__assert_func>
 8009166:	2301      	movs	r3, #1
 8009168:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800916c:	4610      	mov	r0, r2
 800916e:	b003      	add	sp, #12
 8009170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009174:	bfbc      	itt	lt
 8009176:	464b      	movlt	r3, r9
 8009178:	46a1      	movlt	r9, r4
 800917a:	4630      	mov	r0, r6
 800917c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009180:	bfba      	itte	lt
 8009182:	461c      	movlt	r4, r3
 8009184:	2501      	movlt	r5, #1
 8009186:	2500      	movge	r5, #0
 8009188:	f7ff fcf6 	bl	8008b78 <_Balloc>
 800918c:	4602      	mov	r2, r0
 800918e:	b918      	cbnz	r0, 8009198 <__mdiff+0x60>
 8009190:	4b31      	ldr	r3, [pc, #196]	@ (8009258 <__mdiff+0x120>)
 8009192:	f240 2145 	movw	r1, #581	@ 0x245
 8009196:	e7e3      	b.n	8009160 <__mdiff+0x28>
 8009198:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800919c:	6926      	ldr	r6, [r4, #16]
 800919e:	60c5      	str	r5, [r0, #12]
 80091a0:	f109 0310 	add.w	r3, r9, #16
 80091a4:	f109 0514 	add.w	r5, r9, #20
 80091a8:	f104 0e14 	add.w	lr, r4, #20
 80091ac:	f100 0b14 	add.w	fp, r0, #20
 80091b0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80091b4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80091b8:	9301      	str	r3, [sp, #4]
 80091ba:	46d9      	mov	r9, fp
 80091bc:	f04f 0c00 	mov.w	ip, #0
 80091c0:	9b01      	ldr	r3, [sp, #4]
 80091c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80091c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80091ca:	9301      	str	r3, [sp, #4]
 80091cc:	fa1f f38a 	uxth.w	r3, sl
 80091d0:	4619      	mov	r1, r3
 80091d2:	b283      	uxth	r3, r0
 80091d4:	1acb      	subs	r3, r1, r3
 80091d6:	0c00      	lsrs	r0, r0, #16
 80091d8:	4463      	add	r3, ip
 80091da:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80091de:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80091e8:	4576      	cmp	r6, lr
 80091ea:	f849 3b04 	str.w	r3, [r9], #4
 80091ee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80091f2:	d8e5      	bhi.n	80091c0 <__mdiff+0x88>
 80091f4:	1b33      	subs	r3, r6, r4
 80091f6:	3b15      	subs	r3, #21
 80091f8:	f023 0303 	bic.w	r3, r3, #3
 80091fc:	3415      	adds	r4, #21
 80091fe:	3304      	adds	r3, #4
 8009200:	42a6      	cmp	r6, r4
 8009202:	bf38      	it	cc
 8009204:	2304      	movcc	r3, #4
 8009206:	441d      	add	r5, r3
 8009208:	445b      	add	r3, fp
 800920a:	461e      	mov	r6, r3
 800920c:	462c      	mov	r4, r5
 800920e:	4544      	cmp	r4, r8
 8009210:	d30e      	bcc.n	8009230 <__mdiff+0xf8>
 8009212:	f108 0103 	add.w	r1, r8, #3
 8009216:	1b49      	subs	r1, r1, r5
 8009218:	f021 0103 	bic.w	r1, r1, #3
 800921c:	3d03      	subs	r5, #3
 800921e:	45a8      	cmp	r8, r5
 8009220:	bf38      	it	cc
 8009222:	2100      	movcc	r1, #0
 8009224:	440b      	add	r3, r1
 8009226:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800922a:	b191      	cbz	r1, 8009252 <__mdiff+0x11a>
 800922c:	6117      	str	r7, [r2, #16]
 800922e:	e79d      	b.n	800916c <__mdiff+0x34>
 8009230:	f854 1b04 	ldr.w	r1, [r4], #4
 8009234:	46e6      	mov	lr, ip
 8009236:	0c08      	lsrs	r0, r1, #16
 8009238:	fa1c fc81 	uxtah	ip, ip, r1
 800923c:	4471      	add	r1, lr
 800923e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009242:	b289      	uxth	r1, r1
 8009244:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009248:	f846 1b04 	str.w	r1, [r6], #4
 800924c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009250:	e7dd      	b.n	800920e <__mdiff+0xd6>
 8009252:	3f01      	subs	r7, #1
 8009254:	e7e7      	b.n	8009226 <__mdiff+0xee>
 8009256:	bf00      	nop
 8009258:	0800bf3f 	.word	0x0800bf3f
 800925c:	0800bf50 	.word	0x0800bf50

08009260 <__ulp>:
 8009260:	b082      	sub	sp, #8
 8009262:	ed8d 0b00 	vstr	d0, [sp]
 8009266:	9a01      	ldr	r2, [sp, #4]
 8009268:	4b0f      	ldr	r3, [pc, #60]	@ (80092a8 <__ulp+0x48>)
 800926a:	4013      	ands	r3, r2
 800926c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009270:	2b00      	cmp	r3, #0
 8009272:	dc08      	bgt.n	8009286 <__ulp+0x26>
 8009274:	425b      	negs	r3, r3
 8009276:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800927a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800927e:	da04      	bge.n	800928a <__ulp+0x2a>
 8009280:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009284:	4113      	asrs	r3, r2
 8009286:	2200      	movs	r2, #0
 8009288:	e008      	b.n	800929c <__ulp+0x3c>
 800928a:	f1a2 0314 	sub.w	r3, r2, #20
 800928e:	2b1e      	cmp	r3, #30
 8009290:	bfda      	itte	le
 8009292:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009296:	40da      	lsrle	r2, r3
 8009298:	2201      	movgt	r2, #1
 800929a:	2300      	movs	r3, #0
 800929c:	4619      	mov	r1, r3
 800929e:	4610      	mov	r0, r2
 80092a0:	ec41 0b10 	vmov	d0, r0, r1
 80092a4:	b002      	add	sp, #8
 80092a6:	4770      	bx	lr
 80092a8:	7ff00000 	.word	0x7ff00000

080092ac <__b2d>:
 80092ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092b0:	6906      	ldr	r6, [r0, #16]
 80092b2:	f100 0814 	add.w	r8, r0, #20
 80092b6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80092ba:	1f37      	subs	r7, r6, #4
 80092bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80092c0:	4610      	mov	r0, r2
 80092c2:	f7ff fd4b 	bl	8008d5c <__hi0bits>
 80092c6:	f1c0 0320 	rsb	r3, r0, #32
 80092ca:	280a      	cmp	r0, #10
 80092cc:	600b      	str	r3, [r1, #0]
 80092ce:	491b      	ldr	r1, [pc, #108]	@ (800933c <__b2d+0x90>)
 80092d0:	dc15      	bgt.n	80092fe <__b2d+0x52>
 80092d2:	f1c0 0c0b 	rsb	ip, r0, #11
 80092d6:	fa22 f30c 	lsr.w	r3, r2, ip
 80092da:	45b8      	cmp	r8, r7
 80092dc:	ea43 0501 	orr.w	r5, r3, r1
 80092e0:	bf34      	ite	cc
 80092e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80092e6:	2300      	movcs	r3, #0
 80092e8:	3015      	adds	r0, #21
 80092ea:	fa02 f000 	lsl.w	r0, r2, r0
 80092ee:	fa23 f30c 	lsr.w	r3, r3, ip
 80092f2:	4303      	orrs	r3, r0
 80092f4:	461c      	mov	r4, r3
 80092f6:	ec45 4b10 	vmov	d0, r4, r5
 80092fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092fe:	45b8      	cmp	r8, r7
 8009300:	bf3a      	itte	cc
 8009302:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009306:	f1a6 0708 	subcc.w	r7, r6, #8
 800930a:	2300      	movcs	r3, #0
 800930c:	380b      	subs	r0, #11
 800930e:	d012      	beq.n	8009336 <__b2d+0x8a>
 8009310:	f1c0 0120 	rsb	r1, r0, #32
 8009314:	fa23 f401 	lsr.w	r4, r3, r1
 8009318:	4082      	lsls	r2, r0
 800931a:	4322      	orrs	r2, r4
 800931c:	4547      	cmp	r7, r8
 800931e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009322:	bf8c      	ite	hi
 8009324:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009328:	2200      	movls	r2, #0
 800932a:	4083      	lsls	r3, r0
 800932c:	40ca      	lsrs	r2, r1
 800932e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009332:	4313      	orrs	r3, r2
 8009334:	e7de      	b.n	80092f4 <__b2d+0x48>
 8009336:	ea42 0501 	orr.w	r5, r2, r1
 800933a:	e7db      	b.n	80092f4 <__b2d+0x48>
 800933c:	3ff00000 	.word	0x3ff00000

08009340 <__d2b>:
 8009340:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009344:	460f      	mov	r7, r1
 8009346:	2101      	movs	r1, #1
 8009348:	ec59 8b10 	vmov	r8, r9, d0
 800934c:	4616      	mov	r6, r2
 800934e:	f7ff fc13 	bl	8008b78 <_Balloc>
 8009352:	4604      	mov	r4, r0
 8009354:	b930      	cbnz	r0, 8009364 <__d2b+0x24>
 8009356:	4602      	mov	r2, r0
 8009358:	4b23      	ldr	r3, [pc, #140]	@ (80093e8 <__d2b+0xa8>)
 800935a:	4824      	ldr	r0, [pc, #144]	@ (80093ec <__d2b+0xac>)
 800935c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009360:	f001 fd26 	bl	800adb0 <__assert_func>
 8009364:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009368:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800936c:	b10d      	cbz	r5, 8009372 <__d2b+0x32>
 800936e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009372:	9301      	str	r3, [sp, #4]
 8009374:	f1b8 0300 	subs.w	r3, r8, #0
 8009378:	d023      	beq.n	80093c2 <__d2b+0x82>
 800937a:	4668      	mov	r0, sp
 800937c:	9300      	str	r3, [sp, #0]
 800937e:	f7ff fd0c 	bl	8008d9a <__lo0bits>
 8009382:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009386:	b1d0      	cbz	r0, 80093be <__d2b+0x7e>
 8009388:	f1c0 0320 	rsb	r3, r0, #32
 800938c:	fa02 f303 	lsl.w	r3, r2, r3
 8009390:	430b      	orrs	r3, r1
 8009392:	40c2      	lsrs	r2, r0
 8009394:	6163      	str	r3, [r4, #20]
 8009396:	9201      	str	r2, [sp, #4]
 8009398:	9b01      	ldr	r3, [sp, #4]
 800939a:	61a3      	str	r3, [r4, #24]
 800939c:	2b00      	cmp	r3, #0
 800939e:	bf0c      	ite	eq
 80093a0:	2201      	moveq	r2, #1
 80093a2:	2202      	movne	r2, #2
 80093a4:	6122      	str	r2, [r4, #16]
 80093a6:	b1a5      	cbz	r5, 80093d2 <__d2b+0x92>
 80093a8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80093ac:	4405      	add	r5, r0
 80093ae:	603d      	str	r5, [r7, #0]
 80093b0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80093b4:	6030      	str	r0, [r6, #0]
 80093b6:	4620      	mov	r0, r4
 80093b8:	b003      	add	sp, #12
 80093ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093be:	6161      	str	r1, [r4, #20]
 80093c0:	e7ea      	b.n	8009398 <__d2b+0x58>
 80093c2:	a801      	add	r0, sp, #4
 80093c4:	f7ff fce9 	bl	8008d9a <__lo0bits>
 80093c8:	9b01      	ldr	r3, [sp, #4]
 80093ca:	6163      	str	r3, [r4, #20]
 80093cc:	3020      	adds	r0, #32
 80093ce:	2201      	movs	r2, #1
 80093d0:	e7e8      	b.n	80093a4 <__d2b+0x64>
 80093d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80093d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80093da:	6038      	str	r0, [r7, #0]
 80093dc:	6918      	ldr	r0, [r3, #16]
 80093de:	f7ff fcbd 	bl	8008d5c <__hi0bits>
 80093e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80093e6:	e7e5      	b.n	80093b4 <__d2b+0x74>
 80093e8:	0800bf3f 	.word	0x0800bf3f
 80093ec:	0800bf50 	.word	0x0800bf50

080093f0 <__ratio>:
 80093f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f4:	b085      	sub	sp, #20
 80093f6:	e9cd 1000 	strd	r1, r0, [sp]
 80093fa:	a902      	add	r1, sp, #8
 80093fc:	f7ff ff56 	bl	80092ac <__b2d>
 8009400:	9800      	ldr	r0, [sp, #0]
 8009402:	a903      	add	r1, sp, #12
 8009404:	ec55 4b10 	vmov	r4, r5, d0
 8009408:	f7ff ff50 	bl	80092ac <__b2d>
 800940c:	9b01      	ldr	r3, [sp, #4]
 800940e:	6919      	ldr	r1, [r3, #16]
 8009410:	9b00      	ldr	r3, [sp, #0]
 8009412:	691b      	ldr	r3, [r3, #16]
 8009414:	1ac9      	subs	r1, r1, r3
 8009416:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800941a:	1a9b      	subs	r3, r3, r2
 800941c:	ec5b ab10 	vmov	sl, fp, d0
 8009420:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009424:	2b00      	cmp	r3, #0
 8009426:	bfce      	itee	gt
 8009428:	462a      	movgt	r2, r5
 800942a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800942e:	465a      	movle	r2, fp
 8009430:	462f      	mov	r7, r5
 8009432:	46d9      	mov	r9, fp
 8009434:	bfcc      	ite	gt
 8009436:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800943a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800943e:	464b      	mov	r3, r9
 8009440:	4652      	mov	r2, sl
 8009442:	4620      	mov	r0, r4
 8009444:	4639      	mov	r1, r7
 8009446:	f7f7 fa09 	bl	800085c <__aeabi_ddiv>
 800944a:	ec41 0b10 	vmov	d0, r0, r1
 800944e:	b005      	add	sp, #20
 8009450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009454 <__copybits>:
 8009454:	3901      	subs	r1, #1
 8009456:	b570      	push	{r4, r5, r6, lr}
 8009458:	1149      	asrs	r1, r1, #5
 800945a:	6914      	ldr	r4, [r2, #16]
 800945c:	3101      	adds	r1, #1
 800945e:	f102 0314 	add.w	r3, r2, #20
 8009462:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009466:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800946a:	1f05      	subs	r5, r0, #4
 800946c:	42a3      	cmp	r3, r4
 800946e:	d30c      	bcc.n	800948a <__copybits+0x36>
 8009470:	1aa3      	subs	r3, r4, r2
 8009472:	3b11      	subs	r3, #17
 8009474:	f023 0303 	bic.w	r3, r3, #3
 8009478:	3211      	adds	r2, #17
 800947a:	42a2      	cmp	r2, r4
 800947c:	bf88      	it	hi
 800947e:	2300      	movhi	r3, #0
 8009480:	4418      	add	r0, r3
 8009482:	2300      	movs	r3, #0
 8009484:	4288      	cmp	r0, r1
 8009486:	d305      	bcc.n	8009494 <__copybits+0x40>
 8009488:	bd70      	pop	{r4, r5, r6, pc}
 800948a:	f853 6b04 	ldr.w	r6, [r3], #4
 800948e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009492:	e7eb      	b.n	800946c <__copybits+0x18>
 8009494:	f840 3b04 	str.w	r3, [r0], #4
 8009498:	e7f4      	b.n	8009484 <__copybits+0x30>

0800949a <__any_on>:
 800949a:	f100 0214 	add.w	r2, r0, #20
 800949e:	6900      	ldr	r0, [r0, #16]
 80094a0:	114b      	asrs	r3, r1, #5
 80094a2:	4298      	cmp	r0, r3
 80094a4:	b510      	push	{r4, lr}
 80094a6:	db11      	blt.n	80094cc <__any_on+0x32>
 80094a8:	dd0a      	ble.n	80094c0 <__any_on+0x26>
 80094aa:	f011 011f 	ands.w	r1, r1, #31
 80094ae:	d007      	beq.n	80094c0 <__any_on+0x26>
 80094b0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80094b4:	fa24 f001 	lsr.w	r0, r4, r1
 80094b8:	fa00 f101 	lsl.w	r1, r0, r1
 80094bc:	428c      	cmp	r4, r1
 80094be:	d10b      	bne.n	80094d8 <__any_on+0x3e>
 80094c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d803      	bhi.n	80094d0 <__any_on+0x36>
 80094c8:	2000      	movs	r0, #0
 80094ca:	bd10      	pop	{r4, pc}
 80094cc:	4603      	mov	r3, r0
 80094ce:	e7f7      	b.n	80094c0 <__any_on+0x26>
 80094d0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80094d4:	2900      	cmp	r1, #0
 80094d6:	d0f5      	beq.n	80094c4 <__any_on+0x2a>
 80094d8:	2001      	movs	r0, #1
 80094da:	e7f6      	b.n	80094ca <__any_on+0x30>

080094dc <sulp>:
 80094dc:	b570      	push	{r4, r5, r6, lr}
 80094de:	4604      	mov	r4, r0
 80094e0:	460d      	mov	r5, r1
 80094e2:	ec45 4b10 	vmov	d0, r4, r5
 80094e6:	4616      	mov	r6, r2
 80094e8:	f7ff feba 	bl	8009260 <__ulp>
 80094ec:	ec51 0b10 	vmov	r0, r1, d0
 80094f0:	b17e      	cbz	r6, 8009512 <sulp+0x36>
 80094f2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80094f6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	dd09      	ble.n	8009512 <sulp+0x36>
 80094fe:	051b      	lsls	r3, r3, #20
 8009500:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009504:	2400      	movs	r4, #0
 8009506:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800950a:	4622      	mov	r2, r4
 800950c:	462b      	mov	r3, r5
 800950e:	f7f7 f87b 	bl	8000608 <__aeabi_dmul>
 8009512:	ec41 0b10 	vmov	d0, r0, r1
 8009516:	bd70      	pop	{r4, r5, r6, pc}

08009518 <_strtod_l>:
 8009518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800951c:	b09f      	sub	sp, #124	@ 0x7c
 800951e:	460c      	mov	r4, r1
 8009520:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009522:	2200      	movs	r2, #0
 8009524:	921a      	str	r2, [sp, #104]	@ 0x68
 8009526:	9005      	str	r0, [sp, #20]
 8009528:	f04f 0a00 	mov.w	sl, #0
 800952c:	f04f 0b00 	mov.w	fp, #0
 8009530:	460a      	mov	r2, r1
 8009532:	9219      	str	r2, [sp, #100]	@ 0x64
 8009534:	7811      	ldrb	r1, [r2, #0]
 8009536:	292b      	cmp	r1, #43	@ 0x2b
 8009538:	d04a      	beq.n	80095d0 <_strtod_l+0xb8>
 800953a:	d838      	bhi.n	80095ae <_strtod_l+0x96>
 800953c:	290d      	cmp	r1, #13
 800953e:	d832      	bhi.n	80095a6 <_strtod_l+0x8e>
 8009540:	2908      	cmp	r1, #8
 8009542:	d832      	bhi.n	80095aa <_strtod_l+0x92>
 8009544:	2900      	cmp	r1, #0
 8009546:	d03b      	beq.n	80095c0 <_strtod_l+0xa8>
 8009548:	2200      	movs	r2, #0
 800954a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800954c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800954e:	782a      	ldrb	r2, [r5, #0]
 8009550:	2a30      	cmp	r2, #48	@ 0x30
 8009552:	f040 80b3 	bne.w	80096bc <_strtod_l+0x1a4>
 8009556:	786a      	ldrb	r2, [r5, #1]
 8009558:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800955c:	2a58      	cmp	r2, #88	@ 0x58
 800955e:	d16e      	bne.n	800963e <_strtod_l+0x126>
 8009560:	9302      	str	r3, [sp, #8]
 8009562:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009564:	9301      	str	r3, [sp, #4]
 8009566:	ab1a      	add	r3, sp, #104	@ 0x68
 8009568:	9300      	str	r3, [sp, #0]
 800956a:	4a8e      	ldr	r2, [pc, #568]	@ (80097a4 <_strtod_l+0x28c>)
 800956c:	9805      	ldr	r0, [sp, #20]
 800956e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009570:	a919      	add	r1, sp, #100	@ 0x64
 8009572:	f001 fcb7 	bl	800aee4 <__gethex>
 8009576:	f010 060f 	ands.w	r6, r0, #15
 800957a:	4604      	mov	r4, r0
 800957c:	d005      	beq.n	800958a <_strtod_l+0x72>
 800957e:	2e06      	cmp	r6, #6
 8009580:	d128      	bne.n	80095d4 <_strtod_l+0xbc>
 8009582:	3501      	adds	r5, #1
 8009584:	2300      	movs	r3, #0
 8009586:	9519      	str	r5, [sp, #100]	@ 0x64
 8009588:	930b      	str	r3, [sp, #44]	@ 0x2c
 800958a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800958c:	2b00      	cmp	r3, #0
 800958e:	f040 858e 	bne.w	800a0ae <_strtod_l+0xb96>
 8009592:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009594:	b1cb      	cbz	r3, 80095ca <_strtod_l+0xb2>
 8009596:	4652      	mov	r2, sl
 8009598:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800959c:	ec43 2b10 	vmov	d0, r2, r3
 80095a0:	b01f      	add	sp, #124	@ 0x7c
 80095a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095a6:	2920      	cmp	r1, #32
 80095a8:	d1ce      	bne.n	8009548 <_strtod_l+0x30>
 80095aa:	3201      	adds	r2, #1
 80095ac:	e7c1      	b.n	8009532 <_strtod_l+0x1a>
 80095ae:	292d      	cmp	r1, #45	@ 0x2d
 80095b0:	d1ca      	bne.n	8009548 <_strtod_l+0x30>
 80095b2:	2101      	movs	r1, #1
 80095b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80095b6:	1c51      	adds	r1, r2, #1
 80095b8:	9119      	str	r1, [sp, #100]	@ 0x64
 80095ba:	7852      	ldrb	r2, [r2, #1]
 80095bc:	2a00      	cmp	r2, #0
 80095be:	d1c5      	bne.n	800954c <_strtod_l+0x34>
 80095c0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80095c2:	9419      	str	r4, [sp, #100]	@ 0x64
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f040 8570 	bne.w	800a0aa <_strtod_l+0xb92>
 80095ca:	4652      	mov	r2, sl
 80095cc:	465b      	mov	r3, fp
 80095ce:	e7e5      	b.n	800959c <_strtod_l+0x84>
 80095d0:	2100      	movs	r1, #0
 80095d2:	e7ef      	b.n	80095b4 <_strtod_l+0x9c>
 80095d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80095d6:	b13a      	cbz	r2, 80095e8 <_strtod_l+0xd0>
 80095d8:	2135      	movs	r1, #53	@ 0x35
 80095da:	a81c      	add	r0, sp, #112	@ 0x70
 80095dc:	f7ff ff3a 	bl	8009454 <__copybits>
 80095e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095e2:	9805      	ldr	r0, [sp, #20]
 80095e4:	f7ff fb08 	bl	8008bf8 <_Bfree>
 80095e8:	3e01      	subs	r6, #1
 80095ea:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80095ec:	2e04      	cmp	r6, #4
 80095ee:	d806      	bhi.n	80095fe <_strtod_l+0xe6>
 80095f0:	e8df f006 	tbb	[pc, r6]
 80095f4:	201d0314 	.word	0x201d0314
 80095f8:	14          	.byte	0x14
 80095f9:	00          	.byte	0x00
 80095fa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80095fe:	05e1      	lsls	r1, r4, #23
 8009600:	bf48      	it	mi
 8009602:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009606:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800960a:	0d1b      	lsrs	r3, r3, #20
 800960c:	051b      	lsls	r3, r3, #20
 800960e:	2b00      	cmp	r3, #0
 8009610:	d1bb      	bne.n	800958a <_strtod_l+0x72>
 8009612:	f7fe fb2f 	bl	8007c74 <__errno>
 8009616:	2322      	movs	r3, #34	@ 0x22
 8009618:	6003      	str	r3, [r0, #0]
 800961a:	e7b6      	b.n	800958a <_strtod_l+0x72>
 800961c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009620:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009624:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009628:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800962c:	e7e7      	b.n	80095fe <_strtod_l+0xe6>
 800962e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80097ac <_strtod_l+0x294>
 8009632:	e7e4      	b.n	80095fe <_strtod_l+0xe6>
 8009634:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009638:	f04f 3aff 	mov.w	sl, #4294967295
 800963c:	e7df      	b.n	80095fe <_strtod_l+0xe6>
 800963e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009640:	1c5a      	adds	r2, r3, #1
 8009642:	9219      	str	r2, [sp, #100]	@ 0x64
 8009644:	785b      	ldrb	r3, [r3, #1]
 8009646:	2b30      	cmp	r3, #48	@ 0x30
 8009648:	d0f9      	beq.n	800963e <_strtod_l+0x126>
 800964a:	2b00      	cmp	r3, #0
 800964c:	d09d      	beq.n	800958a <_strtod_l+0x72>
 800964e:	2301      	movs	r3, #1
 8009650:	9309      	str	r3, [sp, #36]	@ 0x24
 8009652:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009654:	930c      	str	r3, [sp, #48]	@ 0x30
 8009656:	2300      	movs	r3, #0
 8009658:	9308      	str	r3, [sp, #32]
 800965a:	930a      	str	r3, [sp, #40]	@ 0x28
 800965c:	461f      	mov	r7, r3
 800965e:	220a      	movs	r2, #10
 8009660:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009662:	7805      	ldrb	r5, [r0, #0]
 8009664:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009668:	b2d9      	uxtb	r1, r3
 800966a:	2909      	cmp	r1, #9
 800966c:	d928      	bls.n	80096c0 <_strtod_l+0x1a8>
 800966e:	494e      	ldr	r1, [pc, #312]	@ (80097a8 <_strtod_l+0x290>)
 8009670:	2201      	movs	r2, #1
 8009672:	f001 fb62 	bl	800ad3a <strncmp>
 8009676:	2800      	cmp	r0, #0
 8009678:	d032      	beq.n	80096e0 <_strtod_l+0x1c8>
 800967a:	2000      	movs	r0, #0
 800967c:	462a      	mov	r2, r5
 800967e:	4681      	mov	r9, r0
 8009680:	463d      	mov	r5, r7
 8009682:	4603      	mov	r3, r0
 8009684:	2a65      	cmp	r2, #101	@ 0x65
 8009686:	d001      	beq.n	800968c <_strtod_l+0x174>
 8009688:	2a45      	cmp	r2, #69	@ 0x45
 800968a:	d114      	bne.n	80096b6 <_strtod_l+0x19e>
 800968c:	b91d      	cbnz	r5, 8009696 <_strtod_l+0x17e>
 800968e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009690:	4302      	orrs	r2, r0
 8009692:	d095      	beq.n	80095c0 <_strtod_l+0xa8>
 8009694:	2500      	movs	r5, #0
 8009696:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009698:	1c62      	adds	r2, r4, #1
 800969a:	9219      	str	r2, [sp, #100]	@ 0x64
 800969c:	7862      	ldrb	r2, [r4, #1]
 800969e:	2a2b      	cmp	r2, #43	@ 0x2b
 80096a0:	d077      	beq.n	8009792 <_strtod_l+0x27a>
 80096a2:	2a2d      	cmp	r2, #45	@ 0x2d
 80096a4:	d07b      	beq.n	800979e <_strtod_l+0x286>
 80096a6:	f04f 0c00 	mov.w	ip, #0
 80096aa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80096ae:	2909      	cmp	r1, #9
 80096b0:	f240 8082 	bls.w	80097b8 <_strtod_l+0x2a0>
 80096b4:	9419      	str	r4, [sp, #100]	@ 0x64
 80096b6:	f04f 0800 	mov.w	r8, #0
 80096ba:	e0a2      	b.n	8009802 <_strtod_l+0x2ea>
 80096bc:	2300      	movs	r3, #0
 80096be:	e7c7      	b.n	8009650 <_strtod_l+0x138>
 80096c0:	2f08      	cmp	r7, #8
 80096c2:	bfd5      	itete	le
 80096c4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80096c6:	9908      	ldrgt	r1, [sp, #32]
 80096c8:	fb02 3301 	mlale	r3, r2, r1, r3
 80096cc:	fb02 3301 	mlagt	r3, r2, r1, r3
 80096d0:	f100 0001 	add.w	r0, r0, #1
 80096d4:	bfd4      	ite	le
 80096d6:	930a      	strle	r3, [sp, #40]	@ 0x28
 80096d8:	9308      	strgt	r3, [sp, #32]
 80096da:	3701      	adds	r7, #1
 80096dc:	9019      	str	r0, [sp, #100]	@ 0x64
 80096de:	e7bf      	b.n	8009660 <_strtod_l+0x148>
 80096e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096e2:	1c5a      	adds	r2, r3, #1
 80096e4:	9219      	str	r2, [sp, #100]	@ 0x64
 80096e6:	785a      	ldrb	r2, [r3, #1]
 80096e8:	b37f      	cbz	r7, 800974a <_strtod_l+0x232>
 80096ea:	4681      	mov	r9, r0
 80096ec:	463d      	mov	r5, r7
 80096ee:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80096f2:	2b09      	cmp	r3, #9
 80096f4:	d912      	bls.n	800971c <_strtod_l+0x204>
 80096f6:	2301      	movs	r3, #1
 80096f8:	e7c4      	b.n	8009684 <_strtod_l+0x16c>
 80096fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80096fc:	1c5a      	adds	r2, r3, #1
 80096fe:	9219      	str	r2, [sp, #100]	@ 0x64
 8009700:	785a      	ldrb	r2, [r3, #1]
 8009702:	3001      	adds	r0, #1
 8009704:	2a30      	cmp	r2, #48	@ 0x30
 8009706:	d0f8      	beq.n	80096fa <_strtod_l+0x1e2>
 8009708:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800970c:	2b08      	cmp	r3, #8
 800970e:	f200 84d3 	bhi.w	800a0b8 <_strtod_l+0xba0>
 8009712:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009714:	930c      	str	r3, [sp, #48]	@ 0x30
 8009716:	4681      	mov	r9, r0
 8009718:	2000      	movs	r0, #0
 800971a:	4605      	mov	r5, r0
 800971c:	3a30      	subs	r2, #48	@ 0x30
 800971e:	f100 0301 	add.w	r3, r0, #1
 8009722:	d02a      	beq.n	800977a <_strtod_l+0x262>
 8009724:	4499      	add	r9, r3
 8009726:	eb00 0c05 	add.w	ip, r0, r5
 800972a:	462b      	mov	r3, r5
 800972c:	210a      	movs	r1, #10
 800972e:	4563      	cmp	r3, ip
 8009730:	d10d      	bne.n	800974e <_strtod_l+0x236>
 8009732:	1c69      	adds	r1, r5, #1
 8009734:	4401      	add	r1, r0
 8009736:	4428      	add	r0, r5
 8009738:	2808      	cmp	r0, #8
 800973a:	dc16      	bgt.n	800976a <_strtod_l+0x252>
 800973c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800973e:	230a      	movs	r3, #10
 8009740:	fb03 2300 	mla	r3, r3, r0, r2
 8009744:	930a      	str	r3, [sp, #40]	@ 0x28
 8009746:	2300      	movs	r3, #0
 8009748:	e018      	b.n	800977c <_strtod_l+0x264>
 800974a:	4638      	mov	r0, r7
 800974c:	e7da      	b.n	8009704 <_strtod_l+0x1ec>
 800974e:	2b08      	cmp	r3, #8
 8009750:	f103 0301 	add.w	r3, r3, #1
 8009754:	dc03      	bgt.n	800975e <_strtod_l+0x246>
 8009756:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8009758:	434e      	muls	r6, r1
 800975a:	960a      	str	r6, [sp, #40]	@ 0x28
 800975c:	e7e7      	b.n	800972e <_strtod_l+0x216>
 800975e:	2b10      	cmp	r3, #16
 8009760:	bfde      	ittt	le
 8009762:	9e08      	ldrle	r6, [sp, #32]
 8009764:	434e      	mulle	r6, r1
 8009766:	9608      	strle	r6, [sp, #32]
 8009768:	e7e1      	b.n	800972e <_strtod_l+0x216>
 800976a:	280f      	cmp	r0, #15
 800976c:	dceb      	bgt.n	8009746 <_strtod_l+0x22e>
 800976e:	9808      	ldr	r0, [sp, #32]
 8009770:	230a      	movs	r3, #10
 8009772:	fb03 2300 	mla	r3, r3, r0, r2
 8009776:	9308      	str	r3, [sp, #32]
 8009778:	e7e5      	b.n	8009746 <_strtod_l+0x22e>
 800977a:	4629      	mov	r1, r5
 800977c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800977e:	1c50      	adds	r0, r2, #1
 8009780:	9019      	str	r0, [sp, #100]	@ 0x64
 8009782:	7852      	ldrb	r2, [r2, #1]
 8009784:	4618      	mov	r0, r3
 8009786:	460d      	mov	r5, r1
 8009788:	e7b1      	b.n	80096ee <_strtod_l+0x1d6>
 800978a:	f04f 0900 	mov.w	r9, #0
 800978e:	2301      	movs	r3, #1
 8009790:	e77d      	b.n	800968e <_strtod_l+0x176>
 8009792:	f04f 0c00 	mov.w	ip, #0
 8009796:	1ca2      	adds	r2, r4, #2
 8009798:	9219      	str	r2, [sp, #100]	@ 0x64
 800979a:	78a2      	ldrb	r2, [r4, #2]
 800979c:	e785      	b.n	80096aa <_strtod_l+0x192>
 800979e:	f04f 0c01 	mov.w	ip, #1
 80097a2:	e7f8      	b.n	8009796 <_strtod_l+0x27e>
 80097a4:	0800c0c0 	.word	0x0800c0c0
 80097a8:	0800c0a8 	.word	0x0800c0a8
 80097ac:	7ff00000 	.word	0x7ff00000
 80097b0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80097b2:	1c51      	adds	r1, r2, #1
 80097b4:	9119      	str	r1, [sp, #100]	@ 0x64
 80097b6:	7852      	ldrb	r2, [r2, #1]
 80097b8:	2a30      	cmp	r2, #48	@ 0x30
 80097ba:	d0f9      	beq.n	80097b0 <_strtod_l+0x298>
 80097bc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80097c0:	2908      	cmp	r1, #8
 80097c2:	f63f af78 	bhi.w	80096b6 <_strtod_l+0x19e>
 80097c6:	3a30      	subs	r2, #48	@ 0x30
 80097c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80097ca:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80097cc:	920f      	str	r2, [sp, #60]	@ 0x3c
 80097ce:	f04f 080a 	mov.w	r8, #10
 80097d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80097d4:	1c56      	adds	r6, r2, #1
 80097d6:	9619      	str	r6, [sp, #100]	@ 0x64
 80097d8:	7852      	ldrb	r2, [r2, #1]
 80097da:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80097de:	f1be 0f09 	cmp.w	lr, #9
 80097e2:	d939      	bls.n	8009858 <_strtod_l+0x340>
 80097e4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80097e6:	1a76      	subs	r6, r6, r1
 80097e8:	2e08      	cmp	r6, #8
 80097ea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80097ee:	dc03      	bgt.n	80097f8 <_strtod_l+0x2e0>
 80097f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80097f2:	4588      	cmp	r8, r1
 80097f4:	bfa8      	it	ge
 80097f6:	4688      	movge	r8, r1
 80097f8:	f1bc 0f00 	cmp.w	ip, #0
 80097fc:	d001      	beq.n	8009802 <_strtod_l+0x2ea>
 80097fe:	f1c8 0800 	rsb	r8, r8, #0
 8009802:	2d00      	cmp	r5, #0
 8009804:	d14e      	bne.n	80098a4 <_strtod_l+0x38c>
 8009806:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009808:	4308      	orrs	r0, r1
 800980a:	f47f aebe 	bne.w	800958a <_strtod_l+0x72>
 800980e:	2b00      	cmp	r3, #0
 8009810:	f47f aed6 	bne.w	80095c0 <_strtod_l+0xa8>
 8009814:	2a69      	cmp	r2, #105	@ 0x69
 8009816:	d028      	beq.n	800986a <_strtod_l+0x352>
 8009818:	dc25      	bgt.n	8009866 <_strtod_l+0x34e>
 800981a:	2a49      	cmp	r2, #73	@ 0x49
 800981c:	d025      	beq.n	800986a <_strtod_l+0x352>
 800981e:	2a4e      	cmp	r2, #78	@ 0x4e
 8009820:	f47f aece 	bne.w	80095c0 <_strtod_l+0xa8>
 8009824:	499b      	ldr	r1, [pc, #620]	@ (8009a94 <_strtod_l+0x57c>)
 8009826:	a819      	add	r0, sp, #100	@ 0x64
 8009828:	f001 fd7e 	bl	800b328 <__match>
 800982c:	2800      	cmp	r0, #0
 800982e:	f43f aec7 	beq.w	80095c0 <_strtod_l+0xa8>
 8009832:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	2b28      	cmp	r3, #40	@ 0x28
 8009838:	d12e      	bne.n	8009898 <_strtod_l+0x380>
 800983a:	4997      	ldr	r1, [pc, #604]	@ (8009a98 <_strtod_l+0x580>)
 800983c:	aa1c      	add	r2, sp, #112	@ 0x70
 800983e:	a819      	add	r0, sp, #100	@ 0x64
 8009840:	f001 fd86 	bl	800b350 <__hexnan>
 8009844:	2805      	cmp	r0, #5
 8009846:	d127      	bne.n	8009898 <_strtod_l+0x380>
 8009848:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800984a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800984e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009852:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009856:	e698      	b.n	800958a <_strtod_l+0x72>
 8009858:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800985a:	fb08 2101 	mla	r1, r8, r1, r2
 800985e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009862:	920e      	str	r2, [sp, #56]	@ 0x38
 8009864:	e7b5      	b.n	80097d2 <_strtod_l+0x2ba>
 8009866:	2a6e      	cmp	r2, #110	@ 0x6e
 8009868:	e7da      	b.n	8009820 <_strtod_l+0x308>
 800986a:	498c      	ldr	r1, [pc, #560]	@ (8009a9c <_strtod_l+0x584>)
 800986c:	a819      	add	r0, sp, #100	@ 0x64
 800986e:	f001 fd5b 	bl	800b328 <__match>
 8009872:	2800      	cmp	r0, #0
 8009874:	f43f aea4 	beq.w	80095c0 <_strtod_l+0xa8>
 8009878:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800987a:	4989      	ldr	r1, [pc, #548]	@ (8009aa0 <_strtod_l+0x588>)
 800987c:	3b01      	subs	r3, #1
 800987e:	a819      	add	r0, sp, #100	@ 0x64
 8009880:	9319      	str	r3, [sp, #100]	@ 0x64
 8009882:	f001 fd51 	bl	800b328 <__match>
 8009886:	b910      	cbnz	r0, 800988e <_strtod_l+0x376>
 8009888:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800988a:	3301      	adds	r3, #1
 800988c:	9319      	str	r3, [sp, #100]	@ 0x64
 800988e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009ab0 <_strtod_l+0x598>
 8009892:	f04f 0a00 	mov.w	sl, #0
 8009896:	e678      	b.n	800958a <_strtod_l+0x72>
 8009898:	4882      	ldr	r0, [pc, #520]	@ (8009aa4 <_strtod_l+0x58c>)
 800989a:	f001 fa81 	bl	800ada0 <nan>
 800989e:	ec5b ab10 	vmov	sl, fp, d0
 80098a2:	e672      	b.n	800958a <_strtod_l+0x72>
 80098a4:	eba8 0309 	sub.w	r3, r8, r9
 80098a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80098aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80098ac:	2f00      	cmp	r7, #0
 80098ae:	bf08      	it	eq
 80098b0:	462f      	moveq	r7, r5
 80098b2:	2d10      	cmp	r5, #16
 80098b4:	462c      	mov	r4, r5
 80098b6:	bfa8      	it	ge
 80098b8:	2410      	movge	r4, #16
 80098ba:	f7f6 fe2b 	bl	8000514 <__aeabi_ui2d>
 80098be:	2d09      	cmp	r5, #9
 80098c0:	4682      	mov	sl, r0
 80098c2:	468b      	mov	fp, r1
 80098c4:	dc13      	bgt.n	80098ee <_strtod_l+0x3d6>
 80098c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	f43f ae5e 	beq.w	800958a <_strtod_l+0x72>
 80098ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098d0:	dd78      	ble.n	80099c4 <_strtod_l+0x4ac>
 80098d2:	2b16      	cmp	r3, #22
 80098d4:	dc5f      	bgt.n	8009996 <_strtod_l+0x47e>
 80098d6:	4974      	ldr	r1, [pc, #464]	@ (8009aa8 <_strtod_l+0x590>)
 80098d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80098dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098e0:	4652      	mov	r2, sl
 80098e2:	465b      	mov	r3, fp
 80098e4:	f7f6 fe90 	bl	8000608 <__aeabi_dmul>
 80098e8:	4682      	mov	sl, r0
 80098ea:	468b      	mov	fp, r1
 80098ec:	e64d      	b.n	800958a <_strtod_l+0x72>
 80098ee:	4b6e      	ldr	r3, [pc, #440]	@ (8009aa8 <_strtod_l+0x590>)
 80098f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80098f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80098f8:	f7f6 fe86 	bl	8000608 <__aeabi_dmul>
 80098fc:	4682      	mov	sl, r0
 80098fe:	9808      	ldr	r0, [sp, #32]
 8009900:	468b      	mov	fp, r1
 8009902:	f7f6 fe07 	bl	8000514 <__aeabi_ui2d>
 8009906:	4602      	mov	r2, r0
 8009908:	460b      	mov	r3, r1
 800990a:	4650      	mov	r0, sl
 800990c:	4659      	mov	r1, fp
 800990e:	f7f6 fcc5 	bl	800029c <__adddf3>
 8009912:	2d0f      	cmp	r5, #15
 8009914:	4682      	mov	sl, r0
 8009916:	468b      	mov	fp, r1
 8009918:	ddd5      	ble.n	80098c6 <_strtod_l+0x3ae>
 800991a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800991c:	1b2c      	subs	r4, r5, r4
 800991e:	441c      	add	r4, r3
 8009920:	2c00      	cmp	r4, #0
 8009922:	f340 8096 	ble.w	8009a52 <_strtod_l+0x53a>
 8009926:	f014 030f 	ands.w	r3, r4, #15
 800992a:	d00a      	beq.n	8009942 <_strtod_l+0x42a>
 800992c:	495e      	ldr	r1, [pc, #376]	@ (8009aa8 <_strtod_l+0x590>)
 800992e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009932:	4652      	mov	r2, sl
 8009934:	465b      	mov	r3, fp
 8009936:	e9d1 0100 	ldrd	r0, r1, [r1]
 800993a:	f7f6 fe65 	bl	8000608 <__aeabi_dmul>
 800993e:	4682      	mov	sl, r0
 8009940:	468b      	mov	fp, r1
 8009942:	f034 040f 	bics.w	r4, r4, #15
 8009946:	d073      	beq.n	8009a30 <_strtod_l+0x518>
 8009948:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800994c:	dd48      	ble.n	80099e0 <_strtod_l+0x4c8>
 800994e:	2400      	movs	r4, #0
 8009950:	46a0      	mov	r8, r4
 8009952:	940a      	str	r4, [sp, #40]	@ 0x28
 8009954:	46a1      	mov	r9, r4
 8009956:	9a05      	ldr	r2, [sp, #20]
 8009958:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009ab0 <_strtod_l+0x598>
 800995c:	2322      	movs	r3, #34	@ 0x22
 800995e:	6013      	str	r3, [r2, #0]
 8009960:	f04f 0a00 	mov.w	sl, #0
 8009964:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009966:	2b00      	cmp	r3, #0
 8009968:	f43f ae0f 	beq.w	800958a <_strtod_l+0x72>
 800996c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800996e:	9805      	ldr	r0, [sp, #20]
 8009970:	f7ff f942 	bl	8008bf8 <_Bfree>
 8009974:	9805      	ldr	r0, [sp, #20]
 8009976:	4649      	mov	r1, r9
 8009978:	f7ff f93e 	bl	8008bf8 <_Bfree>
 800997c:	9805      	ldr	r0, [sp, #20]
 800997e:	4641      	mov	r1, r8
 8009980:	f7ff f93a 	bl	8008bf8 <_Bfree>
 8009984:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009986:	9805      	ldr	r0, [sp, #20]
 8009988:	f7ff f936 	bl	8008bf8 <_Bfree>
 800998c:	9805      	ldr	r0, [sp, #20]
 800998e:	4621      	mov	r1, r4
 8009990:	f7ff f932 	bl	8008bf8 <_Bfree>
 8009994:	e5f9      	b.n	800958a <_strtod_l+0x72>
 8009996:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009998:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800999c:	4293      	cmp	r3, r2
 800999e:	dbbc      	blt.n	800991a <_strtod_l+0x402>
 80099a0:	4c41      	ldr	r4, [pc, #260]	@ (8009aa8 <_strtod_l+0x590>)
 80099a2:	f1c5 050f 	rsb	r5, r5, #15
 80099a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80099aa:	4652      	mov	r2, sl
 80099ac:	465b      	mov	r3, fp
 80099ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099b2:	f7f6 fe29 	bl	8000608 <__aeabi_dmul>
 80099b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099b8:	1b5d      	subs	r5, r3, r5
 80099ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80099be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80099c2:	e78f      	b.n	80098e4 <_strtod_l+0x3cc>
 80099c4:	3316      	adds	r3, #22
 80099c6:	dba8      	blt.n	800991a <_strtod_l+0x402>
 80099c8:	4b37      	ldr	r3, [pc, #220]	@ (8009aa8 <_strtod_l+0x590>)
 80099ca:	eba9 0808 	sub.w	r8, r9, r8
 80099ce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80099d2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80099d6:	4650      	mov	r0, sl
 80099d8:	4659      	mov	r1, fp
 80099da:	f7f6 ff3f 	bl	800085c <__aeabi_ddiv>
 80099de:	e783      	b.n	80098e8 <_strtod_l+0x3d0>
 80099e0:	4b32      	ldr	r3, [pc, #200]	@ (8009aac <_strtod_l+0x594>)
 80099e2:	9308      	str	r3, [sp, #32]
 80099e4:	2300      	movs	r3, #0
 80099e6:	1124      	asrs	r4, r4, #4
 80099e8:	4650      	mov	r0, sl
 80099ea:	4659      	mov	r1, fp
 80099ec:	461e      	mov	r6, r3
 80099ee:	2c01      	cmp	r4, #1
 80099f0:	dc21      	bgt.n	8009a36 <_strtod_l+0x51e>
 80099f2:	b10b      	cbz	r3, 80099f8 <_strtod_l+0x4e0>
 80099f4:	4682      	mov	sl, r0
 80099f6:	468b      	mov	fp, r1
 80099f8:	492c      	ldr	r1, [pc, #176]	@ (8009aac <_strtod_l+0x594>)
 80099fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80099fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009a02:	4652      	mov	r2, sl
 8009a04:	465b      	mov	r3, fp
 8009a06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a0a:	f7f6 fdfd 	bl	8000608 <__aeabi_dmul>
 8009a0e:	4b28      	ldr	r3, [pc, #160]	@ (8009ab0 <_strtod_l+0x598>)
 8009a10:	460a      	mov	r2, r1
 8009a12:	400b      	ands	r3, r1
 8009a14:	4927      	ldr	r1, [pc, #156]	@ (8009ab4 <_strtod_l+0x59c>)
 8009a16:	428b      	cmp	r3, r1
 8009a18:	4682      	mov	sl, r0
 8009a1a:	d898      	bhi.n	800994e <_strtod_l+0x436>
 8009a1c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009a20:	428b      	cmp	r3, r1
 8009a22:	bf86      	itte	hi
 8009a24:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009ab8 <_strtod_l+0x5a0>
 8009a28:	f04f 3aff 	movhi.w	sl, #4294967295
 8009a2c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009a30:	2300      	movs	r3, #0
 8009a32:	9308      	str	r3, [sp, #32]
 8009a34:	e07a      	b.n	8009b2c <_strtod_l+0x614>
 8009a36:	07e2      	lsls	r2, r4, #31
 8009a38:	d505      	bpl.n	8009a46 <_strtod_l+0x52e>
 8009a3a:	9b08      	ldr	r3, [sp, #32]
 8009a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a40:	f7f6 fde2 	bl	8000608 <__aeabi_dmul>
 8009a44:	2301      	movs	r3, #1
 8009a46:	9a08      	ldr	r2, [sp, #32]
 8009a48:	3208      	adds	r2, #8
 8009a4a:	3601      	adds	r6, #1
 8009a4c:	1064      	asrs	r4, r4, #1
 8009a4e:	9208      	str	r2, [sp, #32]
 8009a50:	e7cd      	b.n	80099ee <_strtod_l+0x4d6>
 8009a52:	d0ed      	beq.n	8009a30 <_strtod_l+0x518>
 8009a54:	4264      	negs	r4, r4
 8009a56:	f014 020f 	ands.w	r2, r4, #15
 8009a5a:	d00a      	beq.n	8009a72 <_strtod_l+0x55a>
 8009a5c:	4b12      	ldr	r3, [pc, #72]	@ (8009aa8 <_strtod_l+0x590>)
 8009a5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a62:	4650      	mov	r0, sl
 8009a64:	4659      	mov	r1, fp
 8009a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a6a:	f7f6 fef7 	bl	800085c <__aeabi_ddiv>
 8009a6e:	4682      	mov	sl, r0
 8009a70:	468b      	mov	fp, r1
 8009a72:	1124      	asrs	r4, r4, #4
 8009a74:	d0dc      	beq.n	8009a30 <_strtod_l+0x518>
 8009a76:	2c1f      	cmp	r4, #31
 8009a78:	dd20      	ble.n	8009abc <_strtod_l+0x5a4>
 8009a7a:	2400      	movs	r4, #0
 8009a7c:	46a0      	mov	r8, r4
 8009a7e:	940a      	str	r4, [sp, #40]	@ 0x28
 8009a80:	46a1      	mov	r9, r4
 8009a82:	9a05      	ldr	r2, [sp, #20]
 8009a84:	2322      	movs	r3, #34	@ 0x22
 8009a86:	f04f 0a00 	mov.w	sl, #0
 8009a8a:	f04f 0b00 	mov.w	fp, #0
 8009a8e:	6013      	str	r3, [r2, #0]
 8009a90:	e768      	b.n	8009964 <_strtod_l+0x44c>
 8009a92:	bf00      	nop
 8009a94:	0800be99 	.word	0x0800be99
 8009a98:	0800c0ac 	.word	0x0800c0ac
 8009a9c:	0800be91 	.word	0x0800be91
 8009aa0:	0800bec6 	.word	0x0800bec6
 8009aa4:	0800c270 	.word	0x0800c270
 8009aa8:	0800bfe0 	.word	0x0800bfe0
 8009aac:	0800bfb8 	.word	0x0800bfb8
 8009ab0:	7ff00000 	.word	0x7ff00000
 8009ab4:	7ca00000 	.word	0x7ca00000
 8009ab8:	7fefffff 	.word	0x7fefffff
 8009abc:	f014 0310 	ands.w	r3, r4, #16
 8009ac0:	bf18      	it	ne
 8009ac2:	236a      	movne	r3, #106	@ 0x6a
 8009ac4:	4ea9      	ldr	r6, [pc, #676]	@ (8009d6c <_strtod_l+0x854>)
 8009ac6:	9308      	str	r3, [sp, #32]
 8009ac8:	4650      	mov	r0, sl
 8009aca:	4659      	mov	r1, fp
 8009acc:	2300      	movs	r3, #0
 8009ace:	07e2      	lsls	r2, r4, #31
 8009ad0:	d504      	bpl.n	8009adc <_strtod_l+0x5c4>
 8009ad2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ad6:	f7f6 fd97 	bl	8000608 <__aeabi_dmul>
 8009ada:	2301      	movs	r3, #1
 8009adc:	1064      	asrs	r4, r4, #1
 8009ade:	f106 0608 	add.w	r6, r6, #8
 8009ae2:	d1f4      	bne.n	8009ace <_strtod_l+0x5b6>
 8009ae4:	b10b      	cbz	r3, 8009aea <_strtod_l+0x5d2>
 8009ae6:	4682      	mov	sl, r0
 8009ae8:	468b      	mov	fp, r1
 8009aea:	9b08      	ldr	r3, [sp, #32]
 8009aec:	b1b3      	cbz	r3, 8009b1c <_strtod_l+0x604>
 8009aee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009af2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	4659      	mov	r1, fp
 8009afa:	dd0f      	ble.n	8009b1c <_strtod_l+0x604>
 8009afc:	2b1f      	cmp	r3, #31
 8009afe:	dd55      	ble.n	8009bac <_strtod_l+0x694>
 8009b00:	2b34      	cmp	r3, #52	@ 0x34
 8009b02:	bfde      	ittt	le
 8009b04:	f04f 33ff 	movle.w	r3, #4294967295
 8009b08:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009b0c:	4093      	lslle	r3, r2
 8009b0e:	f04f 0a00 	mov.w	sl, #0
 8009b12:	bfcc      	ite	gt
 8009b14:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009b18:	ea03 0b01 	andle.w	fp, r3, r1
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	2300      	movs	r3, #0
 8009b20:	4650      	mov	r0, sl
 8009b22:	4659      	mov	r1, fp
 8009b24:	f7f6 ffd8 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	d1a6      	bne.n	8009a7a <_strtod_l+0x562>
 8009b2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b2e:	9300      	str	r3, [sp, #0]
 8009b30:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009b32:	9805      	ldr	r0, [sp, #20]
 8009b34:	462b      	mov	r3, r5
 8009b36:	463a      	mov	r2, r7
 8009b38:	f7ff f8c6 	bl	8008cc8 <__s2b>
 8009b3c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	f43f af05 	beq.w	800994e <_strtod_l+0x436>
 8009b44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b46:	2a00      	cmp	r2, #0
 8009b48:	eba9 0308 	sub.w	r3, r9, r8
 8009b4c:	bfa8      	it	ge
 8009b4e:	2300      	movge	r3, #0
 8009b50:	9312      	str	r3, [sp, #72]	@ 0x48
 8009b52:	2400      	movs	r4, #0
 8009b54:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009b58:	9316      	str	r3, [sp, #88]	@ 0x58
 8009b5a:	46a0      	mov	r8, r4
 8009b5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b5e:	9805      	ldr	r0, [sp, #20]
 8009b60:	6859      	ldr	r1, [r3, #4]
 8009b62:	f7ff f809 	bl	8008b78 <_Balloc>
 8009b66:	4681      	mov	r9, r0
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	f43f aef4 	beq.w	8009956 <_strtod_l+0x43e>
 8009b6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b70:	691a      	ldr	r2, [r3, #16]
 8009b72:	3202      	adds	r2, #2
 8009b74:	f103 010c 	add.w	r1, r3, #12
 8009b78:	0092      	lsls	r2, r2, #2
 8009b7a:	300c      	adds	r0, #12
 8009b7c:	f001 f900 	bl	800ad80 <memcpy>
 8009b80:	ec4b ab10 	vmov	d0, sl, fp
 8009b84:	9805      	ldr	r0, [sp, #20]
 8009b86:	aa1c      	add	r2, sp, #112	@ 0x70
 8009b88:	a91b      	add	r1, sp, #108	@ 0x6c
 8009b8a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009b8e:	f7ff fbd7 	bl	8009340 <__d2b>
 8009b92:	901a      	str	r0, [sp, #104]	@ 0x68
 8009b94:	2800      	cmp	r0, #0
 8009b96:	f43f aede 	beq.w	8009956 <_strtod_l+0x43e>
 8009b9a:	9805      	ldr	r0, [sp, #20]
 8009b9c:	2101      	movs	r1, #1
 8009b9e:	f7ff f929 	bl	8008df4 <__i2b>
 8009ba2:	4680      	mov	r8, r0
 8009ba4:	b948      	cbnz	r0, 8009bba <_strtod_l+0x6a2>
 8009ba6:	f04f 0800 	mov.w	r8, #0
 8009baa:	e6d4      	b.n	8009956 <_strtod_l+0x43e>
 8009bac:	f04f 32ff 	mov.w	r2, #4294967295
 8009bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8009bb4:	ea03 0a0a 	and.w	sl, r3, sl
 8009bb8:	e7b0      	b.n	8009b1c <_strtod_l+0x604>
 8009bba:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009bbc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009bbe:	2d00      	cmp	r5, #0
 8009bc0:	bfab      	itete	ge
 8009bc2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8009bc4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009bc6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009bc8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009bca:	bfac      	ite	ge
 8009bcc:	18ef      	addge	r7, r5, r3
 8009bce:	1b5e      	sublt	r6, r3, r5
 8009bd0:	9b08      	ldr	r3, [sp, #32]
 8009bd2:	1aed      	subs	r5, r5, r3
 8009bd4:	4415      	add	r5, r2
 8009bd6:	4b66      	ldr	r3, [pc, #408]	@ (8009d70 <_strtod_l+0x858>)
 8009bd8:	3d01      	subs	r5, #1
 8009bda:	429d      	cmp	r5, r3
 8009bdc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009be0:	da50      	bge.n	8009c84 <_strtod_l+0x76c>
 8009be2:	1b5b      	subs	r3, r3, r5
 8009be4:	2b1f      	cmp	r3, #31
 8009be6:	eba2 0203 	sub.w	r2, r2, r3
 8009bea:	f04f 0101 	mov.w	r1, #1
 8009bee:	dc3d      	bgt.n	8009c6c <_strtod_l+0x754>
 8009bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8009bf4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	9310      	str	r3, [sp, #64]	@ 0x40
 8009bfa:	18bd      	adds	r5, r7, r2
 8009bfc:	9b08      	ldr	r3, [sp, #32]
 8009bfe:	42af      	cmp	r7, r5
 8009c00:	4416      	add	r6, r2
 8009c02:	441e      	add	r6, r3
 8009c04:	463b      	mov	r3, r7
 8009c06:	bfa8      	it	ge
 8009c08:	462b      	movge	r3, r5
 8009c0a:	42b3      	cmp	r3, r6
 8009c0c:	bfa8      	it	ge
 8009c0e:	4633      	movge	r3, r6
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	bfc2      	ittt	gt
 8009c14:	1aed      	subgt	r5, r5, r3
 8009c16:	1af6      	subgt	r6, r6, r3
 8009c18:	1aff      	subgt	r7, r7, r3
 8009c1a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	dd16      	ble.n	8009c4e <_strtod_l+0x736>
 8009c20:	4641      	mov	r1, r8
 8009c22:	9805      	ldr	r0, [sp, #20]
 8009c24:	461a      	mov	r2, r3
 8009c26:	f7ff f9a5 	bl	8008f74 <__pow5mult>
 8009c2a:	4680      	mov	r8, r0
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	d0ba      	beq.n	8009ba6 <_strtod_l+0x68e>
 8009c30:	4601      	mov	r1, r0
 8009c32:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009c34:	9805      	ldr	r0, [sp, #20]
 8009c36:	f7ff f8f3 	bl	8008e20 <__multiply>
 8009c3a:	900e      	str	r0, [sp, #56]	@ 0x38
 8009c3c:	2800      	cmp	r0, #0
 8009c3e:	f43f ae8a 	beq.w	8009956 <_strtod_l+0x43e>
 8009c42:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c44:	9805      	ldr	r0, [sp, #20]
 8009c46:	f7fe ffd7 	bl	8008bf8 <_Bfree>
 8009c4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c4c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009c4e:	2d00      	cmp	r5, #0
 8009c50:	dc1d      	bgt.n	8009c8e <_strtod_l+0x776>
 8009c52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	dd23      	ble.n	8009ca0 <_strtod_l+0x788>
 8009c58:	4649      	mov	r1, r9
 8009c5a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009c5c:	9805      	ldr	r0, [sp, #20]
 8009c5e:	f7ff f989 	bl	8008f74 <__pow5mult>
 8009c62:	4681      	mov	r9, r0
 8009c64:	b9e0      	cbnz	r0, 8009ca0 <_strtod_l+0x788>
 8009c66:	f04f 0900 	mov.w	r9, #0
 8009c6a:	e674      	b.n	8009956 <_strtod_l+0x43e>
 8009c6c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009c70:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8009c74:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009c78:	35e2      	adds	r5, #226	@ 0xe2
 8009c7a:	fa01 f305 	lsl.w	r3, r1, r5
 8009c7e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009c80:	9113      	str	r1, [sp, #76]	@ 0x4c
 8009c82:	e7ba      	b.n	8009bfa <_strtod_l+0x6e2>
 8009c84:	2300      	movs	r3, #0
 8009c86:	9310      	str	r3, [sp, #64]	@ 0x40
 8009c88:	2301      	movs	r3, #1
 8009c8a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009c8c:	e7b5      	b.n	8009bfa <_strtod_l+0x6e2>
 8009c8e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009c90:	9805      	ldr	r0, [sp, #20]
 8009c92:	462a      	mov	r2, r5
 8009c94:	f7ff f9c8 	bl	8009028 <__lshift>
 8009c98:	901a      	str	r0, [sp, #104]	@ 0x68
 8009c9a:	2800      	cmp	r0, #0
 8009c9c:	d1d9      	bne.n	8009c52 <_strtod_l+0x73a>
 8009c9e:	e65a      	b.n	8009956 <_strtod_l+0x43e>
 8009ca0:	2e00      	cmp	r6, #0
 8009ca2:	dd07      	ble.n	8009cb4 <_strtod_l+0x79c>
 8009ca4:	4649      	mov	r1, r9
 8009ca6:	9805      	ldr	r0, [sp, #20]
 8009ca8:	4632      	mov	r2, r6
 8009caa:	f7ff f9bd 	bl	8009028 <__lshift>
 8009cae:	4681      	mov	r9, r0
 8009cb0:	2800      	cmp	r0, #0
 8009cb2:	d0d8      	beq.n	8009c66 <_strtod_l+0x74e>
 8009cb4:	2f00      	cmp	r7, #0
 8009cb6:	dd08      	ble.n	8009cca <_strtod_l+0x7b2>
 8009cb8:	4641      	mov	r1, r8
 8009cba:	9805      	ldr	r0, [sp, #20]
 8009cbc:	463a      	mov	r2, r7
 8009cbe:	f7ff f9b3 	bl	8009028 <__lshift>
 8009cc2:	4680      	mov	r8, r0
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	f43f ae46 	beq.w	8009956 <_strtod_l+0x43e>
 8009cca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ccc:	9805      	ldr	r0, [sp, #20]
 8009cce:	464a      	mov	r2, r9
 8009cd0:	f7ff fa32 	bl	8009138 <__mdiff>
 8009cd4:	4604      	mov	r4, r0
 8009cd6:	2800      	cmp	r0, #0
 8009cd8:	f43f ae3d 	beq.w	8009956 <_strtod_l+0x43e>
 8009cdc:	68c3      	ldr	r3, [r0, #12]
 8009cde:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	60c3      	str	r3, [r0, #12]
 8009ce4:	4641      	mov	r1, r8
 8009ce6:	f7ff fa0b 	bl	8009100 <__mcmp>
 8009cea:	2800      	cmp	r0, #0
 8009cec:	da46      	bge.n	8009d7c <_strtod_l+0x864>
 8009cee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cf0:	ea53 030a 	orrs.w	r3, r3, sl
 8009cf4:	d16c      	bne.n	8009dd0 <_strtod_l+0x8b8>
 8009cf6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d168      	bne.n	8009dd0 <_strtod_l+0x8b8>
 8009cfe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d02:	0d1b      	lsrs	r3, r3, #20
 8009d04:	051b      	lsls	r3, r3, #20
 8009d06:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009d0a:	d961      	bls.n	8009dd0 <_strtod_l+0x8b8>
 8009d0c:	6963      	ldr	r3, [r4, #20]
 8009d0e:	b913      	cbnz	r3, 8009d16 <_strtod_l+0x7fe>
 8009d10:	6923      	ldr	r3, [r4, #16]
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	dd5c      	ble.n	8009dd0 <_strtod_l+0x8b8>
 8009d16:	4621      	mov	r1, r4
 8009d18:	2201      	movs	r2, #1
 8009d1a:	9805      	ldr	r0, [sp, #20]
 8009d1c:	f7ff f984 	bl	8009028 <__lshift>
 8009d20:	4641      	mov	r1, r8
 8009d22:	4604      	mov	r4, r0
 8009d24:	f7ff f9ec 	bl	8009100 <__mcmp>
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	dd51      	ble.n	8009dd0 <_strtod_l+0x8b8>
 8009d2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009d30:	9a08      	ldr	r2, [sp, #32]
 8009d32:	0d1b      	lsrs	r3, r3, #20
 8009d34:	051b      	lsls	r3, r3, #20
 8009d36:	2a00      	cmp	r2, #0
 8009d38:	d06b      	beq.n	8009e12 <_strtod_l+0x8fa>
 8009d3a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009d3e:	d868      	bhi.n	8009e12 <_strtod_l+0x8fa>
 8009d40:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009d44:	f67f ae9d 	bls.w	8009a82 <_strtod_l+0x56a>
 8009d48:	4b0a      	ldr	r3, [pc, #40]	@ (8009d74 <_strtod_l+0x85c>)
 8009d4a:	4650      	mov	r0, sl
 8009d4c:	4659      	mov	r1, fp
 8009d4e:	2200      	movs	r2, #0
 8009d50:	f7f6 fc5a 	bl	8000608 <__aeabi_dmul>
 8009d54:	4b08      	ldr	r3, [pc, #32]	@ (8009d78 <_strtod_l+0x860>)
 8009d56:	400b      	ands	r3, r1
 8009d58:	4682      	mov	sl, r0
 8009d5a:	468b      	mov	fp, r1
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	f47f ae05 	bne.w	800996c <_strtod_l+0x454>
 8009d62:	9a05      	ldr	r2, [sp, #20]
 8009d64:	2322      	movs	r3, #34	@ 0x22
 8009d66:	6013      	str	r3, [r2, #0]
 8009d68:	e600      	b.n	800996c <_strtod_l+0x454>
 8009d6a:	bf00      	nop
 8009d6c:	0800c0d8 	.word	0x0800c0d8
 8009d70:	fffffc02 	.word	0xfffffc02
 8009d74:	39500000 	.word	0x39500000
 8009d78:	7ff00000 	.word	0x7ff00000
 8009d7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009d80:	d165      	bne.n	8009e4e <_strtod_l+0x936>
 8009d82:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009d84:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d88:	b35a      	cbz	r2, 8009de2 <_strtod_l+0x8ca>
 8009d8a:	4a9f      	ldr	r2, [pc, #636]	@ (800a008 <_strtod_l+0xaf0>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d12b      	bne.n	8009de8 <_strtod_l+0x8d0>
 8009d90:	9b08      	ldr	r3, [sp, #32]
 8009d92:	4651      	mov	r1, sl
 8009d94:	b303      	cbz	r3, 8009dd8 <_strtod_l+0x8c0>
 8009d96:	4b9d      	ldr	r3, [pc, #628]	@ (800a00c <_strtod_l+0xaf4>)
 8009d98:	465a      	mov	r2, fp
 8009d9a:	4013      	ands	r3, r2
 8009d9c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009da0:	f04f 32ff 	mov.w	r2, #4294967295
 8009da4:	d81b      	bhi.n	8009dde <_strtod_l+0x8c6>
 8009da6:	0d1b      	lsrs	r3, r3, #20
 8009da8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009dac:	fa02 f303 	lsl.w	r3, r2, r3
 8009db0:	4299      	cmp	r1, r3
 8009db2:	d119      	bne.n	8009de8 <_strtod_l+0x8d0>
 8009db4:	4b96      	ldr	r3, [pc, #600]	@ (800a010 <_strtod_l+0xaf8>)
 8009db6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009db8:	429a      	cmp	r2, r3
 8009dba:	d102      	bne.n	8009dc2 <_strtod_l+0x8aa>
 8009dbc:	3101      	adds	r1, #1
 8009dbe:	f43f adca 	beq.w	8009956 <_strtod_l+0x43e>
 8009dc2:	4b92      	ldr	r3, [pc, #584]	@ (800a00c <_strtod_l+0xaf4>)
 8009dc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009dc6:	401a      	ands	r2, r3
 8009dc8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009dcc:	f04f 0a00 	mov.w	sl, #0
 8009dd0:	9b08      	ldr	r3, [sp, #32]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1b8      	bne.n	8009d48 <_strtod_l+0x830>
 8009dd6:	e5c9      	b.n	800996c <_strtod_l+0x454>
 8009dd8:	f04f 33ff 	mov.w	r3, #4294967295
 8009ddc:	e7e8      	b.n	8009db0 <_strtod_l+0x898>
 8009dde:	4613      	mov	r3, r2
 8009de0:	e7e6      	b.n	8009db0 <_strtod_l+0x898>
 8009de2:	ea53 030a 	orrs.w	r3, r3, sl
 8009de6:	d0a1      	beq.n	8009d2c <_strtod_l+0x814>
 8009de8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009dea:	b1db      	cbz	r3, 8009e24 <_strtod_l+0x90c>
 8009dec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009dee:	4213      	tst	r3, r2
 8009df0:	d0ee      	beq.n	8009dd0 <_strtod_l+0x8b8>
 8009df2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009df4:	9a08      	ldr	r2, [sp, #32]
 8009df6:	4650      	mov	r0, sl
 8009df8:	4659      	mov	r1, fp
 8009dfa:	b1bb      	cbz	r3, 8009e2c <_strtod_l+0x914>
 8009dfc:	f7ff fb6e 	bl	80094dc <sulp>
 8009e00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e04:	ec53 2b10 	vmov	r2, r3, d0
 8009e08:	f7f6 fa48 	bl	800029c <__adddf3>
 8009e0c:	4682      	mov	sl, r0
 8009e0e:	468b      	mov	fp, r1
 8009e10:	e7de      	b.n	8009dd0 <_strtod_l+0x8b8>
 8009e12:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009e16:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009e1a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009e1e:	f04f 3aff 	mov.w	sl, #4294967295
 8009e22:	e7d5      	b.n	8009dd0 <_strtod_l+0x8b8>
 8009e24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009e26:	ea13 0f0a 	tst.w	r3, sl
 8009e2a:	e7e1      	b.n	8009df0 <_strtod_l+0x8d8>
 8009e2c:	f7ff fb56 	bl	80094dc <sulp>
 8009e30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e34:	ec53 2b10 	vmov	r2, r3, d0
 8009e38:	f7f6 fa2e 	bl	8000298 <__aeabi_dsub>
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	2300      	movs	r3, #0
 8009e40:	4682      	mov	sl, r0
 8009e42:	468b      	mov	fp, r1
 8009e44:	f7f6 fe48 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e48:	2800      	cmp	r0, #0
 8009e4a:	d0c1      	beq.n	8009dd0 <_strtod_l+0x8b8>
 8009e4c:	e619      	b.n	8009a82 <_strtod_l+0x56a>
 8009e4e:	4641      	mov	r1, r8
 8009e50:	4620      	mov	r0, r4
 8009e52:	f7ff facd 	bl	80093f0 <__ratio>
 8009e56:	ec57 6b10 	vmov	r6, r7, d0
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009e60:	4630      	mov	r0, r6
 8009e62:	4639      	mov	r1, r7
 8009e64:	f7f6 fe4c 	bl	8000b00 <__aeabi_dcmple>
 8009e68:	2800      	cmp	r0, #0
 8009e6a:	d06f      	beq.n	8009f4c <_strtod_l+0xa34>
 8009e6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d17a      	bne.n	8009f68 <_strtod_l+0xa50>
 8009e72:	f1ba 0f00 	cmp.w	sl, #0
 8009e76:	d158      	bne.n	8009f2a <_strtod_l+0xa12>
 8009e78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d15a      	bne.n	8009f38 <_strtod_l+0xa20>
 8009e82:	4b64      	ldr	r3, [pc, #400]	@ (800a014 <_strtod_l+0xafc>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	4630      	mov	r0, r6
 8009e88:	4639      	mov	r1, r7
 8009e8a:	f7f6 fe2f 	bl	8000aec <__aeabi_dcmplt>
 8009e8e:	2800      	cmp	r0, #0
 8009e90:	d159      	bne.n	8009f46 <_strtod_l+0xa2e>
 8009e92:	4630      	mov	r0, r6
 8009e94:	4639      	mov	r1, r7
 8009e96:	4b60      	ldr	r3, [pc, #384]	@ (800a018 <_strtod_l+0xb00>)
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f7f6 fbb5 	bl	8000608 <__aeabi_dmul>
 8009e9e:	4606      	mov	r6, r0
 8009ea0:	460f      	mov	r7, r1
 8009ea2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009ea6:	9606      	str	r6, [sp, #24]
 8009ea8:	9307      	str	r3, [sp, #28]
 8009eaa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009eae:	4d57      	ldr	r5, [pc, #348]	@ (800a00c <_strtod_l+0xaf4>)
 8009eb0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009eb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009eb6:	401d      	ands	r5, r3
 8009eb8:	4b58      	ldr	r3, [pc, #352]	@ (800a01c <_strtod_l+0xb04>)
 8009eba:	429d      	cmp	r5, r3
 8009ebc:	f040 80b2 	bne.w	800a024 <_strtod_l+0xb0c>
 8009ec0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ec2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009ec6:	ec4b ab10 	vmov	d0, sl, fp
 8009eca:	f7ff f9c9 	bl	8009260 <__ulp>
 8009ece:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ed2:	ec51 0b10 	vmov	r0, r1, d0
 8009ed6:	f7f6 fb97 	bl	8000608 <__aeabi_dmul>
 8009eda:	4652      	mov	r2, sl
 8009edc:	465b      	mov	r3, fp
 8009ede:	f7f6 f9dd 	bl	800029c <__adddf3>
 8009ee2:	460b      	mov	r3, r1
 8009ee4:	4949      	ldr	r1, [pc, #292]	@ (800a00c <_strtod_l+0xaf4>)
 8009ee6:	4a4e      	ldr	r2, [pc, #312]	@ (800a020 <_strtod_l+0xb08>)
 8009ee8:	4019      	ands	r1, r3
 8009eea:	4291      	cmp	r1, r2
 8009eec:	4682      	mov	sl, r0
 8009eee:	d942      	bls.n	8009f76 <_strtod_l+0xa5e>
 8009ef0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009ef2:	4b47      	ldr	r3, [pc, #284]	@ (800a010 <_strtod_l+0xaf8>)
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d103      	bne.n	8009f00 <_strtod_l+0x9e8>
 8009ef8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009efa:	3301      	adds	r3, #1
 8009efc:	f43f ad2b 	beq.w	8009956 <_strtod_l+0x43e>
 8009f00:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a010 <_strtod_l+0xaf8>
 8009f04:	f04f 3aff 	mov.w	sl, #4294967295
 8009f08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009f0a:	9805      	ldr	r0, [sp, #20]
 8009f0c:	f7fe fe74 	bl	8008bf8 <_Bfree>
 8009f10:	9805      	ldr	r0, [sp, #20]
 8009f12:	4649      	mov	r1, r9
 8009f14:	f7fe fe70 	bl	8008bf8 <_Bfree>
 8009f18:	9805      	ldr	r0, [sp, #20]
 8009f1a:	4641      	mov	r1, r8
 8009f1c:	f7fe fe6c 	bl	8008bf8 <_Bfree>
 8009f20:	9805      	ldr	r0, [sp, #20]
 8009f22:	4621      	mov	r1, r4
 8009f24:	f7fe fe68 	bl	8008bf8 <_Bfree>
 8009f28:	e618      	b.n	8009b5c <_strtod_l+0x644>
 8009f2a:	f1ba 0f01 	cmp.w	sl, #1
 8009f2e:	d103      	bne.n	8009f38 <_strtod_l+0xa20>
 8009f30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f43f ada5 	beq.w	8009a82 <_strtod_l+0x56a>
 8009f38:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009fe8 <_strtod_l+0xad0>
 8009f3c:	4f35      	ldr	r7, [pc, #212]	@ (800a014 <_strtod_l+0xafc>)
 8009f3e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009f42:	2600      	movs	r6, #0
 8009f44:	e7b1      	b.n	8009eaa <_strtod_l+0x992>
 8009f46:	4f34      	ldr	r7, [pc, #208]	@ (800a018 <_strtod_l+0xb00>)
 8009f48:	2600      	movs	r6, #0
 8009f4a:	e7aa      	b.n	8009ea2 <_strtod_l+0x98a>
 8009f4c:	4b32      	ldr	r3, [pc, #200]	@ (800a018 <_strtod_l+0xb00>)
 8009f4e:	4630      	mov	r0, r6
 8009f50:	4639      	mov	r1, r7
 8009f52:	2200      	movs	r2, #0
 8009f54:	f7f6 fb58 	bl	8000608 <__aeabi_dmul>
 8009f58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f5a:	4606      	mov	r6, r0
 8009f5c:	460f      	mov	r7, r1
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d09f      	beq.n	8009ea2 <_strtod_l+0x98a>
 8009f62:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009f66:	e7a0      	b.n	8009eaa <_strtod_l+0x992>
 8009f68:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009ff0 <_strtod_l+0xad8>
 8009f6c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009f70:	ec57 6b17 	vmov	r6, r7, d7
 8009f74:	e799      	b.n	8009eaa <_strtod_l+0x992>
 8009f76:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009f7a:	9b08      	ldr	r3, [sp, #32]
 8009f7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d1c1      	bne.n	8009f08 <_strtod_l+0x9f0>
 8009f84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009f88:	0d1b      	lsrs	r3, r3, #20
 8009f8a:	051b      	lsls	r3, r3, #20
 8009f8c:	429d      	cmp	r5, r3
 8009f8e:	d1bb      	bne.n	8009f08 <_strtod_l+0x9f0>
 8009f90:	4630      	mov	r0, r6
 8009f92:	4639      	mov	r1, r7
 8009f94:	f7f6 fe98 	bl	8000cc8 <__aeabi_d2lz>
 8009f98:	f7f6 fb08 	bl	80005ac <__aeabi_l2d>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	4639      	mov	r1, r7
 8009fa4:	f7f6 f978 	bl	8000298 <__aeabi_dsub>
 8009fa8:	460b      	mov	r3, r1
 8009faa:	4602      	mov	r2, r0
 8009fac:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009fb0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009fb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fb6:	ea46 060a 	orr.w	r6, r6, sl
 8009fba:	431e      	orrs	r6, r3
 8009fbc:	d06f      	beq.n	800a09e <_strtod_l+0xb86>
 8009fbe:	a30e      	add	r3, pc, #56	@ (adr r3, 8009ff8 <_strtod_l+0xae0>)
 8009fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc4:	f7f6 fd92 	bl	8000aec <__aeabi_dcmplt>
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	f47f accf 	bne.w	800996c <_strtod_l+0x454>
 8009fce:	a30c      	add	r3, pc, #48	@ (adr r3, 800a000 <_strtod_l+0xae8>)
 8009fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009fd8:	f7f6 fda6 	bl	8000b28 <__aeabi_dcmpgt>
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	d093      	beq.n	8009f08 <_strtod_l+0x9f0>
 8009fe0:	e4c4      	b.n	800996c <_strtod_l+0x454>
 8009fe2:	bf00      	nop
 8009fe4:	f3af 8000 	nop.w
 8009fe8:	00000000 	.word	0x00000000
 8009fec:	bff00000 	.word	0xbff00000
 8009ff0:	00000000 	.word	0x00000000
 8009ff4:	3ff00000 	.word	0x3ff00000
 8009ff8:	94a03595 	.word	0x94a03595
 8009ffc:	3fdfffff 	.word	0x3fdfffff
 800a000:	35afe535 	.word	0x35afe535
 800a004:	3fe00000 	.word	0x3fe00000
 800a008:	000fffff 	.word	0x000fffff
 800a00c:	7ff00000 	.word	0x7ff00000
 800a010:	7fefffff 	.word	0x7fefffff
 800a014:	3ff00000 	.word	0x3ff00000
 800a018:	3fe00000 	.word	0x3fe00000
 800a01c:	7fe00000 	.word	0x7fe00000
 800a020:	7c9fffff 	.word	0x7c9fffff
 800a024:	9b08      	ldr	r3, [sp, #32]
 800a026:	b323      	cbz	r3, 800a072 <_strtod_l+0xb5a>
 800a028:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a02c:	d821      	bhi.n	800a072 <_strtod_l+0xb5a>
 800a02e:	a328      	add	r3, pc, #160	@ (adr r3, 800a0d0 <_strtod_l+0xbb8>)
 800a030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a034:	4630      	mov	r0, r6
 800a036:	4639      	mov	r1, r7
 800a038:	f7f6 fd62 	bl	8000b00 <__aeabi_dcmple>
 800a03c:	b1a0      	cbz	r0, 800a068 <_strtod_l+0xb50>
 800a03e:	4639      	mov	r1, r7
 800a040:	4630      	mov	r0, r6
 800a042:	f7f6 fdb9 	bl	8000bb8 <__aeabi_d2uiz>
 800a046:	2801      	cmp	r0, #1
 800a048:	bf38      	it	cc
 800a04a:	2001      	movcc	r0, #1
 800a04c:	f7f6 fa62 	bl	8000514 <__aeabi_ui2d>
 800a050:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a052:	4606      	mov	r6, r0
 800a054:	460f      	mov	r7, r1
 800a056:	b9fb      	cbnz	r3, 800a098 <_strtod_l+0xb80>
 800a058:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a05c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a05e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a060:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a064:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a068:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a06a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a06e:	1b5b      	subs	r3, r3, r5
 800a070:	9311      	str	r3, [sp, #68]	@ 0x44
 800a072:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a076:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a07a:	f7ff f8f1 	bl	8009260 <__ulp>
 800a07e:	4650      	mov	r0, sl
 800a080:	ec53 2b10 	vmov	r2, r3, d0
 800a084:	4659      	mov	r1, fp
 800a086:	f7f6 fabf 	bl	8000608 <__aeabi_dmul>
 800a08a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a08e:	f7f6 f905 	bl	800029c <__adddf3>
 800a092:	4682      	mov	sl, r0
 800a094:	468b      	mov	fp, r1
 800a096:	e770      	b.n	8009f7a <_strtod_l+0xa62>
 800a098:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a09c:	e7e0      	b.n	800a060 <_strtod_l+0xb48>
 800a09e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a0d8 <_strtod_l+0xbc0>)
 800a0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a4:	f7f6 fd22 	bl	8000aec <__aeabi_dcmplt>
 800a0a8:	e798      	b.n	8009fdc <_strtod_l+0xac4>
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0ae:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a0b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0b2:	6013      	str	r3, [r2, #0]
 800a0b4:	f7ff ba6d 	b.w	8009592 <_strtod_l+0x7a>
 800a0b8:	2a65      	cmp	r2, #101	@ 0x65
 800a0ba:	f43f ab66 	beq.w	800978a <_strtod_l+0x272>
 800a0be:	2a45      	cmp	r2, #69	@ 0x45
 800a0c0:	f43f ab63 	beq.w	800978a <_strtod_l+0x272>
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	f7ff bb9e 	b.w	8009806 <_strtod_l+0x2ee>
 800a0ca:	bf00      	nop
 800a0cc:	f3af 8000 	nop.w
 800a0d0:	ffc00000 	.word	0xffc00000
 800a0d4:	41dfffff 	.word	0x41dfffff
 800a0d8:	94a03595 	.word	0x94a03595
 800a0dc:	3fcfffff 	.word	0x3fcfffff

0800a0e0 <_strtod_r>:
 800a0e0:	4b01      	ldr	r3, [pc, #4]	@ (800a0e8 <_strtod_r+0x8>)
 800a0e2:	f7ff ba19 	b.w	8009518 <_strtod_l>
 800a0e6:	bf00      	nop
 800a0e8:	200000ec 	.word	0x200000ec

0800a0ec <_strtol_l.constprop.0>:
 800a0ec:	2b24      	cmp	r3, #36	@ 0x24
 800a0ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0f2:	4686      	mov	lr, r0
 800a0f4:	4690      	mov	r8, r2
 800a0f6:	d801      	bhi.n	800a0fc <_strtol_l.constprop.0+0x10>
 800a0f8:	2b01      	cmp	r3, #1
 800a0fa:	d106      	bne.n	800a10a <_strtol_l.constprop.0+0x1e>
 800a0fc:	f7fd fdba 	bl	8007c74 <__errno>
 800a100:	2316      	movs	r3, #22
 800a102:	6003      	str	r3, [r0, #0]
 800a104:	2000      	movs	r0, #0
 800a106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a10a:	4834      	ldr	r0, [pc, #208]	@ (800a1dc <_strtol_l.constprop.0+0xf0>)
 800a10c:	460d      	mov	r5, r1
 800a10e:	462a      	mov	r2, r5
 800a110:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a114:	5d06      	ldrb	r6, [r0, r4]
 800a116:	f016 0608 	ands.w	r6, r6, #8
 800a11a:	d1f8      	bne.n	800a10e <_strtol_l.constprop.0+0x22>
 800a11c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a11e:	d12d      	bne.n	800a17c <_strtol_l.constprop.0+0x90>
 800a120:	782c      	ldrb	r4, [r5, #0]
 800a122:	2601      	movs	r6, #1
 800a124:	1c95      	adds	r5, r2, #2
 800a126:	f033 0210 	bics.w	r2, r3, #16
 800a12a:	d109      	bne.n	800a140 <_strtol_l.constprop.0+0x54>
 800a12c:	2c30      	cmp	r4, #48	@ 0x30
 800a12e:	d12a      	bne.n	800a186 <_strtol_l.constprop.0+0x9a>
 800a130:	782a      	ldrb	r2, [r5, #0]
 800a132:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a136:	2a58      	cmp	r2, #88	@ 0x58
 800a138:	d125      	bne.n	800a186 <_strtol_l.constprop.0+0x9a>
 800a13a:	786c      	ldrb	r4, [r5, #1]
 800a13c:	2310      	movs	r3, #16
 800a13e:	3502      	adds	r5, #2
 800a140:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a144:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a148:	2200      	movs	r2, #0
 800a14a:	fbbc f9f3 	udiv	r9, ip, r3
 800a14e:	4610      	mov	r0, r2
 800a150:	fb03 ca19 	mls	sl, r3, r9, ip
 800a154:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a158:	2f09      	cmp	r7, #9
 800a15a:	d81b      	bhi.n	800a194 <_strtol_l.constprop.0+0xa8>
 800a15c:	463c      	mov	r4, r7
 800a15e:	42a3      	cmp	r3, r4
 800a160:	dd27      	ble.n	800a1b2 <_strtol_l.constprop.0+0xc6>
 800a162:	1c57      	adds	r7, r2, #1
 800a164:	d007      	beq.n	800a176 <_strtol_l.constprop.0+0x8a>
 800a166:	4581      	cmp	r9, r0
 800a168:	d320      	bcc.n	800a1ac <_strtol_l.constprop.0+0xc0>
 800a16a:	d101      	bne.n	800a170 <_strtol_l.constprop.0+0x84>
 800a16c:	45a2      	cmp	sl, r4
 800a16e:	db1d      	blt.n	800a1ac <_strtol_l.constprop.0+0xc0>
 800a170:	fb00 4003 	mla	r0, r0, r3, r4
 800a174:	2201      	movs	r2, #1
 800a176:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a17a:	e7eb      	b.n	800a154 <_strtol_l.constprop.0+0x68>
 800a17c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a17e:	bf04      	itt	eq
 800a180:	782c      	ldrbeq	r4, [r5, #0]
 800a182:	1c95      	addeq	r5, r2, #2
 800a184:	e7cf      	b.n	800a126 <_strtol_l.constprop.0+0x3a>
 800a186:	2b00      	cmp	r3, #0
 800a188:	d1da      	bne.n	800a140 <_strtol_l.constprop.0+0x54>
 800a18a:	2c30      	cmp	r4, #48	@ 0x30
 800a18c:	bf0c      	ite	eq
 800a18e:	2308      	moveq	r3, #8
 800a190:	230a      	movne	r3, #10
 800a192:	e7d5      	b.n	800a140 <_strtol_l.constprop.0+0x54>
 800a194:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a198:	2f19      	cmp	r7, #25
 800a19a:	d801      	bhi.n	800a1a0 <_strtol_l.constprop.0+0xb4>
 800a19c:	3c37      	subs	r4, #55	@ 0x37
 800a19e:	e7de      	b.n	800a15e <_strtol_l.constprop.0+0x72>
 800a1a0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a1a4:	2f19      	cmp	r7, #25
 800a1a6:	d804      	bhi.n	800a1b2 <_strtol_l.constprop.0+0xc6>
 800a1a8:	3c57      	subs	r4, #87	@ 0x57
 800a1aa:	e7d8      	b.n	800a15e <_strtol_l.constprop.0+0x72>
 800a1ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a1b0:	e7e1      	b.n	800a176 <_strtol_l.constprop.0+0x8a>
 800a1b2:	1c53      	adds	r3, r2, #1
 800a1b4:	d108      	bne.n	800a1c8 <_strtol_l.constprop.0+0xdc>
 800a1b6:	2322      	movs	r3, #34	@ 0x22
 800a1b8:	f8ce 3000 	str.w	r3, [lr]
 800a1bc:	4660      	mov	r0, ip
 800a1be:	f1b8 0f00 	cmp.w	r8, #0
 800a1c2:	d0a0      	beq.n	800a106 <_strtol_l.constprop.0+0x1a>
 800a1c4:	1e69      	subs	r1, r5, #1
 800a1c6:	e006      	b.n	800a1d6 <_strtol_l.constprop.0+0xea>
 800a1c8:	b106      	cbz	r6, 800a1cc <_strtol_l.constprop.0+0xe0>
 800a1ca:	4240      	negs	r0, r0
 800a1cc:	f1b8 0f00 	cmp.w	r8, #0
 800a1d0:	d099      	beq.n	800a106 <_strtol_l.constprop.0+0x1a>
 800a1d2:	2a00      	cmp	r2, #0
 800a1d4:	d1f6      	bne.n	800a1c4 <_strtol_l.constprop.0+0xd8>
 800a1d6:	f8c8 1000 	str.w	r1, [r8]
 800a1da:	e794      	b.n	800a106 <_strtol_l.constprop.0+0x1a>
 800a1dc:	0800c101 	.word	0x0800c101

0800a1e0 <_strtol_r>:
 800a1e0:	f7ff bf84 	b.w	800a0ec <_strtol_l.constprop.0>

0800a1e4 <__ssputs_r>:
 800a1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1e8:	688e      	ldr	r6, [r1, #8]
 800a1ea:	461f      	mov	r7, r3
 800a1ec:	42be      	cmp	r6, r7
 800a1ee:	680b      	ldr	r3, [r1, #0]
 800a1f0:	4682      	mov	sl, r0
 800a1f2:	460c      	mov	r4, r1
 800a1f4:	4690      	mov	r8, r2
 800a1f6:	d82d      	bhi.n	800a254 <__ssputs_r+0x70>
 800a1f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a1fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a200:	d026      	beq.n	800a250 <__ssputs_r+0x6c>
 800a202:	6965      	ldr	r5, [r4, #20]
 800a204:	6909      	ldr	r1, [r1, #16]
 800a206:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a20a:	eba3 0901 	sub.w	r9, r3, r1
 800a20e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a212:	1c7b      	adds	r3, r7, #1
 800a214:	444b      	add	r3, r9
 800a216:	106d      	asrs	r5, r5, #1
 800a218:	429d      	cmp	r5, r3
 800a21a:	bf38      	it	cc
 800a21c:	461d      	movcc	r5, r3
 800a21e:	0553      	lsls	r3, r2, #21
 800a220:	d527      	bpl.n	800a272 <__ssputs_r+0x8e>
 800a222:	4629      	mov	r1, r5
 800a224:	f7fe fc1c 	bl	8008a60 <_malloc_r>
 800a228:	4606      	mov	r6, r0
 800a22a:	b360      	cbz	r0, 800a286 <__ssputs_r+0xa2>
 800a22c:	6921      	ldr	r1, [r4, #16]
 800a22e:	464a      	mov	r2, r9
 800a230:	f000 fda6 	bl	800ad80 <memcpy>
 800a234:	89a3      	ldrh	r3, [r4, #12]
 800a236:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a23a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a23e:	81a3      	strh	r3, [r4, #12]
 800a240:	6126      	str	r6, [r4, #16]
 800a242:	6165      	str	r5, [r4, #20]
 800a244:	444e      	add	r6, r9
 800a246:	eba5 0509 	sub.w	r5, r5, r9
 800a24a:	6026      	str	r6, [r4, #0]
 800a24c:	60a5      	str	r5, [r4, #8]
 800a24e:	463e      	mov	r6, r7
 800a250:	42be      	cmp	r6, r7
 800a252:	d900      	bls.n	800a256 <__ssputs_r+0x72>
 800a254:	463e      	mov	r6, r7
 800a256:	6820      	ldr	r0, [r4, #0]
 800a258:	4632      	mov	r2, r6
 800a25a:	4641      	mov	r1, r8
 800a25c:	f000 fd53 	bl	800ad06 <memmove>
 800a260:	68a3      	ldr	r3, [r4, #8]
 800a262:	1b9b      	subs	r3, r3, r6
 800a264:	60a3      	str	r3, [r4, #8]
 800a266:	6823      	ldr	r3, [r4, #0]
 800a268:	4433      	add	r3, r6
 800a26a:	6023      	str	r3, [r4, #0]
 800a26c:	2000      	movs	r0, #0
 800a26e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a272:	462a      	mov	r2, r5
 800a274:	f001 f919 	bl	800b4aa <_realloc_r>
 800a278:	4606      	mov	r6, r0
 800a27a:	2800      	cmp	r0, #0
 800a27c:	d1e0      	bne.n	800a240 <__ssputs_r+0x5c>
 800a27e:	6921      	ldr	r1, [r4, #16]
 800a280:	4650      	mov	r0, sl
 800a282:	f7fe fb79 	bl	8008978 <_free_r>
 800a286:	230c      	movs	r3, #12
 800a288:	f8ca 3000 	str.w	r3, [sl]
 800a28c:	89a3      	ldrh	r3, [r4, #12]
 800a28e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a292:	81a3      	strh	r3, [r4, #12]
 800a294:	f04f 30ff 	mov.w	r0, #4294967295
 800a298:	e7e9      	b.n	800a26e <__ssputs_r+0x8a>
	...

0800a29c <_svfiprintf_r>:
 800a29c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2a0:	4698      	mov	r8, r3
 800a2a2:	898b      	ldrh	r3, [r1, #12]
 800a2a4:	061b      	lsls	r3, r3, #24
 800a2a6:	b09d      	sub	sp, #116	@ 0x74
 800a2a8:	4607      	mov	r7, r0
 800a2aa:	460d      	mov	r5, r1
 800a2ac:	4614      	mov	r4, r2
 800a2ae:	d510      	bpl.n	800a2d2 <_svfiprintf_r+0x36>
 800a2b0:	690b      	ldr	r3, [r1, #16]
 800a2b2:	b973      	cbnz	r3, 800a2d2 <_svfiprintf_r+0x36>
 800a2b4:	2140      	movs	r1, #64	@ 0x40
 800a2b6:	f7fe fbd3 	bl	8008a60 <_malloc_r>
 800a2ba:	6028      	str	r0, [r5, #0]
 800a2bc:	6128      	str	r0, [r5, #16]
 800a2be:	b930      	cbnz	r0, 800a2ce <_svfiprintf_r+0x32>
 800a2c0:	230c      	movs	r3, #12
 800a2c2:	603b      	str	r3, [r7, #0]
 800a2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c8:	b01d      	add	sp, #116	@ 0x74
 800a2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2ce:	2340      	movs	r3, #64	@ 0x40
 800a2d0:	616b      	str	r3, [r5, #20]
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2d6:	2320      	movs	r3, #32
 800a2d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a2dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2e0:	2330      	movs	r3, #48	@ 0x30
 800a2e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a480 <_svfiprintf_r+0x1e4>
 800a2e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a2ea:	f04f 0901 	mov.w	r9, #1
 800a2ee:	4623      	mov	r3, r4
 800a2f0:	469a      	mov	sl, r3
 800a2f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2f6:	b10a      	cbz	r2, 800a2fc <_svfiprintf_r+0x60>
 800a2f8:	2a25      	cmp	r2, #37	@ 0x25
 800a2fa:	d1f9      	bne.n	800a2f0 <_svfiprintf_r+0x54>
 800a2fc:	ebba 0b04 	subs.w	fp, sl, r4
 800a300:	d00b      	beq.n	800a31a <_svfiprintf_r+0x7e>
 800a302:	465b      	mov	r3, fp
 800a304:	4622      	mov	r2, r4
 800a306:	4629      	mov	r1, r5
 800a308:	4638      	mov	r0, r7
 800a30a:	f7ff ff6b 	bl	800a1e4 <__ssputs_r>
 800a30e:	3001      	adds	r0, #1
 800a310:	f000 80a7 	beq.w	800a462 <_svfiprintf_r+0x1c6>
 800a314:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a316:	445a      	add	r2, fp
 800a318:	9209      	str	r2, [sp, #36]	@ 0x24
 800a31a:	f89a 3000 	ldrb.w	r3, [sl]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f000 809f 	beq.w	800a462 <_svfiprintf_r+0x1c6>
 800a324:	2300      	movs	r3, #0
 800a326:	f04f 32ff 	mov.w	r2, #4294967295
 800a32a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a32e:	f10a 0a01 	add.w	sl, sl, #1
 800a332:	9304      	str	r3, [sp, #16]
 800a334:	9307      	str	r3, [sp, #28]
 800a336:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a33a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a33c:	4654      	mov	r4, sl
 800a33e:	2205      	movs	r2, #5
 800a340:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a344:	484e      	ldr	r0, [pc, #312]	@ (800a480 <_svfiprintf_r+0x1e4>)
 800a346:	f7f5 ff4b 	bl	80001e0 <memchr>
 800a34a:	9a04      	ldr	r2, [sp, #16]
 800a34c:	b9d8      	cbnz	r0, 800a386 <_svfiprintf_r+0xea>
 800a34e:	06d0      	lsls	r0, r2, #27
 800a350:	bf44      	itt	mi
 800a352:	2320      	movmi	r3, #32
 800a354:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a358:	0711      	lsls	r1, r2, #28
 800a35a:	bf44      	itt	mi
 800a35c:	232b      	movmi	r3, #43	@ 0x2b
 800a35e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a362:	f89a 3000 	ldrb.w	r3, [sl]
 800a366:	2b2a      	cmp	r3, #42	@ 0x2a
 800a368:	d015      	beq.n	800a396 <_svfiprintf_r+0xfa>
 800a36a:	9a07      	ldr	r2, [sp, #28]
 800a36c:	4654      	mov	r4, sl
 800a36e:	2000      	movs	r0, #0
 800a370:	f04f 0c0a 	mov.w	ip, #10
 800a374:	4621      	mov	r1, r4
 800a376:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a37a:	3b30      	subs	r3, #48	@ 0x30
 800a37c:	2b09      	cmp	r3, #9
 800a37e:	d94b      	bls.n	800a418 <_svfiprintf_r+0x17c>
 800a380:	b1b0      	cbz	r0, 800a3b0 <_svfiprintf_r+0x114>
 800a382:	9207      	str	r2, [sp, #28]
 800a384:	e014      	b.n	800a3b0 <_svfiprintf_r+0x114>
 800a386:	eba0 0308 	sub.w	r3, r0, r8
 800a38a:	fa09 f303 	lsl.w	r3, r9, r3
 800a38e:	4313      	orrs	r3, r2
 800a390:	9304      	str	r3, [sp, #16]
 800a392:	46a2      	mov	sl, r4
 800a394:	e7d2      	b.n	800a33c <_svfiprintf_r+0xa0>
 800a396:	9b03      	ldr	r3, [sp, #12]
 800a398:	1d19      	adds	r1, r3, #4
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	9103      	str	r1, [sp, #12]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	bfbb      	ittet	lt
 800a3a2:	425b      	neglt	r3, r3
 800a3a4:	f042 0202 	orrlt.w	r2, r2, #2
 800a3a8:	9307      	strge	r3, [sp, #28]
 800a3aa:	9307      	strlt	r3, [sp, #28]
 800a3ac:	bfb8      	it	lt
 800a3ae:	9204      	strlt	r2, [sp, #16]
 800a3b0:	7823      	ldrb	r3, [r4, #0]
 800a3b2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a3b4:	d10a      	bne.n	800a3cc <_svfiprintf_r+0x130>
 800a3b6:	7863      	ldrb	r3, [r4, #1]
 800a3b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3ba:	d132      	bne.n	800a422 <_svfiprintf_r+0x186>
 800a3bc:	9b03      	ldr	r3, [sp, #12]
 800a3be:	1d1a      	adds	r2, r3, #4
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	9203      	str	r2, [sp, #12]
 800a3c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a3c8:	3402      	adds	r4, #2
 800a3ca:	9305      	str	r3, [sp, #20]
 800a3cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a490 <_svfiprintf_r+0x1f4>
 800a3d0:	7821      	ldrb	r1, [r4, #0]
 800a3d2:	2203      	movs	r2, #3
 800a3d4:	4650      	mov	r0, sl
 800a3d6:	f7f5 ff03 	bl	80001e0 <memchr>
 800a3da:	b138      	cbz	r0, 800a3ec <_svfiprintf_r+0x150>
 800a3dc:	9b04      	ldr	r3, [sp, #16]
 800a3de:	eba0 000a 	sub.w	r0, r0, sl
 800a3e2:	2240      	movs	r2, #64	@ 0x40
 800a3e4:	4082      	lsls	r2, r0
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	3401      	adds	r4, #1
 800a3ea:	9304      	str	r3, [sp, #16]
 800a3ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3f0:	4824      	ldr	r0, [pc, #144]	@ (800a484 <_svfiprintf_r+0x1e8>)
 800a3f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a3f6:	2206      	movs	r2, #6
 800a3f8:	f7f5 fef2 	bl	80001e0 <memchr>
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	d036      	beq.n	800a46e <_svfiprintf_r+0x1d2>
 800a400:	4b21      	ldr	r3, [pc, #132]	@ (800a488 <_svfiprintf_r+0x1ec>)
 800a402:	bb1b      	cbnz	r3, 800a44c <_svfiprintf_r+0x1b0>
 800a404:	9b03      	ldr	r3, [sp, #12]
 800a406:	3307      	adds	r3, #7
 800a408:	f023 0307 	bic.w	r3, r3, #7
 800a40c:	3308      	adds	r3, #8
 800a40e:	9303      	str	r3, [sp, #12]
 800a410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a412:	4433      	add	r3, r6
 800a414:	9309      	str	r3, [sp, #36]	@ 0x24
 800a416:	e76a      	b.n	800a2ee <_svfiprintf_r+0x52>
 800a418:	fb0c 3202 	mla	r2, ip, r2, r3
 800a41c:	460c      	mov	r4, r1
 800a41e:	2001      	movs	r0, #1
 800a420:	e7a8      	b.n	800a374 <_svfiprintf_r+0xd8>
 800a422:	2300      	movs	r3, #0
 800a424:	3401      	adds	r4, #1
 800a426:	9305      	str	r3, [sp, #20]
 800a428:	4619      	mov	r1, r3
 800a42a:	f04f 0c0a 	mov.w	ip, #10
 800a42e:	4620      	mov	r0, r4
 800a430:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a434:	3a30      	subs	r2, #48	@ 0x30
 800a436:	2a09      	cmp	r2, #9
 800a438:	d903      	bls.n	800a442 <_svfiprintf_r+0x1a6>
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d0c6      	beq.n	800a3cc <_svfiprintf_r+0x130>
 800a43e:	9105      	str	r1, [sp, #20]
 800a440:	e7c4      	b.n	800a3cc <_svfiprintf_r+0x130>
 800a442:	fb0c 2101 	mla	r1, ip, r1, r2
 800a446:	4604      	mov	r4, r0
 800a448:	2301      	movs	r3, #1
 800a44a:	e7f0      	b.n	800a42e <_svfiprintf_r+0x192>
 800a44c:	ab03      	add	r3, sp, #12
 800a44e:	9300      	str	r3, [sp, #0]
 800a450:	462a      	mov	r2, r5
 800a452:	4b0e      	ldr	r3, [pc, #56]	@ (800a48c <_svfiprintf_r+0x1f0>)
 800a454:	a904      	add	r1, sp, #16
 800a456:	4638      	mov	r0, r7
 800a458:	f7fc fc9c 	bl	8006d94 <_printf_float>
 800a45c:	1c42      	adds	r2, r0, #1
 800a45e:	4606      	mov	r6, r0
 800a460:	d1d6      	bne.n	800a410 <_svfiprintf_r+0x174>
 800a462:	89ab      	ldrh	r3, [r5, #12]
 800a464:	065b      	lsls	r3, r3, #25
 800a466:	f53f af2d 	bmi.w	800a2c4 <_svfiprintf_r+0x28>
 800a46a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a46c:	e72c      	b.n	800a2c8 <_svfiprintf_r+0x2c>
 800a46e:	ab03      	add	r3, sp, #12
 800a470:	9300      	str	r3, [sp, #0]
 800a472:	462a      	mov	r2, r5
 800a474:	4b05      	ldr	r3, [pc, #20]	@ (800a48c <_svfiprintf_r+0x1f0>)
 800a476:	a904      	add	r1, sp, #16
 800a478:	4638      	mov	r0, r7
 800a47a:	f7fc ff23 	bl	80072c4 <_printf_i>
 800a47e:	e7ed      	b.n	800a45c <_svfiprintf_r+0x1c0>
 800a480:	0800c201 	.word	0x0800c201
 800a484:	0800c20b 	.word	0x0800c20b
 800a488:	08006d95 	.word	0x08006d95
 800a48c:	0800a1e5 	.word	0x0800a1e5
 800a490:	0800c207 	.word	0x0800c207

0800a494 <_sungetc_r>:
 800a494:	b538      	push	{r3, r4, r5, lr}
 800a496:	1c4b      	adds	r3, r1, #1
 800a498:	4614      	mov	r4, r2
 800a49a:	d103      	bne.n	800a4a4 <_sungetc_r+0x10>
 800a49c:	f04f 35ff 	mov.w	r5, #4294967295
 800a4a0:	4628      	mov	r0, r5
 800a4a2:	bd38      	pop	{r3, r4, r5, pc}
 800a4a4:	8993      	ldrh	r3, [r2, #12]
 800a4a6:	f023 0320 	bic.w	r3, r3, #32
 800a4aa:	8193      	strh	r3, [r2, #12]
 800a4ac:	6853      	ldr	r3, [r2, #4]
 800a4ae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a4b0:	b2cd      	uxtb	r5, r1
 800a4b2:	b18a      	cbz	r2, 800a4d8 <_sungetc_r+0x44>
 800a4b4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a4b6:	429a      	cmp	r2, r3
 800a4b8:	dd08      	ble.n	800a4cc <_sungetc_r+0x38>
 800a4ba:	6823      	ldr	r3, [r4, #0]
 800a4bc:	1e5a      	subs	r2, r3, #1
 800a4be:	6022      	str	r2, [r4, #0]
 800a4c0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800a4c4:	6863      	ldr	r3, [r4, #4]
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	6063      	str	r3, [r4, #4]
 800a4ca:	e7e9      	b.n	800a4a0 <_sungetc_r+0xc>
 800a4cc:	4621      	mov	r1, r4
 800a4ce:	f000 fbe0 	bl	800ac92 <__submore>
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	d0f1      	beq.n	800a4ba <_sungetc_r+0x26>
 800a4d6:	e7e1      	b.n	800a49c <_sungetc_r+0x8>
 800a4d8:	6921      	ldr	r1, [r4, #16]
 800a4da:	6822      	ldr	r2, [r4, #0]
 800a4dc:	b141      	cbz	r1, 800a4f0 <_sungetc_r+0x5c>
 800a4de:	4291      	cmp	r1, r2
 800a4e0:	d206      	bcs.n	800a4f0 <_sungetc_r+0x5c>
 800a4e2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800a4e6:	42a9      	cmp	r1, r5
 800a4e8:	d102      	bne.n	800a4f0 <_sungetc_r+0x5c>
 800a4ea:	3a01      	subs	r2, #1
 800a4ec:	6022      	str	r2, [r4, #0]
 800a4ee:	e7ea      	b.n	800a4c6 <_sungetc_r+0x32>
 800a4f0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800a4f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4f8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4fa:	2303      	movs	r3, #3
 800a4fc:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a4fe:	4623      	mov	r3, r4
 800a500:	f803 5f46 	strb.w	r5, [r3, #70]!
 800a504:	6023      	str	r3, [r4, #0]
 800a506:	2301      	movs	r3, #1
 800a508:	e7de      	b.n	800a4c8 <_sungetc_r+0x34>

0800a50a <__ssrefill_r>:
 800a50a:	b510      	push	{r4, lr}
 800a50c:	460c      	mov	r4, r1
 800a50e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a510:	b169      	cbz	r1, 800a52e <__ssrefill_r+0x24>
 800a512:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a516:	4299      	cmp	r1, r3
 800a518:	d001      	beq.n	800a51e <__ssrefill_r+0x14>
 800a51a:	f7fe fa2d 	bl	8008978 <_free_r>
 800a51e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a520:	6063      	str	r3, [r4, #4]
 800a522:	2000      	movs	r0, #0
 800a524:	6360      	str	r0, [r4, #52]	@ 0x34
 800a526:	b113      	cbz	r3, 800a52e <__ssrefill_r+0x24>
 800a528:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a52a:	6023      	str	r3, [r4, #0]
 800a52c:	bd10      	pop	{r4, pc}
 800a52e:	6923      	ldr	r3, [r4, #16]
 800a530:	6023      	str	r3, [r4, #0]
 800a532:	2300      	movs	r3, #0
 800a534:	6063      	str	r3, [r4, #4]
 800a536:	89a3      	ldrh	r3, [r4, #12]
 800a538:	f043 0320 	orr.w	r3, r3, #32
 800a53c:	81a3      	strh	r3, [r4, #12]
 800a53e:	f04f 30ff 	mov.w	r0, #4294967295
 800a542:	e7f3      	b.n	800a52c <__ssrefill_r+0x22>

0800a544 <__ssvfiscanf_r>:
 800a544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a548:	460c      	mov	r4, r1
 800a54a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800a54e:	2100      	movs	r1, #0
 800a550:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800a554:	49a5      	ldr	r1, [pc, #660]	@ (800a7ec <__ssvfiscanf_r+0x2a8>)
 800a556:	91a0      	str	r1, [sp, #640]	@ 0x280
 800a558:	f10d 0804 	add.w	r8, sp, #4
 800a55c:	49a4      	ldr	r1, [pc, #656]	@ (800a7f0 <__ssvfiscanf_r+0x2ac>)
 800a55e:	4fa5      	ldr	r7, [pc, #660]	@ (800a7f4 <__ssvfiscanf_r+0x2b0>)
 800a560:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800a564:	4606      	mov	r6, r0
 800a566:	91a1      	str	r1, [sp, #644]	@ 0x284
 800a568:	9300      	str	r3, [sp, #0]
 800a56a:	7813      	ldrb	r3, [r2, #0]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	f000 8158 	beq.w	800a822 <__ssvfiscanf_r+0x2de>
 800a572:	5cf9      	ldrb	r1, [r7, r3]
 800a574:	f011 0108 	ands.w	r1, r1, #8
 800a578:	f102 0501 	add.w	r5, r2, #1
 800a57c:	d019      	beq.n	800a5b2 <__ssvfiscanf_r+0x6e>
 800a57e:	6863      	ldr	r3, [r4, #4]
 800a580:	2b00      	cmp	r3, #0
 800a582:	dd0f      	ble.n	800a5a4 <__ssvfiscanf_r+0x60>
 800a584:	6823      	ldr	r3, [r4, #0]
 800a586:	781a      	ldrb	r2, [r3, #0]
 800a588:	5cba      	ldrb	r2, [r7, r2]
 800a58a:	0712      	lsls	r2, r2, #28
 800a58c:	d401      	bmi.n	800a592 <__ssvfiscanf_r+0x4e>
 800a58e:	462a      	mov	r2, r5
 800a590:	e7eb      	b.n	800a56a <__ssvfiscanf_r+0x26>
 800a592:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a594:	3201      	adds	r2, #1
 800a596:	9245      	str	r2, [sp, #276]	@ 0x114
 800a598:	6862      	ldr	r2, [r4, #4]
 800a59a:	3301      	adds	r3, #1
 800a59c:	3a01      	subs	r2, #1
 800a59e:	6062      	str	r2, [r4, #4]
 800a5a0:	6023      	str	r3, [r4, #0]
 800a5a2:	e7ec      	b.n	800a57e <__ssvfiscanf_r+0x3a>
 800a5a4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a5a6:	4621      	mov	r1, r4
 800a5a8:	4630      	mov	r0, r6
 800a5aa:	4798      	blx	r3
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	d0e9      	beq.n	800a584 <__ssvfiscanf_r+0x40>
 800a5b0:	e7ed      	b.n	800a58e <__ssvfiscanf_r+0x4a>
 800a5b2:	2b25      	cmp	r3, #37	@ 0x25
 800a5b4:	d012      	beq.n	800a5dc <__ssvfiscanf_r+0x98>
 800a5b6:	4699      	mov	r9, r3
 800a5b8:	6863      	ldr	r3, [r4, #4]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	f340 8093 	ble.w	800a6e6 <__ssvfiscanf_r+0x1a2>
 800a5c0:	6822      	ldr	r2, [r4, #0]
 800a5c2:	7813      	ldrb	r3, [r2, #0]
 800a5c4:	454b      	cmp	r3, r9
 800a5c6:	f040 812c 	bne.w	800a822 <__ssvfiscanf_r+0x2de>
 800a5ca:	6863      	ldr	r3, [r4, #4]
 800a5cc:	3b01      	subs	r3, #1
 800a5ce:	6063      	str	r3, [r4, #4]
 800a5d0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a5d2:	3201      	adds	r2, #1
 800a5d4:	3301      	adds	r3, #1
 800a5d6:	6022      	str	r2, [r4, #0]
 800a5d8:	9345      	str	r3, [sp, #276]	@ 0x114
 800a5da:	e7d8      	b.n	800a58e <__ssvfiscanf_r+0x4a>
 800a5dc:	9141      	str	r1, [sp, #260]	@ 0x104
 800a5de:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a5e0:	7853      	ldrb	r3, [r2, #1]
 800a5e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5e4:	bf02      	ittt	eq
 800a5e6:	2310      	moveq	r3, #16
 800a5e8:	1c95      	addeq	r5, r2, #2
 800a5ea:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a5ec:	220a      	movs	r2, #10
 800a5ee:	46a9      	mov	r9, r5
 800a5f0:	f819 1b01 	ldrb.w	r1, [r9], #1
 800a5f4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a5f8:	2b09      	cmp	r3, #9
 800a5fa:	d91e      	bls.n	800a63a <__ssvfiscanf_r+0xf6>
 800a5fc:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800a7f8 <__ssvfiscanf_r+0x2b4>
 800a600:	2203      	movs	r2, #3
 800a602:	4650      	mov	r0, sl
 800a604:	f7f5 fdec 	bl	80001e0 <memchr>
 800a608:	b138      	cbz	r0, 800a61a <__ssvfiscanf_r+0xd6>
 800a60a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a60c:	eba0 000a 	sub.w	r0, r0, sl
 800a610:	2301      	movs	r3, #1
 800a612:	4083      	lsls	r3, r0
 800a614:	4313      	orrs	r3, r2
 800a616:	9341      	str	r3, [sp, #260]	@ 0x104
 800a618:	464d      	mov	r5, r9
 800a61a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a61e:	2b78      	cmp	r3, #120	@ 0x78
 800a620:	d806      	bhi.n	800a630 <__ssvfiscanf_r+0xec>
 800a622:	2b57      	cmp	r3, #87	@ 0x57
 800a624:	d810      	bhi.n	800a648 <__ssvfiscanf_r+0x104>
 800a626:	2b25      	cmp	r3, #37	@ 0x25
 800a628:	d0c5      	beq.n	800a5b6 <__ssvfiscanf_r+0x72>
 800a62a:	d857      	bhi.n	800a6dc <__ssvfiscanf_r+0x198>
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d065      	beq.n	800a6fc <__ssvfiscanf_r+0x1b8>
 800a630:	2303      	movs	r3, #3
 800a632:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a634:	230a      	movs	r3, #10
 800a636:	9342      	str	r3, [sp, #264]	@ 0x108
 800a638:	e078      	b.n	800a72c <__ssvfiscanf_r+0x1e8>
 800a63a:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a63c:	fb02 1103 	mla	r1, r2, r3, r1
 800a640:	3930      	subs	r1, #48	@ 0x30
 800a642:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a644:	464d      	mov	r5, r9
 800a646:	e7d2      	b.n	800a5ee <__ssvfiscanf_r+0xaa>
 800a648:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a64c:	2a20      	cmp	r2, #32
 800a64e:	d8ef      	bhi.n	800a630 <__ssvfiscanf_r+0xec>
 800a650:	a101      	add	r1, pc, #4	@ (adr r1, 800a658 <__ssvfiscanf_r+0x114>)
 800a652:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a656:	bf00      	nop
 800a658:	0800a70b 	.word	0x0800a70b
 800a65c:	0800a631 	.word	0x0800a631
 800a660:	0800a631 	.word	0x0800a631
 800a664:	0800a765 	.word	0x0800a765
 800a668:	0800a631 	.word	0x0800a631
 800a66c:	0800a631 	.word	0x0800a631
 800a670:	0800a631 	.word	0x0800a631
 800a674:	0800a631 	.word	0x0800a631
 800a678:	0800a631 	.word	0x0800a631
 800a67c:	0800a631 	.word	0x0800a631
 800a680:	0800a631 	.word	0x0800a631
 800a684:	0800a77b 	.word	0x0800a77b
 800a688:	0800a761 	.word	0x0800a761
 800a68c:	0800a6e3 	.word	0x0800a6e3
 800a690:	0800a6e3 	.word	0x0800a6e3
 800a694:	0800a6e3 	.word	0x0800a6e3
 800a698:	0800a631 	.word	0x0800a631
 800a69c:	0800a71d 	.word	0x0800a71d
 800a6a0:	0800a631 	.word	0x0800a631
 800a6a4:	0800a631 	.word	0x0800a631
 800a6a8:	0800a631 	.word	0x0800a631
 800a6ac:	0800a631 	.word	0x0800a631
 800a6b0:	0800a78b 	.word	0x0800a78b
 800a6b4:	0800a725 	.word	0x0800a725
 800a6b8:	0800a703 	.word	0x0800a703
 800a6bc:	0800a631 	.word	0x0800a631
 800a6c0:	0800a631 	.word	0x0800a631
 800a6c4:	0800a787 	.word	0x0800a787
 800a6c8:	0800a631 	.word	0x0800a631
 800a6cc:	0800a761 	.word	0x0800a761
 800a6d0:	0800a631 	.word	0x0800a631
 800a6d4:	0800a631 	.word	0x0800a631
 800a6d8:	0800a70b 	.word	0x0800a70b
 800a6dc:	3b45      	subs	r3, #69	@ 0x45
 800a6de:	2b02      	cmp	r3, #2
 800a6e0:	d8a6      	bhi.n	800a630 <__ssvfiscanf_r+0xec>
 800a6e2:	2305      	movs	r3, #5
 800a6e4:	e021      	b.n	800a72a <__ssvfiscanf_r+0x1e6>
 800a6e6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a6e8:	4621      	mov	r1, r4
 800a6ea:	4630      	mov	r0, r6
 800a6ec:	4798      	blx	r3
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	f43f af66 	beq.w	800a5c0 <__ssvfiscanf_r+0x7c>
 800a6f4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a6f6:	2800      	cmp	r0, #0
 800a6f8:	f040 808b 	bne.w	800a812 <__ssvfiscanf_r+0x2ce>
 800a6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a700:	e08b      	b.n	800a81a <__ssvfiscanf_r+0x2d6>
 800a702:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a704:	f042 0220 	orr.w	r2, r2, #32
 800a708:	9241      	str	r2, [sp, #260]	@ 0x104
 800a70a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a70c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a710:	9241      	str	r2, [sp, #260]	@ 0x104
 800a712:	2210      	movs	r2, #16
 800a714:	2b6e      	cmp	r3, #110	@ 0x6e
 800a716:	9242      	str	r2, [sp, #264]	@ 0x108
 800a718:	d902      	bls.n	800a720 <__ssvfiscanf_r+0x1dc>
 800a71a:	e005      	b.n	800a728 <__ssvfiscanf_r+0x1e4>
 800a71c:	2300      	movs	r3, #0
 800a71e:	9342      	str	r3, [sp, #264]	@ 0x108
 800a720:	2303      	movs	r3, #3
 800a722:	e002      	b.n	800a72a <__ssvfiscanf_r+0x1e6>
 800a724:	2308      	movs	r3, #8
 800a726:	9342      	str	r3, [sp, #264]	@ 0x108
 800a728:	2304      	movs	r3, #4
 800a72a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a72c:	6863      	ldr	r3, [r4, #4]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	dd39      	ble.n	800a7a6 <__ssvfiscanf_r+0x262>
 800a732:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a734:	0659      	lsls	r1, r3, #25
 800a736:	d404      	bmi.n	800a742 <__ssvfiscanf_r+0x1fe>
 800a738:	6823      	ldr	r3, [r4, #0]
 800a73a:	781a      	ldrb	r2, [r3, #0]
 800a73c:	5cba      	ldrb	r2, [r7, r2]
 800a73e:	0712      	lsls	r2, r2, #28
 800a740:	d438      	bmi.n	800a7b4 <__ssvfiscanf_r+0x270>
 800a742:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a744:	2b02      	cmp	r3, #2
 800a746:	dc47      	bgt.n	800a7d8 <__ssvfiscanf_r+0x294>
 800a748:	466b      	mov	r3, sp
 800a74a:	4622      	mov	r2, r4
 800a74c:	a941      	add	r1, sp, #260	@ 0x104
 800a74e:	4630      	mov	r0, r6
 800a750:	f000 f86c 	bl	800a82c <_scanf_chars>
 800a754:	2801      	cmp	r0, #1
 800a756:	d064      	beq.n	800a822 <__ssvfiscanf_r+0x2de>
 800a758:	2802      	cmp	r0, #2
 800a75a:	f47f af18 	bne.w	800a58e <__ssvfiscanf_r+0x4a>
 800a75e:	e7c9      	b.n	800a6f4 <__ssvfiscanf_r+0x1b0>
 800a760:	220a      	movs	r2, #10
 800a762:	e7d7      	b.n	800a714 <__ssvfiscanf_r+0x1d0>
 800a764:	4629      	mov	r1, r5
 800a766:	4640      	mov	r0, r8
 800a768:	f000 fa5a 	bl	800ac20 <__sccl>
 800a76c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a76e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a772:	9341      	str	r3, [sp, #260]	@ 0x104
 800a774:	4605      	mov	r5, r0
 800a776:	2301      	movs	r3, #1
 800a778:	e7d7      	b.n	800a72a <__ssvfiscanf_r+0x1e6>
 800a77a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a77c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a780:	9341      	str	r3, [sp, #260]	@ 0x104
 800a782:	2300      	movs	r3, #0
 800a784:	e7d1      	b.n	800a72a <__ssvfiscanf_r+0x1e6>
 800a786:	2302      	movs	r3, #2
 800a788:	e7cf      	b.n	800a72a <__ssvfiscanf_r+0x1e6>
 800a78a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a78c:	06c3      	lsls	r3, r0, #27
 800a78e:	f53f aefe 	bmi.w	800a58e <__ssvfiscanf_r+0x4a>
 800a792:	9b00      	ldr	r3, [sp, #0]
 800a794:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a796:	1d19      	adds	r1, r3, #4
 800a798:	9100      	str	r1, [sp, #0]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	07c0      	lsls	r0, r0, #31
 800a79e:	bf4c      	ite	mi
 800a7a0:	801a      	strhmi	r2, [r3, #0]
 800a7a2:	601a      	strpl	r2, [r3, #0]
 800a7a4:	e6f3      	b.n	800a58e <__ssvfiscanf_r+0x4a>
 800a7a6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a7a8:	4621      	mov	r1, r4
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	4798      	blx	r3
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	d0bf      	beq.n	800a732 <__ssvfiscanf_r+0x1ee>
 800a7b2:	e79f      	b.n	800a6f4 <__ssvfiscanf_r+0x1b0>
 800a7b4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a7b6:	3201      	adds	r2, #1
 800a7b8:	9245      	str	r2, [sp, #276]	@ 0x114
 800a7ba:	6862      	ldr	r2, [r4, #4]
 800a7bc:	3a01      	subs	r2, #1
 800a7be:	2a00      	cmp	r2, #0
 800a7c0:	6062      	str	r2, [r4, #4]
 800a7c2:	dd02      	ble.n	800a7ca <__ssvfiscanf_r+0x286>
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	6023      	str	r3, [r4, #0]
 800a7c8:	e7b6      	b.n	800a738 <__ssvfiscanf_r+0x1f4>
 800a7ca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a7cc:	4621      	mov	r1, r4
 800a7ce:	4630      	mov	r0, r6
 800a7d0:	4798      	blx	r3
 800a7d2:	2800      	cmp	r0, #0
 800a7d4:	d0b0      	beq.n	800a738 <__ssvfiscanf_r+0x1f4>
 800a7d6:	e78d      	b.n	800a6f4 <__ssvfiscanf_r+0x1b0>
 800a7d8:	2b04      	cmp	r3, #4
 800a7da:	dc0f      	bgt.n	800a7fc <__ssvfiscanf_r+0x2b8>
 800a7dc:	466b      	mov	r3, sp
 800a7de:	4622      	mov	r2, r4
 800a7e0:	a941      	add	r1, sp, #260	@ 0x104
 800a7e2:	4630      	mov	r0, r6
 800a7e4:	f000 f87c 	bl	800a8e0 <_scanf_i>
 800a7e8:	e7b4      	b.n	800a754 <__ssvfiscanf_r+0x210>
 800a7ea:	bf00      	nop
 800a7ec:	0800a495 	.word	0x0800a495
 800a7f0:	0800a50b 	.word	0x0800a50b
 800a7f4:	0800c101 	.word	0x0800c101
 800a7f8:	0800c207 	.word	0x0800c207
 800a7fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a828 <__ssvfiscanf_r+0x2e4>)
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f43f aec5 	beq.w	800a58e <__ssvfiscanf_r+0x4a>
 800a804:	466b      	mov	r3, sp
 800a806:	4622      	mov	r2, r4
 800a808:	a941      	add	r1, sp, #260	@ 0x104
 800a80a:	4630      	mov	r0, r6
 800a80c:	f7fc fe7a 	bl	8007504 <_scanf_float>
 800a810:	e7a0      	b.n	800a754 <__ssvfiscanf_r+0x210>
 800a812:	89a3      	ldrh	r3, [r4, #12]
 800a814:	065b      	lsls	r3, r3, #25
 800a816:	f53f af71 	bmi.w	800a6fc <__ssvfiscanf_r+0x1b8>
 800a81a:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800a81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a822:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a824:	e7f9      	b.n	800a81a <__ssvfiscanf_r+0x2d6>
 800a826:	bf00      	nop
 800a828:	08007505 	.word	0x08007505

0800a82c <_scanf_chars>:
 800a82c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a830:	4615      	mov	r5, r2
 800a832:	688a      	ldr	r2, [r1, #8]
 800a834:	4680      	mov	r8, r0
 800a836:	460c      	mov	r4, r1
 800a838:	b932      	cbnz	r2, 800a848 <_scanf_chars+0x1c>
 800a83a:	698a      	ldr	r2, [r1, #24]
 800a83c:	2a00      	cmp	r2, #0
 800a83e:	bf14      	ite	ne
 800a840:	f04f 32ff 	movne.w	r2, #4294967295
 800a844:	2201      	moveq	r2, #1
 800a846:	608a      	str	r2, [r1, #8]
 800a848:	6822      	ldr	r2, [r4, #0]
 800a84a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800a8dc <_scanf_chars+0xb0>
 800a84e:	06d1      	lsls	r1, r2, #27
 800a850:	bf5f      	itttt	pl
 800a852:	681a      	ldrpl	r2, [r3, #0]
 800a854:	1d11      	addpl	r1, r2, #4
 800a856:	6019      	strpl	r1, [r3, #0]
 800a858:	6816      	ldrpl	r6, [r2, #0]
 800a85a:	2700      	movs	r7, #0
 800a85c:	69a0      	ldr	r0, [r4, #24]
 800a85e:	b188      	cbz	r0, 800a884 <_scanf_chars+0x58>
 800a860:	2801      	cmp	r0, #1
 800a862:	d107      	bne.n	800a874 <_scanf_chars+0x48>
 800a864:	682b      	ldr	r3, [r5, #0]
 800a866:	781a      	ldrb	r2, [r3, #0]
 800a868:	6963      	ldr	r3, [r4, #20]
 800a86a:	5c9b      	ldrb	r3, [r3, r2]
 800a86c:	b953      	cbnz	r3, 800a884 <_scanf_chars+0x58>
 800a86e:	2f00      	cmp	r7, #0
 800a870:	d031      	beq.n	800a8d6 <_scanf_chars+0xaa>
 800a872:	e022      	b.n	800a8ba <_scanf_chars+0x8e>
 800a874:	2802      	cmp	r0, #2
 800a876:	d120      	bne.n	800a8ba <_scanf_chars+0x8e>
 800a878:	682b      	ldr	r3, [r5, #0]
 800a87a:	781b      	ldrb	r3, [r3, #0]
 800a87c:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a880:	071b      	lsls	r3, r3, #28
 800a882:	d41a      	bmi.n	800a8ba <_scanf_chars+0x8e>
 800a884:	6823      	ldr	r3, [r4, #0]
 800a886:	06da      	lsls	r2, r3, #27
 800a888:	bf5e      	ittt	pl
 800a88a:	682b      	ldrpl	r3, [r5, #0]
 800a88c:	781b      	ldrbpl	r3, [r3, #0]
 800a88e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a892:	682a      	ldr	r2, [r5, #0]
 800a894:	686b      	ldr	r3, [r5, #4]
 800a896:	3201      	adds	r2, #1
 800a898:	602a      	str	r2, [r5, #0]
 800a89a:	68a2      	ldr	r2, [r4, #8]
 800a89c:	3b01      	subs	r3, #1
 800a89e:	3a01      	subs	r2, #1
 800a8a0:	606b      	str	r3, [r5, #4]
 800a8a2:	3701      	adds	r7, #1
 800a8a4:	60a2      	str	r2, [r4, #8]
 800a8a6:	b142      	cbz	r2, 800a8ba <_scanf_chars+0x8e>
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	dcd7      	bgt.n	800a85c <_scanf_chars+0x30>
 800a8ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a8b0:	4629      	mov	r1, r5
 800a8b2:	4640      	mov	r0, r8
 800a8b4:	4798      	blx	r3
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	d0d0      	beq.n	800a85c <_scanf_chars+0x30>
 800a8ba:	6823      	ldr	r3, [r4, #0]
 800a8bc:	f013 0310 	ands.w	r3, r3, #16
 800a8c0:	d105      	bne.n	800a8ce <_scanf_chars+0xa2>
 800a8c2:	68e2      	ldr	r2, [r4, #12]
 800a8c4:	3201      	adds	r2, #1
 800a8c6:	60e2      	str	r2, [r4, #12]
 800a8c8:	69a2      	ldr	r2, [r4, #24]
 800a8ca:	b102      	cbz	r2, 800a8ce <_scanf_chars+0xa2>
 800a8cc:	7033      	strb	r3, [r6, #0]
 800a8ce:	6923      	ldr	r3, [r4, #16]
 800a8d0:	443b      	add	r3, r7
 800a8d2:	6123      	str	r3, [r4, #16]
 800a8d4:	2000      	movs	r0, #0
 800a8d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8da:	bf00      	nop
 800a8dc:	0800c101 	.word	0x0800c101

0800a8e0 <_scanf_i>:
 800a8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e4:	4698      	mov	r8, r3
 800a8e6:	4b74      	ldr	r3, [pc, #464]	@ (800aab8 <_scanf_i+0x1d8>)
 800a8e8:	460c      	mov	r4, r1
 800a8ea:	4682      	mov	sl, r0
 800a8ec:	4616      	mov	r6, r2
 800a8ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a8f2:	b087      	sub	sp, #28
 800a8f4:	ab03      	add	r3, sp, #12
 800a8f6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a8fa:	4b70      	ldr	r3, [pc, #448]	@ (800aabc <_scanf_i+0x1dc>)
 800a8fc:	69a1      	ldr	r1, [r4, #24]
 800a8fe:	4a70      	ldr	r2, [pc, #448]	@ (800aac0 <_scanf_i+0x1e0>)
 800a900:	2903      	cmp	r1, #3
 800a902:	bf08      	it	eq
 800a904:	461a      	moveq	r2, r3
 800a906:	68a3      	ldr	r3, [r4, #8]
 800a908:	9201      	str	r2, [sp, #4]
 800a90a:	1e5a      	subs	r2, r3, #1
 800a90c:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a910:	bf88      	it	hi
 800a912:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a916:	4627      	mov	r7, r4
 800a918:	bf82      	ittt	hi
 800a91a:	eb03 0905 	addhi.w	r9, r3, r5
 800a91e:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a922:	60a3      	strhi	r3, [r4, #8]
 800a924:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a928:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800a92c:	bf98      	it	ls
 800a92e:	f04f 0900 	movls.w	r9, #0
 800a932:	6023      	str	r3, [r4, #0]
 800a934:	463d      	mov	r5, r7
 800a936:	f04f 0b00 	mov.w	fp, #0
 800a93a:	6831      	ldr	r1, [r6, #0]
 800a93c:	ab03      	add	r3, sp, #12
 800a93e:	7809      	ldrb	r1, [r1, #0]
 800a940:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a944:	2202      	movs	r2, #2
 800a946:	f7f5 fc4b 	bl	80001e0 <memchr>
 800a94a:	b328      	cbz	r0, 800a998 <_scanf_i+0xb8>
 800a94c:	f1bb 0f01 	cmp.w	fp, #1
 800a950:	d159      	bne.n	800aa06 <_scanf_i+0x126>
 800a952:	6862      	ldr	r2, [r4, #4]
 800a954:	b92a      	cbnz	r2, 800a962 <_scanf_i+0x82>
 800a956:	6822      	ldr	r2, [r4, #0]
 800a958:	2108      	movs	r1, #8
 800a95a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a95e:	6061      	str	r1, [r4, #4]
 800a960:	6022      	str	r2, [r4, #0]
 800a962:	6822      	ldr	r2, [r4, #0]
 800a964:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800a968:	6022      	str	r2, [r4, #0]
 800a96a:	68a2      	ldr	r2, [r4, #8]
 800a96c:	1e51      	subs	r1, r2, #1
 800a96e:	60a1      	str	r1, [r4, #8]
 800a970:	b192      	cbz	r2, 800a998 <_scanf_i+0xb8>
 800a972:	6832      	ldr	r2, [r6, #0]
 800a974:	1c51      	adds	r1, r2, #1
 800a976:	6031      	str	r1, [r6, #0]
 800a978:	7812      	ldrb	r2, [r2, #0]
 800a97a:	f805 2b01 	strb.w	r2, [r5], #1
 800a97e:	6872      	ldr	r2, [r6, #4]
 800a980:	3a01      	subs	r2, #1
 800a982:	2a00      	cmp	r2, #0
 800a984:	6072      	str	r2, [r6, #4]
 800a986:	dc07      	bgt.n	800a998 <_scanf_i+0xb8>
 800a988:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800a98c:	4631      	mov	r1, r6
 800a98e:	4650      	mov	r0, sl
 800a990:	4790      	blx	r2
 800a992:	2800      	cmp	r0, #0
 800a994:	f040 8085 	bne.w	800aaa2 <_scanf_i+0x1c2>
 800a998:	f10b 0b01 	add.w	fp, fp, #1
 800a99c:	f1bb 0f03 	cmp.w	fp, #3
 800a9a0:	d1cb      	bne.n	800a93a <_scanf_i+0x5a>
 800a9a2:	6863      	ldr	r3, [r4, #4]
 800a9a4:	b90b      	cbnz	r3, 800a9aa <_scanf_i+0xca>
 800a9a6:	230a      	movs	r3, #10
 800a9a8:	6063      	str	r3, [r4, #4]
 800a9aa:	6863      	ldr	r3, [r4, #4]
 800a9ac:	4945      	ldr	r1, [pc, #276]	@ (800aac4 <_scanf_i+0x1e4>)
 800a9ae:	6960      	ldr	r0, [r4, #20]
 800a9b0:	1ac9      	subs	r1, r1, r3
 800a9b2:	f000 f935 	bl	800ac20 <__sccl>
 800a9b6:	f04f 0b00 	mov.w	fp, #0
 800a9ba:	68a3      	ldr	r3, [r4, #8]
 800a9bc:	6822      	ldr	r2, [r4, #0]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d03d      	beq.n	800aa3e <_scanf_i+0x15e>
 800a9c2:	6831      	ldr	r1, [r6, #0]
 800a9c4:	6960      	ldr	r0, [r4, #20]
 800a9c6:	f891 c000 	ldrb.w	ip, [r1]
 800a9ca:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a9ce:	2800      	cmp	r0, #0
 800a9d0:	d035      	beq.n	800aa3e <_scanf_i+0x15e>
 800a9d2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800a9d6:	d124      	bne.n	800aa22 <_scanf_i+0x142>
 800a9d8:	0510      	lsls	r0, r2, #20
 800a9da:	d522      	bpl.n	800aa22 <_scanf_i+0x142>
 800a9dc:	f10b 0b01 	add.w	fp, fp, #1
 800a9e0:	f1b9 0f00 	cmp.w	r9, #0
 800a9e4:	d003      	beq.n	800a9ee <_scanf_i+0x10e>
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	f109 39ff 	add.w	r9, r9, #4294967295
 800a9ec:	60a3      	str	r3, [r4, #8]
 800a9ee:	6873      	ldr	r3, [r6, #4]
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	6073      	str	r3, [r6, #4]
 800a9f6:	dd1b      	ble.n	800aa30 <_scanf_i+0x150>
 800a9f8:	6833      	ldr	r3, [r6, #0]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	6033      	str	r3, [r6, #0]
 800a9fe:	68a3      	ldr	r3, [r4, #8]
 800aa00:	3b01      	subs	r3, #1
 800aa02:	60a3      	str	r3, [r4, #8]
 800aa04:	e7d9      	b.n	800a9ba <_scanf_i+0xda>
 800aa06:	f1bb 0f02 	cmp.w	fp, #2
 800aa0a:	d1ae      	bne.n	800a96a <_scanf_i+0x8a>
 800aa0c:	6822      	ldr	r2, [r4, #0]
 800aa0e:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800aa12:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800aa16:	d1bf      	bne.n	800a998 <_scanf_i+0xb8>
 800aa18:	2110      	movs	r1, #16
 800aa1a:	6061      	str	r1, [r4, #4]
 800aa1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aa20:	e7a2      	b.n	800a968 <_scanf_i+0x88>
 800aa22:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800aa26:	6022      	str	r2, [r4, #0]
 800aa28:	780b      	ldrb	r3, [r1, #0]
 800aa2a:	f805 3b01 	strb.w	r3, [r5], #1
 800aa2e:	e7de      	b.n	800a9ee <_scanf_i+0x10e>
 800aa30:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800aa34:	4631      	mov	r1, r6
 800aa36:	4650      	mov	r0, sl
 800aa38:	4798      	blx	r3
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	d0df      	beq.n	800a9fe <_scanf_i+0x11e>
 800aa3e:	6823      	ldr	r3, [r4, #0]
 800aa40:	05d9      	lsls	r1, r3, #23
 800aa42:	d50d      	bpl.n	800aa60 <_scanf_i+0x180>
 800aa44:	42bd      	cmp	r5, r7
 800aa46:	d909      	bls.n	800aa5c <_scanf_i+0x17c>
 800aa48:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800aa4c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa50:	4632      	mov	r2, r6
 800aa52:	4650      	mov	r0, sl
 800aa54:	4798      	blx	r3
 800aa56:	f105 39ff 	add.w	r9, r5, #4294967295
 800aa5a:	464d      	mov	r5, r9
 800aa5c:	42bd      	cmp	r5, r7
 800aa5e:	d028      	beq.n	800aab2 <_scanf_i+0x1d2>
 800aa60:	6822      	ldr	r2, [r4, #0]
 800aa62:	f012 0210 	ands.w	r2, r2, #16
 800aa66:	d113      	bne.n	800aa90 <_scanf_i+0x1b0>
 800aa68:	702a      	strb	r2, [r5, #0]
 800aa6a:	6863      	ldr	r3, [r4, #4]
 800aa6c:	9e01      	ldr	r6, [sp, #4]
 800aa6e:	4639      	mov	r1, r7
 800aa70:	4650      	mov	r0, sl
 800aa72:	47b0      	blx	r6
 800aa74:	f8d8 3000 	ldr.w	r3, [r8]
 800aa78:	6821      	ldr	r1, [r4, #0]
 800aa7a:	1d1a      	adds	r2, r3, #4
 800aa7c:	f8c8 2000 	str.w	r2, [r8]
 800aa80:	f011 0f20 	tst.w	r1, #32
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	d00f      	beq.n	800aaa8 <_scanf_i+0x1c8>
 800aa88:	6018      	str	r0, [r3, #0]
 800aa8a:	68e3      	ldr	r3, [r4, #12]
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	60e3      	str	r3, [r4, #12]
 800aa90:	6923      	ldr	r3, [r4, #16]
 800aa92:	1bed      	subs	r5, r5, r7
 800aa94:	445d      	add	r5, fp
 800aa96:	442b      	add	r3, r5
 800aa98:	6123      	str	r3, [r4, #16]
 800aa9a:	2000      	movs	r0, #0
 800aa9c:	b007      	add	sp, #28
 800aa9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaa2:	f04f 0b00 	mov.w	fp, #0
 800aaa6:	e7ca      	b.n	800aa3e <_scanf_i+0x15e>
 800aaa8:	07ca      	lsls	r2, r1, #31
 800aaaa:	bf4c      	ite	mi
 800aaac:	8018      	strhmi	r0, [r3, #0]
 800aaae:	6018      	strpl	r0, [r3, #0]
 800aab0:	e7eb      	b.n	800aa8a <_scanf_i+0x1aa>
 800aab2:	2001      	movs	r0, #1
 800aab4:	e7f2      	b.n	800aa9c <_scanf_i+0x1bc>
 800aab6:	bf00      	nop
 800aab8:	0800be60 	.word	0x0800be60
 800aabc:	0800a1e1 	.word	0x0800a1e1
 800aac0:	0800b5e5 	.word	0x0800b5e5
 800aac4:	0800c222 	.word	0x0800c222

0800aac8 <__sflush_r>:
 800aac8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aad0:	0716      	lsls	r6, r2, #28
 800aad2:	4605      	mov	r5, r0
 800aad4:	460c      	mov	r4, r1
 800aad6:	d454      	bmi.n	800ab82 <__sflush_r+0xba>
 800aad8:	684b      	ldr	r3, [r1, #4]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	dc02      	bgt.n	800aae4 <__sflush_r+0x1c>
 800aade:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	dd48      	ble.n	800ab76 <__sflush_r+0xae>
 800aae4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aae6:	2e00      	cmp	r6, #0
 800aae8:	d045      	beq.n	800ab76 <__sflush_r+0xae>
 800aaea:	2300      	movs	r3, #0
 800aaec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aaf0:	682f      	ldr	r7, [r5, #0]
 800aaf2:	6a21      	ldr	r1, [r4, #32]
 800aaf4:	602b      	str	r3, [r5, #0]
 800aaf6:	d030      	beq.n	800ab5a <__sflush_r+0x92>
 800aaf8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aafa:	89a3      	ldrh	r3, [r4, #12]
 800aafc:	0759      	lsls	r1, r3, #29
 800aafe:	d505      	bpl.n	800ab0c <__sflush_r+0x44>
 800ab00:	6863      	ldr	r3, [r4, #4]
 800ab02:	1ad2      	subs	r2, r2, r3
 800ab04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ab06:	b10b      	cbz	r3, 800ab0c <__sflush_r+0x44>
 800ab08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ab0a:	1ad2      	subs	r2, r2, r3
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ab10:	6a21      	ldr	r1, [r4, #32]
 800ab12:	4628      	mov	r0, r5
 800ab14:	47b0      	blx	r6
 800ab16:	1c43      	adds	r3, r0, #1
 800ab18:	89a3      	ldrh	r3, [r4, #12]
 800ab1a:	d106      	bne.n	800ab2a <__sflush_r+0x62>
 800ab1c:	6829      	ldr	r1, [r5, #0]
 800ab1e:	291d      	cmp	r1, #29
 800ab20:	d82b      	bhi.n	800ab7a <__sflush_r+0xb2>
 800ab22:	4a2a      	ldr	r2, [pc, #168]	@ (800abcc <__sflush_r+0x104>)
 800ab24:	410a      	asrs	r2, r1
 800ab26:	07d6      	lsls	r6, r2, #31
 800ab28:	d427      	bmi.n	800ab7a <__sflush_r+0xb2>
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	6062      	str	r2, [r4, #4]
 800ab2e:	04d9      	lsls	r1, r3, #19
 800ab30:	6922      	ldr	r2, [r4, #16]
 800ab32:	6022      	str	r2, [r4, #0]
 800ab34:	d504      	bpl.n	800ab40 <__sflush_r+0x78>
 800ab36:	1c42      	adds	r2, r0, #1
 800ab38:	d101      	bne.n	800ab3e <__sflush_r+0x76>
 800ab3a:	682b      	ldr	r3, [r5, #0]
 800ab3c:	b903      	cbnz	r3, 800ab40 <__sflush_r+0x78>
 800ab3e:	6560      	str	r0, [r4, #84]	@ 0x54
 800ab40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab42:	602f      	str	r7, [r5, #0]
 800ab44:	b1b9      	cbz	r1, 800ab76 <__sflush_r+0xae>
 800ab46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab4a:	4299      	cmp	r1, r3
 800ab4c:	d002      	beq.n	800ab54 <__sflush_r+0x8c>
 800ab4e:	4628      	mov	r0, r5
 800ab50:	f7fd ff12 	bl	8008978 <_free_r>
 800ab54:	2300      	movs	r3, #0
 800ab56:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab58:	e00d      	b.n	800ab76 <__sflush_r+0xae>
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	4628      	mov	r0, r5
 800ab5e:	47b0      	blx	r6
 800ab60:	4602      	mov	r2, r0
 800ab62:	1c50      	adds	r0, r2, #1
 800ab64:	d1c9      	bne.n	800aafa <__sflush_r+0x32>
 800ab66:	682b      	ldr	r3, [r5, #0]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d0c6      	beq.n	800aafa <__sflush_r+0x32>
 800ab6c:	2b1d      	cmp	r3, #29
 800ab6e:	d001      	beq.n	800ab74 <__sflush_r+0xac>
 800ab70:	2b16      	cmp	r3, #22
 800ab72:	d11e      	bne.n	800abb2 <__sflush_r+0xea>
 800ab74:	602f      	str	r7, [r5, #0]
 800ab76:	2000      	movs	r0, #0
 800ab78:	e022      	b.n	800abc0 <__sflush_r+0xf8>
 800ab7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab7e:	b21b      	sxth	r3, r3
 800ab80:	e01b      	b.n	800abba <__sflush_r+0xf2>
 800ab82:	690f      	ldr	r7, [r1, #16]
 800ab84:	2f00      	cmp	r7, #0
 800ab86:	d0f6      	beq.n	800ab76 <__sflush_r+0xae>
 800ab88:	0793      	lsls	r3, r2, #30
 800ab8a:	680e      	ldr	r6, [r1, #0]
 800ab8c:	bf08      	it	eq
 800ab8e:	694b      	ldreq	r3, [r1, #20]
 800ab90:	600f      	str	r7, [r1, #0]
 800ab92:	bf18      	it	ne
 800ab94:	2300      	movne	r3, #0
 800ab96:	eba6 0807 	sub.w	r8, r6, r7
 800ab9a:	608b      	str	r3, [r1, #8]
 800ab9c:	f1b8 0f00 	cmp.w	r8, #0
 800aba0:	dde9      	ble.n	800ab76 <__sflush_r+0xae>
 800aba2:	6a21      	ldr	r1, [r4, #32]
 800aba4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800aba6:	4643      	mov	r3, r8
 800aba8:	463a      	mov	r2, r7
 800abaa:	4628      	mov	r0, r5
 800abac:	47b0      	blx	r6
 800abae:	2800      	cmp	r0, #0
 800abb0:	dc08      	bgt.n	800abc4 <__sflush_r+0xfc>
 800abb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abba:	81a3      	strh	r3, [r4, #12]
 800abbc:	f04f 30ff 	mov.w	r0, #4294967295
 800abc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abc4:	4407      	add	r7, r0
 800abc6:	eba8 0800 	sub.w	r8, r8, r0
 800abca:	e7e7      	b.n	800ab9c <__sflush_r+0xd4>
 800abcc:	dfbffffe 	.word	0xdfbffffe

0800abd0 <_fflush_r>:
 800abd0:	b538      	push	{r3, r4, r5, lr}
 800abd2:	690b      	ldr	r3, [r1, #16]
 800abd4:	4605      	mov	r5, r0
 800abd6:	460c      	mov	r4, r1
 800abd8:	b913      	cbnz	r3, 800abe0 <_fflush_r+0x10>
 800abda:	2500      	movs	r5, #0
 800abdc:	4628      	mov	r0, r5
 800abde:	bd38      	pop	{r3, r4, r5, pc}
 800abe0:	b118      	cbz	r0, 800abea <_fflush_r+0x1a>
 800abe2:	6a03      	ldr	r3, [r0, #32]
 800abe4:	b90b      	cbnz	r3, 800abea <_fflush_r+0x1a>
 800abe6:	f7fc ff2d 	bl	8007a44 <__sinit>
 800abea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d0f3      	beq.n	800abda <_fflush_r+0xa>
 800abf2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800abf4:	07d0      	lsls	r0, r2, #31
 800abf6:	d404      	bmi.n	800ac02 <_fflush_r+0x32>
 800abf8:	0599      	lsls	r1, r3, #22
 800abfa:	d402      	bmi.n	800ac02 <_fflush_r+0x32>
 800abfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800abfe:	f7fd f864 	bl	8007cca <__retarget_lock_acquire_recursive>
 800ac02:	4628      	mov	r0, r5
 800ac04:	4621      	mov	r1, r4
 800ac06:	f7ff ff5f 	bl	800aac8 <__sflush_r>
 800ac0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac0c:	07da      	lsls	r2, r3, #31
 800ac0e:	4605      	mov	r5, r0
 800ac10:	d4e4      	bmi.n	800abdc <_fflush_r+0xc>
 800ac12:	89a3      	ldrh	r3, [r4, #12]
 800ac14:	059b      	lsls	r3, r3, #22
 800ac16:	d4e1      	bmi.n	800abdc <_fflush_r+0xc>
 800ac18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac1a:	f7fd f857 	bl	8007ccc <__retarget_lock_release_recursive>
 800ac1e:	e7dd      	b.n	800abdc <_fflush_r+0xc>

0800ac20 <__sccl>:
 800ac20:	b570      	push	{r4, r5, r6, lr}
 800ac22:	780b      	ldrb	r3, [r1, #0]
 800ac24:	4604      	mov	r4, r0
 800ac26:	2b5e      	cmp	r3, #94	@ 0x5e
 800ac28:	bf0b      	itete	eq
 800ac2a:	784b      	ldrbeq	r3, [r1, #1]
 800ac2c:	1c4a      	addne	r2, r1, #1
 800ac2e:	1c8a      	addeq	r2, r1, #2
 800ac30:	2100      	movne	r1, #0
 800ac32:	bf08      	it	eq
 800ac34:	2101      	moveq	r1, #1
 800ac36:	3801      	subs	r0, #1
 800ac38:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800ac3c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800ac40:	42a8      	cmp	r0, r5
 800ac42:	d1fb      	bne.n	800ac3c <__sccl+0x1c>
 800ac44:	b90b      	cbnz	r3, 800ac4a <__sccl+0x2a>
 800ac46:	1e50      	subs	r0, r2, #1
 800ac48:	bd70      	pop	{r4, r5, r6, pc}
 800ac4a:	f081 0101 	eor.w	r1, r1, #1
 800ac4e:	54e1      	strb	r1, [r4, r3]
 800ac50:	4610      	mov	r0, r2
 800ac52:	4602      	mov	r2, r0
 800ac54:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ac58:	2d2d      	cmp	r5, #45	@ 0x2d
 800ac5a:	d005      	beq.n	800ac68 <__sccl+0x48>
 800ac5c:	2d5d      	cmp	r5, #93	@ 0x5d
 800ac5e:	d016      	beq.n	800ac8e <__sccl+0x6e>
 800ac60:	2d00      	cmp	r5, #0
 800ac62:	d0f1      	beq.n	800ac48 <__sccl+0x28>
 800ac64:	462b      	mov	r3, r5
 800ac66:	e7f2      	b.n	800ac4e <__sccl+0x2e>
 800ac68:	7846      	ldrb	r6, [r0, #1]
 800ac6a:	2e5d      	cmp	r6, #93	@ 0x5d
 800ac6c:	d0fa      	beq.n	800ac64 <__sccl+0x44>
 800ac6e:	42b3      	cmp	r3, r6
 800ac70:	dcf8      	bgt.n	800ac64 <__sccl+0x44>
 800ac72:	3002      	adds	r0, #2
 800ac74:	461a      	mov	r2, r3
 800ac76:	3201      	adds	r2, #1
 800ac78:	4296      	cmp	r6, r2
 800ac7a:	54a1      	strb	r1, [r4, r2]
 800ac7c:	dcfb      	bgt.n	800ac76 <__sccl+0x56>
 800ac7e:	1af2      	subs	r2, r6, r3
 800ac80:	3a01      	subs	r2, #1
 800ac82:	1c5d      	adds	r5, r3, #1
 800ac84:	42b3      	cmp	r3, r6
 800ac86:	bfa8      	it	ge
 800ac88:	2200      	movge	r2, #0
 800ac8a:	18ab      	adds	r3, r5, r2
 800ac8c:	e7e1      	b.n	800ac52 <__sccl+0x32>
 800ac8e:	4610      	mov	r0, r2
 800ac90:	e7da      	b.n	800ac48 <__sccl+0x28>

0800ac92 <__submore>:
 800ac92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac96:	460c      	mov	r4, r1
 800ac98:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ac9a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac9e:	4299      	cmp	r1, r3
 800aca0:	d11d      	bne.n	800acde <__submore+0x4c>
 800aca2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800aca6:	f7fd fedb 	bl	8008a60 <_malloc_r>
 800acaa:	b918      	cbnz	r0, 800acb4 <__submore+0x22>
 800acac:	f04f 30ff 	mov.w	r0, #4294967295
 800acb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800acb8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800acba:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800acbe:	6360      	str	r0, [r4, #52]	@ 0x34
 800acc0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800acc4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800acc8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800accc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800acd0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800acd4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800acd8:	6020      	str	r0, [r4, #0]
 800acda:	2000      	movs	r0, #0
 800acdc:	e7e8      	b.n	800acb0 <__submore+0x1e>
 800acde:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800ace0:	0077      	lsls	r7, r6, #1
 800ace2:	463a      	mov	r2, r7
 800ace4:	f000 fbe1 	bl	800b4aa <_realloc_r>
 800ace8:	4605      	mov	r5, r0
 800acea:	2800      	cmp	r0, #0
 800acec:	d0de      	beq.n	800acac <__submore+0x1a>
 800acee:	eb00 0806 	add.w	r8, r0, r6
 800acf2:	4601      	mov	r1, r0
 800acf4:	4632      	mov	r2, r6
 800acf6:	4640      	mov	r0, r8
 800acf8:	f000 f842 	bl	800ad80 <memcpy>
 800acfc:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800ad00:	f8c4 8000 	str.w	r8, [r4]
 800ad04:	e7e9      	b.n	800acda <__submore+0x48>

0800ad06 <memmove>:
 800ad06:	4288      	cmp	r0, r1
 800ad08:	b510      	push	{r4, lr}
 800ad0a:	eb01 0402 	add.w	r4, r1, r2
 800ad0e:	d902      	bls.n	800ad16 <memmove+0x10>
 800ad10:	4284      	cmp	r4, r0
 800ad12:	4623      	mov	r3, r4
 800ad14:	d807      	bhi.n	800ad26 <memmove+0x20>
 800ad16:	1e43      	subs	r3, r0, #1
 800ad18:	42a1      	cmp	r1, r4
 800ad1a:	d008      	beq.n	800ad2e <memmove+0x28>
 800ad1c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ad20:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ad24:	e7f8      	b.n	800ad18 <memmove+0x12>
 800ad26:	4402      	add	r2, r0
 800ad28:	4601      	mov	r1, r0
 800ad2a:	428a      	cmp	r2, r1
 800ad2c:	d100      	bne.n	800ad30 <memmove+0x2a>
 800ad2e:	bd10      	pop	{r4, pc}
 800ad30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad34:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad38:	e7f7      	b.n	800ad2a <memmove+0x24>

0800ad3a <strncmp>:
 800ad3a:	b510      	push	{r4, lr}
 800ad3c:	b16a      	cbz	r2, 800ad5a <strncmp+0x20>
 800ad3e:	3901      	subs	r1, #1
 800ad40:	1884      	adds	r4, r0, r2
 800ad42:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad46:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ad4a:	429a      	cmp	r2, r3
 800ad4c:	d103      	bne.n	800ad56 <strncmp+0x1c>
 800ad4e:	42a0      	cmp	r0, r4
 800ad50:	d001      	beq.n	800ad56 <strncmp+0x1c>
 800ad52:	2a00      	cmp	r2, #0
 800ad54:	d1f5      	bne.n	800ad42 <strncmp+0x8>
 800ad56:	1ad0      	subs	r0, r2, r3
 800ad58:	bd10      	pop	{r4, pc}
 800ad5a:	4610      	mov	r0, r2
 800ad5c:	e7fc      	b.n	800ad58 <strncmp+0x1e>
	...

0800ad60 <_sbrk_r>:
 800ad60:	b538      	push	{r3, r4, r5, lr}
 800ad62:	4d06      	ldr	r5, [pc, #24]	@ (800ad7c <_sbrk_r+0x1c>)
 800ad64:	2300      	movs	r3, #0
 800ad66:	4604      	mov	r4, r0
 800ad68:	4608      	mov	r0, r1
 800ad6a:	602b      	str	r3, [r5, #0]
 800ad6c:	f7f7 fcdc 	bl	8002728 <_sbrk>
 800ad70:	1c43      	adds	r3, r0, #1
 800ad72:	d102      	bne.n	800ad7a <_sbrk_r+0x1a>
 800ad74:	682b      	ldr	r3, [r5, #0]
 800ad76:	b103      	cbz	r3, 800ad7a <_sbrk_r+0x1a>
 800ad78:	6023      	str	r3, [r4, #0]
 800ad7a:	bd38      	pop	{r3, r4, r5, pc}
 800ad7c:	2000067c 	.word	0x2000067c

0800ad80 <memcpy>:
 800ad80:	440a      	add	r2, r1
 800ad82:	4291      	cmp	r1, r2
 800ad84:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad88:	d100      	bne.n	800ad8c <memcpy+0xc>
 800ad8a:	4770      	bx	lr
 800ad8c:	b510      	push	{r4, lr}
 800ad8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad96:	4291      	cmp	r1, r2
 800ad98:	d1f9      	bne.n	800ad8e <memcpy+0xe>
 800ad9a:	bd10      	pop	{r4, pc}
 800ad9c:	0000      	movs	r0, r0
	...

0800ada0 <nan>:
 800ada0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ada8 <nan+0x8>
 800ada4:	4770      	bx	lr
 800ada6:	bf00      	nop
 800ada8:	00000000 	.word	0x00000000
 800adac:	7ff80000 	.word	0x7ff80000

0800adb0 <__assert_func>:
 800adb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800adb2:	4614      	mov	r4, r2
 800adb4:	461a      	mov	r2, r3
 800adb6:	4b09      	ldr	r3, [pc, #36]	@ (800addc <__assert_func+0x2c>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4605      	mov	r5, r0
 800adbc:	68d8      	ldr	r0, [r3, #12]
 800adbe:	b954      	cbnz	r4, 800add6 <__assert_func+0x26>
 800adc0:	4b07      	ldr	r3, [pc, #28]	@ (800ade0 <__assert_func+0x30>)
 800adc2:	461c      	mov	r4, r3
 800adc4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800adc8:	9100      	str	r1, [sp, #0]
 800adca:	462b      	mov	r3, r5
 800adcc:	4905      	ldr	r1, [pc, #20]	@ (800ade4 <__assert_func+0x34>)
 800adce:	f000 fc19 	bl	800b604 <fiprintf>
 800add2:	f000 fc29 	bl	800b628 <abort>
 800add6:	4b04      	ldr	r3, [pc, #16]	@ (800ade8 <__assert_func+0x38>)
 800add8:	e7f4      	b.n	800adc4 <__assert_func+0x14>
 800adda:	bf00      	nop
 800addc:	2000009c 	.word	0x2000009c
 800ade0:	0800c270 	.word	0x0800c270
 800ade4:	0800c242 	.word	0x0800c242
 800ade8:	0800c235 	.word	0x0800c235

0800adec <_calloc_r>:
 800adec:	b570      	push	{r4, r5, r6, lr}
 800adee:	fba1 5402 	umull	r5, r4, r1, r2
 800adf2:	b93c      	cbnz	r4, 800ae04 <_calloc_r+0x18>
 800adf4:	4629      	mov	r1, r5
 800adf6:	f7fd fe33 	bl	8008a60 <_malloc_r>
 800adfa:	4606      	mov	r6, r0
 800adfc:	b928      	cbnz	r0, 800ae0a <_calloc_r+0x1e>
 800adfe:	2600      	movs	r6, #0
 800ae00:	4630      	mov	r0, r6
 800ae02:	bd70      	pop	{r4, r5, r6, pc}
 800ae04:	220c      	movs	r2, #12
 800ae06:	6002      	str	r2, [r0, #0]
 800ae08:	e7f9      	b.n	800adfe <_calloc_r+0x12>
 800ae0a:	462a      	mov	r2, r5
 800ae0c:	4621      	mov	r1, r4
 800ae0e:	f7fc fede 	bl	8007bce <memset>
 800ae12:	e7f5      	b.n	800ae00 <_calloc_r+0x14>

0800ae14 <rshift>:
 800ae14:	6903      	ldr	r3, [r0, #16]
 800ae16:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ae1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae1e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ae22:	f100 0414 	add.w	r4, r0, #20
 800ae26:	dd45      	ble.n	800aeb4 <rshift+0xa0>
 800ae28:	f011 011f 	ands.w	r1, r1, #31
 800ae2c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ae30:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ae34:	d10c      	bne.n	800ae50 <rshift+0x3c>
 800ae36:	f100 0710 	add.w	r7, r0, #16
 800ae3a:	4629      	mov	r1, r5
 800ae3c:	42b1      	cmp	r1, r6
 800ae3e:	d334      	bcc.n	800aeaa <rshift+0x96>
 800ae40:	1a9b      	subs	r3, r3, r2
 800ae42:	009b      	lsls	r3, r3, #2
 800ae44:	1eea      	subs	r2, r5, #3
 800ae46:	4296      	cmp	r6, r2
 800ae48:	bf38      	it	cc
 800ae4a:	2300      	movcc	r3, #0
 800ae4c:	4423      	add	r3, r4
 800ae4e:	e015      	b.n	800ae7c <rshift+0x68>
 800ae50:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ae54:	f1c1 0820 	rsb	r8, r1, #32
 800ae58:	40cf      	lsrs	r7, r1
 800ae5a:	f105 0e04 	add.w	lr, r5, #4
 800ae5e:	46a1      	mov	r9, r4
 800ae60:	4576      	cmp	r6, lr
 800ae62:	46f4      	mov	ip, lr
 800ae64:	d815      	bhi.n	800ae92 <rshift+0x7e>
 800ae66:	1a9a      	subs	r2, r3, r2
 800ae68:	0092      	lsls	r2, r2, #2
 800ae6a:	3a04      	subs	r2, #4
 800ae6c:	3501      	adds	r5, #1
 800ae6e:	42ae      	cmp	r6, r5
 800ae70:	bf38      	it	cc
 800ae72:	2200      	movcc	r2, #0
 800ae74:	18a3      	adds	r3, r4, r2
 800ae76:	50a7      	str	r7, [r4, r2]
 800ae78:	b107      	cbz	r7, 800ae7c <rshift+0x68>
 800ae7a:	3304      	adds	r3, #4
 800ae7c:	1b1a      	subs	r2, r3, r4
 800ae7e:	42a3      	cmp	r3, r4
 800ae80:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ae84:	bf08      	it	eq
 800ae86:	2300      	moveq	r3, #0
 800ae88:	6102      	str	r2, [r0, #16]
 800ae8a:	bf08      	it	eq
 800ae8c:	6143      	streq	r3, [r0, #20]
 800ae8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae92:	f8dc c000 	ldr.w	ip, [ip]
 800ae96:	fa0c fc08 	lsl.w	ip, ip, r8
 800ae9a:	ea4c 0707 	orr.w	r7, ip, r7
 800ae9e:	f849 7b04 	str.w	r7, [r9], #4
 800aea2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aea6:	40cf      	lsrs	r7, r1
 800aea8:	e7da      	b.n	800ae60 <rshift+0x4c>
 800aeaa:	f851 cb04 	ldr.w	ip, [r1], #4
 800aeae:	f847 cf04 	str.w	ip, [r7, #4]!
 800aeb2:	e7c3      	b.n	800ae3c <rshift+0x28>
 800aeb4:	4623      	mov	r3, r4
 800aeb6:	e7e1      	b.n	800ae7c <rshift+0x68>

0800aeb8 <__hexdig_fun>:
 800aeb8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800aebc:	2b09      	cmp	r3, #9
 800aebe:	d802      	bhi.n	800aec6 <__hexdig_fun+0xe>
 800aec0:	3820      	subs	r0, #32
 800aec2:	b2c0      	uxtb	r0, r0
 800aec4:	4770      	bx	lr
 800aec6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800aeca:	2b05      	cmp	r3, #5
 800aecc:	d801      	bhi.n	800aed2 <__hexdig_fun+0x1a>
 800aece:	3847      	subs	r0, #71	@ 0x47
 800aed0:	e7f7      	b.n	800aec2 <__hexdig_fun+0xa>
 800aed2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800aed6:	2b05      	cmp	r3, #5
 800aed8:	d801      	bhi.n	800aede <__hexdig_fun+0x26>
 800aeda:	3827      	subs	r0, #39	@ 0x27
 800aedc:	e7f1      	b.n	800aec2 <__hexdig_fun+0xa>
 800aede:	2000      	movs	r0, #0
 800aee0:	4770      	bx	lr
	...

0800aee4 <__gethex>:
 800aee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee8:	b085      	sub	sp, #20
 800aeea:	468a      	mov	sl, r1
 800aeec:	9302      	str	r3, [sp, #8]
 800aeee:	680b      	ldr	r3, [r1, #0]
 800aef0:	9001      	str	r0, [sp, #4]
 800aef2:	4690      	mov	r8, r2
 800aef4:	1c9c      	adds	r4, r3, #2
 800aef6:	46a1      	mov	r9, r4
 800aef8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800aefc:	2830      	cmp	r0, #48	@ 0x30
 800aefe:	d0fa      	beq.n	800aef6 <__gethex+0x12>
 800af00:	eba9 0303 	sub.w	r3, r9, r3
 800af04:	f1a3 0b02 	sub.w	fp, r3, #2
 800af08:	f7ff ffd6 	bl	800aeb8 <__hexdig_fun>
 800af0c:	4605      	mov	r5, r0
 800af0e:	2800      	cmp	r0, #0
 800af10:	d168      	bne.n	800afe4 <__gethex+0x100>
 800af12:	49a0      	ldr	r1, [pc, #640]	@ (800b194 <__gethex+0x2b0>)
 800af14:	2201      	movs	r2, #1
 800af16:	4648      	mov	r0, r9
 800af18:	f7ff ff0f 	bl	800ad3a <strncmp>
 800af1c:	4607      	mov	r7, r0
 800af1e:	2800      	cmp	r0, #0
 800af20:	d167      	bne.n	800aff2 <__gethex+0x10e>
 800af22:	f899 0001 	ldrb.w	r0, [r9, #1]
 800af26:	4626      	mov	r6, r4
 800af28:	f7ff ffc6 	bl	800aeb8 <__hexdig_fun>
 800af2c:	2800      	cmp	r0, #0
 800af2e:	d062      	beq.n	800aff6 <__gethex+0x112>
 800af30:	4623      	mov	r3, r4
 800af32:	7818      	ldrb	r0, [r3, #0]
 800af34:	2830      	cmp	r0, #48	@ 0x30
 800af36:	4699      	mov	r9, r3
 800af38:	f103 0301 	add.w	r3, r3, #1
 800af3c:	d0f9      	beq.n	800af32 <__gethex+0x4e>
 800af3e:	f7ff ffbb 	bl	800aeb8 <__hexdig_fun>
 800af42:	fab0 f580 	clz	r5, r0
 800af46:	096d      	lsrs	r5, r5, #5
 800af48:	f04f 0b01 	mov.w	fp, #1
 800af4c:	464a      	mov	r2, r9
 800af4e:	4616      	mov	r6, r2
 800af50:	3201      	adds	r2, #1
 800af52:	7830      	ldrb	r0, [r6, #0]
 800af54:	f7ff ffb0 	bl	800aeb8 <__hexdig_fun>
 800af58:	2800      	cmp	r0, #0
 800af5a:	d1f8      	bne.n	800af4e <__gethex+0x6a>
 800af5c:	498d      	ldr	r1, [pc, #564]	@ (800b194 <__gethex+0x2b0>)
 800af5e:	2201      	movs	r2, #1
 800af60:	4630      	mov	r0, r6
 800af62:	f7ff feea 	bl	800ad3a <strncmp>
 800af66:	2800      	cmp	r0, #0
 800af68:	d13f      	bne.n	800afea <__gethex+0x106>
 800af6a:	b944      	cbnz	r4, 800af7e <__gethex+0x9a>
 800af6c:	1c74      	adds	r4, r6, #1
 800af6e:	4622      	mov	r2, r4
 800af70:	4616      	mov	r6, r2
 800af72:	3201      	adds	r2, #1
 800af74:	7830      	ldrb	r0, [r6, #0]
 800af76:	f7ff ff9f 	bl	800aeb8 <__hexdig_fun>
 800af7a:	2800      	cmp	r0, #0
 800af7c:	d1f8      	bne.n	800af70 <__gethex+0x8c>
 800af7e:	1ba4      	subs	r4, r4, r6
 800af80:	00a7      	lsls	r7, r4, #2
 800af82:	7833      	ldrb	r3, [r6, #0]
 800af84:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800af88:	2b50      	cmp	r3, #80	@ 0x50
 800af8a:	d13e      	bne.n	800b00a <__gethex+0x126>
 800af8c:	7873      	ldrb	r3, [r6, #1]
 800af8e:	2b2b      	cmp	r3, #43	@ 0x2b
 800af90:	d033      	beq.n	800affa <__gethex+0x116>
 800af92:	2b2d      	cmp	r3, #45	@ 0x2d
 800af94:	d034      	beq.n	800b000 <__gethex+0x11c>
 800af96:	1c71      	adds	r1, r6, #1
 800af98:	2400      	movs	r4, #0
 800af9a:	7808      	ldrb	r0, [r1, #0]
 800af9c:	f7ff ff8c 	bl	800aeb8 <__hexdig_fun>
 800afa0:	1e43      	subs	r3, r0, #1
 800afa2:	b2db      	uxtb	r3, r3
 800afa4:	2b18      	cmp	r3, #24
 800afa6:	d830      	bhi.n	800b00a <__gethex+0x126>
 800afa8:	f1a0 0210 	sub.w	r2, r0, #16
 800afac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800afb0:	f7ff ff82 	bl	800aeb8 <__hexdig_fun>
 800afb4:	f100 3cff 	add.w	ip, r0, #4294967295
 800afb8:	fa5f fc8c 	uxtb.w	ip, ip
 800afbc:	f1bc 0f18 	cmp.w	ip, #24
 800afc0:	f04f 030a 	mov.w	r3, #10
 800afc4:	d91e      	bls.n	800b004 <__gethex+0x120>
 800afc6:	b104      	cbz	r4, 800afca <__gethex+0xe6>
 800afc8:	4252      	negs	r2, r2
 800afca:	4417      	add	r7, r2
 800afcc:	f8ca 1000 	str.w	r1, [sl]
 800afd0:	b1ed      	cbz	r5, 800b00e <__gethex+0x12a>
 800afd2:	f1bb 0f00 	cmp.w	fp, #0
 800afd6:	bf0c      	ite	eq
 800afd8:	2506      	moveq	r5, #6
 800afda:	2500      	movne	r5, #0
 800afdc:	4628      	mov	r0, r5
 800afde:	b005      	add	sp, #20
 800afe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afe4:	2500      	movs	r5, #0
 800afe6:	462c      	mov	r4, r5
 800afe8:	e7b0      	b.n	800af4c <__gethex+0x68>
 800afea:	2c00      	cmp	r4, #0
 800afec:	d1c7      	bne.n	800af7e <__gethex+0x9a>
 800afee:	4627      	mov	r7, r4
 800aff0:	e7c7      	b.n	800af82 <__gethex+0x9e>
 800aff2:	464e      	mov	r6, r9
 800aff4:	462f      	mov	r7, r5
 800aff6:	2501      	movs	r5, #1
 800aff8:	e7c3      	b.n	800af82 <__gethex+0x9e>
 800affa:	2400      	movs	r4, #0
 800affc:	1cb1      	adds	r1, r6, #2
 800affe:	e7cc      	b.n	800af9a <__gethex+0xb6>
 800b000:	2401      	movs	r4, #1
 800b002:	e7fb      	b.n	800affc <__gethex+0x118>
 800b004:	fb03 0002 	mla	r0, r3, r2, r0
 800b008:	e7ce      	b.n	800afa8 <__gethex+0xc4>
 800b00a:	4631      	mov	r1, r6
 800b00c:	e7de      	b.n	800afcc <__gethex+0xe8>
 800b00e:	eba6 0309 	sub.w	r3, r6, r9
 800b012:	3b01      	subs	r3, #1
 800b014:	4629      	mov	r1, r5
 800b016:	2b07      	cmp	r3, #7
 800b018:	dc0a      	bgt.n	800b030 <__gethex+0x14c>
 800b01a:	9801      	ldr	r0, [sp, #4]
 800b01c:	f7fd fdac 	bl	8008b78 <_Balloc>
 800b020:	4604      	mov	r4, r0
 800b022:	b940      	cbnz	r0, 800b036 <__gethex+0x152>
 800b024:	4b5c      	ldr	r3, [pc, #368]	@ (800b198 <__gethex+0x2b4>)
 800b026:	4602      	mov	r2, r0
 800b028:	21e4      	movs	r1, #228	@ 0xe4
 800b02a:	485c      	ldr	r0, [pc, #368]	@ (800b19c <__gethex+0x2b8>)
 800b02c:	f7ff fec0 	bl	800adb0 <__assert_func>
 800b030:	3101      	adds	r1, #1
 800b032:	105b      	asrs	r3, r3, #1
 800b034:	e7ef      	b.n	800b016 <__gethex+0x132>
 800b036:	f100 0a14 	add.w	sl, r0, #20
 800b03a:	2300      	movs	r3, #0
 800b03c:	4655      	mov	r5, sl
 800b03e:	469b      	mov	fp, r3
 800b040:	45b1      	cmp	r9, r6
 800b042:	d337      	bcc.n	800b0b4 <__gethex+0x1d0>
 800b044:	f845 bb04 	str.w	fp, [r5], #4
 800b048:	eba5 050a 	sub.w	r5, r5, sl
 800b04c:	10ad      	asrs	r5, r5, #2
 800b04e:	6125      	str	r5, [r4, #16]
 800b050:	4658      	mov	r0, fp
 800b052:	f7fd fe83 	bl	8008d5c <__hi0bits>
 800b056:	016d      	lsls	r5, r5, #5
 800b058:	f8d8 6000 	ldr.w	r6, [r8]
 800b05c:	1a2d      	subs	r5, r5, r0
 800b05e:	42b5      	cmp	r5, r6
 800b060:	dd54      	ble.n	800b10c <__gethex+0x228>
 800b062:	1bad      	subs	r5, r5, r6
 800b064:	4629      	mov	r1, r5
 800b066:	4620      	mov	r0, r4
 800b068:	f7fe fa17 	bl	800949a <__any_on>
 800b06c:	4681      	mov	r9, r0
 800b06e:	b178      	cbz	r0, 800b090 <__gethex+0x1ac>
 800b070:	1e6b      	subs	r3, r5, #1
 800b072:	1159      	asrs	r1, r3, #5
 800b074:	f003 021f 	and.w	r2, r3, #31
 800b078:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b07c:	f04f 0901 	mov.w	r9, #1
 800b080:	fa09 f202 	lsl.w	r2, r9, r2
 800b084:	420a      	tst	r2, r1
 800b086:	d003      	beq.n	800b090 <__gethex+0x1ac>
 800b088:	454b      	cmp	r3, r9
 800b08a:	dc36      	bgt.n	800b0fa <__gethex+0x216>
 800b08c:	f04f 0902 	mov.w	r9, #2
 800b090:	4629      	mov	r1, r5
 800b092:	4620      	mov	r0, r4
 800b094:	f7ff febe 	bl	800ae14 <rshift>
 800b098:	442f      	add	r7, r5
 800b09a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b09e:	42bb      	cmp	r3, r7
 800b0a0:	da42      	bge.n	800b128 <__gethex+0x244>
 800b0a2:	9801      	ldr	r0, [sp, #4]
 800b0a4:	4621      	mov	r1, r4
 800b0a6:	f7fd fda7 	bl	8008bf8 <_Bfree>
 800b0aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	6013      	str	r3, [r2, #0]
 800b0b0:	25a3      	movs	r5, #163	@ 0xa3
 800b0b2:	e793      	b.n	800afdc <__gethex+0xf8>
 800b0b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b0b8:	2a2e      	cmp	r2, #46	@ 0x2e
 800b0ba:	d012      	beq.n	800b0e2 <__gethex+0x1fe>
 800b0bc:	2b20      	cmp	r3, #32
 800b0be:	d104      	bne.n	800b0ca <__gethex+0x1e6>
 800b0c0:	f845 bb04 	str.w	fp, [r5], #4
 800b0c4:	f04f 0b00 	mov.w	fp, #0
 800b0c8:	465b      	mov	r3, fp
 800b0ca:	7830      	ldrb	r0, [r6, #0]
 800b0cc:	9303      	str	r3, [sp, #12]
 800b0ce:	f7ff fef3 	bl	800aeb8 <__hexdig_fun>
 800b0d2:	9b03      	ldr	r3, [sp, #12]
 800b0d4:	f000 000f 	and.w	r0, r0, #15
 800b0d8:	4098      	lsls	r0, r3
 800b0da:	ea4b 0b00 	orr.w	fp, fp, r0
 800b0de:	3304      	adds	r3, #4
 800b0e0:	e7ae      	b.n	800b040 <__gethex+0x15c>
 800b0e2:	45b1      	cmp	r9, r6
 800b0e4:	d8ea      	bhi.n	800b0bc <__gethex+0x1d8>
 800b0e6:	492b      	ldr	r1, [pc, #172]	@ (800b194 <__gethex+0x2b0>)
 800b0e8:	9303      	str	r3, [sp, #12]
 800b0ea:	2201      	movs	r2, #1
 800b0ec:	4630      	mov	r0, r6
 800b0ee:	f7ff fe24 	bl	800ad3a <strncmp>
 800b0f2:	9b03      	ldr	r3, [sp, #12]
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	d1e1      	bne.n	800b0bc <__gethex+0x1d8>
 800b0f8:	e7a2      	b.n	800b040 <__gethex+0x15c>
 800b0fa:	1ea9      	subs	r1, r5, #2
 800b0fc:	4620      	mov	r0, r4
 800b0fe:	f7fe f9cc 	bl	800949a <__any_on>
 800b102:	2800      	cmp	r0, #0
 800b104:	d0c2      	beq.n	800b08c <__gethex+0x1a8>
 800b106:	f04f 0903 	mov.w	r9, #3
 800b10a:	e7c1      	b.n	800b090 <__gethex+0x1ac>
 800b10c:	da09      	bge.n	800b122 <__gethex+0x23e>
 800b10e:	1b75      	subs	r5, r6, r5
 800b110:	4621      	mov	r1, r4
 800b112:	9801      	ldr	r0, [sp, #4]
 800b114:	462a      	mov	r2, r5
 800b116:	f7fd ff87 	bl	8009028 <__lshift>
 800b11a:	1b7f      	subs	r7, r7, r5
 800b11c:	4604      	mov	r4, r0
 800b11e:	f100 0a14 	add.w	sl, r0, #20
 800b122:	f04f 0900 	mov.w	r9, #0
 800b126:	e7b8      	b.n	800b09a <__gethex+0x1b6>
 800b128:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b12c:	42bd      	cmp	r5, r7
 800b12e:	dd6f      	ble.n	800b210 <__gethex+0x32c>
 800b130:	1bed      	subs	r5, r5, r7
 800b132:	42ae      	cmp	r6, r5
 800b134:	dc34      	bgt.n	800b1a0 <__gethex+0x2bc>
 800b136:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b13a:	2b02      	cmp	r3, #2
 800b13c:	d022      	beq.n	800b184 <__gethex+0x2a0>
 800b13e:	2b03      	cmp	r3, #3
 800b140:	d024      	beq.n	800b18c <__gethex+0x2a8>
 800b142:	2b01      	cmp	r3, #1
 800b144:	d115      	bne.n	800b172 <__gethex+0x28e>
 800b146:	42ae      	cmp	r6, r5
 800b148:	d113      	bne.n	800b172 <__gethex+0x28e>
 800b14a:	2e01      	cmp	r6, #1
 800b14c:	d10b      	bne.n	800b166 <__gethex+0x282>
 800b14e:	9a02      	ldr	r2, [sp, #8]
 800b150:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b154:	6013      	str	r3, [r2, #0]
 800b156:	2301      	movs	r3, #1
 800b158:	6123      	str	r3, [r4, #16]
 800b15a:	f8ca 3000 	str.w	r3, [sl]
 800b15e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b160:	2562      	movs	r5, #98	@ 0x62
 800b162:	601c      	str	r4, [r3, #0]
 800b164:	e73a      	b.n	800afdc <__gethex+0xf8>
 800b166:	1e71      	subs	r1, r6, #1
 800b168:	4620      	mov	r0, r4
 800b16a:	f7fe f996 	bl	800949a <__any_on>
 800b16e:	2800      	cmp	r0, #0
 800b170:	d1ed      	bne.n	800b14e <__gethex+0x26a>
 800b172:	9801      	ldr	r0, [sp, #4]
 800b174:	4621      	mov	r1, r4
 800b176:	f7fd fd3f 	bl	8008bf8 <_Bfree>
 800b17a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b17c:	2300      	movs	r3, #0
 800b17e:	6013      	str	r3, [r2, #0]
 800b180:	2550      	movs	r5, #80	@ 0x50
 800b182:	e72b      	b.n	800afdc <__gethex+0xf8>
 800b184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b186:	2b00      	cmp	r3, #0
 800b188:	d1f3      	bne.n	800b172 <__gethex+0x28e>
 800b18a:	e7e0      	b.n	800b14e <__gethex+0x26a>
 800b18c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d1dd      	bne.n	800b14e <__gethex+0x26a>
 800b192:	e7ee      	b.n	800b172 <__gethex+0x28e>
 800b194:	0800c0a8 	.word	0x0800c0a8
 800b198:	0800bf3f 	.word	0x0800bf3f
 800b19c:	0800c271 	.word	0x0800c271
 800b1a0:	1e6f      	subs	r7, r5, #1
 800b1a2:	f1b9 0f00 	cmp.w	r9, #0
 800b1a6:	d130      	bne.n	800b20a <__gethex+0x326>
 800b1a8:	b127      	cbz	r7, 800b1b4 <__gethex+0x2d0>
 800b1aa:	4639      	mov	r1, r7
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	f7fe f974 	bl	800949a <__any_on>
 800b1b2:	4681      	mov	r9, r0
 800b1b4:	117a      	asrs	r2, r7, #5
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b1bc:	f007 071f 	and.w	r7, r7, #31
 800b1c0:	40bb      	lsls	r3, r7
 800b1c2:	4213      	tst	r3, r2
 800b1c4:	4629      	mov	r1, r5
 800b1c6:	4620      	mov	r0, r4
 800b1c8:	bf18      	it	ne
 800b1ca:	f049 0902 	orrne.w	r9, r9, #2
 800b1ce:	f7ff fe21 	bl	800ae14 <rshift>
 800b1d2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b1d6:	1b76      	subs	r6, r6, r5
 800b1d8:	2502      	movs	r5, #2
 800b1da:	f1b9 0f00 	cmp.w	r9, #0
 800b1de:	d047      	beq.n	800b270 <__gethex+0x38c>
 800b1e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b1e4:	2b02      	cmp	r3, #2
 800b1e6:	d015      	beq.n	800b214 <__gethex+0x330>
 800b1e8:	2b03      	cmp	r3, #3
 800b1ea:	d017      	beq.n	800b21c <__gethex+0x338>
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d109      	bne.n	800b204 <__gethex+0x320>
 800b1f0:	f019 0f02 	tst.w	r9, #2
 800b1f4:	d006      	beq.n	800b204 <__gethex+0x320>
 800b1f6:	f8da 3000 	ldr.w	r3, [sl]
 800b1fa:	ea49 0903 	orr.w	r9, r9, r3
 800b1fe:	f019 0f01 	tst.w	r9, #1
 800b202:	d10e      	bne.n	800b222 <__gethex+0x33e>
 800b204:	f045 0510 	orr.w	r5, r5, #16
 800b208:	e032      	b.n	800b270 <__gethex+0x38c>
 800b20a:	f04f 0901 	mov.w	r9, #1
 800b20e:	e7d1      	b.n	800b1b4 <__gethex+0x2d0>
 800b210:	2501      	movs	r5, #1
 800b212:	e7e2      	b.n	800b1da <__gethex+0x2f6>
 800b214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b216:	f1c3 0301 	rsb	r3, r3, #1
 800b21a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b21c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d0f0      	beq.n	800b204 <__gethex+0x320>
 800b222:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b226:	f104 0314 	add.w	r3, r4, #20
 800b22a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b22e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b232:	f04f 0c00 	mov.w	ip, #0
 800b236:	4618      	mov	r0, r3
 800b238:	f853 2b04 	ldr.w	r2, [r3], #4
 800b23c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b240:	d01b      	beq.n	800b27a <__gethex+0x396>
 800b242:	3201      	adds	r2, #1
 800b244:	6002      	str	r2, [r0, #0]
 800b246:	2d02      	cmp	r5, #2
 800b248:	f104 0314 	add.w	r3, r4, #20
 800b24c:	d13c      	bne.n	800b2c8 <__gethex+0x3e4>
 800b24e:	f8d8 2000 	ldr.w	r2, [r8]
 800b252:	3a01      	subs	r2, #1
 800b254:	42b2      	cmp	r2, r6
 800b256:	d109      	bne.n	800b26c <__gethex+0x388>
 800b258:	1171      	asrs	r1, r6, #5
 800b25a:	2201      	movs	r2, #1
 800b25c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b260:	f006 061f 	and.w	r6, r6, #31
 800b264:	fa02 f606 	lsl.w	r6, r2, r6
 800b268:	421e      	tst	r6, r3
 800b26a:	d13a      	bne.n	800b2e2 <__gethex+0x3fe>
 800b26c:	f045 0520 	orr.w	r5, r5, #32
 800b270:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b272:	601c      	str	r4, [r3, #0]
 800b274:	9b02      	ldr	r3, [sp, #8]
 800b276:	601f      	str	r7, [r3, #0]
 800b278:	e6b0      	b.n	800afdc <__gethex+0xf8>
 800b27a:	4299      	cmp	r1, r3
 800b27c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b280:	d8d9      	bhi.n	800b236 <__gethex+0x352>
 800b282:	68a3      	ldr	r3, [r4, #8]
 800b284:	459b      	cmp	fp, r3
 800b286:	db17      	blt.n	800b2b8 <__gethex+0x3d4>
 800b288:	6861      	ldr	r1, [r4, #4]
 800b28a:	9801      	ldr	r0, [sp, #4]
 800b28c:	3101      	adds	r1, #1
 800b28e:	f7fd fc73 	bl	8008b78 <_Balloc>
 800b292:	4681      	mov	r9, r0
 800b294:	b918      	cbnz	r0, 800b29e <__gethex+0x3ba>
 800b296:	4b1a      	ldr	r3, [pc, #104]	@ (800b300 <__gethex+0x41c>)
 800b298:	4602      	mov	r2, r0
 800b29a:	2184      	movs	r1, #132	@ 0x84
 800b29c:	e6c5      	b.n	800b02a <__gethex+0x146>
 800b29e:	6922      	ldr	r2, [r4, #16]
 800b2a0:	3202      	adds	r2, #2
 800b2a2:	f104 010c 	add.w	r1, r4, #12
 800b2a6:	0092      	lsls	r2, r2, #2
 800b2a8:	300c      	adds	r0, #12
 800b2aa:	f7ff fd69 	bl	800ad80 <memcpy>
 800b2ae:	4621      	mov	r1, r4
 800b2b0:	9801      	ldr	r0, [sp, #4]
 800b2b2:	f7fd fca1 	bl	8008bf8 <_Bfree>
 800b2b6:	464c      	mov	r4, r9
 800b2b8:	6923      	ldr	r3, [r4, #16]
 800b2ba:	1c5a      	adds	r2, r3, #1
 800b2bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b2c0:	6122      	str	r2, [r4, #16]
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	615a      	str	r2, [r3, #20]
 800b2c6:	e7be      	b.n	800b246 <__gethex+0x362>
 800b2c8:	6922      	ldr	r2, [r4, #16]
 800b2ca:	455a      	cmp	r2, fp
 800b2cc:	dd0b      	ble.n	800b2e6 <__gethex+0x402>
 800b2ce:	2101      	movs	r1, #1
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	f7ff fd9f 	bl	800ae14 <rshift>
 800b2d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b2da:	3701      	adds	r7, #1
 800b2dc:	42bb      	cmp	r3, r7
 800b2de:	f6ff aee0 	blt.w	800b0a2 <__gethex+0x1be>
 800b2e2:	2501      	movs	r5, #1
 800b2e4:	e7c2      	b.n	800b26c <__gethex+0x388>
 800b2e6:	f016 061f 	ands.w	r6, r6, #31
 800b2ea:	d0fa      	beq.n	800b2e2 <__gethex+0x3fe>
 800b2ec:	4453      	add	r3, sl
 800b2ee:	f1c6 0620 	rsb	r6, r6, #32
 800b2f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b2f6:	f7fd fd31 	bl	8008d5c <__hi0bits>
 800b2fa:	42b0      	cmp	r0, r6
 800b2fc:	dbe7      	blt.n	800b2ce <__gethex+0x3ea>
 800b2fe:	e7f0      	b.n	800b2e2 <__gethex+0x3fe>
 800b300:	0800bf3f 	.word	0x0800bf3f

0800b304 <L_shift>:
 800b304:	f1c2 0208 	rsb	r2, r2, #8
 800b308:	0092      	lsls	r2, r2, #2
 800b30a:	b570      	push	{r4, r5, r6, lr}
 800b30c:	f1c2 0620 	rsb	r6, r2, #32
 800b310:	6843      	ldr	r3, [r0, #4]
 800b312:	6804      	ldr	r4, [r0, #0]
 800b314:	fa03 f506 	lsl.w	r5, r3, r6
 800b318:	432c      	orrs	r4, r5
 800b31a:	40d3      	lsrs	r3, r2
 800b31c:	6004      	str	r4, [r0, #0]
 800b31e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b322:	4288      	cmp	r0, r1
 800b324:	d3f4      	bcc.n	800b310 <L_shift+0xc>
 800b326:	bd70      	pop	{r4, r5, r6, pc}

0800b328 <__match>:
 800b328:	b530      	push	{r4, r5, lr}
 800b32a:	6803      	ldr	r3, [r0, #0]
 800b32c:	3301      	adds	r3, #1
 800b32e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b332:	b914      	cbnz	r4, 800b33a <__match+0x12>
 800b334:	6003      	str	r3, [r0, #0]
 800b336:	2001      	movs	r0, #1
 800b338:	bd30      	pop	{r4, r5, pc}
 800b33a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b33e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b342:	2d19      	cmp	r5, #25
 800b344:	bf98      	it	ls
 800b346:	3220      	addls	r2, #32
 800b348:	42a2      	cmp	r2, r4
 800b34a:	d0f0      	beq.n	800b32e <__match+0x6>
 800b34c:	2000      	movs	r0, #0
 800b34e:	e7f3      	b.n	800b338 <__match+0x10>

0800b350 <__hexnan>:
 800b350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b354:	680b      	ldr	r3, [r1, #0]
 800b356:	6801      	ldr	r1, [r0, #0]
 800b358:	115e      	asrs	r6, r3, #5
 800b35a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b35e:	f013 031f 	ands.w	r3, r3, #31
 800b362:	b087      	sub	sp, #28
 800b364:	bf18      	it	ne
 800b366:	3604      	addne	r6, #4
 800b368:	2500      	movs	r5, #0
 800b36a:	1f37      	subs	r7, r6, #4
 800b36c:	4682      	mov	sl, r0
 800b36e:	4690      	mov	r8, r2
 800b370:	9301      	str	r3, [sp, #4]
 800b372:	f846 5c04 	str.w	r5, [r6, #-4]
 800b376:	46b9      	mov	r9, r7
 800b378:	463c      	mov	r4, r7
 800b37a:	9502      	str	r5, [sp, #8]
 800b37c:	46ab      	mov	fp, r5
 800b37e:	784a      	ldrb	r2, [r1, #1]
 800b380:	1c4b      	adds	r3, r1, #1
 800b382:	9303      	str	r3, [sp, #12]
 800b384:	b342      	cbz	r2, 800b3d8 <__hexnan+0x88>
 800b386:	4610      	mov	r0, r2
 800b388:	9105      	str	r1, [sp, #20]
 800b38a:	9204      	str	r2, [sp, #16]
 800b38c:	f7ff fd94 	bl	800aeb8 <__hexdig_fun>
 800b390:	2800      	cmp	r0, #0
 800b392:	d151      	bne.n	800b438 <__hexnan+0xe8>
 800b394:	9a04      	ldr	r2, [sp, #16]
 800b396:	9905      	ldr	r1, [sp, #20]
 800b398:	2a20      	cmp	r2, #32
 800b39a:	d818      	bhi.n	800b3ce <__hexnan+0x7e>
 800b39c:	9b02      	ldr	r3, [sp, #8]
 800b39e:	459b      	cmp	fp, r3
 800b3a0:	dd13      	ble.n	800b3ca <__hexnan+0x7a>
 800b3a2:	454c      	cmp	r4, r9
 800b3a4:	d206      	bcs.n	800b3b4 <__hexnan+0x64>
 800b3a6:	2d07      	cmp	r5, #7
 800b3a8:	dc04      	bgt.n	800b3b4 <__hexnan+0x64>
 800b3aa:	462a      	mov	r2, r5
 800b3ac:	4649      	mov	r1, r9
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	f7ff ffa8 	bl	800b304 <L_shift>
 800b3b4:	4544      	cmp	r4, r8
 800b3b6:	d952      	bls.n	800b45e <__hexnan+0x10e>
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	f1a4 0904 	sub.w	r9, r4, #4
 800b3be:	f844 3c04 	str.w	r3, [r4, #-4]
 800b3c2:	f8cd b008 	str.w	fp, [sp, #8]
 800b3c6:	464c      	mov	r4, r9
 800b3c8:	461d      	mov	r5, r3
 800b3ca:	9903      	ldr	r1, [sp, #12]
 800b3cc:	e7d7      	b.n	800b37e <__hexnan+0x2e>
 800b3ce:	2a29      	cmp	r2, #41	@ 0x29
 800b3d0:	d157      	bne.n	800b482 <__hexnan+0x132>
 800b3d2:	3102      	adds	r1, #2
 800b3d4:	f8ca 1000 	str.w	r1, [sl]
 800b3d8:	f1bb 0f00 	cmp.w	fp, #0
 800b3dc:	d051      	beq.n	800b482 <__hexnan+0x132>
 800b3de:	454c      	cmp	r4, r9
 800b3e0:	d206      	bcs.n	800b3f0 <__hexnan+0xa0>
 800b3e2:	2d07      	cmp	r5, #7
 800b3e4:	dc04      	bgt.n	800b3f0 <__hexnan+0xa0>
 800b3e6:	462a      	mov	r2, r5
 800b3e8:	4649      	mov	r1, r9
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	f7ff ff8a 	bl	800b304 <L_shift>
 800b3f0:	4544      	cmp	r4, r8
 800b3f2:	d936      	bls.n	800b462 <__hexnan+0x112>
 800b3f4:	f1a8 0204 	sub.w	r2, r8, #4
 800b3f8:	4623      	mov	r3, r4
 800b3fa:	f853 1b04 	ldr.w	r1, [r3], #4
 800b3fe:	f842 1f04 	str.w	r1, [r2, #4]!
 800b402:	429f      	cmp	r7, r3
 800b404:	d2f9      	bcs.n	800b3fa <__hexnan+0xaa>
 800b406:	1b3b      	subs	r3, r7, r4
 800b408:	f023 0303 	bic.w	r3, r3, #3
 800b40c:	3304      	adds	r3, #4
 800b40e:	3401      	adds	r4, #1
 800b410:	3e03      	subs	r6, #3
 800b412:	42b4      	cmp	r4, r6
 800b414:	bf88      	it	hi
 800b416:	2304      	movhi	r3, #4
 800b418:	4443      	add	r3, r8
 800b41a:	2200      	movs	r2, #0
 800b41c:	f843 2b04 	str.w	r2, [r3], #4
 800b420:	429f      	cmp	r7, r3
 800b422:	d2fb      	bcs.n	800b41c <__hexnan+0xcc>
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	b91b      	cbnz	r3, 800b430 <__hexnan+0xe0>
 800b428:	4547      	cmp	r7, r8
 800b42a:	d128      	bne.n	800b47e <__hexnan+0x12e>
 800b42c:	2301      	movs	r3, #1
 800b42e:	603b      	str	r3, [r7, #0]
 800b430:	2005      	movs	r0, #5
 800b432:	b007      	add	sp, #28
 800b434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b438:	3501      	adds	r5, #1
 800b43a:	2d08      	cmp	r5, #8
 800b43c:	f10b 0b01 	add.w	fp, fp, #1
 800b440:	dd06      	ble.n	800b450 <__hexnan+0x100>
 800b442:	4544      	cmp	r4, r8
 800b444:	d9c1      	bls.n	800b3ca <__hexnan+0x7a>
 800b446:	2300      	movs	r3, #0
 800b448:	f844 3c04 	str.w	r3, [r4, #-4]
 800b44c:	2501      	movs	r5, #1
 800b44e:	3c04      	subs	r4, #4
 800b450:	6822      	ldr	r2, [r4, #0]
 800b452:	f000 000f 	and.w	r0, r0, #15
 800b456:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b45a:	6020      	str	r0, [r4, #0]
 800b45c:	e7b5      	b.n	800b3ca <__hexnan+0x7a>
 800b45e:	2508      	movs	r5, #8
 800b460:	e7b3      	b.n	800b3ca <__hexnan+0x7a>
 800b462:	9b01      	ldr	r3, [sp, #4]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d0dd      	beq.n	800b424 <__hexnan+0xd4>
 800b468:	f1c3 0320 	rsb	r3, r3, #32
 800b46c:	f04f 32ff 	mov.w	r2, #4294967295
 800b470:	40da      	lsrs	r2, r3
 800b472:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b476:	4013      	ands	r3, r2
 800b478:	f846 3c04 	str.w	r3, [r6, #-4]
 800b47c:	e7d2      	b.n	800b424 <__hexnan+0xd4>
 800b47e:	3f04      	subs	r7, #4
 800b480:	e7d0      	b.n	800b424 <__hexnan+0xd4>
 800b482:	2004      	movs	r0, #4
 800b484:	e7d5      	b.n	800b432 <__hexnan+0xe2>

0800b486 <__ascii_mbtowc>:
 800b486:	b082      	sub	sp, #8
 800b488:	b901      	cbnz	r1, 800b48c <__ascii_mbtowc+0x6>
 800b48a:	a901      	add	r1, sp, #4
 800b48c:	b142      	cbz	r2, 800b4a0 <__ascii_mbtowc+0x1a>
 800b48e:	b14b      	cbz	r3, 800b4a4 <__ascii_mbtowc+0x1e>
 800b490:	7813      	ldrb	r3, [r2, #0]
 800b492:	600b      	str	r3, [r1, #0]
 800b494:	7812      	ldrb	r2, [r2, #0]
 800b496:	1e10      	subs	r0, r2, #0
 800b498:	bf18      	it	ne
 800b49a:	2001      	movne	r0, #1
 800b49c:	b002      	add	sp, #8
 800b49e:	4770      	bx	lr
 800b4a0:	4610      	mov	r0, r2
 800b4a2:	e7fb      	b.n	800b49c <__ascii_mbtowc+0x16>
 800b4a4:	f06f 0001 	mvn.w	r0, #1
 800b4a8:	e7f8      	b.n	800b49c <__ascii_mbtowc+0x16>

0800b4aa <_realloc_r>:
 800b4aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ae:	4680      	mov	r8, r0
 800b4b0:	4615      	mov	r5, r2
 800b4b2:	460c      	mov	r4, r1
 800b4b4:	b921      	cbnz	r1, 800b4c0 <_realloc_r+0x16>
 800b4b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ba:	4611      	mov	r1, r2
 800b4bc:	f7fd bad0 	b.w	8008a60 <_malloc_r>
 800b4c0:	b92a      	cbnz	r2, 800b4ce <_realloc_r+0x24>
 800b4c2:	f7fd fa59 	bl	8008978 <_free_r>
 800b4c6:	2400      	movs	r4, #0
 800b4c8:	4620      	mov	r0, r4
 800b4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4ce:	f000 f8b2 	bl	800b636 <_malloc_usable_size_r>
 800b4d2:	4285      	cmp	r5, r0
 800b4d4:	4606      	mov	r6, r0
 800b4d6:	d802      	bhi.n	800b4de <_realloc_r+0x34>
 800b4d8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b4dc:	d8f4      	bhi.n	800b4c8 <_realloc_r+0x1e>
 800b4de:	4629      	mov	r1, r5
 800b4e0:	4640      	mov	r0, r8
 800b4e2:	f7fd fabd 	bl	8008a60 <_malloc_r>
 800b4e6:	4607      	mov	r7, r0
 800b4e8:	2800      	cmp	r0, #0
 800b4ea:	d0ec      	beq.n	800b4c6 <_realloc_r+0x1c>
 800b4ec:	42b5      	cmp	r5, r6
 800b4ee:	462a      	mov	r2, r5
 800b4f0:	4621      	mov	r1, r4
 800b4f2:	bf28      	it	cs
 800b4f4:	4632      	movcs	r2, r6
 800b4f6:	f7ff fc43 	bl	800ad80 <memcpy>
 800b4fa:	4621      	mov	r1, r4
 800b4fc:	4640      	mov	r0, r8
 800b4fe:	f7fd fa3b 	bl	8008978 <_free_r>
 800b502:	463c      	mov	r4, r7
 800b504:	e7e0      	b.n	800b4c8 <_realloc_r+0x1e>
	...

0800b508 <_strtoul_l.constprop.0>:
 800b508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b50c:	4e34      	ldr	r6, [pc, #208]	@ (800b5e0 <_strtoul_l.constprop.0+0xd8>)
 800b50e:	4686      	mov	lr, r0
 800b510:	460d      	mov	r5, r1
 800b512:	4628      	mov	r0, r5
 800b514:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b518:	5d37      	ldrb	r7, [r6, r4]
 800b51a:	f017 0708 	ands.w	r7, r7, #8
 800b51e:	d1f8      	bne.n	800b512 <_strtoul_l.constprop.0+0xa>
 800b520:	2c2d      	cmp	r4, #45	@ 0x2d
 800b522:	d12f      	bne.n	800b584 <_strtoul_l.constprop.0+0x7c>
 800b524:	782c      	ldrb	r4, [r5, #0]
 800b526:	2701      	movs	r7, #1
 800b528:	1c85      	adds	r5, r0, #2
 800b52a:	f033 0010 	bics.w	r0, r3, #16
 800b52e:	d109      	bne.n	800b544 <_strtoul_l.constprop.0+0x3c>
 800b530:	2c30      	cmp	r4, #48	@ 0x30
 800b532:	d12c      	bne.n	800b58e <_strtoul_l.constprop.0+0x86>
 800b534:	7828      	ldrb	r0, [r5, #0]
 800b536:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800b53a:	2858      	cmp	r0, #88	@ 0x58
 800b53c:	d127      	bne.n	800b58e <_strtoul_l.constprop.0+0x86>
 800b53e:	786c      	ldrb	r4, [r5, #1]
 800b540:	2310      	movs	r3, #16
 800b542:	3502      	adds	r5, #2
 800b544:	f04f 38ff 	mov.w	r8, #4294967295
 800b548:	2600      	movs	r6, #0
 800b54a:	fbb8 f8f3 	udiv	r8, r8, r3
 800b54e:	fb03 f908 	mul.w	r9, r3, r8
 800b552:	ea6f 0909 	mvn.w	r9, r9
 800b556:	4630      	mov	r0, r6
 800b558:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800b55c:	f1bc 0f09 	cmp.w	ip, #9
 800b560:	d81c      	bhi.n	800b59c <_strtoul_l.constprop.0+0x94>
 800b562:	4664      	mov	r4, ip
 800b564:	42a3      	cmp	r3, r4
 800b566:	dd2a      	ble.n	800b5be <_strtoul_l.constprop.0+0xb6>
 800b568:	f1b6 3fff 	cmp.w	r6, #4294967295
 800b56c:	d007      	beq.n	800b57e <_strtoul_l.constprop.0+0x76>
 800b56e:	4580      	cmp	r8, r0
 800b570:	d322      	bcc.n	800b5b8 <_strtoul_l.constprop.0+0xb0>
 800b572:	d101      	bne.n	800b578 <_strtoul_l.constprop.0+0x70>
 800b574:	45a1      	cmp	r9, r4
 800b576:	db1f      	blt.n	800b5b8 <_strtoul_l.constprop.0+0xb0>
 800b578:	fb00 4003 	mla	r0, r0, r3, r4
 800b57c:	2601      	movs	r6, #1
 800b57e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b582:	e7e9      	b.n	800b558 <_strtoul_l.constprop.0+0x50>
 800b584:	2c2b      	cmp	r4, #43	@ 0x2b
 800b586:	bf04      	itt	eq
 800b588:	782c      	ldrbeq	r4, [r5, #0]
 800b58a:	1c85      	addeq	r5, r0, #2
 800b58c:	e7cd      	b.n	800b52a <_strtoul_l.constprop.0+0x22>
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d1d8      	bne.n	800b544 <_strtoul_l.constprop.0+0x3c>
 800b592:	2c30      	cmp	r4, #48	@ 0x30
 800b594:	bf0c      	ite	eq
 800b596:	2308      	moveq	r3, #8
 800b598:	230a      	movne	r3, #10
 800b59a:	e7d3      	b.n	800b544 <_strtoul_l.constprop.0+0x3c>
 800b59c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800b5a0:	f1bc 0f19 	cmp.w	ip, #25
 800b5a4:	d801      	bhi.n	800b5aa <_strtoul_l.constprop.0+0xa2>
 800b5a6:	3c37      	subs	r4, #55	@ 0x37
 800b5a8:	e7dc      	b.n	800b564 <_strtoul_l.constprop.0+0x5c>
 800b5aa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800b5ae:	f1bc 0f19 	cmp.w	ip, #25
 800b5b2:	d804      	bhi.n	800b5be <_strtoul_l.constprop.0+0xb6>
 800b5b4:	3c57      	subs	r4, #87	@ 0x57
 800b5b6:	e7d5      	b.n	800b564 <_strtoul_l.constprop.0+0x5c>
 800b5b8:	f04f 36ff 	mov.w	r6, #4294967295
 800b5bc:	e7df      	b.n	800b57e <_strtoul_l.constprop.0+0x76>
 800b5be:	1c73      	adds	r3, r6, #1
 800b5c0:	d106      	bne.n	800b5d0 <_strtoul_l.constprop.0+0xc8>
 800b5c2:	2322      	movs	r3, #34	@ 0x22
 800b5c4:	f8ce 3000 	str.w	r3, [lr]
 800b5c8:	4630      	mov	r0, r6
 800b5ca:	b932      	cbnz	r2, 800b5da <_strtoul_l.constprop.0+0xd2>
 800b5cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5d0:	b107      	cbz	r7, 800b5d4 <_strtoul_l.constprop.0+0xcc>
 800b5d2:	4240      	negs	r0, r0
 800b5d4:	2a00      	cmp	r2, #0
 800b5d6:	d0f9      	beq.n	800b5cc <_strtoul_l.constprop.0+0xc4>
 800b5d8:	b106      	cbz	r6, 800b5dc <_strtoul_l.constprop.0+0xd4>
 800b5da:	1e69      	subs	r1, r5, #1
 800b5dc:	6011      	str	r1, [r2, #0]
 800b5de:	e7f5      	b.n	800b5cc <_strtoul_l.constprop.0+0xc4>
 800b5e0:	0800c101 	.word	0x0800c101

0800b5e4 <_strtoul_r>:
 800b5e4:	f7ff bf90 	b.w	800b508 <_strtoul_l.constprop.0>

0800b5e8 <__ascii_wctomb>:
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	4608      	mov	r0, r1
 800b5ec:	b141      	cbz	r1, 800b600 <__ascii_wctomb+0x18>
 800b5ee:	2aff      	cmp	r2, #255	@ 0xff
 800b5f0:	d904      	bls.n	800b5fc <__ascii_wctomb+0x14>
 800b5f2:	228a      	movs	r2, #138	@ 0x8a
 800b5f4:	601a      	str	r2, [r3, #0]
 800b5f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b5fa:	4770      	bx	lr
 800b5fc:	700a      	strb	r2, [r1, #0]
 800b5fe:	2001      	movs	r0, #1
 800b600:	4770      	bx	lr
	...

0800b604 <fiprintf>:
 800b604:	b40e      	push	{r1, r2, r3}
 800b606:	b503      	push	{r0, r1, lr}
 800b608:	4601      	mov	r1, r0
 800b60a:	ab03      	add	r3, sp, #12
 800b60c:	4805      	ldr	r0, [pc, #20]	@ (800b624 <fiprintf+0x20>)
 800b60e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b612:	6800      	ldr	r0, [r0, #0]
 800b614:	9301      	str	r3, [sp, #4]
 800b616:	f000 f83f 	bl	800b698 <_vfiprintf_r>
 800b61a:	b002      	add	sp, #8
 800b61c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b620:	b003      	add	sp, #12
 800b622:	4770      	bx	lr
 800b624:	2000009c 	.word	0x2000009c

0800b628 <abort>:
 800b628:	b508      	push	{r3, lr}
 800b62a:	2006      	movs	r0, #6
 800b62c:	f000 fa08 	bl	800ba40 <raise>
 800b630:	2001      	movs	r0, #1
 800b632:	f7f7 f801 	bl	8002638 <_exit>

0800b636 <_malloc_usable_size_r>:
 800b636:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b63a:	1f18      	subs	r0, r3, #4
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	bfbc      	itt	lt
 800b640:	580b      	ldrlt	r3, [r1, r0]
 800b642:	18c0      	addlt	r0, r0, r3
 800b644:	4770      	bx	lr

0800b646 <__sfputc_r>:
 800b646:	6893      	ldr	r3, [r2, #8]
 800b648:	3b01      	subs	r3, #1
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	b410      	push	{r4}
 800b64e:	6093      	str	r3, [r2, #8]
 800b650:	da08      	bge.n	800b664 <__sfputc_r+0x1e>
 800b652:	6994      	ldr	r4, [r2, #24]
 800b654:	42a3      	cmp	r3, r4
 800b656:	db01      	blt.n	800b65c <__sfputc_r+0x16>
 800b658:	290a      	cmp	r1, #10
 800b65a:	d103      	bne.n	800b664 <__sfputc_r+0x1e>
 800b65c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b660:	f000 b932 	b.w	800b8c8 <__swbuf_r>
 800b664:	6813      	ldr	r3, [r2, #0]
 800b666:	1c58      	adds	r0, r3, #1
 800b668:	6010      	str	r0, [r2, #0]
 800b66a:	7019      	strb	r1, [r3, #0]
 800b66c:	4608      	mov	r0, r1
 800b66e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b672:	4770      	bx	lr

0800b674 <__sfputs_r>:
 800b674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b676:	4606      	mov	r6, r0
 800b678:	460f      	mov	r7, r1
 800b67a:	4614      	mov	r4, r2
 800b67c:	18d5      	adds	r5, r2, r3
 800b67e:	42ac      	cmp	r4, r5
 800b680:	d101      	bne.n	800b686 <__sfputs_r+0x12>
 800b682:	2000      	movs	r0, #0
 800b684:	e007      	b.n	800b696 <__sfputs_r+0x22>
 800b686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b68a:	463a      	mov	r2, r7
 800b68c:	4630      	mov	r0, r6
 800b68e:	f7ff ffda 	bl	800b646 <__sfputc_r>
 800b692:	1c43      	adds	r3, r0, #1
 800b694:	d1f3      	bne.n	800b67e <__sfputs_r+0xa>
 800b696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b698 <_vfiprintf_r>:
 800b698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b69c:	460d      	mov	r5, r1
 800b69e:	b09d      	sub	sp, #116	@ 0x74
 800b6a0:	4614      	mov	r4, r2
 800b6a2:	4698      	mov	r8, r3
 800b6a4:	4606      	mov	r6, r0
 800b6a6:	b118      	cbz	r0, 800b6b0 <_vfiprintf_r+0x18>
 800b6a8:	6a03      	ldr	r3, [r0, #32]
 800b6aa:	b90b      	cbnz	r3, 800b6b0 <_vfiprintf_r+0x18>
 800b6ac:	f7fc f9ca 	bl	8007a44 <__sinit>
 800b6b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b6b2:	07d9      	lsls	r1, r3, #31
 800b6b4:	d405      	bmi.n	800b6c2 <_vfiprintf_r+0x2a>
 800b6b6:	89ab      	ldrh	r3, [r5, #12]
 800b6b8:	059a      	lsls	r2, r3, #22
 800b6ba:	d402      	bmi.n	800b6c2 <_vfiprintf_r+0x2a>
 800b6bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b6be:	f7fc fb04 	bl	8007cca <__retarget_lock_acquire_recursive>
 800b6c2:	89ab      	ldrh	r3, [r5, #12]
 800b6c4:	071b      	lsls	r3, r3, #28
 800b6c6:	d501      	bpl.n	800b6cc <_vfiprintf_r+0x34>
 800b6c8:	692b      	ldr	r3, [r5, #16]
 800b6ca:	b99b      	cbnz	r3, 800b6f4 <_vfiprintf_r+0x5c>
 800b6cc:	4629      	mov	r1, r5
 800b6ce:	4630      	mov	r0, r6
 800b6d0:	f000 f938 	bl	800b944 <__swsetup_r>
 800b6d4:	b170      	cbz	r0, 800b6f4 <_vfiprintf_r+0x5c>
 800b6d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b6d8:	07dc      	lsls	r4, r3, #31
 800b6da:	d504      	bpl.n	800b6e6 <_vfiprintf_r+0x4e>
 800b6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b6e0:	b01d      	add	sp, #116	@ 0x74
 800b6e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6e6:	89ab      	ldrh	r3, [r5, #12]
 800b6e8:	0598      	lsls	r0, r3, #22
 800b6ea:	d4f7      	bmi.n	800b6dc <_vfiprintf_r+0x44>
 800b6ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b6ee:	f7fc faed 	bl	8007ccc <__retarget_lock_release_recursive>
 800b6f2:	e7f3      	b.n	800b6dc <_vfiprintf_r+0x44>
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6f8:	2320      	movs	r3, #32
 800b6fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b6fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800b702:	2330      	movs	r3, #48	@ 0x30
 800b704:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b8b4 <_vfiprintf_r+0x21c>
 800b708:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b70c:	f04f 0901 	mov.w	r9, #1
 800b710:	4623      	mov	r3, r4
 800b712:	469a      	mov	sl, r3
 800b714:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b718:	b10a      	cbz	r2, 800b71e <_vfiprintf_r+0x86>
 800b71a:	2a25      	cmp	r2, #37	@ 0x25
 800b71c:	d1f9      	bne.n	800b712 <_vfiprintf_r+0x7a>
 800b71e:	ebba 0b04 	subs.w	fp, sl, r4
 800b722:	d00b      	beq.n	800b73c <_vfiprintf_r+0xa4>
 800b724:	465b      	mov	r3, fp
 800b726:	4622      	mov	r2, r4
 800b728:	4629      	mov	r1, r5
 800b72a:	4630      	mov	r0, r6
 800b72c:	f7ff ffa2 	bl	800b674 <__sfputs_r>
 800b730:	3001      	adds	r0, #1
 800b732:	f000 80a7 	beq.w	800b884 <_vfiprintf_r+0x1ec>
 800b736:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b738:	445a      	add	r2, fp
 800b73a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b73c:	f89a 3000 	ldrb.w	r3, [sl]
 800b740:	2b00      	cmp	r3, #0
 800b742:	f000 809f 	beq.w	800b884 <_vfiprintf_r+0x1ec>
 800b746:	2300      	movs	r3, #0
 800b748:	f04f 32ff 	mov.w	r2, #4294967295
 800b74c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b750:	f10a 0a01 	add.w	sl, sl, #1
 800b754:	9304      	str	r3, [sp, #16]
 800b756:	9307      	str	r3, [sp, #28]
 800b758:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b75c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b75e:	4654      	mov	r4, sl
 800b760:	2205      	movs	r2, #5
 800b762:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b766:	4853      	ldr	r0, [pc, #332]	@ (800b8b4 <_vfiprintf_r+0x21c>)
 800b768:	f7f4 fd3a 	bl	80001e0 <memchr>
 800b76c:	9a04      	ldr	r2, [sp, #16]
 800b76e:	b9d8      	cbnz	r0, 800b7a8 <_vfiprintf_r+0x110>
 800b770:	06d1      	lsls	r1, r2, #27
 800b772:	bf44      	itt	mi
 800b774:	2320      	movmi	r3, #32
 800b776:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b77a:	0713      	lsls	r3, r2, #28
 800b77c:	bf44      	itt	mi
 800b77e:	232b      	movmi	r3, #43	@ 0x2b
 800b780:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b784:	f89a 3000 	ldrb.w	r3, [sl]
 800b788:	2b2a      	cmp	r3, #42	@ 0x2a
 800b78a:	d015      	beq.n	800b7b8 <_vfiprintf_r+0x120>
 800b78c:	9a07      	ldr	r2, [sp, #28]
 800b78e:	4654      	mov	r4, sl
 800b790:	2000      	movs	r0, #0
 800b792:	f04f 0c0a 	mov.w	ip, #10
 800b796:	4621      	mov	r1, r4
 800b798:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b79c:	3b30      	subs	r3, #48	@ 0x30
 800b79e:	2b09      	cmp	r3, #9
 800b7a0:	d94b      	bls.n	800b83a <_vfiprintf_r+0x1a2>
 800b7a2:	b1b0      	cbz	r0, 800b7d2 <_vfiprintf_r+0x13a>
 800b7a4:	9207      	str	r2, [sp, #28]
 800b7a6:	e014      	b.n	800b7d2 <_vfiprintf_r+0x13a>
 800b7a8:	eba0 0308 	sub.w	r3, r0, r8
 800b7ac:	fa09 f303 	lsl.w	r3, r9, r3
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	9304      	str	r3, [sp, #16]
 800b7b4:	46a2      	mov	sl, r4
 800b7b6:	e7d2      	b.n	800b75e <_vfiprintf_r+0xc6>
 800b7b8:	9b03      	ldr	r3, [sp, #12]
 800b7ba:	1d19      	adds	r1, r3, #4
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	9103      	str	r1, [sp, #12]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	bfbb      	ittet	lt
 800b7c4:	425b      	neglt	r3, r3
 800b7c6:	f042 0202 	orrlt.w	r2, r2, #2
 800b7ca:	9307      	strge	r3, [sp, #28]
 800b7cc:	9307      	strlt	r3, [sp, #28]
 800b7ce:	bfb8      	it	lt
 800b7d0:	9204      	strlt	r2, [sp, #16]
 800b7d2:	7823      	ldrb	r3, [r4, #0]
 800b7d4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b7d6:	d10a      	bne.n	800b7ee <_vfiprintf_r+0x156>
 800b7d8:	7863      	ldrb	r3, [r4, #1]
 800b7da:	2b2a      	cmp	r3, #42	@ 0x2a
 800b7dc:	d132      	bne.n	800b844 <_vfiprintf_r+0x1ac>
 800b7de:	9b03      	ldr	r3, [sp, #12]
 800b7e0:	1d1a      	adds	r2, r3, #4
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	9203      	str	r2, [sp, #12]
 800b7e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b7ea:	3402      	adds	r4, #2
 800b7ec:	9305      	str	r3, [sp, #20]
 800b7ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b8c4 <_vfiprintf_r+0x22c>
 800b7f2:	7821      	ldrb	r1, [r4, #0]
 800b7f4:	2203      	movs	r2, #3
 800b7f6:	4650      	mov	r0, sl
 800b7f8:	f7f4 fcf2 	bl	80001e0 <memchr>
 800b7fc:	b138      	cbz	r0, 800b80e <_vfiprintf_r+0x176>
 800b7fe:	9b04      	ldr	r3, [sp, #16]
 800b800:	eba0 000a 	sub.w	r0, r0, sl
 800b804:	2240      	movs	r2, #64	@ 0x40
 800b806:	4082      	lsls	r2, r0
 800b808:	4313      	orrs	r3, r2
 800b80a:	3401      	adds	r4, #1
 800b80c:	9304      	str	r3, [sp, #16]
 800b80e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b812:	4829      	ldr	r0, [pc, #164]	@ (800b8b8 <_vfiprintf_r+0x220>)
 800b814:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b818:	2206      	movs	r2, #6
 800b81a:	f7f4 fce1 	bl	80001e0 <memchr>
 800b81e:	2800      	cmp	r0, #0
 800b820:	d03f      	beq.n	800b8a2 <_vfiprintf_r+0x20a>
 800b822:	4b26      	ldr	r3, [pc, #152]	@ (800b8bc <_vfiprintf_r+0x224>)
 800b824:	bb1b      	cbnz	r3, 800b86e <_vfiprintf_r+0x1d6>
 800b826:	9b03      	ldr	r3, [sp, #12]
 800b828:	3307      	adds	r3, #7
 800b82a:	f023 0307 	bic.w	r3, r3, #7
 800b82e:	3308      	adds	r3, #8
 800b830:	9303      	str	r3, [sp, #12]
 800b832:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b834:	443b      	add	r3, r7
 800b836:	9309      	str	r3, [sp, #36]	@ 0x24
 800b838:	e76a      	b.n	800b710 <_vfiprintf_r+0x78>
 800b83a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b83e:	460c      	mov	r4, r1
 800b840:	2001      	movs	r0, #1
 800b842:	e7a8      	b.n	800b796 <_vfiprintf_r+0xfe>
 800b844:	2300      	movs	r3, #0
 800b846:	3401      	adds	r4, #1
 800b848:	9305      	str	r3, [sp, #20]
 800b84a:	4619      	mov	r1, r3
 800b84c:	f04f 0c0a 	mov.w	ip, #10
 800b850:	4620      	mov	r0, r4
 800b852:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b856:	3a30      	subs	r2, #48	@ 0x30
 800b858:	2a09      	cmp	r2, #9
 800b85a:	d903      	bls.n	800b864 <_vfiprintf_r+0x1cc>
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d0c6      	beq.n	800b7ee <_vfiprintf_r+0x156>
 800b860:	9105      	str	r1, [sp, #20]
 800b862:	e7c4      	b.n	800b7ee <_vfiprintf_r+0x156>
 800b864:	fb0c 2101 	mla	r1, ip, r1, r2
 800b868:	4604      	mov	r4, r0
 800b86a:	2301      	movs	r3, #1
 800b86c:	e7f0      	b.n	800b850 <_vfiprintf_r+0x1b8>
 800b86e:	ab03      	add	r3, sp, #12
 800b870:	9300      	str	r3, [sp, #0]
 800b872:	462a      	mov	r2, r5
 800b874:	4b12      	ldr	r3, [pc, #72]	@ (800b8c0 <_vfiprintf_r+0x228>)
 800b876:	a904      	add	r1, sp, #16
 800b878:	4630      	mov	r0, r6
 800b87a:	f7fb fa8b 	bl	8006d94 <_printf_float>
 800b87e:	4607      	mov	r7, r0
 800b880:	1c78      	adds	r0, r7, #1
 800b882:	d1d6      	bne.n	800b832 <_vfiprintf_r+0x19a>
 800b884:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b886:	07d9      	lsls	r1, r3, #31
 800b888:	d405      	bmi.n	800b896 <_vfiprintf_r+0x1fe>
 800b88a:	89ab      	ldrh	r3, [r5, #12]
 800b88c:	059a      	lsls	r2, r3, #22
 800b88e:	d402      	bmi.n	800b896 <_vfiprintf_r+0x1fe>
 800b890:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b892:	f7fc fa1b 	bl	8007ccc <__retarget_lock_release_recursive>
 800b896:	89ab      	ldrh	r3, [r5, #12]
 800b898:	065b      	lsls	r3, r3, #25
 800b89a:	f53f af1f 	bmi.w	800b6dc <_vfiprintf_r+0x44>
 800b89e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b8a0:	e71e      	b.n	800b6e0 <_vfiprintf_r+0x48>
 800b8a2:	ab03      	add	r3, sp, #12
 800b8a4:	9300      	str	r3, [sp, #0]
 800b8a6:	462a      	mov	r2, r5
 800b8a8:	4b05      	ldr	r3, [pc, #20]	@ (800b8c0 <_vfiprintf_r+0x228>)
 800b8aa:	a904      	add	r1, sp, #16
 800b8ac:	4630      	mov	r0, r6
 800b8ae:	f7fb fd09 	bl	80072c4 <_printf_i>
 800b8b2:	e7e4      	b.n	800b87e <_vfiprintf_r+0x1e6>
 800b8b4:	0800c201 	.word	0x0800c201
 800b8b8:	0800c20b 	.word	0x0800c20b
 800b8bc:	08006d95 	.word	0x08006d95
 800b8c0:	0800b675 	.word	0x0800b675
 800b8c4:	0800c207 	.word	0x0800c207

0800b8c8 <__swbuf_r>:
 800b8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ca:	460e      	mov	r6, r1
 800b8cc:	4614      	mov	r4, r2
 800b8ce:	4605      	mov	r5, r0
 800b8d0:	b118      	cbz	r0, 800b8da <__swbuf_r+0x12>
 800b8d2:	6a03      	ldr	r3, [r0, #32]
 800b8d4:	b90b      	cbnz	r3, 800b8da <__swbuf_r+0x12>
 800b8d6:	f7fc f8b5 	bl	8007a44 <__sinit>
 800b8da:	69a3      	ldr	r3, [r4, #24]
 800b8dc:	60a3      	str	r3, [r4, #8]
 800b8de:	89a3      	ldrh	r3, [r4, #12]
 800b8e0:	071a      	lsls	r2, r3, #28
 800b8e2:	d501      	bpl.n	800b8e8 <__swbuf_r+0x20>
 800b8e4:	6923      	ldr	r3, [r4, #16]
 800b8e6:	b943      	cbnz	r3, 800b8fa <__swbuf_r+0x32>
 800b8e8:	4621      	mov	r1, r4
 800b8ea:	4628      	mov	r0, r5
 800b8ec:	f000 f82a 	bl	800b944 <__swsetup_r>
 800b8f0:	b118      	cbz	r0, 800b8fa <__swbuf_r+0x32>
 800b8f2:	f04f 37ff 	mov.w	r7, #4294967295
 800b8f6:	4638      	mov	r0, r7
 800b8f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8fa:	6823      	ldr	r3, [r4, #0]
 800b8fc:	6922      	ldr	r2, [r4, #16]
 800b8fe:	1a98      	subs	r0, r3, r2
 800b900:	6963      	ldr	r3, [r4, #20]
 800b902:	b2f6      	uxtb	r6, r6
 800b904:	4283      	cmp	r3, r0
 800b906:	4637      	mov	r7, r6
 800b908:	dc05      	bgt.n	800b916 <__swbuf_r+0x4e>
 800b90a:	4621      	mov	r1, r4
 800b90c:	4628      	mov	r0, r5
 800b90e:	f7ff f95f 	bl	800abd0 <_fflush_r>
 800b912:	2800      	cmp	r0, #0
 800b914:	d1ed      	bne.n	800b8f2 <__swbuf_r+0x2a>
 800b916:	68a3      	ldr	r3, [r4, #8]
 800b918:	3b01      	subs	r3, #1
 800b91a:	60a3      	str	r3, [r4, #8]
 800b91c:	6823      	ldr	r3, [r4, #0]
 800b91e:	1c5a      	adds	r2, r3, #1
 800b920:	6022      	str	r2, [r4, #0]
 800b922:	701e      	strb	r6, [r3, #0]
 800b924:	6962      	ldr	r2, [r4, #20]
 800b926:	1c43      	adds	r3, r0, #1
 800b928:	429a      	cmp	r2, r3
 800b92a:	d004      	beq.n	800b936 <__swbuf_r+0x6e>
 800b92c:	89a3      	ldrh	r3, [r4, #12]
 800b92e:	07db      	lsls	r3, r3, #31
 800b930:	d5e1      	bpl.n	800b8f6 <__swbuf_r+0x2e>
 800b932:	2e0a      	cmp	r6, #10
 800b934:	d1df      	bne.n	800b8f6 <__swbuf_r+0x2e>
 800b936:	4621      	mov	r1, r4
 800b938:	4628      	mov	r0, r5
 800b93a:	f7ff f949 	bl	800abd0 <_fflush_r>
 800b93e:	2800      	cmp	r0, #0
 800b940:	d0d9      	beq.n	800b8f6 <__swbuf_r+0x2e>
 800b942:	e7d6      	b.n	800b8f2 <__swbuf_r+0x2a>

0800b944 <__swsetup_r>:
 800b944:	b538      	push	{r3, r4, r5, lr}
 800b946:	4b29      	ldr	r3, [pc, #164]	@ (800b9ec <__swsetup_r+0xa8>)
 800b948:	4605      	mov	r5, r0
 800b94a:	6818      	ldr	r0, [r3, #0]
 800b94c:	460c      	mov	r4, r1
 800b94e:	b118      	cbz	r0, 800b958 <__swsetup_r+0x14>
 800b950:	6a03      	ldr	r3, [r0, #32]
 800b952:	b90b      	cbnz	r3, 800b958 <__swsetup_r+0x14>
 800b954:	f7fc f876 	bl	8007a44 <__sinit>
 800b958:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b95c:	0719      	lsls	r1, r3, #28
 800b95e:	d422      	bmi.n	800b9a6 <__swsetup_r+0x62>
 800b960:	06da      	lsls	r2, r3, #27
 800b962:	d407      	bmi.n	800b974 <__swsetup_r+0x30>
 800b964:	2209      	movs	r2, #9
 800b966:	602a      	str	r2, [r5, #0]
 800b968:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b96c:	81a3      	strh	r3, [r4, #12]
 800b96e:	f04f 30ff 	mov.w	r0, #4294967295
 800b972:	e033      	b.n	800b9dc <__swsetup_r+0x98>
 800b974:	0758      	lsls	r0, r3, #29
 800b976:	d512      	bpl.n	800b99e <__swsetup_r+0x5a>
 800b978:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b97a:	b141      	cbz	r1, 800b98e <__swsetup_r+0x4a>
 800b97c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b980:	4299      	cmp	r1, r3
 800b982:	d002      	beq.n	800b98a <__swsetup_r+0x46>
 800b984:	4628      	mov	r0, r5
 800b986:	f7fc fff7 	bl	8008978 <_free_r>
 800b98a:	2300      	movs	r3, #0
 800b98c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b98e:	89a3      	ldrh	r3, [r4, #12]
 800b990:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b994:	81a3      	strh	r3, [r4, #12]
 800b996:	2300      	movs	r3, #0
 800b998:	6063      	str	r3, [r4, #4]
 800b99a:	6923      	ldr	r3, [r4, #16]
 800b99c:	6023      	str	r3, [r4, #0]
 800b99e:	89a3      	ldrh	r3, [r4, #12]
 800b9a0:	f043 0308 	orr.w	r3, r3, #8
 800b9a4:	81a3      	strh	r3, [r4, #12]
 800b9a6:	6923      	ldr	r3, [r4, #16]
 800b9a8:	b94b      	cbnz	r3, 800b9be <__swsetup_r+0x7a>
 800b9aa:	89a3      	ldrh	r3, [r4, #12]
 800b9ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b9b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b9b4:	d003      	beq.n	800b9be <__swsetup_r+0x7a>
 800b9b6:	4621      	mov	r1, r4
 800b9b8:	4628      	mov	r0, r5
 800b9ba:	f000 f883 	bl	800bac4 <__smakebuf_r>
 800b9be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9c2:	f013 0201 	ands.w	r2, r3, #1
 800b9c6:	d00a      	beq.n	800b9de <__swsetup_r+0x9a>
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	60a2      	str	r2, [r4, #8]
 800b9cc:	6962      	ldr	r2, [r4, #20]
 800b9ce:	4252      	negs	r2, r2
 800b9d0:	61a2      	str	r2, [r4, #24]
 800b9d2:	6922      	ldr	r2, [r4, #16]
 800b9d4:	b942      	cbnz	r2, 800b9e8 <__swsetup_r+0xa4>
 800b9d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b9da:	d1c5      	bne.n	800b968 <__swsetup_r+0x24>
 800b9dc:	bd38      	pop	{r3, r4, r5, pc}
 800b9de:	0799      	lsls	r1, r3, #30
 800b9e0:	bf58      	it	pl
 800b9e2:	6962      	ldrpl	r2, [r4, #20]
 800b9e4:	60a2      	str	r2, [r4, #8]
 800b9e6:	e7f4      	b.n	800b9d2 <__swsetup_r+0x8e>
 800b9e8:	2000      	movs	r0, #0
 800b9ea:	e7f7      	b.n	800b9dc <__swsetup_r+0x98>
 800b9ec:	2000009c 	.word	0x2000009c

0800b9f0 <_raise_r>:
 800b9f0:	291f      	cmp	r1, #31
 800b9f2:	b538      	push	{r3, r4, r5, lr}
 800b9f4:	4605      	mov	r5, r0
 800b9f6:	460c      	mov	r4, r1
 800b9f8:	d904      	bls.n	800ba04 <_raise_r+0x14>
 800b9fa:	2316      	movs	r3, #22
 800b9fc:	6003      	str	r3, [r0, #0]
 800b9fe:	f04f 30ff 	mov.w	r0, #4294967295
 800ba02:	bd38      	pop	{r3, r4, r5, pc}
 800ba04:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ba06:	b112      	cbz	r2, 800ba0e <_raise_r+0x1e>
 800ba08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba0c:	b94b      	cbnz	r3, 800ba22 <_raise_r+0x32>
 800ba0e:	4628      	mov	r0, r5
 800ba10:	f000 f830 	bl	800ba74 <_getpid_r>
 800ba14:	4622      	mov	r2, r4
 800ba16:	4601      	mov	r1, r0
 800ba18:	4628      	mov	r0, r5
 800ba1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba1e:	f000 b817 	b.w	800ba50 <_kill_r>
 800ba22:	2b01      	cmp	r3, #1
 800ba24:	d00a      	beq.n	800ba3c <_raise_r+0x4c>
 800ba26:	1c59      	adds	r1, r3, #1
 800ba28:	d103      	bne.n	800ba32 <_raise_r+0x42>
 800ba2a:	2316      	movs	r3, #22
 800ba2c:	6003      	str	r3, [r0, #0]
 800ba2e:	2001      	movs	r0, #1
 800ba30:	e7e7      	b.n	800ba02 <_raise_r+0x12>
 800ba32:	2100      	movs	r1, #0
 800ba34:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ba38:	4620      	mov	r0, r4
 800ba3a:	4798      	blx	r3
 800ba3c:	2000      	movs	r0, #0
 800ba3e:	e7e0      	b.n	800ba02 <_raise_r+0x12>

0800ba40 <raise>:
 800ba40:	4b02      	ldr	r3, [pc, #8]	@ (800ba4c <raise+0xc>)
 800ba42:	4601      	mov	r1, r0
 800ba44:	6818      	ldr	r0, [r3, #0]
 800ba46:	f7ff bfd3 	b.w	800b9f0 <_raise_r>
 800ba4a:	bf00      	nop
 800ba4c:	2000009c 	.word	0x2000009c

0800ba50 <_kill_r>:
 800ba50:	b538      	push	{r3, r4, r5, lr}
 800ba52:	4d07      	ldr	r5, [pc, #28]	@ (800ba70 <_kill_r+0x20>)
 800ba54:	2300      	movs	r3, #0
 800ba56:	4604      	mov	r4, r0
 800ba58:	4608      	mov	r0, r1
 800ba5a:	4611      	mov	r1, r2
 800ba5c:	602b      	str	r3, [r5, #0]
 800ba5e:	f7f6 fddb 	bl	8002618 <_kill>
 800ba62:	1c43      	adds	r3, r0, #1
 800ba64:	d102      	bne.n	800ba6c <_kill_r+0x1c>
 800ba66:	682b      	ldr	r3, [r5, #0]
 800ba68:	b103      	cbz	r3, 800ba6c <_kill_r+0x1c>
 800ba6a:	6023      	str	r3, [r4, #0]
 800ba6c:	bd38      	pop	{r3, r4, r5, pc}
 800ba6e:	bf00      	nop
 800ba70:	2000067c 	.word	0x2000067c

0800ba74 <_getpid_r>:
 800ba74:	f7f6 bdc8 	b.w	8002608 <_getpid>

0800ba78 <__swhatbuf_r>:
 800ba78:	b570      	push	{r4, r5, r6, lr}
 800ba7a:	460c      	mov	r4, r1
 800ba7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba80:	2900      	cmp	r1, #0
 800ba82:	b096      	sub	sp, #88	@ 0x58
 800ba84:	4615      	mov	r5, r2
 800ba86:	461e      	mov	r6, r3
 800ba88:	da0d      	bge.n	800baa6 <__swhatbuf_r+0x2e>
 800ba8a:	89a3      	ldrh	r3, [r4, #12]
 800ba8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ba90:	f04f 0100 	mov.w	r1, #0
 800ba94:	bf14      	ite	ne
 800ba96:	2340      	movne	r3, #64	@ 0x40
 800ba98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ba9c:	2000      	movs	r0, #0
 800ba9e:	6031      	str	r1, [r6, #0]
 800baa0:	602b      	str	r3, [r5, #0]
 800baa2:	b016      	add	sp, #88	@ 0x58
 800baa4:	bd70      	pop	{r4, r5, r6, pc}
 800baa6:	466a      	mov	r2, sp
 800baa8:	f000 f848 	bl	800bb3c <_fstat_r>
 800baac:	2800      	cmp	r0, #0
 800baae:	dbec      	blt.n	800ba8a <__swhatbuf_r+0x12>
 800bab0:	9901      	ldr	r1, [sp, #4]
 800bab2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bab6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800baba:	4259      	negs	r1, r3
 800babc:	4159      	adcs	r1, r3
 800babe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bac2:	e7eb      	b.n	800ba9c <__swhatbuf_r+0x24>

0800bac4 <__smakebuf_r>:
 800bac4:	898b      	ldrh	r3, [r1, #12]
 800bac6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bac8:	079d      	lsls	r5, r3, #30
 800baca:	4606      	mov	r6, r0
 800bacc:	460c      	mov	r4, r1
 800bace:	d507      	bpl.n	800bae0 <__smakebuf_r+0x1c>
 800bad0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bad4:	6023      	str	r3, [r4, #0]
 800bad6:	6123      	str	r3, [r4, #16]
 800bad8:	2301      	movs	r3, #1
 800bada:	6163      	str	r3, [r4, #20]
 800badc:	b003      	add	sp, #12
 800bade:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bae0:	ab01      	add	r3, sp, #4
 800bae2:	466a      	mov	r2, sp
 800bae4:	f7ff ffc8 	bl	800ba78 <__swhatbuf_r>
 800bae8:	9f00      	ldr	r7, [sp, #0]
 800baea:	4605      	mov	r5, r0
 800baec:	4639      	mov	r1, r7
 800baee:	4630      	mov	r0, r6
 800baf0:	f7fc ffb6 	bl	8008a60 <_malloc_r>
 800baf4:	b948      	cbnz	r0, 800bb0a <__smakebuf_r+0x46>
 800baf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bafa:	059a      	lsls	r2, r3, #22
 800bafc:	d4ee      	bmi.n	800badc <__smakebuf_r+0x18>
 800bafe:	f023 0303 	bic.w	r3, r3, #3
 800bb02:	f043 0302 	orr.w	r3, r3, #2
 800bb06:	81a3      	strh	r3, [r4, #12]
 800bb08:	e7e2      	b.n	800bad0 <__smakebuf_r+0xc>
 800bb0a:	89a3      	ldrh	r3, [r4, #12]
 800bb0c:	6020      	str	r0, [r4, #0]
 800bb0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb12:	81a3      	strh	r3, [r4, #12]
 800bb14:	9b01      	ldr	r3, [sp, #4]
 800bb16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bb1a:	b15b      	cbz	r3, 800bb34 <__smakebuf_r+0x70>
 800bb1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb20:	4630      	mov	r0, r6
 800bb22:	f000 f81d 	bl	800bb60 <_isatty_r>
 800bb26:	b128      	cbz	r0, 800bb34 <__smakebuf_r+0x70>
 800bb28:	89a3      	ldrh	r3, [r4, #12]
 800bb2a:	f023 0303 	bic.w	r3, r3, #3
 800bb2e:	f043 0301 	orr.w	r3, r3, #1
 800bb32:	81a3      	strh	r3, [r4, #12]
 800bb34:	89a3      	ldrh	r3, [r4, #12]
 800bb36:	431d      	orrs	r5, r3
 800bb38:	81a5      	strh	r5, [r4, #12]
 800bb3a:	e7cf      	b.n	800badc <__smakebuf_r+0x18>

0800bb3c <_fstat_r>:
 800bb3c:	b538      	push	{r3, r4, r5, lr}
 800bb3e:	4d07      	ldr	r5, [pc, #28]	@ (800bb5c <_fstat_r+0x20>)
 800bb40:	2300      	movs	r3, #0
 800bb42:	4604      	mov	r4, r0
 800bb44:	4608      	mov	r0, r1
 800bb46:	4611      	mov	r1, r2
 800bb48:	602b      	str	r3, [r5, #0]
 800bb4a:	f7f6 fdc5 	bl	80026d8 <_fstat>
 800bb4e:	1c43      	adds	r3, r0, #1
 800bb50:	d102      	bne.n	800bb58 <_fstat_r+0x1c>
 800bb52:	682b      	ldr	r3, [r5, #0]
 800bb54:	b103      	cbz	r3, 800bb58 <_fstat_r+0x1c>
 800bb56:	6023      	str	r3, [r4, #0]
 800bb58:	bd38      	pop	{r3, r4, r5, pc}
 800bb5a:	bf00      	nop
 800bb5c:	2000067c 	.word	0x2000067c

0800bb60 <_isatty_r>:
 800bb60:	b538      	push	{r3, r4, r5, lr}
 800bb62:	4d06      	ldr	r5, [pc, #24]	@ (800bb7c <_isatty_r+0x1c>)
 800bb64:	2300      	movs	r3, #0
 800bb66:	4604      	mov	r4, r0
 800bb68:	4608      	mov	r0, r1
 800bb6a:	602b      	str	r3, [r5, #0]
 800bb6c:	f7f6 fdc4 	bl	80026f8 <_isatty>
 800bb70:	1c43      	adds	r3, r0, #1
 800bb72:	d102      	bne.n	800bb7a <_isatty_r+0x1a>
 800bb74:	682b      	ldr	r3, [r5, #0]
 800bb76:	b103      	cbz	r3, 800bb7a <_isatty_r+0x1a>
 800bb78:	6023      	str	r3, [r4, #0]
 800bb7a:	bd38      	pop	{r3, r4, r5, pc}
 800bb7c:	2000067c 	.word	0x2000067c

0800bb80 <fmod>:
 800bb80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb82:	ed2d 8b02 	vpush	{d8}
 800bb86:	ec57 6b10 	vmov	r6, r7, d0
 800bb8a:	ec55 4b11 	vmov	r4, r5, d1
 800bb8e:	f000 f825 	bl	800bbdc <__ieee754_fmod>
 800bb92:	4622      	mov	r2, r4
 800bb94:	462b      	mov	r3, r5
 800bb96:	4630      	mov	r0, r6
 800bb98:	4639      	mov	r1, r7
 800bb9a:	eeb0 8a40 	vmov.f32	s16, s0
 800bb9e:	eef0 8a60 	vmov.f32	s17, s1
 800bba2:	f7f4 ffcb 	bl	8000b3c <__aeabi_dcmpun>
 800bba6:	b990      	cbnz	r0, 800bbce <fmod+0x4e>
 800bba8:	2200      	movs	r2, #0
 800bbaa:	2300      	movs	r3, #0
 800bbac:	4620      	mov	r0, r4
 800bbae:	4629      	mov	r1, r5
 800bbb0:	f7f4 ff92 	bl	8000ad8 <__aeabi_dcmpeq>
 800bbb4:	b158      	cbz	r0, 800bbce <fmod+0x4e>
 800bbb6:	f7fc f85d 	bl	8007c74 <__errno>
 800bbba:	2321      	movs	r3, #33	@ 0x21
 800bbbc:	6003      	str	r3, [r0, #0]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	4610      	mov	r0, r2
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	f7f4 fe49 	bl	800085c <__aeabi_ddiv>
 800bbca:	ec41 0b18 	vmov	d8, r0, r1
 800bbce:	eeb0 0a48 	vmov.f32	s0, s16
 800bbd2:	eef0 0a68 	vmov.f32	s1, s17
 800bbd6:	ecbd 8b02 	vpop	{d8}
 800bbda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bbdc <__ieee754_fmod>:
 800bbdc:	ec53 2b11 	vmov	r2, r3, d1
 800bbe0:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 800bbe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbe8:	ea52 040c 	orrs.w	r4, r2, ip
 800bbec:	ec51 0b10 	vmov	r0, r1, d0
 800bbf0:	461e      	mov	r6, r3
 800bbf2:	4617      	mov	r7, r2
 800bbf4:	4696      	mov	lr, r2
 800bbf6:	d00c      	beq.n	800bc12 <__ieee754_fmod+0x36>
 800bbf8:	4c77      	ldr	r4, [pc, #476]	@ (800bdd8 <__ieee754_fmod+0x1fc>)
 800bbfa:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800bbfe:	45a0      	cmp	r8, r4
 800bc00:	4689      	mov	r9, r1
 800bc02:	d806      	bhi.n	800bc12 <__ieee754_fmod+0x36>
 800bc04:	4254      	negs	r4, r2
 800bc06:	4d75      	ldr	r5, [pc, #468]	@ (800bddc <__ieee754_fmod+0x200>)
 800bc08:	4314      	orrs	r4, r2
 800bc0a:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800bc0e:	42ac      	cmp	r4, r5
 800bc10:	d909      	bls.n	800bc26 <__ieee754_fmod+0x4a>
 800bc12:	f7f4 fcf9 	bl	8000608 <__aeabi_dmul>
 800bc16:	4602      	mov	r2, r0
 800bc18:	460b      	mov	r3, r1
 800bc1a:	f7f4 fe1f 	bl	800085c <__aeabi_ddiv>
 800bc1e:	ec41 0b10 	vmov	d0, r0, r1
 800bc22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc26:	45e0      	cmp	r8, ip
 800bc28:	4682      	mov	sl, r0
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800bc30:	dc09      	bgt.n	800bc46 <__ieee754_fmod+0x6a>
 800bc32:	dbf4      	blt.n	800bc1e <__ieee754_fmod+0x42>
 800bc34:	4282      	cmp	r2, r0
 800bc36:	d8f2      	bhi.n	800bc1e <__ieee754_fmod+0x42>
 800bc38:	d105      	bne.n	800bc46 <__ieee754_fmod+0x6a>
 800bc3a:	4b69      	ldr	r3, [pc, #420]	@ (800bde0 <__ieee754_fmod+0x204>)
 800bc3c:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800bc40:	e9d3 0100 	ldrd	r0, r1, [r3]
 800bc44:	e7eb      	b.n	800bc1e <__ieee754_fmod+0x42>
 800bc46:	4a65      	ldr	r2, [pc, #404]	@ (800bddc <__ieee754_fmod+0x200>)
 800bc48:	ea19 0f02 	tst.w	r9, r2
 800bc4c:	d148      	bne.n	800bce0 <__ieee754_fmod+0x104>
 800bc4e:	f1b8 0f00 	cmp.w	r8, #0
 800bc52:	d13d      	bne.n	800bcd0 <__ieee754_fmod+0xf4>
 800bc54:	4963      	ldr	r1, [pc, #396]	@ (800bde4 <__ieee754_fmod+0x208>)
 800bc56:	4653      	mov	r3, sl
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	dc36      	bgt.n	800bcca <__ieee754_fmod+0xee>
 800bc5c:	4216      	tst	r6, r2
 800bc5e:	d14f      	bne.n	800bd00 <__ieee754_fmod+0x124>
 800bc60:	f1bc 0f00 	cmp.w	ip, #0
 800bc64:	d144      	bne.n	800bcf0 <__ieee754_fmod+0x114>
 800bc66:	4a5f      	ldr	r2, [pc, #380]	@ (800bde4 <__ieee754_fmod+0x208>)
 800bc68:	463b      	mov	r3, r7
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	dc3d      	bgt.n	800bcea <__ieee754_fmod+0x10e>
 800bc6e:	485e      	ldr	r0, [pc, #376]	@ (800bde8 <__ieee754_fmod+0x20c>)
 800bc70:	4281      	cmp	r1, r0
 800bc72:	db4a      	blt.n	800bd0a <__ieee754_fmod+0x12e>
 800bc74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bc78:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bc7c:	485a      	ldr	r0, [pc, #360]	@ (800bde8 <__ieee754_fmod+0x20c>)
 800bc7e:	4282      	cmp	r2, r0
 800bc80:	db57      	blt.n	800bd32 <__ieee754_fmod+0x156>
 800bc82:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800bc86:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800bc8a:	1a89      	subs	r1, r1, r2
 800bc8c:	1b98      	subs	r0, r3, r6
 800bc8e:	eba4 070e 	sub.w	r7, r4, lr
 800bc92:	2900      	cmp	r1, #0
 800bc94:	d162      	bne.n	800bd5c <__ieee754_fmod+0x180>
 800bc96:	4574      	cmp	r4, lr
 800bc98:	bf38      	it	cc
 800bc9a:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	bfa4      	itt	ge
 800bca2:	463c      	movge	r4, r7
 800bca4:	4603      	movge	r3, r0
 800bca6:	ea53 0104 	orrs.w	r1, r3, r4
 800bcaa:	d0c6      	beq.n	800bc3a <__ieee754_fmod+0x5e>
 800bcac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bcb0:	db69      	blt.n	800bd86 <__ieee754_fmod+0x1aa>
 800bcb2:	494d      	ldr	r1, [pc, #308]	@ (800bde8 <__ieee754_fmod+0x20c>)
 800bcb4:	428a      	cmp	r2, r1
 800bcb6:	db6c      	blt.n	800bd92 <__ieee754_fmod+0x1b6>
 800bcb8:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800bcbc:	432b      	orrs	r3, r5
 800bcbe:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800bcc2:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bcc6:	4620      	mov	r0, r4
 800bcc8:	e7a9      	b.n	800bc1e <__ieee754_fmod+0x42>
 800bcca:	3901      	subs	r1, #1
 800bccc:	005b      	lsls	r3, r3, #1
 800bcce:	e7c3      	b.n	800bc58 <__ieee754_fmod+0x7c>
 800bcd0:	4945      	ldr	r1, [pc, #276]	@ (800bde8 <__ieee754_fmod+0x20c>)
 800bcd2:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	ddc0      	ble.n	800bc5c <__ieee754_fmod+0x80>
 800bcda:	3901      	subs	r1, #1
 800bcdc:	005b      	lsls	r3, r3, #1
 800bcde:	e7fa      	b.n	800bcd6 <__ieee754_fmod+0xfa>
 800bce0:	ea4f 5128 	mov.w	r1, r8, asr #20
 800bce4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800bce8:	e7b8      	b.n	800bc5c <__ieee754_fmod+0x80>
 800bcea:	3a01      	subs	r2, #1
 800bcec:	005b      	lsls	r3, r3, #1
 800bcee:	e7bc      	b.n	800bc6a <__ieee754_fmod+0x8e>
 800bcf0:	4a3d      	ldr	r2, [pc, #244]	@ (800bde8 <__ieee754_fmod+0x20c>)
 800bcf2:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	ddb9      	ble.n	800bc6e <__ieee754_fmod+0x92>
 800bcfa:	3a01      	subs	r2, #1
 800bcfc:	005b      	lsls	r3, r3, #1
 800bcfe:	e7fa      	b.n	800bcf6 <__ieee754_fmod+0x11a>
 800bd00:	ea4f 522c 	mov.w	r2, ip, asr #20
 800bd04:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800bd08:	e7b1      	b.n	800bc6e <__ieee754_fmod+0x92>
 800bd0a:	1a40      	subs	r0, r0, r1
 800bd0c:	281f      	cmp	r0, #31
 800bd0e:	dc0a      	bgt.n	800bd26 <__ieee754_fmod+0x14a>
 800bd10:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 800bd14:	fa08 f800 	lsl.w	r8, r8, r0
 800bd18:	fa2a f303 	lsr.w	r3, sl, r3
 800bd1c:	ea43 0308 	orr.w	r3, r3, r8
 800bd20:	fa0a f400 	lsl.w	r4, sl, r0
 800bd24:	e7aa      	b.n	800bc7c <__ieee754_fmod+0xa0>
 800bd26:	4b31      	ldr	r3, [pc, #196]	@ (800bdec <__ieee754_fmod+0x210>)
 800bd28:	1a5b      	subs	r3, r3, r1
 800bd2a:	fa0a f303 	lsl.w	r3, sl, r3
 800bd2e:	2400      	movs	r4, #0
 800bd30:	e7a4      	b.n	800bc7c <__ieee754_fmod+0xa0>
 800bd32:	1a80      	subs	r0, r0, r2
 800bd34:	281f      	cmp	r0, #31
 800bd36:	dc0a      	bgt.n	800bd4e <__ieee754_fmod+0x172>
 800bd38:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 800bd3c:	fa0c fc00 	lsl.w	ip, ip, r0
 800bd40:	fa27 f606 	lsr.w	r6, r7, r6
 800bd44:	ea46 060c 	orr.w	r6, r6, ip
 800bd48:	fa07 fe00 	lsl.w	lr, r7, r0
 800bd4c:	e79d      	b.n	800bc8a <__ieee754_fmod+0xae>
 800bd4e:	4e27      	ldr	r6, [pc, #156]	@ (800bdec <__ieee754_fmod+0x210>)
 800bd50:	1ab6      	subs	r6, r6, r2
 800bd52:	fa07 f606 	lsl.w	r6, r7, r6
 800bd56:	f04f 0e00 	mov.w	lr, #0
 800bd5a:	e796      	b.n	800bc8a <__ieee754_fmod+0xae>
 800bd5c:	4574      	cmp	r4, lr
 800bd5e:	bf38      	it	cc
 800bd60:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800bd64:	2800      	cmp	r0, #0
 800bd66:	da05      	bge.n	800bd74 <__ieee754_fmod+0x198>
 800bd68:	0fe0      	lsrs	r0, r4, #31
 800bd6a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800bd6e:	0064      	lsls	r4, r4, #1
 800bd70:	3901      	subs	r1, #1
 800bd72:	e78b      	b.n	800bc8c <__ieee754_fmod+0xb0>
 800bd74:	ea50 0307 	orrs.w	r3, r0, r7
 800bd78:	f43f af5f 	beq.w	800bc3a <__ieee754_fmod+0x5e>
 800bd7c:	0ffb      	lsrs	r3, r7, #31
 800bd7e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800bd82:	007c      	lsls	r4, r7, #1
 800bd84:	e7f4      	b.n	800bd70 <__ieee754_fmod+0x194>
 800bd86:	0fe1      	lsrs	r1, r4, #31
 800bd88:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800bd8c:	0064      	lsls	r4, r4, #1
 800bd8e:	3a01      	subs	r2, #1
 800bd90:	e78c      	b.n	800bcac <__ieee754_fmod+0xd0>
 800bd92:	1a89      	subs	r1, r1, r2
 800bd94:	2914      	cmp	r1, #20
 800bd96:	dc0a      	bgt.n	800bdae <__ieee754_fmod+0x1d2>
 800bd98:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800bd9c:	fa03 f202 	lsl.w	r2, r3, r2
 800bda0:	40cc      	lsrs	r4, r1
 800bda2:	4322      	orrs	r2, r4
 800bda4:	410b      	asrs	r3, r1
 800bda6:	ea43 0105 	orr.w	r1, r3, r5
 800bdaa:	4610      	mov	r0, r2
 800bdac:	e737      	b.n	800bc1e <__ieee754_fmod+0x42>
 800bdae:	291f      	cmp	r1, #31
 800bdb0:	dc07      	bgt.n	800bdc2 <__ieee754_fmod+0x1e6>
 800bdb2:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800bdb6:	40cc      	lsrs	r4, r1
 800bdb8:	fa03 f202 	lsl.w	r2, r3, r2
 800bdbc:	4322      	orrs	r2, r4
 800bdbe:	462b      	mov	r3, r5
 800bdc0:	e7f1      	b.n	800bda6 <__ieee754_fmod+0x1ca>
 800bdc2:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800bdc6:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800bdca:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800bdce:	32e2      	adds	r2, #226	@ 0xe2
 800bdd0:	fa43 f202 	asr.w	r2, r3, r2
 800bdd4:	e7f3      	b.n	800bdbe <__ieee754_fmod+0x1e2>
 800bdd6:	bf00      	nop
 800bdd8:	7fefffff 	.word	0x7fefffff
 800bddc:	7ff00000 	.word	0x7ff00000
 800bde0:	0800c2d8 	.word	0x0800c2d8
 800bde4:	fffffbed 	.word	0xfffffbed
 800bde8:	fffffc02 	.word	0xfffffc02
 800bdec:	fffffbe2 	.word	0xfffffbe2

0800bdf0 <_init>:
 800bdf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdf2:	bf00      	nop
 800bdf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdf6:	bc08      	pop	{r3}
 800bdf8:	469e      	mov	lr, r3
 800bdfa:	4770      	bx	lr

0800bdfc <_fini>:
 800bdfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdfe:	bf00      	nop
 800be00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be02:	bc08      	pop	{r3}
 800be04:	469e      	mov	lr, r3
 800be06:	4770      	bx	lr
