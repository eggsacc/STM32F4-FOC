
STM32F411_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f94  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800a130  0800a130  0000b130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1a0  0800a1a0  0000c1d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1a0  0800a1a0  0000b1a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1a8  0800a1a8  0000c1d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1a8  0800a1a8  0000b1a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a1ac  0800a1ac  0000b1ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d0  20000000  0800a1b0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f34  200001d0  0800a380  0000c1d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002104  0800a380  0000d104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c2c  00000000  00000000  0000c200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b25  00000000  00000000  00023e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  00027958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ffc  00000000  00000000  00028e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f79  00000000  00000000  00029e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b5c2  00000000  00000000  00043d95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092fa3  00000000  00000000  0005f357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f22fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005af8  00000000  00000000  000f2340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f7e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001d0 	.word	0x200001d0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a114 	.word	0x0800a114

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001d4 	.word	0x200001d4
 80001d4:	0800a114 	.word	0x0800a114

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b96a 	b.w	8000e3c <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	460c      	mov	r4, r1
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d14e      	bne.n	8000c2a <__udivmoddi4+0xaa>
 8000b8c:	4694      	mov	ip, r2
 8000b8e:	458c      	cmp	ip, r1
 8000b90:	4686      	mov	lr, r0
 8000b92:	fab2 f282 	clz	r2, r2
 8000b96:	d962      	bls.n	8000c5e <__udivmoddi4+0xde>
 8000b98:	b14a      	cbz	r2, 8000bae <__udivmoddi4+0x2e>
 8000b9a:	f1c2 0320 	rsb	r3, r2, #32
 8000b9e:	4091      	lsls	r1, r2
 8000ba0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ba4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba8:	4319      	orrs	r1, r3
 8000baa:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb2:	fa1f f68c 	uxth.w	r6, ip
 8000bb6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bbe:	fb07 1114 	mls	r1, r7, r4, r1
 8000bc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc6:	fb04 f106 	mul.w	r1, r4, r6
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x64>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bd6:	f080 8112 	bcs.w	8000dfe <__udivmoddi4+0x27e>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 810f 	bls.w	8000dfe <__udivmoddi4+0x27e>
 8000be0:	3c02      	subs	r4, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a59      	subs	r1, r3, r1
 8000be6:	fa1f f38e 	uxth.w	r3, lr
 8000bea:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bee:	fb07 1110 	mls	r1, r7, r0, r1
 8000bf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf6:	fb00 f606 	mul.w	r6, r0, r6
 8000bfa:	429e      	cmp	r6, r3
 8000bfc:	d90a      	bls.n	8000c14 <__udivmoddi4+0x94>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c06:	f080 80fc 	bcs.w	8000e02 <__udivmoddi4+0x282>
 8000c0a:	429e      	cmp	r6, r3
 8000c0c:	f240 80f9 	bls.w	8000e02 <__udivmoddi4+0x282>
 8000c10:	4463      	add	r3, ip
 8000c12:	3802      	subs	r0, #2
 8000c14:	1b9b      	subs	r3, r3, r6
 8000c16:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	b11d      	cbz	r5, 8000c26 <__udivmoddi4+0xa6>
 8000c1e:	40d3      	lsrs	r3, r2
 8000c20:	2200      	movs	r2, #0
 8000c22:	e9c5 3200 	strd	r3, r2, [r5]
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d905      	bls.n	8000c3a <__udivmoddi4+0xba>
 8000c2e:	b10d      	cbz	r5, 8000c34 <__udivmoddi4+0xb4>
 8000c30:	e9c5 0100 	strd	r0, r1, [r5]
 8000c34:	2100      	movs	r1, #0
 8000c36:	4608      	mov	r0, r1
 8000c38:	e7f5      	b.n	8000c26 <__udivmoddi4+0xa6>
 8000c3a:	fab3 f183 	clz	r1, r3
 8000c3e:	2900      	cmp	r1, #0
 8000c40:	d146      	bne.n	8000cd0 <__udivmoddi4+0x150>
 8000c42:	42a3      	cmp	r3, r4
 8000c44:	d302      	bcc.n	8000c4c <__udivmoddi4+0xcc>
 8000c46:	4290      	cmp	r0, r2
 8000c48:	f0c0 80f0 	bcc.w	8000e2c <__udivmoddi4+0x2ac>
 8000c4c:	1a86      	subs	r6, r0, r2
 8000c4e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c52:	2001      	movs	r0, #1
 8000c54:	2d00      	cmp	r5, #0
 8000c56:	d0e6      	beq.n	8000c26 <__udivmoddi4+0xa6>
 8000c58:	e9c5 6300 	strd	r6, r3, [r5]
 8000c5c:	e7e3      	b.n	8000c26 <__udivmoddi4+0xa6>
 8000c5e:	2a00      	cmp	r2, #0
 8000c60:	f040 8090 	bne.w	8000d84 <__udivmoddi4+0x204>
 8000c64:	eba1 040c 	sub.w	r4, r1, ip
 8000c68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c6c:	fa1f f78c 	uxth.w	r7, ip
 8000c70:	2101      	movs	r1, #1
 8000c72:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c82:	fb07 f006 	mul.w	r0, r7, r6
 8000c86:	4298      	cmp	r0, r3
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x11c>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0x11a>
 8000c94:	4298      	cmp	r0, r3
 8000c96:	f200 80cd 	bhi.w	8000e34 <__udivmoddi4+0x2b4>
 8000c9a:	4626      	mov	r6, r4
 8000c9c:	1a1c      	subs	r4, r3, r0
 8000c9e:	fa1f f38e 	uxth.w	r3, lr
 8000ca2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ca6:	fb08 4410 	mls	r4, r8, r0, r4
 8000caa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cae:	fb00 f707 	mul.w	r7, r0, r7
 8000cb2:	429f      	cmp	r7, r3
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x148>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x146>
 8000cc0:	429f      	cmp	r7, r3
 8000cc2:	f200 80b0 	bhi.w	8000e26 <__udivmoddi4+0x2a6>
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	1bdb      	subs	r3, r3, r7
 8000cca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cce:	e7a5      	b.n	8000c1c <__udivmoddi4+0x9c>
 8000cd0:	f1c1 0620 	rsb	r6, r1, #32
 8000cd4:	408b      	lsls	r3, r1
 8000cd6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cda:	431f      	orrs	r7, r3
 8000cdc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce0:	fa04 f301 	lsl.w	r3, r4, r1
 8000ce4:	ea43 030c 	orr.w	r3, r3, ip
 8000ce8:	40f4      	lsrs	r4, r6
 8000cea:	fa00 f801 	lsl.w	r8, r0, r1
 8000cee:	0c38      	lsrs	r0, r7, #16
 8000cf0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cf4:	fbb4 fef0 	udiv	lr, r4, r0
 8000cf8:	fa1f fc87 	uxth.w	ip, r7
 8000cfc:	fb00 441e 	mls	r4, r0, lr, r4
 8000d00:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d04:	fb0e f90c 	mul.w	r9, lr, ip
 8000d08:	45a1      	cmp	r9, r4
 8000d0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d0e:	d90a      	bls.n	8000d26 <__udivmoddi4+0x1a6>
 8000d10:	193c      	adds	r4, r7, r4
 8000d12:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d16:	f080 8084 	bcs.w	8000e22 <__udivmoddi4+0x2a2>
 8000d1a:	45a1      	cmp	r9, r4
 8000d1c:	f240 8081 	bls.w	8000e22 <__udivmoddi4+0x2a2>
 8000d20:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d24:	443c      	add	r4, r7
 8000d26:	eba4 0409 	sub.w	r4, r4, r9
 8000d2a:	fa1f f983 	uxth.w	r9, r3
 8000d2e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d32:	fb00 4413 	mls	r4, r0, r3, r4
 8000d36:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d3a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d3e:	45a4      	cmp	ip, r4
 8000d40:	d907      	bls.n	8000d52 <__udivmoddi4+0x1d2>
 8000d42:	193c      	adds	r4, r7, r4
 8000d44:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d48:	d267      	bcs.n	8000e1a <__udivmoddi4+0x29a>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	d965      	bls.n	8000e1a <__udivmoddi4+0x29a>
 8000d4e:	3b02      	subs	r3, #2
 8000d50:	443c      	add	r4, r7
 8000d52:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d56:	fba0 9302 	umull	r9, r3, r0, r2
 8000d5a:	eba4 040c 	sub.w	r4, r4, ip
 8000d5e:	429c      	cmp	r4, r3
 8000d60:	46ce      	mov	lr, r9
 8000d62:	469c      	mov	ip, r3
 8000d64:	d351      	bcc.n	8000e0a <__udivmoddi4+0x28a>
 8000d66:	d04e      	beq.n	8000e06 <__udivmoddi4+0x286>
 8000d68:	b155      	cbz	r5, 8000d80 <__udivmoddi4+0x200>
 8000d6a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d6e:	eb64 040c 	sbc.w	r4, r4, ip
 8000d72:	fa04 f606 	lsl.w	r6, r4, r6
 8000d76:	40cb      	lsrs	r3, r1
 8000d78:	431e      	orrs	r6, r3
 8000d7a:	40cc      	lsrs	r4, r1
 8000d7c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d80:	2100      	movs	r1, #0
 8000d82:	e750      	b.n	8000c26 <__udivmoddi4+0xa6>
 8000d84:	f1c2 0320 	rsb	r3, r2, #32
 8000d88:	fa20 f103 	lsr.w	r1, r0, r3
 8000d8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d90:	fa24 f303 	lsr.w	r3, r4, r3
 8000d94:	4094      	lsls	r4, r2
 8000d96:	430c      	orrs	r4, r1
 8000d98:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d9c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da0:	fa1f f78c 	uxth.w	r7, ip
 8000da4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da8:	fb08 3110 	mls	r1, r8, r0, r3
 8000dac:	0c23      	lsrs	r3, r4, #16
 8000dae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db2:	fb00 f107 	mul.w	r1, r0, r7
 8000db6:	4299      	cmp	r1, r3
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x24c>
 8000dba:	eb1c 0303 	adds.w	r3, ip, r3
 8000dbe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dc2:	d22c      	bcs.n	8000e1e <__udivmoddi4+0x29e>
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	d92a      	bls.n	8000e1e <__udivmoddi4+0x29e>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	4463      	add	r3, ip
 8000dcc:	1a5b      	subs	r3, r3, r1
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dd4:	fb08 3311 	mls	r3, r8, r1, r3
 8000dd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ddc:	fb01 f307 	mul.w	r3, r1, r7
 8000de0:	42a3      	cmp	r3, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x276>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000dec:	d213      	bcs.n	8000e16 <__udivmoddi4+0x296>
 8000dee:	42a3      	cmp	r3, r4
 8000df0:	d911      	bls.n	8000e16 <__udivmoddi4+0x296>
 8000df2:	3902      	subs	r1, #2
 8000df4:	4464      	add	r4, ip
 8000df6:	1ae4      	subs	r4, r4, r3
 8000df8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dfc:	e739      	b.n	8000c72 <__udivmoddi4+0xf2>
 8000dfe:	4604      	mov	r4, r0
 8000e00:	e6f0      	b.n	8000be4 <__udivmoddi4+0x64>
 8000e02:	4608      	mov	r0, r1
 8000e04:	e706      	b.n	8000c14 <__udivmoddi4+0x94>
 8000e06:	45c8      	cmp	r8, r9
 8000e08:	d2ae      	bcs.n	8000d68 <__udivmoddi4+0x1e8>
 8000e0a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e0e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e12:	3801      	subs	r0, #1
 8000e14:	e7a8      	b.n	8000d68 <__udivmoddi4+0x1e8>
 8000e16:	4631      	mov	r1, r6
 8000e18:	e7ed      	b.n	8000df6 <__udivmoddi4+0x276>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	e799      	b.n	8000d52 <__udivmoddi4+0x1d2>
 8000e1e:	4630      	mov	r0, r6
 8000e20:	e7d4      	b.n	8000dcc <__udivmoddi4+0x24c>
 8000e22:	46d6      	mov	lr, sl
 8000e24:	e77f      	b.n	8000d26 <__udivmoddi4+0x1a6>
 8000e26:	4463      	add	r3, ip
 8000e28:	3802      	subs	r0, #2
 8000e2a:	e74d      	b.n	8000cc8 <__udivmoddi4+0x148>
 8000e2c:	4606      	mov	r6, r0
 8000e2e:	4623      	mov	r3, r4
 8000e30:	4608      	mov	r0, r1
 8000e32:	e70f      	b.n	8000c54 <__udivmoddi4+0xd4>
 8000e34:	3e02      	subs	r6, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	e730      	b.n	8000c9c <__udivmoddi4+0x11c>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <AS5600_ReadRegister>:

/*
 * Static low level functions to read/write to registers
 */
static HAL_StatusTypeDef AS5600_ReadRegister(AS5600 *dev, uint8_t reg, uint8_t *data)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af04      	add	r7, sp, #16
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(dev->i2cHandle, AS5600_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	6818      	ldr	r0, [r3, #0]
 8000e52:	7afb      	ldrb	r3, [r7, #11]
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5a:	9302      	str	r3, [sp, #8]
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	9301      	str	r3, [sp, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	2301      	movs	r3, #1
 8000e66:	216c      	movs	r1, #108	@ 0x6c
 8000e68:	f001 fdf6 	bl	8002a58 <HAL_I2C_Mem_Read>
 8000e6c:	4603      	mov	r3, r0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <AS5600_ReadRegisters>:

static HAL_StatusTypeDef AS5600_ReadRegisters(AS5600 *dev, uint8_t reg, uint8_t *data, uint8_t length)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b088      	sub	sp, #32
 8000e7a:	af04      	add	r7, sp, #16
 8000e7c:	60f8      	str	r0, [r7, #12]
 8000e7e:	607a      	str	r2, [r7, #4]
 8000e80:	461a      	mov	r2, r3
 8000e82:	460b      	mov	r3, r1
 8000e84:	72fb      	strb	r3, [r7, #11]
 8000e86:	4613      	mov	r3, r2
 8000e88:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(dev->i2cHandle, AS5600_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	6818      	ldr	r0, [r3, #0]
 8000e8e:	7afb      	ldrb	r3, [r7, #11]
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	7abb      	ldrb	r3, [r7, #10]
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9a:	9102      	str	r1, [sp, #8]
 8000e9c:	9301      	str	r3, [sp, #4]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	216c      	movs	r1, #108	@ 0x6c
 8000ea6:	f001 fdd7 	bl	8002a58 <HAL_I2C_Mem_Read>
 8000eaa:	4603      	mov	r3, r0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <AS5600_ZeroAngle>:
/*
 * @brief Zeroes the sensor value.
 * @param[in] AS5600* sensor
 */
void AS5600_ZeroAngle(AS5600* dev)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	dev->total_angle_rad = 0;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
	dev->prev_raw_angle = AS5600_ReadRawAngle(dev);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f000 f90b 	bl	80010e0 <AS5600_ReadRawAngle>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	461a      	mov	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	809a      	strh	r2, [r3, #4]
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	0000      	movs	r0, r0
 8000edc:	0000      	movs	r0, r0
	...

08000ee0 <AS5600_Init>:
/*
 * Initialization
 * Pass the struct to each function as pointer
 */
uint8_t AS5600_Init(AS5600* dev, I2C_HandleTypeDef* i2c_handle, uint8_t zero)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b088      	sub	sp, #32
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	4613      	mov	r3, r2
 8000eec:	71fb      	strb	r3, [r7, #7]
	/* Set struct params */
	dev->i2cHandle = i2c_handle;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	68ba      	ldr	r2, [r7, #8]
 8000ef2:	601a      	str	r2, [r3, #0]
	dev->total_angle_rad = 0;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f04f 0200 	mov.w	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]

	uint8_t err_num = 0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	77fb      	strb	r3, [r7, #31]

	/*
	 * Check magnet strength
	 */
	HAL_StatusTypeDef magnet_status;
	uint8_t regdata = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	767b      	strb	r3, [r7, #25]

	magnet_status = AS5600_ReadRegister(dev, MAGNET_STATUS_REG, &regdata);
 8000f04:	f107 0319 	add.w	r3, r7, #25
 8000f08:	461a      	mov	r2, r3
 8000f0a:	210b      	movs	r1, #11
 8000f0c:	68f8      	ldr	r0, [r7, #12]
 8000f0e:	f7ff ff97 	bl	8000e40 <AS5600_ReadRegister>
 8000f12:	4603      	mov	r3, r0
 8000f14:	77bb      	strb	r3, [r7, #30]
	err_num += (magnet_status != HAL_OK);
 8000f16:	7fbb      	ldrb	r3, [r7, #30]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	bf14      	ite	ne
 8000f1c:	2301      	movne	r3, #1
 8000f1e:	2300      	moveq	r3, #0
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	461a      	mov	r2, r3
 8000f24:	7ffb      	ldrb	r3, [r7, #31]
 8000f26:	4413      	add	r3, r2
 8000f28:	77fb      	strb	r3, [r7, #31]

	/* bit[5] indicates magnet present if set */
	if(!(regdata & (1 << 5))){
 8000f2a:	7e7b      	ldrb	r3, [r7, #25]
 8000f2c:	f003 0320 	and.w	r3, r3, #32
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d101      	bne.n	8000f38 <AS5600_Init+0x58>

		return 255;
 8000f34:	23ff      	movs	r3, #255	@ 0xff
 8000f36:	e038      	b.n	8000faa <AS5600_Init+0xca>
	}

	/* initialize starting angle */
	uint8_t regdata_angle[2] = {0, 0};
 8000f38:	2300      	movs	r3, #0
 8000f3a:	82bb      	strh	r3, [r7, #20]
	HAL_StatusTypeDef status = AS5600_ReadRegisters(dev, RAW_ANGLE_MSB_REG, regdata_angle, 2);
 8000f3c:	f107 0214 	add.w	r2, r7, #20
 8000f40:	2302      	movs	r3, #2
 8000f42:	210c      	movs	r1, #12
 8000f44:	68f8      	ldr	r0, [r7, #12]
 8000f46:	f7ff ff96 	bl	8000e76 <AS5600_ReadRegisters>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	777b      	strb	r3, [r7, #29]

	/* Mask & shift 4 MSB left by 8 and concatenate with 8 LSBs */
	uint16_t raw_angle = (((regdata_angle[0] & 0x0F) << 8) | regdata_angle[1]);
 8000f4e:	7d3b      	ldrb	r3, [r7, #20]
 8000f50:	021b      	lsls	r3, r3, #8
 8000f52:	b21b      	sxth	r3, r3
 8000f54:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000f58:	b21a      	sxth	r2, r3
 8000f5a:	7d7b      	ldrb	r3, [r7, #21]
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	837b      	strh	r3, [r7, #26]

	err_num += (status != HAL_OK);
 8000f64:	7f7b      	ldrb	r3, [r7, #29]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	bf14      	ite	ne
 8000f6a:	2301      	movne	r3, #1
 8000f6c:	2300      	moveq	r3, #0
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	461a      	mov	r2, r3
 8000f72:	7ffb      	ldrb	r3, [r7, #31]
 8000f74:	4413      	add	r3, r2
 8000f76:	77fb      	strb	r3, [r7, #31]

	dev->prev_raw_angle = raw_angle;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	8b7a      	ldrh	r2, [r7, #26]
 8000f7c:	809a      	strh	r2, [r3, #4]

	if(!zero)
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d111      	bne.n	8000fa8 <AS5600_Init+0xc8>
	{
		dev->total_angle_rad = raw_angle * BIT_TO_RAD;
 8000f84:	8b7b      	ldrh	r3, [r7, #26]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fa78 	bl	800047c <__aeabi_i2d>
 8000f8c:	a30a      	add	r3, pc, #40	@ (adr r3, 8000fb8 <AS5600_Init+0xd8>)
 8000f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f92:	f7ff fadd 	bl	8000550 <__aeabi_dmul>
 8000f96:	4602      	mov	r2, r0
 8000f98:	460b      	mov	r3, r1
 8000f9a:	4610      	mov	r0, r2
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f7ff fd87 	bl	8000ab0 <__aeabi_d2f>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	609a      	str	r2, [r3, #8]
	}

	return err_num;
 8000fa8:	7ffb      	ldrb	r3, [r7, #31]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3720      	adds	r7, #32
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	f3af 8000 	nop.w
 8000fb8:	8b5cd7aa 	.word	0x8b5cd7aa
 8000fbc:	3f59238d 	.word	0x3f59238d

08000fc0 <AS5600_ReadAngle>:

/*
 * Read sensor value
 */
float AS5600_ReadAngle(AS5600 *dev)
{
 8000fc0:	b5b0      	push	{r4, r5, r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
	int16_t raw_angle = AS5600_ReadRawAngle(dev);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f000 f889 	bl	80010e0 <AS5600_ReadRawAngle>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	81fb      	strh	r3, [r7, #14]
	int16_t delta = raw_angle - dev->prev_raw_angle;
 8000fd2:	89fa      	ldrh	r2, [r7, #14]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	889b      	ldrh	r3, [r3, #4]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	81bb      	strh	r3, [r7, #12]

	/*
	 * Positive large delta -> negative overflow
	 * Negative large delta -> positive overflow
	 */
	if(delta > HALF_MAX_RESOLUTION)
 8000fde:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000fe2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000fe6:	db23      	blt.n	8001030 <AS5600_ReadAngle+0x70>
	{
		dev->total_angle_rad -= (MAX_RESOLUTION - delta) * BIT_TO_RAD;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fa57 	bl	80004a0 <__aeabi_f2d>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	460d      	mov	r5, r1
 8000ff6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ffa:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8000ffe:	330f      	adds	r3, #15
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fa3b 	bl	800047c <__aeabi_i2d>
 8001006:	a334      	add	r3, pc, #208	@ (adr r3, 80010d8 <AS5600_ReadAngle+0x118>)
 8001008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100c:	f7ff faa0 	bl	8000550 <__aeabi_dmul>
 8001010:	4602      	mov	r2, r0
 8001012:	460b      	mov	r3, r1
 8001014:	4620      	mov	r0, r4
 8001016:	4629      	mov	r1, r5
 8001018:	f7ff f8e2 	bl	80001e0 <__aeabi_dsub>
 800101c:	4602      	mov	r2, r0
 800101e:	460b      	mov	r3, r1
 8001020:	4610      	mov	r0, r2
 8001022:	4619      	mov	r1, r3
 8001024:	f7ff fd44 	bl	8000ab0 <__aeabi_d2f>
 8001028:	4602      	mov	r2, r0
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	e047      	b.n	80010c0 <AS5600_ReadAngle+0x100>
	}
	else if(delta < -HALF_MAX_RESOLUTION)
 8001030:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001034:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 8001038:	dc22      	bgt.n	8001080 <AS5600_ReadAngle+0xc0>
	{
		dev->total_angle_rad += (MAX_RESOLUTION + delta) * BIT_TO_RAD;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	689b      	ldr	r3, [r3, #8]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fa2e 	bl	80004a0 <__aeabi_f2d>
 8001044:	4604      	mov	r4, r0
 8001046:	460d      	mov	r5, r1
 8001048:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800104c:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fa13 	bl	800047c <__aeabi_i2d>
 8001056:	a320      	add	r3, pc, #128	@ (adr r3, 80010d8 <AS5600_ReadAngle+0x118>)
 8001058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105c:	f7ff fa78 	bl	8000550 <__aeabi_dmul>
 8001060:	4602      	mov	r2, r0
 8001062:	460b      	mov	r3, r1
 8001064:	4620      	mov	r0, r4
 8001066:	4629      	mov	r1, r5
 8001068:	f7ff f8bc 	bl	80001e4 <__adddf3>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f7ff fd1c 	bl	8000ab0 <__aeabi_d2f>
 8001078:	4602      	mov	r2, r0
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	e01f      	b.n	80010c0 <AS5600_ReadAngle+0x100>
	}
	else
	{
		dev->total_angle_rad += delta * BIT_TO_RAD;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fa0b 	bl	80004a0 <__aeabi_f2d>
 800108a:	4604      	mov	r4, r0
 800108c:	460d      	mov	r5, r1
 800108e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff f9f2 	bl	800047c <__aeabi_i2d>
 8001098:	a30f      	add	r3, pc, #60	@ (adr r3, 80010d8 <AS5600_ReadAngle+0x118>)
 800109a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109e:	f7ff fa57 	bl	8000550 <__aeabi_dmul>
 80010a2:	4602      	mov	r2, r0
 80010a4:	460b      	mov	r3, r1
 80010a6:	4620      	mov	r0, r4
 80010a8:	4629      	mov	r1, r5
 80010aa:	f7ff f89b 	bl	80001e4 <__adddf3>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4610      	mov	r0, r2
 80010b4:	4619      	mov	r1, r3
 80010b6:	f7ff fcfb 	bl	8000ab0 <__aeabi_d2f>
 80010ba:	4602      	mov	r2, r0
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	609a      	str	r2, [r3, #8]
	}

	dev->prev_raw_angle = raw_angle;
 80010c0:	89fa      	ldrh	r2, [r7, #14]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	809a      	strh	r2, [r3, #4]

	return dev->total_angle_rad;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	ee07 3a90 	vmov	s15, r3
}
 80010ce:	eeb0 0a67 	vmov.f32	s0, s15
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bdb0      	pop	{r4, r5, r7, pc}
 80010d8:	8b5cd7aa 	.word	0x8b5cd7aa
 80010dc:	3f59238d 	.word	0x3f59238d

080010e0 <AS5600_ReadRawAngle>:

uint16_t AS5600_ReadRawAngle(AS5600 *dev)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	uint8_t regdata[2] = {0, 0};
 80010e8:	2300      	movs	r3, #0
 80010ea:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef status = AS5600_ReadRegisters(dev, RAW_ANGLE_MSB_REG, regdata, 2);
 80010ec:	f107 0208 	add.w	r2, r7, #8
 80010f0:	2302      	movs	r3, #2
 80010f2:	210c      	movs	r1, #12
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff febe 	bl	8000e76 <AS5600_ReadRegisters>
 80010fa:	4603      	mov	r3, r0
 80010fc:	73fb      	strb	r3, [r7, #15]

	/* Return early if register read fails */
	if(status != HAL_OK)
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <AS5600_ReadRawAngle+0x28>
	{
		return 0;;
 8001104:	2300      	movs	r3, #0
 8001106:	e00b      	b.n	8001120 <AS5600_ReadRawAngle+0x40>
	}

	/* Mask & shift 4 MSB left by 8 and concatenate with 8 LSBs */
	uint16_t raw_angle = (((regdata[0] & 0x0F) << 8) | regdata[1]);
 8001108:	7a3b      	ldrb	r3, [r7, #8]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	b21b      	sxth	r3, r3
 800110e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001112:	b21a      	sxth	r2, r3
 8001114:	7a7b      	ldrb	r3, [r7, #9]
 8001116:	b21b      	sxth	r3, r3
 8001118:	4313      	orrs	r3, r2
 800111a:	b21b      	sxth	r3, r3
 800111c:	81bb      	strh	r3, [r7, #12]
	return raw_angle;
 800111e:	89bb      	ldrh	r3, [r7, #12]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <_cos>:
/*
 * @brief Cosine approximation
 * @param[in] angle(radians)
 * @return cos(angle)
 */
__STATIC_INLINE float _cos(float angle) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	ed87 0a01 	vstr	s0, [r7, #4]
  float _angle = angle + _PI_2;
 8001132:	edd7 7a01 	vldr	s15, [r7, #4]
 8001136:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001180 <_cos+0x58>
 800113a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800113e:	edc7 7a03 	vstr	s15, [r7, #12]
  _angle = _angle > _2PI ? _angle - _2PI : _angle;
 8001142:	edd7 7a03 	vldr	s15, [r7, #12]
 8001146:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001184 <_cos+0x5c>
 800114a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800114e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001152:	dd06      	ble.n	8001162 <_cos+0x3a>
 8001154:	edd7 7a03 	vldr	s15, [r7, #12]
 8001158:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001184 <_cos+0x5c>
 800115c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001160:	e001      	b.n	8001166 <_cos+0x3e>
 8001162:	edd7 7a03 	vldr	s15, [r7, #12]
 8001166:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(_angle);
 800116a:	ed97 0a03 	vldr	s0, [r7, #12]
 800116e:	f000 fabd 	bl	80016ec <_sin>
 8001172:	eef0 7a40 	vmov.f32	s15, s0
}
 8001176:	eeb0 0a67 	vmov.f32	s0, s15
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	3fc90fdb 	.word	0x3fc90fdb
 8001184:	40c90fdb 	.word	0x40c90fdb

08001188 <_normalizeAngle>:
/*
 * @brief Normalize angle to [0, 2pi]
 * @param[in] angle(radians)
 * @return normalized_angle
 */
__STATIC_INLINE float _normalizeAngle(float angle){
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);       // fmod(x,y) returns remainder of x/y
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff f984 	bl	80004a0 <__aeabi_f2d>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 80011e8 <_normalizeAngle+0x60>
 80011a0:	ec43 2b10 	vmov	d0, r2, r3
 80011a4:	f008 fe7e 	bl	8009ea4 <fmod>
 80011a8:	ec53 2b10 	vmov	r2, r3, d0
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	f7ff fc7e 	bl	8000ab0 <__aeabi_d2f>
 80011b4:	4603      	mov	r3, r0
 80011b6:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + _2PI);    // add 2pi to negative angles to make positive
 80011b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80011bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c4:	db02      	blt.n	80011cc <_normalizeAngle+0x44>
 80011c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80011ca:	e005      	b.n	80011d8 <_normalizeAngle+0x50>
 80011cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80011d0:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80011f0 <_normalizeAngle+0x68>
 80011d4:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80011d8:	eeb0 0a67 	vmov.f32	s0, s15
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	f3af 8000 	nop.w
 80011e8:	60000000 	.word	0x60000000
 80011ec:	401921fb 	.word	0x401921fb
 80011f0:	40c90fdb 	.word	0x40c90fdb

080011f4 <DWT_Init>:

/*
 * Timer utility functions to return number of microseconds since power up.
 */
__STATIC_INLINE void DWT_Init(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 80011f8:	4b08      	ldr	r3, [pc, #32]	@ (800121c <DWT_Init+0x28>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	4a07      	ldr	r2, [pc, #28]	@ (800121c <DWT_Init+0x28>)
 80011fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001202:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8001204:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <DWT_Init+0x2c>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a05      	ldr	r2, [pc, #20]	@ (8001220 <DWT_Init+0x2c>)
 800120a:	f043 0301 	orr.w	r3, r3, #1
 800120e:	6013      	str	r3, [r2, #0]
}
 8001210:	bf00      	nop
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	e000edf0 	.word	0xe000edf0
 8001220:	e0001000 	.word	0xe0001000

08001224 <PWM_Start_3_Channel>:
/*
 * @brief Starts PWM channels 1, 2, 3 of specified timer.
 * @param[in] TIM_HandleTypeDef timer
 */
void PWM_Start_3_Channel(TIM_HandleTypeDef* timer)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(timer, TIM_CHANNEL_1);
 800122c:	2100      	movs	r1, #0
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f004 f8f8 	bl	8005424 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer, TIM_CHANNEL_2);
 8001234:	2104      	movs	r1, #4
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f004 f8f4 	bl	8005424 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer, TIM_CHANNEL_3);
 800123c:	2108      	movs	r1, #8
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f004 f8f0 	bl	8005424 <HAL_TIM_PWM_Start>
}
 8001244:	bf00      	nop
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <SetPWM>:
 * @scope static inline
 * @brief Set pwm duty cycle of timer channels
 * @param[in] Motor* motor
 */
__STATIC_INLINE void SetPWM(Motor* motor)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
	motor->timer->Instance->CCR1 = _constrain(motor->phaseVs->Ua / motor->supply_voltage, 0.0f, 1.0f) * 256;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	edd3 6a00 	vldr	s13, [r3]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001262:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001266:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800126a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800126e:	d502      	bpl.n	8001276 <SetPWM+0x2a>
 8001270:	eddf 7a51 	vldr	s15, [pc, #324]	@ 80013b8 <SetPWM+0x16c>
 8001274:	e01b      	b.n	80012ae <SetPWM+0x62>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	edd3 6a00 	vldr	s13, [r3]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	ed93 7a02 	vldr	s14, [r3, #8]
 8001284:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001288:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800128c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001294:	dd02      	ble.n	800129c <SetPWM+0x50>
 8001296:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800129a:	e008      	b.n	80012ae <SetPWM+0x62>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	edd3 6a00 	vldr	s13, [r3]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	ed93 7a02 	vldr	s14, [r3, #8]
 80012aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ae:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 80013bc <SetPWM+0x170>
 80012b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012c0:	ee17 2a90 	vmov	r2, s15
 80012c4:	635a      	str	r2, [r3, #52]	@ 0x34
	motor->timer->Instance->CCR2 = _constrain(motor->phaseVs->Ub / motor->supply_voltage, 0.0f, 1.0f) * 256;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	edd3 6a01 	vldr	s13, [r3, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	ed93 7a02 	vldr	s14, [r3, #8]
 80012d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e0:	d502      	bpl.n	80012e8 <SetPWM+0x9c>
 80012e2:	eddf 7a35 	vldr	s15, [pc, #212]	@ 80013b8 <SetPWM+0x16c>
 80012e6:	e01b      	b.n	8001320 <SetPWM+0xd4>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	edd3 6a01 	vldr	s13, [r3, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80012f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001306:	dd02      	ble.n	800130e <SetPWM+0xc2>
 8001308:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800130c:	e008      	b.n	8001320 <SetPWM+0xd4>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	edd3 6a01 	vldr	s13, [r3, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	ed93 7a02 	vldr	s14, [r3, #8]
 800131c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001320:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80013bc <SetPWM+0x170>
 8001324:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	69db      	ldr	r3, [r3, #28]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001332:	ee17 2a90 	vmov	r2, s15
 8001336:	639a      	str	r2, [r3, #56]	@ 0x38
	motor->timer->Instance->CCR3 = _constrain(motor->phaseVs->Uc / motor->supply_voltage, 0.0f, 1.0f) * 256;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	ed93 7a02 	vldr	s14, [r3, #8]
 8001346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800134a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800134e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001352:	d502      	bpl.n	800135a <SetPWM+0x10e>
 8001354:	eddf 7a18 	vldr	s15, [pc, #96]	@ 80013b8 <SetPWM+0x16c>
 8001358:	e01b      	b.n	8001392 <SetPWM+0x146>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	ed93 7a02 	vldr	s14, [r3, #8]
 8001368:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800136c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001378:	dd02      	ble.n	8001380 <SetPWM+0x134>
 800137a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800137e:	e008      	b.n	8001392 <SetPWM+0x146>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	edd3 6a02 	vldr	s13, [r3, #8]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	ed93 7a02 	vldr	s14, [r3, #8]
 800138e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001392:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80013bc <SetPWM+0x170>
 8001396:	ee67 7a87 	vmul.f32	s15, s15, s14
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	69db      	ldr	r3, [r3, #28]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013a4:	ee17 2a90 	vmov	r2, s15
 80013a8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	00000000 	.word	0x00000000
 80013bc:	43800000 	.word	0x43800000

080013c0 <MotorInit>:
 * - Motor voltage limit set to supply voltage / 2 by default
 *
 * @retval Motor motor
 */
void MotorInit(Motor* motor, TIM_HandleTypeDef* timer, float supply_voltage, uint8_t pole_pairs)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80013ce:	4613      	mov	r3, r2
 80013d0:	70fb      	strb	r3, [r7, #3]
	/* Create structs */
	static Var_t motor_vars;
	motor_vars.electric_angle = 0;
 80013d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001440 <MotorInit+0x80>)
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
	motor_vars.prev_us = 0;
 80013da:	4b19      	ldr	r3, [pc, #100]	@ (8001440 <MotorInit+0x80>)
 80013dc:	2200      	movs	r2, #0
 80013de:	60da      	str	r2, [r3, #12]
	motor_vars.zero_angle = 0;
 80013e0:	4b17      	ldr	r3, [pc, #92]	@ (8001440 <MotorInit+0x80>)
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
	motor_vars.shaft_angle = 0;
 80013e8:	4b15      	ldr	r3, [pc, #84]	@ (8001440 <MotorInit+0x80>)
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	605a      	str	r2, [r3, #4]

	static DQval_t motor_dq = {0, 0};
	static PhaseV_t motor_pv = {0, 0, 0};

	DWT_Init();
 80013f0:	f7ff ff00 	bl	80011f4 <DWT_Init>

	/* Motor struct initialization */
	motor->dqVals = &motor_dq;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4a13      	ldr	r2, [pc, #76]	@ (8001444 <MotorInit+0x84>)
 80013f8:	611a      	str	r2, [r3, #16]
	motor->phaseVs = &motor_pv;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	4a12      	ldr	r2, [pc, #72]	@ (8001448 <MotorInit+0x88>)
 80013fe:	615a      	str	r2, [r3, #20]
	motor->vars = &motor_vars;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	4a0f      	ldr	r2, [pc, #60]	@ (8001440 <MotorInit+0x80>)
 8001404:	60da      	str	r2, [r3, #12]
	motor->sensor = NULL;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
	motor->timer = timer;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	68ba      	ldr	r2, [r7, #8]
 8001410:	61da      	str	r2, [r3, #28]
	motor->sensor_dir = 0;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2200      	movs	r2, #0
 8001416:	701a      	strb	r2, [r3, #0]
	motor->pole_pairs = pole_pairs;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	78fa      	ldrb	r2, [r7, #3]
 800141c:	705a      	strb	r2, [r3, #1]
	motor->supply_voltage = supply_voltage;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	609a      	str	r2, [r3, #8]
	motor->voltage_limit = supply_voltage / 2;
 8001424:	ed97 7a01 	vldr	s14, [r7, #4]
 8001428:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800142c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200001ec 	.word	0x200001ec
 8001444:	200001fc 	.word	0x200001fc
 8001448:	20000204 	.word	0x20000204

0800144c <SetTorque>:
/*
 * @brief Inverse Clarke & Park transformations to calculate phase voltages
 * @param[in] Motor* motor
 * @note Calls setpwm()
 */
void SetTorque(Motor* motor) {
 800144c:	b580      	push	{r7, lr}
 800144e:	ed2d 8b02 	vpush	{d8}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	/* Constrain Uq to within voltage range */
	motor->dqVals->Uq = _constrain(motor->dqVals->Uq, -motor->voltage_limit, motor->voltage_limit);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	691b      	ldr	r3, [r3, #16]
 800145c:	ed93 7a00 	vldr	s14, [r3]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	edd3 7a01 	vldr	s15, [r3, #4]
 8001466:	eef1 7a67 	vneg.f32	s15, s15
 800146a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800146e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001472:	d505      	bpl.n	8001480 <SetTorque+0x34>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	edd3 7a01 	vldr	s15, [r3, #4]
 800147a:	eef1 7a67 	vneg.f32	s15, s15
 800147e:	e013      	b.n	80014a8 <SetTorque+0x5c>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	ed93 7a00 	vldr	s14, [r3]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	edd3 7a01 	vldr	s15, [r3, #4]
 800148e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001496:	dd03      	ble.n	80014a0 <SetTorque+0x54>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	edd3 7a01 	vldr	s15, [r3, #4]
 800149e:	e003      	b.n	80014a8 <SetTorque+0x5c>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	edd3 7a00 	vldr	s15, [r3]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	edc3 7a00 	vstr	s15, [r3]
    /* Normalize electric angle */
    float el_angle = _normalizeAngle(motor->vars->electric_angle);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80014b8:	eeb0 0a67 	vmov.f32	s0, s15
 80014bc:	f7ff fe64 	bl	8001188 <_normalizeAngle>
 80014c0:	ed87 0a05 	vstr	s0, [r7, #20]

	/* Inverse park transform */
	float Ualpha = -(motor->dqVals->Uq) * _sin(el_angle);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	eeb1 8a67 	vneg.f32	s16, s15
 80014d0:	ed97 0a05 	vldr	s0, [r7, #20]
 80014d4:	f000 f90a 	bl	80016ec <_sin>
 80014d8:	eef0 7a40 	vmov.f32	s15, s0
 80014dc:	ee68 7a27 	vmul.f32	s15, s16, s15
 80014e0:	edc7 7a04 	vstr	s15, [r7, #16]
	float Ubeta = motor->dqVals->Uq * _cos(el_angle);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	ed93 8a00 	vldr	s16, [r3]
 80014ec:	ed97 0a05 	vldr	s0, [r7, #20]
 80014f0:	f7ff fe1a 	bl	8001128 <_cos>
 80014f4:	eef0 7a40 	vmov.f32	s15, s0
 80014f8:	ee68 7a27 	vmul.f32	s15, s16, s15
 80014fc:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Inverse Clarke transform */
	motor->phaseVs->Ua = Ualpha + motor->supply_voltage / 2.0f;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	edd3 7a02 	vldr	s15, [r3, #8]
 8001506:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800150a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	edd7 7a04 	vldr	s15, [r7, #16]
 8001516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800151a:	edc3 7a00 	vstr	s15, [r3]
	motor->phaseVs->Ub = (_SQRT3 * Ubeta - Ualpha) / 2.0f + motor->supply_voltage / 2.0f;
 800151e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001522:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80015a0 <SetTorque+0x154>
 8001526:	ee27 7a87 	vmul.f32	s14, s15, s14
 800152a:	edd7 7a04 	vldr	s15, [r7, #16]
 800152e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001532:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001536:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001540:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001544:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001550:	edc3 7a01 	vstr	s15, [r3, #4]
	motor->phaseVs->Uc = (- Ualpha - _SQRT3 * Ubeta) / 2.0f + motor->supply_voltage / 2.0f;
 8001554:	edd7 7a04 	vldr	s15, [r7, #16]
 8001558:	eeb1 7a67 	vneg.f32	s14, s15
 800155c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001560:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 80015a0 <SetTorque+0x154>
 8001564:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001568:	ee77 7a67 	vsub.f32	s15, s14, s15
 800156c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001570:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	edd3 6a02 	vldr	s13, [r3, #8]
 800157a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800157e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	ee77 7a27 	vadd.f32	s15, s14, s15
 800158a:	edc3 7a02 	vstr	s15, [r3, #8]

	SetPWM(motor);
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff fe5c 	bl	800124c <SetPWM>
}
 8001594:	bf00      	nop
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	ecbd 8b02 	vpop	{d8}
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	3fddb3d7 	.word	0x3fddb3d7

080015a4 <LinkSensor>:
 * @param[in] Motor* motor
 * @param[in] AS5600* sensor
 * @param[in] I2C_HandleTypeDef *i2c_handle
 */
void LinkSensor(Motor* motor, AS5600* sensor, I2C_HandleTypeDef *i2c_handle)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	607a      	str	r2, [r7, #4]
	uint8_t init_stat = AS5600_Init(sensor, i2c_handle, 1);
 80015b0:	2201      	movs	r2, #1
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	68b8      	ldr	r0, [r7, #8]
 80015b6:	f7ff fc93 	bl	8000ee0 <AS5600_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	75fb      	strb	r3, [r7, #23]

	/* Check if sensor link successful */
	if(init_stat != 0)
 80015be:	7dfb      	ldrb	r3, [r7, #23]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d003      	beq.n	80015cc <LinkSensor+0x28>
	{
		motor->sensor = NULL;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2200      	movs	r2, #0
 80015c8:	619a      	str	r2, [r3, #24]
		return;
 80015ca:	e002      	b.n	80015d2 <LinkSensor+0x2e>
	}

	motor->sensor = sensor;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	619a      	str	r2, [r3, #24]
}
 80015d2:	3718      	adds	r7, #24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <BLDC_AutoCalibrate>:
/*
 * @brief Sends sensor readings through USB. For debugging sensors.
 * @param[in] Motor* motor
 */
void BLDC_AutoCalibrate(Motor* motor)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
	/* Check if encoder & timer attached */
	if(motor->sensor == NULL || motor->timer == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d076      	beq.n	80016d6 <BLDC_AutoCalibrate+0xfe>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	69db      	ldr	r3, [r3, #28]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d072      	beq.n	80016d6 <BLDC_AutoCalibrate+0xfe>
	{
		return;
	}

	/* Set motor to some fixed electrical angle */
	motor->dqVals->Uq = motor->supply_voltage / 3;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
 80015fa:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80015fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001602:	edc3 7a00 	vstr	s15, [r3]
	motor->vars->electric_angle = _PI;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	4a35      	ldr	r2, [pc, #212]	@ (80016e0 <BLDC_AutoCalibrate+0x108>)
 800160c:	609a      	str	r2, [r3, #8]
	SetTorque(motor);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff ff1c 	bl	800144c <SetTorque>

	/* Wait for motor to reach position & read sensor value */
	HAL_Delay(2000);
 8001614:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001618:	f000 fe36 	bl	8002288 <HAL_Delay>
	float angle_a = AS5600_ReadAngle(motor->sensor);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff fccd 	bl	8000fc0 <AS5600_ReadAngle>
 8001626:	ed87 0a05 	vstr	s0, [r7, #20]

	/* Rotate stator by PI/2 rads */
	motor->vars->electric_angle = _3PI_2;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	4a2d      	ldr	r2, [pc, #180]	@ (80016e4 <BLDC_AutoCalibrate+0x10c>)
 8001630:	609a      	str	r2, [r3, #8]
	SetTorque(motor);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f7ff ff0a 	bl	800144c <SetTorque>

	/* Wait for rotor to reach position, then read second sensor value */
	HAL_Delay(2000);
 8001638:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800163c:	f000 fe24 	bl	8002288 <HAL_Delay>
	float angle_b = AS5600_ReadAngle(motor->sensor);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fcbb 	bl	8000fc0 <AS5600_ReadAngle>
 800164a:	ed87 0a04 	vstr	s0, [r7, #16]

	/* Calculate mechanical angle delta */
	float delta = angle_b - angle_a;
 800164e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001652:	edd7 7a05 	vldr	s15, [r7, #20]
 8001656:	ee77 7a67 	vsub.f32	s15, s14, s15
 800165a:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Set sensor angle inverter */
	motor->sensor_dir = delta > 0 ? 1 : -1;
 800165e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001662:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800166a:	dd01      	ble.n	8001670 <BLDC_AutoCalibrate+0x98>
 800166c:	2201      	movs	r2, #1
 800166e:	e001      	b.n	8001674 <BLDC_AutoCalibrate+0x9c>
 8001670:	f04f 32ff 	mov.w	r2, #4294967295
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	701a      	strb	r2, [r3, #0]

	uint8_t pole_pairs = (int)(_PI_2 / _abs(delta));
 8001678:	edd7 7a03 	vldr	s15, [r7, #12]
 800167c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001684:	d504      	bpl.n	8001690 <BLDC_AutoCalibrate+0xb8>
 8001686:	edd7 7a03 	vldr	s15, [r7, #12]
 800168a:	eef1 7a67 	vneg.f32	s15, s15
 800168e:	e001      	b.n	8001694 <BLDC_AutoCalibrate+0xbc>
 8001690:	edd7 7a03 	vldr	s15, [r7, #12]
 8001694:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80016e8 <BLDC_AutoCalibrate+0x110>
 8001698:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800169c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80016a0:	edc7 7a00 	vstr	s15, [r7]
 80016a4:	783b      	ldrb	r3, [r7, #0]
 80016a6:	72fb      	strb	r3, [r7, #11]

	/* Check if pole pair calculation is reasonable */
	if(pole_pairs >= 5 || pole_pairs <= 14)
 80016a8:	7afb      	ldrb	r3, [r7, #11]
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	d802      	bhi.n	80016b4 <BLDC_AutoCalibrate+0xdc>
 80016ae:	7afb      	ldrb	r3, [r7, #11]
 80016b0:	2b0e      	cmp	r3, #14
 80016b2:	d802      	bhi.n	80016ba <BLDC_AutoCalibrate+0xe2>
	{
		motor->pole_pairs = pole_pairs;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	7afa      	ldrb	r2, [r7, #11]
 80016b8:	705a      	strb	r2, [r3, #1]
	}

	AS5600_ZeroAngle(motor->sensor);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff fbf8 	bl	8000eb4 <AS5600_ZeroAngle>
	motor->dqVals->Uq = 0;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	f04f 0200 	mov.w	r2, #0
 80016cc:	601a      	str	r2, [r3, #0]
	SetTorque(motor);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f7ff febc 	bl	800144c <SetTorque>
 80016d4:	e000      	b.n	80016d8 <BLDC_AutoCalibrate+0x100>
		return;
 80016d6:	bf00      	nop
}
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40490fdb 	.word	0x40490fdb
 80016e4:	4096cbe4 	.word	0x4096cbe4
 80016e8:	3fc90fdb 	.word	0x3fc90fdb

080016ec <_sin>:
/*
 * @brief Sine approximation using look-up table
 * @param[in] angle(radians)
 * @return sin(angle)
 */
float _sin(float angle){
 80016ec:	b480      	push	{r7}
 80016ee:	b087      	sub	sp, #28
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	ed87 0a01 	vstr	s0, [r7, #4]

  int32_t first, second;
  uint16_t index = (uint16_t)(angle / _2PI * 65536.0f);
 80016f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80016fa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80017dc <_sin+0xf0>
 80016fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001702:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80017e0 <_sin+0xf4>
 8001706:	ee67 7a87 	vmul.f32	s15, s15, s14
 800170a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800170e:	ee17 3a90 	vmov	r3, s15
 8001712:	81fb      	strh	r3, [r7, #14]
  int frac = index & 0xff;
 8001714:	89fb      	ldrh	r3, [r7, #14]
 8001716:	b2db      	uxtb	r3, r3
 8001718:	60bb      	str	r3, [r7, #8]
  index = (index >> 8) & 0xff;
 800171a:	89fb      	ldrh	r3, [r7, #14]
 800171c:	0a1b      	lsrs	r3, r3, #8
 800171e:	81fb      	strh	r3, [r7, #14]

  if (index < 64){
 8001720:	89fb      	ldrh	r3, [r7, #14]
 8001722:	2b3f      	cmp	r3, #63	@ 0x3f
 8001724:	d80b      	bhi.n	800173e <_sin+0x52>
    first = (int32_t)sineLUT[index];
 8001726:	89fb      	ldrh	r3, [r7, #14]
 8001728:	4a2e      	ldr	r2, [pc, #184]	@ (80017e4 <_sin+0xf8>)
 800172a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800172e:	617b      	str	r3, [r7, #20]
    second = (int32_t)sineLUT[index + 1];
 8001730:	89fb      	ldrh	r3, [r7, #14]
 8001732:	3301      	adds	r3, #1
 8001734:	4a2b      	ldr	r2, [pc, #172]	@ (80017e4 <_sin+0xf8>)
 8001736:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	e033      	b.n	80017a6 <_sin+0xba>
  }
  else if (index < 128){
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	2b7f      	cmp	r3, #127	@ 0x7f
 8001742:	d80e      	bhi.n	8001762 <_sin+0x76>
    first = (int32_t)sineLUT[128 - index];
 8001744:	89fb      	ldrh	r3, [r7, #14]
 8001746:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800174a:	4a26      	ldr	r2, [pc, #152]	@ (80017e4 <_sin+0xf8>)
 800174c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001750:	617b      	str	r3, [r7, #20]
    second = (int32_t)sineLUT[127 - index];
 8001752:	89fb      	ldrh	r3, [r7, #14]
 8001754:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8001758:	4a22      	ldr	r2, [pc, #136]	@ (80017e4 <_sin+0xf8>)
 800175a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	e021      	b.n	80017a6 <_sin+0xba>
  }
  else if (index < 192){
 8001762:	89fb      	ldrh	r3, [r7, #14]
 8001764:	2bbf      	cmp	r3, #191	@ 0xbf
 8001766:	d80e      	bhi.n	8001786 <_sin+0x9a>
    first = -(int32_t)sineLUT[index - 128];
 8001768:	89fb      	ldrh	r3, [r7, #14]
 800176a:	3b80      	subs	r3, #128	@ 0x80
 800176c:	4a1d      	ldr	r2, [pc, #116]	@ (80017e4 <_sin+0xf8>)
 800176e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001772:	425b      	negs	r3, r3
 8001774:	617b      	str	r3, [r7, #20]
    second = -(int32_t)sineLUT[index - 127];
 8001776:	89fb      	ldrh	r3, [r7, #14]
 8001778:	3b7f      	subs	r3, #127	@ 0x7f
 800177a:	4a1a      	ldr	r2, [pc, #104]	@ (80017e4 <_sin+0xf8>)
 800177c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001780:	425b      	negs	r3, r3
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	e00f      	b.n	80017a6 <_sin+0xba>
  }
  else {
    first = -(int32_t)sineLUT[256 - index];
 8001786:	89fb      	ldrh	r3, [r7, #14]
 8001788:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800178c:	4a15      	ldr	r2, [pc, #84]	@ (80017e4 <_sin+0xf8>)
 800178e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001792:	425b      	negs	r3, r3
 8001794:	617b      	str	r3, [r7, #20]
    second = -(int32_t)sineLUT[255 - index];
 8001796:	89fb      	ldrh	r3, [r7, #14]
 8001798:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800179c:	4a11      	ldr	r2, [pc, #68]	@ (80017e4 <_sin+0xf8>)
 800179e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017a2:	425b      	negs	r3, r3
 80017a4:	613b      	str	r3, [r7, #16]
  }

  return (first + (((second - first) * frac) >> 8)) / 32768.0f;
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	68ba      	ldr	r2, [r7, #8]
 80017ae:	fb02 f303 	mul.w	r3, r2, r3
 80017b2:	121a      	asrs	r2, r3, #8
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	4413      	add	r3, r2
 80017b8:	ee07 3a90 	vmov	s15, r3
 80017bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017c0:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80017e8 <_sin+0xfc>
 80017c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017c8:	eef0 7a66 	vmov.f32	s15, s13
}
 80017cc:	eeb0 0a67 	vmov.f32	s0, s15
 80017d0:	371c      	adds	r7, #28
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40c90fdb 	.word	0x40c90fdb
 80017e0:	47800000 	.word	0x47800000
 80017e4:	20000000 	.word	0x20000000
 80017e8:	47000000 	.word	0x47000000

080017ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b0ac      	sub	sp, #176	@ 0xb0
 80017f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017f2:	f000 fd07 	bl	8002204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017f6:	f000 f84d 	bl	8001894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017fa:	f000 fa0f 	bl	8001c1c <MX_GPIO_Init>
  MX_I2C1_Init();
 80017fe:	f000 f8b1 	bl	8001964 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001802:	f000 f90b 	bl	8001a1c <MX_TIM2_Init>
  MX_TIM11_Init();
 8001806:	f000 f9e5 	bl	8001bd4 <MX_TIM11_Init>
  MX_I2C2_Init();
 800180a:	f000 f8d9 	bl	80019c0 <MX_I2C2_Init>
  MX_TIM3_Init();
 800180e:	f000 f973 	bl	8001af8 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8001812:	f007 fe2b 	bl	800946c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  /* Start PWM channels */
  PWM_Start_3_Channel(&htim2);
 8001816:	481a      	ldr	r0, [pc, #104]	@ (8001880 <main+0x94>)
 8001818:	f7ff fd04 	bl	8001224 <PWM_Start_3_Channel>
  /* Create sensor & motor object */
  AS5600 s1;
  Motor m1;

  /* Init sensor & motor objects */
  AS5600_Init(&s1, &hi2c1, 1);
 800181c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001820:	2201      	movs	r2, #1
 8001822:	4918      	ldr	r1, [pc, #96]	@ (8001884 <main+0x98>)
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fb5b 	bl	8000ee0 <AS5600_Init>
  MotorInit(&m1, &htim2, 12, 7);
 800182a:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 800182e:	2207      	movs	r2, #7
 8001830:	eeb2 0a08 	vmov.f32	s0, #40	@ 0x41400000  12.0
 8001834:	4912      	ldr	r1, [pc, #72]	@ (8001880 <main+0x94>)
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fdc2 	bl	80013c0 <MotorInit>

  /* Attach sensor to motor object */
  LinkSensor(&m1, &s1, &hi2c1);
 800183c:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 8001840:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001844:	4a0f      	ldr	r2, [pc, #60]	@ (8001884 <main+0x98>)
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff feac 	bl	80015a4 <LinkSensor>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BLDC_AutoCalibrate(&m1);
 800184c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fec1 	bl	80015d8 <BLDC_AutoCalibrate>
	  Ua = m1.phaseVs->Ua;
 8001856:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a0a      	ldr	r2, [pc, #40]	@ (8001888 <main+0x9c>)
 800185e:	6013      	str	r3, [r2, #0]
	  Ub = m1.phaseVs->Ub;
 8001860:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	4a09      	ldr	r2, [pc, #36]	@ (800188c <main+0xa0>)
 8001868:	6013      	str	r3, [r2, #0]
	  Uc = m1.phaseVs->Uc;
 800186a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	4a07      	ldr	r2, [pc, #28]	@ (8001890 <main+0xa4>)
 8001872:	6013      	str	r3, [r2, #0]
	  HAL_Delay(3000);
 8001874:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001878:	f000 fd06 	bl	8002288 <HAL_Delay>
	  BLDC_AutoCalibrate(&m1);
 800187c:	bf00      	nop
 800187e:	e7e5      	b.n	800184c <main+0x60>
 8001880:	200002b8 	.word	0x200002b8
 8001884:	20000210 	.word	0x20000210
 8001888:	20000390 	.word	0x20000390
 800188c:	20000394 	.word	0x20000394
 8001890:	20000398 	.word	0x20000398

08001894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b094      	sub	sp, #80	@ 0x50
 8001898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800189a:	f107 0320 	add.w	r3, r7, #32
 800189e:	2230      	movs	r2, #48	@ 0x30
 80018a0:	2100      	movs	r1, #0
 80018a2:	4618      	mov	r0, r3
 80018a4:	f008 facc 	bl	8009e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018a8:	f107 030c 	add.w	r3, r7, #12
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b8:	2300      	movs	r3, #0
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	4b27      	ldr	r3, [pc, #156]	@ (800195c <SystemClock_Config+0xc8>)
 80018be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c0:	4a26      	ldr	r2, [pc, #152]	@ (800195c <SystemClock_Config+0xc8>)
 80018c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80018c8:	4b24      	ldr	r3, [pc, #144]	@ (800195c <SystemClock_Config+0xc8>)
 80018ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018d4:	2300      	movs	r3, #0
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	4b21      	ldr	r3, [pc, #132]	@ (8001960 <SystemClock_Config+0xcc>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a20      	ldr	r2, [pc, #128]	@ (8001960 <SystemClock_Config+0xcc>)
 80018de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001960 <SystemClock_Config+0xcc>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018f0:	2301      	movs	r3, #1
 80018f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018f8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018fa:	2302      	movs	r3, #2
 80018fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001902:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001904:	2319      	movs	r3, #25
 8001906:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001908:	23c0      	movs	r3, #192	@ 0xc0
 800190a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800190c:	2302      	movs	r3, #2
 800190e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001910:	2304      	movs	r3, #4
 8001912:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001914:	f107 0320 	add.w	r3, r7, #32
 8001918:	4618      	mov	r0, r3
 800191a:	f002 fff7 	bl	800490c <HAL_RCC_OscConfig>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001924:	f000 f9ec 	bl	8001d00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001928:	230f      	movs	r3, #15
 800192a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800192c:	2302      	movs	r3, #2
 800192e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001934:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001938:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800193e:	f107 030c 	add.w	r3, r7, #12
 8001942:	2103      	movs	r1, #3
 8001944:	4618      	mov	r0, r3
 8001946:	f003 fa59 	bl	8004dfc <HAL_RCC_ClockConfig>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001950:	f000 f9d6 	bl	8001d00 <Error_Handler>
  }
}
 8001954:	bf00      	nop
 8001956:	3750      	adds	r7, #80	@ 0x50
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40023800 	.word	0x40023800
 8001960:	40007000 	.word	0x40007000

08001964 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001968:	4b12      	ldr	r3, [pc, #72]	@ (80019b4 <MX_I2C1_Init+0x50>)
 800196a:	4a13      	ldr	r2, [pc, #76]	@ (80019b8 <MX_I2C1_Init+0x54>)
 800196c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800196e:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <MX_I2C1_Init+0x50>)
 8001970:	4a12      	ldr	r2, [pc, #72]	@ (80019bc <MX_I2C1_Init+0x58>)
 8001972:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001974:	4b0f      	ldr	r3, [pc, #60]	@ (80019b4 <MX_I2C1_Init+0x50>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800197a:	4b0e      	ldr	r3, [pc, #56]	@ (80019b4 <MX_I2C1_Init+0x50>)
 800197c:	2200      	movs	r2, #0
 800197e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001980:	4b0c      	ldr	r3, [pc, #48]	@ (80019b4 <MX_I2C1_Init+0x50>)
 8001982:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001986:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001988:	4b0a      	ldr	r3, [pc, #40]	@ (80019b4 <MX_I2C1_Init+0x50>)
 800198a:	2200      	movs	r2, #0
 800198c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800198e:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <MX_I2C1_Init+0x50>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001994:	4b07      	ldr	r3, [pc, #28]	@ (80019b4 <MX_I2C1_Init+0x50>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800199a:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <MX_I2C1_Init+0x50>)
 800199c:	2200      	movs	r2, #0
 800199e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019a0:	4804      	ldr	r0, [pc, #16]	@ (80019b4 <MX_I2C1_Init+0x50>)
 80019a2:	f000 ff15 	bl	80027d0 <HAL_I2C_Init>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019ac:	f000 f9a8 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019b0:	bf00      	nop
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	20000210 	.word	0x20000210
 80019b8:	40005400 	.word	0x40005400
 80019bc:	000186a0 	.word	0x000186a0

080019c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019c4:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <MX_I2C2_Init+0x50>)
 80019c6:	4a13      	ldr	r2, [pc, #76]	@ (8001a14 <MX_I2C2_Init+0x54>)
 80019c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80019ca:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <MX_I2C2_Init+0x50>)
 80019cc:	4a12      	ldr	r2, [pc, #72]	@ (8001a18 <MX_I2C2_Init+0x58>)
 80019ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a10 <MX_I2C2_Init+0x50>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80019d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a10 <MX_I2C2_Init+0x50>)
 80019d8:	2200      	movs	r2, #0
 80019da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a10 <MX_I2C2_Init+0x50>)
 80019de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019e2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001a10 <MX_I2C2_Init+0x50>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80019ea:	4b09      	ldr	r3, [pc, #36]	@ (8001a10 <MX_I2C2_Init+0x50>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019f0:	4b07      	ldr	r3, [pc, #28]	@ (8001a10 <MX_I2C2_Init+0x50>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019f6:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <MX_I2C2_Init+0x50>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019fc:	4804      	ldr	r0, [pc, #16]	@ (8001a10 <MX_I2C2_Init+0x50>)
 80019fe:	f000 fee7 	bl	80027d0 <HAL_I2C_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a08:	f000 f97a 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	20000264 	.word	0x20000264
 8001a14:	40005800 	.word	0x40005800
 8001a18:	000186a0 	.word	0x000186a0

08001a1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08a      	sub	sp, #40	@ 0x28
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a22:	f107 0320 	add.w	r3, r7, #32
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
 8001a2a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
 8001a38:	611a      	str	r2, [r3, #16]
 8001a3a:	615a      	str	r2, [r3, #20]
 8001a3c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a3e:	4b2d      	ldr	r3, [pc, #180]	@ (8001af4 <MX_TIM2_Init+0xd8>)
 8001a40:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a44:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8001a46:	4b2b      	ldr	r3, [pc, #172]	@ (8001af4 <MX_TIM2_Init+0xd8>)
 8001a48:	220a      	movs	r2, #10
 8001a4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4c:	4b29      	ldr	r3, [pc, #164]	@ (8001af4 <MX_TIM2_Init+0xd8>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001a52:	4b28      	ldr	r3, [pc, #160]	@ (8001af4 <MX_TIM2_Init+0xd8>)
 8001a54:	22ff      	movs	r2, #255	@ 0xff
 8001a56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a58:	4b26      	ldr	r3, [pc, #152]	@ (8001af4 <MX_TIM2_Init+0xd8>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a5e:	4b25      	ldr	r3, [pc, #148]	@ (8001af4 <MX_TIM2_Init+0xd8>)
 8001a60:	2280      	movs	r2, #128	@ 0x80
 8001a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a64:	4823      	ldr	r0, [pc, #140]	@ (8001af4 <MX_TIM2_Init+0xd8>)
 8001a66:	f003 fc8d 	bl	8005384 <HAL_TIM_PWM_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001a70:	f000 f946 	bl	8001d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a74:	2300      	movs	r3, #0
 8001a76:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a7c:	f107 0320 	add.w	r3, r7, #32
 8001a80:	4619      	mov	r1, r3
 8001a82:	481c      	ldr	r0, [pc, #112]	@ (8001af4 <MX_TIM2_Init+0xd8>)
 8001a84:	f004 f996 	bl	8005db4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001a8e:	f000 f937 	bl	8001d00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a92:	2360      	movs	r3, #96	@ 0x60
 8001a94:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4812      	ldr	r0, [pc, #72]	@ (8001af4 <MX_TIM2_Init+0xd8>)
 8001aaa:	f003 fe5b 	bl	8005764 <HAL_TIM_PWM_ConfigChannel>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001ab4:	f000 f924 	bl	8001d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	2204      	movs	r2, #4
 8001abc:	4619      	mov	r1, r3
 8001abe:	480d      	ldr	r0, [pc, #52]	@ (8001af4 <MX_TIM2_Init+0xd8>)
 8001ac0:	f003 fe50 	bl	8005764 <HAL_TIM_PWM_ConfigChannel>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001aca:	f000 f919 	bl	8001d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	2208      	movs	r2, #8
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4807      	ldr	r0, [pc, #28]	@ (8001af4 <MX_TIM2_Init+0xd8>)
 8001ad6:	f003 fe45 	bl	8005764 <HAL_TIM_PWM_ConfigChannel>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8001ae0:	f000 f90e 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ae4:	4803      	ldr	r0, [pc, #12]	@ (8001af4 <MX_TIM2_Init+0xd8>)
 8001ae6:	f000 fa1d 	bl	8001f24 <HAL_TIM_MspPostInit>

}
 8001aea:	bf00      	nop
 8001aec:	3728      	adds	r7, #40	@ 0x28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200002b8 	.word	0x200002b8

08001af8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	@ 0x28
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001afe:	f107 0320 	add.w	r3, r7, #32
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b08:	1d3b      	adds	r3, r7, #4
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	605a      	str	r2, [r3, #4]
 8001b10:	609a      	str	r2, [r3, #8]
 8001b12:	60da      	str	r2, [r3, #12]
 8001b14:	611a      	str	r2, [r3, #16]
 8001b16:	615a      	str	r2, [r3, #20]
 8001b18:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b1a:	4b2c      	ldr	r3, [pc, #176]	@ (8001bcc <MX_TIM3_Init+0xd4>)
 8001b1c:	4a2c      	ldr	r2, [pc, #176]	@ (8001bd0 <MX_TIM3_Init+0xd8>)
 8001b1e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10;
 8001b20:	4b2a      	ldr	r3, [pc, #168]	@ (8001bcc <MX_TIM3_Init+0xd4>)
 8001b22:	220a      	movs	r2, #10
 8001b24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b26:	4b29      	ldr	r3, [pc, #164]	@ (8001bcc <MX_TIM3_Init+0xd4>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8001b2c:	4b27      	ldr	r3, [pc, #156]	@ (8001bcc <MX_TIM3_Init+0xd4>)
 8001b2e:	22ff      	movs	r2, #255	@ 0xff
 8001b30:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b32:	4b26      	ldr	r3, [pc, #152]	@ (8001bcc <MX_TIM3_Init+0xd4>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b38:	4b24      	ldr	r3, [pc, #144]	@ (8001bcc <MX_TIM3_Init+0xd4>)
 8001b3a:	2280      	movs	r2, #128	@ 0x80
 8001b3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b3e:	4823      	ldr	r0, [pc, #140]	@ (8001bcc <MX_TIM3_Init+0xd4>)
 8001b40:	f003 fc20 	bl	8005384 <HAL_TIM_PWM_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001b4a:	f000 f8d9 	bl	8001d00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b52:	2300      	movs	r3, #0
 8001b54:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b56:	f107 0320 	add.w	r3, r7, #32
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	481b      	ldr	r0, [pc, #108]	@ (8001bcc <MX_TIM3_Init+0xd4>)
 8001b5e:	f004 f929 	bl	8005db4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001b68:	f000 f8ca 	bl	8001d00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b6c:	2360      	movs	r3, #96	@ 0x60
 8001b6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b70:	2300      	movs	r3, #0
 8001b72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	2200      	movs	r2, #0
 8001b80:	4619      	mov	r1, r3
 8001b82:	4812      	ldr	r0, [pc, #72]	@ (8001bcc <MX_TIM3_Init+0xd4>)
 8001b84:	f003 fdee 	bl	8005764 <HAL_TIM_PWM_ConfigChannel>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001b8e:	f000 f8b7 	bl	8001d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b92:	1d3b      	adds	r3, r7, #4
 8001b94:	2204      	movs	r2, #4
 8001b96:	4619      	mov	r1, r3
 8001b98:	480c      	ldr	r0, [pc, #48]	@ (8001bcc <MX_TIM3_Init+0xd4>)
 8001b9a:	f003 fde3 	bl	8005764 <HAL_TIM_PWM_ConfigChannel>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001ba4:	f000 f8ac 	bl	8001d00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	2208      	movs	r2, #8
 8001bac:	4619      	mov	r1, r3
 8001bae:	4807      	ldr	r0, [pc, #28]	@ (8001bcc <MX_TIM3_Init+0xd4>)
 8001bb0:	f003 fdd8 	bl	8005764 <HAL_TIM_PWM_ConfigChannel>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8001bba:	f000 f8a1 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001bbe:	4803      	ldr	r0, [pc, #12]	@ (8001bcc <MX_TIM3_Init+0xd4>)
 8001bc0:	f000 f9b0 	bl	8001f24 <HAL_TIM_MspPostInit>

}
 8001bc4:	bf00      	nop
 8001bc6:	3728      	adds	r7, #40	@ 0x28
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000300 	.word	0x20000300
 8001bd0:	40000400 	.word	0x40000400

08001bd4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001c14 <MX_TIM11_Init+0x40>)
 8001bda:	4a0f      	ldr	r2, [pc, #60]	@ (8001c18 <MX_TIM11_Init+0x44>)
 8001bdc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001bde:	4b0d      	ldr	r3, [pc, #52]	@ (8001c14 <MX_TIM11_Init+0x40>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c14 <MX_TIM11_Init+0x40>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001bea:	4b0a      	ldr	r3, [pc, #40]	@ (8001c14 <MX_TIM11_Init+0x40>)
 8001bec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bf0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf2:	4b08      	ldr	r3, [pc, #32]	@ (8001c14 <MX_TIM11_Init+0x40>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	@ (8001c14 <MX_TIM11_Init+0x40>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001bfe:	4805      	ldr	r0, [pc, #20]	@ (8001c14 <MX_TIM11_Init+0x40>)
 8001c00:	f003 fb0e 	bl	8005220 <HAL_TIM_Base_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001c0a:	f000 f879 	bl	8001d00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000348 	.word	0x20000348
 8001c18:	40014800 	.word	0x40014800

08001c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08a      	sub	sp, #40	@ 0x28
 8001c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c22:	f107 0314 	add.w	r3, r7, #20
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
 8001c30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	4b27      	ldr	r3, [pc, #156]	@ (8001cd4 <MX_GPIO_Init+0xb8>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3a:	4a26      	ldr	r2, [pc, #152]	@ (8001cd4 <MX_GPIO_Init+0xb8>)
 8001c3c:	f043 0304 	orr.w	r3, r3, #4
 8001c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c42:	4b24      	ldr	r3, [pc, #144]	@ (8001cd4 <MX_GPIO_Init+0xb8>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60fb      	str	r3, [r7, #12]
 8001c52:	4b20      	ldr	r3, [pc, #128]	@ (8001cd4 <MX_GPIO_Init+0xb8>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c56:	4a1f      	ldr	r2, [pc, #124]	@ (8001cd4 <MX_GPIO_Init+0xb8>)
 8001c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd4 <MX_GPIO_Init+0xb8>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	4b19      	ldr	r3, [pc, #100]	@ (8001cd4 <MX_GPIO_Init+0xb8>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c72:	4a18      	ldr	r2, [pc, #96]	@ (8001cd4 <MX_GPIO_Init+0xb8>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7a:	4b16      	ldr	r3, [pc, #88]	@ (8001cd4 <MX_GPIO_Init+0xb8>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	60bb      	str	r3, [r7, #8]
 8001c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	4b12      	ldr	r3, [pc, #72]	@ (8001cd4 <MX_GPIO_Init+0xb8>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	4a11      	ldr	r2, [pc, #68]	@ (8001cd4 <MX_GPIO_Init+0xb8>)
 8001c90:	f043 0302 	orr.w	r3, r3, #2
 8001c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c96:	4b0f      	ldr	r3, [pc, #60]	@ (8001cd4 <MX_GPIO_Init+0xb8>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ca8:	480b      	ldr	r0, [pc, #44]	@ (8001cd8 <MX_GPIO_Init+0xbc>)
 8001caa:	f000 fd77 	bl	800279c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001cae:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4804      	ldr	r0, [pc, #16]	@ (8001cd8 <MX_GPIO_Init+0xbc>)
 8001cc8:	f000 fbe4 	bl	8002494 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ccc:	bf00      	nop
 8001cce:	3728      	adds	r7, #40	@ 0x28
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40020800 	.word	0x40020800

08001cdc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a04      	ldr	r2, [pc, #16]	@ (8001cfc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d101      	bne.n	8001cf2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cee:	f000 faab 	bl	8002248 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40010000 	.word	0x40010000

08001d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d04:	b672      	cpsid	i
}
 8001d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d08:	bf00      	nop
 8001d0a:	e7fd      	b.n	8001d08 <Error_Handler+0x8>

08001d0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	607b      	str	r3, [r7, #4]
 8001d16:	4b10      	ldr	r3, [pc, #64]	@ (8001d58 <HAL_MspInit+0x4c>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1a:	4a0f      	ldr	r2, [pc, #60]	@ (8001d58 <HAL_MspInit+0x4c>)
 8001d1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d22:	4b0d      	ldr	r3, [pc, #52]	@ (8001d58 <HAL_MspInit+0x4c>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d2a:	607b      	str	r3, [r7, #4]
 8001d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	603b      	str	r3, [r7, #0]
 8001d32:	4b09      	ldr	r3, [pc, #36]	@ (8001d58 <HAL_MspInit+0x4c>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	4a08      	ldr	r2, [pc, #32]	@ (8001d58 <HAL_MspInit+0x4c>)
 8001d38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d3e:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <HAL_MspInit+0x4c>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d46:	603b      	str	r3, [r7, #0]
 8001d48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40023800 	.word	0x40023800

08001d5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08c      	sub	sp, #48	@ 0x30
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d64:	f107 031c 	add.w	r3, r7, #28
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	605a      	str	r2, [r3, #4]
 8001d6e:	609a      	str	r2, [r3, #8]
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a3a      	ldr	r2, [pc, #232]	@ (8001e64 <HAL_I2C_MspInit+0x108>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d12c      	bne.n	8001dd8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61bb      	str	r3, [r7, #24]
 8001d82:	4b39      	ldr	r3, [pc, #228]	@ (8001e68 <HAL_I2C_MspInit+0x10c>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	4a38      	ldr	r2, [pc, #224]	@ (8001e68 <HAL_I2C_MspInit+0x10c>)
 8001d88:	f043 0302 	orr.w	r3, r3, #2
 8001d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d8e:	4b36      	ldr	r3, [pc, #216]	@ (8001e68 <HAL_I2C_MspInit+0x10c>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	61bb      	str	r3, [r7, #24]
 8001d98:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d9a:	23c0      	movs	r3, #192	@ 0xc0
 8001d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d9e:	2312      	movs	r3, #18
 8001da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da6:	2303      	movs	r3, #3
 8001da8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001daa:	2304      	movs	r3, #4
 8001dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dae:	f107 031c 	add.w	r3, r7, #28
 8001db2:	4619      	mov	r1, r3
 8001db4:	482d      	ldr	r0, [pc, #180]	@ (8001e6c <HAL_I2C_MspInit+0x110>)
 8001db6:	f000 fb6d 	bl	8002494 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8001e68 <HAL_I2C_MspInit+0x10c>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc2:	4a29      	ldr	r2, [pc, #164]	@ (8001e68 <HAL_I2C_MspInit+0x10c>)
 8001dc4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001dc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dca:	4b27      	ldr	r3, [pc, #156]	@ (8001e68 <HAL_I2C_MspInit+0x10c>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001dd6:	e041      	b.n	8001e5c <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a24      	ldr	r2, [pc, #144]	@ (8001e70 <HAL_I2C_MspInit+0x114>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d13c      	bne.n	8001e5c <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	4b20      	ldr	r3, [pc, #128]	@ (8001e68 <HAL_I2C_MspInit+0x10c>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	4a1f      	ldr	r2, [pc, #124]	@ (8001e68 <HAL_I2C_MspInit+0x10c>)
 8001dec:	f043 0302 	orr.w	r3, r3, #2
 8001df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e68 <HAL_I2C_MspInit+0x10c>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001dfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e04:	2312      	movs	r3, #18
 8001e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e10:	2304      	movs	r3, #4
 8001e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e14:	f107 031c 	add.w	r3, r7, #28
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4814      	ldr	r0, [pc, #80]	@ (8001e6c <HAL_I2C_MspInit+0x110>)
 8001e1c:	f000 fb3a 	bl	8002494 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e20:	2308      	movs	r3, #8
 8001e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e24:	2312      	movs	r3, #18
 8001e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001e30:	2309      	movs	r3, #9
 8001e32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e34:	f107 031c 	add.w	r3, r7, #28
 8001e38:	4619      	mov	r1, r3
 8001e3a:	480c      	ldr	r0, [pc, #48]	@ (8001e6c <HAL_I2C_MspInit+0x110>)
 8001e3c:	f000 fb2a 	bl	8002494 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	4b08      	ldr	r3, [pc, #32]	@ (8001e68 <HAL_I2C_MspInit+0x10c>)
 8001e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e48:	4a07      	ldr	r2, [pc, #28]	@ (8001e68 <HAL_I2C_MspInit+0x10c>)
 8001e4a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e50:	4b05      	ldr	r3, [pc, #20]	@ (8001e68 <HAL_I2C_MspInit+0x10c>)
 8001e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
}
 8001e5c:	bf00      	nop
 8001e5e:	3730      	adds	r7, #48	@ 0x30
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40005400 	.word	0x40005400
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40020400 	.word	0x40020400
 8001e70:	40005800 	.word	0x40005800

08001e74 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e84:	d10e      	bne.n	8001ea4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	4b13      	ldr	r3, [pc, #76]	@ (8001ed8 <HAL_TIM_PWM_MspInit+0x64>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	4a12      	ldr	r2, [pc, #72]	@ (8001ed8 <HAL_TIM_PWM_MspInit+0x64>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e96:	4b10      	ldr	r3, [pc, #64]	@ (8001ed8 <HAL_TIM_PWM_MspInit+0x64>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	60fb      	str	r3, [r7, #12]
 8001ea0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ea2:	e012      	b.n	8001eca <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a0c      	ldr	r2, [pc, #48]	@ (8001edc <HAL_TIM_PWM_MspInit+0x68>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d10d      	bne.n	8001eca <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001eae:	2300      	movs	r3, #0
 8001eb0:	60bb      	str	r3, [r7, #8]
 8001eb2:	4b09      	ldr	r3, [pc, #36]	@ (8001ed8 <HAL_TIM_PWM_MspInit+0x64>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb6:	4a08      	ldr	r2, [pc, #32]	@ (8001ed8 <HAL_TIM_PWM_MspInit+0x64>)
 8001eb8:	f043 0302 	orr.w	r3, r3, #2
 8001ebc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ebe:	4b06      	ldr	r3, [pc, #24]	@ (8001ed8 <HAL_TIM_PWM_MspInit+0x64>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
}
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40023800 	.word	0x40023800
 8001edc:	40000400 	.word	0x40000400

08001ee0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a0b      	ldr	r2, [pc, #44]	@ (8001f1c <HAL_TIM_Base_MspInit+0x3c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d10d      	bne.n	8001f0e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f20 <HAL_TIM_Base_MspInit+0x40>)
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efa:	4a09      	ldr	r2, [pc, #36]	@ (8001f20 <HAL_TIM_Base_MspInit+0x40>)
 8001efc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f02:	4b07      	ldr	r3, [pc, #28]	@ (8001f20 <HAL_TIM_Base_MspInit+0x40>)
 8001f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM11_MspInit 1 */

  }

}
 8001f0e:	bf00      	nop
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40014800 	.word	0x40014800
 8001f20:	40023800 	.word	0x40023800

08001f24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	@ 0x28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f44:	d11e      	bne.n	8001f84 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	4b31      	ldr	r3, [pc, #196]	@ (8002010 <HAL_TIM_MspPostInit+0xec>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	4a30      	ldr	r2, [pc, #192]	@ (8002010 <HAL_TIM_MspPostInit+0xec>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f56:	4b2e      	ldr	r3, [pc, #184]	@ (8002010 <HAL_TIM_MspPostInit+0xec>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001f62:	2307      	movs	r3, #7
 8001f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f72:	2301      	movs	r3, #1
 8001f74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f76:	f107 0314 	add.w	r3, r7, #20
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	4825      	ldr	r0, [pc, #148]	@ (8002014 <HAL_TIM_MspPostInit+0xf0>)
 8001f7e:	f000 fa89 	bl	8002494 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f82:	e040      	b.n	8002006 <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a23      	ldr	r2, [pc, #140]	@ (8002018 <HAL_TIM_MspPostInit+0xf4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d13b      	bne.n	8002006 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	4b1f      	ldr	r3, [pc, #124]	@ (8002010 <HAL_TIM_MspPostInit+0xec>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f96:	4a1e      	ldr	r2, [pc, #120]	@ (8002010 <HAL_TIM_MspPostInit+0xec>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f9e:	4b1c      	ldr	r3, [pc, #112]	@ (8002010 <HAL_TIM_MspPostInit+0xec>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	4b18      	ldr	r3, [pc, #96]	@ (8002010 <HAL_TIM_MspPostInit+0xec>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	4a17      	ldr	r2, [pc, #92]	@ (8002010 <HAL_TIM_MspPostInit+0xec>)
 8001fb4:	f043 0302 	orr.w	r3, r3, #2
 8001fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fba:	4b15      	ldr	r3, [pc, #84]	@ (8002010 <HAL_TIM_MspPostInit+0xec>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fc6:	23c0      	movs	r3, #192	@ 0xc0
 8001fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	4619      	mov	r1, r3
 8001fe0:	480c      	ldr	r0, [pc, #48]	@ (8002014 <HAL_TIM_MspPostInit+0xf0>)
 8001fe2:	f000 fa57 	bl	8002494 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fea:	2302      	movs	r3, #2
 8001fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffa:	f107 0314 	add.w	r3, r7, #20
 8001ffe:	4619      	mov	r1, r3
 8002000:	4806      	ldr	r0, [pc, #24]	@ (800201c <HAL_TIM_MspPostInit+0xf8>)
 8002002:	f000 fa47 	bl	8002494 <HAL_GPIO_Init>
}
 8002006:	bf00      	nop
 8002008:	3728      	adds	r7, #40	@ 0x28
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800
 8002014:	40020000 	.word	0x40020000
 8002018:	40000400 	.word	0x40000400
 800201c:	40020400 	.word	0x40020400

08002020 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08c      	sub	sp, #48	@ 0x30
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002030:	2300      	movs	r3, #0
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	4b2e      	ldr	r3, [pc, #184]	@ (80020f0 <HAL_InitTick+0xd0>)
 8002036:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002038:	4a2d      	ldr	r2, [pc, #180]	@ (80020f0 <HAL_InitTick+0xd0>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002040:	4b2b      	ldr	r3, [pc, #172]	@ (80020f0 <HAL_InitTick+0xd0>)
 8002042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002044:	f003 0301 	and.w	r3, r3, #1
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800204c:	f107 020c 	add.w	r2, r7, #12
 8002050:	f107 0310 	add.w	r3, r7, #16
 8002054:	4611      	mov	r1, r2
 8002056:	4618      	mov	r0, r3
 8002058:	f003 f8b0 	bl	80051bc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800205c:	f003 f89a 	bl	8005194 <HAL_RCC_GetPCLK2Freq>
 8002060:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002064:	4a23      	ldr	r2, [pc, #140]	@ (80020f4 <HAL_InitTick+0xd4>)
 8002066:	fba2 2303 	umull	r2, r3, r2, r3
 800206a:	0c9b      	lsrs	r3, r3, #18
 800206c:	3b01      	subs	r3, #1
 800206e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002070:	4b21      	ldr	r3, [pc, #132]	@ (80020f8 <HAL_InitTick+0xd8>)
 8002072:	4a22      	ldr	r2, [pc, #136]	@ (80020fc <HAL_InitTick+0xdc>)
 8002074:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002076:	4b20      	ldr	r3, [pc, #128]	@ (80020f8 <HAL_InitTick+0xd8>)
 8002078:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800207c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800207e:	4a1e      	ldr	r2, [pc, #120]	@ (80020f8 <HAL_InitTick+0xd8>)
 8002080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002082:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002084:	4b1c      	ldr	r3, [pc, #112]	@ (80020f8 <HAL_InitTick+0xd8>)
 8002086:	2200      	movs	r2, #0
 8002088:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800208a:	4b1b      	ldr	r3, [pc, #108]	@ (80020f8 <HAL_InitTick+0xd8>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002090:	4b19      	ldr	r3, [pc, #100]	@ (80020f8 <HAL_InitTick+0xd8>)
 8002092:	2200      	movs	r2, #0
 8002094:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002096:	4818      	ldr	r0, [pc, #96]	@ (80020f8 <HAL_InitTick+0xd8>)
 8002098:	f003 f8c2 	bl	8005220 <HAL_TIM_Base_Init>
 800209c:	4603      	mov	r3, r0
 800209e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80020a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d11b      	bne.n	80020e2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80020aa:	4813      	ldr	r0, [pc, #76]	@ (80020f8 <HAL_InitTick+0xd8>)
 80020ac:	f003 f908 	bl	80052c0 <HAL_TIM_Base_Start_IT>
 80020b0:	4603      	mov	r3, r0
 80020b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80020b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d111      	bne.n	80020e2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80020be:	2019      	movs	r0, #25
 80020c0:	f000 f9da 	bl	8002478 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b0f      	cmp	r3, #15
 80020c8:	d808      	bhi.n	80020dc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80020ca:	2200      	movs	r2, #0
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	2019      	movs	r0, #25
 80020d0:	f000 f9b6 	bl	8002440 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002100 <HAL_InitTick+0xe0>)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	e002      	b.n	80020e2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80020e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3730      	adds	r7, #48	@ 0x30
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40023800 	.word	0x40023800
 80020f4:	431bde83 	.word	0x431bde83
 80020f8:	2000039c 	.word	0x2000039c
 80020fc:	40010000 	.word	0x40010000
 8002100:	20000088 	.word	0x20000088

08002104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002108:	bf00      	nop
 800210a:	e7fd      	b.n	8002108 <NMI_Handler+0x4>

0800210c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002110:	bf00      	nop
 8002112:	e7fd      	b.n	8002110 <HardFault_Handler+0x4>

08002114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002118:	bf00      	nop
 800211a:	e7fd      	b.n	8002118 <MemManage_Handler+0x4>

0800211c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002120:	bf00      	nop
 8002122:	e7fd      	b.n	8002120 <BusFault_Handler+0x4>

08002124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002128:	bf00      	nop
 800212a:	e7fd      	b.n	8002128 <UsageFault_Handler+0x4>

0800212c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800213a:	b480      	push	{r7}
 800213c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr

08002156 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002168:	4802      	ldr	r0, [pc, #8]	@ (8002174 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800216a:	f003 fa0b 	bl	8005584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	2000039c 	.word	0x2000039c

08002178 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800217c:	4802      	ldr	r0, [pc, #8]	@ (8002188 <OTG_FS_IRQHandler+0x10>)
 800217e:	f001 fab7 	bl	80036f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	200018c8 	.word	0x200018c8

0800218c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002190:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <SystemInit+0x20>)
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002196:	4a05      	ldr	r2, [pc, #20]	@ (80021ac <SystemInit+0x20>)
 8002198:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800219c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80021b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021b4:	f7ff ffea 	bl	800218c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021b8:	480c      	ldr	r0, [pc, #48]	@ (80021ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021ba:	490d      	ldr	r1, [pc, #52]	@ (80021f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021bc:	4a0d      	ldr	r2, [pc, #52]	@ (80021f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021c0:	e002      	b.n	80021c8 <LoopCopyDataInit>

080021c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021c6:	3304      	adds	r3, #4

080021c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021cc:	d3f9      	bcc.n	80021c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ce:	4a0a      	ldr	r2, [pc, #40]	@ (80021f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021d0:	4c0a      	ldr	r4, [pc, #40]	@ (80021fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80021d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021d4:	e001      	b.n	80021da <LoopFillZerobss>

080021d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021d8:	3204      	adds	r2, #4

080021da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021dc:	d3fb      	bcc.n	80021d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021de:	f007 fe3d 	bl	8009e5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021e2:	f7ff fb03 	bl	80017ec <main>
  bx  lr    
 80021e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80021e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021f0:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 80021f4:	0800a1b0 	.word	0x0800a1b0
  ldr r2, =_sbss
 80021f8:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 80021fc:	20002104 	.word	0x20002104

08002200 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002200:	e7fe      	b.n	8002200 <ADC_IRQHandler>
	...

08002204 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002208:	4b0e      	ldr	r3, [pc, #56]	@ (8002244 <HAL_Init+0x40>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a0d      	ldr	r2, [pc, #52]	@ (8002244 <HAL_Init+0x40>)
 800220e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002212:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002214:	4b0b      	ldr	r3, [pc, #44]	@ (8002244 <HAL_Init+0x40>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a0a      	ldr	r2, [pc, #40]	@ (8002244 <HAL_Init+0x40>)
 800221a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800221e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002220:	4b08      	ldr	r3, [pc, #32]	@ (8002244 <HAL_Init+0x40>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a07      	ldr	r2, [pc, #28]	@ (8002244 <HAL_Init+0x40>)
 8002226:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800222a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800222c:	2003      	movs	r0, #3
 800222e:	f000 f8fc 	bl	800242a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002232:	200f      	movs	r0, #15
 8002234:	f7ff fef4 	bl	8002020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002238:	f7ff fd68 	bl	8001d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40023c00 	.word	0x40023c00

08002248 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800224c:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <HAL_IncTick+0x20>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	461a      	mov	r2, r3
 8002252:	4b06      	ldr	r3, [pc, #24]	@ (800226c <HAL_IncTick+0x24>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4413      	add	r3, r2
 8002258:	4a04      	ldr	r2, [pc, #16]	@ (800226c <HAL_IncTick+0x24>)
 800225a:	6013      	str	r3, [r2, #0]
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	2000008c 	.word	0x2000008c
 800226c:	200003e4 	.word	0x200003e4

08002270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return uwTick;
 8002274:	4b03      	ldr	r3, [pc, #12]	@ (8002284 <HAL_GetTick+0x14>)
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	200003e4 	.word	0x200003e4

08002288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002290:	f7ff ffee 	bl	8002270 <HAL_GetTick>
 8002294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a0:	d005      	beq.n	80022ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022a2:	4b0a      	ldr	r3, [pc, #40]	@ (80022cc <HAL_Delay+0x44>)
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	4413      	add	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022ae:	bf00      	nop
 80022b0:	f7ff ffde 	bl	8002270 <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d8f7      	bhi.n	80022b0 <HAL_Delay+0x28>
  {
  }
}
 80022c0:	bf00      	nop
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	2000008c 	.word	0x2000008c

080022d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002314 <__NVIC_SetPriorityGrouping+0x44>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022ec:	4013      	ands	r3, r2
 80022ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002302:	4a04      	ldr	r2, [pc, #16]	@ (8002314 <__NVIC_SetPriorityGrouping+0x44>)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	60d3      	str	r3, [r2, #12]
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800231c:	4b04      	ldr	r3, [pc, #16]	@ (8002330 <__NVIC_GetPriorityGrouping+0x18>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	0a1b      	lsrs	r3, r3, #8
 8002322:	f003 0307 	and.w	r3, r3, #7
}
 8002326:	4618      	mov	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	2b00      	cmp	r3, #0
 8002344:	db0b      	blt.n	800235e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	f003 021f 	and.w	r2, r3, #31
 800234c:	4907      	ldr	r1, [pc, #28]	@ (800236c <__NVIC_EnableIRQ+0x38>)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	095b      	lsrs	r3, r3, #5
 8002354:	2001      	movs	r0, #1
 8002356:	fa00 f202 	lsl.w	r2, r0, r2
 800235a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	e000e100 	.word	0xe000e100

08002370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	6039      	str	r1, [r7, #0]
 800237a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002380:	2b00      	cmp	r3, #0
 8002382:	db0a      	blt.n	800239a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	b2da      	uxtb	r2, r3
 8002388:	490c      	ldr	r1, [pc, #48]	@ (80023bc <__NVIC_SetPriority+0x4c>)
 800238a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238e:	0112      	lsls	r2, r2, #4
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	440b      	add	r3, r1
 8002394:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002398:	e00a      	b.n	80023b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4908      	ldr	r1, [pc, #32]	@ (80023c0 <__NVIC_SetPriority+0x50>)
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	3b04      	subs	r3, #4
 80023a8:	0112      	lsls	r2, r2, #4
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	440b      	add	r3, r1
 80023ae:	761a      	strb	r2, [r3, #24]
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000e100 	.word	0xe000e100
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b089      	sub	sp, #36	@ 0x24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f1c3 0307 	rsb	r3, r3, #7
 80023de:	2b04      	cmp	r3, #4
 80023e0:	bf28      	it	cs
 80023e2:	2304      	movcs	r3, #4
 80023e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3304      	adds	r3, #4
 80023ea:	2b06      	cmp	r3, #6
 80023ec:	d902      	bls.n	80023f4 <NVIC_EncodePriority+0x30>
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3b03      	subs	r3, #3
 80023f2:	e000      	b.n	80023f6 <NVIC_EncodePriority+0x32>
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f8:	f04f 32ff 	mov.w	r2, #4294967295
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43da      	mvns	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	401a      	ands	r2, r3
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800240c:	f04f 31ff 	mov.w	r1, #4294967295
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	fa01 f303 	lsl.w	r3, r1, r3
 8002416:	43d9      	mvns	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	4313      	orrs	r3, r2
         );
}
 800241e:	4618      	mov	r0, r3
 8002420:	3724      	adds	r7, #36	@ 0x24
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f7ff ff4c 	bl	80022d0 <__NVIC_SetPriorityGrouping>
}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800244e:	2300      	movs	r3, #0
 8002450:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002452:	f7ff ff61 	bl	8002318 <__NVIC_GetPriorityGrouping>
 8002456:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	68b9      	ldr	r1, [r7, #8]
 800245c:	6978      	ldr	r0, [r7, #20]
 800245e:	f7ff ffb1 	bl	80023c4 <NVIC_EncodePriority>
 8002462:	4602      	mov	r2, r0
 8002464:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002468:	4611      	mov	r1, r2
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff ff80 	bl	8002370 <__NVIC_SetPriority>
}
 8002470:	bf00      	nop
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff ff54 	bl	8002334 <__NVIC_EnableIRQ>
}
 800248c:	bf00      	nop
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002494:	b480      	push	{r7}
 8002496:	b089      	sub	sp, #36	@ 0x24
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024aa:	2300      	movs	r3, #0
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	e159      	b.n	8002764 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024b0:	2201      	movs	r2, #1
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4013      	ands	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024c4:	693a      	ldr	r2, [r7, #16]
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	f040 8148 	bne.w	800275e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d005      	beq.n	80024e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d130      	bne.n	8002548 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	2203      	movs	r2, #3
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800251c:	2201      	movs	r2, #1
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	091b      	lsrs	r3, r3, #4
 8002532:	f003 0201 	and.w	r2, r3, #1
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	2b03      	cmp	r3, #3
 8002552:	d017      	beq.n	8002584 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	2203      	movs	r2, #3
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 0303 	and.w	r3, r3, #3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d123      	bne.n	80025d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	08da      	lsrs	r2, r3, #3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3208      	adds	r2, #8
 8002598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800259c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	f003 0307 	and.w	r3, r3, #7
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	220f      	movs	r2, #15
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 0307 	and.w	r3, r3, #7
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	08da      	lsrs	r2, r3, #3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	3208      	adds	r2, #8
 80025d2:	69b9      	ldr	r1, [r7, #24]
 80025d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	2203      	movs	r2, #3
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 0203 	and.w	r2, r3, #3
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 80a2 	beq.w	800275e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	4b57      	ldr	r3, [pc, #348]	@ (800277c <HAL_GPIO_Init+0x2e8>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002622:	4a56      	ldr	r2, [pc, #344]	@ (800277c <HAL_GPIO_Init+0x2e8>)
 8002624:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002628:	6453      	str	r3, [r2, #68]	@ 0x44
 800262a:	4b54      	ldr	r3, [pc, #336]	@ (800277c <HAL_GPIO_Init+0x2e8>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002636:	4a52      	ldr	r2, [pc, #328]	@ (8002780 <HAL_GPIO_Init+0x2ec>)
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	089b      	lsrs	r3, r3, #2
 800263c:	3302      	adds	r3, #2
 800263e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002642:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	220f      	movs	r2, #15
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a49      	ldr	r2, [pc, #292]	@ (8002784 <HAL_GPIO_Init+0x2f0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d019      	beq.n	8002696 <HAL_GPIO_Init+0x202>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a48      	ldr	r2, [pc, #288]	@ (8002788 <HAL_GPIO_Init+0x2f4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d013      	beq.n	8002692 <HAL_GPIO_Init+0x1fe>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a47      	ldr	r2, [pc, #284]	@ (800278c <HAL_GPIO_Init+0x2f8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00d      	beq.n	800268e <HAL_GPIO_Init+0x1fa>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a46      	ldr	r2, [pc, #280]	@ (8002790 <HAL_GPIO_Init+0x2fc>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d007      	beq.n	800268a <HAL_GPIO_Init+0x1f6>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a45      	ldr	r2, [pc, #276]	@ (8002794 <HAL_GPIO_Init+0x300>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d101      	bne.n	8002686 <HAL_GPIO_Init+0x1f2>
 8002682:	2304      	movs	r3, #4
 8002684:	e008      	b.n	8002698 <HAL_GPIO_Init+0x204>
 8002686:	2307      	movs	r3, #7
 8002688:	e006      	b.n	8002698 <HAL_GPIO_Init+0x204>
 800268a:	2303      	movs	r3, #3
 800268c:	e004      	b.n	8002698 <HAL_GPIO_Init+0x204>
 800268e:	2302      	movs	r3, #2
 8002690:	e002      	b.n	8002698 <HAL_GPIO_Init+0x204>
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <HAL_GPIO_Init+0x204>
 8002696:	2300      	movs	r3, #0
 8002698:	69fa      	ldr	r2, [r7, #28]
 800269a:	f002 0203 	and.w	r2, r2, #3
 800269e:	0092      	lsls	r2, r2, #2
 80026a0:	4093      	lsls	r3, r2
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026a8:	4935      	ldr	r1, [pc, #212]	@ (8002780 <HAL_GPIO_Init+0x2ec>)
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	089b      	lsrs	r3, r3, #2
 80026ae:	3302      	adds	r3, #2
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026b6:	4b38      	ldr	r3, [pc, #224]	@ (8002798 <HAL_GPIO_Init+0x304>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	43db      	mvns	r3, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026da:	4a2f      	ldr	r2, [pc, #188]	@ (8002798 <HAL_GPIO_Init+0x304>)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002798 <HAL_GPIO_Init+0x304>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002704:	4a24      	ldr	r2, [pc, #144]	@ (8002798 <HAL_GPIO_Init+0x304>)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800270a:	4b23      	ldr	r3, [pc, #140]	@ (8002798 <HAL_GPIO_Init+0x304>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800272e:	4a1a      	ldr	r2, [pc, #104]	@ (8002798 <HAL_GPIO_Init+0x304>)
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002734:	4b18      	ldr	r3, [pc, #96]	@ (8002798 <HAL_GPIO_Init+0x304>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002758:	4a0f      	ldr	r2, [pc, #60]	@ (8002798 <HAL_GPIO_Init+0x304>)
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3301      	adds	r3, #1
 8002762:	61fb      	str	r3, [r7, #28]
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	2b0f      	cmp	r3, #15
 8002768:	f67f aea2 	bls.w	80024b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800276c:	bf00      	nop
 800276e:	bf00      	nop
 8002770:	3724      	adds	r7, #36	@ 0x24
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40023800 	.word	0x40023800
 8002780:	40013800 	.word	0x40013800
 8002784:	40020000 	.word	0x40020000
 8002788:	40020400 	.word	0x40020400
 800278c:	40020800 	.word	0x40020800
 8002790:	40020c00 	.word	0x40020c00
 8002794:	40021000 	.word	0x40021000
 8002798:	40013c00 	.word	0x40013c00

0800279c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	807b      	strh	r3, [r7, #2]
 80027a8:	4613      	mov	r3, r2
 80027aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027ac:	787b      	ldrb	r3, [r7, #1]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027b2:	887a      	ldrh	r2, [r7, #2]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027b8:	e003      	b.n	80027c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ba:	887b      	ldrh	r3, [r7, #2]
 80027bc:	041a      	lsls	r2, r3, #16
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	619a      	str	r2, [r3, #24]
}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
	...

080027d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e12b      	b.n	8002a3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d106      	bne.n	80027fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff fab0 	bl	8001d5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2224      	movs	r2, #36	@ 0x24
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 0201 	bic.w	r2, r2, #1
 8002812:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002822:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002832:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002834:	f002 fc9a 	bl	800516c <HAL_RCC_GetPCLK1Freq>
 8002838:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	4a81      	ldr	r2, [pc, #516]	@ (8002a44 <HAL_I2C_Init+0x274>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d807      	bhi.n	8002854 <HAL_I2C_Init+0x84>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4a80      	ldr	r2, [pc, #512]	@ (8002a48 <HAL_I2C_Init+0x278>)
 8002848:	4293      	cmp	r3, r2
 800284a:	bf94      	ite	ls
 800284c:	2301      	movls	r3, #1
 800284e:	2300      	movhi	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	e006      	b.n	8002862 <HAL_I2C_Init+0x92>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4a7d      	ldr	r2, [pc, #500]	@ (8002a4c <HAL_I2C_Init+0x27c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	bf94      	ite	ls
 800285c:	2301      	movls	r3, #1
 800285e:	2300      	movhi	r3, #0
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e0e7      	b.n	8002a3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	4a78      	ldr	r2, [pc, #480]	@ (8002a50 <HAL_I2C_Init+0x280>)
 800286e:	fba2 2303 	umull	r2, r3, r2, r3
 8002872:	0c9b      	lsrs	r3, r3, #18
 8002874:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	430a      	orrs	r2, r1
 8002888:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	4a6a      	ldr	r2, [pc, #424]	@ (8002a44 <HAL_I2C_Init+0x274>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d802      	bhi.n	80028a4 <HAL_I2C_Init+0xd4>
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	3301      	adds	r3, #1
 80028a2:	e009      	b.n	80028b8 <HAL_I2C_Init+0xe8>
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80028aa:	fb02 f303 	mul.w	r3, r2, r3
 80028ae:	4a69      	ldr	r2, [pc, #420]	@ (8002a54 <HAL_I2C_Init+0x284>)
 80028b0:	fba2 2303 	umull	r2, r3, r2, r3
 80028b4:	099b      	lsrs	r3, r3, #6
 80028b6:	3301      	adds	r3, #1
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	430b      	orrs	r3, r1
 80028be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	69db      	ldr	r3, [r3, #28]
 80028c6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80028ca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	495c      	ldr	r1, [pc, #368]	@ (8002a44 <HAL_I2C_Init+0x274>)
 80028d4:	428b      	cmp	r3, r1
 80028d6:	d819      	bhi.n	800290c <HAL_I2C_Init+0x13c>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1e59      	subs	r1, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80028e6:	1c59      	adds	r1, r3, #1
 80028e8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80028ec:	400b      	ands	r3, r1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00a      	beq.n	8002908 <HAL_I2C_Init+0x138>
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	1e59      	subs	r1, r3, #1
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002900:	3301      	adds	r3, #1
 8002902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002906:	e051      	b.n	80029ac <HAL_I2C_Init+0x1dc>
 8002908:	2304      	movs	r3, #4
 800290a:	e04f      	b.n	80029ac <HAL_I2C_Init+0x1dc>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d111      	bne.n	8002938 <HAL_I2C_Init+0x168>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	1e58      	subs	r0, r3, #1
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6859      	ldr	r1, [r3, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	440b      	add	r3, r1
 8002922:	fbb0 f3f3 	udiv	r3, r0, r3
 8002926:	3301      	adds	r3, #1
 8002928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800292c:	2b00      	cmp	r3, #0
 800292e:	bf0c      	ite	eq
 8002930:	2301      	moveq	r3, #1
 8002932:	2300      	movne	r3, #0
 8002934:	b2db      	uxtb	r3, r3
 8002936:	e012      	b.n	800295e <HAL_I2C_Init+0x18e>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	1e58      	subs	r0, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6859      	ldr	r1, [r3, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	0099      	lsls	r1, r3, #2
 8002948:	440b      	add	r3, r1
 800294a:	fbb0 f3f3 	udiv	r3, r0, r3
 800294e:	3301      	adds	r3, #1
 8002950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002954:	2b00      	cmp	r3, #0
 8002956:	bf0c      	ite	eq
 8002958:	2301      	moveq	r3, #1
 800295a:	2300      	movne	r3, #0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <HAL_I2C_Init+0x196>
 8002962:	2301      	movs	r3, #1
 8002964:	e022      	b.n	80029ac <HAL_I2C_Init+0x1dc>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10e      	bne.n	800298c <HAL_I2C_Init+0x1bc>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	1e58      	subs	r0, r3, #1
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6859      	ldr	r1, [r3, #4]
 8002976:	460b      	mov	r3, r1
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	440b      	add	r3, r1
 800297c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002980:	3301      	adds	r3, #1
 8002982:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002986:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800298a:	e00f      	b.n	80029ac <HAL_I2C_Init+0x1dc>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	1e58      	subs	r0, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6859      	ldr	r1, [r3, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	0099      	lsls	r1, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	fbb0 f3f3 	udiv	r3, r0, r3
 80029a2:	3301      	adds	r3, #1
 80029a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	6809      	ldr	r1, [r1, #0]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	69da      	ldr	r2, [r3, #28]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	430a      	orrs	r2, r1
 80029ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80029da:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6911      	ldr	r1, [r2, #16]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	68d2      	ldr	r2, [r2, #12]
 80029e6:	4311      	orrs	r1, r2
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	6812      	ldr	r2, [r2, #0]
 80029ec:	430b      	orrs	r3, r1
 80029ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68db      	ldr	r3, [r3, #12]
 80029f6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	695a      	ldr	r2, [r3, #20]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2220      	movs	r2, #32
 8002a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	000186a0 	.word	0x000186a0
 8002a48:	001e847f 	.word	0x001e847f
 8002a4c:	003d08ff 	.word	0x003d08ff
 8002a50:	431bde83 	.word	0x431bde83
 8002a54:	10624dd3 	.word	0x10624dd3

08002a58 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08c      	sub	sp, #48	@ 0x30
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	4608      	mov	r0, r1
 8002a62:	4611      	mov	r1, r2
 8002a64:	461a      	mov	r2, r3
 8002a66:	4603      	mov	r3, r0
 8002a68:	817b      	strh	r3, [r7, #10]
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	813b      	strh	r3, [r7, #8]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a72:	f7ff fbfd 	bl	8002270 <HAL_GetTick>
 8002a76:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b20      	cmp	r3, #32
 8002a82:	f040 8214 	bne.w	8002eae <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a88:	9300      	str	r3, [sp, #0]
 8002a8a:	2319      	movs	r3, #25
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	497b      	ldr	r1, [pc, #492]	@ (8002c7c <HAL_I2C_Mem_Read+0x224>)
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f000 fafb 	bl	800308c <I2C_WaitOnFlagUntilTimeout>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d001      	beq.n	8002aa0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e207      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_I2C_Mem_Read+0x56>
 8002aaa:	2302      	movs	r3, #2
 8002aac:	e200      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x458>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d007      	beq.n	8002ad4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0201 	orr.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ae2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2222      	movs	r2, #34	@ 0x22
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2240      	movs	r2, #64	@ 0x40
 8002af0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2200      	movs	r2, #0
 8002af8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002afe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002b04:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4a5b      	ldr	r2, [pc, #364]	@ (8002c80 <HAL_I2C_Mem_Read+0x228>)
 8002b14:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b16:	88f8      	ldrh	r0, [r7, #6]
 8002b18:	893a      	ldrh	r2, [r7, #8]
 8002b1a:	8979      	ldrh	r1, [r7, #10]
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1e:	9301      	str	r3, [sp, #4]
 8002b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	4603      	mov	r3, r0
 8002b26:	68f8      	ldr	r0, [r7, #12]
 8002b28:	f000 f9c8 	bl	8002ebc <I2C_RequestMemoryRead>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e1bc      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d113      	bne.n	8002b66 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b3e:	2300      	movs	r3, #0
 8002b40:	623b      	str	r3, [r7, #32]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	623b      	str	r3, [r7, #32]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	623b      	str	r3, [r7, #32]
 8002b52:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	e190      	b.n	8002e88 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d11b      	bne.n	8002ba6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	61fb      	str	r3, [r7, #28]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	61fb      	str	r3, [r7, #28]
 8002b92:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	e170      	b.n	8002e88 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d11b      	bne.n	8002be6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bbc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bcc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61bb      	str	r3, [r7, #24]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	695b      	ldr	r3, [r3, #20]
 8002bd8:	61bb      	str	r3, [r7, #24]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	61bb      	str	r3, [r7, #24]
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	e150      	b.n	8002e88 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002be6:	2300      	movs	r3, #0
 8002be8:	617b      	str	r3, [r7, #20]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	617b      	str	r3, [r7, #20]
 8002bfa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002bfc:	e144      	b.n	8002e88 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	f200 80f1 	bhi.w	8002dea <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d123      	bne.n	8002c58 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c12:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002c14:	68f8      	ldr	r0, [r7, #12]
 8002c16:	f000 fb9b 	bl	8003350 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d001      	beq.n	8002c24 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e145      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691a      	ldr	r2, [r3, #16]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c36:	1c5a      	adds	r2, r3, #1
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c56:	e117      	b.n	8002e88 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d14e      	bne.n	8002cfe <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c62:	9300      	str	r3, [sp, #0]
 8002c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c66:	2200      	movs	r2, #0
 8002c68:	4906      	ldr	r1, [pc, #24]	@ (8002c84 <HAL_I2C_Mem_Read+0x22c>)
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 fa0e 	bl	800308c <I2C_WaitOnFlagUntilTimeout>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d008      	beq.n	8002c88 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e11a      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x458>
 8002c7a:	bf00      	nop
 8002c7c:	00100002 	.word	0x00100002
 8002c80:	ffff0000 	.word	0xffff0000
 8002c84:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691a      	ldr	r2, [r3, #16]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb4:	3b01      	subs	r3, #1
 8002cb6:	b29a      	uxth	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002cfc:	e0c4      	b.n	8002e88 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d04:	2200      	movs	r2, #0
 8002d06:	496c      	ldr	r1, [pc, #432]	@ (8002eb8 <HAL_I2C_Mem_Read+0x460>)
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 f9bf 	bl	800308c <I2C_WaitOnFlagUntilTimeout>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0cb      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5c:	9300      	str	r3, [sp, #0]
 8002d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d60:	2200      	movs	r2, #0
 8002d62:	4955      	ldr	r1, [pc, #340]	@ (8002eb8 <HAL_I2C_Mem_Read+0x460>)
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f991 	bl	800308c <I2C_WaitOnFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e09d      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	691a      	ldr	r2, [r3, #16]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d8e:	b2d2      	uxtb	r2, r2
 8002d90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d96:	1c5a      	adds	r2, r3, #1
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	3b01      	subs	r3, #1
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	691a      	ldr	r2, [r3, #16]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc8:	1c5a      	adds	r2, r3, #1
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b29a      	uxth	r2, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002de8:	e04e      	b.n	8002e88 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dec:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 faae 	bl	8003350 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e058      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	691a      	ldr	r2, [r3, #16]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	f003 0304 	and.w	r3, r3, #4
 8002e3a:	2b04      	cmp	r3, #4
 8002e3c:	d124      	bne.n	8002e88 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e42:	2b03      	cmp	r3, #3
 8002e44:	d107      	bne.n	8002e56 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e54:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f47f aeb6 	bne.w	8002bfe <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2220      	movs	r2, #32
 8002e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	e000      	b.n	8002eb0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002eae:	2302      	movs	r3, #2
  }
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3728      	adds	r7, #40	@ 0x28
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	00010004 	.word	0x00010004

08002ebc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b088      	sub	sp, #32
 8002ec0:	af02      	add	r7, sp, #8
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	4608      	mov	r0, r1
 8002ec6:	4611      	mov	r1, r2
 8002ec8:	461a      	mov	r2, r3
 8002eca:	4603      	mov	r3, r0
 8002ecc:	817b      	strh	r3, [r7, #10]
 8002ece:	460b      	mov	r3, r1
 8002ed0:	813b      	strh	r3, [r7, #8]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002ee4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ef4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f000 f8c2 	bl	800308c <I2C_WaitOnFlagUntilTimeout>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00d      	beq.n	8002f2a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f1c:	d103      	bne.n	8002f26 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f24:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e0aa      	b.n	8003080 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f2a:	897b      	ldrh	r3, [r7, #10]
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	461a      	mov	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3c:	6a3a      	ldr	r2, [r7, #32]
 8002f3e:	4952      	ldr	r1, [pc, #328]	@ (8003088 <I2C_RequestMemoryRead+0x1cc>)
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 f91d 	bl	8003180 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e097      	b.n	8003080 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f68:	6a39      	ldr	r1, [r7, #32]
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 f9a8 	bl	80032c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00d      	beq.n	8002f92 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	d107      	bne.n	8002f8e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e076      	b.n	8003080 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f92:	88fb      	ldrh	r3, [r7, #6]
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d105      	bne.n	8002fa4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f98:	893b      	ldrh	r3, [r7, #8]
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	611a      	str	r2, [r3, #16]
 8002fa2:	e021      	b.n	8002fe8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002fa4:	893b      	ldrh	r3, [r7, #8]
 8002fa6:	0a1b      	lsrs	r3, r3, #8
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fb4:	6a39      	ldr	r1, [r7, #32]
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 f982 	bl	80032c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00d      	beq.n	8002fde <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d107      	bne.n	8002fda <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e050      	b.n	8003080 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fde:	893b      	ldrh	r3, [r7, #8]
 8002fe0:	b2da      	uxtb	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fea:	6a39      	ldr	r1, [r7, #32]
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 f967 	bl	80032c0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d00d      	beq.n	8003014 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffc:	2b04      	cmp	r3, #4
 8002ffe:	d107      	bne.n	8003010 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800300e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e035      	b.n	8003080 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003022:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	6a3b      	ldr	r3, [r7, #32]
 800302a:	2200      	movs	r2, #0
 800302c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003030:	68f8      	ldr	r0, [r7, #12]
 8003032:	f000 f82b 	bl	800308c <I2C_WaitOnFlagUntilTimeout>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00d      	beq.n	8003058 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003046:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800304a:	d103      	bne.n	8003054 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003052:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e013      	b.n	8003080 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003058:	897b      	ldrh	r3, [r7, #10]
 800305a:	b2db      	uxtb	r3, r3
 800305c:	f043 0301 	orr.w	r3, r3, #1
 8003060:	b2da      	uxtb	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306a:	6a3a      	ldr	r2, [r7, #32]
 800306c:	4906      	ldr	r1, [pc, #24]	@ (8003088 <I2C_RequestMemoryRead+0x1cc>)
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 f886 	bl	8003180 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e000      	b.n	8003080 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	00010002 	.word	0x00010002

0800308c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	603b      	str	r3, [r7, #0]
 8003098:	4613      	mov	r3, r2
 800309a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800309c:	e048      	b.n	8003130 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a4:	d044      	beq.n	8003130 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a6:	f7ff f8e3 	bl	8002270 <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	683a      	ldr	r2, [r7, #0]
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d302      	bcc.n	80030bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d139      	bne.n	8003130 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	0c1b      	lsrs	r3, r3, #16
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d10d      	bne.n	80030e2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	43da      	mvns	r2, r3
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	4013      	ands	r3, r2
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	bf0c      	ite	eq
 80030d8:	2301      	moveq	r3, #1
 80030da:	2300      	movne	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	461a      	mov	r2, r3
 80030e0:	e00c      	b.n	80030fc <I2C_WaitOnFlagUntilTimeout+0x70>
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	43da      	mvns	r2, r3
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	4013      	ands	r3, r2
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	bf0c      	ite	eq
 80030f4:	2301      	moveq	r3, #1
 80030f6:	2300      	movne	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	461a      	mov	r2, r3
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d116      	bne.n	8003130 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2220      	movs	r2, #32
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311c:	f043 0220 	orr.w	r2, r3, #32
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e023      	b.n	8003178 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	0c1b      	lsrs	r3, r3, #16
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b01      	cmp	r3, #1
 8003138:	d10d      	bne.n	8003156 <I2C_WaitOnFlagUntilTimeout+0xca>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	43da      	mvns	r2, r3
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	4013      	ands	r3, r2
 8003146:	b29b      	uxth	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	bf0c      	ite	eq
 800314c:	2301      	moveq	r3, #1
 800314e:	2300      	movne	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	461a      	mov	r2, r3
 8003154:	e00c      	b.n	8003170 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	43da      	mvns	r2, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	4013      	ands	r3, r2
 8003162:	b29b      	uxth	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	bf0c      	ite	eq
 8003168:	2301      	moveq	r3, #1
 800316a:	2300      	movne	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	461a      	mov	r2, r3
 8003170:	79fb      	ldrb	r3, [r7, #7]
 8003172:	429a      	cmp	r2, r3
 8003174:	d093      	beq.n	800309e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
 800318c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800318e:	e071      	b.n	8003274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800319a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800319e:	d123      	bne.n	80031e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031ae:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d4:	f043 0204 	orr.w	r2, r3, #4
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e067      	b.n	80032b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ee:	d041      	beq.n	8003274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f0:	f7ff f83e 	bl	8002270 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d302      	bcc.n	8003206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d136      	bne.n	8003274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	0c1b      	lsrs	r3, r3, #16
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b01      	cmp	r3, #1
 800320e:	d10c      	bne.n	800322a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	43da      	mvns	r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	4013      	ands	r3, r2
 800321c:	b29b      	uxth	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	bf14      	ite	ne
 8003222:	2301      	movne	r3, #1
 8003224:	2300      	moveq	r3, #0
 8003226:	b2db      	uxtb	r3, r3
 8003228:	e00b      	b.n	8003242 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	699b      	ldr	r3, [r3, #24]
 8003230:	43da      	mvns	r2, r3
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	4013      	ands	r3, r2
 8003236:	b29b      	uxth	r3, r3
 8003238:	2b00      	cmp	r3, #0
 800323a:	bf14      	ite	ne
 800323c:	2301      	movne	r3, #1
 800323e:	2300      	moveq	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d016      	beq.n	8003274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2220      	movs	r2, #32
 8003250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003260:	f043 0220 	orr.w	r2, r3, #32
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e021      	b.n	80032b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	0c1b      	lsrs	r3, r3, #16
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b01      	cmp	r3, #1
 800327c:	d10c      	bne.n	8003298 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	43da      	mvns	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	4013      	ands	r3, r2
 800328a:	b29b      	uxth	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	bf14      	ite	ne
 8003290:	2301      	movne	r3, #1
 8003292:	2300      	moveq	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	e00b      	b.n	80032b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	43da      	mvns	r2, r3
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	4013      	ands	r3, r2
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	bf14      	ite	ne
 80032aa:	2301      	movne	r3, #1
 80032ac:	2300      	moveq	r3, #0
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f47f af6d 	bne.w	8003190 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032cc:	e034      	b.n	8003338 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032ce:	68f8      	ldr	r0, [r7, #12]
 80032d0:	f000 f89b 	bl	800340a <I2C_IsAcknowledgeFailed>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e034      	b.n	8003348 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e4:	d028      	beq.n	8003338 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e6:	f7fe ffc3 	bl	8002270 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d302      	bcc.n	80032fc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d11d      	bne.n	8003338 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003306:	2b80      	cmp	r3, #128	@ 0x80
 8003308:	d016      	beq.n	8003338 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003324:	f043 0220 	orr.w	r2, r3, #32
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e007      	b.n	8003348 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003342:	2b80      	cmp	r3, #128	@ 0x80
 8003344:	d1c3      	bne.n	80032ce <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3710      	adds	r7, #16
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800335c:	e049      	b.n	80033f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	695b      	ldr	r3, [r3, #20]
 8003364:	f003 0310 	and.w	r3, r3, #16
 8003368:	2b10      	cmp	r3, #16
 800336a:	d119      	bne.n	80033a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f06f 0210 	mvn.w	r2, #16
 8003374:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2220      	movs	r2, #32
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e030      	b.n	8003402 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033a0:	f7fe ff66 	bl	8002270 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d302      	bcc.n	80033b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d11d      	bne.n	80033f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c0:	2b40      	cmp	r3, #64	@ 0x40
 80033c2:	d016      	beq.n	80033f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2220      	movs	r2, #32
 80033ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033de:	f043 0220 	orr.w	r2, r3, #32
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e007      	b.n	8003402 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033fc:	2b40      	cmp	r3, #64	@ 0x40
 80033fe:	d1ae      	bne.n	800335e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800341c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003420:	d11b      	bne.n	800345a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800342a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2220      	movs	r2, #32
 8003436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003446:	f043 0204 	orr.w	r2, r3, #4
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e000      	b.n	800345c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af02      	add	r7, sp, #8
 800346e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e101      	b.n	800367e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d106      	bne.n	800349a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f006 f9c9 	bl	800982c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2203      	movs	r2, #3
 800349e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034a8:	d102      	bne.n	80034b0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f002 fe16 	bl	80060e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	7c1a      	ldrb	r2, [r3, #16]
 80034c2:	f88d 2000 	strb.w	r2, [sp]
 80034c6:	3304      	adds	r3, #4
 80034c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034ca:	f002 fcf5 	bl	8005eb8 <USB_CoreInit>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d005      	beq.n	80034e0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e0ce      	b.n	800367e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2100      	movs	r1, #0
 80034e6:	4618      	mov	r0, r3
 80034e8:	f002 fe0e 	bl	8006108 <USB_SetCurrentMode>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d005      	beq.n	80034fe <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2202      	movs	r2, #2
 80034f6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e0bf      	b.n	800367e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034fe:	2300      	movs	r3, #0
 8003500:	73fb      	strb	r3, [r7, #15]
 8003502:	e04a      	b.n	800359a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003504:	7bfa      	ldrb	r2, [r7, #15]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	4413      	add	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	3315      	adds	r3, #21
 8003514:	2201      	movs	r2, #1
 8003516:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003518:	7bfa      	ldrb	r2, [r7, #15]
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	4613      	mov	r3, r2
 800351e:	00db      	lsls	r3, r3, #3
 8003520:	4413      	add	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	3314      	adds	r3, #20
 8003528:	7bfa      	ldrb	r2, [r7, #15]
 800352a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800352c:	7bfa      	ldrb	r2, [r7, #15]
 800352e:	7bfb      	ldrb	r3, [r7, #15]
 8003530:	b298      	uxth	r0, r3
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	332e      	adds	r3, #46	@ 0x2e
 8003540:	4602      	mov	r2, r0
 8003542:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003544:	7bfa      	ldrb	r2, [r7, #15]
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	3318      	adds	r3, #24
 8003554:	2200      	movs	r2, #0
 8003556:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003558:	7bfa      	ldrb	r2, [r7, #15]
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	331c      	adds	r3, #28
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800356c:	7bfa      	ldrb	r2, [r7, #15]
 800356e:	6879      	ldr	r1, [r7, #4]
 8003570:	4613      	mov	r3, r2
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	4413      	add	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	440b      	add	r3, r1
 800357a:	3320      	adds	r3, #32
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003580:	7bfa      	ldrb	r2, [r7, #15]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	3324      	adds	r3, #36	@ 0x24
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003594:	7bfb      	ldrb	r3, [r7, #15]
 8003596:	3301      	adds	r3, #1
 8003598:	73fb      	strb	r3, [r7, #15]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	791b      	ldrb	r3, [r3, #4]
 800359e:	7bfa      	ldrb	r2, [r7, #15]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d3af      	bcc.n	8003504 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035a4:	2300      	movs	r3, #0
 80035a6:	73fb      	strb	r3, [r7, #15]
 80035a8:	e044      	b.n	8003634 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80035aa:	7bfa      	ldrb	r2, [r7, #15]
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	00db      	lsls	r3, r3, #3
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80035bc:	2200      	movs	r2, #0
 80035be:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80035c0:	7bfa      	ldrb	r2, [r7, #15]
 80035c2:	6879      	ldr	r1, [r7, #4]
 80035c4:	4613      	mov	r3, r2
 80035c6:	00db      	lsls	r3, r3, #3
 80035c8:	4413      	add	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	440b      	add	r3, r1
 80035ce:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80035d2:	7bfa      	ldrb	r2, [r7, #15]
 80035d4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035d6:	7bfa      	ldrb	r2, [r7, #15]
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	00db      	lsls	r3, r3, #3
 80035de:	4413      	add	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80035e8:	2200      	movs	r2, #0
 80035ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035ec:	7bfa      	ldrb	r2, [r7, #15]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003602:	7bfa      	ldrb	r2, [r7, #15]
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	00db      	lsls	r3, r3, #3
 800360a:	4413      	add	r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003618:	7bfa      	ldrb	r2, [r7, #15]
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	4613      	mov	r3, r2
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4413      	add	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	3301      	adds	r3, #1
 8003632:	73fb      	strb	r3, [r7, #15]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	791b      	ldrb	r3, [r3, #4]
 8003638:	7bfa      	ldrb	r2, [r7, #15]
 800363a:	429a      	cmp	r2, r3
 800363c:	d3b5      	bcc.n	80035aa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	7c1a      	ldrb	r2, [r3, #16]
 8003646:	f88d 2000 	strb.w	r2, [sp]
 800364a:	3304      	adds	r3, #4
 800364c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800364e:	f002 fda7 	bl	80061a0 <USB_DevInit>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d005      	beq.n	8003664 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e00c      	b.n	800367e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f003 fdf1 	bl	800725e <USB_DevDisconnect>

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b084      	sub	sp, #16
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_PCD_Start+0x1c>
 800369e:	2302      	movs	r3, #2
 80036a0:	e022      	b.n	80036e8 <HAL_PCD_Start+0x62>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d009      	beq.n	80036ca <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d105      	bne.n	80036ca <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036c2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f002 fcf8 	bl	80060c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f003 fd9f 	bl	800721c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80036f0:	b590      	push	{r4, r7, lr}
 80036f2:	b08d      	sub	sp, #52	@ 0x34
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f003 fe5d 	bl	80073c6 <USB_GetMode>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	f040 848c 	bne.w	800402c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4618      	mov	r0, r3
 800371a:	f003 fdc1 	bl	80072a0 <USB_ReadInterrupts>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 8482 	beq.w	800402a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	0a1b      	lsrs	r3, r3, #8
 8003730:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4618      	mov	r0, r3
 8003740:	f003 fdae 	bl	80072a0 <USB_ReadInterrupts>
 8003744:	4603      	mov	r3, r0
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b02      	cmp	r3, #2
 800374c:	d107      	bne.n	800375e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	695a      	ldr	r2, [r3, #20]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f002 0202 	and.w	r2, r2, #2
 800375c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f003 fd9c 	bl	80072a0 <USB_ReadInterrupts>
 8003768:	4603      	mov	r3, r0
 800376a:	f003 0310 	and.w	r3, r3, #16
 800376e:	2b10      	cmp	r3, #16
 8003770:	d161      	bne.n	8003836 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	699a      	ldr	r2, [r3, #24]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0210 	bic.w	r2, r2, #16
 8003780:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	f003 020f 	and.w	r2, r3, #15
 800378e:	4613      	mov	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	4413      	add	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	4413      	add	r3, r2
 800379e:	3304      	adds	r3, #4
 80037a0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	0c5b      	lsrs	r3, r3, #17
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d124      	bne.n	80037f8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d035      	beq.n	8003826 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	091b      	lsrs	r3, r3, #4
 80037c2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80037c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	461a      	mov	r2, r3
 80037cc:	6a38      	ldr	r0, [r7, #32]
 80037ce:	f003 fbd3 	bl	8006f78 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	091b      	lsrs	r3, r3, #4
 80037da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037de:	441a      	add	r2, r3
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	695a      	ldr	r2, [r3, #20]
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	091b      	lsrs	r3, r3, #4
 80037ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037f0:	441a      	add	r2, r3
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	615a      	str	r2, [r3, #20]
 80037f6:	e016      	b.n	8003826 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	0c5b      	lsrs	r3, r3, #17
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	2b06      	cmp	r3, #6
 8003802:	d110      	bne.n	8003826 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800380a:	2208      	movs	r2, #8
 800380c:	4619      	mov	r1, r3
 800380e:	6a38      	ldr	r0, [r7, #32]
 8003810:	f003 fbb2 	bl	8006f78 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	695a      	ldr	r2, [r3, #20]
 8003818:	69bb      	ldr	r3, [r7, #24]
 800381a:	091b      	lsrs	r3, r3, #4
 800381c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003820:	441a      	add	r2, r3
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	699a      	ldr	r2, [r3, #24]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 0210 	orr.w	r2, r2, #16
 8003834:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f003 fd30 	bl	80072a0 <USB_ReadInterrupts>
 8003840:	4603      	mov	r3, r0
 8003842:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003846:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800384a:	f040 80a7 	bne.w	800399c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f003 fd35 	bl	80072c6 <USB_ReadDevAllOutEpInterrupt>
 800385c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800385e:	e099      	b.n	8003994 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 808e 	beq.w	8003988 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	4611      	mov	r1, r2
 8003876:	4618      	mov	r0, r3
 8003878:	f003 fd59 	bl	800732e <USB_ReadDevOutEPInterrupt>
 800387c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00c      	beq.n	80038a2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388a:	015a      	lsls	r2, r3, #5
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	4413      	add	r3, r2
 8003890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003894:	461a      	mov	r2, r3
 8003896:	2301      	movs	r3, #1
 8003898:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800389a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 fea3 	bl	80045e8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	f003 0308 	and.w	r3, r3, #8
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00c      	beq.n	80038c6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80038ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038b8:	461a      	mov	r2, r3
 80038ba:	2308      	movs	r3, #8
 80038bc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80038be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f000 ff79 	bl	80047b8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	f003 0310 	and.w	r3, r3, #16
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80038d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d2:	015a      	lsls	r2, r3, #5
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	4413      	add	r3, r2
 80038d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038dc:	461a      	mov	r2, r3
 80038de:	2310      	movs	r3, #16
 80038e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d030      	beq.n	800394e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80038ec:	6a3b      	ldr	r3, [r7, #32]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038f4:	2b80      	cmp	r3, #128	@ 0x80
 80038f6:	d109      	bne.n	800390c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	69fa      	ldr	r2, [r7, #28]
 8003902:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003906:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800390a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800390c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800390e:	4613      	mov	r3, r2
 8003910:	00db      	lsls	r3, r3, #3
 8003912:	4413      	add	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	4413      	add	r3, r2
 800391e:	3304      	adds	r3, #4
 8003920:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	78db      	ldrb	r3, [r3, #3]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d108      	bne.n	800393c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2200      	movs	r2, #0
 800392e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003932:	b2db      	uxtb	r3, r3
 8003934:	4619      	mov	r1, r3
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f006 f874 	bl	8009a24 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800393c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393e:	015a      	lsls	r2, r3, #5
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	4413      	add	r3, r2
 8003944:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003948:	461a      	mov	r2, r3
 800394a:	2302      	movs	r3, #2
 800394c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	f003 0320 	and.w	r3, r3, #32
 8003954:	2b00      	cmp	r3, #0
 8003956:	d008      	beq.n	800396a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800395a:	015a      	lsls	r2, r3, #5
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	4413      	add	r3, r2
 8003960:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003964:	461a      	mov	r2, r3
 8003966:	2320      	movs	r3, #32
 8003968:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d009      	beq.n	8003988 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003980:	461a      	mov	r2, r3
 8003982:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003986:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800398a:	3301      	adds	r3, #1
 800398c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800398e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003990:	085b      	lsrs	r3, r3, #1
 8003992:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003996:	2b00      	cmp	r3, #0
 8003998:	f47f af62 	bne.w	8003860 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f003 fc7d 	bl	80072a0 <USB_ReadInterrupts>
 80039a6:	4603      	mov	r3, r0
 80039a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039b0:	f040 80db 	bne.w	8003b6a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f003 fc9e 	bl	80072fa <USB_ReadDevAllInEpInterrupt>
 80039be:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80039c4:	e0cd      	b.n	8003b62 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80039c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 80c2 	beq.w	8003b56 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	4611      	mov	r1, r2
 80039dc:	4618      	mov	r0, r3
 80039de:	f003 fcc4 	bl	800736a <USB_ReadDevInEPInterrupt>
 80039e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d057      	beq.n	8003a9e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f0:	f003 030f 	and.w	r3, r3, #15
 80039f4:	2201      	movs	r2, #1
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	43db      	mvns	r3, r3
 8003a08:	69f9      	ldr	r1, [r7, #28]
 8003a0a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003a0e:	4013      	ands	r3, r2
 8003a10:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a1e:	461a      	mov	r2, r3
 8003a20:	2301      	movs	r3, #1
 8003a22:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	799b      	ldrb	r3, [r3, #6]
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d132      	bne.n	8003a92 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a30:	4613      	mov	r3, r2
 8003a32:	00db      	lsls	r3, r3, #3
 8003a34:	4413      	add	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	3320      	adds	r3, #32
 8003a3c:	6819      	ldr	r1, [r3, #0]
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a42:	4613      	mov	r3, r2
 8003a44:	00db      	lsls	r3, r3, #3
 8003a46:	4413      	add	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	4403      	add	r3, r0
 8003a4c:	331c      	adds	r3, #28
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4419      	add	r1, r3
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a56:	4613      	mov	r3, r2
 8003a58:	00db      	lsls	r3, r3, #3
 8003a5a:	4413      	add	r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4403      	add	r3, r0
 8003a60:	3320      	adds	r3, #32
 8003a62:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d113      	bne.n	8003a92 <HAL_PCD_IRQHandler+0x3a2>
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a6e:	4613      	mov	r3, r2
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	4413      	add	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	440b      	add	r3, r1
 8003a78:	3324      	adds	r3, #36	@ 0x24
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d108      	bne.n	8003a92 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6818      	ldr	r0, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	f003 fccb 	bl	8007428 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	4619      	mov	r1, r3
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f005 ff48 	bl	800992e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	f003 0308 	and.w	r3, r3, #8
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d008      	beq.n	8003aba <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	2308      	movs	r3, #8
 8003ab8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	f003 0310 	and.w	r3, r3, #16
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d008      	beq.n	8003ad6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	2310      	movs	r3, #16
 8003ad4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d008      	beq.n	8003af2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae2:	015a      	lsls	r2, r3, #5
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aec:	461a      	mov	r2, r3
 8003aee:	2340      	movs	r3, #64	@ 0x40
 8003af0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d023      	beq.n	8003b44 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003afc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003afe:	6a38      	ldr	r0, [r7, #32]
 8003b00:	f002 fcb2 	bl	8006468 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b06:	4613      	mov	r3, r2
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	3310      	adds	r3, #16
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	4413      	add	r3, r2
 8003b14:	3304      	adds	r3, #4
 8003b16:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	78db      	ldrb	r3, [r3, #3]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d108      	bne.n	8003b32 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	2200      	movs	r2, #0
 8003b24:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f005 ff8b 	bl	8009a48 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b34:	015a      	lsls	r2, r3, #5
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b3e:	461a      	mov	r2, r3
 8003b40:	2302      	movs	r3, #2
 8003b42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 fcbd 	bl	80044d0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b58:	3301      	adds	r3, #1
 8003b5a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5e:	085b      	lsrs	r3, r3, #1
 8003b60:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	f47f af2e 	bne.w	80039c6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f003 fb96 	bl	80072a0 <USB_ReadInterrupts>
 8003b74:	4603      	mov	r3, r0
 8003b76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b7e:	d122      	bne.n	8003bc6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	69fa      	ldr	r2, [r7, #28]
 8003b8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b8e:	f023 0301 	bic.w	r3, r3, #1
 8003b92:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d108      	bne.n	8003bb0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 fea3 	bl	80048f4 <HAL_PCDEx_LPM_Callback>
 8003bae:	e002      	b.n	8003bb6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f005 ff29 	bl	8009a08 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	695a      	ldr	r2, [r3, #20]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003bc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f003 fb68 	bl	80072a0 <USB_ReadInterrupts>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003bd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003bda:	d112      	bne.n	8003c02 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d102      	bne.n	8003bf2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f005 fee5 	bl	80099bc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695a      	ldr	r2, [r3, #20]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003c00:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f003 fb4a 	bl	80072a0 <USB_ReadInterrupts>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c16:	f040 80b7 	bne.w	8003d88 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	69fa      	ldr	r2, [r7, #28]
 8003c24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c28:	f023 0301 	bic.w	r3, r3, #1
 8003c2c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2110      	movs	r1, #16
 8003c34:	4618      	mov	r0, r3
 8003c36:	f002 fc17 	bl	8006468 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c3e:	e046      	b.n	8003cce <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c42:	015a      	lsls	r2, r3, #5
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c52:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c64:	0151      	lsls	r1, r2, #5
 8003c66:	69fa      	ldr	r2, [r7, #28]
 8003c68:	440a      	add	r2, r1
 8003c6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c72:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c80:	461a      	mov	r2, r3
 8003c82:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c86:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c98:	0151      	lsls	r1, r2, #5
 8003c9a:	69fa      	ldr	r2, [r7, #28]
 8003c9c:	440a      	add	r2, r1
 8003c9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003ca2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ca6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003caa:	015a      	lsls	r2, r3, #5
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	4413      	add	r3, r2
 8003cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003cb8:	0151      	lsls	r1, r2, #5
 8003cba:	69fa      	ldr	r2, [r7, #28]
 8003cbc:	440a      	add	r2, r1
 8003cbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003cc2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003cc6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cca:	3301      	adds	r3, #1
 8003ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	791b      	ldrb	r3, [r3, #4]
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d3b2      	bcc.n	8003c40 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	69fa      	ldr	r2, [r7, #28]
 8003ce4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ce8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003cec:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	7bdb      	ldrb	r3, [r3, #15]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d016      	beq.n	8003d24 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d00:	69fa      	ldr	r2, [r7, #28]
 8003d02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d06:	f043 030b 	orr.w	r3, r3, #11
 8003d0a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d16:	69fa      	ldr	r2, [r7, #28]
 8003d18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d1c:	f043 030b 	orr.w	r3, r3, #11
 8003d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d22:	e015      	b.n	8003d50 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d2a:	695b      	ldr	r3, [r3, #20]
 8003d2c:	69fa      	ldr	r2, [r7, #28]
 8003d2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d32:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003d36:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003d3a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	69fa      	ldr	r2, [r7, #28]
 8003d46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d4a:	f043 030b 	orr.w	r3, r3, #11
 8003d4e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	69fa      	ldr	r2, [r7, #28]
 8003d5a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d5e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003d62:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6818      	ldr	r0, [r3, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d72:	461a      	mov	r2, r3
 8003d74:	f003 fb58 	bl	8007428 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695a      	ldr	r2, [r3, #20]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003d86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f003 fa87 	bl	80072a0 <USB_ReadInterrupts>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d9c:	d123      	bne.n	8003de6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f003 fb1d 	bl	80073e2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f002 fbd4 	bl	800655a <USB_GetDevSpeed>
 8003db2:	4603      	mov	r3, r0
 8003db4:	461a      	mov	r2, r3
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681c      	ldr	r4, [r3, #0]
 8003dbe:	f001 f9c9 	bl	8005154 <HAL_RCC_GetHCLKFreq>
 8003dc2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003dc8:	461a      	mov	r2, r3
 8003dca:	4620      	mov	r0, r4
 8003dcc:	f002 f8d8 	bl	8005f80 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f005 fdd4 	bl	800997e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695a      	ldr	r2, [r3, #20]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003de4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f003 fa58 	bl	80072a0 <USB_ReadInterrupts>
 8003df0:	4603      	mov	r3, r0
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d10a      	bne.n	8003e10 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f005 fdb1 	bl	8009962 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695a      	ldr	r2, [r3, #20]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f002 0208 	and.w	r2, r2, #8
 8003e0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4618      	mov	r0, r3
 8003e16:	f003 fa43 	bl	80072a0 <USB_ReadInterrupts>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e20:	2b80      	cmp	r3, #128	@ 0x80
 8003e22:	d123      	bne.n	8003e6c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003e24:	6a3b      	ldr	r3, [r7, #32]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e30:	2301      	movs	r3, #1
 8003e32:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e34:	e014      	b.n	8003e60 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	00db      	lsls	r3, r3, #3
 8003e3e:	4413      	add	r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d105      	bne.n	8003e5a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	4619      	mov	r1, r3
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 fb0a 	bl	800446e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	791b      	ldrb	r3, [r3, #4]
 8003e64:	461a      	mov	r2, r3
 8003e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d3e4      	bcc.n	8003e36 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f003 fa15 	bl	80072a0 <USB_ReadInterrupts>
 8003e76:	4603      	mov	r3, r0
 8003e78:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e7c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e80:	d13c      	bne.n	8003efc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e82:	2301      	movs	r3, #1
 8003e84:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e86:	e02b      	b.n	8003ee0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e98:	6879      	ldr	r1, [r7, #4]
 8003e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	4413      	add	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	3318      	adds	r3, #24
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d115      	bne.n	8003eda <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003eae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	da12      	bge.n	8003eda <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003eb4:	6879      	ldr	r1, [r7, #4]
 8003eb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eb8:	4613      	mov	r3, r2
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	3317      	adds	r3, #23
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 faca 	bl	800446e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003edc:	3301      	adds	r3, #1
 8003ede:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	791b      	ldrb	r3, [r3, #4]
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d3cd      	bcc.n	8003e88 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695a      	ldr	r2, [r3, #20]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003efa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f003 f9cd 	bl	80072a0 <USB_ReadInterrupts>
 8003f06:	4603      	mov	r3, r0
 8003f08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f0c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f10:	d156      	bne.n	8003fc0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f12:	2301      	movs	r3, #1
 8003f14:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f16:	e045      	b.n	8003fa4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1a:	015a      	lsls	r2, r3, #5
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	4413      	add	r3, r2
 8003f20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f28:	6879      	ldr	r1, [r7, #4]
 8003f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	00db      	lsls	r3, r3, #3
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d12e      	bne.n	8003f9e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f40:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	da2b      	bge.n	8003f9e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003f52:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d121      	bne.n	8003f9e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003f5a:	6879      	ldr	r1, [r7, #4]
 8003f5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f5e:	4613      	mov	r3, r2
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	4413      	add	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	440b      	add	r3, r1
 8003f68:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10a      	bne.n	8003f9e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	69fa      	ldr	r2, [r7, #28]
 8003f92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f9a:	6053      	str	r3, [r2, #4]
            break;
 8003f9c:	e008      	b.n	8003fb0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	791b      	ldrb	r3, [r3, #4]
 8003fa8:	461a      	mov	r2, r3
 8003faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d3b3      	bcc.n	8003f18 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695a      	ldr	r2, [r3, #20]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003fbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f003 f96b 	bl	80072a0 <USB_ReadInterrupts>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fd4:	d10a      	bne.n	8003fec <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f005 fd48 	bl	8009a6c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695a      	ldr	r2, [r3, #20]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003fea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f003 f955 	bl	80072a0 <USB_ReadInterrupts>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b04      	cmp	r3, #4
 8003ffe:	d115      	bne.n	800402c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	2b00      	cmp	r3, #0
 8004010:	d002      	beq.n	8004018 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f005 fd38 	bl	8009a88 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6859      	ldr	r1, [r3, #4]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	69ba      	ldr	r2, [r7, #24]
 8004024:	430a      	orrs	r2, r1
 8004026:	605a      	str	r2, [r3, #4]
 8004028:	e000      	b.n	800402c <HAL_PCD_IRQHandler+0x93c>
      return;
 800402a:	bf00      	nop
    }
  }
}
 800402c:	3734      	adds	r7, #52	@ 0x34
 800402e:	46bd      	mov	sp, r7
 8004030:	bd90      	pop	{r4, r7, pc}

08004032 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b082      	sub	sp, #8
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
 800403a:	460b      	mov	r3, r1
 800403c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004044:	2b01      	cmp	r3, #1
 8004046:	d101      	bne.n	800404c <HAL_PCD_SetAddress+0x1a>
 8004048:	2302      	movs	r3, #2
 800404a:	e012      	b.n	8004072 <HAL_PCD_SetAddress+0x40>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	78fa      	ldrb	r2, [r7, #3]
 8004058:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	78fa      	ldrb	r2, [r7, #3]
 8004060:	4611      	mov	r1, r2
 8004062:	4618      	mov	r0, r3
 8004064:	f003 f8b4 	bl	80071d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3708      	adds	r7, #8
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}

0800407a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800407a:	b580      	push	{r7, lr}
 800407c:	b084      	sub	sp, #16
 800407e:	af00      	add	r7, sp, #0
 8004080:	6078      	str	r0, [r7, #4]
 8004082:	4608      	mov	r0, r1
 8004084:	4611      	mov	r1, r2
 8004086:	461a      	mov	r2, r3
 8004088:	4603      	mov	r3, r0
 800408a:	70fb      	strb	r3, [r7, #3]
 800408c:	460b      	mov	r3, r1
 800408e:	803b      	strh	r3, [r7, #0]
 8004090:	4613      	mov	r3, r2
 8004092:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004094:	2300      	movs	r3, #0
 8004096:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004098:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800409c:	2b00      	cmp	r3, #0
 800409e:	da0f      	bge.n	80040c0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040a0:	78fb      	ldrb	r3, [r7, #3]
 80040a2:	f003 020f 	and.w	r2, r3, #15
 80040a6:	4613      	mov	r3, r2
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	4413      	add	r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	3310      	adds	r3, #16
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	4413      	add	r3, r2
 80040b4:	3304      	adds	r3, #4
 80040b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2201      	movs	r2, #1
 80040bc:	705a      	strb	r2, [r3, #1]
 80040be:	e00f      	b.n	80040e0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040c0:	78fb      	ldrb	r3, [r7, #3]
 80040c2:	f003 020f 	and.w	r2, r3, #15
 80040c6:	4613      	mov	r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	4413      	add	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	4413      	add	r3, r2
 80040d6:	3304      	adds	r3, #4
 80040d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	b2da      	uxtb	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80040ec:	883b      	ldrh	r3, [r7, #0]
 80040ee:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	78ba      	ldrb	r2, [r7, #2]
 80040fa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	785b      	ldrb	r3, [r3, #1]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d004      	beq.n	800410e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	461a      	mov	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800410e:	78bb      	ldrb	r3, [r7, #2]
 8004110:	2b02      	cmp	r3, #2
 8004112:	d102      	bne.n	800411a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <HAL_PCD_EP_Open+0xae>
 8004124:	2302      	movs	r3, #2
 8004126:	e00e      	b.n	8004146 <HAL_PCD_EP_Open+0xcc>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68f9      	ldr	r1, [r7, #12]
 8004136:	4618      	mov	r0, r3
 8004138:	f002 fa34 	bl	80065a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004144:	7afb      	ldrb	r3, [r7, #11]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800414e:	b580      	push	{r7, lr}
 8004150:	b084      	sub	sp, #16
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
 8004156:	460b      	mov	r3, r1
 8004158:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800415a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800415e:	2b00      	cmp	r3, #0
 8004160:	da0f      	bge.n	8004182 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004162:	78fb      	ldrb	r3, [r7, #3]
 8004164:	f003 020f 	and.w	r2, r3, #15
 8004168:	4613      	mov	r3, r2
 800416a:	00db      	lsls	r3, r3, #3
 800416c:	4413      	add	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	3310      	adds	r3, #16
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	4413      	add	r3, r2
 8004176:	3304      	adds	r3, #4
 8004178:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2201      	movs	r2, #1
 800417e:	705a      	strb	r2, [r3, #1]
 8004180:	e00f      	b.n	80041a2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004182:	78fb      	ldrb	r3, [r7, #3]
 8004184:	f003 020f 	and.w	r2, r3, #15
 8004188:	4613      	mov	r3, r2
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	4413      	add	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	4413      	add	r3, r2
 8004198:	3304      	adds	r3, #4
 800419a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80041a2:	78fb      	ldrb	r3, [r7, #3]
 80041a4:	f003 030f 	and.w	r3, r3, #15
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d101      	bne.n	80041bc <HAL_PCD_EP_Close+0x6e>
 80041b8:	2302      	movs	r3, #2
 80041ba:	e00e      	b.n	80041da <HAL_PCD_EP_Close+0x8c>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68f9      	ldr	r1, [r7, #12]
 80041ca:	4618      	mov	r0, r3
 80041cc:	f002 fa72 	bl	80066b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b086      	sub	sp, #24
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	60f8      	str	r0, [r7, #12]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	603b      	str	r3, [r7, #0]
 80041ee:	460b      	mov	r3, r1
 80041f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041f2:	7afb      	ldrb	r3, [r7, #11]
 80041f4:	f003 020f 	and.w	r2, r3, #15
 80041f8:	4613      	mov	r3, r2
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	4413      	add	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	4413      	add	r3, r2
 8004208:	3304      	adds	r3, #4
 800420a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	2200      	movs	r2, #0
 800421c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2200      	movs	r2, #0
 8004222:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004224:	7afb      	ldrb	r3, [r7, #11]
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	b2da      	uxtb	r2, r3
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	799b      	ldrb	r3, [r3, #6]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d102      	bne.n	800423e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	799b      	ldrb	r3, [r3, #6]
 8004246:	461a      	mov	r2, r3
 8004248:	6979      	ldr	r1, [r7, #20]
 800424a:	f002 fb0f 	bl	800686c <USB_EPStartXfer>

  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3718      	adds	r7, #24
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	460b      	mov	r3, r1
 8004262:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004264:	78fb      	ldrb	r3, [r7, #3]
 8004266:	f003 020f 	and.w	r2, r3, #15
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	4613      	mov	r3, r2
 800426e:	00db      	lsls	r3, r3, #3
 8004270:	4413      	add	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	440b      	add	r3, r1
 8004276:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800427a:	681b      	ldr	r3, [r3, #0]
}
 800427c:	4618      	mov	r0, r3
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	607a      	str	r2, [r7, #4]
 8004292:	603b      	str	r3, [r7, #0]
 8004294:	460b      	mov	r3, r1
 8004296:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004298:	7afb      	ldrb	r3, [r7, #11]
 800429a:	f003 020f 	and.w	r2, r3, #15
 800429e:	4613      	mov	r3, r2
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	4413      	add	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	3310      	adds	r3, #16
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4413      	add	r3, r2
 80042ac:	3304      	adds	r3, #4
 80042ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	687a      	ldr	r2, [r7, #4]
 80042b4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2200      	movs	r2, #0
 80042c0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2201      	movs	r2, #1
 80042c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042c8:	7afb      	ldrb	r3, [r7, #11]
 80042ca:	f003 030f 	and.w	r3, r3, #15
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	799b      	ldrb	r3, [r3, #6]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d102      	bne.n	80042e2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6818      	ldr	r0, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	799b      	ldrb	r3, [r3, #6]
 80042ea:	461a      	mov	r2, r3
 80042ec:	6979      	ldr	r1, [r7, #20]
 80042ee:	f002 fabd 	bl	800686c <USB_EPStartXfer>

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	460b      	mov	r3, r1
 8004306:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	7912      	ldrb	r2, [r2, #4]
 8004312:	4293      	cmp	r3, r2
 8004314:	d901      	bls.n	800431a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e04f      	b.n	80043ba <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800431a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800431e:	2b00      	cmp	r3, #0
 8004320:	da0f      	bge.n	8004342 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004322:	78fb      	ldrb	r3, [r7, #3]
 8004324:	f003 020f 	and.w	r2, r3, #15
 8004328:	4613      	mov	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	4413      	add	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	3310      	adds	r3, #16
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	4413      	add	r3, r2
 8004336:	3304      	adds	r3, #4
 8004338:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2201      	movs	r2, #1
 800433e:	705a      	strb	r2, [r3, #1]
 8004340:	e00d      	b.n	800435e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004342:	78fa      	ldrb	r2, [r7, #3]
 8004344:	4613      	mov	r3, r2
 8004346:	00db      	lsls	r3, r3, #3
 8004348:	4413      	add	r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	4413      	add	r3, r2
 8004354:	3304      	adds	r3, #4
 8004356:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2201      	movs	r2, #1
 8004362:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004364:	78fb      	ldrb	r3, [r7, #3]
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	b2da      	uxtb	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004376:	2b01      	cmp	r3, #1
 8004378:	d101      	bne.n	800437e <HAL_PCD_EP_SetStall+0x82>
 800437a:	2302      	movs	r3, #2
 800437c:	e01d      	b.n	80043ba <HAL_PCD_EP_SetStall+0xbe>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68f9      	ldr	r1, [r7, #12]
 800438c:	4618      	mov	r0, r3
 800438e:	f002 fe4b 	bl	8007028 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004392:	78fb      	ldrb	r3, [r7, #3]
 8004394:	f003 030f 	and.w	r3, r3, #15
 8004398:	2b00      	cmp	r3, #0
 800439a:	d109      	bne.n	80043b0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6818      	ldr	r0, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	7999      	ldrb	r1, [r3, #6]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80043aa:	461a      	mov	r2, r3
 80043ac:	f003 f83c 	bl	8007428 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}

080043c2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043c2:	b580      	push	{r7, lr}
 80043c4:	b084      	sub	sp, #16
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	460b      	mov	r3, r1
 80043cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80043ce:	78fb      	ldrb	r3, [r7, #3]
 80043d0:	f003 030f 	and.w	r3, r3, #15
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	7912      	ldrb	r2, [r2, #4]
 80043d8:	4293      	cmp	r3, r2
 80043da:	d901      	bls.n	80043e0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e042      	b.n	8004466 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	da0f      	bge.n	8004408 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043e8:	78fb      	ldrb	r3, [r7, #3]
 80043ea:	f003 020f 	and.w	r2, r3, #15
 80043ee:	4613      	mov	r3, r2
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	4413      	add	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	3310      	adds	r3, #16
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	4413      	add	r3, r2
 80043fc:	3304      	adds	r3, #4
 80043fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2201      	movs	r2, #1
 8004404:	705a      	strb	r2, [r3, #1]
 8004406:	e00f      	b.n	8004428 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004408:	78fb      	ldrb	r3, [r7, #3]
 800440a:	f003 020f 	and.w	r2, r3, #15
 800440e:	4613      	mov	r3, r2
 8004410:	00db      	lsls	r3, r3, #3
 8004412:	4413      	add	r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	4413      	add	r3, r2
 800441e:	3304      	adds	r3, #4
 8004420:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800442e:	78fb      	ldrb	r3, [r7, #3]
 8004430:	f003 030f 	and.w	r3, r3, #15
 8004434:	b2da      	uxtb	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004440:	2b01      	cmp	r3, #1
 8004442:	d101      	bne.n	8004448 <HAL_PCD_EP_ClrStall+0x86>
 8004444:	2302      	movs	r3, #2
 8004446:	e00e      	b.n	8004466 <HAL_PCD_EP_ClrStall+0xa4>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68f9      	ldr	r1, [r7, #12]
 8004456:	4618      	mov	r0, r3
 8004458:	f002 fe54 	bl	8007104 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3710      	adds	r7, #16
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b084      	sub	sp, #16
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	460b      	mov	r3, r1
 8004478:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800447a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800447e:	2b00      	cmp	r3, #0
 8004480:	da0c      	bge.n	800449c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004482:	78fb      	ldrb	r3, [r7, #3]
 8004484:	f003 020f 	and.w	r2, r3, #15
 8004488:	4613      	mov	r3, r2
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	4413      	add	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	3310      	adds	r3, #16
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	4413      	add	r3, r2
 8004496:	3304      	adds	r3, #4
 8004498:	60fb      	str	r3, [r7, #12]
 800449a:	e00c      	b.n	80044b6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800449c:	78fb      	ldrb	r3, [r7, #3]
 800449e:	f003 020f 	and.w	r2, r3, #15
 80044a2:	4613      	mov	r3, r2
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	4413      	add	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	4413      	add	r3, r2
 80044b2:	3304      	adds	r3, #4
 80044b4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68f9      	ldr	r1, [r7, #12]
 80044bc:	4618      	mov	r0, r3
 80044be:	f002 fc73 	bl	8006da8 <USB_EPStopXfer>
 80044c2:	4603      	mov	r3, r0
 80044c4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80044c6:	7afb      	ldrb	r3, [r7, #11]
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08a      	sub	sp, #40	@ 0x28
 80044d4:	af02      	add	r7, sp, #8
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	4613      	mov	r3, r2
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	4413      	add	r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	3310      	adds	r3, #16
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	4413      	add	r3, r2
 80044f4:	3304      	adds	r3, #4
 80044f6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	695a      	ldr	r2, [r3, #20]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	429a      	cmp	r2, r3
 8004502:	d901      	bls.n	8004508 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e06b      	b.n	80045e0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	691a      	ldr	r2, [r3, #16]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	69fa      	ldr	r2, [r7, #28]
 800451a:	429a      	cmp	r2, r3
 800451c:	d902      	bls.n	8004524 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	3303      	adds	r3, #3
 8004528:	089b      	lsrs	r3, r3, #2
 800452a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800452c:	e02a      	b.n	8004584 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	691a      	ldr	r2, [r3, #16]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	69fa      	ldr	r2, [r7, #28]
 8004540:	429a      	cmp	r2, r3
 8004542:	d902      	bls.n	800454a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	3303      	adds	r3, #3
 800454e:	089b      	lsrs	r3, r3, #2
 8004550:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	68d9      	ldr	r1, [r3, #12]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	b2da      	uxtb	r2, r3
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	4603      	mov	r3, r0
 8004566:	6978      	ldr	r0, [r7, #20]
 8004568:	f002 fcc8 	bl	8006efc <USB_WritePacket>

    ep->xfer_buff  += len;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	441a      	add	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	695a      	ldr	r2, [r3, #20]
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	441a      	add	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	429a      	cmp	r2, r3
 8004598:	d809      	bhi.n	80045ae <PCD_WriteEmptyTxFifo+0xde>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	695a      	ldr	r2, [r3, #20]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d203      	bcs.n	80045ae <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d1bf      	bne.n	800452e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	691a      	ldr	r2, [r3, #16]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	695b      	ldr	r3, [r3, #20]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d811      	bhi.n	80045de <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	f003 030f 	and.w	r3, r3, #15
 80045c0:	2201      	movs	r2, #1
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	43db      	mvns	r3, r3
 80045d4:	6939      	ldr	r1, [r7, #16]
 80045d6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80045da:	4013      	ands	r3, r2
 80045dc:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3720      	adds	r7, #32
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b088      	sub	sp, #32
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	333c      	adds	r3, #60	@ 0x3c
 8004600:	3304      	adds	r3, #4
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	799b      	ldrb	r3, [r3, #6]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d17b      	bne.n	8004716 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	f003 0308 	and.w	r3, r3, #8
 8004624:	2b00      	cmp	r3, #0
 8004626:	d015      	beq.n	8004654 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	4a61      	ldr	r2, [pc, #388]	@ (80047b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800462c:	4293      	cmp	r3, r2
 800462e:	f240 80b9 	bls.w	80047a4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 80b3 	beq.w	80047a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800464a:	461a      	mov	r2, r3
 800464c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004650:	6093      	str	r3, [r2, #8]
 8004652:	e0a7      	b.n	80047a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b00      	cmp	r3, #0
 800465c:	d009      	beq.n	8004672 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800466a:	461a      	mov	r2, r3
 800466c:	2320      	movs	r3, #32
 800466e:	6093      	str	r3, [r2, #8]
 8004670:	e098      	b.n	80047a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004678:	2b00      	cmp	r3, #0
 800467a:	f040 8093 	bne.w	80047a4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	4a4b      	ldr	r2, [pc, #300]	@ (80047b0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d90f      	bls.n	80046a6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00a      	beq.n	80046a6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	4413      	add	r3, r2
 8004698:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800469c:	461a      	mov	r2, r3
 800469e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046a2:	6093      	str	r3, [r2, #8]
 80046a4:	e07e      	b.n	80047a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	4613      	mov	r3, r2
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	4413      	add	r3, r2
 80046b8:	3304      	adds	r3, #4
 80046ba:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a1a      	ldr	r2, [r3, #32]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	0159      	lsls	r1, r3, #5
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	440b      	add	r3, r1
 80046c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046d2:	1ad2      	subs	r2, r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d114      	bne.n	8004708 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	691b      	ldr	r3, [r3, #16]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d109      	bne.n	80046fa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6818      	ldr	r0, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80046f0:	461a      	mov	r2, r3
 80046f2:	2101      	movs	r1, #1
 80046f4:	f002 fe98 	bl	8007428 <USB_EP0_OutStart>
 80046f8:	e006      	b.n	8004708 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	68da      	ldr	r2, [r3, #12]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	441a      	add	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	4619      	mov	r1, r3
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f005 f8f2 	bl	80098f8 <HAL_PCD_DataOutStageCallback>
 8004714:	e046      	b.n	80047a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	4a26      	ldr	r2, [pc, #152]	@ (80047b4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d124      	bne.n	8004768 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	4413      	add	r3, r2
 8004730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004734:	461a      	mov	r2, r3
 8004736:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800473a:	6093      	str	r3, [r2, #8]
 800473c:	e032      	b.n	80047a4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	f003 0320 	and.w	r3, r3, #32
 8004744:	2b00      	cmp	r3, #0
 8004746:	d008      	beq.n	800475a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004754:	461a      	mov	r2, r3
 8004756:	2320      	movs	r3, #32
 8004758:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	b2db      	uxtb	r3, r3
 800475e:	4619      	mov	r1, r3
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f005 f8c9 	bl	80098f8 <HAL_PCD_DataOutStageCallback>
 8004766:	e01d      	b.n	80047a4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d114      	bne.n	8004798 <PCD_EP_OutXfrComplete_int+0x1b0>
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	4613      	mov	r3, r2
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	4413      	add	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	440b      	add	r3, r1
 800477c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d108      	bne.n	8004798 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6818      	ldr	r0, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004790:	461a      	mov	r2, r3
 8004792:	2100      	movs	r1, #0
 8004794:	f002 fe48 	bl	8007428 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	b2db      	uxtb	r3, r3
 800479c:	4619      	mov	r1, r3
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f005 f8aa 	bl	80098f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3720      	adds	r7, #32
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	4f54300a 	.word	0x4f54300a
 80047b4:	4f54310a 	.word	0x4f54310a

080047b8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	333c      	adds	r3, #60	@ 0x3c
 80047d0:	3304      	adds	r3, #4
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	015a      	lsls	r2, r3, #5
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	4413      	add	r3, r2
 80047de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4a15      	ldr	r2, [pc, #84]	@ (8004840 <PCD_EP_OutSetupPacket_int+0x88>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d90e      	bls.n	800480c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d009      	beq.n	800480c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	015a      	lsls	r2, r3, #5
 80047fc:	693b      	ldr	r3, [r7, #16]
 80047fe:	4413      	add	r3, r2
 8004800:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004804:	461a      	mov	r2, r3
 8004806:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800480a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f005 f861 	bl	80098d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4a0a      	ldr	r2, [pc, #40]	@ (8004840 <PCD_EP_OutSetupPacket_int+0x88>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d90c      	bls.n	8004834 <PCD_EP_OutSetupPacket_int+0x7c>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	799b      	ldrb	r3, [r3, #6]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d108      	bne.n	8004834 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800482c:	461a      	mov	r2, r3
 800482e:	2101      	movs	r1, #1
 8004830:	f002 fdfa 	bl	8007428 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3718      	adds	r7, #24
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}
 800483e:	bf00      	nop
 8004840:	4f54300a 	.word	0x4f54300a

08004844 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	70fb      	strb	r3, [r7, #3]
 8004850:	4613      	mov	r3, r2
 8004852:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800485c:	78fb      	ldrb	r3, [r7, #3]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d107      	bne.n	8004872 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004862:	883b      	ldrh	r3, [r7, #0]
 8004864:	0419      	lsls	r1, r3, #16
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	430a      	orrs	r2, r1
 800486e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004870:	e028      	b.n	80048c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004878:	0c1b      	lsrs	r3, r3, #16
 800487a:	68ba      	ldr	r2, [r7, #8]
 800487c:	4413      	add	r3, r2
 800487e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004880:	2300      	movs	r3, #0
 8004882:	73fb      	strb	r3, [r7, #15]
 8004884:	e00d      	b.n	80048a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	7bfb      	ldrb	r3, [r7, #15]
 800488c:	3340      	adds	r3, #64	@ 0x40
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	0c1b      	lsrs	r3, r3, #16
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	4413      	add	r3, r2
 800489a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800489c:	7bfb      	ldrb	r3, [r7, #15]
 800489e:	3301      	adds	r3, #1
 80048a0:	73fb      	strb	r3, [r7, #15]
 80048a2:	7bfa      	ldrb	r2, [r7, #15]
 80048a4:	78fb      	ldrb	r3, [r7, #3]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d3ec      	bcc.n	8004886 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80048ac:	883b      	ldrh	r3, [r7, #0]
 80048ae:	0418      	lsls	r0, r3, #16
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6819      	ldr	r1, [r3, #0]
 80048b4:	78fb      	ldrb	r3, [r7, #3]
 80048b6:	3b01      	subs	r3, #1
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	4302      	orrs	r2, r0
 80048bc:	3340      	adds	r3, #64	@ 0x40
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	440b      	add	r3, r1
 80048c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3714      	adds	r7, #20
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80048d2:	b480      	push	{r7}
 80048d4:	b083      	sub	sp, #12
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	6078      	str	r0, [r7, #4]
 80048da:	460b      	mov	r3, r1
 80048dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	887a      	ldrh	r2, [r7, #2]
 80048e4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	460b      	mov	r3, r1
 80048fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e267      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d075      	beq.n	8004a16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800492a:	4b88      	ldr	r3, [pc, #544]	@ (8004b4c <HAL_RCC_OscConfig+0x240>)
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f003 030c 	and.w	r3, r3, #12
 8004932:	2b04      	cmp	r3, #4
 8004934:	d00c      	beq.n	8004950 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004936:	4b85      	ldr	r3, [pc, #532]	@ (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800493e:	2b08      	cmp	r3, #8
 8004940:	d112      	bne.n	8004968 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004942:	4b82      	ldr	r3, [pc, #520]	@ (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800494a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800494e:	d10b      	bne.n	8004968 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004950:	4b7e      	ldr	r3, [pc, #504]	@ (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d05b      	beq.n	8004a14 <HAL_RCC_OscConfig+0x108>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d157      	bne.n	8004a14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e242      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004970:	d106      	bne.n	8004980 <HAL_RCC_OscConfig+0x74>
 8004972:	4b76      	ldr	r3, [pc, #472]	@ (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a75      	ldr	r2, [pc, #468]	@ (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004978:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	e01d      	b.n	80049bc <HAL_RCC_OscConfig+0xb0>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004988:	d10c      	bne.n	80049a4 <HAL_RCC_OscConfig+0x98>
 800498a:	4b70      	ldr	r3, [pc, #448]	@ (8004b4c <HAL_RCC_OscConfig+0x240>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a6f      	ldr	r2, [pc, #444]	@ (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004990:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004994:	6013      	str	r3, [r2, #0]
 8004996:	4b6d      	ldr	r3, [pc, #436]	@ (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a6c      	ldr	r2, [pc, #432]	@ (8004b4c <HAL_RCC_OscConfig+0x240>)
 800499c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049a0:	6013      	str	r3, [r2, #0]
 80049a2:	e00b      	b.n	80049bc <HAL_RCC_OscConfig+0xb0>
 80049a4:	4b69      	ldr	r3, [pc, #420]	@ (8004b4c <HAL_RCC_OscConfig+0x240>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a68      	ldr	r2, [pc, #416]	@ (8004b4c <HAL_RCC_OscConfig+0x240>)
 80049aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049ae:	6013      	str	r3, [r2, #0]
 80049b0:	4b66      	ldr	r3, [pc, #408]	@ (8004b4c <HAL_RCC_OscConfig+0x240>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a65      	ldr	r2, [pc, #404]	@ (8004b4c <HAL_RCC_OscConfig+0x240>)
 80049b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80049ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d013      	beq.n	80049ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c4:	f7fd fc54 	bl	8002270 <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049cc:	f7fd fc50 	bl	8002270 <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b64      	cmp	r3, #100	@ 0x64
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e207      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049de:	4b5b      	ldr	r3, [pc, #364]	@ (8004b4c <HAL_RCC_OscConfig+0x240>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0f0      	beq.n	80049cc <HAL_RCC_OscConfig+0xc0>
 80049ea:	e014      	b.n	8004a16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ec:	f7fd fc40 	bl	8002270 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049f4:	f7fd fc3c 	bl	8002270 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b64      	cmp	r3, #100	@ 0x64
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e1f3      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a06:	4b51      	ldr	r3, [pc, #324]	@ (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1f0      	bne.n	80049f4 <HAL_RCC_OscConfig+0xe8>
 8004a12:	e000      	b.n	8004a16 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d063      	beq.n	8004aea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004a22:	4b4a      	ldr	r3, [pc, #296]	@ (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f003 030c 	and.w	r3, r3, #12
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00b      	beq.n	8004a46 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a2e:	4b47      	ldr	r3, [pc, #284]	@ (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d11c      	bne.n	8004a74 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a3a:	4b44      	ldr	r3, [pc, #272]	@ (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d116      	bne.n	8004a74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a46:	4b41      	ldr	r3, [pc, #260]	@ (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d005      	beq.n	8004a5e <HAL_RCC_OscConfig+0x152>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d001      	beq.n	8004a5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e1c7      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a5e:	4b3b      	ldr	r3, [pc, #236]	@ (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	00db      	lsls	r3, r3, #3
 8004a6c:	4937      	ldr	r1, [pc, #220]	@ (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a72:	e03a      	b.n	8004aea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d020      	beq.n	8004abe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a7c:	4b34      	ldr	r3, [pc, #208]	@ (8004b50 <HAL_RCC_OscConfig+0x244>)
 8004a7e:	2201      	movs	r2, #1
 8004a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a82:	f7fd fbf5 	bl	8002270 <HAL_GetTick>
 8004a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a88:	e008      	b.n	8004a9c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a8a:	f7fd fbf1 	bl	8002270 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d901      	bls.n	8004a9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e1a8      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a9c:	4b2b      	ldr	r3, [pc, #172]	@ (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d0f0      	beq.n	8004a8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aa8:	4b28      	ldr	r3, [pc, #160]	@ (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	00db      	lsls	r3, r3, #3
 8004ab6:	4925      	ldr	r1, [pc, #148]	@ (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	600b      	str	r3, [r1, #0]
 8004abc:	e015      	b.n	8004aea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004abe:	4b24      	ldr	r3, [pc, #144]	@ (8004b50 <HAL_RCC_OscConfig+0x244>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac4:	f7fd fbd4 	bl	8002270 <HAL_GetTick>
 8004ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aca:	e008      	b.n	8004ade <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004acc:	f7fd fbd0 	bl	8002270 <HAL_GetTick>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d901      	bls.n	8004ade <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ada:	2303      	movs	r3, #3
 8004adc:	e187      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ade:	4b1b      	ldr	r3, [pc, #108]	@ (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0302 	and.w	r3, r3, #2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1f0      	bne.n	8004acc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d036      	beq.n	8004b64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d016      	beq.n	8004b2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004afe:	4b15      	ldr	r3, [pc, #84]	@ (8004b54 <HAL_RCC_OscConfig+0x248>)
 8004b00:	2201      	movs	r2, #1
 8004b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b04:	f7fd fbb4 	bl	8002270 <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b0c:	f7fd fbb0 	bl	8002270 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e167      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b4c <HAL_RCC_OscConfig+0x240>)
 8004b20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0f0      	beq.n	8004b0c <HAL_RCC_OscConfig+0x200>
 8004b2a:	e01b      	b.n	8004b64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b2c:	4b09      	ldr	r3, [pc, #36]	@ (8004b54 <HAL_RCC_OscConfig+0x248>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b32:	f7fd fb9d 	bl	8002270 <HAL_GetTick>
 8004b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b38:	e00e      	b.n	8004b58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b3a:	f7fd fb99 	bl	8002270 <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d907      	bls.n	8004b58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e150      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	42470000 	.word	0x42470000
 8004b54:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b58:	4b88      	ldr	r3, [pc, #544]	@ (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004b5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b5c:	f003 0302 	and.w	r3, r3, #2
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1ea      	bne.n	8004b3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0304 	and.w	r3, r3, #4
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 8097 	beq.w	8004ca0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b72:	2300      	movs	r3, #0
 8004b74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b76:	4b81      	ldr	r3, [pc, #516]	@ (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10f      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b82:	2300      	movs	r3, #0
 8004b84:	60bb      	str	r3, [r7, #8]
 8004b86:	4b7d      	ldr	r3, [pc, #500]	@ (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8a:	4a7c      	ldr	r2, [pc, #496]	@ (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004b8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b92:	4b7a      	ldr	r3, [pc, #488]	@ (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b9a:	60bb      	str	r3, [r7, #8]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ba2:	4b77      	ldr	r3, [pc, #476]	@ (8004d80 <HAL_RCC_OscConfig+0x474>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d118      	bne.n	8004be0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bae:	4b74      	ldr	r3, [pc, #464]	@ (8004d80 <HAL_RCC_OscConfig+0x474>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a73      	ldr	r2, [pc, #460]	@ (8004d80 <HAL_RCC_OscConfig+0x474>)
 8004bb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bba:	f7fd fb59 	bl	8002270 <HAL_GetTick>
 8004bbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bc2:	f7fd fb55 	bl	8002270 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e10c      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bd4:	4b6a      	ldr	r3, [pc, #424]	@ (8004d80 <HAL_RCC_OscConfig+0x474>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0f0      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d106      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x2ea>
 8004be8:	4b64      	ldr	r3, [pc, #400]	@ (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004bea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bec:	4a63      	ldr	r2, [pc, #396]	@ (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004bee:	f043 0301 	orr.w	r3, r3, #1
 8004bf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bf4:	e01c      	b.n	8004c30 <HAL_RCC_OscConfig+0x324>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	2b05      	cmp	r3, #5
 8004bfc:	d10c      	bne.n	8004c18 <HAL_RCC_OscConfig+0x30c>
 8004bfe:	4b5f      	ldr	r3, [pc, #380]	@ (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c02:	4a5e      	ldr	r2, [pc, #376]	@ (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004c04:	f043 0304 	orr.w	r3, r3, #4
 8004c08:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c0a:	4b5c      	ldr	r3, [pc, #368]	@ (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c0e:	4a5b      	ldr	r2, [pc, #364]	@ (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004c10:	f043 0301 	orr.w	r3, r3, #1
 8004c14:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c16:	e00b      	b.n	8004c30 <HAL_RCC_OscConfig+0x324>
 8004c18:	4b58      	ldr	r3, [pc, #352]	@ (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c1c:	4a57      	ldr	r2, [pc, #348]	@ (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004c1e:	f023 0301 	bic.w	r3, r3, #1
 8004c22:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c24:	4b55      	ldr	r3, [pc, #340]	@ (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c28:	4a54      	ldr	r2, [pc, #336]	@ (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004c2a:	f023 0304 	bic.w	r3, r3, #4
 8004c2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d015      	beq.n	8004c64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c38:	f7fd fb1a 	bl	8002270 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c3e:	e00a      	b.n	8004c56 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c40:	f7fd fb16 	bl	8002270 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e0cb      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c56:	4b49      	ldr	r3, [pc, #292]	@ (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0ee      	beq.n	8004c40 <HAL_RCC_OscConfig+0x334>
 8004c62:	e014      	b.n	8004c8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c64:	f7fd fb04 	bl	8002270 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c6a:	e00a      	b.n	8004c82 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c6c:	f7fd fb00 	bl	8002270 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e0b5      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c82:	4b3e      	ldr	r3, [pc, #248]	@ (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c86:	f003 0302 	and.w	r3, r3, #2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1ee      	bne.n	8004c6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c8e:	7dfb      	ldrb	r3, [r7, #23]
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d105      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c94:	4b39      	ldr	r3, [pc, #228]	@ (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c98:	4a38      	ldr	r2, [pc, #224]	@ (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004c9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 80a1 	beq.w	8004dec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004caa:	4b34      	ldr	r3, [pc, #208]	@ (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 030c 	and.w	r3, r3, #12
 8004cb2:	2b08      	cmp	r3, #8
 8004cb4:	d05c      	beq.n	8004d70 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	699b      	ldr	r3, [r3, #24]
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d141      	bne.n	8004d42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cbe:	4b31      	ldr	r3, [pc, #196]	@ (8004d84 <HAL_RCC_OscConfig+0x478>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc4:	f7fd fad4 	bl	8002270 <HAL_GetTick>
 8004cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cca:	e008      	b.n	8004cde <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ccc:	f7fd fad0 	bl	8002270 <HAL_GetTick>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	1ad3      	subs	r3, r2, r3
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d901      	bls.n	8004cde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e087      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cde:	4b27      	ldr	r3, [pc, #156]	@ (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1f0      	bne.n	8004ccc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	69da      	ldr	r2, [r3, #28]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a1b      	ldr	r3, [r3, #32]
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf8:	019b      	lsls	r3, r3, #6
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d00:	085b      	lsrs	r3, r3, #1
 8004d02:	3b01      	subs	r3, #1
 8004d04:	041b      	lsls	r3, r3, #16
 8004d06:	431a      	orrs	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0c:	061b      	lsls	r3, r3, #24
 8004d0e:	491b      	ldr	r1, [pc, #108]	@ (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d14:	4b1b      	ldr	r3, [pc, #108]	@ (8004d84 <HAL_RCC_OscConfig+0x478>)
 8004d16:	2201      	movs	r2, #1
 8004d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d1a:	f7fd faa9 	bl	8002270 <HAL_GetTick>
 8004d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d20:	e008      	b.n	8004d34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d22:	f7fd faa5 	bl	8002270 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e05c      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d34:	4b11      	ldr	r3, [pc, #68]	@ (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d0f0      	beq.n	8004d22 <HAL_RCC_OscConfig+0x416>
 8004d40:	e054      	b.n	8004dec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d42:	4b10      	ldr	r3, [pc, #64]	@ (8004d84 <HAL_RCC_OscConfig+0x478>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d48:	f7fd fa92 	bl	8002270 <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d50:	f7fd fa8e 	bl	8002270 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e045      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d62:	4b06      	ldr	r3, [pc, #24]	@ (8004d7c <HAL_RCC_OscConfig+0x470>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1f0      	bne.n	8004d50 <HAL_RCC_OscConfig+0x444>
 8004d6e:	e03d      	b.n	8004dec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d107      	bne.n	8004d88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e038      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
 8004d7c:	40023800 	.word	0x40023800
 8004d80:	40007000 	.word	0x40007000
 8004d84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d88:	4b1b      	ldr	r3, [pc, #108]	@ (8004df8 <HAL_RCC_OscConfig+0x4ec>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d028      	beq.n	8004de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d121      	bne.n	8004de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d11a      	bne.n	8004de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004db2:	68fa      	ldr	r2, [r7, #12]
 8004db4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004db8:	4013      	ands	r3, r2
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004dbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d111      	bne.n	8004de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dce:	085b      	lsrs	r3, r3, #1
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d107      	bne.n	8004de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d001      	beq.n	8004dec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e000      	b.n	8004dee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	40023800 	.word	0x40023800

08004dfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b084      	sub	sp, #16
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	e0cc      	b.n	8004faa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e10:	4b68      	ldr	r3, [pc, #416]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d90c      	bls.n	8004e38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e1e:	4b65      	ldr	r3, [pc, #404]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e26:	4b63      	ldr	r3, [pc, #396]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0307 	and.w	r3, r3, #7
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d001      	beq.n	8004e38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e0b8      	b.n	8004faa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d020      	beq.n	8004e86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d005      	beq.n	8004e5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e50:	4b59      	ldr	r3, [pc, #356]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	4a58      	ldr	r2, [pc, #352]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004e5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0308 	and.w	r3, r3, #8
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d005      	beq.n	8004e74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e68:	4b53      	ldr	r3, [pc, #332]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	4a52      	ldr	r2, [pc, #328]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004e72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e74:	4b50      	ldr	r3, [pc, #320]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	494d      	ldr	r1, [pc, #308]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d044      	beq.n	8004f1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d107      	bne.n	8004eaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e9a:	4b47      	ldr	r3, [pc, #284]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d119      	bne.n	8004eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e07f      	b.n	8004faa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d003      	beq.n	8004eba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eb6:	2b03      	cmp	r3, #3
 8004eb8:	d107      	bne.n	8004eca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eba:	4b3f      	ldr	r3, [pc, #252]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d109      	bne.n	8004eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e06f      	b.n	8004faa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eca:	4b3b      	ldr	r3, [pc, #236]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e067      	b.n	8004faa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eda:	4b37      	ldr	r3, [pc, #220]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	f023 0203 	bic.w	r2, r3, #3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	4934      	ldr	r1, [pc, #208]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004eec:	f7fd f9c0 	bl	8002270 <HAL_GetTick>
 8004ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ef2:	e00a      	b.n	8004f0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ef4:	f7fd f9bc 	bl	8002270 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e04f      	b.n	8004faa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f0a:	4b2b      	ldr	r3, [pc, #172]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f003 020c 	and.w	r2, r3, #12
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d1eb      	bne.n	8004ef4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f1c:	4b25      	ldr	r3, [pc, #148]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0307 	and.w	r3, r3, #7
 8004f24:	683a      	ldr	r2, [r7, #0]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d20c      	bcs.n	8004f44 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f2a:	4b22      	ldr	r3, [pc, #136]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	b2d2      	uxtb	r2, r2
 8004f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f32:	4b20      	ldr	r3, [pc, #128]	@ (8004fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0307 	and.w	r3, r3, #7
 8004f3a:	683a      	ldr	r2, [r7, #0]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d001      	beq.n	8004f44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e032      	b.n	8004faa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d008      	beq.n	8004f62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f50:	4b19      	ldr	r3, [pc, #100]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	4916      	ldr	r1, [pc, #88]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0308 	and.w	r3, r3, #8
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d009      	beq.n	8004f82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f6e:	4b12      	ldr	r3, [pc, #72]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	490e      	ldr	r1, [pc, #56]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f82:	f000 f821 	bl	8004fc8 <HAL_RCC_GetSysClockFreq>
 8004f86:	4602      	mov	r2, r0
 8004f88:	4b0b      	ldr	r3, [pc, #44]	@ (8004fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	091b      	lsrs	r3, r3, #4
 8004f8e:	f003 030f 	and.w	r3, r3, #15
 8004f92:	490a      	ldr	r1, [pc, #40]	@ (8004fbc <HAL_RCC_ClockConfig+0x1c0>)
 8004f94:	5ccb      	ldrb	r3, [r1, r3]
 8004f96:	fa22 f303 	lsr.w	r3, r2, r3
 8004f9a:	4a09      	ldr	r2, [pc, #36]	@ (8004fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004f9e:	4b09      	ldr	r3, [pc, #36]	@ (8004fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7fd f83c 	bl	8002020 <HAL_InitTick>

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3710      	adds	r7, #16
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	40023c00 	.word	0x40023c00
 8004fb8:	40023800 	.word	0x40023800
 8004fbc:	0800a178 	.word	0x0800a178
 8004fc0:	20000084 	.word	0x20000084
 8004fc4:	20000088 	.word	0x20000088

08004fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fcc:	b090      	sub	sp, #64	@ 0x40
 8004fce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fe0:	4b59      	ldr	r3, [pc, #356]	@ (8005148 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f003 030c 	and.w	r3, r3, #12
 8004fe8:	2b08      	cmp	r3, #8
 8004fea:	d00d      	beq.n	8005008 <HAL_RCC_GetSysClockFreq+0x40>
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	f200 80a1 	bhi.w	8005134 <HAL_RCC_GetSysClockFreq+0x16c>
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d002      	beq.n	8004ffc <HAL_RCC_GetSysClockFreq+0x34>
 8004ff6:	2b04      	cmp	r3, #4
 8004ff8:	d003      	beq.n	8005002 <HAL_RCC_GetSysClockFreq+0x3a>
 8004ffa:	e09b      	b.n	8005134 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ffc:	4b53      	ldr	r3, [pc, #332]	@ (800514c <HAL_RCC_GetSysClockFreq+0x184>)
 8004ffe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005000:	e09b      	b.n	800513a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005002:	4b53      	ldr	r3, [pc, #332]	@ (8005150 <HAL_RCC_GetSysClockFreq+0x188>)
 8005004:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005006:	e098      	b.n	800513a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005008:	4b4f      	ldr	r3, [pc, #316]	@ (8005148 <HAL_RCC_GetSysClockFreq+0x180>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005010:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005012:	4b4d      	ldr	r3, [pc, #308]	@ (8005148 <HAL_RCC_GetSysClockFreq+0x180>)
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d028      	beq.n	8005070 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800501e:	4b4a      	ldr	r3, [pc, #296]	@ (8005148 <HAL_RCC_GetSysClockFreq+0x180>)
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	099b      	lsrs	r3, r3, #6
 8005024:	2200      	movs	r2, #0
 8005026:	623b      	str	r3, [r7, #32]
 8005028:	627a      	str	r2, [r7, #36]	@ 0x24
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005030:	2100      	movs	r1, #0
 8005032:	4b47      	ldr	r3, [pc, #284]	@ (8005150 <HAL_RCC_GetSysClockFreq+0x188>)
 8005034:	fb03 f201 	mul.w	r2, r3, r1
 8005038:	2300      	movs	r3, #0
 800503a:	fb00 f303 	mul.w	r3, r0, r3
 800503e:	4413      	add	r3, r2
 8005040:	4a43      	ldr	r2, [pc, #268]	@ (8005150 <HAL_RCC_GetSysClockFreq+0x188>)
 8005042:	fba0 1202 	umull	r1, r2, r0, r2
 8005046:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005048:	460a      	mov	r2, r1
 800504a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800504c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800504e:	4413      	add	r3, r2
 8005050:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005054:	2200      	movs	r2, #0
 8005056:	61bb      	str	r3, [r7, #24]
 8005058:	61fa      	str	r2, [r7, #28]
 800505a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800505e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005062:	f7fb fd75 	bl	8000b50 <__aeabi_uldivmod>
 8005066:	4602      	mov	r2, r0
 8005068:	460b      	mov	r3, r1
 800506a:	4613      	mov	r3, r2
 800506c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800506e:	e053      	b.n	8005118 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005070:	4b35      	ldr	r3, [pc, #212]	@ (8005148 <HAL_RCC_GetSysClockFreq+0x180>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	099b      	lsrs	r3, r3, #6
 8005076:	2200      	movs	r2, #0
 8005078:	613b      	str	r3, [r7, #16]
 800507a:	617a      	str	r2, [r7, #20]
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005082:	f04f 0b00 	mov.w	fp, #0
 8005086:	4652      	mov	r2, sl
 8005088:	465b      	mov	r3, fp
 800508a:	f04f 0000 	mov.w	r0, #0
 800508e:	f04f 0100 	mov.w	r1, #0
 8005092:	0159      	lsls	r1, r3, #5
 8005094:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005098:	0150      	lsls	r0, r2, #5
 800509a:	4602      	mov	r2, r0
 800509c:	460b      	mov	r3, r1
 800509e:	ebb2 080a 	subs.w	r8, r2, sl
 80050a2:	eb63 090b 	sbc.w	r9, r3, fp
 80050a6:	f04f 0200 	mov.w	r2, #0
 80050aa:	f04f 0300 	mov.w	r3, #0
 80050ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80050b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80050b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80050ba:	ebb2 0408 	subs.w	r4, r2, r8
 80050be:	eb63 0509 	sbc.w	r5, r3, r9
 80050c2:	f04f 0200 	mov.w	r2, #0
 80050c6:	f04f 0300 	mov.w	r3, #0
 80050ca:	00eb      	lsls	r3, r5, #3
 80050cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050d0:	00e2      	lsls	r2, r4, #3
 80050d2:	4614      	mov	r4, r2
 80050d4:	461d      	mov	r5, r3
 80050d6:	eb14 030a 	adds.w	r3, r4, sl
 80050da:	603b      	str	r3, [r7, #0]
 80050dc:	eb45 030b 	adc.w	r3, r5, fp
 80050e0:	607b      	str	r3, [r7, #4]
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	f04f 0300 	mov.w	r3, #0
 80050ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050ee:	4629      	mov	r1, r5
 80050f0:	028b      	lsls	r3, r1, #10
 80050f2:	4621      	mov	r1, r4
 80050f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050f8:	4621      	mov	r1, r4
 80050fa:	028a      	lsls	r2, r1, #10
 80050fc:	4610      	mov	r0, r2
 80050fe:	4619      	mov	r1, r3
 8005100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005102:	2200      	movs	r2, #0
 8005104:	60bb      	str	r3, [r7, #8]
 8005106:	60fa      	str	r2, [r7, #12]
 8005108:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800510c:	f7fb fd20 	bl	8000b50 <__aeabi_uldivmod>
 8005110:	4602      	mov	r2, r0
 8005112:	460b      	mov	r3, r1
 8005114:	4613      	mov	r3, r2
 8005116:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005118:	4b0b      	ldr	r3, [pc, #44]	@ (8005148 <HAL_RCC_GetSysClockFreq+0x180>)
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	0c1b      	lsrs	r3, r3, #16
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	3301      	adds	r3, #1
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005128:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800512a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005130:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005132:	e002      	b.n	800513a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005134:	4b05      	ldr	r3, [pc, #20]	@ (800514c <HAL_RCC_GetSysClockFreq+0x184>)
 8005136:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005138:	bf00      	nop
    }
  }
  return sysclockfreq;
 800513a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800513c:	4618      	mov	r0, r3
 800513e:	3740      	adds	r7, #64	@ 0x40
 8005140:	46bd      	mov	sp, r7
 8005142:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005146:	bf00      	nop
 8005148:	40023800 	.word	0x40023800
 800514c:	00f42400 	.word	0x00f42400
 8005150:	017d7840 	.word	0x017d7840

08005154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005154:	b480      	push	{r7}
 8005156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005158:	4b03      	ldr	r3, [pc, #12]	@ (8005168 <HAL_RCC_GetHCLKFreq+0x14>)
 800515a:	681b      	ldr	r3, [r3, #0]
}
 800515c:	4618      	mov	r0, r3
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	20000084 	.word	0x20000084

0800516c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005170:	f7ff fff0 	bl	8005154 <HAL_RCC_GetHCLKFreq>
 8005174:	4602      	mov	r2, r0
 8005176:	4b05      	ldr	r3, [pc, #20]	@ (800518c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	0a9b      	lsrs	r3, r3, #10
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	4903      	ldr	r1, [pc, #12]	@ (8005190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005182:	5ccb      	ldrb	r3, [r1, r3]
 8005184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005188:	4618      	mov	r0, r3
 800518a:	bd80      	pop	{r7, pc}
 800518c:	40023800 	.word	0x40023800
 8005190:	0800a188 	.word	0x0800a188

08005194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005198:	f7ff ffdc 	bl	8005154 <HAL_RCC_GetHCLKFreq>
 800519c:	4602      	mov	r2, r0
 800519e:	4b05      	ldr	r3, [pc, #20]	@ (80051b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	0b5b      	lsrs	r3, r3, #13
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	4903      	ldr	r1, [pc, #12]	@ (80051b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051aa:	5ccb      	ldrb	r3, [r1, r3]
 80051ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	40023800 	.word	0x40023800
 80051b8:	0800a188 	.word	0x0800a188

080051bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	220f      	movs	r2, #15
 80051ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80051cc:	4b12      	ldr	r3, [pc, #72]	@ (8005218 <HAL_RCC_GetClockConfig+0x5c>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f003 0203 	and.w	r2, r3, #3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80051d8:	4b0f      	ldr	r3, [pc, #60]	@ (8005218 <HAL_RCC_GetClockConfig+0x5c>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80051e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005218 <HAL_RCC_GetClockConfig+0x5c>)
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80051f0:	4b09      	ldr	r3, [pc, #36]	@ (8005218 <HAL_RCC_GetClockConfig+0x5c>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	08db      	lsrs	r3, r3, #3
 80051f6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80051fe:	4b07      	ldr	r3, [pc, #28]	@ (800521c <HAL_RCC_GetClockConfig+0x60>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0207 	and.w	r2, r3, #7
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	601a      	str	r2, [r3, #0]
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	40023800 	.word	0x40023800
 800521c:	40023c00 	.word	0x40023c00

08005220 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e041      	b.n	80052b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d106      	bne.n	800524c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7fc fe4a 	bl	8001ee0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3304      	adds	r3, #4
 800525c:	4619      	mov	r1, r3
 800525e:	4610      	mov	r0, r2
 8005260:	f000 fb6a 	bl	8005938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2201      	movs	r2, #1
 80052b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
	...

080052c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d001      	beq.n	80052d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e044      	b.n	8005362 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	68da      	ldr	r2, [r3, #12]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0201 	orr.w	r2, r2, #1
 80052ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a1e      	ldr	r2, [pc, #120]	@ (8005370 <HAL_TIM_Base_Start_IT+0xb0>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d018      	beq.n	800532c <HAL_TIM_Base_Start_IT+0x6c>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005302:	d013      	beq.n	800532c <HAL_TIM_Base_Start_IT+0x6c>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a1a      	ldr	r2, [pc, #104]	@ (8005374 <HAL_TIM_Base_Start_IT+0xb4>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00e      	beq.n	800532c <HAL_TIM_Base_Start_IT+0x6c>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a19      	ldr	r2, [pc, #100]	@ (8005378 <HAL_TIM_Base_Start_IT+0xb8>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d009      	beq.n	800532c <HAL_TIM_Base_Start_IT+0x6c>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a17      	ldr	r2, [pc, #92]	@ (800537c <HAL_TIM_Base_Start_IT+0xbc>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d004      	beq.n	800532c <HAL_TIM_Base_Start_IT+0x6c>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a16      	ldr	r2, [pc, #88]	@ (8005380 <HAL_TIM_Base_Start_IT+0xc0>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d111      	bne.n	8005350 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 0307 	and.w	r3, r3, #7
 8005336:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2b06      	cmp	r3, #6
 800533c:	d010      	beq.n	8005360 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f042 0201 	orr.w	r2, r2, #1
 800534c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800534e:	e007      	b.n	8005360 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0201 	orr.w	r2, r2, #1
 800535e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3714      	adds	r7, #20
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
 800536e:	bf00      	nop
 8005370:	40010000 	.word	0x40010000
 8005374:	40000400 	.word	0x40000400
 8005378:	40000800 	.word	0x40000800
 800537c:	40000c00 	.word	0x40000c00
 8005380:	40014000 	.word	0x40014000

08005384 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e041      	b.n	800541a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d106      	bne.n	80053b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7fc fd62 	bl	8001e74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	3304      	adds	r3, #4
 80053c0:	4619      	mov	r1, r3
 80053c2:	4610      	mov	r0, r2
 80053c4:	f000 fab8 	bl	8005938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
	...

08005424 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d109      	bne.n	8005448 <HAL_TIM_PWM_Start+0x24>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b01      	cmp	r3, #1
 800543e:	bf14      	ite	ne
 8005440:	2301      	movne	r3, #1
 8005442:	2300      	moveq	r3, #0
 8005444:	b2db      	uxtb	r3, r3
 8005446:	e022      	b.n	800548e <HAL_TIM_PWM_Start+0x6a>
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2b04      	cmp	r3, #4
 800544c:	d109      	bne.n	8005462 <HAL_TIM_PWM_Start+0x3e>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b01      	cmp	r3, #1
 8005458:	bf14      	ite	ne
 800545a:	2301      	movne	r3, #1
 800545c:	2300      	moveq	r3, #0
 800545e:	b2db      	uxtb	r3, r3
 8005460:	e015      	b.n	800548e <HAL_TIM_PWM_Start+0x6a>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b08      	cmp	r3, #8
 8005466:	d109      	bne.n	800547c <HAL_TIM_PWM_Start+0x58>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b01      	cmp	r3, #1
 8005472:	bf14      	ite	ne
 8005474:	2301      	movne	r3, #1
 8005476:	2300      	moveq	r3, #0
 8005478:	b2db      	uxtb	r3, r3
 800547a:	e008      	b.n	800548e <HAL_TIM_PWM_Start+0x6a>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b01      	cmp	r3, #1
 8005486:	bf14      	ite	ne
 8005488:	2301      	movne	r3, #1
 800548a:	2300      	moveq	r3, #0
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e068      	b.n	8005568 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d104      	bne.n	80054a6 <HAL_TIM_PWM_Start+0x82>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2202      	movs	r2, #2
 80054a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054a4:	e013      	b.n	80054ce <HAL_TIM_PWM_Start+0xaa>
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b04      	cmp	r3, #4
 80054aa:	d104      	bne.n	80054b6 <HAL_TIM_PWM_Start+0x92>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054b4:	e00b      	b.n	80054ce <HAL_TIM_PWM_Start+0xaa>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d104      	bne.n	80054c6 <HAL_TIM_PWM_Start+0xa2>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054c4:	e003      	b.n	80054ce <HAL_TIM_PWM_Start+0xaa>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2202      	movs	r2, #2
 80054ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2201      	movs	r2, #1
 80054d4:	6839      	ldr	r1, [r7, #0]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 fc46 	bl	8005d68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a23      	ldr	r2, [pc, #140]	@ (8005570 <HAL_TIM_PWM_Start+0x14c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d107      	bne.n	80054f6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a1d      	ldr	r2, [pc, #116]	@ (8005570 <HAL_TIM_PWM_Start+0x14c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d018      	beq.n	8005532 <HAL_TIM_PWM_Start+0x10e>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005508:	d013      	beq.n	8005532 <HAL_TIM_PWM_Start+0x10e>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a19      	ldr	r2, [pc, #100]	@ (8005574 <HAL_TIM_PWM_Start+0x150>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d00e      	beq.n	8005532 <HAL_TIM_PWM_Start+0x10e>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a17      	ldr	r2, [pc, #92]	@ (8005578 <HAL_TIM_PWM_Start+0x154>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d009      	beq.n	8005532 <HAL_TIM_PWM_Start+0x10e>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a16      	ldr	r2, [pc, #88]	@ (800557c <HAL_TIM_PWM_Start+0x158>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d004      	beq.n	8005532 <HAL_TIM_PWM_Start+0x10e>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a14      	ldr	r2, [pc, #80]	@ (8005580 <HAL_TIM_PWM_Start+0x15c>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d111      	bne.n	8005556 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	f003 0307 	and.w	r3, r3, #7
 800553c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2b06      	cmp	r3, #6
 8005542:	d010      	beq.n	8005566 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f042 0201 	orr.w	r2, r2, #1
 8005552:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005554:	e007      	b.n	8005566 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f042 0201 	orr.w	r2, r2, #1
 8005564:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	40010000 	.word	0x40010000
 8005574:	40000400 	.word	0x40000400
 8005578:	40000800 	.word	0x40000800
 800557c:	40000c00 	.word	0x40000c00
 8005580:	40014000 	.word	0x40014000

08005584 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f003 0302 	and.w	r3, r3, #2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d020      	beq.n	80055e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d01b      	beq.n	80055e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f06f 0202 	mvn.w	r2, #2
 80055b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699b      	ldr	r3, [r3, #24]
 80055c6:	f003 0303 	and.w	r3, r3, #3
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 f994 	bl	80058fc <HAL_TIM_IC_CaptureCallback>
 80055d4:	e005      	b.n	80055e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f986 	bl	80058e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f997 	bl	8005910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	f003 0304 	and.w	r3, r3, #4
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d020      	beq.n	8005634 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d01b      	beq.n	8005634 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f06f 0204 	mvn.w	r2, #4
 8005604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2202      	movs	r2, #2
 800560a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005616:	2b00      	cmp	r3, #0
 8005618:	d003      	beq.n	8005622 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f96e 	bl	80058fc <HAL_TIM_IC_CaptureCallback>
 8005620:	e005      	b.n	800562e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f960 	bl	80058e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f000 f971 	bl	8005910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f003 0308 	and.w	r3, r3, #8
 800563a:	2b00      	cmp	r3, #0
 800563c:	d020      	beq.n	8005680 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f003 0308 	and.w	r3, r3, #8
 8005644:	2b00      	cmp	r3, #0
 8005646:	d01b      	beq.n	8005680 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f06f 0208 	mvn.w	r2, #8
 8005650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2204      	movs	r2, #4
 8005656:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f948 	bl	80058fc <HAL_TIM_IC_CaptureCallback>
 800566c:	e005      	b.n	800567a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f93a 	bl	80058e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 f94b 	bl	8005910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f003 0310 	and.w	r3, r3, #16
 8005686:	2b00      	cmp	r3, #0
 8005688:	d020      	beq.n	80056cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f003 0310 	and.w	r3, r3, #16
 8005690:	2b00      	cmp	r3, #0
 8005692:	d01b      	beq.n	80056cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f06f 0210 	mvn.w	r2, #16
 800569c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2208      	movs	r2, #8
 80056a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f000 f922 	bl	80058fc <HAL_TIM_IC_CaptureCallback>
 80056b8:	e005      	b.n	80056c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f914 	bl	80058e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 f925 	bl	8005910 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2200      	movs	r2, #0
 80056ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00c      	beq.n	80056f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d007      	beq.n	80056f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f06f 0201 	mvn.w	r2, #1
 80056e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7fc faf6 	bl	8001cdc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00c      	beq.n	8005714 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005700:	2b00      	cmp	r3, #0
 8005702:	d007      	beq.n	8005714 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800570c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 fbc8 	bl	8005ea4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800571a:	2b00      	cmp	r3, #0
 800571c:	d00c      	beq.n	8005738 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005724:	2b00      	cmp	r3, #0
 8005726:	d007      	beq.n	8005738 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f8f6 	bl	8005924 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f003 0320 	and.w	r3, r3, #32
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00c      	beq.n	800575c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f003 0320 	and.w	r3, r3, #32
 8005748:	2b00      	cmp	r3, #0
 800574a:	d007      	beq.n	800575c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0220 	mvn.w	r2, #32
 8005754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 fb9a 	bl	8005e90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800575c:	bf00      	nop
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005770:	2300      	movs	r3, #0
 8005772:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800577a:	2b01      	cmp	r3, #1
 800577c:	d101      	bne.n	8005782 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800577e:	2302      	movs	r3, #2
 8005780:	e0ae      	b.n	80058e0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2b0c      	cmp	r3, #12
 800578e:	f200 809f 	bhi.w	80058d0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005792:	a201      	add	r2, pc, #4	@ (adr r2, 8005798 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005798:	080057cd 	.word	0x080057cd
 800579c:	080058d1 	.word	0x080058d1
 80057a0:	080058d1 	.word	0x080058d1
 80057a4:	080058d1 	.word	0x080058d1
 80057a8:	0800580d 	.word	0x0800580d
 80057ac:	080058d1 	.word	0x080058d1
 80057b0:	080058d1 	.word	0x080058d1
 80057b4:	080058d1 	.word	0x080058d1
 80057b8:	0800584f 	.word	0x0800584f
 80057bc:	080058d1 	.word	0x080058d1
 80057c0:	080058d1 	.word	0x080058d1
 80057c4:	080058d1 	.word	0x080058d1
 80057c8:	0800588f 	.word	0x0800588f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68b9      	ldr	r1, [r7, #8]
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 f93c 	bl	8005a50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	699a      	ldr	r2, [r3, #24]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0208 	orr.w	r2, r2, #8
 80057e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	699a      	ldr	r2, [r3, #24]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f022 0204 	bic.w	r2, r2, #4
 80057f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	6999      	ldr	r1, [r3, #24]
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	691a      	ldr	r2, [r3, #16]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	430a      	orrs	r2, r1
 8005808:	619a      	str	r2, [r3, #24]
      break;
 800580a:	e064      	b.n	80058d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68b9      	ldr	r1, [r7, #8]
 8005812:	4618      	mov	r0, r3
 8005814:	f000 f982 	bl	8005b1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	699a      	ldr	r2, [r3, #24]
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005826:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	699a      	ldr	r2, [r3, #24]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6999      	ldr	r1, [r3, #24]
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	021a      	lsls	r2, r3, #8
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	619a      	str	r2, [r3, #24]
      break;
 800584c:	e043      	b.n	80058d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68b9      	ldr	r1, [r7, #8]
 8005854:	4618      	mov	r0, r3
 8005856:	f000 f9cd 	bl	8005bf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	69da      	ldr	r2, [r3, #28]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f042 0208 	orr.w	r2, r2, #8
 8005868:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	69da      	ldr	r2, [r3, #28]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f022 0204 	bic.w	r2, r2, #4
 8005878:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	69d9      	ldr	r1, [r3, #28]
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	691a      	ldr	r2, [r3, #16]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	430a      	orrs	r2, r1
 800588a:	61da      	str	r2, [r3, #28]
      break;
 800588c:	e023      	b.n	80058d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	68b9      	ldr	r1, [r7, #8]
 8005894:	4618      	mov	r0, r3
 8005896:	f000 fa17 	bl	8005cc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	69da      	ldr	r2, [r3, #28]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	69da      	ldr	r2, [r3, #28]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69d9      	ldr	r1, [r3, #28]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	021a      	lsls	r2, r3, #8
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	61da      	str	r2, [r3, #28]
      break;
 80058ce:	e002      	b.n	80058d6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	75fb      	strb	r3, [r7, #23]
      break;
 80058d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058de:	7dfb      	ldrb	r3, [r7, #23]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a3a      	ldr	r2, [pc, #232]	@ (8005a34 <TIM_Base_SetConfig+0xfc>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d00f      	beq.n	8005970 <TIM_Base_SetConfig+0x38>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005956:	d00b      	beq.n	8005970 <TIM_Base_SetConfig+0x38>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a37      	ldr	r2, [pc, #220]	@ (8005a38 <TIM_Base_SetConfig+0x100>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d007      	beq.n	8005970 <TIM_Base_SetConfig+0x38>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a36      	ldr	r2, [pc, #216]	@ (8005a3c <TIM_Base_SetConfig+0x104>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d003      	beq.n	8005970 <TIM_Base_SetConfig+0x38>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a35      	ldr	r2, [pc, #212]	@ (8005a40 <TIM_Base_SetConfig+0x108>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d108      	bne.n	8005982 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	4313      	orrs	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a2b      	ldr	r2, [pc, #172]	@ (8005a34 <TIM_Base_SetConfig+0xfc>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d01b      	beq.n	80059c2 <TIM_Base_SetConfig+0x8a>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005990:	d017      	beq.n	80059c2 <TIM_Base_SetConfig+0x8a>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a28      	ldr	r2, [pc, #160]	@ (8005a38 <TIM_Base_SetConfig+0x100>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d013      	beq.n	80059c2 <TIM_Base_SetConfig+0x8a>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a27      	ldr	r2, [pc, #156]	@ (8005a3c <TIM_Base_SetConfig+0x104>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d00f      	beq.n	80059c2 <TIM_Base_SetConfig+0x8a>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a26      	ldr	r2, [pc, #152]	@ (8005a40 <TIM_Base_SetConfig+0x108>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d00b      	beq.n	80059c2 <TIM_Base_SetConfig+0x8a>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a25      	ldr	r2, [pc, #148]	@ (8005a44 <TIM_Base_SetConfig+0x10c>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d007      	beq.n	80059c2 <TIM_Base_SetConfig+0x8a>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a24      	ldr	r2, [pc, #144]	@ (8005a48 <TIM_Base_SetConfig+0x110>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d003      	beq.n	80059c2 <TIM_Base_SetConfig+0x8a>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a23      	ldr	r2, [pc, #140]	@ (8005a4c <TIM_Base_SetConfig+0x114>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d108      	bne.n	80059d4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	68db      	ldr	r3, [r3, #12]
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	689a      	ldr	r2, [r3, #8]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a0e      	ldr	r2, [pc, #56]	@ (8005a34 <TIM_Base_SetConfig+0xfc>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d103      	bne.n	8005a08 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	691a      	ldr	r2, [r3, #16]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d105      	bne.n	8005a26 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	691b      	ldr	r3, [r3, #16]
 8005a1e:	f023 0201 	bic.w	r2, r3, #1
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	611a      	str	r2, [r3, #16]
  }
}
 8005a26:	bf00      	nop
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	40010000 	.word	0x40010000
 8005a38:	40000400 	.word	0x40000400
 8005a3c:	40000800 	.word	0x40000800
 8005a40:	40000c00 	.word	0x40000c00
 8005a44:	40014000 	.word	0x40014000
 8005a48:	40014400 	.word	0x40014400
 8005a4c:	40014800 	.word	0x40014800

08005a50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	f023 0201 	bic.w	r2, r3, #1
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f023 0303 	bic.w	r3, r3, #3
 8005a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f023 0302 	bic.w	r3, r3, #2
 8005a98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a1c      	ldr	r2, [pc, #112]	@ (8005b18 <TIM_OC1_SetConfig+0xc8>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d10c      	bne.n	8005ac6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	f023 0308 	bic.w	r3, r3, #8
 8005ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f023 0304 	bic.w	r3, r3, #4
 8005ac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a13      	ldr	r2, [pc, #76]	@ (8005b18 <TIM_OC1_SetConfig+0xc8>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d111      	bne.n	8005af2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	621a      	str	r2, [r3, #32]
}
 8005b0c:	bf00      	nop
 8005b0e:	371c      	adds	r7, #28
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	40010000 	.word	0x40010000

08005b1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	f023 0210 	bic.w	r2, r3, #16
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	021b      	lsls	r3, r3, #8
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	f023 0320 	bic.w	r3, r3, #32
 8005b66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	011b      	lsls	r3, r3, #4
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a1e      	ldr	r2, [pc, #120]	@ (8005bf0 <TIM_OC2_SetConfig+0xd4>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d10d      	bne.n	8005b98 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	011b      	lsls	r3, r3, #4
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	4a15      	ldr	r2, [pc, #84]	@ (8005bf0 <TIM_OC2_SetConfig+0xd4>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d113      	bne.n	8005bc8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005ba6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005bae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	693a      	ldr	r2, [r7, #16]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685a      	ldr	r2, [r3, #4]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	621a      	str	r2, [r3, #32]
}
 8005be2:	bf00      	nop
 8005be4:	371c      	adds	r7, #28
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	40010000 	.word	0x40010000

08005bf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b087      	sub	sp, #28
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a1b      	ldr	r3, [r3, #32]
 8005c08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	69db      	ldr	r3, [r3, #28]
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f023 0303 	bic.w	r3, r3, #3
 8005c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	021b      	lsls	r3, r3, #8
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8005cc4 <TIM_OC3_SetConfig+0xd0>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d10d      	bne.n	8005c6e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005c58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	021b      	lsls	r3, r3, #8
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005c6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a14      	ldr	r2, [pc, #80]	@ (8005cc4 <TIM_OC3_SetConfig+0xd0>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d113      	bne.n	8005c9e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	011b      	lsls	r3, r3, #4
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	011b      	lsls	r3, r3, #4
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	621a      	str	r2, [r3, #32]
}
 8005cb8:	bf00      	nop
 8005cba:	371c      	adds	r7, #28
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr
 8005cc4:	40010000 	.word	0x40010000

08005cc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b087      	sub	sp, #28
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6a1b      	ldr	r3, [r3, #32]
 8005cd6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	021b      	lsls	r3, r3, #8
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005d12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	031b      	lsls	r3, r3, #12
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a10      	ldr	r2, [pc, #64]	@ (8005d64 <TIM_OC4_SetConfig+0x9c>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d109      	bne.n	8005d3c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	695b      	ldr	r3, [r3, #20]
 8005d34:	019b      	lsls	r3, r3, #6
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68fa      	ldr	r2, [r7, #12]
 8005d46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	621a      	str	r2, [r3, #32]
}
 8005d56:	bf00      	nop
 8005d58:	371c      	adds	r7, #28
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	40010000 	.word	0x40010000

08005d68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f003 031f 	and.w	r3, r3, #31
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6a1a      	ldr	r2, [r3, #32]
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	43db      	mvns	r3, r3
 8005d8a:	401a      	ands	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6a1a      	ldr	r2, [r3, #32]
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	f003 031f 	and.w	r3, r3, #31
 8005d9a:	6879      	ldr	r1, [r7, #4]
 8005d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8005da0:	431a      	orrs	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	621a      	str	r2, [r3, #32]
}
 8005da6:	bf00      	nop
 8005da8:	371c      	adds	r7, #28
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr
	...

08005db4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d101      	bne.n	8005dcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e050      	b.n	8005e6e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005df2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a1c      	ldr	r2, [pc, #112]	@ (8005e7c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d018      	beq.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e18:	d013      	beq.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a18      	ldr	r2, [pc, #96]	@ (8005e80 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d00e      	beq.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a16      	ldr	r2, [pc, #88]	@ (8005e84 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d009      	beq.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a15      	ldr	r2, [pc, #84]	@ (8005e88 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d004      	beq.n	8005e42 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a13      	ldr	r2, [pc, #76]	@ (8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d10c      	bne.n	8005e5c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68ba      	ldr	r2, [r7, #8]
 8005e5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3714      	adds	r7, #20
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	40010000 	.word	0x40010000
 8005e80:	40000400 	.word	0x40000400
 8005e84:	40000800 	.word	0x40000800
 8005e88:	40000c00 	.word	0x40000c00
 8005e8c:	40014000 	.word	0x40014000

08005e90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005eb8:	b084      	sub	sp, #16
 8005eba:	b580      	push	{r7, lr}
 8005ebc:	b084      	sub	sp, #16
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	6078      	str	r0, [r7, #4]
 8005ec2:	f107 001c 	add.w	r0, r7, #28
 8005ec6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005eca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d123      	bne.n	8005f1a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005ee6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005efa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d105      	bne.n	8005f0e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f001 fae8 	bl	80074e4 <USB_CoreReset>
 8005f14:	4603      	mov	r3, r0
 8005f16:	73fb      	strb	r3, [r7, #15]
 8005f18:	e01b      	b.n	8005f52 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f001 fadc 	bl	80074e4 <USB_CoreReset>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f30:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d106      	bne.n	8005f46 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f3c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f44:	e005      	b.n	8005f52 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f4a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f52:	7fbb      	ldrb	r3, [r7, #30]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d10b      	bne.n	8005f70 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f043 0206 	orr.w	r2, r3, #6
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f043 0220 	orr.w	r2, r3, #32
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f7c:	b004      	add	sp, #16
 8005f7e:	4770      	bx	lr

08005f80 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005f8e:	79fb      	ldrb	r3, [r7, #7]
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d165      	bne.n	8006060 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	4a41      	ldr	r2, [pc, #260]	@ (800609c <USB_SetTurnaroundTime+0x11c>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d906      	bls.n	8005faa <USB_SetTurnaroundTime+0x2a>
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	4a40      	ldr	r2, [pc, #256]	@ (80060a0 <USB_SetTurnaroundTime+0x120>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d202      	bcs.n	8005faa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005fa4:	230f      	movs	r3, #15
 8005fa6:	617b      	str	r3, [r7, #20]
 8005fa8:	e062      	b.n	8006070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	4a3c      	ldr	r2, [pc, #240]	@ (80060a0 <USB_SetTurnaroundTime+0x120>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d306      	bcc.n	8005fc0 <USB_SetTurnaroundTime+0x40>
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	4a3b      	ldr	r2, [pc, #236]	@ (80060a4 <USB_SetTurnaroundTime+0x124>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d202      	bcs.n	8005fc0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005fba:	230e      	movs	r3, #14
 8005fbc:	617b      	str	r3, [r7, #20]
 8005fbe:	e057      	b.n	8006070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	4a38      	ldr	r2, [pc, #224]	@ (80060a4 <USB_SetTurnaroundTime+0x124>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d306      	bcc.n	8005fd6 <USB_SetTurnaroundTime+0x56>
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	4a37      	ldr	r2, [pc, #220]	@ (80060a8 <USB_SetTurnaroundTime+0x128>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d202      	bcs.n	8005fd6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005fd0:	230d      	movs	r3, #13
 8005fd2:	617b      	str	r3, [r7, #20]
 8005fd4:	e04c      	b.n	8006070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	4a33      	ldr	r2, [pc, #204]	@ (80060a8 <USB_SetTurnaroundTime+0x128>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d306      	bcc.n	8005fec <USB_SetTurnaroundTime+0x6c>
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	4a32      	ldr	r2, [pc, #200]	@ (80060ac <USB_SetTurnaroundTime+0x12c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d802      	bhi.n	8005fec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005fe6:	230c      	movs	r3, #12
 8005fe8:	617b      	str	r3, [r7, #20]
 8005fea:	e041      	b.n	8006070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	4a2f      	ldr	r2, [pc, #188]	@ (80060ac <USB_SetTurnaroundTime+0x12c>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d906      	bls.n	8006002 <USB_SetTurnaroundTime+0x82>
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	4a2e      	ldr	r2, [pc, #184]	@ (80060b0 <USB_SetTurnaroundTime+0x130>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d802      	bhi.n	8006002 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005ffc:	230b      	movs	r3, #11
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	e036      	b.n	8006070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	4a2a      	ldr	r2, [pc, #168]	@ (80060b0 <USB_SetTurnaroundTime+0x130>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d906      	bls.n	8006018 <USB_SetTurnaroundTime+0x98>
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	4a29      	ldr	r2, [pc, #164]	@ (80060b4 <USB_SetTurnaroundTime+0x134>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d802      	bhi.n	8006018 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006012:	230a      	movs	r3, #10
 8006014:	617b      	str	r3, [r7, #20]
 8006016:	e02b      	b.n	8006070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	4a26      	ldr	r2, [pc, #152]	@ (80060b4 <USB_SetTurnaroundTime+0x134>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d906      	bls.n	800602e <USB_SetTurnaroundTime+0xae>
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	4a25      	ldr	r2, [pc, #148]	@ (80060b8 <USB_SetTurnaroundTime+0x138>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d202      	bcs.n	800602e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006028:	2309      	movs	r3, #9
 800602a:	617b      	str	r3, [r7, #20]
 800602c:	e020      	b.n	8006070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	4a21      	ldr	r2, [pc, #132]	@ (80060b8 <USB_SetTurnaroundTime+0x138>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d306      	bcc.n	8006044 <USB_SetTurnaroundTime+0xc4>
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	4a20      	ldr	r2, [pc, #128]	@ (80060bc <USB_SetTurnaroundTime+0x13c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d802      	bhi.n	8006044 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800603e:	2308      	movs	r3, #8
 8006040:	617b      	str	r3, [r7, #20]
 8006042:	e015      	b.n	8006070 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	4a1d      	ldr	r2, [pc, #116]	@ (80060bc <USB_SetTurnaroundTime+0x13c>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d906      	bls.n	800605a <USB_SetTurnaroundTime+0xda>
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	4a1c      	ldr	r2, [pc, #112]	@ (80060c0 <USB_SetTurnaroundTime+0x140>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d202      	bcs.n	800605a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006054:	2307      	movs	r3, #7
 8006056:	617b      	str	r3, [r7, #20]
 8006058:	e00a      	b.n	8006070 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800605a:	2306      	movs	r3, #6
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	e007      	b.n	8006070 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006060:	79fb      	ldrb	r3, [r7, #7]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d102      	bne.n	800606c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006066:	2309      	movs	r3, #9
 8006068:	617b      	str	r3, [r7, #20]
 800606a:	e001      	b.n	8006070 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800606c:	2309      	movs	r3, #9
 800606e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	68da      	ldr	r2, [r3, #12]
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	029b      	lsls	r3, r3, #10
 8006084:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006088:	431a      	orrs	r2, r3
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	371c      	adds	r7, #28
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr
 800609c:	00d8acbf 	.word	0x00d8acbf
 80060a0:	00e4e1c0 	.word	0x00e4e1c0
 80060a4:	00f42400 	.word	0x00f42400
 80060a8:	01067380 	.word	0x01067380
 80060ac:	011a499f 	.word	0x011a499f
 80060b0:	01312cff 	.word	0x01312cff
 80060b4:	014ca43f 	.word	0x014ca43f
 80060b8:	016e3600 	.word	0x016e3600
 80060bc:	01a6ab1f 	.word	0x01a6ab1f
 80060c0:	01e84800 	.word	0x01e84800

080060c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f043 0201 	orr.w	r2, r3, #1
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b083      	sub	sp, #12
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f023 0201 	bic.w	r2, r3, #1
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	460b      	mov	r3, r1
 8006112:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006114:	2300      	movs	r3, #0
 8006116:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006124:	78fb      	ldrb	r3, [r7, #3]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d115      	bne.n	8006156 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006136:	200a      	movs	r0, #10
 8006138:	f7fc f8a6 	bl	8002288 <HAL_Delay>
      ms += 10U;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	330a      	adds	r3, #10
 8006140:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f001 f93f 	bl	80073c6 <USB_GetMode>
 8006148:	4603      	mov	r3, r0
 800614a:	2b01      	cmp	r3, #1
 800614c:	d01e      	beq.n	800618c <USB_SetCurrentMode+0x84>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2bc7      	cmp	r3, #199	@ 0xc7
 8006152:	d9f0      	bls.n	8006136 <USB_SetCurrentMode+0x2e>
 8006154:	e01a      	b.n	800618c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006156:	78fb      	ldrb	r3, [r7, #3]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d115      	bne.n	8006188 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006168:	200a      	movs	r0, #10
 800616a:	f7fc f88d 	bl	8002288 <HAL_Delay>
      ms += 10U;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	330a      	adds	r3, #10
 8006172:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f001 f926 	bl	80073c6 <USB_GetMode>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d005      	beq.n	800618c <USB_SetCurrentMode+0x84>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2bc7      	cmp	r3, #199	@ 0xc7
 8006184:	d9f0      	bls.n	8006168 <USB_SetCurrentMode+0x60>
 8006186:	e001      	b.n	800618c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e005      	b.n	8006198 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2bc8      	cmp	r3, #200	@ 0xc8
 8006190:	d101      	bne.n	8006196 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e000      	b.n	8006198 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061a0:	b084      	sub	sp, #16
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b086      	sub	sp, #24
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80061ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80061b2:	2300      	movs	r3, #0
 80061b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80061ba:	2300      	movs	r3, #0
 80061bc:	613b      	str	r3, [r7, #16]
 80061be:	e009      	b.n	80061d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	3340      	adds	r3, #64	@ 0x40
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	2200      	movs	r2, #0
 80061cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	3301      	adds	r3, #1
 80061d2:	613b      	str	r3, [r7, #16]
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	2b0e      	cmp	r3, #14
 80061d8:	d9f2      	bls.n	80061c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80061da:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d11c      	bne.n	800621c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061e8:	685b      	ldr	r3, [r3, #4]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061f0:	f043 0302 	orr.w	r3, r3, #2
 80061f4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061fa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006206:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006212:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	639a      	str	r2, [r3, #56]	@ 0x38
 800621a:	e00b      	b.n	8006234 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006220:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800623a:	461a      	mov	r2, r3
 800623c:	2300      	movs	r3, #0
 800623e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006240:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006244:	2b01      	cmp	r3, #1
 8006246:	d10d      	bne.n	8006264 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006248:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800624c:	2b00      	cmp	r3, #0
 800624e:	d104      	bne.n	800625a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006250:	2100      	movs	r1, #0
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f968 	bl	8006528 <USB_SetDevSpeed>
 8006258:	e008      	b.n	800626c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800625a:	2101      	movs	r1, #1
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f963 	bl	8006528 <USB_SetDevSpeed>
 8006262:	e003      	b.n	800626c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006264:	2103      	movs	r1, #3
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f95e 	bl	8006528 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800626c:	2110      	movs	r1, #16
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f8fa 	bl	8006468 <USB_FlushTxFifo>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d001      	beq.n	800627e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f924 	bl	80064cc <USB_FlushRxFifo>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006294:	461a      	mov	r2, r3
 8006296:	2300      	movs	r3, #0
 8006298:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062a0:	461a      	mov	r2, r3
 80062a2:	2300      	movs	r3, #0
 80062a4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062ac:	461a      	mov	r2, r3
 80062ae:	2300      	movs	r3, #0
 80062b0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062b2:	2300      	movs	r3, #0
 80062b4:	613b      	str	r3, [r7, #16]
 80062b6:	e043      	b.n	8006340 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062ce:	d118      	bne.n	8006302 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d10a      	bne.n	80062ec <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062e2:	461a      	mov	r2, r3
 80062e4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80062e8:	6013      	str	r3, [r2, #0]
 80062ea:	e013      	b.n	8006314 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062f8:	461a      	mov	r2, r3
 80062fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80062fe:	6013      	str	r3, [r2, #0]
 8006300:	e008      	b.n	8006314 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4413      	add	r3, r2
 800630a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800630e:	461a      	mov	r2, r3
 8006310:	2300      	movs	r3, #0
 8006312:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	4413      	add	r3, r2
 800631c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006320:	461a      	mov	r2, r3
 8006322:	2300      	movs	r3, #0
 8006324:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4413      	add	r3, r2
 800632e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006332:	461a      	mov	r2, r3
 8006334:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006338:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	3301      	adds	r3, #1
 800633e:	613b      	str	r3, [r7, #16]
 8006340:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006344:	461a      	mov	r2, r3
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	4293      	cmp	r3, r2
 800634a:	d3b5      	bcc.n	80062b8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800634c:	2300      	movs	r3, #0
 800634e:	613b      	str	r3, [r7, #16]
 8006350:	e043      	b.n	80063da <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	015a      	lsls	r2, r3, #5
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4413      	add	r3, r2
 800635a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006364:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006368:	d118      	bne.n	800639c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10a      	bne.n	8006386 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800637c:	461a      	mov	r2, r3
 800637e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006382:	6013      	str	r3, [r2, #0]
 8006384:	e013      	b.n	80063ae <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	015a      	lsls	r2, r3, #5
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	4413      	add	r3, r2
 800638e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006392:	461a      	mov	r2, r3
 8006394:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006398:	6013      	str	r3, [r2, #0]
 800639a:	e008      	b.n	80063ae <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063a8:	461a      	mov	r2, r3
 80063aa:	2300      	movs	r3, #0
 80063ac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	015a      	lsls	r2, r3, #5
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	4413      	add	r3, r2
 80063b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ba:	461a      	mov	r2, r3
 80063bc:	2300      	movs	r3, #0
 80063be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	015a      	lsls	r2, r3, #5
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4413      	add	r3, r2
 80063c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063cc:	461a      	mov	r2, r3
 80063ce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80063d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	3301      	adds	r3, #1
 80063d8:	613b      	str	r3, [r7, #16]
 80063da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80063de:	461a      	mov	r2, r3
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d3b5      	bcc.n	8006352 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	68fa      	ldr	r2, [r7, #12]
 80063f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063f8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006406:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006408:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800640c:	2b00      	cmp	r3, #0
 800640e:	d105      	bne.n	800641c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	f043 0210 	orr.w	r2, r3, #16
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	699a      	ldr	r2, [r3, #24]
 8006420:	4b10      	ldr	r3, [pc, #64]	@ (8006464 <USB_DevInit+0x2c4>)
 8006422:	4313      	orrs	r3, r2
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006428:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800642c:	2b00      	cmp	r3, #0
 800642e:	d005      	beq.n	800643c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	f043 0208 	orr.w	r2, r3, #8
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800643c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006440:	2b01      	cmp	r3, #1
 8006442:	d107      	bne.n	8006454 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800644c:	f043 0304 	orr.w	r3, r3, #4
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006454:	7dfb      	ldrb	r3, [r7, #23]
}
 8006456:	4618      	mov	r0, r3
 8006458:	3718      	adds	r7, #24
 800645a:	46bd      	mov	sp, r7
 800645c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006460:	b004      	add	sp, #16
 8006462:	4770      	bx	lr
 8006464:	803c3800 	.word	0x803c3800

08006468 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006468:	b480      	push	{r7}
 800646a:	b085      	sub	sp, #20
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006472:	2300      	movs	r3, #0
 8006474:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	3301      	adds	r3, #1
 800647a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006482:	d901      	bls.n	8006488 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e01b      	b.n	80064c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	2b00      	cmp	r3, #0
 800648e:	daf2      	bge.n	8006476 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006490:	2300      	movs	r3, #0
 8006492:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	019b      	lsls	r3, r3, #6
 8006498:	f043 0220 	orr.w	r2, r3, #32
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	3301      	adds	r3, #1
 80064a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064ac:	d901      	bls.n	80064b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e006      	b.n	80064c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	f003 0320 	and.w	r3, r3, #32
 80064ba:	2b20      	cmp	r3, #32
 80064bc:	d0f0      	beq.n	80064a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064d4:	2300      	movs	r3, #0
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	3301      	adds	r3, #1
 80064dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064e4:	d901      	bls.n	80064ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e018      	b.n	800651c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	daf2      	bge.n	80064d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80064f2:	2300      	movs	r3, #0
 80064f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2210      	movs	r2, #16
 80064fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	3301      	adds	r3, #1
 8006500:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006508:	d901      	bls.n	800650e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e006      	b.n	800651c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	f003 0310 	and.w	r3, r3, #16
 8006516:	2b10      	cmp	r3, #16
 8006518:	d0f0      	beq.n	80064fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800651a:	2300      	movs	r3, #0
}
 800651c:	4618      	mov	r0, r3
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	460b      	mov	r3, r1
 8006532:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	78fb      	ldrb	r3, [r7, #3]
 8006542:	68f9      	ldr	r1, [r7, #12]
 8006544:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006548:	4313      	orrs	r3, r2
 800654a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3714      	adds	r7, #20
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800655a:	b480      	push	{r7}
 800655c:	b087      	sub	sp, #28
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f003 0306 	and.w	r3, r3, #6
 8006572:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d102      	bne.n	8006580 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800657a:	2300      	movs	r3, #0
 800657c:	75fb      	strb	r3, [r7, #23]
 800657e:	e00a      	b.n	8006596 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2b02      	cmp	r3, #2
 8006584:	d002      	beq.n	800658c <USB_GetDevSpeed+0x32>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2b06      	cmp	r3, #6
 800658a:	d102      	bne.n	8006592 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800658c:	2302      	movs	r3, #2
 800658e:	75fb      	strb	r3, [r7, #23]
 8006590:	e001      	b.n	8006596 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006592:	230f      	movs	r3, #15
 8006594:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006596:	7dfb      	ldrb	r3, [r7, #23]
}
 8006598:	4618      	mov	r0, r3
 800659a:	371c      	adds	r7, #28
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	785b      	ldrb	r3, [r3, #1]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d13a      	bne.n	8006636 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065c6:	69da      	ldr	r2, [r3, #28]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	f003 030f 	and.w	r3, r3, #15
 80065d0:	2101      	movs	r1, #1
 80065d2:	fa01 f303 	lsl.w	r3, r1, r3
 80065d6:	b29b      	uxth	r3, r3
 80065d8:	68f9      	ldr	r1, [r7, #12]
 80065da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065de:	4313      	orrs	r3, r2
 80065e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	015a      	lsls	r2, r3, #5
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	4413      	add	r3, r2
 80065ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d155      	bne.n	80066a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	015a      	lsls	r2, r3, #5
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	4413      	add	r3, r2
 8006600:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	791b      	ldrb	r3, [r3, #4]
 8006612:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006614:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	059b      	lsls	r3, r3, #22
 800661a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800661c:	4313      	orrs	r3, r2
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	0151      	lsls	r1, r2, #5
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	440a      	add	r2, r1
 8006626:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800662a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800662e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	e036      	b.n	80066a4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800663c:	69da      	ldr	r2, [r3, #28]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	781b      	ldrb	r3, [r3, #0]
 8006642:	f003 030f 	and.w	r3, r3, #15
 8006646:	2101      	movs	r1, #1
 8006648:	fa01 f303 	lsl.w	r3, r1, r3
 800664c:	041b      	lsls	r3, r3, #16
 800664e:	68f9      	ldr	r1, [r7, #12]
 8006650:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006654:	4313      	orrs	r3, r2
 8006656:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	015a      	lsls	r2, r3, #5
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	4413      	add	r3, r2
 8006660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d11a      	bne.n	80066a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	4413      	add	r3, r2
 8006676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	791b      	ldrb	r3, [r3, #4]
 8006688:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800668a:	430b      	orrs	r3, r1
 800668c:	4313      	orrs	r3, r2
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	0151      	lsls	r1, r2, #5
 8006692:	68fa      	ldr	r2, [r7, #12]
 8006694:	440a      	add	r2, r1
 8006696:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800669a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800669e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066a2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
	...

080066b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b085      	sub	sp, #20
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	785b      	ldrb	r3, [r3, #1]
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d161      	bne.n	8006794 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	015a      	lsls	r2, r3, #5
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	4413      	add	r3, r2
 80066d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066e6:	d11f      	bne.n	8006728 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	0151      	lsls	r1, r2, #5
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	440a      	add	r2, r1
 80066fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006702:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006706:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	015a      	lsls	r2, r3, #5
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4413      	add	r3, r2
 8006710:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68ba      	ldr	r2, [r7, #8]
 8006718:	0151      	lsls	r1, r2, #5
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	440a      	add	r2, r1
 800671e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006722:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006726:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800672e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	f003 030f 	and.w	r3, r3, #15
 8006738:	2101      	movs	r1, #1
 800673a:	fa01 f303 	lsl.w	r3, r1, r3
 800673e:	b29b      	uxth	r3, r3
 8006740:	43db      	mvns	r3, r3
 8006742:	68f9      	ldr	r1, [r7, #12]
 8006744:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006748:	4013      	ands	r3, r2
 800674a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006752:	69da      	ldr	r2, [r3, #28]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	f003 030f 	and.w	r3, r3, #15
 800675c:	2101      	movs	r1, #1
 800675e:	fa01 f303 	lsl.w	r3, r1, r3
 8006762:	b29b      	uxth	r3, r3
 8006764:	43db      	mvns	r3, r3
 8006766:	68f9      	ldr	r1, [r7, #12]
 8006768:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800676c:	4013      	ands	r3, r2
 800676e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	0159      	lsls	r1, r3, #5
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	440b      	add	r3, r1
 8006786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800678a:	4619      	mov	r1, r3
 800678c:	4b35      	ldr	r3, [pc, #212]	@ (8006864 <USB_DeactivateEndpoint+0x1b0>)
 800678e:	4013      	ands	r3, r2
 8006790:	600b      	str	r3, [r1, #0]
 8006792:	e060      	b.n	8006856 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	4413      	add	r3, r2
 800679c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067aa:	d11f      	bne.n	80067ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	0151      	lsls	r1, r2, #5
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	440a      	add	r2, r1
 80067c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80067ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	015a      	lsls	r2, r3, #5
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	4413      	add	r3, r2
 80067d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	0151      	lsls	r1, r2, #5
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	440a      	add	r2, r1
 80067e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	f003 030f 	and.w	r3, r3, #15
 80067fc:	2101      	movs	r1, #1
 80067fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006802:	041b      	lsls	r3, r3, #16
 8006804:	43db      	mvns	r3, r3
 8006806:	68f9      	ldr	r1, [r7, #12]
 8006808:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800680c:	4013      	ands	r3, r2
 800680e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006816:	69da      	ldr	r2, [r3, #28]
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	f003 030f 	and.w	r3, r3, #15
 8006820:	2101      	movs	r1, #1
 8006822:	fa01 f303 	lsl.w	r3, r1, r3
 8006826:	041b      	lsls	r3, r3, #16
 8006828:	43db      	mvns	r3, r3
 800682a:	68f9      	ldr	r1, [r7, #12]
 800682c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006830:	4013      	ands	r3, r2
 8006832:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	4413      	add	r3, r2
 800683c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	0159      	lsls	r1, r3, #5
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	440b      	add	r3, r1
 800684a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800684e:	4619      	mov	r1, r3
 8006850:	4b05      	ldr	r3, [pc, #20]	@ (8006868 <USB_DeactivateEndpoint+0x1b4>)
 8006852:	4013      	ands	r3, r2
 8006854:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3714      	adds	r7, #20
 800685c:	46bd      	mov	sp, r7
 800685e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006862:	4770      	bx	lr
 8006864:	ec337800 	.word	0xec337800
 8006868:	eff37800 	.word	0xeff37800

0800686c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b08a      	sub	sp, #40	@ 0x28
 8006870:	af02      	add	r7, sp, #8
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	4613      	mov	r3, r2
 8006878:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	785b      	ldrb	r3, [r3, #1]
 8006888:	2b01      	cmp	r3, #1
 800688a:	f040 817f 	bne.w	8006b8c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d132      	bne.n	80068fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	015a      	lsls	r2, r3, #5
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	4413      	add	r3, r2
 800689e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	69ba      	ldr	r2, [r7, #24]
 80068a6:	0151      	lsls	r1, r2, #5
 80068a8:	69fa      	ldr	r2, [r7, #28]
 80068aa:	440a      	add	r2, r1
 80068ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068b0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80068b4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80068b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	69ba      	ldr	r2, [r7, #24]
 80068ca:	0151      	lsls	r1, r2, #5
 80068cc:	69fa      	ldr	r2, [r7, #28]
 80068ce:	440a      	add	r2, r1
 80068d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80068d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	015a      	lsls	r2, r3, #5
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	4413      	add	r3, r2
 80068e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	69ba      	ldr	r2, [r7, #24]
 80068ea:	0151      	lsls	r1, r2, #5
 80068ec:	69fa      	ldr	r2, [r7, #28]
 80068ee:	440a      	add	r2, r1
 80068f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068f4:	0cdb      	lsrs	r3, r3, #19
 80068f6:	04db      	lsls	r3, r3, #19
 80068f8:	6113      	str	r3, [r2, #16]
 80068fa:	e097      	b.n	8006a2c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	015a      	lsls	r2, r3, #5
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	4413      	add	r3, r2
 8006904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	69ba      	ldr	r2, [r7, #24]
 800690c:	0151      	lsls	r1, r2, #5
 800690e:	69fa      	ldr	r2, [r7, #28]
 8006910:	440a      	add	r2, r1
 8006912:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006916:	0cdb      	lsrs	r3, r3, #19
 8006918:	04db      	lsls	r3, r3, #19
 800691a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	4413      	add	r3, r2
 8006924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	69ba      	ldr	r2, [r7, #24]
 800692c:	0151      	lsls	r1, r2, #5
 800692e:	69fa      	ldr	r2, [r7, #28]
 8006930:	440a      	add	r2, r1
 8006932:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006936:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800693a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800693e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d11a      	bne.n	800697c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	691a      	ldr	r2, [r3, #16]
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	429a      	cmp	r2, r3
 8006950:	d903      	bls.n	800695a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	689a      	ldr	r2, [r3, #8]
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	0151      	lsls	r1, r2, #5
 800696c:	69fa      	ldr	r2, [r7, #28]
 800696e:	440a      	add	r2, r1
 8006970:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006974:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006978:	6113      	str	r3, [r2, #16]
 800697a:	e044      	b.n	8006a06 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	691a      	ldr	r2, [r3, #16]
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	4413      	add	r3, r2
 8006986:	1e5a      	subs	r2, r3, #1
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006990:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	015a      	lsls	r2, r3, #5
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	4413      	add	r3, r2
 800699a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800699e:	691a      	ldr	r2, [r3, #16]
 80069a0:	8afb      	ldrh	r3, [r7, #22]
 80069a2:	04d9      	lsls	r1, r3, #19
 80069a4:	4ba4      	ldr	r3, [pc, #656]	@ (8006c38 <USB_EPStartXfer+0x3cc>)
 80069a6:	400b      	ands	r3, r1
 80069a8:	69b9      	ldr	r1, [r7, #24]
 80069aa:	0148      	lsls	r0, r1, #5
 80069ac:	69f9      	ldr	r1, [r7, #28]
 80069ae:	4401      	add	r1, r0
 80069b0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80069b4:	4313      	orrs	r3, r2
 80069b6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	791b      	ldrb	r3, [r3, #4]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d122      	bne.n	8006a06 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	015a      	lsls	r2, r3, #5
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	4413      	add	r3, r2
 80069c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	69ba      	ldr	r2, [r7, #24]
 80069d0:	0151      	lsls	r1, r2, #5
 80069d2:	69fa      	ldr	r2, [r7, #28]
 80069d4:	440a      	add	r2, r1
 80069d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069da:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80069de:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	015a      	lsls	r2, r3, #5
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069ec:	691a      	ldr	r2, [r3, #16]
 80069ee:	8afb      	ldrh	r3, [r7, #22]
 80069f0:	075b      	lsls	r3, r3, #29
 80069f2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80069f6:	69b9      	ldr	r1, [r7, #24]
 80069f8:	0148      	lsls	r0, r1, #5
 80069fa:	69f9      	ldr	r1, [r7, #28]
 80069fc:	4401      	add	r1, r0
 80069fe:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006a02:	4313      	orrs	r3, r2
 8006a04:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	015a      	lsls	r2, r3, #5
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a12:	691a      	ldr	r2, [r3, #16]
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a1c:	69b9      	ldr	r1, [r7, #24]
 8006a1e:	0148      	lsls	r0, r1, #5
 8006a20:	69f9      	ldr	r1, [r7, #28]
 8006a22:	4401      	add	r1, r0
 8006a24:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a2c:	79fb      	ldrb	r3, [r7, #7]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d14b      	bne.n	8006aca <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	69db      	ldr	r3, [r3, #28]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d009      	beq.n	8006a4e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	015a      	lsls	r2, r3, #5
 8006a3e:	69fb      	ldr	r3, [r7, #28]
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a46:	461a      	mov	r2, r3
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	791b      	ldrb	r3, [r3, #4]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d128      	bne.n	8006aa8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d110      	bne.n	8006a88 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a66:	69bb      	ldr	r3, [r7, #24]
 8006a68:	015a      	lsls	r2, r3, #5
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	69ba      	ldr	r2, [r7, #24]
 8006a76:	0151      	lsls	r1, r2, #5
 8006a78:	69fa      	ldr	r2, [r7, #28]
 8006a7a:	440a      	add	r2, r1
 8006a7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006a84:	6013      	str	r3, [r2, #0]
 8006a86:	e00f      	b.n	8006aa8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	015a      	lsls	r2, r3, #5
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	4413      	add	r3, r2
 8006a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	69ba      	ldr	r2, [r7, #24]
 8006a98:	0151      	lsls	r1, r2, #5
 8006a9a:	69fa      	ldr	r2, [r7, #28]
 8006a9c:	440a      	add	r2, r1
 8006a9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006aa2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006aa6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	69ba      	ldr	r2, [r7, #24]
 8006ab8:	0151      	lsls	r1, r2, #5
 8006aba:	69fa      	ldr	r2, [r7, #28]
 8006abc:	440a      	add	r2, r1
 8006abe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ac2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006ac6:	6013      	str	r3, [r2, #0]
 8006ac8:	e166      	b.n	8006d98 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	69ba      	ldr	r2, [r7, #24]
 8006ada:	0151      	lsls	r1, r2, #5
 8006adc:	69fa      	ldr	r2, [r7, #28]
 8006ade:	440a      	add	r2, r1
 8006ae0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ae4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006ae8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	791b      	ldrb	r3, [r3, #4]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d015      	beq.n	8006b1e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006af2:	68bb      	ldr	r3, [r7, #8]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f000 814e 	beq.w	8006d98 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006afc:	69fb      	ldr	r3, [r7, #28]
 8006afe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	781b      	ldrb	r3, [r3, #0]
 8006b08:	f003 030f 	and.w	r3, r3, #15
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b12:	69f9      	ldr	r1, [r7, #28]
 8006b14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	634b      	str	r3, [r1, #52]	@ 0x34
 8006b1c:	e13c      	b.n	8006d98 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d110      	bne.n	8006b50 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	015a      	lsls	r2, r3, #5
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	4413      	add	r3, r2
 8006b36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	69ba      	ldr	r2, [r7, #24]
 8006b3e:	0151      	lsls	r1, r2, #5
 8006b40:	69fa      	ldr	r2, [r7, #28]
 8006b42:	440a      	add	r2, r1
 8006b44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b48:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006b4c:	6013      	str	r3, [r2, #0]
 8006b4e:	e00f      	b.n	8006b70 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	015a      	lsls	r2, r3, #5
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	4413      	add	r3, r2
 8006b58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	0151      	lsls	r1, r2, #5
 8006b62:	69fa      	ldr	r2, [r7, #28]
 8006b64:	440a      	add	r2, r1
 8006b66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b6e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	68d9      	ldr	r1, [r3, #12]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	781a      	ldrb	r2, [r3, #0]
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	b298      	uxth	r0, r3
 8006b7e:	79fb      	ldrb	r3, [r7, #7]
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	4603      	mov	r3, r0
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f000 f9b9 	bl	8006efc <USB_WritePacket>
 8006b8a:	e105      	b.n	8006d98 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	015a      	lsls	r2, r3, #5
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	4413      	add	r3, r2
 8006b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	69ba      	ldr	r2, [r7, #24]
 8006b9c:	0151      	lsls	r1, r2, #5
 8006b9e:	69fa      	ldr	r2, [r7, #28]
 8006ba0:	440a      	add	r2, r1
 8006ba2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ba6:	0cdb      	lsrs	r3, r3, #19
 8006ba8:	04db      	lsls	r3, r3, #19
 8006baa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	015a      	lsls	r2, r3, #5
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	69ba      	ldr	r2, [r7, #24]
 8006bbc:	0151      	lsls	r1, r2, #5
 8006bbe:	69fa      	ldr	r2, [r7, #28]
 8006bc0:	440a      	add	r2, r1
 8006bc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bc6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006bca:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006bce:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006bd0:	69bb      	ldr	r3, [r7, #24]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d132      	bne.n	8006c3c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d003      	beq.n	8006be6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	689a      	ldr	r2, [r3, #8]
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	689a      	ldr	r2, [r3, #8]
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	015a      	lsls	r2, r3, #5
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bfa:	691a      	ldr	r2, [r3, #16]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	6a1b      	ldr	r3, [r3, #32]
 8006c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c04:	69b9      	ldr	r1, [r7, #24]
 8006c06:	0148      	lsls	r0, r1, #5
 8006c08:	69f9      	ldr	r1, [r7, #28]
 8006c0a:	4401      	add	r1, r0
 8006c0c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006c10:	4313      	orrs	r3, r2
 8006c12:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	015a      	lsls	r2, r3, #5
 8006c18:	69fb      	ldr	r3, [r7, #28]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	69ba      	ldr	r2, [r7, #24]
 8006c24:	0151      	lsls	r1, r2, #5
 8006c26:	69fa      	ldr	r2, [r7, #28]
 8006c28:	440a      	add	r2, r1
 8006c2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c2e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c32:	6113      	str	r3, [r2, #16]
 8006c34:	e062      	b.n	8006cfc <USB_EPStartXfer+0x490>
 8006c36:	bf00      	nop
 8006c38:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d123      	bne.n	8006c8c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006c44:	69bb      	ldr	r3, [r7, #24]
 8006c46:	015a      	lsls	r2, r3, #5
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	4413      	add	r3, r2
 8006c4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c50:	691a      	ldr	r2, [r3, #16]
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c5a:	69b9      	ldr	r1, [r7, #24]
 8006c5c:	0148      	lsls	r0, r1, #5
 8006c5e:	69f9      	ldr	r1, [r7, #28]
 8006c60:	4401      	add	r1, r0
 8006c62:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006c66:	4313      	orrs	r3, r2
 8006c68:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	0151      	lsls	r1, r2, #5
 8006c7c:	69fa      	ldr	r2, [r7, #28]
 8006c7e:	440a      	add	r2, r1
 8006c80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c84:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c88:	6113      	str	r3, [r2, #16]
 8006c8a:	e037      	b.n	8006cfc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	691a      	ldr	r2, [r3, #16]
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	4413      	add	r3, r2
 8006c96:	1e5a      	subs	r2, r3, #1
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ca0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	8afa      	ldrh	r2, [r7, #22]
 8006ca8:	fb03 f202 	mul.w	r2, r3, r2
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cbc:	691a      	ldr	r2, [r3, #16]
 8006cbe:	8afb      	ldrh	r3, [r7, #22]
 8006cc0:	04d9      	lsls	r1, r3, #19
 8006cc2:	4b38      	ldr	r3, [pc, #224]	@ (8006da4 <USB_EPStartXfer+0x538>)
 8006cc4:	400b      	ands	r3, r1
 8006cc6:	69b9      	ldr	r1, [r7, #24]
 8006cc8:	0148      	lsls	r0, r1, #5
 8006cca:	69f9      	ldr	r1, [r7, #28]
 8006ccc:	4401      	add	r1, r0
 8006cce:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	015a      	lsls	r2, r3, #5
 8006cda:	69fb      	ldr	r3, [r7, #28]
 8006cdc:	4413      	add	r3, r2
 8006cde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ce2:	691a      	ldr	r2, [r3, #16]
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	6a1b      	ldr	r3, [r3, #32]
 8006ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cec:	69b9      	ldr	r1, [r7, #24]
 8006cee:	0148      	lsls	r0, r1, #5
 8006cf0:	69f9      	ldr	r1, [r7, #28]
 8006cf2:	4401      	add	r1, r0
 8006cf4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006cfc:	79fb      	ldrb	r3, [r7, #7]
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d10d      	bne.n	8006d1e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d009      	beq.n	8006d1e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	68d9      	ldr	r1, [r3, #12]
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	015a      	lsls	r2, r3, #5
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	4413      	add	r3, r2
 8006d16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d1a:	460a      	mov	r2, r1
 8006d1c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	791b      	ldrb	r3, [r3, #4]
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d128      	bne.n	8006d78 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d110      	bne.n	8006d58 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	015a      	lsls	r2, r3, #5
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	69ba      	ldr	r2, [r7, #24]
 8006d46:	0151      	lsls	r1, r2, #5
 8006d48:	69fa      	ldr	r2, [r7, #28]
 8006d4a:	440a      	add	r2, r1
 8006d4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d50:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006d54:	6013      	str	r3, [r2, #0]
 8006d56:	e00f      	b.n	8006d78 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	0151      	lsls	r1, r2, #5
 8006d6a:	69fa      	ldr	r2, [r7, #28]
 8006d6c:	440a      	add	r2, r1
 8006d6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d76:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	69ba      	ldr	r2, [r7, #24]
 8006d88:	0151      	lsls	r1, r2, #5
 8006d8a:	69fa      	ldr	r2, [r7, #28]
 8006d8c:	440a      	add	r2, r1
 8006d8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d92:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006d96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3720      	adds	r7, #32
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop
 8006da4:	1ff80000 	.word	0x1ff80000

08006da8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b087      	sub	sp, #28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006db2:	2300      	movs	r3, #0
 8006db4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006db6:	2300      	movs	r3, #0
 8006db8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	785b      	ldrb	r3, [r3, #1]
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d14a      	bne.n	8006e5c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006dde:	f040 8086 	bne.w	8006eee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	015a      	lsls	r2, r3, #5
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	4413      	add	r3, r2
 8006dec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	683a      	ldr	r2, [r7, #0]
 8006df4:	7812      	ldrb	r2, [r2, #0]
 8006df6:	0151      	lsls	r1, r2, #5
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	440a      	add	r2, r1
 8006dfc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e00:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006e04:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	781b      	ldrb	r3, [r3, #0]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	683a      	ldr	r2, [r7, #0]
 8006e18:	7812      	ldrb	r2, [r2, #0]
 8006e1a:	0151      	lsls	r1, r2, #5
 8006e1c:	693a      	ldr	r2, [r7, #16]
 8006e1e:	440a      	add	r2, r1
 8006e20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e24:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d902      	bls.n	8006e40 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	75fb      	strb	r3, [r7, #23]
          break;
 8006e3e:	e056      	b.n	8006eee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	015a      	lsls	r2, r3, #5
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	4413      	add	r3, r2
 8006e4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e58:	d0e7      	beq.n	8006e2a <USB_EPStopXfer+0x82>
 8006e5a:	e048      	b.n	8006eee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	015a      	lsls	r2, r3, #5
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	4413      	add	r3, r2
 8006e66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e74:	d13b      	bne.n	8006eee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	7812      	ldrb	r2, [r2, #0]
 8006e8a:	0151      	lsls	r1, r2, #5
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	440a      	add	r2, r1
 8006e90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e94:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006e98:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	781b      	ldrb	r3, [r3, #0]
 8006e9e:	015a      	lsls	r2, r3, #5
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	7812      	ldrb	r2, [r2, #0]
 8006eae:	0151      	lsls	r1, r2, #5
 8006eb0:	693a      	ldr	r2, [r7, #16]
 8006eb2:	440a      	add	r2, r1
 8006eb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006eb8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ebc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d902      	bls.n	8006ed4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006ece:	2301      	movs	r3, #1
 8006ed0:	75fb      	strb	r3, [r7, #23]
          break;
 8006ed2:	e00c      	b.n	8006eee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	015a      	lsls	r2, r3, #5
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	4413      	add	r3, r2
 8006ede:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ee8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006eec:	d0e7      	beq.n	8006ebe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	371c      	adds	r7, #28
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b089      	sub	sp, #36	@ 0x24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	4611      	mov	r1, r2
 8006f08:	461a      	mov	r2, r3
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	71fb      	strb	r3, [r7, #7]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006f1a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d123      	bne.n	8006f6a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006f22:	88bb      	ldrh	r3, [r7, #4]
 8006f24:	3303      	adds	r3, #3
 8006f26:	089b      	lsrs	r3, r3, #2
 8006f28:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	61bb      	str	r3, [r7, #24]
 8006f2e:	e018      	b.n	8006f62 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006f30:	79fb      	ldrb	r3, [r7, #7]
 8006f32:	031a      	lsls	r2, r3, #12
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	4413      	add	r3, r2
 8006f38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	3301      	adds	r3, #1
 8006f48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	3301      	adds	r3, #1
 8006f54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	61bb      	str	r3, [r7, #24]
 8006f62:	69ba      	ldr	r2, [r7, #24]
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d3e2      	bcc.n	8006f30 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3724      	adds	r7, #36	@ 0x24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b08b      	sub	sp, #44	@ 0x2c
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	4613      	mov	r3, r2
 8006f84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006f8e:	88fb      	ldrh	r3, [r7, #6]
 8006f90:	089b      	lsrs	r3, r3, #2
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006f96:	88fb      	ldrh	r3, [r7, #6]
 8006f98:	f003 0303 	and.w	r3, r3, #3
 8006f9c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	623b      	str	r3, [r7, #32]
 8006fa2:	e014      	b.n	8006fce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fae:	601a      	str	r2, [r3, #0]
    pDest++;
 8006fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb8:	3301      	adds	r3, #1
 8006fba:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
 8006fca:	3301      	adds	r3, #1
 8006fcc:	623b      	str	r3, [r7, #32]
 8006fce:	6a3a      	ldr	r2, [r7, #32]
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d3e6      	bcc.n	8006fa4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006fd6:	8bfb      	ldrh	r3, [r7, #30]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d01e      	beq.n	800701a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006fe0:	69bb      	ldr	r3, [r7, #24]
 8006fe2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	f107 0310 	add.w	r3, r7, #16
 8006fec:	6812      	ldr	r2, [r2, #0]
 8006fee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	6a3b      	ldr	r3, [r7, #32]
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	00db      	lsls	r3, r3, #3
 8006ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007000:	701a      	strb	r2, [r3, #0]
      i++;
 8007002:	6a3b      	ldr	r3, [r7, #32]
 8007004:	3301      	adds	r3, #1
 8007006:	623b      	str	r3, [r7, #32]
      pDest++;
 8007008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700a:	3301      	adds	r3, #1
 800700c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800700e:	8bfb      	ldrh	r3, [r7, #30]
 8007010:	3b01      	subs	r3, #1
 8007012:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007014:	8bfb      	ldrh	r3, [r7, #30]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1ea      	bne.n	8006ff0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800701a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800701c:	4618      	mov	r0, r3
 800701e:	372c      	adds	r7, #44	@ 0x2c
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	785b      	ldrb	r3, [r3, #1]
 8007040:	2b01      	cmp	r3, #1
 8007042:	d12c      	bne.n	800709e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	015a      	lsls	r2, r3, #5
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	4413      	add	r3, r2
 800704c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	db12      	blt.n	800707c <USB_EPSetStall+0x54>
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00f      	beq.n	800707c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	015a      	lsls	r2, r3, #5
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	4413      	add	r3, r2
 8007064:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	0151      	lsls	r1, r2, #5
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	440a      	add	r2, r1
 8007072:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007076:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800707a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	015a      	lsls	r2, r3, #5
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4413      	add	r3, r2
 8007084:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	0151      	lsls	r1, r2, #5
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	440a      	add	r2, r1
 8007092:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007096:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800709a:	6013      	str	r3, [r2, #0]
 800709c:	e02b      	b.n	80070f6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	015a      	lsls	r2, r3, #5
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	4413      	add	r3, r2
 80070a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	db12      	blt.n	80070d6 <USB_EPSetStall+0xae>
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00f      	beq.n	80070d6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	0151      	lsls	r1, r2, #5
 80070c8:	68fa      	ldr	r2, [r7, #12]
 80070ca:	440a      	add	r2, r1
 80070cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80070d4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	015a      	lsls	r2, r3, #5
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	4413      	add	r3, r2
 80070de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68ba      	ldr	r2, [r7, #8]
 80070e6:	0151      	lsls	r1, r2, #5
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	440a      	add	r2, r1
 80070ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80070f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	785b      	ldrb	r3, [r3, #1]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d128      	bne.n	8007172 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	4413      	add	r3, r2
 8007128:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	0151      	lsls	r1, r2, #5
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	440a      	add	r2, r1
 8007136:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800713a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800713e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	791b      	ldrb	r3, [r3, #4]
 8007144:	2b03      	cmp	r3, #3
 8007146:	d003      	beq.n	8007150 <USB_EPClearStall+0x4c>
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	791b      	ldrb	r3, [r3, #4]
 800714c:	2b02      	cmp	r3, #2
 800714e:	d138      	bne.n	80071c2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	015a      	lsls	r2, r3, #5
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	4413      	add	r3, r2
 8007158:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	0151      	lsls	r1, r2, #5
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	440a      	add	r2, r1
 8007166:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800716a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800716e:	6013      	str	r3, [r2, #0]
 8007170:	e027      	b.n	80071c2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	015a      	lsls	r2, r3, #5
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	4413      	add	r3, r2
 800717a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68ba      	ldr	r2, [r7, #8]
 8007182:	0151      	lsls	r1, r2, #5
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	440a      	add	r2, r1
 8007188:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800718c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007190:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	791b      	ldrb	r3, [r3, #4]
 8007196:	2b03      	cmp	r3, #3
 8007198:	d003      	beq.n	80071a2 <USB_EPClearStall+0x9e>
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	791b      	ldrb	r3, [r3, #4]
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d10f      	bne.n	80071c2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	015a      	lsls	r2, r3, #5
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	4413      	add	r3, r2
 80071aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	0151      	lsls	r1, r2, #5
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	440a      	add	r2, r1
 80071b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071c0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	460b      	mov	r3, r1
 80071da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071ee:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80071f2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	78fb      	ldrb	r3, [r7, #3]
 80071fe:	011b      	lsls	r3, r3, #4
 8007200:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007204:	68f9      	ldr	r1, [r7, #12]
 8007206:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800720a:	4313      	orrs	r3, r2
 800720c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800720e:	2300      	movs	r3, #0
}
 8007210:	4618      	mov	r0, r3
 8007212:	3714      	adds	r7, #20
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007236:	f023 0303 	bic.w	r3, r3, #3
 800723a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800724a:	f023 0302 	bic.w	r3, r3, #2
 800724e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3714      	adds	r7, #20
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800725e:	b480      	push	{r7}
 8007260:	b085      	sub	sp, #20
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007278:	f023 0303 	bic.w	r3, r3, #3
 800727c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800728c:	f043 0302 	orr.w	r3, r3, #2
 8007290:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3714      	adds	r7, #20
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b085      	sub	sp, #20
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	695b      	ldr	r3, [r3, #20]
 80072ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	4013      	ands	r3, r2
 80072b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80072b8:	68fb      	ldr	r3, [r7, #12]
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr

080072c6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80072c6:	b480      	push	{r7}
 80072c8:	b085      	sub	sp, #20
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072e2:	69db      	ldr	r3, [r3, #28]
 80072e4:	68ba      	ldr	r2, [r7, #8]
 80072e6:	4013      	ands	r3, r2
 80072e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	0c1b      	lsrs	r3, r3, #16
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3714      	adds	r7, #20
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr

080072fa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80072fa:	b480      	push	{r7}
 80072fc:	b085      	sub	sp, #20
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007316:	69db      	ldr	r3, [r3, #28]
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	4013      	ands	r3, r2
 800731c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	b29b      	uxth	r3, r3
}
 8007322:	4618      	mov	r0, r3
 8007324:	3714      	adds	r7, #20
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800732e:	b480      	push	{r7}
 8007330:	b085      	sub	sp, #20
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	460b      	mov	r3, r1
 8007338:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800733e:	78fb      	ldrb	r3, [r7, #3]
 8007340:	015a      	lsls	r2, r3, #5
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	4413      	add	r3, r2
 8007346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	4013      	ands	r3, r2
 800735a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800735c:	68bb      	ldr	r3, [r7, #8]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3714      	adds	r7, #20
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr

0800736a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800736a:	b480      	push	{r7}
 800736c:	b087      	sub	sp, #28
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	460b      	mov	r3, r1
 8007374:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007380:	691b      	ldr	r3, [r3, #16]
 8007382:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800738a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800738c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800738e:	78fb      	ldrb	r3, [r7, #3]
 8007390:	f003 030f 	and.w	r3, r3, #15
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	fa22 f303 	lsr.w	r3, r2, r3
 800739a:	01db      	lsls	r3, r3, #7
 800739c:	b2db      	uxtb	r3, r3
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80073a4:	78fb      	ldrb	r3, [r7, #3]
 80073a6:	015a      	lsls	r2, r3, #5
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	4413      	add	r3, r2
 80073ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	693a      	ldr	r2, [r7, #16]
 80073b4:	4013      	ands	r3, r2
 80073b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80073b8:	68bb      	ldr	r3, [r7, #8]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	371c      	adds	r7, #28
 80073be:	46bd      	mov	sp, r7
 80073c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c4:	4770      	bx	lr

080073c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80073c6:	b480      	push	{r7}
 80073c8:	b083      	sub	sp, #12
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	f003 0301 	and.w	r3, r3, #1
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	370c      	adds	r7, #12
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr

080073e2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b085      	sub	sp, #20
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	68fa      	ldr	r2, [r7, #12]
 80073f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073fc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007400:	f023 0307 	bic.w	r3, r3, #7
 8007404:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007414:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007418:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3714      	adds	r7, #20
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007428:	b480      	push	{r7}
 800742a:	b087      	sub	sp, #28
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	460b      	mov	r3, r1
 8007432:	607a      	str	r2, [r7, #4]
 8007434:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	333c      	adds	r3, #60	@ 0x3c
 800743e:	3304      	adds	r3, #4
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	4a26      	ldr	r2, [pc, #152]	@ (80074e0 <USB_EP0_OutStart+0xb8>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d90a      	bls.n	8007462 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007458:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800745c:	d101      	bne.n	8007462 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800745e:	2300      	movs	r3, #0
 8007460:	e037      	b.n	80074d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007468:	461a      	mov	r2, r3
 800746a:	2300      	movs	r3, #0
 800746c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800747c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007480:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007490:	f043 0318 	orr.w	r3, r3, #24
 8007494:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	697a      	ldr	r2, [r7, #20]
 80074a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074a4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80074a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80074aa:	7afb      	ldrb	r3, [r7, #11]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d10f      	bne.n	80074d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074b6:	461a      	mov	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074ca:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80074ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	371c      	adds	r7, #28
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	4f54300a 	.word	0x4f54300a

080074e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074ec:	2300      	movs	r3, #0
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	3301      	adds	r3, #1
 80074f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074fc:	d901      	bls.n	8007502 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e01b      	b.n	800753a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	2b00      	cmp	r3, #0
 8007508:	daf2      	bge.n	80074f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800750a:	2300      	movs	r3, #0
 800750c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	f043 0201 	orr.w	r2, r3, #1
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	3301      	adds	r3, #1
 800751e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007526:	d901      	bls.n	800752c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007528:	2303      	movs	r3, #3
 800752a:	e006      	b.n	800753a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	f003 0301 	and.w	r3, r3, #1
 8007534:	2b01      	cmp	r3, #1
 8007536:	d0f0      	beq.n	800751a <USB_CoreReset+0x36>

  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr
	...

08007548 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	460b      	mov	r3, r1
 8007552:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007554:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007558:	f002 fc2e 	bl	8009db8 <USBD_static_malloc>
 800755c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d109      	bne.n	8007578 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	32b0      	adds	r2, #176	@ 0xb0
 800756e:	2100      	movs	r1, #0
 8007570:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007574:	2302      	movs	r3, #2
 8007576:	e0d4      	b.n	8007722 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007578:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800757c:	2100      	movs	r1, #0
 800757e:	68f8      	ldr	r0, [r7, #12]
 8007580:	f002 fc5e 	bl	8009e40 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	32b0      	adds	r2, #176	@ 0xb0
 800758e:	68f9      	ldr	r1, [r7, #12]
 8007590:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	32b0      	adds	r2, #176	@ 0xb0
 800759e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	7c1b      	ldrb	r3, [r3, #16]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d138      	bne.n	8007622 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80075b0:	4b5e      	ldr	r3, [pc, #376]	@ (800772c <USBD_CDC_Init+0x1e4>)
 80075b2:	7819      	ldrb	r1, [r3, #0]
 80075b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80075b8:	2202      	movs	r2, #2
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f002 fad9 	bl	8009b72 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80075c0:	4b5a      	ldr	r3, [pc, #360]	@ (800772c <USBD_CDC_Init+0x1e4>)
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	f003 020f 	and.w	r2, r3, #15
 80075c8:	6879      	ldr	r1, [r7, #4]
 80075ca:	4613      	mov	r3, r2
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	4413      	add	r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	440b      	add	r3, r1
 80075d4:	3324      	adds	r3, #36	@ 0x24
 80075d6:	2201      	movs	r2, #1
 80075d8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80075da:	4b55      	ldr	r3, [pc, #340]	@ (8007730 <USBD_CDC_Init+0x1e8>)
 80075dc:	7819      	ldrb	r1, [r3, #0]
 80075de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80075e2:	2202      	movs	r2, #2
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f002 fac4 	bl	8009b72 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80075ea:	4b51      	ldr	r3, [pc, #324]	@ (8007730 <USBD_CDC_Init+0x1e8>)
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	f003 020f 	and.w	r2, r3, #15
 80075f2:	6879      	ldr	r1, [r7, #4]
 80075f4:	4613      	mov	r3, r2
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	4413      	add	r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	440b      	add	r3, r1
 80075fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007602:	2201      	movs	r2, #1
 8007604:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007606:	4b4b      	ldr	r3, [pc, #300]	@ (8007734 <USBD_CDC_Init+0x1ec>)
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	f003 020f 	and.w	r2, r3, #15
 800760e:	6879      	ldr	r1, [r7, #4]
 8007610:	4613      	mov	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4413      	add	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	440b      	add	r3, r1
 800761a:	3326      	adds	r3, #38	@ 0x26
 800761c:	2210      	movs	r2, #16
 800761e:	801a      	strh	r2, [r3, #0]
 8007620:	e035      	b.n	800768e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007622:	4b42      	ldr	r3, [pc, #264]	@ (800772c <USBD_CDC_Init+0x1e4>)
 8007624:	7819      	ldrb	r1, [r3, #0]
 8007626:	2340      	movs	r3, #64	@ 0x40
 8007628:	2202      	movs	r2, #2
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f002 faa1 	bl	8009b72 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007630:	4b3e      	ldr	r3, [pc, #248]	@ (800772c <USBD_CDC_Init+0x1e4>)
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	f003 020f 	and.w	r2, r3, #15
 8007638:	6879      	ldr	r1, [r7, #4]
 800763a:	4613      	mov	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	440b      	add	r3, r1
 8007644:	3324      	adds	r3, #36	@ 0x24
 8007646:	2201      	movs	r2, #1
 8007648:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800764a:	4b39      	ldr	r3, [pc, #228]	@ (8007730 <USBD_CDC_Init+0x1e8>)
 800764c:	7819      	ldrb	r1, [r3, #0]
 800764e:	2340      	movs	r3, #64	@ 0x40
 8007650:	2202      	movs	r2, #2
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f002 fa8d 	bl	8009b72 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007658:	4b35      	ldr	r3, [pc, #212]	@ (8007730 <USBD_CDC_Init+0x1e8>)
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	f003 020f 	and.w	r2, r3, #15
 8007660:	6879      	ldr	r1, [r7, #4]
 8007662:	4613      	mov	r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	4413      	add	r3, r2
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	440b      	add	r3, r1
 800766c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007670:	2201      	movs	r2, #1
 8007672:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007674:	4b2f      	ldr	r3, [pc, #188]	@ (8007734 <USBD_CDC_Init+0x1ec>)
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	f003 020f 	and.w	r2, r3, #15
 800767c:	6879      	ldr	r1, [r7, #4]
 800767e:	4613      	mov	r3, r2
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	4413      	add	r3, r2
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	440b      	add	r3, r1
 8007688:	3326      	adds	r3, #38	@ 0x26
 800768a:	2210      	movs	r2, #16
 800768c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800768e:	4b29      	ldr	r3, [pc, #164]	@ (8007734 <USBD_CDC_Init+0x1ec>)
 8007690:	7819      	ldrb	r1, [r3, #0]
 8007692:	2308      	movs	r3, #8
 8007694:	2203      	movs	r2, #3
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f002 fa6b 	bl	8009b72 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800769c:	4b25      	ldr	r3, [pc, #148]	@ (8007734 <USBD_CDC_Init+0x1ec>)
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	f003 020f 	and.w	r2, r3, #15
 80076a4:	6879      	ldr	r1, [r7, #4]
 80076a6:	4613      	mov	r3, r2
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	4413      	add	r3, r2
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	440b      	add	r3, r1
 80076b0:	3324      	adds	r3, #36	@ 0x24
 80076b2:	2201      	movs	r2, #1
 80076b4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	2200      	movs	r2, #0
 80076ba:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	33b0      	adds	r3, #176	@ 0xb0
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4413      	add	r3, r2
 80076cc:	685b      	ldr	r3, [r3, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2200      	movs	r2, #0
 80076de:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d101      	bne.n	80076f0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80076ec:	2302      	movs	r3, #2
 80076ee:	e018      	b.n	8007722 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	7c1b      	ldrb	r3, [r3, #16]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10a      	bne.n	800770e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80076f8:	4b0d      	ldr	r3, [pc, #52]	@ (8007730 <USBD_CDC_Init+0x1e8>)
 80076fa:	7819      	ldrb	r1, [r3, #0]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007702:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f002 fb22 	bl	8009d50 <USBD_LL_PrepareReceive>
 800770c:	e008      	b.n	8007720 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800770e:	4b08      	ldr	r3, [pc, #32]	@ (8007730 <USBD_CDC_Init+0x1e8>)
 8007710:	7819      	ldrb	r1, [r3, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007718:	2340      	movs	r3, #64	@ 0x40
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f002 fb18 	bl	8009d50 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3710      	adds	r7, #16
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	20000117 	.word	0x20000117
 8007730:	20000118 	.word	0x20000118
 8007734:	20000119 	.word	0x20000119

08007738 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	460b      	mov	r3, r1
 8007742:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007744:	4b3a      	ldr	r3, [pc, #232]	@ (8007830 <USBD_CDC_DeInit+0xf8>)
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	4619      	mov	r1, r3
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f002 fa37 	bl	8009bbe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007750:	4b37      	ldr	r3, [pc, #220]	@ (8007830 <USBD_CDC_DeInit+0xf8>)
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	f003 020f 	and.w	r2, r3, #15
 8007758:	6879      	ldr	r1, [r7, #4]
 800775a:	4613      	mov	r3, r2
 800775c:	009b      	lsls	r3, r3, #2
 800775e:	4413      	add	r3, r2
 8007760:	009b      	lsls	r3, r3, #2
 8007762:	440b      	add	r3, r1
 8007764:	3324      	adds	r3, #36	@ 0x24
 8007766:	2200      	movs	r2, #0
 8007768:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800776a:	4b32      	ldr	r3, [pc, #200]	@ (8007834 <USBD_CDC_DeInit+0xfc>)
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f002 fa24 	bl	8009bbe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007776:	4b2f      	ldr	r3, [pc, #188]	@ (8007834 <USBD_CDC_DeInit+0xfc>)
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	f003 020f 	and.w	r2, r3, #15
 800777e:	6879      	ldr	r1, [r7, #4]
 8007780:	4613      	mov	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	4413      	add	r3, r2
 8007786:	009b      	lsls	r3, r3, #2
 8007788:	440b      	add	r3, r1
 800778a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800778e:	2200      	movs	r2, #0
 8007790:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007792:	4b29      	ldr	r3, [pc, #164]	@ (8007838 <USBD_CDC_DeInit+0x100>)
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	4619      	mov	r1, r3
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f002 fa10 	bl	8009bbe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800779e:	4b26      	ldr	r3, [pc, #152]	@ (8007838 <USBD_CDC_DeInit+0x100>)
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	f003 020f 	and.w	r2, r3, #15
 80077a6:	6879      	ldr	r1, [r7, #4]
 80077a8:	4613      	mov	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4413      	add	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	440b      	add	r3, r1
 80077b2:	3324      	adds	r3, #36	@ 0x24
 80077b4:	2200      	movs	r2, #0
 80077b6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80077b8:	4b1f      	ldr	r3, [pc, #124]	@ (8007838 <USBD_CDC_DeInit+0x100>)
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	f003 020f 	and.w	r2, r3, #15
 80077c0:	6879      	ldr	r1, [r7, #4]
 80077c2:	4613      	mov	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4413      	add	r3, r2
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	440b      	add	r3, r1
 80077cc:	3326      	adds	r3, #38	@ 0x26
 80077ce:	2200      	movs	r2, #0
 80077d0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	32b0      	adds	r2, #176	@ 0xb0
 80077dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d01f      	beq.n	8007824 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	33b0      	adds	r3, #176	@ 0xb0
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	4413      	add	r3, r2
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	32b0      	adds	r2, #176	@ 0xb0
 8007802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007806:	4618      	mov	r0, r3
 8007808:	f002 fae4 	bl	8009dd4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	32b0      	adds	r2, #176	@ 0xb0
 8007816:	2100      	movs	r1, #0
 8007818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3708      	adds	r7, #8
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}
 800782e:	bf00      	nop
 8007830:	20000117 	.word	0x20000117
 8007834:	20000118 	.word	0x20000118
 8007838:	20000119 	.word	0x20000119

0800783c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	32b0      	adds	r2, #176	@ 0xb0
 8007850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007854:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007856:	2300      	movs	r3, #0
 8007858:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800785a:	2300      	movs	r3, #0
 800785c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800785e:	2300      	movs	r3, #0
 8007860:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d101      	bne.n	800786c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007868:	2303      	movs	r3, #3
 800786a:	e0bf      	b.n	80079ec <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007874:	2b00      	cmp	r3, #0
 8007876:	d050      	beq.n	800791a <USBD_CDC_Setup+0xde>
 8007878:	2b20      	cmp	r3, #32
 800787a:	f040 80af 	bne.w	80079dc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	88db      	ldrh	r3, [r3, #6]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d03a      	beq.n	80078fc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	b25b      	sxtb	r3, r3
 800788c:	2b00      	cmp	r3, #0
 800788e:	da1b      	bge.n	80078c8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007896:	687a      	ldr	r2, [r7, #4]
 8007898:	33b0      	adds	r3, #176	@ 0xb0
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	689b      	ldr	r3, [r3, #8]
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80078a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80078a8:	683a      	ldr	r2, [r7, #0]
 80078aa:	88d2      	ldrh	r2, [r2, #6]
 80078ac:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	88db      	ldrh	r3, [r3, #6]
 80078b2:	2b07      	cmp	r3, #7
 80078b4:	bf28      	it	cs
 80078b6:	2307      	movcs	r3, #7
 80078b8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	89fa      	ldrh	r2, [r7, #14]
 80078be:	4619      	mov	r1, r3
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f001 fd53 	bl	800936c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80078c6:	e090      	b.n	80079ea <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	785a      	ldrb	r2, [r3, #1]
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	88db      	ldrh	r3, [r3, #6]
 80078d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80078d8:	d803      	bhi.n	80078e2 <USBD_CDC_Setup+0xa6>
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	88db      	ldrh	r3, [r3, #6]
 80078de:	b2da      	uxtb	r2, r3
 80078e0:	e000      	b.n	80078e4 <USBD_CDC_Setup+0xa8>
 80078e2:	2240      	movs	r2, #64	@ 0x40
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80078ea:	6939      	ldr	r1, [r7, #16]
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80078f2:	461a      	mov	r2, r3
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f001 fd65 	bl	80093c4 <USBD_CtlPrepareRx>
      break;
 80078fa:	e076      	b.n	80079ea <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	33b0      	adds	r3, #176	@ 0xb0
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	4413      	add	r3, r2
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	7850      	ldrb	r0, [r2, #1]
 8007912:	2200      	movs	r2, #0
 8007914:	6839      	ldr	r1, [r7, #0]
 8007916:	4798      	blx	r3
      break;
 8007918:	e067      	b.n	80079ea <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	785b      	ldrb	r3, [r3, #1]
 800791e:	2b0b      	cmp	r3, #11
 8007920:	d851      	bhi.n	80079c6 <USBD_CDC_Setup+0x18a>
 8007922:	a201      	add	r2, pc, #4	@ (adr r2, 8007928 <USBD_CDC_Setup+0xec>)
 8007924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007928:	08007959 	.word	0x08007959
 800792c:	080079d5 	.word	0x080079d5
 8007930:	080079c7 	.word	0x080079c7
 8007934:	080079c7 	.word	0x080079c7
 8007938:	080079c7 	.word	0x080079c7
 800793c:	080079c7 	.word	0x080079c7
 8007940:	080079c7 	.word	0x080079c7
 8007944:	080079c7 	.word	0x080079c7
 8007948:	080079c7 	.word	0x080079c7
 800794c:	080079c7 	.word	0x080079c7
 8007950:	08007983 	.word	0x08007983
 8007954:	080079ad 	.word	0x080079ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800795e:	b2db      	uxtb	r3, r3
 8007960:	2b03      	cmp	r3, #3
 8007962:	d107      	bne.n	8007974 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007964:	f107 030a 	add.w	r3, r7, #10
 8007968:	2202      	movs	r2, #2
 800796a:	4619      	mov	r1, r3
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f001 fcfd 	bl	800936c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007972:	e032      	b.n	80079da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007974:	6839      	ldr	r1, [r7, #0]
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f001 fc7b 	bl	8009272 <USBD_CtlError>
            ret = USBD_FAIL;
 800797c:	2303      	movs	r3, #3
 800797e:	75fb      	strb	r3, [r7, #23]
          break;
 8007980:	e02b      	b.n	80079da <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007988:	b2db      	uxtb	r3, r3
 800798a:	2b03      	cmp	r3, #3
 800798c:	d107      	bne.n	800799e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800798e:	f107 030d 	add.w	r3, r7, #13
 8007992:	2201      	movs	r2, #1
 8007994:	4619      	mov	r1, r3
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f001 fce8 	bl	800936c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800799c:	e01d      	b.n	80079da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f001 fc66 	bl	8009272 <USBD_CtlError>
            ret = USBD_FAIL;
 80079a6:	2303      	movs	r3, #3
 80079a8:	75fb      	strb	r3, [r7, #23]
          break;
 80079aa:	e016      	b.n	80079da <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	2b03      	cmp	r3, #3
 80079b6:	d00f      	beq.n	80079d8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80079b8:	6839      	ldr	r1, [r7, #0]
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f001 fc59 	bl	8009272 <USBD_CtlError>
            ret = USBD_FAIL;
 80079c0:	2303      	movs	r3, #3
 80079c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80079c4:	e008      	b.n	80079d8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80079c6:	6839      	ldr	r1, [r7, #0]
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f001 fc52 	bl	8009272 <USBD_CtlError>
          ret = USBD_FAIL;
 80079ce:	2303      	movs	r3, #3
 80079d0:	75fb      	strb	r3, [r7, #23]
          break;
 80079d2:	e002      	b.n	80079da <USBD_CDC_Setup+0x19e>
          break;
 80079d4:	bf00      	nop
 80079d6:	e008      	b.n	80079ea <USBD_CDC_Setup+0x1ae>
          break;
 80079d8:	bf00      	nop
      }
      break;
 80079da:	e006      	b.n	80079ea <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f001 fc47 	bl	8009272 <USBD_CtlError>
      ret = USBD_FAIL;
 80079e4:	2303      	movs	r3, #3
 80079e6:	75fb      	strb	r3, [r7, #23]
      break;
 80079e8:	bf00      	nop
  }

  return (uint8_t)ret;
 80079ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	3718      	adds	r7, #24
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	460b      	mov	r3, r1
 80079fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007a06:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	32b0      	adds	r2, #176	@ 0xb0
 8007a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d101      	bne.n	8007a1e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e065      	b.n	8007aea <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	32b0      	adds	r2, #176	@ 0xb0
 8007a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a2c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007a2e:	78fb      	ldrb	r3, [r7, #3]
 8007a30:	f003 020f 	and.w	r2, r3, #15
 8007a34:	6879      	ldr	r1, [r7, #4]
 8007a36:	4613      	mov	r3, r2
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	4413      	add	r3, r2
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	440b      	add	r3, r1
 8007a40:	3318      	adds	r3, #24
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d02f      	beq.n	8007aa8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007a48:	78fb      	ldrb	r3, [r7, #3]
 8007a4a:	f003 020f 	and.w	r2, r3, #15
 8007a4e:	6879      	ldr	r1, [r7, #4]
 8007a50:	4613      	mov	r3, r2
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	4413      	add	r3, r2
 8007a56:	009b      	lsls	r3, r3, #2
 8007a58:	440b      	add	r3, r1
 8007a5a:	3318      	adds	r3, #24
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	78fb      	ldrb	r3, [r7, #3]
 8007a60:	f003 010f 	and.w	r1, r3, #15
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	460b      	mov	r3, r1
 8007a68:	00db      	lsls	r3, r3, #3
 8007a6a:	440b      	add	r3, r1
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	4403      	add	r3, r0
 8007a70:	331c      	adds	r3, #28
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	fbb2 f1f3 	udiv	r1, r2, r3
 8007a78:	fb01 f303 	mul.w	r3, r1, r3
 8007a7c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d112      	bne.n	8007aa8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007a82:	78fb      	ldrb	r3, [r7, #3]
 8007a84:	f003 020f 	and.w	r2, r3, #15
 8007a88:	6879      	ldr	r1, [r7, #4]
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	4413      	add	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	440b      	add	r3, r1
 8007a94:	3318      	adds	r3, #24
 8007a96:	2200      	movs	r2, #0
 8007a98:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007a9a:	78f9      	ldrb	r1, [r7, #3]
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f002 f934 	bl	8009d0e <USBD_LL_Transmit>
 8007aa6:	e01f      	b.n	8007ae8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	33b0      	adds	r3, #176	@ 0xb0
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4413      	add	r3, r2
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d010      	beq.n	8007ae8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	33b0      	adds	r3, #176	@ 0xb0
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007ade:	68ba      	ldr	r2, [r7, #8]
 8007ae0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007ae4:	78fa      	ldrb	r2, [r7, #3]
 8007ae6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}

08007af2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007af2:	b580      	push	{r7, lr}
 8007af4:	b084      	sub	sp, #16
 8007af6:	af00      	add	r7, sp, #0
 8007af8:	6078      	str	r0, [r7, #4]
 8007afa:	460b      	mov	r3, r1
 8007afc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	32b0      	adds	r2, #176	@ 0xb0
 8007b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b0c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	32b0      	adds	r2, #176	@ 0xb0
 8007b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d101      	bne.n	8007b24 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007b20:	2303      	movs	r3, #3
 8007b22:	e01a      	b.n	8007b5a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007b24:	78fb      	ldrb	r3, [r7, #3]
 8007b26:	4619      	mov	r1, r3
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f002 f932 	bl	8009d92 <USBD_LL_GetRxDataSize>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	33b0      	adds	r3, #176	@ 0xb0
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4413      	add	r3, r2
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	68fa      	ldr	r2, [r7, #12]
 8007b4a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007b54:	4611      	mov	r1, r2
 8007b56:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b084      	sub	sp, #16
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	32b0      	adds	r2, #176	@ 0xb0
 8007b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b78:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e024      	b.n	8007bce <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	33b0      	adds	r3, #176	@ 0xb0
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d019      	beq.n	8007bcc <USBD_CDC_EP0_RxReady+0x6a>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007b9e:	2bff      	cmp	r3, #255	@ 0xff
 8007ba0:	d014      	beq.n	8007bcc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	33b0      	adds	r3, #176	@ 0xb0
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	4413      	add	r3, r2
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	68fa      	ldr	r2, [r7, #12]
 8007bb6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007bba:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007bc2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	22ff      	movs	r2, #255	@ 0xff
 8007bc8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
	...

08007bd8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b086      	sub	sp, #24
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007be0:	2182      	movs	r1, #130	@ 0x82
 8007be2:	4818      	ldr	r0, [pc, #96]	@ (8007c44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007be4:	f000 fd0f 	bl	8008606 <USBD_GetEpDesc>
 8007be8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007bea:	2101      	movs	r1, #1
 8007bec:	4815      	ldr	r0, [pc, #84]	@ (8007c44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007bee:	f000 fd0a 	bl	8008606 <USBD_GetEpDesc>
 8007bf2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007bf4:	2181      	movs	r1, #129	@ 0x81
 8007bf6:	4813      	ldr	r0, [pc, #76]	@ (8007c44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007bf8:	f000 fd05 	bl	8008606 <USBD_GetEpDesc>
 8007bfc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d002      	beq.n	8007c0a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	2210      	movs	r2, #16
 8007c08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d006      	beq.n	8007c1e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	2200      	movs	r2, #0
 8007c14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c18:	711a      	strb	r2, [r3, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d006      	beq.n	8007c32 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2200      	movs	r2, #0
 8007c28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c2c:	711a      	strb	r2, [r3, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2243      	movs	r2, #67	@ 0x43
 8007c36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007c38:	4b02      	ldr	r3, [pc, #8]	@ (8007c44 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3718      	adds	r7, #24
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	200000d4 	.word	0x200000d4

08007c48 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b086      	sub	sp, #24
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007c50:	2182      	movs	r1, #130	@ 0x82
 8007c52:	4818      	ldr	r0, [pc, #96]	@ (8007cb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007c54:	f000 fcd7 	bl	8008606 <USBD_GetEpDesc>
 8007c58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007c5a:	2101      	movs	r1, #1
 8007c5c:	4815      	ldr	r0, [pc, #84]	@ (8007cb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007c5e:	f000 fcd2 	bl	8008606 <USBD_GetEpDesc>
 8007c62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007c64:	2181      	movs	r1, #129	@ 0x81
 8007c66:	4813      	ldr	r0, [pc, #76]	@ (8007cb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007c68:	f000 fccd 	bl	8008606 <USBD_GetEpDesc>
 8007c6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	2210      	movs	r2, #16
 8007c78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d006      	beq.n	8007c8e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	2200      	movs	r2, #0
 8007c84:	711a      	strb	r2, [r3, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f042 0202 	orr.w	r2, r2, #2
 8007c8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d006      	beq.n	8007ca2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	711a      	strb	r2, [r3, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f042 0202 	orr.w	r2, r2, #2
 8007ca0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2243      	movs	r2, #67	@ 0x43
 8007ca6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ca8:	4b02      	ldr	r3, [pc, #8]	@ (8007cb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3718      	adds	r7, #24
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	200000d4 	.word	0x200000d4

08007cb8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b086      	sub	sp, #24
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007cc0:	2182      	movs	r1, #130	@ 0x82
 8007cc2:	4818      	ldr	r0, [pc, #96]	@ (8007d24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007cc4:	f000 fc9f 	bl	8008606 <USBD_GetEpDesc>
 8007cc8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007cca:	2101      	movs	r1, #1
 8007ccc:	4815      	ldr	r0, [pc, #84]	@ (8007d24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007cce:	f000 fc9a 	bl	8008606 <USBD_GetEpDesc>
 8007cd2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007cd4:	2181      	movs	r1, #129	@ 0x81
 8007cd6:	4813      	ldr	r0, [pc, #76]	@ (8007d24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007cd8:	f000 fc95 	bl	8008606 <USBD_GetEpDesc>
 8007cdc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d002      	beq.n	8007cea <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	2210      	movs	r2, #16
 8007ce8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d006      	beq.n	8007cfe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007cf8:	711a      	strb	r2, [r3, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d006      	beq.n	8007d12 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d0c:	711a      	strb	r2, [r3, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2243      	movs	r2, #67	@ 0x43
 8007d16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007d18:	4b02      	ldr	r3, [pc, #8]	@ (8007d24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3718      	adds	r7, #24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	200000d4 	.word	0x200000d4

08007d28 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	220a      	movs	r2, #10
 8007d34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007d36:	4b03      	ldr	r3, [pc, #12]	@ (8007d44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr
 8007d44:	20000090 	.word	0x20000090

08007d48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d101      	bne.n	8007d5c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e009      	b.n	8007d70 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	33b0      	adds	r3, #176	@ 0xb0
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	4413      	add	r3, r2
 8007d6a:	683a      	ldr	r2, [r7, #0]
 8007d6c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007d6e:	2300      	movs	r3, #0
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b087      	sub	sp, #28
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	32b0      	adds	r2, #176	@ 0xb0
 8007d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d96:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d101      	bne.n	8007da2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007d9e:	2303      	movs	r3, #3
 8007da0:	e008      	b.n	8007db4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	68ba      	ldr	r2, [r7, #8]
 8007da6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	371c      	adds	r7, #28
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	32b0      	adds	r2, #176	@ 0xb0
 8007dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dd8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d101      	bne.n	8007de4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e004      	b.n	8007dee <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	683a      	ldr	r2, [r7, #0]
 8007de8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007dec:	2300      	movs	r3, #0
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3714      	adds	r7, #20
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
	...

08007dfc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	32b0      	adds	r2, #176	@ 0xb0
 8007e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e12:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	32b0      	adds	r2, #176	@ 0xb0
 8007e1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007e26:	2303      	movs	r3, #3
 8007e28:	e018      	b.n	8007e5c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	7c1b      	ldrb	r3, [r3, #16]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d10a      	bne.n	8007e48 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007e32:	4b0c      	ldr	r3, [pc, #48]	@ (8007e64 <USBD_CDC_ReceivePacket+0x68>)
 8007e34:	7819      	ldrb	r1, [r3, #0]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007e3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f001 ff85 	bl	8009d50 <USBD_LL_PrepareReceive>
 8007e46:	e008      	b.n	8007e5a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007e48:	4b06      	ldr	r3, [pc, #24]	@ (8007e64 <USBD_CDC_ReceivePacket+0x68>)
 8007e4a:	7819      	ldrb	r1, [r3, #0]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007e52:	2340      	movs	r3, #64	@ 0x40
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f001 ff7b 	bl	8009d50 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e5a:	2300      	movs	r3, #0
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	20000118 	.word	0x20000118

08007e68 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	4613      	mov	r3, r2
 8007e74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d101      	bne.n	8007e80 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007e7c:	2303      	movs	r3, #3
 8007e7e:	e01f      	b.n	8007ec0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2200      	movs	r2, #0
 8007e94:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d003      	beq.n	8007ea6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2201      	movs	r2, #1
 8007eaa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	79fa      	ldrb	r2, [r7, #7]
 8007eb2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007eb4:	68f8      	ldr	r0, [r7, #12]
 8007eb6:	f001 fdf5 	bl	8009aa4 <USBD_LL_Init>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3718      	adds	r7, #24
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b084      	sub	sp, #16
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d101      	bne.n	8007ee0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007edc:	2303      	movs	r3, #3
 8007ede:	e025      	b.n	8007f2c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	683a      	ldr	r2, [r7, #0]
 8007ee4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	32ae      	adds	r2, #174	@ 0xae
 8007ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00f      	beq.n	8007f1c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	32ae      	adds	r2, #174	@ 0xae
 8007f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f0c:	f107 020e 	add.w	r2, r7, #14
 8007f10:	4610      	mov	r0, r2
 8007f12:	4798      	blx	r3
 8007f14:	4602      	mov	r2, r0
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007f22:	1c5a      	adds	r2, r3, #1
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f001 fdfd 	bl	8009b3c <USBD_LL_Start>
 8007f42:	4603      	mov	r3, r0
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3708      	adds	r7, #8
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007f54:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	370c      	adds	r7, #12
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr

08007f62 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b084      	sub	sp, #16
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f6e:	2300      	movs	r3, #0
 8007f70:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d009      	beq.n	8007f90 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	78fa      	ldrb	r2, [r7, #3]
 8007f86:	4611      	mov	r1, r2
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	4798      	blx	r3
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3710      	adds	r7, #16
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b084      	sub	sp, #16
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	78fa      	ldrb	r2, [r7, #3]
 8007fb4:	4611      	mov	r1, r2
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	4798      	blx	r3
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d001      	beq.n	8007fc4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b084      	sub	sp, #16
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
 8007fd6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f001 f90c 	bl	80091fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2201      	movs	r2, #1
 8007fea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008002:	f003 031f 	and.w	r3, r3, #31
 8008006:	2b02      	cmp	r3, #2
 8008008:	d01a      	beq.n	8008040 <USBD_LL_SetupStage+0x72>
 800800a:	2b02      	cmp	r3, #2
 800800c:	d822      	bhi.n	8008054 <USBD_LL_SetupStage+0x86>
 800800e:	2b00      	cmp	r3, #0
 8008010:	d002      	beq.n	8008018 <USBD_LL_SetupStage+0x4a>
 8008012:	2b01      	cmp	r3, #1
 8008014:	d00a      	beq.n	800802c <USBD_LL_SetupStage+0x5e>
 8008016:	e01d      	b.n	8008054 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800801e:	4619      	mov	r1, r3
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 fb63 	bl	80086ec <USBD_StdDevReq>
 8008026:	4603      	mov	r3, r0
 8008028:	73fb      	strb	r3, [r7, #15]
      break;
 800802a:	e020      	b.n	800806e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008032:	4619      	mov	r1, r3
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fbcb 	bl	80087d0 <USBD_StdItfReq>
 800803a:	4603      	mov	r3, r0
 800803c:	73fb      	strb	r3, [r7, #15]
      break;
 800803e:	e016      	b.n	800806e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008046:	4619      	mov	r1, r3
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fc2d 	bl	80088a8 <USBD_StdEPReq>
 800804e:	4603      	mov	r3, r0
 8008050:	73fb      	strb	r3, [r7, #15]
      break;
 8008052:	e00c      	b.n	800806e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800805a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800805e:	b2db      	uxtb	r3, r3
 8008060:	4619      	mov	r1, r3
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f001 fdca 	bl	8009bfc <USBD_LL_StallEP>
 8008068:	4603      	mov	r3, r0
 800806a:	73fb      	strb	r3, [r7, #15]
      break;
 800806c:	bf00      	nop
  }

  return ret;
 800806e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b086      	sub	sp, #24
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	460b      	mov	r3, r1
 8008082:	607a      	str	r2, [r7, #4]
 8008084:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008086:	2300      	movs	r3, #0
 8008088:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800808a:	7afb      	ldrb	r3, [r7, #11]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d16e      	bne.n	800816e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008096:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800809e:	2b03      	cmp	r3, #3
 80080a0:	f040 8098 	bne.w	80081d4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	689a      	ldr	r2, [r3, #8]
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d913      	bls.n	80080d8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80080b0:	693b      	ldr	r3, [r7, #16]
 80080b2:	689a      	ldr	r2, [r3, #8]
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	1ad2      	subs	r2, r2, r3
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	68da      	ldr	r2, [r3, #12]
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	689b      	ldr	r3, [r3, #8]
 80080c6:	4293      	cmp	r3, r2
 80080c8:	bf28      	it	cs
 80080ca:	4613      	movcs	r3, r2
 80080cc:	461a      	mov	r2, r3
 80080ce:	6879      	ldr	r1, [r7, #4]
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f001 f994 	bl	80093fe <USBD_CtlContinueRx>
 80080d6:	e07d      	b.n	80081d4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80080de:	f003 031f 	and.w	r3, r3, #31
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	d014      	beq.n	8008110 <USBD_LL_DataOutStage+0x98>
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d81d      	bhi.n	8008126 <USBD_LL_DataOutStage+0xae>
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d002      	beq.n	80080f4 <USBD_LL_DataOutStage+0x7c>
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d003      	beq.n	80080fa <USBD_LL_DataOutStage+0x82>
 80080f2:	e018      	b.n	8008126 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80080f4:	2300      	movs	r3, #0
 80080f6:	75bb      	strb	r3, [r7, #22]
            break;
 80080f8:	e018      	b.n	800812c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008100:	b2db      	uxtb	r3, r3
 8008102:	4619      	mov	r1, r3
 8008104:	68f8      	ldr	r0, [r7, #12]
 8008106:	f000 fa64 	bl	80085d2 <USBD_CoreFindIF>
 800810a:	4603      	mov	r3, r0
 800810c:	75bb      	strb	r3, [r7, #22]
            break;
 800810e:	e00d      	b.n	800812c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008116:	b2db      	uxtb	r3, r3
 8008118:	4619      	mov	r1, r3
 800811a:	68f8      	ldr	r0, [r7, #12]
 800811c:	f000 fa66 	bl	80085ec <USBD_CoreFindEP>
 8008120:	4603      	mov	r3, r0
 8008122:	75bb      	strb	r3, [r7, #22]
            break;
 8008124:	e002      	b.n	800812c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008126:	2300      	movs	r3, #0
 8008128:	75bb      	strb	r3, [r7, #22]
            break;
 800812a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800812c:	7dbb      	ldrb	r3, [r7, #22]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d119      	bne.n	8008166 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b03      	cmp	r3, #3
 800813c:	d113      	bne.n	8008166 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800813e:	7dba      	ldrb	r2, [r7, #22]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	32ae      	adds	r2, #174	@ 0xae
 8008144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00b      	beq.n	8008166 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800814e:	7dba      	ldrb	r2, [r7, #22]
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008156:	7dba      	ldrb	r2, [r7, #22]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	32ae      	adds	r2, #174	@ 0xae
 800815c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008166:	68f8      	ldr	r0, [r7, #12]
 8008168:	f001 f95a 	bl	8009420 <USBD_CtlSendStatus>
 800816c:	e032      	b.n	80081d4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800816e:	7afb      	ldrb	r3, [r7, #11]
 8008170:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008174:	b2db      	uxtb	r3, r3
 8008176:	4619      	mov	r1, r3
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	f000 fa37 	bl	80085ec <USBD_CoreFindEP>
 800817e:	4603      	mov	r3, r0
 8008180:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008182:	7dbb      	ldrb	r3, [r7, #22]
 8008184:	2bff      	cmp	r3, #255	@ 0xff
 8008186:	d025      	beq.n	80081d4 <USBD_LL_DataOutStage+0x15c>
 8008188:	7dbb      	ldrb	r3, [r7, #22]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d122      	bne.n	80081d4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008194:	b2db      	uxtb	r3, r3
 8008196:	2b03      	cmp	r3, #3
 8008198:	d117      	bne.n	80081ca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800819a:	7dba      	ldrb	r2, [r7, #22]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	32ae      	adds	r2, #174	@ 0xae
 80081a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00f      	beq.n	80081ca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80081aa:	7dba      	ldrb	r2, [r7, #22]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80081b2:	7dba      	ldrb	r2, [r7, #22]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	32ae      	adds	r2, #174	@ 0xae
 80081b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081bc:	699b      	ldr	r3, [r3, #24]
 80081be:	7afa      	ldrb	r2, [r7, #11]
 80081c0:	4611      	mov	r1, r2
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	4798      	blx	r3
 80081c6:	4603      	mov	r3, r0
 80081c8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80081ca:	7dfb      	ldrb	r3, [r7, #23]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d001      	beq.n	80081d4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80081d0:	7dfb      	ldrb	r3, [r7, #23]
 80081d2:	e000      	b.n	80081d6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3718      	adds	r7, #24
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b086      	sub	sp, #24
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	60f8      	str	r0, [r7, #12]
 80081e6:	460b      	mov	r3, r1
 80081e8:	607a      	str	r2, [r7, #4]
 80081ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80081ec:	7afb      	ldrb	r3, [r7, #11]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d16f      	bne.n	80082d2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	3314      	adds	r3, #20
 80081f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d15a      	bne.n	80082b8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	689a      	ldr	r2, [r3, #8]
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	429a      	cmp	r2, r3
 800820c:	d914      	bls.n	8008238 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	689a      	ldr	r2, [r3, #8]
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	68db      	ldr	r3, [r3, #12]
 8008216:	1ad2      	subs	r2, r2, r3
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	461a      	mov	r2, r3
 8008222:	6879      	ldr	r1, [r7, #4]
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f001 f8bc 	bl	80093a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800822a:	2300      	movs	r3, #0
 800822c:	2200      	movs	r2, #0
 800822e:	2100      	movs	r1, #0
 8008230:	68f8      	ldr	r0, [r7, #12]
 8008232:	f001 fd8d 	bl	8009d50 <USBD_LL_PrepareReceive>
 8008236:	e03f      	b.n	80082b8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	68da      	ldr	r2, [r3, #12]
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	689b      	ldr	r3, [r3, #8]
 8008240:	429a      	cmp	r2, r3
 8008242:	d11c      	bne.n	800827e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800824c:	429a      	cmp	r2, r3
 800824e:	d316      	bcc.n	800827e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	685a      	ldr	r2, [r3, #4]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800825a:	429a      	cmp	r2, r3
 800825c:	d20f      	bcs.n	800827e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800825e:	2200      	movs	r2, #0
 8008260:	2100      	movs	r1, #0
 8008262:	68f8      	ldr	r0, [r7, #12]
 8008264:	f001 f89d 	bl	80093a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2200      	movs	r2, #0
 800826c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008270:	2300      	movs	r3, #0
 8008272:	2200      	movs	r2, #0
 8008274:	2100      	movs	r1, #0
 8008276:	68f8      	ldr	r0, [r7, #12]
 8008278:	f001 fd6a 	bl	8009d50 <USBD_LL_PrepareReceive>
 800827c:	e01c      	b.n	80082b8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008284:	b2db      	uxtb	r3, r3
 8008286:	2b03      	cmp	r3, #3
 8008288:	d10f      	bne.n	80082aa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d009      	beq.n	80082aa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2200      	movs	r2, #0
 800829a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80082aa:	2180      	movs	r1, #128	@ 0x80
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f001 fca5 	bl	8009bfc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f001 f8c7 	bl	8009446 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d03a      	beq.n	8008338 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f7ff fe42 	bl	8007f4c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80082d0:	e032      	b.n	8008338 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80082d2:	7afb      	ldrb	r3, [r7, #11]
 80082d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	4619      	mov	r1, r3
 80082dc:	68f8      	ldr	r0, [r7, #12]
 80082de:	f000 f985 	bl	80085ec <USBD_CoreFindEP>
 80082e2:	4603      	mov	r3, r0
 80082e4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80082e6:	7dfb      	ldrb	r3, [r7, #23]
 80082e8:	2bff      	cmp	r3, #255	@ 0xff
 80082ea:	d025      	beq.n	8008338 <USBD_LL_DataInStage+0x15a>
 80082ec:	7dfb      	ldrb	r3, [r7, #23]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d122      	bne.n	8008338 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082f8:	b2db      	uxtb	r3, r3
 80082fa:	2b03      	cmp	r3, #3
 80082fc:	d11c      	bne.n	8008338 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80082fe:	7dfa      	ldrb	r2, [r7, #23]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	32ae      	adds	r2, #174	@ 0xae
 8008304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d014      	beq.n	8008338 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800830e:	7dfa      	ldrb	r2, [r7, #23]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008316:	7dfa      	ldrb	r2, [r7, #23]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	32ae      	adds	r2, #174	@ 0xae
 800831c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008320:	695b      	ldr	r3, [r3, #20]
 8008322:	7afa      	ldrb	r2, [r7, #11]
 8008324:	4611      	mov	r1, r2
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	4798      	blx	r3
 800832a:	4603      	mov	r3, r0
 800832c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800832e:	7dbb      	ldrb	r3, [r7, #22]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d001      	beq.n	8008338 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008334:	7dbb      	ldrb	r3, [r7, #22]
 8008336:	e000      	b.n	800833a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	3718      	adds	r7, #24
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}

08008342 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008342:	b580      	push	{r7, lr}
 8008344:	b084      	sub	sp, #16
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2201      	movs	r2, #1
 8008352:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800837a:	2b00      	cmp	r3, #0
 800837c:	d014      	beq.n	80083a8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00e      	beq.n	80083a8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	6852      	ldr	r2, [r2, #4]
 8008396:	b2d2      	uxtb	r2, r2
 8008398:	4611      	mov	r1, r2
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	4798      	blx	r3
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d001      	beq.n	80083a8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80083a4:	2303      	movs	r3, #3
 80083a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80083a8:	2340      	movs	r3, #64	@ 0x40
 80083aa:	2200      	movs	r2, #0
 80083ac:	2100      	movs	r1, #0
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f001 fbdf 	bl	8009b72 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2240      	movs	r2, #64	@ 0x40
 80083c0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80083c4:	2340      	movs	r3, #64	@ 0x40
 80083c6:	2200      	movs	r2, #0
 80083c8:	2180      	movs	r1, #128	@ 0x80
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f001 fbd1 	bl	8009b72 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2240      	movs	r2, #64	@ 0x40
 80083da:	621a      	str	r2, [r3, #32]

  return ret;
 80083dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}

080083e6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80083e6:	b480      	push	{r7}
 80083e8:	b083      	sub	sp, #12
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
 80083ee:	460b      	mov	r3, r1
 80083f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	78fa      	ldrb	r2, [r7, #3]
 80083f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	370c      	adds	r7, #12
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008406:	b480      	push	{r7}
 8008408:	b083      	sub	sp, #12
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b04      	cmp	r3, #4
 8008418:	d006      	beq.n	8008428 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008420:	b2da      	uxtb	r2, r3
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2204      	movs	r2, #4
 800842c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008430:	2300      	movs	r3, #0
}
 8008432:	4618      	mov	r0, r3
 8008434:	370c      	adds	r7, #12
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr

0800843e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800843e:	b480      	push	{r7}
 8008440:	b083      	sub	sp, #12
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800844c:	b2db      	uxtb	r3, r3
 800844e:	2b04      	cmp	r3, #4
 8008450:	d106      	bne.n	8008460 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008458:	b2da      	uxtb	r2, r3
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	370c      	adds	r7, #12
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr

0800846e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b082      	sub	sp, #8
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800847c:	b2db      	uxtb	r3, r3
 800847e:	2b03      	cmp	r3, #3
 8008480:	d110      	bne.n	80084a4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00b      	beq.n	80084a4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008492:	69db      	ldr	r3, [r3, #28]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d005      	beq.n	80084a4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800849e:	69db      	ldr	r3, [r3, #28]
 80084a0:	6878      	ldr	r0, [r7, #4]
 80084a2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3708      	adds	r7, #8
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}

080084ae <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80084ae:	b580      	push	{r7, lr}
 80084b0:	b082      	sub	sp, #8
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
 80084b6:	460b      	mov	r3, r1
 80084b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	32ae      	adds	r2, #174	@ 0xae
 80084c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d101      	bne.n	80084d0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e01c      	b.n	800850a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	2b03      	cmp	r3, #3
 80084da:	d115      	bne.n	8008508 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	32ae      	adds	r2, #174	@ 0xae
 80084e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ea:	6a1b      	ldr	r3, [r3, #32]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00b      	beq.n	8008508 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	32ae      	adds	r2, #174	@ 0xae
 80084fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084fe:	6a1b      	ldr	r3, [r3, #32]
 8008500:	78fa      	ldrb	r2, [r7, #3]
 8008502:	4611      	mov	r1, r2
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b082      	sub	sp, #8
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	460b      	mov	r3, r1
 800851c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	32ae      	adds	r2, #174	@ 0xae
 8008528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d101      	bne.n	8008534 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008530:	2303      	movs	r3, #3
 8008532:	e01c      	b.n	800856e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800853a:	b2db      	uxtb	r3, r3
 800853c:	2b03      	cmp	r3, #3
 800853e:	d115      	bne.n	800856c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	32ae      	adds	r2, #174	@ 0xae
 800854a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800854e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008550:	2b00      	cmp	r3, #0
 8008552:	d00b      	beq.n	800856c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	32ae      	adds	r2, #174	@ 0xae
 800855e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008564:	78fa      	ldrb	r2, [r7, #3]
 8008566:	4611      	mov	r1, r2
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	3708      	adds	r7, #8
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008576:	b480      	push	{r7}
 8008578:	b083      	sub	sp, #12
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800857e:	2300      	movs	r3, #0
}
 8008580:	4618      	mov	r0, r3
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr

0800858c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008594:	2300      	movs	r3, #0
 8008596:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00e      	beq.n	80085c8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	6852      	ldr	r2, [r2, #4]
 80085b6:	b2d2      	uxtb	r2, r2
 80085b8:	4611      	mov	r1, r2
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	4798      	blx	r3
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d001      	beq.n	80085c8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80085c4:	2303      	movs	r3, #3
 80085c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80085c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}

080085d2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80085d2:	b480      	push	{r7}
 80085d4:	b083      	sub	sp, #12
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	460b      	mov	r3, r1
 80085dc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80085de:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	370c      	adds	r7, #12
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	460b      	mov	r3, r1
 80085f6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80085f8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b086      	sub	sp, #24
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
 800860e:	460b      	mov	r3, r1
 8008610:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800861a:	2300      	movs	r3, #0
 800861c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	885b      	ldrh	r3, [r3, #2]
 8008622:	b29b      	uxth	r3, r3
 8008624:	68fa      	ldr	r2, [r7, #12]
 8008626:	7812      	ldrb	r2, [r2, #0]
 8008628:	4293      	cmp	r3, r2
 800862a:	d91f      	bls.n	800866c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008632:	e013      	b.n	800865c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008634:	f107 030a 	add.w	r3, r7, #10
 8008638:	4619      	mov	r1, r3
 800863a:	6978      	ldr	r0, [r7, #20]
 800863c:	f000 f81b 	bl	8008676 <USBD_GetNextDesc>
 8008640:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	785b      	ldrb	r3, [r3, #1]
 8008646:	2b05      	cmp	r3, #5
 8008648:	d108      	bne.n	800865c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	789b      	ldrb	r3, [r3, #2]
 8008652:	78fa      	ldrb	r2, [r7, #3]
 8008654:	429a      	cmp	r2, r3
 8008656:	d008      	beq.n	800866a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008658:	2300      	movs	r3, #0
 800865a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	885b      	ldrh	r3, [r3, #2]
 8008660:	b29a      	uxth	r2, r3
 8008662:	897b      	ldrh	r3, [r7, #10]
 8008664:	429a      	cmp	r2, r3
 8008666:	d8e5      	bhi.n	8008634 <USBD_GetEpDesc+0x2e>
 8008668:	e000      	b.n	800866c <USBD_GetEpDesc+0x66>
          break;
 800866a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800866c:	693b      	ldr	r3, [r7, #16]
}
 800866e:	4618      	mov	r0, r3
 8008670:	3718      	adds	r7, #24
 8008672:	46bd      	mov	sp, r7
 8008674:	bd80      	pop	{r7, pc}

08008676 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008676:	b480      	push	{r7}
 8008678:	b085      	sub	sp, #20
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	881b      	ldrh	r3, [r3, #0]
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	7812      	ldrb	r2, [r2, #0]
 800868c:	4413      	add	r3, r2
 800868e:	b29a      	uxth	r2, r3
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	461a      	mov	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4413      	add	r3, r2
 800869e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80086a0:	68fb      	ldr	r3, [r7, #12]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3714      	adds	r7, #20
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b087      	sub	sp, #28
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	3301      	adds	r3, #1
 80086c4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	781b      	ldrb	r3, [r3, #0]
 80086ca:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80086cc:	8a3b      	ldrh	r3, [r7, #16]
 80086ce:	021b      	lsls	r3, r3, #8
 80086d0:	b21a      	sxth	r2, r3
 80086d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	b21b      	sxth	r3, r3
 80086da:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80086dc:	89fb      	ldrh	r3, [r7, #14]
}
 80086de:	4618      	mov	r0, r3
 80086e0:	371c      	adds	r7, #28
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
	...

080086ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086f6:	2300      	movs	r3, #0
 80086f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008702:	2b40      	cmp	r3, #64	@ 0x40
 8008704:	d005      	beq.n	8008712 <USBD_StdDevReq+0x26>
 8008706:	2b40      	cmp	r3, #64	@ 0x40
 8008708:	d857      	bhi.n	80087ba <USBD_StdDevReq+0xce>
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00f      	beq.n	800872e <USBD_StdDevReq+0x42>
 800870e:	2b20      	cmp	r3, #32
 8008710:	d153      	bne.n	80087ba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	32ae      	adds	r2, #174	@ 0xae
 800871c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	6839      	ldr	r1, [r7, #0]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	4798      	blx	r3
 8008728:	4603      	mov	r3, r0
 800872a:	73fb      	strb	r3, [r7, #15]
      break;
 800872c:	e04a      	b.n	80087c4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	785b      	ldrb	r3, [r3, #1]
 8008732:	2b09      	cmp	r3, #9
 8008734:	d83b      	bhi.n	80087ae <USBD_StdDevReq+0xc2>
 8008736:	a201      	add	r2, pc, #4	@ (adr r2, 800873c <USBD_StdDevReq+0x50>)
 8008738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800873c:	08008791 	.word	0x08008791
 8008740:	080087a5 	.word	0x080087a5
 8008744:	080087af 	.word	0x080087af
 8008748:	0800879b 	.word	0x0800879b
 800874c:	080087af 	.word	0x080087af
 8008750:	0800876f 	.word	0x0800876f
 8008754:	08008765 	.word	0x08008765
 8008758:	080087af 	.word	0x080087af
 800875c:	08008787 	.word	0x08008787
 8008760:	08008779 	.word	0x08008779
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008764:	6839      	ldr	r1, [r7, #0]
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fa3c 	bl	8008be4 <USBD_GetDescriptor>
          break;
 800876c:	e024      	b.n	80087b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 fba1 	bl	8008eb8 <USBD_SetAddress>
          break;
 8008776:	e01f      	b.n	80087b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 fbe0 	bl	8008f40 <USBD_SetConfig>
 8008780:	4603      	mov	r3, r0
 8008782:	73fb      	strb	r3, [r7, #15]
          break;
 8008784:	e018      	b.n	80087b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008786:	6839      	ldr	r1, [r7, #0]
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fc83 	bl	8009094 <USBD_GetConfig>
          break;
 800878e:	e013      	b.n	80087b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008790:	6839      	ldr	r1, [r7, #0]
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 fcb4 	bl	8009100 <USBD_GetStatus>
          break;
 8008798:	e00e      	b.n	80087b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800879a:	6839      	ldr	r1, [r7, #0]
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 fce3 	bl	8009168 <USBD_SetFeature>
          break;
 80087a2:	e009      	b.n	80087b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fd07 	bl	80091ba <USBD_ClrFeature>
          break;
 80087ac:	e004      	b.n	80087b8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80087ae:	6839      	ldr	r1, [r7, #0]
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fd5e 	bl	8009272 <USBD_CtlError>
          break;
 80087b6:	bf00      	nop
      }
      break;
 80087b8:	e004      	b.n	80087c4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80087ba:	6839      	ldr	r1, [r7, #0]
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f000 fd58 	bl	8009272 <USBD_CtlError>
      break;
 80087c2:	bf00      	nop
  }

  return ret;
 80087c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3710      	adds	r7, #16
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop

080087d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80087da:	2300      	movs	r3, #0
 80087dc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80087e6:	2b40      	cmp	r3, #64	@ 0x40
 80087e8:	d005      	beq.n	80087f6 <USBD_StdItfReq+0x26>
 80087ea:	2b40      	cmp	r3, #64	@ 0x40
 80087ec:	d852      	bhi.n	8008894 <USBD_StdItfReq+0xc4>
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d001      	beq.n	80087f6 <USBD_StdItfReq+0x26>
 80087f2:	2b20      	cmp	r3, #32
 80087f4:	d14e      	bne.n	8008894 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	3b01      	subs	r3, #1
 8008800:	2b02      	cmp	r3, #2
 8008802:	d840      	bhi.n	8008886 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	889b      	ldrh	r3, [r3, #4]
 8008808:	b2db      	uxtb	r3, r3
 800880a:	2b01      	cmp	r3, #1
 800880c:	d836      	bhi.n	800887c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	889b      	ldrh	r3, [r3, #4]
 8008812:	b2db      	uxtb	r3, r3
 8008814:	4619      	mov	r1, r3
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f7ff fedb 	bl	80085d2 <USBD_CoreFindIF>
 800881c:	4603      	mov	r3, r0
 800881e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008820:	7bbb      	ldrb	r3, [r7, #14]
 8008822:	2bff      	cmp	r3, #255	@ 0xff
 8008824:	d01d      	beq.n	8008862 <USBD_StdItfReq+0x92>
 8008826:	7bbb      	ldrb	r3, [r7, #14]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d11a      	bne.n	8008862 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800882c:	7bba      	ldrb	r2, [r7, #14]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	32ae      	adds	r2, #174	@ 0xae
 8008832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00f      	beq.n	800885c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800883c:	7bba      	ldrb	r2, [r7, #14]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008844:	7bba      	ldrb	r2, [r7, #14]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	32ae      	adds	r2, #174	@ 0xae
 800884a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	6839      	ldr	r1, [r7, #0]
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	4798      	blx	r3
 8008856:	4603      	mov	r3, r0
 8008858:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800885a:	e004      	b.n	8008866 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800885c:	2303      	movs	r3, #3
 800885e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008860:	e001      	b.n	8008866 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008862:	2303      	movs	r3, #3
 8008864:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	88db      	ldrh	r3, [r3, #6]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d110      	bne.n	8008890 <USBD_StdItfReq+0xc0>
 800886e:	7bfb      	ldrb	r3, [r7, #15]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d10d      	bne.n	8008890 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 fdd3 	bl	8009420 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800887a:	e009      	b.n	8008890 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800887c:	6839      	ldr	r1, [r7, #0]
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 fcf7 	bl	8009272 <USBD_CtlError>
          break;
 8008884:	e004      	b.n	8008890 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008886:	6839      	ldr	r1, [r7, #0]
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 fcf2 	bl	8009272 <USBD_CtlError>
          break;
 800888e:	e000      	b.n	8008892 <USBD_StdItfReq+0xc2>
          break;
 8008890:	bf00      	nop
      }
      break;
 8008892:	e004      	b.n	800889e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008894:	6839      	ldr	r1, [r7, #0]
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 fceb 	bl	8009272 <USBD_CtlError>
      break;
 800889c:	bf00      	nop
  }

  return ret;
 800889e:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80088b2:	2300      	movs	r3, #0
 80088b4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	889b      	ldrh	r3, [r3, #4]
 80088ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80088c4:	2b40      	cmp	r3, #64	@ 0x40
 80088c6:	d007      	beq.n	80088d8 <USBD_StdEPReq+0x30>
 80088c8:	2b40      	cmp	r3, #64	@ 0x40
 80088ca:	f200 817f 	bhi.w	8008bcc <USBD_StdEPReq+0x324>
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d02a      	beq.n	8008928 <USBD_StdEPReq+0x80>
 80088d2:	2b20      	cmp	r3, #32
 80088d4:	f040 817a 	bne.w	8008bcc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80088d8:	7bbb      	ldrb	r3, [r7, #14]
 80088da:	4619      	mov	r1, r3
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f7ff fe85 	bl	80085ec <USBD_CoreFindEP>
 80088e2:	4603      	mov	r3, r0
 80088e4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088e6:	7b7b      	ldrb	r3, [r7, #13]
 80088e8:	2bff      	cmp	r3, #255	@ 0xff
 80088ea:	f000 8174 	beq.w	8008bd6 <USBD_StdEPReq+0x32e>
 80088ee:	7b7b      	ldrb	r3, [r7, #13]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	f040 8170 	bne.w	8008bd6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80088f6:	7b7a      	ldrb	r2, [r7, #13]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80088fe:	7b7a      	ldrb	r2, [r7, #13]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	32ae      	adds	r2, #174	@ 0xae
 8008904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	2b00      	cmp	r3, #0
 800890c:	f000 8163 	beq.w	8008bd6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008910:	7b7a      	ldrb	r2, [r7, #13]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	32ae      	adds	r2, #174	@ 0xae
 8008916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800891a:	689b      	ldr	r3, [r3, #8]
 800891c:	6839      	ldr	r1, [r7, #0]
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	4798      	blx	r3
 8008922:	4603      	mov	r3, r0
 8008924:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008926:	e156      	b.n	8008bd6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	785b      	ldrb	r3, [r3, #1]
 800892c:	2b03      	cmp	r3, #3
 800892e:	d008      	beq.n	8008942 <USBD_StdEPReq+0x9a>
 8008930:	2b03      	cmp	r3, #3
 8008932:	f300 8145 	bgt.w	8008bc0 <USBD_StdEPReq+0x318>
 8008936:	2b00      	cmp	r3, #0
 8008938:	f000 809b 	beq.w	8008a72 <USBD_StdEPReq+0x1ca>
 800893c:	2b01      	cmp	r3, #1
 800893e:	d03c      	beq.n	80089ba <USBD_StdEPReq+0x112>
 8008940:	e13e      	b.n	8008bc0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008948:	b2db      	uxtb	r3, r3
 800894a:	2b02      	cmp	r3, #2
 800894c:	d002      	beq.n	8008954 <USBD_StdEPReq+0xac>
 800894e:	2b03      	cmp	r3, #3
 8008950:	d016      	beq.n	8008980 <USBD_StdEPReq+0xd8>
 8008952:	e02c      	b.n	80089ae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008954:	7bbb      	ldrb	r3, [r7, #14]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00d      	beq.n	8008976 <USBD_StdEPReq+0xce>
 800895a:	7bbb      	ldrb	r3, [r7, #14]
 800895c:	2b80      	cmp	r3, #128	@ 0x80
 800895e:	d00a      	beq.n	8008976 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008960:	7bbb      	ldrb	r3, [r7, #14]
 8008962:	4619      	mov	r1, r3
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f001 f949 	bl	8009bfc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800896a:	2180      	movs	r1, #128	@ 0x80
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f001 f945 	bl	8009bfc <USBD_LL_StallEP>
 8008972:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008974:	e020      	b.n	80089b8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008976:	6839      	ldr	r1, [r7, #0]
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 fc7a 	bl	8009272 <USBD_CtlError>
              break;
 800897e:	e01b      	b.n	80089b8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	885b      	ldrh	r3, [r3, #2]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d10e      	bne.n	80089a6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008988:	7bbb      	ldrb	r3, [r7, #14]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00b      	beq.n	80089a6 <USBD_StdEPReq+0xfe>
 800898e:	7bbb      	ldrb	r3, [r7, #14]
 8008990:	2b80      	cmp	r3, #128	@ 0x80
 8008992:	d008      	beq.n	80089a6 <USBD_StdEPReq+0xfe>
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	88db      	ldrh	r3, [r3, #6]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d104      	bne.n	80089a6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800899c:	7bbb      	ldrb	r3, [r7, #14]
 800899e:	4619      	mov	r1, r3
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f001 f92b 	bl	8009bfc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fd3a 	bl	8009420 <USBD_CtlSendStatus>

              break;
 80089ac:	e004      	b.n	80089b8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80089ae:	6839      	ldr	r1, [r7, #0]
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 fc5e 	bl	8009272 <USBD_CtlError>
              break;
 80089b6:	bf00      	nop
          }
          break;
 80089b8:	e107      	b.n	8008bca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d002      	beq.n	80089cc <USBD_StdEPReq+0x124>
 80089c6:	2b03      	cmp	r3, #3
 80089c8:	d016      	beq.n	80089f8 <USBD_StdEPReq+0x150>
 80089ca:	e04b      	b.n	8008a64 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80089cc:	7bbb      	ldrb	r3, [r7, #14]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00d      	beq.n	80089ee <USBD_StdEPReq+0x146>
 80089d2:	7bbb      	ldrb	r3, [r7, #14]
 80089d4:	2b80      	cmp	r3, #128	@ 0x80
 80089d6:	d00a      	beq.n	80089ee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80089d8:	7bbb      	ldrb	r3, [r7, #14]
 80089da:	4619      	mov	r1, r3
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f001 f90d 	bl	8009bfc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80089e2:	2180      	movs	r1, #128	@ 0x80
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f001 f909 	bl	8009bfc <USBD_LL_StallEP>
 80089ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80089ec:	e040      	b.n	8008a70 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80089ee:	6839      	ldr	r1, [r7, #0]
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 fc3e 	bl	8009272 <USBD_CtlError>
              break;
 80089f6:	e03b      	b.n	8008a70 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	885b      	ldrh	r3, [r3, #2]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d136      	bne.n	8008a6e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008a00:	7bbb      	ldrb	r3, [r7, #14]
 8008a02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d004      	beq.n	8008a14 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008a0a:	7bbb      	ldrb	r3, [r7, #14]
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f001 f913 	bl	8009c3a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 fd03 	bl	8009420 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008a1a:	7bbb      	ldrb	r3, [r7, #14]
 8008a1c:	4619      	mov	r1, r3
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f7ff fde4 	bl	80085ec <USBD_CoreFindEP>
 8008a24:	4603      	mov	r3, r0
 8008a26:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008a28:	7b7b      	ldrb	r3, [r7, #13]
 8008a2a:	2bff      	cmp	r3, #255	@ 0xff
 8008a2c:	d01f      	beq.n	8008a6e <USBD_StdEPReq+0x1c6>
 8008a2e:	7b7b      	ldrb	r3, [r7, #13]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d11c      	bne.n	8008a6e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008a34:	7b7a      	ldrb	r2, [r7, #13]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008a3c:	7b7a      	ldrb	r2, [r7, #13]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	32ae      	adds	r2, #174	@ 0xae
 8008a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d010      	beq.n	8008a6e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008a4c:	7b7a      	ldrb	r2, [r7, #13]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	32ae      	adds	r2, #174	@ 0xae
 8008a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	6839      	ldr	r1, [r7, #0]
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	4798      	blx	r3
 8008a5e:	4603      	mov	r3, r0
 8008a60:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008a62:	e004      	b.n	8008a6e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008a64:	6839      	ldr	r1, [r7, #0]
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fc03 	bl	8009272 <USBD_CtlError>
              break;
 8008a6c:	e000      	b.n	8008a70 <USBD_StdEPReq+0x1c8>
              break;
 8008a6e:	bf00      	nop
          }
          break;
 8008a70:	e0ab      	b.n	8008bca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d002      	beq.n	8008a84 <USBD_StdEPReq+0x1dc>
 8008a7e:	2b03      	cmp	r3, #3
 8008a80:	d032      	beq.n	8008ae8 <USBD_StdEPReq+0x240>
 8008a82:	e097      	b.n	8008bb4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a84:	7bbb      	ldrb	r3, [r7, #14]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d007      	beq.n	8008a9a <USBD_StdEPReq+0x1f2>
 8008a8a:	7bbb      	ldrb	r3, [r7, #14]
 8008a8c:	2b80      	cmp	r3, #128	@ 0x80
 8008a8e:	d004      	beq.n	8008a9a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008a90:	6839      	ldr	r1, [r7, #0]
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fbed 	bl	8009272 <USBD_CtlError>
                break;
 8008a98:	e091      	b.n	8008bbe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008a9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	da0b      	bge.n	8008aba <USBD_StdEPReq+0x212>
 8008aa2:	7bbb      	ldrb	r3, [r7, #14]
 8008aa4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	4413      	add	r3, r2
 8008aae:	009b      	lsls	r3, r3, #2
 8008ab0:	3310      	adds	r3, #16
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	3304      	adds	r3, #4
 8008ab8:	e00b      	b.n	8008ad2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008aba:	7bbb      	ldrb	r3, [r7, #14]
 8008abc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ac0:	4613      	mov	r3, r2
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	4413      	add	r3, r2
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	4413      	add	r3, r2
 8008ad0:	3304      	adds	r3, #4
 8008ad2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	2202      	movs	r2, #2
 8008ade:	4619      	mov	r1, r3
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 fc43 	bl	800936c <USBD_CtlSendData>
              break;
 8008ae6:	e06a      	b.n	8008bbe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008ae8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	da11      	bge.n	8008b14 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008af0:	7bbb      	ldrb	r3, [r7, #14]
 8008af2:	f003 020f 	and.w	r2, r3, #15
 8008af6:	6879      	ldr	r1, [r7, #4]
 8008af8:	4613      	mov	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4413      	add	r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	440b      	add	r3, r1
 8008b02:	3324      	adds	r3, #36	@ 0x24
 8008b04:	881b      	ldrh	r3, [r3, #0]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d117      	bne.n	8008b3a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008b0a:	6839      	ldr	r1, [r7, #0]
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 fbb0 	bl	8009272 <USBD_CtlError>
                  break;
 8008b12:	e054      	b.n	8008bbe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008b14:	7bbb      	ldrb	r3, [r7, #14]
 8008b16:	f003 020f 	and.w	r2, r3, #15
 8008b1a:	6879      	ldr	r1, [r7, #4]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	4413      	add	r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	440b      	add	r3, r1
 8008b26:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008b2a:	881b      	ldrh	r3, [r3, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d104      	bne.n	8008b3a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008b30:	6839      	ldr	r1, [r7, #0]
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 fb9d 	bl	8009272 <USBD_CtlError>
                  break;
 8008b38:	e041      	b.n	8008bbe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	da0b      	bge.n	8008b5a <USBD_StdEPReq+0x2b2>
 8008b42:	7bbb      	ldrb	r3, [r7, #14]
 8008b44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008b48:	4613      	mov	r3, r2
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	4413      	add	r3, r2
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	3310      	adds	r3, #16
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	4413      	add	r3, r2
 8008b56:	3304      	adds	r3, #4
 8008b58:	e00b      	b.n	8008b72 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008b5a:	7bbb      	ldrb	r3, [r7, #14]
 8008b5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b60:	4613      	mov	r3, r2
 8008b62:	009b      	lsls	r3, r3, #2
 8008b64:	4413      	add	r3, r2
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	4413      	add	r3, r2
 8008b70:	3304      	adds	r3, #4
 8008b72:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008b74:	7bbb      	ldrb	r3, [r7, #14]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d002      	beq.n	8008b80 <USBD_StdEPReq+0x2d8>
 8008b7a:	7bbb      	ldrb	r3, [r7, #14]
 8008b7c:	2b80      	cmp	r3, #128	@ 0x80
 8008b7e:	d103      	bne.n	8008b88 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	2200      	movs	r2, #0
 8008b84:	601a      	str	r2, [r3, #0]
 8008b86:	e00e      	b.n	8008ba6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
 8008b8a:	4619      	mov	r1, r3
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f001 f873 	bl	8009c78 <USBD_LL_IsStallEP>
 8008b92:	4603      	mov	r3, r0
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d003      	beq.n	8008ba0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	601a      	str	r2, [r3, #0]
 8008b9e:	e002      	b.n	8008ba6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	2202      	movs	r2, #2
 8008baa:	4619      	mov	r1, r3
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fbdd 	bl	800936c <USBD_CtlSendData>
              break;
 8008bb2:	e004      	b.n	8008bbe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008bb4:	6839      	ldr	r1, [r7, #0]
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 fb5b 	bl	8009272 <USBD_CtlError>
              break;
 8008bbc:	bf00      	nop
          }
          break;
 8008bbe:	e004      	b.n	8008bca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008bc0:	6839      	ldr	r1, [r7, #0]
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 fb55 	bl	8009272 <USBD_CtlError>
          break;
 8008bc8:	bf00      	nop
      }
      break;
 8008bca:	e005      	b.n	8008bd8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008bcc:	6839      	ldr	r1, [r7, #0]
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 fb4f 	bl	8009272 <USBD_CtlError>
      break;
 8008bd4:	e000      	b.n	8008bd8 <USBD_StdEPReq+0x330>
      break;
 8008bd6:	bf00      	nop
  }

  return ret;
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
	...

08008be4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	885b      	ldrh	r3, [r3, #2]
 8008bfe:	0a1b      	lsrs	r3, r3, #8
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	3b01      	subs	r3, #1
 8008c04:	2b06      	cmp	r3, #6
 8008c06:	f200 8128 	bhi.w	8008e5a <USBD_GetDescriptor+0x276>
 8008c0a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c10 <USBD_GetDescriptor+0x2c>)
 8008c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c10:	08008c2d 	.word	0x08008c2d
 8008c14:	08008c45 	.word	0x08008c45
 8008c18:	08008c85 	.word	0x08008c85
 8008c1c:	08008e5b 	.word	0x08008e5b
 8008c20:	08008e5b 	.word	0x08008e5b
 8008c24:	08008dfb 	.word	0x08008dfb
 8008c28:	08008e27 	.word	0x08008e27
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	7c12      	ldrb	r2, [r2, #16]
 8008c38:	f107 0108 	add.w	r1, r7, #8
 8008c3c:	4610      	mov	r0, r2
 8008c3e:	4798      	blx	r3
 8008c40:	60f8      	str	r0, [r7, #12]
      break;
 8008c42:	e112      	b.n	8008e6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	7c1b      	ldrb	r3, [r3, #16]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d10d      	bne.n	8008c68 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c54:	f107 0208 	add.w	r2, r7, #8
 8008c58:	4610      	mov	r0, r2
 8008c5a:	4798      	blx	r3
 8008c5c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	3301      	adds	r3, #1
 8008c62:	2202      	movs	r2, #2
 8008c64:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008c66:	e100      	b.n	8008e6a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c70:	f107 0208 	add.w	r2, r7, #8
 8008c74:	4610      	mov	r0, r2
 8008c76:	4798      	blx	r3
 8008c78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	2202      	movs	r2, #2
 8008c80:	701a      	strb	r2, [r3, #0]
      break;
 8008c82:	e0f2      	b.n	8008e6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	885b      	ldrh	r3, [r3, #2]
 8008c88:	b2db      	uxtb	r3, r3
 8008c8a:	2b05      	cmp	r3, #5
 8008c8c:	f200 80ac 	bhi.w	8008de8 <USBD_GetDescriptor+0x204>
 8008c90:	a201      	add	r2, pc, #4	@ (adr r2, 8008c98 <USBD_GetDescriptor+0xb4>)
 8008c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c96:	bf00      	nop
 8008c98:	08008cb1 	.word	0x08008cb1
 8008c9c:	08008ce5 	.word	0x08008ce5
 8008ca0:	08008d19 	.word	0x08008d19
 8008ca4:	08008d4d 	.word	0x08008d4d
 8008ca8:	08008d81 	.word	0x08008d81
 8008cac:	08008db5 	.word	0x08008db5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d00b      	beq.n	8008cd4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	7c12      	ldrb	r2, [r2, #16]
 8008cc8:	f107 0108 	add.w	r1, r7, #8
 8008ccc:	4610      	mov	r0, r2
 8008cce:	4798      	blx	r3
 8008cd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008cd2:	e091      	b.n	8008df8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008cd4:	6839      	ldr	r1, [r7, #0]
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 facb 	bl	8009272 <USBD_CtlError>
            err++;
 8008cdc:	7afb      	ldrb	r3, [r7, #11]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ce2:	e089      	b.n	8008df8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00b      	beq.n	8008d08 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	687a      	ldr	r2, [r7, #4]
 8008cfa:	7c12      	ldrb	r2, [r2, #16]
 8008cfc:	f107 0108 	add.w	r1, r7, #8
 8008d00:	4610      	mov	r0, r2
 8008d02:	4798      	blx	r3
 8008d04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d06:	e077      	b.n	8008df8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d08:	6839      	ldr	r1, [r7, #0]
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fab1 	bl	8009272 <USBD_CtlError>
            err++;
 8008d10:	7afb      	ldrb	r3, [r7, #11]
 8008d12:	3301      	adds	r3, #1
 8008d14:	72fb      	strb	r3, [r7, #11]
          break;
 8008d16:	e06f      	b.n	8008df8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d00b      	beq.n	8008d3c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	7c12      	ldrb	r2, [r2, #16]
 8008d30:	f107 0108 	add.w	r1, r7, #8
 8008d34:	4610      	mov	r0, r2
 8008d36:	4798      	blx	r3
 8008d38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d3a:	e05d      	b.n	8008df8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d3c:	6839      	ldr	r1, [r7, #0]
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fa97 	bl	8009272 <USBD_CtlError>
            err++;
 8008d44:	7afb      	ldrb	r3, [r7, #11]
 8008d46:	3301      	adds	r3, #1
 8008d48:	72fb      	strb	r3, [r7, #11]
          break;
 8008d4a:	e055      	b.n	8008df8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00b      	beq.n	8008d70 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d5e:	691b      	ldr	r3, [r3, #16]
 8008d60:	687a      	ldr	r2, [r7, #4]
 8008d62:	7c12      	ldrb	r2, [r2, #16]
 8008d64:	f107 0108 	add.w	r1, r7, #8
 8008d68:	4610      	mov	r0, r2
 8008d6a:	4798      	blx	r3
 8008d6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008d6e:	e043      	b.n	8008df8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008d70:	6839      	ldr	r1, [r7, #0]
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 fa7d 	bl	8009272 <USBD_CtlError>
            err++;
 8008d78:	7afb      	ldrb	r3, [r7, #11]
 8008d7a:	3301      	adds	r3, #1
 8008d7c:	72fb      	strb	r3, [r7, #11]
          break;
 8008d7e:	e03b      	b.n	8008df8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d86:	695b      	ldr	r3, [r3, #20]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00b      	beq.n	8008da4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d92:	695b      	ldr	r3, [r3, #20]
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	7c12      	ldrb	r2, [r2, #16]
 8008d98:	f107 0108 	add.w	r1, r7, #8
 8008d9c:	4610      	mov	r0, r2
 8008d9e:	4798      	blx	r3
 8008da0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008da2:	e029      	b.n	8008df8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008da4:	6839      	ldr	r1, [r7, #0]
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 fa63 	bl	8009272 <USBD_CtlError>
            err++;
 8008dac:	7afb      	ldrb	r3, [r7, #11]
 8008dae:	3301      	adds	r3, #1
 8008db0:	72fb      	strb	r3, [r7, #11]
          break;
 8008db2:	e021      	b.n	8008df8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d00b      	beq.n	8008dd8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008dc6:	699b      	ldr	r3, [r3, #24]
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	7c12      	ldrb	r2, [r2, #16]
 8008dcc:	f107 0108 	add.w	r1, r7, #8
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	4798      	blx	r3
 8008dd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008dd6:	e00f      	b.n	8008df8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008dd8:	6839      	ldr	r1, [r7, #0]
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 fa49 	bl	8009272 <USBD_CtlError>
            err++;
 8008de0:	7afb      	ldrb	r3, [r7, #11]
 8008de2:	3301      	adds	r3, #1
 8008de4:	72fb      	strb	r3, [r7, #11]
          break;
 8008de6:	e007      	b.n	8008df8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008de8:	6839      	ldr	r1, [r7, #0]
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 fa41 	bl	8009272 <USBD_CtlError>
          err++;
 8008df0:	7afb      	ldrb	r3, [r7, #11]
 8008df2:	3301      	adds	r3, #1
 8008df4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008df6:	bf00      	nop
      }
      break;
 8008df8:	e037      	b.n	8008e6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	7c1b      	ldrb	r3, [r3, #16]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d109      	bne.n	8008e16 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e0a:	f107 0208 	add.w	r2, r7, #8
 8008e0e:	4610      	mov	r0, r2
 8008e10:	4798      	blx	r3
 8008e12:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e14:	e029      	b.n	8008e6a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e16:	6839      	ldr	r1, [r7, #0]
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f000 fa2a 	bl	8009272 <USBD_CtlError>
        err++;
 8008e1e:	7afb      	ldrb	r3, [r7, #11]
 8008e20:	3301      	adds	r3, #1
 8008e22:	72fb      	strb	r3, [r7, #11]
      break;
 8008e24:	e021      	b.n	8008e6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	7c1b      	ldrb	r3, [r3, #16]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d10d      	bne.n	8008e4a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e36:	f107 0208 	add.w	r2, r7, #8
 8008e3a:	4610      	mov	r0, r2
 8008e3c:	4798      	blx	r3
 8008e3e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	3301      	adds	r3, #1
 8008e44:	2207      	movs	r2, #7
 8008e46:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e48:	e00f      	b.n	8008e6a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008e4a:	6839      	ldr	r1, [r7, #0]
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 fa10 	bl	8009272 <USBD_CtlError>
        err++;
 8008e52:	7afb      	ldrb	r3, [r7, #11]
 8008e54:	3301      	adds	r3, #1
 8008e56:	72fb      	strb	r3, [r7, #11]
      break;
 8008e58:	e007      	b.n	8008e6a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008e5a:	6839      	ldr	r1, [r7, #0]
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 fa08 	bl	8009272 <USBD_CtlError>
      err++;
 8008e62:	7afb      	ldrb	r3, [r7, #11]
 8008e64:	3301      	adds	r3, #1
 8008e66:	72fb      	strb	r3, [r7, #11]
      break;
 8008e68:	bf00      	nop
  }

  if (err != 0U)
 8008e6a:	7afb      	ldrb	r3, [r7, #11]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d11e      	bne.n	8008eae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008e70:	683b      	ldr	r3, [r7, #0]
 8008e72:	88db      	ldrh	r3, [r3, #6]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d016      	beq.n	8008ea6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008e78:	893b      	ldrh	r3, [r7, #8]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d00e      	beq.n	8008e9c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	88da      	ldrh	r2, [r3, #6]
 8008e82:	893b      	ldrh	r3, [r7, #8]
 8008e84:	4293      	cmp	r3, r2
 8008e86:	bf28      	it	cs
 8008e88:	4613      	movcs	r3, r2
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008e8e:	893b      	ldrh	r3, [r7, #8]
 8008e90:	461a      	mov	r2, r3
 8008e92:	68f9      	ldr	r1, [r7, #12]
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 fa69 	bl	800936c <USBD_CtlSendData>
 8008e9a:	e009      	b.n	8008eb0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008e9c:	6839      	ldr	r1, [r7, #0]
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 f9e7 	bl	8009272 <USBD_CtlError>
 8008ea4:	e004      	b.n	8008eb0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 faba 	bl	8009420 <USBD_CtlSendStatus>
 8008eac:	e000      	b.n	8008eb0 <USBD_GetDescriptor+0x2cc>
    return;
 8008eae:	bf00      	nop
  }
}
 8008eb0:	3710      	adds	r7, #16
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}
 8008eb6:	bf00      	nop

08008eb8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b084      	sub	sp, #16
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	889b      	ldrh	r3, [r3, #4]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d131      	bne.n	8008f2e <USBD_SetAddress+0x76>
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	88db      	ldrh	r3, [r3, #6]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d12d      	bne.n	8008f2e <USBD_SetAddress+0x76>
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	885b      	ldrh	r3, [r3, #2]
 8008ed6:	2b7f      	cmp	r3, #127	@ 0x7f
 8008ed8:	d829      	bhi.n	8008f2e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	885b      	ldrh	r3, [r3, #2]
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ee4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	2b03      	cmp	r3, #3
 8008ef0:	d104      	bne.n	8008efc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008ef2:	6839      	ldr	r1, [r7, #0]
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 f9bc 	bl	8009272 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008efa:	e01d      	b.n	8008f38 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	7bfa      	ldrb	r2, [r7, #15]
 8008f00:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008f04:	7bfb      	ldrb	r3, [r7, #15]
 8008f06:	4619      	mov	r1, r3
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 fee1 	bl	8009cd0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 fa86 	bl	8009420 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d004      	beq.n	8008f24 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2202      	movs	r2, #2
 8008f1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f22:	e009      	b.n	8008f38 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f2c:	e004      	b.n	8008f38 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008f2e:	6839      	ldr	r1, [r7, #0]
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 f99e 	bl	8009272 <USBD_CtlError>
  }
}
 8008f36:	bf00      	nop
 8008f38:	bf00      	nop
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	885b      	ldrh	r3, [r3, #2]
 8008f52:	b2da      	uxtb	r2, r3
 8008f54:	4b4e      	ldr	r3, [pc, #312]	@ (8009090 <USBD_SetConfig+0x150>)
 8008f56:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008f58:	4b4d      	ldr	r3, [pc, #308]	@ (8009090 <USBD_SetConfig+0x150>)
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d905      	bls.n	8008f6c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008f60:	6839      	ldr	r1, [r7, #0]
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 f985 	bl	8009272 <USBD_CtlError>
    return USBD_FAIL;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	e08c      	b.n	8009086 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f72:	b2db      	uxtb	r3, r3
 8008f74:	2b02      	cmp	r3, #2
 8008f76:	d002      	beq.n	8008f7e <USBD_SetConfig+0x3e>
 8008f78:	2b03      	cmp	r3, #3
 8008f7a:	d029      	beq.n	8008fd0 <USBD_SetConfig+0x90>
 8008f7c:	e075      	b.n	800906a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008f7e:	4b44      	ldr	r3, [pc, #272]	@ (8009090 <USBD_SetConfig+0x150>)
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d020      	beq.n	8008fc8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008f86:	4b42      	ldr	r3, [pc, #264]	@ (8009090 <USBD_SetConfig+0x150>)
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008f90:	4b3f      	ldr	r3, [pc, #252]	@ (8009090 <USBD_SetConfig+0x150>)
 8008f92:	781b      	ldrb	r3, [r3, #0]
 8008f94:	4619      	mov	r1, r3
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	f7fe ffe3 	bl	8007f62 <USBD_SetClassConfig>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d008      	beq.n	8008fb8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008fa6:	6839      	ldr	r1, [r7, #0]
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f000 f962 	bl	8009272 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2202      	movs	r2, #2
 8008fb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008fb6:	e065      	b.n	8009084 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 fa31 	bl	8009420 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2203      	movs	r2, #3
 8008fc2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008fc6:	e05d      	b.n	8009084 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 fa29 	bl	8009420 <USBD_CtlSendStatus>
      break;
 8008fce:	e059      	b.n	8009084 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008fd0:	4b2f      	ldr	r3, [pc, #188]	@ (8009090 <USBD_SetConfig+0x150>)
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d112      	bne.n	8008ffe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2202      	movs	r2, #2
 8008fdc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8009090 <USBD_SetConfig+0x150>)
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	461a      	mov	r2, r3
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008fea:	4b29      	ldr	r3, [pc, #164]	@ (8009090 <USBD_SetConfig+0x150>)
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	4619      	mov	r1, r3
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f7fe ffd2 	bl	8007f9a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 fa12 	bl	8009420 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008ffc:	e042      	b.n	8009084 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008ffe:	4b24      	ldr	r3, [pc, #144]	@ (8009090 <USBD_SetConfig+0x150>)
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	461a      	mov	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	429a      	cmp	r2, r3
 800900a:	d02a      	beq.n	8009062 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	b2db      	uxtb	r3, r3
 8009012:	4619      	mov	r1, r3
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f7fe ffc0 	bl	8007f9a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800901a:	4b1d      	ldr	r3, [pc, #116]	@ (8009090 <USBD_SetConfig+0x150>)
 800901c:	781b      	ldrb	r3, [r3, #0]
 800901e:	461a      	mov	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009024:	4b1a      	ldr	r3, [pc, #104]	@ (8009090 <USBD_SetConfig+0x150>)
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	4619      	mov	r1, r3
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f7fe ff99 	bl	8007f62 <USBD_SetClassConfig>
 8009030:	4603      	mov	r3, r0
 8009032:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009034:	7bfb      	ldrb	r3, [r7, #15]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d00f      	beq.n	800905a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800903a:	6839      	ldr	r1, [r7, #0]
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 f918 	bl	8009272 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	b2db      	uxtb	r3, r3
 8009048:	4619      	mov	r1, r3
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f7fe ffa5 	bl	8007f9a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2202      	movs	r2, #2
 8009054:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009058:	e014      	b.n	8009084 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 f9e0 	bl	8009420 <USBD_CtlSendStatus>
      break;
 8009060:	e010      	b.n	8009084 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 f9dc 	bl	8009420 <USBD_CtlSendStatus>
      break;
 8009068:	e00c      	b.n	8009084 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800906a:	6839      	ldr	r1, [r7, #0]
 800906c:	6878      	ldr	r0, [r7, #4]
 800906e:	f000 f900 	bl	8009272 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009072:	4b07      	ldr	r3, [pc, #28]	@ (8009090 <USBD_SetConfig+0x150>)
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	4619      	mov	r1, r3
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f7fe ff8e 	bl	8007f9a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800907e:	2303      	movs	r3, #3
 8009080:	73fb      	strb	r3, [r7, #15]
      break;
 8009082:	bf00      	nop
  }

  return ret;
 8009084:	7bfb      	ldrb	r3, [r7, #15]
}
 8009086:	4618      	mov	r0, r3
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	bf00      	nop
 8009090:	200003e8 	.word	0x200003e8

08009094 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	88db      	ldrh	r3, [r3, #6]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d004      	beq.n	80090b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80090a6:	6839      	ldr	r1, [r7, #0]
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 f8e2 	bl	8009272 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80090ae:	e023      	b.n	80090f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	2b02      	cmp	r3, #2
 80090ba:	dc02      	bgt.n	80090c2 <USBD_GetConfig+0x2e>
 80090bc:	2b00      	cmp	r3, #0
 80090be:	dc03      	bgt.n	80090c8 <USBD_GetConfig+0x34>
 80090c0:	e015      	b.n	80090ee <USBD_GetConfig+0x5a>
 80090c2:	2b03      	cmp	r3, #3
 80090c4:	d00b      	beq.n	80090de <USBD_GetConfig+0x4a>
 80090c6:	e012      	b.n	80090ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	3308      	adds	r3, #8
 80090d2:	2201      	movs	r2, #1
 80090d4:	4619      	mov	r1, r3
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	f000 f948 	bl	800936c <USBD_CtlSendData>
        break;
 80090dc:	e00c      	b.n	80090f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	3304      	adds	r3, #4
 80090e2:	2201      	movs	r2, #1
 80090e4:	4619      	mov	r1, r3
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 f940 	bl	800936c <USBD_CtlSendData>
        break;
 80090ec:	e004      	b.n	80090f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80090ee:	6839      	ldr	r1, [r7, #0]
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f8be 	bl	8009272 <USBD_CtlError>
        break;
 80090f6:	bf00      	nop
}
 80090f8:	bf00      	nop
 80090fa:	3708      	adds	r7, #8
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009110:	b2db      	uxtb	r3, r3
 8009112:	3b01      	subs	r3, #1
 8009114:	2b02      	cmp	r3, #2
 8009116:	d81e      	bhi.n	8009156 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	88db      	ldrh	r3, [r3, #6]
 800911c:	2b02      	cmp	r3, #2
 800911e:	d004      	beq.n	800912a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009120:	6839      	ldr	r1, [r7, #0]
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f8a5 	bl	8009272 <USBD_CtlError>
        break;
 8009128:	e01a      	b.n	8009160 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2201      	movs	r2, #1
 800912e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009136:	2b00      	cmp	r3, #0
 8009138:	d005      	beq.n	8009146 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	f043 0202 	orr.w	r2, r3, #2
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	330c      	adds	r3, #12
 800914a:	2202      	movs	r2, #2
 800914c:	4619      	mov	r1, r3
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f90c 	bl	800936c <USBD_CtlSendData>
      break;
 8009154:	e004      	b.n	8009160 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009156:	6839      	ldr	r1, [r7, #0]
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 f88a 	bl	8009272 <USBD_CtlError>
      break;
 800915e:	bf00      	nop
  }
}
 8009160:	bf00      	nop
 8009162:	3708      	adds	r7, #8
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	885b      	ldrh	r3, [r3, #2]
 8009176:	2b01      	cmp	r3, #1
 8009178:	d107      	bne.n	800918a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2201      	movs	r2, #1
 800917e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 f94c 	bl	8009420 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009188:	e013      	b.n	80091b2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	885b      	ldrh	r3, [r3, #2]
 800918e:	2b02      	cmp	r3, #2
 8009190:	d10b      	bne.n	80091aa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	889b      	ldrh	r3, [r3, #4]
 8009196:	0a1b      	lsrs	r3, r3, #8
 8009198:	b29b      	uxth	r3, r3
 800919a:	b2da      	uxtb	r2, r3
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 f93c 	bl	8009420 <USBD_CtlSendStatus>
}
 80091a8:	e003      	b.n	80091b2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80091aa:	6839      	ldr	r1, [r7, #0]
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 f860 	bl	8009272 <USBD_CtlError>
}
 80091b2:	bf00      	nop
 80091b4:	3708      	adds	r7, #8
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b082      	sub	sp, #8
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
 80091c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	3b01      	subs	r3, #1
 80091ce:	2b02      	cmp	r3, #2
 80091d0:	d80b      	bhi.n	80091ea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	885b      	ldrh	r3, [r3, #2]
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d10c      	bne.n	80091f4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2200      	movs	r2, #0
 80091de:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 f91c 	bl	8009420 <USBD_CtlSendStatus>
      }
      break;
 80091e8:	e004      	b.n	80091f4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80091ea:	6839      	ldr	r1, [r7, #0]
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f000 f840 	bl	8009272 <USBD_CtlError>
      break;
 80091f2:	e000      	b.n	80091f6 <USBD_ClrFeature+0x3c>
      break;
 80091f4:	bf00      	nop
  }
}
 80091f6:	bf00      	nop
 80091f8:	3708      	adds	r7, #8
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}

080091fe <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80091fe:	b580      	push	{r7, lr}
 8009200:	b084      	sub	sp, #16
 8009202:	af00      	add	r7, sp, #0
 8009204:	6078      	str	r0, [r7, #4]
 8009206:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	781a      	ldrb	r2, [r3, #0]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	3301      	adds	r3, #1
 8009218:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	781a      	ldrb	r2, [r3, #0]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	3301      	adds	r3, #1
 8009226:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009228:	68f8      	ldr	r0, [r7, #12]
 800922a:	f7ff fa40 	bl	80086ae <SWAPBYTE>
 800922e:	4603      	mov	r3, r0
 8009230:	461a      	mov	r2, r3
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	3301      	adds	r3, #1
 800923a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	3301      	adds	r3, #1
 8009240:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f7ff fa33 	bl	80086ae <SWAPBYTE>
 8009248:	4603      	mov	r3, r0
 800924a:	461a      	mov	r2, r3
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	3301      	adds	r3, #1
 8009254:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	3301      	adds	r3, #1
 800925a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800925c:	68f8      	ldr	r0, [r7, #12]
 800925e:	f7ff fa26 	bl	80086ae <SWAPBYTE>
 8009262:	4603      	mov	r3, r0
 8009264:	461a      	mov	r2, r3
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	80da      	strh	r2, [r3, #6]
}
 800926a:	bf00      	nop
 800926c:	3710      	adds	r7, #16
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}

08009272 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009272:	b580      	push	{r7, lr}
 8009274:	b082      	sub	sp, #8
 8009276:	af00      	add	r7, sp, #0
 8009278:	6078      	str	r0, [r7, #4]
 800927a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800927c:	2180      	movs	r1, #128	@ 0x80
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 fcbc 	bl	8009bfc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009284:	2100      	movs	r1, #0
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 fcb8 	bl	8009bfc <USBD_LL_StallEP>
}
 800928c:	bf00      	nop
 800928e:	3708      	adds	r7, #8
 8009290:	46bd      	mov	sp, r7
 8009292:	bd80      	pop	{r7, pc}

08009294 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b086      	sub	sp, #24
 8009298:	af00      	add	r7, sp, #0
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80092a0:	2300      	movs	r3, #0
 80092a2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d042      	beq.n	8009330 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80092ae:	6938      	ldr	r0, [r7, #16]
 80092b0:	f000 f842 	bl	8009338 <USBD_GetLen>
 80092b4:	4603      	mov	r3, r0
 80092b6:	3301      	adds	r3, #1
 80092b8:	005b      	lsls	r3, r3, #1
 80092ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80092be:	d808      	bhi.n	80092d2 <USBD_GetString+0x3e>
 80092c0:	6938      	ldr	r0, [r7, #16]
 80092c2:	f000 f839 	bl	8009338 <USBD_GetLen>
 80092c6:	4603      	mov	r3, r0
 80092c8:	3301      	adds	r3, #1
 80092ca:	b29b      	uxth	r3, r3
 80092cc:	005b      	lsls	r3, r3, #1
 80092ce:	b29a      	uxth	r2, r3
 80092d0:	e001      	b.n	80092d6 <USBD_GetString+0x42>
 80092d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80092da:	7dfb      	ldrb	r3, [r7, #23]
 80092dc:	68ba      	ldr	r2, [r7, #8]
 80092de:	4413      	add	r3, r2
 80092e0:	687a      	ldr	r2, [r7, #4]
 80092e2:	7812      	ldrb	r2, [r2, #0]
 80092e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80092e6:	7dfb      	ldrb	r3, [r7, #23]
 80092e8:	3301      	adds	r3, #1
 80092ea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80092ec:	7dfb      	ldrb	r3, [r7, #23]
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	4413      	add	r3, r2
 80092f2:	2203      	movs	r2, #3
 80092f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80092f6:	7dfb      	ldrb	r3, [r7, #23]
 80092f8:	3301      	adds	r3, #1
 80092fa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80092fc:	e013      	b.n	8009326 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80092fe:	7dfb      	ldrb	r3, [r7, #23]
 8009300:	68ba      	ldr	r2, [r7, #8]
 8009302:	4413      	add	r3, r2
 8009304:	693a      	ldr	r2, [r7, #16]
 8009306:	7812      	ldrb	r2, [r2, #0]
 8009308:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	3301      	adds	r3, #1
 800930e:	613b      	str	r3, [r7, #16]
    idx++;
 8009310:	7dfb      	ldrb	r3, [r7, #23]
 8009312:	3301      	adds	r3, #1
 8009314:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009316:	7dfb      	ldrb	r3, [r7, #23]
 8009318:	68ba      	ldr	r2, [r7, #8]
 800931a:	4413      	add	r3, r2
 800931c:	2200      	movs	r2, #0
 800931e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009320:	7dfb      	ldrb	r3, [r7, #23]
 8009322:	3301      	adds	r3, #1
 8009324:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d1e7      	bne.n	80092fe <USBD_GetString+0x6a>
 800932e:	e000      	b.n	8009332 <USBD_GetString+0x9e>
    return;
 8009330:	bf00      	nop
  }
}
 8009332:	3718      	adds	r7, #24
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009338:	b480      	push	{r7}
 800933a:	b085      	sub	sp, #20
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009340:	2300      	movs	r3, #0
 8009342:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009348:	e005      	b.n	8009356 <USBD_GetLen+0x1e>
  {
    len++;
 800934a:	7bfb      	ldrb	r3, [r7, #15]
 800934c:	3301      	adds	r3, #1
 800934e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	3301      	adds	r3, #1
 8009354:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	781b      	ldrb	r3, [r3, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1f5      	bne.n	800934a <USBD_GetLen+0x12>
  }

  return len;
 800935e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009360:	4618      	mov	r0, r3
 8009362:	3714      	adds	r7, #20
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	60f8      	str	r0, [r7, #12]
 8009374:	60b9      	str	r1, [r7, #8]
 8009376:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2202      	movs	r2, #2
 800937c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	687a      	ldr	r2, [r7, #4]
 800938a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	2100      	movs	r1, #0
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f000 fcbb 	bl	8009d0e <USBD_LL_Transmit>

  return USBD_OK;
 8009398:	2300      	movs	r3, #0
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80093a2:	b580      	push	{r7, lr}
 80093a4:	b084      	sub	sp, #16
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	60f8      	str	r0, [r7, #12]
 80093aa:	60b9      	str	r1, [r7, #8]
 80093ac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	68ba      	ldr	r2, [r7, #8]
 80093b2:	2100      	movs	r1, #0
 80093b4:	68f8      	ldr	r0, [r7, #12]
 80093b6:	f000 fcaa 	bl	8009d0e <USBD_LL_Transmit>

  return USBD_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3710      	adds	r7, #16
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b084      	sub	sp, #16
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2203      	movs	r2, #3
 80093d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	68ba      	ldr	r2, [r7, #8]
 80093ec:	2100      	movs	r1, #0
 80093ee:	68f8      	ldr	r0, [r7, #12]
 80093f0:	f000 fcae 	bl	8009d50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b084      	sub	sp, #16
 8009402:	af00      	add	r7, sp, #0
 8009404:	60f8      	str	r0, [r7, #12]
 8009406:	60b9      	str	r1, [r7, #8]
 8009408:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	68ba      	ldr	r2, [r7, #8]
 800940e:	2100      	movs	r1, #0
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f000 fc9d 	bl	8009d50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009416:	2300      	movs	r3, #0
}
 8009418:	4618      	mov	r0, r3
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2204      	movs	r2, #4
 800942c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009430:	2300      	movs	r3, #0
 8009432:	2200      	movs	r2, #0
 8009434:	2100      	movs	r1, #0
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 fc69 	bl	8009d0e <USBD_LL_Transmit>

  return USBD_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3708      	adds	r7, #8
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}

08009446 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009446:	b580      	push	{r7, lr}
 8009448:	b082      	sub	sp, #8
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2205      	movs	r2, #5
 8009452:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009456:	2300      	movs	r3, #0
 8009458:	2200      	movs	r2, #0
 800945a:	2100      	movs	r1, #0
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 fc77 	bl	8009d50 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3708      	adds	r7, #8
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009470:	2200      	movs	r2, #0
 8009472:	4912      	ldr	r1, [pc, #72]	@ (80094bc <MX_USB_DEVICE_Init+0x50>)
 8009474:	4812      	ldr	r0, [pc, #72]	@ (80094c0 <MX_USB_DEVICE_Init+0x54>)
 8009476:	f7fe fcf7 	bl	8007e68 <USBD_Init>
 800947a:	4603      	mov	r3, r0
 800947c:	2b00      	cmp	r3, #0
 800947e:	d001      	beq.n	8009484 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009480:	f7f8 fc3e 	bl	8001d00 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009484:	490f      	ldr	r1, [pc, #60]	@ (80094c4 <MX_USB_DEVICE_Init+0x58>)
 8009486:	480e      	ldr	r0, [pc, #56]	@ (80094c0 <MX_USB_DEVICE_Init+0x54>)
 8009488:	f7fe fd1e 	bl	8007ec8 <USBD_RegisterClass>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d001      	beq.n	8009496 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009492:	f7f8 fc35 	bl	8001d00 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009496:	490c      	ldr	r1, [pc, #48]	@ (80094c8 <MX_USB_DEVICE_Init+0x5c>)
 8009498:	4809      	ldr	r0, [pc, #36]	@ (80094c0 <MX_USB_DEVICE_Init+0x54>)
 800949a:	f7fe fc55 	bl	8007d48 <USBD_CDC_RegisterInterface>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d001      	beq.n	80094a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80094a4:	f7f8 fc2c 	bl	8001d00 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80094a8:	4805      	ldr	r0, [pc, #20]	@ (80094c0 <MX_USB_DEVICE_Init+0x54>)
 80094aa:	f7fe fd43 	bl	8007f34 <USBD_Start>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d001      	beq.n	80094b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80094b4:	f7f8 fc24 	bl	8001d00 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80094b8:	bf00      	nop
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	20000130 	.word	0x20000130
 80094c0:	200003ec 	.word	0x200003ec
 80094c4:	2000009c 	.word	0x2000009c
 80094c8:	2000011c 	.word	0x2000011c

080094cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80094d0:	2200      	movs	r2, #0
 80094d2:	4905      	ldr	r1, [pc, #20]	@ (80094e8 <CDC_Init_FS+0x1c>)
 80094d4:	4805      	ldr	r0, [pc, #20]	@ (80094ec <CDC_Init_FS+0x20>)
 80094d6:	f7fe fc51 	bl	8007d7c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80094da:	4905      	ldr	r1, [pc, #20]	@ (80094f0 <CDC_Init_FS+0x24>)
 80094dc:	4803      	ldr	r0, [pc, #12]	@ (80094ec <CDC_Init_FS+0x20>)
 80094de:	f7fe fc6f 	bl	8007dc0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80094e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	20000ec8 	.word	0x20000ec8
 80094ec:	200003ec 	.word	0x200003ec
 80094f0:	200006c8 	.word	0x200006c8

080094f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80094f4:	b480      	push	{r7}
 80094f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80094f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	46bd      	mov	sp, r7
 80094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009502:	4770      	bx	lr

08009504 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009504:	b480      	push	{r7}
 8009506:	b083      	sub	sp, #12
 8009508:	af00      	add	r7, sp, #0
 800950a:	4603      	mov	r3, r0
 800950c:	6039      	str	r1, [r7, #0]
 800950e:	71fb      	strb	r3, [r7, #7]
 8009510:	4613      	mov	r3, r2
 8009512:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009514:	79fb      	ldrb	r3, [r7, #7]
 8009516:	2b23      	cmp	r3, #35	@ 0x23
 8009518:	d84a      	bhi.n	80095b0 <CDC_Control_FS+0xac>
 800951a:	a201      	add	r2, pc, #4	@ (adr r2, 8009520 <CDC_Control_FS+0x1c>)
 800951c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009520:	080095b1 	.word	0x080095b1
 8009524:	080095b1 	.word	0x080095b1
 8009528:	080095b1 	.word	0x080095b1
 800952c:	080095b1 	.word	0x080095b1
 8009530:	080095b1 	.word	0x080095b1
 8009534:	080095b1 	.word	0x080095b1
 8009538:	080095b1 	.word	0x080095b1
 800953c:	080095b1 	.word	0x080095b1
 8009540:	080095b1 	.word	0x080095b1
 8009544:	080095b1 	.word	0x080095b1
 8009548:	080095b1 	.word	0x080095b1
 800954c:	080095b1 	.word	0x080095b1
 8009550:	080095b1 	.word	0x080095b1
 8009554:	080095b1 	.word	0x080095b1
 8009558:	080095b1 	.word	0x080095b1
 800955c:	080095b1 	.word	0x080095b1
 8009560:	080095b1 	.word	0x080095b1
 8009564:	080095b1 	.word	0x080095b1
 8009568:	080095b1 	.word	0x080095b1
 800956c:	080095b1 	.word	0x080095b1
 8009570:	080095b1 	.word	0x080095b1
 8009574:	080095b1 	.word	0x080095b1
 8009578:	080095b1 	.word	0x080095b1
 800957c:	080095b1 	.word	0x080095b1
 8009580:	080095b1 	.word	0x080095b1
 8009584:	080095b1 	.word	0x080095b1
 8009588:	080095b1 	.word	0x080095b1
 800958c:	080095b1 	.word	0x080095b1
 8009590:	080095b1 	.word	0x080095b1
 8009594:	080095b1 	.word	0x080095b1
 8009598:	080095b1 	.word	0x080095b1
 800959c:	080095b1 	.word	0x080095b1
 80095a0:	080095b1 	.word	0x080095b1
 80095a4:	080095b1 	.word	0x080095b1
 80095a8:	080095b1 	.word	0x080095b1
 80095ac:	080095b1 	.word	0x080095b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80095b0:	bf00      	nop
  }

  return (USBD_OK);
 80095b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b082      	sub	sp, #8
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80095ca:	6879      	ldr	r1, [r7, #4]
 80095cc:	4805      	ldr	r0, [pc, #20]	@ (80095e4 <CDC_Receive_FS+0x24>)
 80095ce:	f7fe fbf7 	bl	8007dc0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80095d2:	4804      	ldr	r0, [pc, #16]	@ (80095e4 <CDC_Receive_FS+0x24>)
 80095d4:	f7fe fc12 	bl	8007dfc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80095d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3708      	adds	r7, #8
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
 80095e2:	bf00      	nop
 80095e4:	200003ec 	.word	0x200003ec

080095e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b087      	sub	sp, #28
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	60f8      	str	r0, [r7, #12]
 80095f0:	60b9      	str	r1, [r7, #8]
 80095f2:	4613      	mov	r3, r2
 80095f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80095f6:	2300      	movs	r3, #0
 80095f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80095fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80095fe:	4618      	mov	r0, r3
 8009600:	371c      	adds	r7, #28
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr
	...

0800960c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800960c:	b480      	push	{r7}
 800960e:	b083      	sub	sp, #12
 8009610:	af00      	add	r7, sp, #0
 8009612:	4603      	mov	r3, r0
 8009614:	6039      	str	r1, [r7, #0]
 8009616:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	2212      	movs	r2, #18
 800961c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800961e:	4b03      	ldr	r3, [pc, #12]	@ (800962c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009620:	4618      	mov	r0, r3
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr
 800962c:	2000014c 	.word	0x2000014c

08009630 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	4603      	mov	r3, r0
 8009638:	6039      	str	r1, [r7, #0]
 800963a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800963c:	683b      	ldr	r3, [r7, #0]
 800963e:	2204      	movs	r2, #4
 8009640:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009642:	4b03      	ldr	r3, [pc, #12]	@ (8009650 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009644:	4618      	mov	r0, r3
 8009646:	370c      	adds	r7, #12
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr
 8009650:	20000160 	.word	0x20000160

08009654 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	4603      	mov	r3, r0
 800965c:	6039      	str	r1, [r7, #0]
 800965e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009660:	79fb      	ldrb	r3, [r7, #7]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d105      	bne.n	8009672 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009666:	683a      	ldr	r2, [r7, #0]
 8009668:	4907      	ldr	r1, [pc, #28]	@ (8009688 <USBD_FS_ProductStrDescriptor+0x34>)
 800966a:	4808      	ldr	r0, [pc, #32]	@ (800968c <USBD_FS_ProductStrDescriptor+0x38>)
 800966c:	f7ff fe12 	bl	8009294 <USBD_GetString>
 8009670:	e004      	b.n	800967c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009672:	683a      	ldr	r2, [r7, #0]
 8009674:	4904      	ldr	r1, [pc, #16]	@ (8009688 <USBD_FS_ProductStrDescriptor+0x34>)
 8009676:	4805      	ldr	r0, [pc, #20]	@ (800968c <USBD_FS_ProductStrDescriptor+0x38>)
 8009678:	f7ff fe0c 	bl	8009294 <USBD_GetString>
  }
  return USBD_StrDesc;
 800967c:	4b02      	ldr	r3, [pc, #8]	@ (8009688 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800967e:	4618      	mov	r0, r3
 8009680:	3708      	adds	r7, #8
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	200016c8 	.word	0x200016c8
 800968c:	0800a130 	.word	0x0800a130

08009690 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	4603      	mov	r3, r0
 8009698:	6039      	str	r1, [r7, #0]
 800969a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800969c:	683a      	ldr	r2, [r7, #0]
 800969e:	4904      	ldr	r1, [pc, #16]	@ (80096b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80096a0:	4804      	ldr	r0, [pc, #16]	@ (80096b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80096a2:	f7ff fdf7 	bl	8009294 <USBD_GetString>
  return USBD_StrDesc;
 80096a6:	4b02      	ldr	r3, [pc, #8]	@ (80096b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3708      	adds	r7, #8
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	200016c8 	.word	0x200016c8
 80096b4:	0800a148 	.word	0x0800a148

080096b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	4603      	mov	r3, r0
 80096c0:	6039      	str	r1, [r7, #0]
 80096c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	221a      	movs	r2, #26
 80096c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80096ca:	f000 f843 	bl	8009754 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80096ce:	4b02      	ldr	r3, [pc, #8]	@ (80096d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3708      	adds	r7, #8
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	20000164 	.word	0x20000164

080096dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	4603      	mov	r3, r0
 80096e4:	6039      	str	r1, [r7, #0]
 80096e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80096e8:	79fb      	ldrb	r3, [r7, #7]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d105      	bne.n	80096fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80096ee:	683a      	ldr	r2, [r7, #0]
 80096f0:	4907      	ldr	r1, [pc, #28]	@ (8009710 <USBD_FS_ConfigStrDescriptor+0x34>)
 80096f2:	4808      	ldr	r0, [pc, #32]	@ (8009714 <USBD_FS_ConfigStrDescriptor+0x38>)
 80096f4:	f7ff fdce 	bl	8009294 <USBD_GetString>
 80096f8:	e004      	b.n	8009704 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80096fa:	683a      	ldr	r2, [r7, #0]
 80096fc:	4904      	ldr	r1, [pc, #16]	@ (8009710 <USBD_FS_ConfigStrDescriptor+0x34>)
 80096fe:	4805      	ldr	r0, [pc, #20]	@ (8009714 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009700:	f7ff fdc8 	bl	8009294 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009704:	4b02      	ldr	r3, [pc, #8]	@ (8009710 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009706:	4618      	mov	r0, r3
 8009708:	3708      	adds	r7, #8
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	200016c8 	.word	0x200016c8
 8009714:	0800a15c 	.word	0x0800a15c

08009718 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	4603      	mov	r3, r0
 8009720:	6039      	str	r1, [r7, #0]
 8009722:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009724:	79fb      	ldrb	r3, [r7, #7]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d105      	bne.n	8009736 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800972a:	683a      	ldr	r2, [r7, #0]
 800972c:	4907      	ldr	r1, [pc, #28]	@ (800974c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800972e:	4808      	ldr	r0, [pc, #32]	@ (8009750 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009730:	f7ff fdb0 	bl	8009294 <USBD_GetString>
 8009734:	e004      	b.n	8009740 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009736:	683a      	ldr	r2, [r7, #0]
 8009738:	4904      	ldr	r1, [pc, #16]	@ (800974c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800973a:	4805      	ldr	r0, [pc, #20]	@ (8009750 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800973c:	f7ff fdaa 	bl	8009294 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009740:	4b02      	ldr	r3, [pc, #8]	@ (800974c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009742:	4618      	mov	r0, r3
 8009744:	3708      	adds	r7, #8
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}
 800974a:	bf00      	nop
 800974c:	200016c8 	.word	0x200016c8
 8009750:	0800a168 	.word	0x0800a168

08009754 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800975a:	4b0f      	ldr	r3, [pc, #60]	@ (8009798 <Get_SerialNum+0x44>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009760:	4b0e      	ldr	r3, [pc, #56]	@ (800979c <Get_SerialNum+0x48>)
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009766:	4b0e      	ldr	r3, [pc, #56]	@ (80097a0 <Get_SerialNum+0x4c>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800976c:	68fa      	ldr	r2, [r7, #12]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4413      	add	r3, r2
 8009772:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d009      	beq.n	800978e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800977a:	2208      	movs	r2, #8
 800977c:	4909      	ldr	r1, [pc, #36]	@ (80097a4 <Get_SerialNum+0x50>)
 800977e:	68f8      	ldr	r0, [r7, #12]
 8009780:	f000 f814 	bl	80097ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009784:	2204      	movs	r2, #4
 8009786:	4908      	ldr	r1, [pc, #32]	@ (80097a8 <Get_SerialNum+0x54>)
 8009788:	68b8      	ldr	r0, [r7, #8]
 800978a:	f000 f80f 	bl	80097ac <IntToUnicode>
  }
}
 800978e:	bf00      	nop
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	1fff7a10 	.word	0x1fff7a10
 800979c:	1fff7a14 	.word	0x1fff7a14
 80097a0:	1fff7a18 	.word	0x1fff7a18
 80097a4:	20000166 	.word	0x20000166
 80097a8:	20000176 	.word	0x20000176

080097ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b087      	sub	sp, #28
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	4613      	mov	r3, r2
 80097b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80097ba:	2300      	movs	r3, #0
 80097bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80097be:	2300      	movs	r3, #0
 80097c0:	75fb      	strb	r3, [r7, #23]
 80097c2:	e027      	b.n	8009814 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	0f1b      	lsrs	r3, r3, #28
 80097c8:	2b09      	cmp	r3, #9
 80097ca:	d80b      	bhi.n	80097e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	0f1b      	lsrs	r3, r3, #28
 80097d0:	b2da      	uxtb	r2, r3
 80097d2:	7dfb      	ldrb	r3, [r7, #23]
 80097d4:	005b      	lsls	r3, r3, #1
 80097d6:	4619      	mov	r1, r3
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	440b      	add	r3, r1
 80097dc:	3230      	adds	r2, #48	@ 0x30
 80097de:	b2d2      	uxtb	r2, r2
 80097e0:	701a      	strb	r2, [r3, #0]
 80097e2:	e00a      	b.n	80097fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	0f1b      	lsrs	r3, r3, #28
 80097e8:	b2da      	uxtb	r2, r3
 80097ea:	7dfb      	ldrb	r3, [r7, #23]
 80097ec:	005b      	lsls	r3, r3, #1
 80097ee:	4619      	mov	r1, r3
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	440b      	add	r3, r1
 80097f4:	3237      	adds	r2, #55	@ 0x37
 80097f6:	b2d2      	uxtb	r2, r2
 80097f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	011b      	lsls	r3, r3, #4
 80097fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009800:	7dfb      	ldrb	r3, [r7, #23]
 8009802:	005b      	lsls	r3, r3, #1
 8009804:	3301      	adds	r3, #1
 8009806:	68ba      	ldr	r2, [r7, #8]
 8009808:	4413      	add	r3, r2
 800980a:	2200      	movs	r2, #0
 800980c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800980e:	7dfb      	ldrb	r3, [r7, #23]
 8009810:	3301      	adds	r3, #1
 8009812:	75fb      	strb	r3, [r7, #23]
 8009814:	7dfa      	ldrb	r2, [r7, #23]
 8009816:	79fb      	ldrb	r3, [r7, #7]
 8009818:	429a      	cmp	r2, r3
 800981a:	d3d3      	bcc.n	80097c4 <IntToUnicode+0x18>
  }
}
 800981c:	bf00      	nop
 800981e:	bf00      	nop
 8009820:	371c      	adds	r7, #28
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr
	...

0800982c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b08a      	sub	sp, #40	@ 0x28
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009834:	f107 0314 	add.w	r3, r7, #20
 8009838:	2200      	movs	r2, #0
 800983a:	601a      	str	r2, [r3, #0]
 800983c:	605a      	str	r2, [r3, #4]
 800983e:	609a      	str	r2, [r3, #8]
 8009840:	60da      	str	r2, [r3, #12]
 8009842:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800984c:	d13a      	bne.n	80098c4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800984e:	2300      	movs	r3, #0
 8009850:	613b      	str	r3, [r7, #16]
 8009852:	4b1e      	ldr	r3, [pc, #120]	@ (80098cc <HAL_PCD_MspInit+0xa0>)
 8009854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009856:	4a1d      	ldr	r2, [pc, #116]	@ (80098cc <HAL_PCD_MspInit+0xa0>)
 8009858:	f043 0301 	orr.w	r3, r3, #1
 800985c:	6313      	str	r3, [r2, #48]	@ 0x30
 800985e:	4b1b      	ldr	r3, [pc, #108]	@ (80098cc <HAL_PCD_MspInit+0xa0>)
 8009860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009862:	f003 0301 	and.w	r3, r3, #1
 8009866:	613b      	str	r3, [r7, #16]
 8009868:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800986a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800986e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009870:	2302      	movs	r3, #2
 8009872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009874:	2300      	movs	r3, #0
 8009876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009878:	2303      	movs	r3, #3
 800987a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800987c:	230a      	movs	r3, #10
 800987e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009880:	f107 0314 	add.w	r3, r7, #20
 8009884:	4619      	mov	r1, r3
 8009886:	4812      	ldr	r0, [pc, #72]	@ (80098d0 <HAL_PCD_MspInit+0xa4>)
 8009888:	f7f8 fe04 	bl	8002494 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800988c:	4b0f      	ldr	r3, [pc, #60]	@ (80098cc <HAL_PCD_MspInit+0xa0>)
 800988e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009890:	4a0e      	ldr	r2, [pc, #56]	@ (80098cc <HAL_PCD_MspInit+0xa0>)
 8009892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009896:	6353      	str	r3, [r2, #52]	@ 0x34
 8009898:	2300      	movs	r3, #0
 800989a:	60fb      	str	r3, [r7, #12]
 800989c:	4b0b      	ldr	r3, [pc, #44]	@ (80098cc <HAL_PCD_MspInit+0xa0>)
 800989e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098a0:	4a0a      	ldr	r2, [pc, #40]	@ (80098cc <HAL_PCD_MspInit+0xa0>)
 80098a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80098a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80098a8:	4b08      	ldr	r3, [pc, #32]	@ (80098cc <HAL_PCD_MspInit+0xa0>)
 80098aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80098b0:	60fb      	str	r3, [r7, #12]
 80098b2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80098b4:	2200      	movs	r2, #0
 80098b6:	2100      	movs	r1, #0
 80098b8:	2043      	movs	r0, #67	@ 0x43
 80098ba:	f7f8 fdc1 	bl	8002440 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80098be:	2043      	movs	r0, #67	@ 0x43
 80098c0:	f7f8 fdda 	bl	8002478 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80098c4:	bf00      	nop
 80098c6:	3728      	adds	r7, #40	@ 0x28
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	40023800 	.word	0x40023800
 80098d0:	40020000 	.word	0x40020000

080098d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80098e8:	4619      	mov	r1, r3
 80098ea:	4610      	mov	r0, r2
 80098ec:	f7fe fb6f 	bl	8007fce <USBD_LL_SetupStage>
}
 80098f0:	bf00      	nop
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	460b      	mov	r3, r1
 8009902:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800990a:	78fa      	ldrb	r2, [r7, #3]
 800990c:	6879      	ldr	r1, [r7, #4]
 800990e:	4613      	mov	r3, r2
 8009910:	00db      	lsls	r3, r3, #3
 8009912:	4413      	add	r3, r2
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	440b      	add	r3, r1
 8009918:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	78fb      	ldrb	r3, [r7, #3]
 8009920:	4619      	mov	r1, r3
 8009922:	f7fe fba9 	bl	8008078 <USBD_LL_DataOutStage>
}
 8009926:	bf00      	nop
 8009928:	3708      	adds	r7, #8
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800992e:	b580      	push	{r7, lr}
 8009930:	b082      	sub	sp, #8
 8009932:	af00      	add	r7, sp, #0
 8009934:	6078      	str	r0, [r7, #4]
 8009936:	460b      	mov	r3, r1
 8009938:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009940:	78fa      	ldrb	r2, [r7, #3]
 8009942:	6879      	ldr	r1, [r7, #4]
 8009944:	4613      	mov	r3, r2
 8009946:	00db      	lsls	r3, r3, #3
 8009948:	4413      	add	r3, r2
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	440b      	add	r3, r1
 800994e:	3320      	adds	r3, #32
 8009950:	681a      	ldr	r2, [r3, #0]
 8009952:	78fb      	ldrb	r3, [r7, #3]
 8009954:	4619      	mov	r1, r3
 8009956:	f7fe fc42 	bl	80081de <USBD_LL_DataInStage>
}
 800995a:	bf00      	nop
 800995c:	3708      	adds	r7, #8
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}

08009962 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b082      	sub	sp, #8
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009970:	4618      	mov	r0, r3
 8009972:	f7fe fd7c 	bl	800846e <USBD_LL_SOF>
}
 8009976:	bf00      	nop
 8009978:	3708      	adds	r7, #8
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}

0800997e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800997e:	b580      	push	{r7, lr}
 8009980:	b084      	sub	sp, #16
 8009982:	af00      	add	r7, sp, #0
 8009984:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009986:	2301      	movs	r3, #1
 8009988:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	79db      	ldrb	r3, [r3, #7]
 800998e:	2b02      	cmp	r3, #2
 8009990:	d001      	beq.n	8009996 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009992:	f7f8 f9b5 	bl	8001d00 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800999c:	7bfa      	ldrb	r2, [r7, #15]
 800999e:	4611      	mov	r1, r2
 80099a0:	4618      	mov	r0, r3
 80099a2:	f7fe fd20 	bl	80083e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7fe fcc8 	bl	8008342 <USBD_LL_Reset>
}
 80099b2:	bf00      	nop
 80099b4:	3710      	adds	r7, #16
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
	...

080099bc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b082      	sub	sp, #8
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80099ca:	4618      	mov	r0, r3
 80099cc:	f7fe fd1b 	bl	8008406 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	6812      	ldr	r2, [r2, #0]
 80099de:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80099e2:	f043 0301 	orr.w	r3, r3, #1
 80099e6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	7adb      	ldrb	r3, [r3, #11]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d005      	beq.n	80099fc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80099f0:	4b04      	ldr	r3, [pc, #16]	@ (8009a04 <HAL_PCD_SuspendCallback+0x48>)
 80099f2:	691b      	ldr	r3, [r3, #16]
 80099f4:	4a03      	ldr	r2, [pc, #12]	@ (8009a04 <HAL_PCD_SuspendCallback+0x48>)
 80099f6:	f043 0306 	orr.w	r3, r3, #6
 80099fa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80099fc:	bf00      	nop
 80099fe:	3708      	adds	r7, #8
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	e000ed00 	.word	0xe000ed00

08009a08 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b082      	sub	sp, #8
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a16:	4618      	mov	r0, r3
 8009a18:	f7fe fd11 	bl	800843e <USBD_LL_Resume>
}
 8009a1c:	bf00      	nop
 8009a1e:	3708      	adds	r7, #8
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	460b      	mov	r3, r1
 8009a2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a36:	78fa      	ldrb	r2, [r7, #3]
 8009a38:	4611      	mov	r1, r2
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f7fe fd69 	bl	8008512 <USBD_LL_IsoOUTIncomplete>
}
 8009a40:	bf00      	nop
 8009a42:	3708      	adds	r7, #8
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	460b      	mov	r3, r1
 8009a52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a5a:	78fa      	ldrb	r2, [r7, #3]
 8009a5c:	4611      	mov	r1, r2
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f7fe fd25 	bl	80084ae <USBD_LL_IsoINIncomplete>
}
 8009a64:	bf00      	nop
 8009a66:	3708      	adds	r7, #8
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f7fe fd7b 	bl	8008576 <USBD_LL_DevConnected>
}
 8009a80:	bf00      	nop
 8009a82:	3708      	adds	r7, #8
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009a96:	4618      	mov	r0, r3
 8009a98:	f7fe fd78 	bl	800858c <USBD_LL_DevDisconnected>
}
 8009a9c:	bf00      	nop
 8009a9e:	3708      	adds	r7, #8
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b082      	sub	sp, #8
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	781b      	ldrb	r3, [r3, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d13c      	bne.n	8009b2e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009ab4:	4a20      	ldr	r2, [pc, #128]	@ (8009b38 <USBD_LL_Init+0x94>)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	4a1e      	ldr	r2, [pc, #120]	@ (8009b38 <USBD_LL_Init+0x94>)
 8009ac0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8009b38 <USBD_LL_Init+0x94>)
 8009ac6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009aca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009acc:	4b1a      	ldr	r3, [pc, #104]	@ (8009b38 <USBD_LL_Init+0x94>)
 8009ace:	2204      	movs	r2, #4
 8009ad0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009ad2:	4b19      	ldr	r3, [pc, #100]	@ (8009b38 <USBD_LL_Init+0x94>)
 8009ad4:	2202      	movs	r2, #2
 8009ad6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009ad8:	4b17      	ldr	r3, [pc, #92]	@ (8009b38 <USBD_LL_Init+0x94>)
 8009ada:	2200      	movs	r2, #0
 8009adc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009ade:	4b16      	ldr	r3, [pc, #88]	@ (8009b38 <USBD_LL_Init+0x94>)
 8009ae0:	2202      	movs	r2, #2
 8009ae2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009ae4:	4b14      	ldr	r3, [pc, #80]	@ (8009b38 <USBD_LL_Init+0x94>)
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009aea:	4b13      	ldr	r3, [pc, #76]	@ (8009b38 <USBD_LL_Init+0x94>)
 8009aec:	2200      	movs	r2, #0
 8009aee:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009af0:	4b11      	ldr	r3, [pc, #68]	@ (8009b38 <USBD_LL_Init+0x94>)
 8009af2:	2200      	movs	r2, #0
 8009af4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009af6:	4b10      	ldr	r3, [pc, #64]	@ (8009b38 <USBD_LL_Init+0x94>)
 8009af8:	2200      	movs	r2, #0
 8009afa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009afc:	4b0e      	ldr	r3, [pc, #56]	@ (8009b38 <USBD_LL_Init+0x94>)
 8009afe:	2200      	movs	r2, #0
 8009b00:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009b02:	480d      	ldr	r0, [pc, #52]	@ (8009b38 <USBD_LL_Init+0x94>)
 8009b04:	f7f9 fcb0 	bl	8003468 <HAL_PCD_Init>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d001      	beq.n	8009b12 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009b0e:	f7f8 f8f7 	bl	8001d00 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009b12:	2180      	movs	r1, #128	@ 0x80
 8009b14:	4808      	ldr	r0, [pc, #32]	@ (8009b38 <USBD_LL_Init+0x94>)
 8009b16:	f7fa fedc 	bl	80048d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009b1a:	2240      	movs	r2, #64	@ 0x40
 8009b1c:	2100      	movs	r1, #0
 8009b1e:	4806      	ldr	r0, [pc, #24]	@ (8009b38 <USBD_LL_Init+0x94>)
 8009b20:	f7fa fe90 	bl	8004844 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009b24:	2280      	movs	r2, #128	@ 0x80
 8009b26:	2101      	movs	r1, #1
 8009b28:	4803      	ldr	r0, [pc, #12]	@ (8009b38 <USBD_LL_Init+0x94>)
 8009b2a:	f7fa fe8b 	bl	8004844 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009b2e:	2300      	movs	r3, #0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3708      	adds	r7, #8
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	200018c8 	.word	0x200018c8

08009b3c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b44:	2300      	movs	r3, #0
 8009b46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7f9 fd97 	bl	8003686 <HAL_PCD_Start>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b5c:	7bfb      	ldrb	r3, [r7, #15]
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f000 f942 	bl	8009de8 <USBD_Get_USB_Status>
 8009b64:	4603      	mov	r3, r0
 8009b66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b68:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}

08009b72 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b084      	sub	sp, #16
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	6078      	str	r0, [r7, #4]
 8009b7a:	4608      	mov	r0, r1
 8009b7c:	4611      	mov	r1, r2
 8009b7e:	461a      	mov	r2, r3
 8009b80:	4603      	mov	r3, r0
 8009b82:	70fb      	strb	r3, [r7, #3]
 8009b84:	460b      	mov	r3, r1
 8009b86:	70bb      	strb	r3, [r7, #2]
 8009b88:	4613      	mov	r3, r2
 8009b8a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b90:	2300      	movs	r3, #0
 8009b92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009b9a:	78bb      	ldrb	r3, [r7, #2]
 8009b9c:	883a      	ldrh	r2, [r7, #0]
 8009b9e:	78f9      	ldrb	r1, [r7, #3]
 8009ba0:	f7fa fa6b 	bl	800407a <HAL_PCD_EP_Open>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ba8:	7bfb      	ldrb	r3, [r7, #15]
 8009baa:	4618      	mov	r0, r3
 8009bac:	f000 f91c 	bl	8009de8 <USBD_Get_USB_Status>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3710      	adds	r7, #16
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b084      	sub	sp, #16
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
 8009bc6:	460b      	mov	r3, r1
 8009bc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009bd8:	78fa      	ldrb	r2, [r7, #3]
 8009bda:	4611      	mov	r1, r2
 8009bdc:	4618      	mov	r0, r3
 8009bde:	f7fa fab6 	bl	800414e <HAL_PCD_EP_Close>
 8009be2:	4603      	mov	r3, r0
 8009be4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009be6:	7bfb      	ldrb	r3, [r7, #15]
 8009be8:	4618      	mov	r0, r3
 8009bea:	f000 f8fd 	bl	8009de8 <USBD_Get_USB_Status>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bf2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
 8009c04:	460b      	mov	r3, r1
 8009c06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009c16:	78fa      	ldrb	r2, [r7, #3]
 8009c18:	4611      	mov	r1, r2
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7fa fb6e 	bl	80042fc <HAL_PCD_EP_SetStall>
 8009c20:	4603      	mov	r3, r0
 8009c22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c24:	7bfb      	ldrb	r3, [r7, #15]
 8009c26:	4618      	mov	r0, r3
 8009c28:	f000 f8de 	bl	8009de8 <USBD_Get_USB_Status>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c30:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b084      	sub	sp, #16
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	460b      	mov	r3, r1
 8009c44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c46:	2300      	movs	r3, #0
 8009c48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009c54:	78fa      	ldrb	r2, [r7, #3]
 8009c56:	4611      	mov	r1, r2
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7fa fbb2 	bl	80043c2 <HAL_PCD_EP_ClrStall>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c62:	7bfb      	ldrb	r3, [r7, #15]
 8009c64:	4618      	mov	r0, r3
 8009c66:	f000 f8bf 	bl	8009de8 <USBD_Get_USB_Status>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3710      	adds	r7, #16
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	460b      	mov	r3, r1
 8009c82:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009c8a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009c8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	da0b      	bge.n	8009cac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009c94:	78fb      	ldrb	r3, [r7, #3]
 8009c96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009c9a:	68f9      	ldr	r1, [r7, #12]
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	00db      	lsls	r3, r3, #3
 8009ca0:	4413      	add	r3, r2
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	440b      	add	r3, r1
 8009ca6:	3316      	adds	r3, #22
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	e00b      	b.n	8009cc4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009cac:	78fb      	ldrb	r3, [r7, #3]
 8009cae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009cb2:	68f9      	ldr	r1, [r7, #12]
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	00db      	lsls	r3, r3, #3
 8009cb8:	4413      	add	r3, r2
 8009cba:	009b      	lsls	r3, r3, #2
 8009cbc:	440b      	add	r3, r1
 8009cbe:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009cc2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3714      	adds	r7, #20
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	460b      	mov	r3, r1
 8009cda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009cea:	78fa      	ldrb	r2, [r7, #3]
 8009cec:	4611      	mov	r1, r2
 8009cee:	4618      	mov	r0, r3
 8009cf0:	f7fa f99f 	bl	8004032 <HAL_PCD_SetAddress>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cf8:	7bfb      	ldrb	r3, [r7, #15]
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f000 f874 	bl	8009de8 <USBD_Get_USB_Status>
 8009d00:	4603      	mov	r3, r0
 8009d02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d04:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b086      	sub	sp, #24
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	60f8      	str	r0, [r7, #12]
 8009d16:	607a      	str	r2, [r7, #4]
 8009d18:	603b      	str	r3, [r7, #0]
 8009d1a:	460b      	mov	r3, r1
 8009d1c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d22:	2300      	movs	r3, #0
 8009d24:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009d2c:	7af9      	ldrb	r1, [r7, #11]
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	f7fa faa9 	bl	8004288 <HAL_PCD_EP_Transmit>
 8009d36:	4603      	mov	r3, r0
 8009d38:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d3a:	7dfb      	ldrb	r3, [r7, #23]
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f000 f853 	bl	8009de8 <USBD_Get_USB_Status>
 8009d42:	4603      	mov	r3, r0
 8009d44:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d46:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d48:	4618      	mov	r0, r3
 8009d4a:	3718      	adds	r7, #24
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}

08009d50 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b086      	sub	sp, #24
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	607a      	str	r2, [r7, #4]
 8009d5a:	603b      	str	r3, [r7, #0]
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d60:	2300      	movs	r3, #0
 8009d62:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d64:	2300      	movs	r3, #0
 8009d66:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009d6e:	7af9      	ldrb	r1, [r7, #11]
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	f7fa fa35 	bl	80041e2 <HAL_PCD_EP_Receive>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d7c:	7dfb      	ldrb	r3, [r7, #23]
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f000 f832 	bl	8009de8 <USBD_Get_USB_Status>
 8009d84:	4603      	mov	r3, r0
 8009d86:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009d88:	7dbb      	ldrb	r3, [r7, #22]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3718      	adds	r7, #24
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b082      	sub	sp, #8
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009da4:	78fa      	ldrb	r2, [r7, #3]
 8009da6:	4611      	mov	r1, r2
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7fa fa55 	bl	8004258 <HAL_PCD_EP_GetRxCount>
 8009dae:	4603      	mov	r3, r0
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3708      	adds	r7, #8
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009dc0:	4b03      	ldr	r3, [pc, #12]	@ (8009dd0 <USBD_static_malloc+0x18>)
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	370c      	adds	r7, #12
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr
 8009dce:	bf00      	nop
 8009dd0:	20001dac 	.word	0x20001dac

08009dd4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]

}
 8009ddc:	bf00      	nop
 8009dde:	370c      	adds	r7, #12
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr

08009de8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009de8:	b480      	push	{r7}
 8009dea:	b085      	sub	sp, #20
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	4603      	mov	r3, r0
 8009df0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009df2:	2300      	movs	r3, #0
 8009df4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009df6:	79fb      	ldrb	r3, [r7, #7]
 8009df8:	2b03      	cmp	r3, #3
 8009dfa:	d817      	bhi.n	8009e2c <USBD_Get_USB_Status+0x44>
 8009dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8009e04 <USBD_Get_USB_Status+0x1c>)
 8009dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e02:	bf00      	nop
 8009e04:	08009e15 	.word	0x08009e15
 8009e08:	08009e1b 	.word	0x08009e1b
 8009e0c:	08009e21 	.word	0x08009e21
 8009e10:	08009e27 	.word	0x08009e27
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009e14:	2300      	movs	r3, #0
 8009e16:	73fb      	strb	r3, [r7, #15]
    break;
 8009e18:	e00b      	b.n	8009e32 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e1a:	2303      	movs	r3, #3
 8009e1c:	73fb      	strb	r3, [r7, #15]
    break;
 8009e1e:	e008      	b.n	8009e32 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e20:	2301      	movs	r3, #1
 8009e22:	73fb      	strb	r3, [r7, #15]
    break;
 8009e24:	e005      	b.n	8009e32 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e26:	2303      	movs	r3, #3
 8009e28:	73fb      	strb	r3, [r7, #15]
    break;
 8009e2a:	e002      	b.n	8009e32 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009e2c:	2303      	movs	r3, #3
 8009e2e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e30:	bf00      	nop
  }
  return usb_status;
 8009e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	3714      	adds	r7, #20
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <memset>:
 8009e40:	4402      	add	r2, r0
 8009e42:	4603      	mov	r3, r0
 8009e44:	4293      	cmp	r3, r2
 8009e46:	d100      	bne.n	8009e4a <memset+0xa>
 8009e48:	4770      	bx	lr
 8009e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8009e4e:	e7f9      	b.n	8009e44 <memset+0x4>

08009e50 <__errno>:
 8009e50:	4b01      	ldr	r3, [pc, #4]	@ (8009e58 <__errno+0x8>)
 8009e52:	6818      	ldr	r0, [r3, #0]
 8009e54:	4770      	bx	lr
 8009e56:	bf00      	nop
 8009e58:	20000180 	.word	0x20000180

08009e5c <__libc_init_array>:
 8009e5c:	b570      	push	{r4, r5, r6, lr}
 8009e5e:	4d0d      	ldr	r5, [pc, #52]	@ (8009e94 <__libc_init_array+0x38>)
 8009e60:	4c0d      	ldr	r4, [pc, #52]	@ (8009e98 <__libc_init_array+0x3c>)
 8009e62:	1b64      	subs	r4, r4, r5
 8009e64:	10a4      	asrs	r4, r4, #2
 8009e66:	2600      	movs	r6, #0
 8009e68:	42a6      	cmp	r6, r4
 8009e6a:	d109      	bne.n	8009e80 <__libc_init_array+0x24>
 8009e6c:	4d0b      	ldr	r5, [pc, #44]	@ (8009e9c <__libc_init_array+0x40>)
 8009e6e:	4c0c      	ldr	r4, [pc, #48]	@ (8009ea0 <__libc_init_array+0x44>)
 8009e70:	f000 f950 	bl	800a114 <_init>
 8009e74:	1b64      	subs	r4, r4, r5
 8009e76:	10a4      	asrs	r4, r4, #2
 8009e78:	2600      	movs	r6, #0
 8009e7a:	42a6      	cmp	r6, r4
 8009e7c:	d105      	bne.n	8009e8a <__libc_init_array+0x2e>
 8009e7e:	bd70      	pop	{r4, r5, r6, pc}
 8009e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e84:	4798      	blx	r3
 8009e86:	3601      	adds	r6, #1
 8009e88:	e7ee      	b.n	8009e68 <__libc_init_array+0xc>
 8009e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e8e:	4798      	blx	r3
 8009e90:	3601      	adds	r6, #1
 8009e92:	e7f2      	b.n	8009e7a <__libc_init_array+0x1e>
 8009e94:	0800a1a8 	.word	0x0800a1a8
 8009e98:	0800a1a8 	.word	0x0800a1a8
 8009e9c:	0800a1a8 	.word	0x0800a1a8
 8009ea0:	0800a1ac 	.word	0x0800a1ac

08009ea4 <fmod>:
 8009ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea6:	ed2d 8b02 	vpush	{d8}
 8009eaa:	ec57 6b10 	vmov	r6, r7, d0
 8009eae:	ec55 4b11 	vmov	r4, r5, d1
 8009eb2:	f000 f825 	bl	8009f00 <__ieee754_fmod>
 8009eb6:	4622      	mov	r2, r4
 8009eb8:	462b      	mov	r3, r5
 8009eba:	4630      	mov	r0, r6
 8009ebc:	4639      	mov	r1, r7
 8009ebe:	eeb0 8a40 	vmov.f32	s16, s0
 8009ec2:	eef0 8a60 	vmov.f32	s17, s1
 8009ec6:	f7f6 fddd 	bl	8000a84 <__aeabi_dcmpun>
 8009eca:	b990      	cbnz	r0, 8009ef2 <fmod+0x4e>
 8009ecc:	2200      	movs	r2, #0
 8009ece:	2300      	movs	r3, #0
 8009ed0:	4620      	mov	r0, r4
 8009ed2:	4629      	mov	r1, r5
 8009ed4:	f7f6 fda4 	bl	8000a20 <__aeabi_dcmpeq>
 8009ed8:	b158      	cbz	r0, 8009ef2 <fmod+0x4e>
 8009eda:	f7ff ffb9 	bl	8009e50 <__errno>
 8009ede:	2321      	movs	r3, #33	@ 0x21
 8009ee0:	6003      	str	r3, [r0, #0]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	4610      	mov	r0, r2
 8009ee8:	4619      	mov	r1, r3
 8009eea:	f7f6 fc5b 	bl	80007a4 <__aeabi_ddiv>
 8009eee:	ec41 0b18 	vmov	d8, r0, r1
 8009ef2:	eeb0 0a48 	vmov.f32	s0, s16
 8009ef6:	eef0 0a68 	vmov.f32	s1, s17
 8009efa:	ecbd 8b02 	vpop	{d8}
 8009efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009f00 <__ieee754_fmod>:
 8009f00:	ec53 2b11 	vmov	r2, r3, d1
 8009f04:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 8009f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f0c:	ea52 040c 	orrs.w	r4, r2, ip
 8009f10:	ec51 0b10 	vmov	r0, r1, d0
 8009f14:	461e      	mov	r6, r3
 8009f16:	4617      	mov	r7, r2
 8009f18:	4696      	mov	lr, r2
 8009f1a:	d00c      	beq.n	8009f36 <__ieee754_fmod+0x36>
 8009f1c:	4c77      	ldr	r4, [pc, #476]	@ (800a0fc <__ieee754_fmod+0x1fc>)
 8009f1e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8009f22:	45a0      	cmp	r8, r4
 8009f24:	4689      	mov	r9, r1
 8009f26:	d806      	bhi.n	8009f36 <__ieee754_fmod+0x36>
 8009f28:	4254      	negs	r4, r2
 8009f2a:	4d75      	ldr	r5, [pc, #468]	@ (800a100 <__ieee754_fmod+0x200>)
 8009f2c:	4314      	orrs	r4, r2
 8009f2e:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8009f32:	42ac      	cmp	r4, r5
 8009f34:	d909      	bls.n	8009f4a <__ieee754_fmod+0x4a>
 8009f36:	f7f6 fb0b 	bl	8000550 <__aeabi_dmul>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	f7f6 fc31 	bl	80007a4 <__aeabi_ddiv>
 8009f42:	ec41 0b10 	vmov	d0, r0, r1
 8009f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f4a:	45e0      	cmp	r8, ip
 8009f4c:	4682      	mov	sl, r0
 8009f4e:	4604      	mov	r4, r0
 8009f50:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8009f54:	dc09      	bgt.n	8009f6a <__ieee754_fmod+0x6a>
 8009f56:	dbf4      	blt.n	8009f42 <__ieee754_fmod+0x42>
 8009f58:	4282      	cmp	r2, r0
 8009f5a:	d8f2      	bhi.n	8009f42 <__ieee754_fmod+0x42>
 8009f5c:	d105      	bne.n	8009f6a <__ieee754_fmod+0x6a>
 8009f5e:	4b69      	ldr	r3, [pc, #420]	@ (800a104 <__ieee754_fmod+0x204>)
 8009f60:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8009f64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009f68:	e7eb      	b.n	8009f42 <__ieee754_fmod+0x42>
 8009f6a:	4a65      	ldr	r2, [pc, #404]	@ (800a100 <__ieee754_fmod+0x200>)
 8009f6c:	ea19 0f02 	tst.w	r9, r2
 8009f70:	d148      	bne.n	800a004 <__ieee754_fmod+0x104>
 8009f72:	f1b8 0f00 	cmp.w	r8, #0
 8009f76:	d13d      	bne.n	8009ff4 <__ieee754_fmod+0xf4>
 8009f78:	4963      	ldr	r1, [pc, #396]	@ (800a108 <__ieee754_fmod+0x208>)
 8009f7a:	4653      	mov	r3, sl
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	dc36      	bgt.n	8009fee <__ieee754_fmod+0xee>
 8009f80:	4216      	tst	r6, r2
 8009f82:	d14f      	bne.n	800a024 <__ieee754_fmod+0x124>
 8009f84:	f1bc 0f00 	cmp.w	ip, #0
 8009f88:	d144      	bne.n	800a014 <__ieee754_fmod+0x114>
 8009f8a:	4a5f      	ldr	r2, [pc, #380]	@ (800a108 <__ieee754_fmod+0x208>)
 8009f8c:	463b      	mov	r3, r7
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	dc3d      	bgt.n	800a00e <__ieee754_fmod+0x10e>
 8009f92:	485e      	ldr	r0, [pc, #376]	@ (800a10c <__ieee754_fmod+0x20c>)
 8009f94:	4281      	cmp	r1, r0
 8009f96:	db4a      	blt.n	800a02e <__ieee754_fmod+0x12e>
 8009f98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009fa0:	485a      	ldr	r0, [pc, #360]	@ (800a10c <__ieee754_fmod+0x20c>)
 8009fa2:	4282      	cmp	r2, r0
 8009fa4:	db57      	blt.n	800a056 <__ieee754_fmod+0x156>
 8009fa6:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8009faa:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 8009fae:	1a89      	subs	r1, r1, r2
 8009fb0:	1b98      	subs	r0, r3, r6
 8009fb2:	eba4 070e 	sub.w	r7, r4, lr
 8009fb6:	2900      	cmp	r1, #0
 8009fb8:	d162      	bne.n	800a080 <__ieee754_fmod+0x180>
 8009fba:	4574      	cmp	r4, lr
 8009fbc:	bf38      	it	cc
 8009fbe:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8009fc2:	2800      	cmp	r0, #0
 8009fc4:	bfa4      	itt	ge
 8009fc6:	463c      	movge	r4, r7
 8009fc8:	4603      	movge	r3, r0
 8009fca:	ea53 0104 	orrs.w	r1, r3, r4
 8009fce:	d0c6      	beq.n	8009f5e <__ieee754_fmod+0x5e>
 8009fd0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fd4:	db69      	blt.n	800a0aa <__ieee754_fmod+0x1aa>
 8009fd6:	494d      	ldr	r1, [pc, #308]	@ (800a10c <__ieee754_fmod+0x20c>)
 8009fd8:	428a      	cmp	r2, r1
 8009fda:	db6c      	blt.n	800a0b6 <__ieee754_fmod+0x1b6>
 8009fdc:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009fe0:	432b      	orrs	r3, r5
 8009fe2:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8009fe6:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009fea:	4620      	mov	r0, r4
 8009fec:	e7a9      	b.n	8009f42 <__ieee754_fmod+0x42>
 8009fee:	3901      	subs	r1, #1
 8009ff0:	005b      	lsls	r3, r3, #1
 8009ff2:	e7c3      	b.n	8009f7c <__ieee754_fmod+0x7c>
 8009ff4:	4945      	ldr	r1, [pc, #276]	@ (800a10c <__ieee754_fmod+0x20c>)
 8009ff6:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	ddc0      	ble.n	8009f80 <__ieee754_fmod+0x80>
 8009ffe:	3901      	subs	r1, #1
 800a000:	005b      	lsls	r3, r3, #1
 800a002:	e7fa      	b.n	8009ffa <__ieee754_fmod+0xfa>
 800a004:	ea4f 5128 	mov.w	r1, r8, asr #20
 800a008:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a00c:	e7b8      	b.n	8009f80 <__ieee754_fmod+0x80>
 800a00e:	3a01      	subs	r2, #1
 800a010:	005b      	lsls	r3, r3, #1
 800a012:	e7bc      	b.n	8009f8e <__ieee754_fmod+0x8e>
 800a014:	4a3d      	ldr	r2, [pc, #244]	@ (800a10c <__ieee754_fmod+0x20c>)
 800a016:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	ddb9      	ble.n	8009f92 <__ieee754_fmod+0x92>
 800a01e:	3a01      	subs	r2, #1
 800a020:	005b      	lsls	r3, r3, #1
 800a022:	e7fa      	b.n	800a01a <__ieee754_fmod+0x11a>
 800a024:	ea4f 522c 	mov.w	r2, ip, asr #20
 800a028:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a02c:	e7b1      	b.n	8009f92 <__ieee754_fmod+0x92>
 800a02e:	1a40      	subs	r0, r0, r1
 800a030:	281f      	cmp	r0, #31
 800a032:	dc0a      	bgt.n	800a04a <__ieee754_fmod+0x14a>
 800a034:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 800a038:	fa08 f800 	lsl.w	r8, r8, r0
 800a03c:	fa2a f303 	lsr.w	r3, sl, r3
 800a040:	ea43 0308 	orr.w	r3, r3, r8
 800a044:	fa0a f400 	lsl.w	r4, sl, r0
 800a048:	e7aa      	b.n	8009fa0 <__ieee754_fmod+0xa0>
 800a04a:	4b31      	ldr	r3, [pc, #196]	@ (800a110 <__ieee754_fmod+0x210>)
 800a04c:	1a5b      	subs	r3, r3, r1
 800a04e:	fa0a f303 	lsl.w	r3, sl, r3
 800a052:	2400      	movs	r4, #0
 800a054:	e7a4      	b.n	8009fa0 <__ieee754_fmod+0xa0>
 800a056:	1a80      	subs	r0, r0, r2
 800a058:	281f      	cmp	r0, #31
 800a05a:	dc0a      	bgt.n	800a072 <__ieee754_fmod+0x172>
 800a05c:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 800a060:	fa0c fc00 	lsl.w	ip, ip, r0
 800a064:	fa27 f606 	lsr.w	r6, r7, r6
 800a068:	ea46 060c 	orr.w	r6, r6, ip
 800a06c:	fa07 fe00 	lsl.w	lr, r7, r0
 800a070:	e79d      	b.n	8009fae <__ieee754_fmod+0xae>
 800a072:	4e27      	ldr	r6, [pc, #156]	@ (800a110 <__ieee754_fmod+0x210>)
 800a074:	1ab6      	subs	r6, r6, r2
 800a076:	fa07 f606 	lsl.w	r6, r7, r6
 800a07a:	f04f 0e00 	mov.w	lr, #0
 800a07e:	e796      	b.n	8009fae <__ieee754_fmod+0xae>
 800a080:	4574      	cmp	r4, lr
 800a082:	bf38      	it	cc
 800a084:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800a088:	2800      	cmp	r0, #0
 800a08a:	da05      	bge.n	800a098 <__ieee754_fmod+0x198>
 800a08c:	0fe0      	lsrs	r0, r4, #31
 800a08e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800a092:	0064      	lsls	r4, r4, #1
 800a094:	3901      	subs	r1, #1
 800a096:	e78b      	b.n	8009fb0 <__ieee754_fmod+0xb0>
 800a098:	ea50 0307 	orrs.w	r3, r0, r7
 800a09c:	f43f af5f 	beq.w	8009f5e <__ieee754_fmod+0x5e>
 800a0a0:	0ffb      	lsrs	r3, r7, #31
 800a0a2:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800a0a6:	007c      	lsls	r4, r7, #1
 800a0a8:	e7f4      	b.n	800a094 <__ieee754_fmod+0x194>
 800a0aa:	0fe1      	lsrs	r1, r4, #31
 800a0ac:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a0b0:	0064      	lsls	r4, r4, #1
 800a0b2:	3a01      	subs	r2, #1
 800a0b4:	e78c      	b.n	8009fd0 <__ieee754_fmod+0xd0>
 800a0b6:	1a89      	subs	r1, r1, r2
 800a0b8:	2914      	cmp	r1, #20
 800a0ba:	dc0a      	bgt.n	800a0d2 <__ieee754_fmod+0x1d2>
 800a0bc:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800a0c0:	fa03 f202 	lsl.w	r2, r3, r2
 800a0c4:	40cc      	lsrs	r4, r1
 800a0c6:	4322      	orrs	r2, r4
 800a0c8:	410b      	asrs	r3, r1
 800a0ca:	ea43 0105 	orr.w	r1, r3, r5
 800a0ce:	4610      	mov	r0, r2
 800a0d0:	e737      	b.n	8009f42 <__ieee754_fmod+0x42>
 800a0d2:	291f      	cmp	r1, #31
 800a0d4:	dc07      	bgt.n	800a0e6 <__ieee754_fmod+0x1e6>
 800a0d6:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800a0da:	40cc      	lsrs	r4, r1
 800a0dc:	fa03 f202 	lsl.w	r2, r3, r2
 800a0e0:	4322      	orrs	r2, r4
 800a0e2:	462b      	mov	r3, r5
 800a0e4:	e7f1      	b.n	800a0ca <__ieee754_fmod+0x1ca>
 800a0e6:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800a0ea:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800a0ee:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800a0f2:	32e2      	adds	r2, #226	@ 0xe2
 800a0f4:	fa43 f202 	asr.w	r2, r3, r2
 800a0f8:	e7f3      	b.n	800a0e2 <__ieee754_fmod+0x1e2>
 800a0fa:	bf00      	nop
 800a0fc:	7fefffff 	.word	0x7fefffff
 800a100:	7ff00000 	.word	0x7ff00000
 800a104:	0800a190 	.word	0x0800a190
 800a108:	fffffbed 	.word	0xfffffbed
 800a10c:	fffffc02 	.word	0xfffffc02
 800a110:	fffffbe2 	.word	0xfffffbe2

0800a114 <_init>:
 800a114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a116:	bf00      	nop
 800a118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a11a:	bc08      	pop	{r3}
 800a11c:	469e      	mov	lr, r3
 800a11e:	4770      	bx	lr

0800a120 <_fini>:
 800a120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a122:	bf00      	nop
 800a124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a126:	bc08      	pop	{r3}
 800a128:	469e      	mov	lr, r3
 800a12a:	4770      	bx	lr
