
STM32F411_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbe4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  0800cd88  0800cd88  0000dd88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d330  0800d330  0000f258  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d330  0800d330  0000e330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d338  0800d338  0000f258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d338  0800d338  0000e338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d33c  0800d33c  0000e33c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000258  20000000  0800d340  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000067c  20000258  0800d598  0000f258  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008d4  0800d598  0000f8d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f258  2**0
                  CONTENTS, READONLY
 12 .debug_info   000152cb  00000000  00000000  0000f288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f50  00000000  00000000  00024553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  000274a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ee8  00000000  00000000  000287b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000195f2  00000000  00000000  00029698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d73  00000000  00000000  00042c8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fbb0  00000000  00000000  0005a9fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fa5ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066a0  00000000  00000000  000fa5f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00100c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000258 	.word	0x20000258
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cd6c 	.word	0x0800cd6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000025c 	.word	0x2000025c
 80001dc:	0800cd6c 	.word	0x0800cd6c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9be 	b.w	800104c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	468e      	mov	lr, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	4688      	mov	r8, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d962      	bls.n	8000e30 <__udivmoddi4+0xdc>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	b14e      	cbz	r6, 8000d84 <__udivmoddi4+0x30>
 8000d70:	f1c6 0320 	rsb	r3, r6, #32
 8000d74:	fa01 f806 	lsl.w	r8, r1, r6
 8000d78:	fa20 f303 	lsr.w	r3, r0, r3
 8000d7c:	40b7      	lsls	r7, r6
 8000d7e:	ea43 0808 	orr.w	r8, r3, r8
 8000d82:	40b4      	lsls	r4, r6
 8000d84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d88:	fa1f fc87 	uxth.w	ip, r7
 8000d8c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d90:	0c23      	lsrs	r3, r4, #16
 8000d92:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000da8:	f080 80ea 	bcs.w	8000f80 <__udivmoddi4+0x22c>
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f240 80e7 	bls.w	8000f80 <__udivmoddi4+0x22c>
 8000db2:	3902      	subs	r1, #2
 8000db4:	443b      	add	r3, r7
 8000db6:	1a9a      	subs	r2, r3, r2
 8000db8:	b2a3      	uxth	r3, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dc6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dca:	459c      	cmp	ip, r3
 8000dcc:	d909      	bls.n	8000de2 <__udivmoddi4+0x8e>
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd4:	f080 80d6 	bcs.w	8000f84 <__udivmoddi4+0x230>
 8000dd8:	459c      	cmp	ip, r3
 8000dda:	f240 80d3 	bls.w	8000f84 <__udivmoddi4+0x230>
 8000dde:	443b      	add	r3, r7
 8000de0:	3802      	subs	r0, #2
 8000de2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de6:	eba3 030c 	sub.w	r3, r3, ip
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11d      	cbz	r5, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40f3      	lsrs	r3, r6
 8000df0:	2200      	movs	r2, #0
 8000df2:	e9c5 3200 	strd	r3, r2, [r5]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d905      	bls.n	8000e0a <__udivmoddi4+0xb6>
 8000dfe:	b10d      	cbz	r5, 8000e04 <__udivmoddi4+0xb0>
 8000e00:	e9c5 0100 	strd	r0, r1, [r5]
 8000e04:	2100      	movs	r1, #0
 8000e06:	4608      	mov	r0, r1
 8000e08:	e7f5      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e0a:	fab3 f183 	clz	r1, r3
 8000e0e:	2900      	cmp	r1, #0
 8000e10:	d146      	bne.n	8000ea0 <__udivmoddi4+0x14c>
 8000e12:	4573      	cmp	r3, lr
 8000e14:	d302      	bcc.n	8000e1c <__udivmoddi4+0xc8>
 8000e16:	4282      	cmp	r2, r0
 8000e18:	f200 8105 	bhi.w	8001026 <__udivmoddi4+0x2d2>
 8000e1c:	1a84      	subs	r4, r0, r2
 8000e1e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e22:	2001      	movs	r0, #1
 8000e24:	4690      	mov	r8, r2
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d0e5      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e2a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e2e:	e7e2      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	2a00      	cmp	r2, #0
 8000e32:	f000 8090 	beq.w	8000f56 <__udivmoddi4+0x202>
 8000e36:	fab2 f682 	clz	r6, r2
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	f040 80a4 	bne.w	8000f88 <__udivmoddi4+0x234>
 8000e40:	1a8a      	subs	r2, r1, r2
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e48:	b280      	uxth	r0, r0
 8000e4a:	b2bc      	uxth	r4, r7
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e52:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e5a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x11e>
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x11c>
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	f200 80e0 	bhi.w	8001030 <__udivmoddi4+0x2dc>
 8000e70:	46c4      	mov	ip, r8
 8000e72:	1a9b      	subs	r3, r3, r2
 8000e74:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e78:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e7c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e80:	fb02 f404 	mul.w	r4, r2, r4
 8000e84:	429c      	cmp	r4, r3
 8000e86:	d907      	bls.n	8000e98 <__udivmoddi4+0x144>
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x142>
 8000e90:	429c      	cmp	r4, r3
 8000e92:	f200 80ca 	bhi.w	800102a <__udivmoddi4+0x2d6>
 8000e96:	4602      	mov	r2, r0
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e9e:	e7a5      	b.n	8000dec <__udivmoddi4+0x98>
 8000ea0:	f1c1 0620 	rsb	r6, r1, #32
 8000ea4:	408b      	lsls	r3, r1
 8000ea6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eaa:	431f      	orrs	r7, r3
 8000eac:	fa0e f401 	lsl.w	r4, lr, r1
 8000eb0:	fa20 f306 	lsr.w	r3, r0, r6
 8000eb4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000eb8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ebc:	4323      	orrs	r3, r4
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	fa1f fc87 	uxth.w	ip, r7
 8000ec6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eca:	0c1c      	lsrs	r4, r3, #16
 8000ecc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ed0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ed4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ed8:	45a6      	cmp	lr, r4
 8000eda:	fa02 f201 	lsl.w	r2, r2, r1
 8000ede:	d909      	bls.n	8000ef4 <__udivmoddi4+0x1a0>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ee6:	f080 809c 	bcs.w	8001022 <__udivmoddi4+0x2ce>
 8000eea:	45a6      	cmp	lr, r4
 8000eec:	f240 8099 	bls.w	8001022 <__udivmoddi4+0x2ce>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	443c      	add	r4, r7
 8000ef4:	eba4 040e 	sub.w	r4, r4, lr
 8000ef8:	fa1f fe83 	uxth.w	lr, r3
 8000efc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f00:	fb09 4413 	mls	r4, r9, r3, r4
 8000f04:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f08:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f0c:	45a4      	cmp	ip, r4
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x1ce>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f16:	f080 8082 	bcs.w	800101e <__udivmoddi4+0x2ca>
 8000f1a:	45a4      	cmp	ip, r4
 8000f1c:	d97f      	bls.n	800101e <__udivmoddi4+0x2ca>
 8000f1e:	3b02      	subs	r3, #2
 8000f20:	443c      	add	r4, r7
 8000f22:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f26:	eba4 040c 	sub.w	r4, r4, ip
 8000f2a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f2e:	4564      	cmp	r4, ip
 8000f30:	4673      	mov	r3, lr
 8000f32:	46e1      	mov	r9, ip
 8000f34:	d362      	bcc.n	8000ffc <__udivmoddi4+0x2a8>
 8000f36:	d05f      	beq.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x1fe>
 8000f3a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f3e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f42:	fa04 f606 	lsl.w	r6, r4, r6
 8000f46:	fa22 f301 	lsr.w	r3, r2, r1
 8000f4a:	431e      	orrs	r6, r3
 8000f4c:	40cc      	lsrs	r4, r1
 8000f4e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f52:	2100      	movs	r1, #0
 8000f54:	e74f      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000f56:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f5a:	0c01      	lsrs	r1, r0, #16
 8000f5c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f60:	b280      	uxth	r0, r0
 8000f62:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f66:	463b      	mov	r3, r7
 8000f68:	4638      	mov	r0, r7
 8000f6a:	463c      	mov	r4, r7
 8000f6c:	46b8      	mov	r8, r7
 8000f6e:	46be      	mov	lr, r7
 8000f70:	2620      	movs	r6, #32
 8000f72:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f76:	eba2 0208 	sub.w	r2, r2, r8
 8000f7a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f7e:	e766      	b.n	8000e4e <__udivmoddi4+0xfa>
 8000f80:	4601      	mov	r1, r0
 8000f82:	e718      	b.n	8000db6 <__udivmoddi4+0x62>
 8000f84:	4610      	mov	r0, r2
 8000f86:	e72c      	b.n	8000de2 <__udivmoddi4+0x8e>
 8000f88:	f1c6 0220 	rsb	r2, r6, #32
 8000f8c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f90:	40b7      	lsls	r7, r6
 8000f92:	40b1      	lsls	r1, r6
 8000f94:	fa20 f202 	lsr.w	r2, r0, r2
 8000f98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fa2:	b2bc      	uxth	r4, r7
 8000fa4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fae:	fb08 f904 	mul.w	r9, r8, r4
 8000fb2:	40b0      	lsls	r0, r6
 8000fb4:	4589      	cmp	r9, r1
 8000fb6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fba:	b280      	uxth	r0, r0
 8000fbc:	d93e      	bls.n	800103c <__udivmoddi4+0x2e8>
 8000fbe:	1879      	adds	r1, r7, r1
 8000fc0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fc4:	d201      	bcs.n	8000fca <__udivmoddi4+0x276>
 8000fc6:	4589      	cmp	r9, r1
 8000fc8:	d81f      	bhi.n	800100a <__udivmoddi4+0x2b6>
 8000fca:	eba1 0109 	sub.w	r1, r1, r9
 8000fce:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd2:	fb09 f804 	mul.w	r8, r9, r4
 8000fd6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fda:	b292      	uxth	r2, r2
 8000fdc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fe0:	4542      	cmp	r2, r8
 8000fe2:	d229      	bcs.n	8001038 <__udivmoddi4+0x2e4>
 8000fe4:	18ba      	adds	r2, r7, r2
 8000fe6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fea:	d2c4      	bcs.n	8000f76 <__udivmoddi4+0x222>
 8000fec:	4542      	cmp	r2, r8
 8000fee:	d2c2      	bcs.n	8000f76 <__udivmoddi4+0x222>
 8000ff0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ff4:	443a      	add	r2, r7
 8000ff6:	e7be      	b.n	8000f76 <__udivmoddi4+0x222>
 8000ff8:	45f0      	cmp	r8, lr
 8000ffa:	d29d      	bcs.n	8000f38 <__udivmoddi4+0x1e4>
 8000ffc:	ebbe 0302 	subs.w	r3, lr, r2
 8001000:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001004:	3801      	subs	r0, #1
 8001006:	46e1      	mov	r9, ip
 8001008:	e796      	b.n	8000f38 <__udivmoddi4+0x1e4>
 800100a:	eba7 0909 	sub.w	r9, r7, r9
 800100e:	4449      	add	r1, r9
 8001010:	f1a8 0c02 	sub.w	ip, r8, #2
 8001014:	fbb1 f9fe 	udiv	r9, r1, lr
 8001018:	fb09 f804 	mul.w	r8, r9, r4
 800101c:	e7db      	b.n	8000fd6 <__udivmoddi4+0x282>
 800101e:	4673      	mov	r3, lr
 8001020:	e77f      	b.n	8000f22 <__udivmoddi4+0x1ce>
 8001022:	4650      	mov	r0, sl
 8001024:	e766      	b.n	8000ef4 <__udivmoddi4+0x1a0>
 8001026:	4608      	mov	r0, r1
 8001028:	e6fd      	b.n	8000e26 <__udivmoddi4+0xd2>
 800102a:	443b      	add	r3, r7
 800102c:	3a02      	subs	r2, #2
 800102e:	e733      	b.n	8000e98 <__udivmoddi4+0x144>
 8001030:	f1ac 0c02 	sub.w	ip, ip, #2
 8001034:	443b      	add	r3, r7
 8001036:	e71c      	b.n	8000e72 <__udivmoddi4+0x11e>
 8001038:	4649      	mov	r1, r9
 800103a:	e79c      	b.n	8000f76 <__udivmoddi4+0x222>
 800103c:	eba1 0109 	sub.w	r1, r1, r9
 8001040:	46c4      	mov	ip, r8
 8001042:	fbb1 f9fe 	udiv	r9, r1, lr
 8001046:	fb09 f804 	mul.w	r8, r9, r4
 800104a:	e7c4      	b.n	8000fd6 <__udivmoddi4+0x282>

0800104c <__aeabi_idiv0>:
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <micros>:
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

__STATIC_INLINE uint32_t micros(void){
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8001054:	4b07      	ldr	r3, [pc, #28]	@ (8001074 <micros+0x24>)
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	4b07      	ldr	r3, [pc, #28]	@ (8001078 <micros+0x28>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4907      	ldr	r1, [pc, #28]	@ (800107c <micros+0x2c>)
 800105e:	fba1 1303 	umull	r1, r3, r1, r3
 8001062:	0c9b      	lsrs	r3, r3, #18
 8001064:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e0001000 	.word	0xe0001000
 8001078:	20000084 	.word	0x20000084
 800107c:	431bde83 	.word	0x431bde83

08001080 <AS5600_ReadRegister>:

/*
 * Static low level functions to read/write to registers
 */
__STATIC_INLINE HAL_StatusTypeDef AS5600_ReadRegister(AS5600 *dev, uint8_t reg, uint8_t *data)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af04      	add	r7, sp, #16
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	460b      	mov	r3, r1
 800108a:	607a      	str	r2, [r7, #4]
 800108c:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(dev->i2cHandle, AS5600_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	7afb      	ldrb	r3, [r7, #11]
 8001094:	b29a      	uxth	r2, r3
 8001096:	2364      	movs	r3, #100	@ 0x64
 8001098:	9302      	str	r3, [sp, #8]
 800109a:	2301      	movs	r3, #1
 800109c:	9301      	str	r3, [sp, #4]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2301      	movs	r3, #1
 80010a4:	216c      	movs	r1, #108	@ 0x6c
 80010a6:	f003 fb31 	bl	800470c <HAL_I2C_Mem_Read>
 80010aa:	4603      	mov	r3, r0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <AS5600_ReadRegisters>:

__STATIC_INLINE HAL_StatusTypeDef AS5600_ReadRegisters(AS5600 *dev, uint8_t reg, uint8_t *data, uint8_t length)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af04      	add	r7, sp, #16
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	461a      	mov	r2, r3
 80010c0:	460b      	mov	r3, r1
 80010c2:	72fb      	strb	r3, [r7, #11]
 80010c4:	4613      	mov	r3, r2
 80010c6:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(dev->i2cHandle, AS5600_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, data, length, 100);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	7afb      	ldrb	r3, [r7, #11]
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	7abb      	ldrb	r3, [r7, #10]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	2164      	movs	r1, #100	@ 0x64
 80010d6:	9102      	str	r1, [sp, #8]
 80010d8:	9301      	str	r3, [sp, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2301      	movs	r3, #1
 80010e0:	216c      	movs	r1, #108	@ 0x6c
 80010e2:	f003 fb13 	bl	800470c <HAL_I2C_Mem_Read>
 80010e6:	4603      	mov	r3, r0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <AS5600_ReadRegisters_DMA>:
{
	return HAL_I2C_Mem_Read_DMA(dev->i2cHandle, AS5600_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, data, 1);
}

__STATIC_INLINE HAL_StatusTypeDef AS5600_ReadRegisters_DMA(AS5600 *dev, uint8_t reg, uint8_t *data, uint8_t length)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af02      	add	r7, sp, #8
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	461a      	mov	r2, r3
 80010fc:	460b      	mov	r3, r1
 80010fe:	72fb      	strb	r3, [r7, #11]
 8001100:	4613      	mov	r3, r2
 8001102:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read_DMA(dev->i2cHandle, AS5600_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, data, length);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6818      	ldr	r0, [r3, #0]
 8001108:	7afb      	ldrb	r3, [r7, #11]
 800110a:	b29a      	uxth	r2, r3
 800110c:	7abb      	ldrb	r3, [r7, #10]
 800110e:	b29b      	uxth	r3, r3
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2301      	movs	r3, #1
 8001118:	216c      	movs	r1, #108	@ 0x6c
 800111a:	f003 fd29 	bl	8004b70 <HAL_I2C_Mem_Read_DMA>
 800111e:	4603      	mov	r3, r0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <AS5600_CheckSensor>:

__STATIC_INLINE HAL_StatusTypeDef AS5600_CheckSensor(AS5600* dev, uint32_t trials)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
	return HAL_I2C_IsDeviceReady(dev->i2cHandle, AS5600_I2C_ADD, trials, 1000);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6818      	ldr	r0, [r3, #0]
 8001136:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	216c      	movs	r1, #108	@ 0x6c
 800113e:	f003 fea7 	bl	8004e90 <HAL_I2C_IsDeviceReady>
 8001142:	4603      	mov	r3, r0
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <AS5600_ZeroAngle>:
/*
 * @brief Zeroes the sensor value.
 * @param[in] AS5600* sensor
 */
void AS5600_ZeroAngle(AS5600* dev)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	dev->total_angle_rad = 0;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f04f 0200 	mov.w	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
	dev->prev_raw_angle = AS5600_GetRawAngle_Blocking(dev);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 f84d 	bl	80011fc <AS5600_GetRawAngle_Blocking>
 8001162:	4603      	mov	r3, r0
 8001164:	461a      	mov	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	809a      	strh	r2, [r3, #4]
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <AS5600_Init>:
/*
 * Initialization
 * Pass the struct to each function as pointer
 */
uint8_t AS5600_Init(AS5600* dev, I2C_HandleTypeDef* i2c_handle)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
	uint8_t init_status = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	73fb      	strb	r3, [r7, #15]

	/* Set struct params */
	dev->i2cHandle = i2c_handle;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	601a      	str	r2, [r3, #0]
	dev->total_angle_rad = 0;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
	dev->prev_time_us = micros();
 800118e:	f7ff ff5f 	bl	8001050 <micros>
 8001192:	4602      	mov	r2, r0
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	60da      	str	r2, [r3, #12]
	dev->regdata[0] = 0;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	719a      	strb	r2, [r3, #6]
	dev->regdata[1] = 0;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	71da      	strb	r2, [r3, #7]

	HAL_StatusTypeDef sensor_status = AS5600_CheckSensor(dev, 10);
 80011a4:	210a      	movs	r1, #10
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff ffbe 	bl	8001128 <AS5600_CheckSensor>
 80011ac:	4603      	mov	r3, r0
 80011ae:	73bb      	strb	r3, [r7, #14]

	if(sensor_status != HAL_OK)
 80011b0:	7bbb      	ldrb	r3, [r7, #14]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d007      	beq.n	80011c6 <AS5600_Init+0x54>
	{
		dev->i2cHandle = NULL;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
		return (init_status | AS5600_READY_MSK);
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	e016      	b.n	80011f4 <AS5600_Init+0x82>
	}

	/* Check magnet strength */
	uint8_t magnet_status = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	737b      	strb	r3, [r7, #13]

	AS5600_ReadRegister(dev, MAGNET_STATUS_REG, &magnet_status);
 80011ca:	f107 030d 	add.w	r3, r7, #13
 80011ce:	461a      	mov	r2, r3
 80011d0:	210b      	movs	r1, #11
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ff54 	bl	8001080 <AS5600_ReadRegister>
	if((magnet_status & MAGNET_OK_MSK) == 0)
 80011d8:	7b7b      	ldrb	r3, [r7, #13]
 80011da:	f003 0320 	and.w	r3, r3, #32
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d107      	bne.n	80011f2 <AS5600_Init+0x80>
	{
		dev->i2cHandle = NULL;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
		return (init_status | magnet_status);
 80011e8:	7b7a      	ldrb	r2, [r7, #13]
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	e000      	b.n	80011f4 <AS5600_Init+0x82>
	}

	return init_status;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <AS5600_GetRawAngle_Blocking>:

/*
 * @brief Blocking function to read AS5600 sensor raw angle
 */
uint16_t AS5600_GetRawAngle_Blocking(AS5600* dev)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = AS5600_ReadRegisters(dev, RAW_ANGLE_MSB_REG, dev->regdata, 2);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	1d9a      	adds	r2, r3, #6
 8001208:	2302      	movs	r3, #2
 800120a:	210c      	movs	r1, #12
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ff51 	bl	80010b4 <AS5600_ReadRegisters>
 8001212:	4603      	mov	r3, r0
 8001214:	73fb      	strb	r3, [r7, #15]

	if(status != HAL_OK)
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <AS5600_GetRawAngle_Blocking+0x24>
	{
		return 0;
 800121c:	2300      	movs	r3, #0
 800121e:	e00e      	b.n	800123e <AS5600_GetRawAngle_Blocking+0x42>
	}

	uint16_t raw_angle = (((dev->regdata[0] & 0x0F) << 8) | dev->regdata[1]);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	799b      	ldrb	r3, [r3, #6]
 8001224:	b21b      	sxth	r3, r3
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	b21b      	sxth	r3, r3
 800122a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800122e:	b21a      	sxth	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	79db      	ldrb	r3, [r3, #7]
 8001234:	b21b      	sxth	r3, r3
 8001236:	4313      	orrs	r3, r2
 8001238:	b21b      	sxth	r3, r3
 800123a:	81bb      	strh	r3, [r7, #12]
	return raw_angle;
 800123c:	89bb      	ldrh	r3, [r7, #12]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <AS5600_UpdateAngle_DMA>:

/*
 * @brief Callback to start DMA transaction & update angle value
 */
void AS5600_UpdateAngle_DMA(AS5600 *dev)
{
 8001248:	b5b0      	push	{r4, r5, r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	if(dev == NULL) {
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 8096 	beq.w	8001384 <AS5600_UpdateAngle_DMA+0x13c>
		return;
	}

	HAL_StatusTypeDef status = AS5600_ReadRegisters_DMA(dev, RAW_ANGLE_MSB_REG, dev->regdata, 2);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	1d9a      	adds	r2, r3, #6
 800125c:	2302      	movs	r3, #2
 800125e:	210c      	movs	r1, #12
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ff45 	bl	80010f0 <AS5600_ReadRegisters_DMA>
 8001266:	4603      	mov	r3, r0
 8001268:	73fb      	strb	r3, [r7, #15]

	/* Return early if register read fails */
	if(status != HAL_OK) {
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	2b00      	cmp	r3, #0
 800126e:	f040 808b 	bne.w	8001388 <AS5600_UpdateAngle_DMA+0x140>
		return;
	}

	/* Mask & shift 4 MSB left by 8 and concatenate with 8 LSBs */
	uint16_t raw_angle = (((dev->regdata[0] & 0x0F) << 8) | dev->regdata[1]);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	799b      	ldrb	r3, [r3, #6]
 8001276:	b21b      	sxth	r3, r3
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	b21b      	sxth	r3, r3
 800127c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001280:	b21a      	sxth	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	79db      	ldrb	r3, [r3, #7]
 8001286:	b21b      	sxth	r3, r3
 8001288:	4313      	orrs	r3, r2
 800128a:	b21b      	sxth	r3, r3
 800128c:	81bb      	strh	r3, [r7, #12]

	/* Calculate angle delta from previous angle */
	int16_t delta = raw_angle - dev->prev_raw_angle;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	889b      	ldrh	r3, [r3, #4]
 8001292:	89ba      	ldrh	r2, [r7, #12]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	b29b      	uxth	r3, r3
 8001298:	817b      	strh	r3, [r7, #10]

	/*
	 * Positive large delta -> negative overflow
	 * Negative large delta -> positive overflow
	 */
	if(delta > HALF_MAX_RESOLUTION) {
 800129a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800129e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80012a2:	db23      	blt.n	80012ec <AS5600_UpdateAngle_DMA+0xa4>
		dev->total_angle_rad -= (MAX_RESOLUTION - delta) * BIT_TO_RAD;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f965 	bl	8000578 <__aeabi_f2d>
 80012ae:	4604      	mov	r4, r0
 80012b0:	460d      	mov	r5, r1
 80012b2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012b6:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 80012ba:	330f      	adds	r3, #15
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f949 	bl	8000554 <__aeabi_i2d>
 80012c2:	a333      	add	r3, pc, #204	@ (adr r3, 8001390 <AS5600_UpdateAngle_DMA+0x148>)
 80012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c8:	f7ff f9ae 	bl	8000628 <__aeabi_dmul>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4620      	mov	r0, r4
 80012d2:	4629      	mov	r1, r5
 80012d4:	f7fe fff0 	bl	80002b8 <__aeabi_dsub>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4610      	mov	r0, r2
 80012de:	4619      	mov	r1, r3
 80012e0:	f7ff fc9a 	bl	8000c18 <__aeabi_d2f>
 80012e4:	4602      	mov	r2, r0
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	e047      	b.n	800137c <AS5600_UpdateAngle_DMA+0x134>
	}
	else if(delta < -HALF_MAX_RESOLUTION) {
 80012ec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012f0:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 80012f4:	dc22      	bgt.n	800133c <AS5600_UpdateAngle_DMA+0xf4>
		dev->total_angle_rad += (MAX_RESOLUTION + delta) * BIT_TO_RAD;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f93c 	bl	8000578 <__aeabi_f2d>
 8001300:	4604      	mov	r4, r0
 8001302:	460d      	mov	r5, r1
 8001304:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001308:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff f921 	bl	8000554 <__aeabi_i2d>
 8001312:	a31f      	add	r3, pc, #124	@ (adr r3, 8001390 <AS5600_UpdateAngle_DMA+0x148>)
 8001314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001318:	f7ff f986 	bl	8000628 <__aeabi_dmul>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4620      	mov	r0, r4
 8001322:	4629      	mov	r1, r5
 8001324:	f7fe ffca 	bl	80002bc <__adddf3>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	f7ff fc72 	bl	8000c18 <__aeabi_d2f>
 8001334:	4602      	mov	r2, r0
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	e01f      	b.n	800137c <AS5600_UpdateAngle_DMA+0x134>
	}
	else {
		dev->total_angle_rad += delta * BIT_TO_RAD;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f919 	bl	8000578 <__aeabi_f2d>
 8001346:	4604      	mov	r4, r0
 8001348:	460d      	mov	r5, r1
 800134a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f900 	bl	8000554 <__aeabi_i2d>
 8001354:	a30e      	add	r3, pc, #56	@ (adr r3, 8001390 <AS5600_UpdateAngle_DMA+0x148>)
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	f7ff f965 	bl	8000628 <__aeabi_dmul>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4620      	mov	r0, r4
 8001364:	4629      	mov	r1, r5
 8001366:	f7fe ffa9 	bl	80002bc <__adddf3>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4610      	mov	r0, r2
 8001370:	4619      	mov	r1, r3
 8001372:	f7ff fc51 	bl	8000c18 <__aeabi_d2f>
 8001376:	4602      	mov	r2, r0
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	609a      	str	r2, [r3, #8]
	}

	dev->prev_raw_angle = raw_angle;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	89ba      	ldrh	r2, [r7, #12]
 8001380:	809a      	strh	r2, [r3, #4]
 8001382:	e002      	b.n	800138a <AS5600_UpdateAngle_DMA+0x142>
		return;
 8001384:	bf00      	nop
 8001386:	e000      	b.n	800138a <AS5600_UpdateAngle_DMA+0x142>
		return;
 8001388:	bf00      	nop
}
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bdb0      	pop	{r4, r5, r7, pc}
 8001390:	8b5cd7aa 	.word	0x8b5cd7aa
 8001394:	3f59238d 	.word	0x3f59238d

08001398 <_cos>:
/*
 * @brief Cosine approximation
 * @param[in] angle(radians)
 * @return cos(angle)
 */
__STATIC_INLINE float _cos(float angle) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	ed87 0a01 	vstr	s0, [r7, #4]
  float _angle = angle + _PI_2;
 80013a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a6:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80013f0 <_cos+0x58>
 80013aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013ae:	edc7 7a03 	vstr	s15, [r7, #12]
  _angle = _angle > _2PI ? _angle - _2PI : _angle;
 80013b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80013b6:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80013f4 <_cos+0x5c>
 80013ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c2:	dd06      	ble.n	80013d2 <_cos+0x3a>
 80013c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80013c8:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80013f4 <_cos+0x5c>
 80013cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013d0:	e001      	b.n	80013d6 <_cos+0x3e>
 80013d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80013d6:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(_angle);
 80013da:	ed97 0a03 	vldr	s0, [r7, #12]
 80013de:	f000 fa85 	bl	80018ec <_sin>
 80013e2:	eef0 7a40 	vmov.f32	s15, s0
}
 80013e6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	3fc90fdb 	.word	0x3fc90fdb
 80013f4:	40c90fdb 	.word	0x40c90fdb

080013f8 <_normalizeAngle>:
/*
 * @brief Normalize angle to [0, 2pi]
 * @param[in] angle(radians)
 * @return normalized_angle
 */
__STATIC_INLINE float _normalizeAngle(float angle){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff f8b8 	bl	8000578 <__aeabi_f2d>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 8001458 <_normalizeAngle+0x60>
 8001410:	ec43 2b10 	vmov	d0, r2, r3
 8001414:	f00b fb74 	bl	800cb00 <fmod>
 8001418:	ec53 2b10 	vmov	r2, r3, d0
 800141c:	4610      	mov	r0, r2
 800141e:	4619      	mov	r1, r3
 8001420:	f7ff fbfa 	bl	8000c18 <__aeabi_d2f>
 8001424:	4603      	mov	r3, r0
 8001426:	60fb      	str	r3, [r7, #12]

  /* Add 2pi to negative values to make positive */
  return a >= 0 ? a : (a + _2PI);
 8001428:	edd7 7a03 	vldr	s15, [r7, #12]
 800142c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001434:	db02      	blt.n	800143c <_normalizeAngle+0x44>
 8001436:	edd7 7a03 	vldr	s15, [r7, #12]
 800143a:	e005      	b.n	8001448 <_normalizeAngle+0x50>
 800143c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001440:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001460 <_normalizeAngle+0x68>
 8001444:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001448:	eeb0 0a67 	vmov.f32	s0, s15
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	f3af 8000 	nop.w
 8001458:	60000000 	.word	0x60000000
 800145c:	401921fb 	.word	0x401921fb
 8001460:	40c90fdb 	.word	0x40c90fdb

08001464 <_electricalAngle>:
 * @brief Calculates electrical angle from rotor angle
 * @param[in] shaft_angle(radians)
 * @param[in] pole_pairs
 * @return electrical angle
 */
__STATIC_INLINE float _electricalAngle(float shaft_angle, uint8_t pole_pairs){
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	ed87 0a01 	vstr	s0, [r7, #4]
 800146e:	4603      	mov	r3, r0
 8001470:	70fb      	strb	r3, [r7, #3]
  return shaft_angle * pole_pairs;
 8001472:	78fb      	ldrb	r3, [r7, #3]
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800147c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001480:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001484:	eeb0 0a67 	vmov.f32	s0, s15
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr

08001492 <PWM_Start_3_Channel>:
/*
 * @brief Starts PWM channels 1, 2, 3 of specified timer.
 * @param[in] TIM_HandleTypeDef timer
 */
void PWM_Start_3_Channel(TIM_HandleTypeDef* timer)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(timer, TIM_CHANNEL_1);
 800149a:	2100      	movs	r1, #0
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f004 ff97 	bl	80063d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer, TIM_CHANNEL_2);
 80014a2:	2104      	movs	r1, #4
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f004 ff93 	bl	80063d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer, TIM_CHANNEL_3);
 80014aa:	2108      	movs	r1, #8
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f004 ff8f 	bl	80063d0 <HAL_TIM_PWM_Start>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <SetPWM>:
 * @scope static
 * @brief Set pwm duty cycle of timer channels
 * @param[in] BLDCMotor* motor
 */
__STATIC_INLINE void SetPWM(BLDCMotor* motor)
{
 80014ba:	b480      	push	{r7}
 80014bc:	b085      	sub	sp, #20
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
	uint32_t ARR = motor->timer->Instance->ARR;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ca:	60fb      	str	r3, [r7, #12]
	motor->timer->Instance->CCR1 = (motor->pv.Ua / motor->supply_voltage) * ARR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80014d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	ee07 3a90 	vmov	s15, r3
 80014e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014f4:	ee17 2a90 	vmov	r2, s15
 80014f8:	635a      	str	r2, [r3, #52]	@ 0x34
	motor->timer->Instance->CCR2 = (motor->pv.Ub / motor->supply_voltage) * ARR;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	edd3 7a02 	vldr	s15, [r3, #8]
 8001506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	ee07 3a90 	vmov	s15, r3
 8001510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001522:	ee17 2a90 	vmov	r2, s15
 8001526:	639a      	str	r2, [r3, #56]	@ 0x38
	motor->timer->Instance->CCR3 = (motor->pv.Uc / motor->supply_voltage) * ARR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	edd3 7a02 	vldr	s15, [r3, #8]
 8001534:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	ee07 3a90 	vmov	s15, r3
 800153e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001550:	ee17 2a90 	vmov	r2, s15
 8001554:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001556:	bf00      	nop
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <Var_t_Init>:
 * @scope Static
 * @brief Initializers for motor sub-structs
 * @retval Struct_t struct
 */
static Var_t Var_t_Init()
{
 8001562:	b490      	push	{r4, r7}
 8001564:	b086      	sub	sp, #24
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
	Var_t vars = {
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
		.prev_us = 0,
		.phase_current[0] = 0,
		.phase_current[1] = 0
	};

	return vars;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	461c      	mov	r4, r3
 800157c:	f107 0308 	add.w	r3, r7, #8
 8001580:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001582:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	3718      	adds	r7, #24
 800158a:	46bd      	mov	sp, r7
 800158c:	bc90      	pop	{r4, r7}
 800158e:	4770      	bx	lr

08001590 <DQ_t_Init>:

static DQ_t DQ_t_Init()
{
 8001590:	b480      	push	{r7}
 8001592:	b087      	sub	sp, #28
 8001594:	af00      	add	r7, sp, #0
	DQ_t dq = {
 8001596:	f04f 0300 	mov.w	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	f04f 0300 	mov.w	r3, #0
 80015a0:	60fb      	str	r3, [r7, #12]
		.Ud = 0,
		.Uq = 0
	};

	return dq;
 80015a2:	f107 0310 	add.w	r3, r7, #16
 80015a6:	f107 0208 	add.w	r2, r7, #8
 80015aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015ae:	e883 0003 	stmia.w	r3, {r0, r1}
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	ee07 2a10 	vmov	s14, r2
 80015ba:	ee07 3a90 	vmov	s15, r3
}
 80015be:	eeb0 0a47 	vmov.f32	s0, s14
 80015c2:	eef0 0a67 	vmov.f32	s1, s15
 80015c6:	371c      	adds	r7, #28
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <PV_t_Init>:

static PV_t PV_t_Init()
{
 80015d0:	b480      	push	{r7}
 80015d2:	b08b      	sub	sp, #44	@ 0x2c
 80015d4:	af00      	add	r7, sp, #0
	PV_t pv = {
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	f04f 0300 	mov.w	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
		.Ua = 0,
		.Ub = 0,
		.Uc = 0
	};

	return pv;
 80015e8:	f107 031c 	add.w	r3, r7, #28
 80015ec:	f107 0210 	add.w	r2, r7, #16
 80015f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80015f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80015f6:	69f9      	ldr	r1, [r7, #28]
 80015f8:	6a3a      	ldr	r2, [r7, #32]
 80015fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015fc:	ee06 1a90 	vmov	s13, r1
 8001600:	ee07 2a10 	vmov	s14, r2
 8001604:	ee07 3a90 	vmov	s15, r3
}
 8001608:	eeb0 0a66 	vmov.f32	s0, s13
 800160c:	eef0 0a47 	vmov.f32	s1, s14
 8001610:	eeb0 1a67 	vmov.f32	s2, s15
 8001614:	372c      	adds	r7, #44	@ 0x2c
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
	...

08001620 <BLDCMotor_Init>:
 * - Voltage limit is 3V by default.
 *
 * @retval BLDCMotor motor
 */
void BLDCMotor_Init(BLDCMotor* motor, TIM_HandleTypeDef* timer, uint8_t pole_pairs)
{
 8001620:	b5b0      	push	{r4, r5, r7, lr}
 8001622:	b092      	sub	sp, #72	@ 0x48
 8001624:	af00      	add	r7, sp, #0
 8001626:	6478      	str	r0, [r7, #68]	@ 0x44
 8001628:	6439      	str	r1, [r7, #64]	@ 0x40
 800162a:	4613      	mov	r3, r2
 800162c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	/* Store motor in motor array, to be referenced by other functions globally */
	if(BLDCMotorArray[0] == NULL)
 8001630:	4b3c      	ldr	r3, [pc, #240]	@ (8001724 <BLDCMotor_Init+0x104>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d103      	bne.n	8001640 <BLDCMotor_Init+0x20>
	{
		BLDCMotorArray[0] = motor;
 8001638:	4a3a      	ldr	r2, [pc, #232]	@ (8001724 <BLDCMotor_Init+0x104>)
 800163a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800163c:	6013      	str	r3, [r2, #0]
 800163e:	e006      	b.n	800164e <BLDCMotor_Init+0x2e>
	}
	else if(BLDCMotorArray[1] == NULL)
 8001640:	4b38      	ldr	r3, [pc, #224]	@ (8001724 <BLDCMotor_Init+0x104>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d168      	bne.n	800171a <BLDCMotor_Init+0xfa>
	{
		BLDCMotorArray[1] = motor;
 8001648:	4a36      	ldr	r2, [pc, #216]	@ (8001724 <BLDCMotor_Init+0x104>)
 800164a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800164c:	6053      	str	r3, [r2, #4]
	else
	{
		return;
	}

	motor->sensor_dir = 1;
 800164e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
	motor->pole_pairs = pole_pairs;
 8001654:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001656:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800165a:	705a      	strb	r2, [r3, #1]
	motor->vars.phase_current[0] = 0;
 800165c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
	motor->vars.phase_current[1] = 0;
 8001662:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
	motor->voltage_limit = 3;
 8001668:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800166a:	4a2f      	ldr	r2, [pc, #188]	@ (8001728 <BLDCMotor_Init+0x108>)
 800166c:	605a      	str	r2, [r3, #4]
	motor->supply_voltage = 12;
 800166e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001670:	4a2e      	ldr	r2, [pc, #184]	@ (800172c <BLDCMotor_Init+0x10c>)
 8001672:	609a      	str	r2, [r3, #8]

	motor->target_velocity = 0;
 8001674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	60da      	str	r2, [r3, #12]
	motor->target_pos = 0;
 800167c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	611a      	str	r2, [r3, #16]

	motor->vars = Var_t_Init();
 8001684:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8001686:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff ff69 	bl	8001562 <Var_t_Init>
 8001690:	3414      	adds	r4, #20
 8001692:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001696:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001698:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	motor->dq = DQ_t_Init();
 800169c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800169e:	f7ff ff77 	bl	8001590 <DQ_t_Init>
 80016a2:	eeb0 7a40 	vmov.f32	s14, s0
 80016a6:	eef0 7a60 	vmov.f32	s15, s1
 80016aa:	ed84 7a09 	vstr	s14, [r4, #36]	@ 0x24
 80016ae:	edc4 7a0a 	vstr	s15, [r4, #40]	@ 0x28
	motor->pv = PV_t_Init();
 80016b2:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80016b4:	f7ff ff8c 	bl	80015d0 <PV_t_Init>
 80016b8:	eef0 6a40 	vmov.f32	s13, s0
 80016bc:	eeb0 7a60 	vmov.f32	s14, s1
 80016c0:	eef0 7a41 	vmov.f32	s15, s2
 80016c4:	edc4 6a0b 	vstr	s13, [r4, #44]	@ 0x2c
 80016c8:	ed84 7a0c 	vstr	s14, [r4, #48]	@ 0x30
 80016cc:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
	motor->pid = PID_Init();
 80016d0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80016d2:	463b      	mov	r3, r7
 80016d4:	4618      	mov	r0, r3
 80016d6:	f000 fddd 	bl	8002294 <PID_Init>
 80016da:	3438      	adds	r4, #56	@ 0x38
 80016dc:	463d      	mov	r5, r7
 80016de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016e6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80016ea:	e884 0003 	stmia.w	r4, {r0, r1}
	motor->lpf = LPF_Init();
 80016ee:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80016f0:	463b      	mov	r3, r7
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 f97a 	bl	80019ec <LPF_Init>
 80016f8:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 80016fc:	463a      	mov	r2, r7
 80016fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001700:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	motor->control = none;
 8001704:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001706:	2201      	movs	r2, #1
 8001708:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
	motor->sensor = NULL;
 800170c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800170e:	2200      	movs	r2, #0
 8001710:	671a      	str	r2, [r3, #112]	@ 0x70
	motor->timer = timer;
 8001712:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001714:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001716:	675a      	str	r2, [r3, #116]	@ 0x74
 8001718:	e000      	b.n	800171c <BLDCMotor_Init+0xfc>
		return;
 800171a:	bf00      	nop

}
 800171c:	3748      	adds	r7, #72	@ 0x48
 800171e:	46bd      	mov	sp, r7
 8001720:	bdb0      	pop	{r4, r5, r7, pc}
 8001722:	bf00      	nop
 8001724:	20000274 	.word	0x20000274
 8001728:	40400000 	.word	0x40400000
 800172c:	41400000 	.word	0x41400000

08001730 <SetTorque>:
/*
 * @brief Inverse Clarke & Park transformations to calculate phase voltages
 * @param[in] BLDCMotor* motor
 * @note Calls setpwm()
 */
void SetTorque(BLDCMotor* motor) {
 8001730:	b580      	push	{r7, lr}
 8001732:	ed2d 8b02 	vpush	{d8}
 8001736:	b088      	sub	sp, #32
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	/* Constrain Uq to within voltage range */
	motor->dq.Uq = _constrain(motor->dq.Uq, -motor->voltage_limit, motor->voltage_limit);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	edd3 7a01 	vldr	s15, [r3, #4]
 8001748:	eef1 7a67 	vneg.f32	s15, s15
 800174c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001754:	d505      	bpl.n	8001762 <SetTorque+0x32>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	edd3 7a01 	vldr	s15, [r3, #4]
 800175c:	eef1 7a67 	vneg.f32	s15, s15
 8001760:	e011      	b.n	8001786 <SetTorque+0x56>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	edd3 7a01 	vldr	s15, [r3, #4]
 800176e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001776:	dd03      	ble.n	8001780 <SetTorque+0x50>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	edd3 7a01 	vldr	s15, [r3, #4]
 800177e:	e002      	b.n	8001786 <SetTorque+0x56>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    /* Normalize electric angle */
	/* Note that _normalizeAngle() works with floats, not fix16 */
    float el_angle = _normalizeAngle(_electricalAngle(motor->vars.shaft_angle, motor->pole_pairs));
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	785b      	ldrb	r3, [r3, #1]
 8001796:	4618      	mov	r0, r3
 8001798:	eeb0 0a67 	vmov.f32	s0, s15
 800179c:	f7ff fe62 	bl	8001464 <_electricalAngle>
 80017a0:	eef0 7a40 	vmov.f32	s15, s0
 80017a4:	eeb0 0a67 	vmov.f32	s0, s15
 80017a8:	f7ff fe26 	bl	80013f8 <_normalizeAngle>
 80017ac:	ed87 0a07 	vstr	s0, [r7, #28]

	/* Inverse park transform */
	float Ualpha = motor->dq.Uq * _cos(el_angle);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
 80017b6:	ed97 0a07 	vldr	s0, [r7, #28]
 80017ba:	f7ff fded 	bl	8001398 <_cos>
 80017be:	eef0 7a40 	vmov.f32	s15, s0
 80017c2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80017c6:	edc7 7a06 	vstr	s15, [r7, #24]
	float Ubeta = motor->dq.Uq * _sin(el_angle);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
 80017d0:	ed97 0a07 	vldr	s0, [r7, #28]
 80017d4:	f000 f88a 	bl	80018ec <_sin>
 80017d8:	eef0 7a40 	vmov.f32	s15, s0
 80017dc:	ee68 7a27 	vmul.f32	s15, s16, s15
 80017e0:	edc7 7a05 	vstr	s15, [r7, #20]

	float half_supply_v = motor->supply_voltage / 2.0f;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	ed93 7a02 	vldr	s14, [r3, #8]
 80017ea:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80017ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017f2:	edc7 7a04 	vstr	s15, [r7, #16]
	float sqrt3_beta = Ubeta * _SQRT3;
 80017f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80017fa:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001874 <SetTorque+0x144>
 80017fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001802:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Inverse Clarke transform */
	motor->pv.Ua = Ualpha + half_supply_v;
 8001806:	ed97 7a06 	vldr	s14, [r7, #24]
 800180a:	edd7 7a04 	vldr	s15, [r7, #16]
 800180e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	motor->pv.Ub = ((sqrt3_beta - Ualpha) / 2.0f) + half_supply_v;
 8001818:	ed97 7a03 	vldr	s14, [r7, #12]
 800181c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001820:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001824:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001828:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800182c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001830:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	motor->pv.Uc = ((-Ualpha - sqrt3_beta) / 2.0f) + half_supply_v;
 800183a:	edd7 7a06 	vldr	s15, [r7, #24]
 800183e:	eeb1 7a67 	vneg.f32	s14, s15
 8001842:	edd7 7a03 	vldr	s15, [r7, #12]
 8001846:	ee77 7a67 	vsub.f32	s15, s14, s15
 800184a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800184e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001852:	edd7 7a04 	vldr	s15, [r7, #16]
 8001856:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	SetPWM(motor);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff fe2a 	bl	80014ba <SetPWM>
}
 8001866:	bf00      	nop
 8001868:	3720      	adds	r7, #32
 800186a:	46bd      	mov	sp, r7
 800186c:	ecbd 8b02 	vpop	{d8}
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	3fddb3d7 	.word	0x3fddb3d7

08001878 <LinkSensor>:
 * @param[in] BLDCMotor* motor
 * @param[in] AS5600* sensor
 * @param[in] I2C_HandleTypeDef *i2c_handle
 */
void LinkSensor(BLDCMotor* motor, AS5600* sensor, I2C_HandleTypeDef *i2c_handle)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
	uint8_t init_stat = AS5600_Init(sensor, i2c_handle);
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	68b8      	ldr	r0, [r7, #8]
 8001888:	f7ff fc73 	bl	8001172 <AS5600_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	75fb      	strb	r3, [r7, #23]

	/* Check if sensor link successful */
	if(init_stat != 0)
 8001890:	7dfb      	ldrb	r3, [r7, #23]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <LinkSensor+0x26>
	{
		motor->sensor = NULL;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	671a      	str	r2, [r3, #112]	@ 0x70
		return;
 800189c:	e021      	b.n	80018e2 <LinkSensor+0x6a>
	}

	motor->sensor = sensor;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	68ba      	ldr	r2, [r7, #8]
 80018a2:	671a      	str	r2, [r3, #112]	@ 0x70

	motor->dq.Uq = motor->voltage_limit;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	625a      	str	r2, [r3, #36]	@ 0x24
	motor->vars.shaft_angle = _3PI_2;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4a0e      	ldr	r2, [pc, #56]	@ (80018e8 <LinkSensor+0x70>)
 80018b0:	615a      	str	r2, [r3, #20]
	SetTorque(motor);
 80018b2:	68f8      	ldr	r0, [r7, #12]
 80018b4:	f7ff ff3c 	bl	8001730 <SetTorque>
	HAL_Delay(1500);
 80018b8:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80018bc:	f001 fc8e 	bl	80031dc <HAL_Delay>
	AS5600_ZeroAngle(sensor);
 80018c0:	68b8      	ldr	r0, [r7, #8]
 80018c2:	f7ff fc43 	bl	800114c <AS5600_ZeroAngle>
	motor->dq.Uq = 0;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	625a      	str	r2, [r3, #36]	@ 0x24
	motor->vars.shaft_angle = 0;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f04f 0200 	mov.w	r2, #0
 80018d4:	615a      	str	r2, [r3, #20]
	SetTorque(motor);
 80018d6:	68f8      	ldr	r0, [r7, #12]
 80018d8:	f7ff ff2a 	bl	8001730 <SetTorque>

	AS5600_UpdateAngle_DMA(sensor);
 80018dc:	68b8      	ldr	r0, [r7, #8]
 80018de:	f7ff fcb3 	bl	8001248 <AS5600_UpdateAngle_DMA>
}
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	4096cbe4 	.word	0x4096cbe4

080018ec <_sin>:
/*
 * @brief Sine approximation using look-up table & linear interpolation
 * @param[in] angle(radians)
 * @return sin(angle)
 */
float _sin(float angle){
 80018ec:	b480      	push	{r7}
 80018ee:	b087      	sub	sp, #28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	ed87 0a01 	vstr	s0, [r7, #4]

   int32_t first, second;
   uint16_t index = (uint16_t)(angle / _2PI * 65536.0f);
 80018f6:	ed97 7a01 	vldr	s14, [r7, #4]
 80018fa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80019dc <_sin+0xf0>
 80018fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001902:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80019e0 <_sin+0xf4>
 8001906:	ee67 7a87 	vmul.f32	s15, s15, s14
 800190a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800190e:	ee17 3a90 	vmov	r3, s15
 8001912:	81fb      	strh	r3, [r7, #14]
   int frac = index & 0xff;
 8001914:	89fb      	ldrh	r3, [r7, #14]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	60bb      	str	r3, [r7, #8]
   index = (index >> 8) & 0xff;
 800191a:	89fb      	ldrh	r3, [r7, #14]
 800191c:	0a1b      	lsrs	r3, r3, #8
 800191e:	81fb      	strh	r3, [r7, #14]

   if (index < 64){
 8001920:	89fb      	ldrh	r3, [r7, #14]
 8001922:	2b3f      	cmp	r3, #63	@ 0x3f
 8001924:	d80b      	bhi.n	800193e <_sin+0x52>
     first = (int32_t)sineLUT[index];
 8001926:	89fb      	ldrh	r3, [r7, #14]
 8001928:	4a2e      	ldr	r2, [pc, #184]	@ (80019e4 <_sin+0xf8>)
 800192a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800192e:	617b      	str	r3, [r7, #20]
     second = (int32_t)sineLUT[index + 1];
 8001930:	89fb      	ldrh	r3, [r7, #14]
 8001932:	3301      	adds	r3, #1
 8001934:	4a2b      	ldr	r2, [pc, #172]	@ (80019e4 <_sin+0xf8>)
 8001936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	e033      	b.n	80019a6 <_sin+0xba>
   }
   else if (index < 128){
 800193e:	89fb      	ldrh	r3, [r7, #14]
 8001940:	2b7f      	cmp	r3, #127	@ 0x7f
 8001942:	d80e      	bhi.n	8001962 <_sin+0x76>
     first = (int32_t)sineLUT[128 - index];
 8001944:	89fb      	ldrh	r3, [r7, #14]
 8001946:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800194a:	4a26      	ldr	r2, [pc, #152]	@ (80019e4 <_sin+0xf8>)
 800194c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001950:	617b      	str	r3, [r7, #20]
     second = (int32_t)sineLUT[127 - index];
 8001952:	89fb      	ldrh	r3, [r7, #14]
 8001954:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8001958:	4a22      	ldr	r2, [pc, #136]	@ (80019e4 <_sin+0xf8>)
 800195a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800195e:	613b      	str	r3, [r7, #16]
 8001960:	e021      	b.n	80019a6 <_sin+0xba>
   }
   else if (index < 192){
 8001962:	89fb      	ldrh	r3, [r7, #14]
 8001964:	2bbf      	cmp	r3, #191	@ 0xbf
 8001966:	d80e      	bhi.n	8001986 <_sin+0x9a>
     first = -(int32_t)sineLUT[index - 128];
 8001968:	89fb      	ldrh	r3, [r7, #14]
 800196a:	3b80      	subs	r3, #128	@ 0x80
 800196c:	4a1d      	ldr	r2, [pc, #116]	@ (80019e4 <_sin+0xf8>)
 800196e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001972:	425b      	negs	r3, r3
 8001974:	617b      	str	r3, [r7, #20]
     second = -(int32_t)sineLUT[index - 127];
 8001976:	89fb      	ldrh	r3, [r7, #14]
 8001978:	3b7f      	subs	r3, #127	@ 0x7f
 800197a:	4a1a      	ldr	r2, [pc, #104]	@ (80019e4 <_sin+0xf8>)
 800197c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001980:	425b      	negs	r3, r3
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	e00f      	b.n	80019a6 <_sin+0xba>
   }
   else {
     first = -(int32_t)sineLUT[256 - index];
 8001986:	89fb      	ldrh	r3, [r7, #14]
 8001988:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800198c:	4a15      	ldr	r2, [pc, #84]	@ (80019e4 <_sin+0xf8>)
 800198e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001992:	425b      	negs	r3, r3
 8001994:	617b      	str	r3, [r7, #20]
     second = -(int32_t)sineLUT[255 - index];
 8001996:	89fb      	ldrh	r3, [r7, #14]
 8001998:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800199c:	4a11      	ldr	r2, [pc, #68]	@ (80019e4 <_sin+0xf8>)
 800199e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019a2:	425b      	negs	r3, r3
 80019a4:	613b      	str	r3, [r7, #16]
   }

   return (first + (((second - first) * frac) >> 8)) / 32768.0f;
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	68ba      	ldr	r2, [r7, #8]
 80019ae:	fb02 f303 	mul.w	r3, r2, r3
 80019b2:	121a      	asrs	r2, r3, #8
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	4413      	add	r3, r2
 80019b8:	ee07 3a90 	vmov	s15, r3
 80019bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c0:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80019e8 <_sin+0xfc>
 80019c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80019c8:	eef0 7a66 	vmov.f32	s15, s13
 }
 80019cc:	eeb0 0a67 	vmov.f32	s0, s15
 80019d0:	371c      	adds	r7, #28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	40c90fdb 	.word	0x40c90fdb
 80019e0:	47800000 	.word	0x47800000
 80019e4:	20000000 	.word	0x20000000
 80019e8:	47000000 	.word	0x47000000

080019ec <LPF_Init>:

/*
 * @brief LPF struct initialization function
 */
LPF_t LPF_Init()
{
 80019ec:	b490      	push	{r4, r7}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
	LPF_t lpf_dev = {
 80019f4:	4b09      	ldr	r3, [pc, #36]	@ (8001a1c <LPF_Init+0x30>)
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
			.prev_data = 0,
			.prev_us = 0,
			.time_const = 0.1
	};

	return lpf_dev;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	461c      	mov	r4, r3
 8001a06:	f107 030c 	add.w	r3, r7, #12
 8001a0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	3718      	adds	r7, #24
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc90      	pop	{r4, r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	3dcccccd 	.word	0x3dcccccd

08001a20 <DWT_Init>:
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8001a24:	4b08      	ldr	r3, [pc, #32]	@ (8001a48 <DWT_Init+0x28>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	4a07      	ldr	r2, [pc, #28]	@ (8001a48 <DWT_Init+0x28>)
 8001a2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a2e:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8001a30:	4b06      	ldr	r3, [pc, #24]	@ (8001a4c <DWT_Init+0x2c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a05      	ldr	r2, [pc, #20]	@ (8001a4c <DWT_Init+0x2c>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	6013      	str	r3, [r2, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000edf0 	.word	0xe000edf0
 8001a4c:	e0001000 	.word	0xe0001000

08001a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b0a2      	sub	sp, #136	@ 0x88
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a56:	f001 fb4f 	bl	80030f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a5a:	f000 f843 	bl	8001ae4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a5e:	f000 fb3d 	bl	80020dc <MX_GPIO_Init>
  MX_DMA_Init();
 8001a62:	f000 fadd 	bl	8002020 <MX_DMA_Init>
  MX_I2C1_Init();
 8001a66:	f000 f923 	bl	8001cb0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001a6a:	f000 f97d 	bl	8001d68 <MX_TIM2_Init>
  MX_I2C2_Init();
 8001a6e:	f000 f94d 	bl	8001d0c <MX_I2C2_Init>
  MX_TIM3_Init();
 8001a72:	f000 f9e7 	bl	8001e44 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001a76:	f000 faa9 	bl	8001fcc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001a7a:	f000 f89b 	bl	8001bb4 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001a7e:	f000 fa4f 	bl	8001f20 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  /* Start PWM channels */
  PWM_Start_3_Channel(&htim2);
 8001a82:	4812      	ldr	r0, [pc, #72]	@ (8001acc <main+0x7c>)
 8001a84:	f7ff fd05 	bl	8001492 <PWM_Start_3_Channel>

  /* DWT timer init (for micros) */
  DWT_Init();
 8001a88:	f7ff ffca 	bl	8001a20 <DWT_Init>
  /* Create sensor & motor object */
  AS5600 s1;
  BLDCMotor m1;

  /* Init motor object */
  BLDCMotor_Init(&m1, &htim2, 7);
 8001a8c:	463b      	mov	r3, r7
 8001a8e:	2207      	movs	r2, #7
 8001a90:	490e      	ldr	r1, [pc, #56]	@ (8001acc <main+0x7c>)
 8001a92:	4618      	mov	r0, r3
 8001a94:	f7ff fdc4 	bl	8001620 <BLDCMotor_Init>
  LinkSensor(&m1, &s1, &hi2c1);
 8001a98:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001a9c:	463b      	mov	r3, r7
 8001a9e:	4a0c      	ldr	r2, [pc, #48]	@ (8001ad0 <main+0x80>)
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fee9 	bl	8001878 <LinkSensor>
  m1.supply_voltage = 12;
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <main+0x84>)
 8001aa8:	60bb      	str	r3, [r7, #8]
  m1.voltage_limit = 3;
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad8 <main+0x88>)
 8001aac:	607b      	str	r3, [r7, #4]
  m1.sensor_dir = -1;
 8001aae:	23ff      	movs	r3, #255	@ 0xff
 8001ab0:	703b      	strb	r3, [r7, #0]
  m1.pid.kp = 4;
 8001ab2:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8001ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
  SerialCommander_Init(&huart1);
 8001ab8:	4808      	ldr	r0, [pc, #32]	@ (8001adc <main+0x8c>)
 8001aba:	f000 fc0f 	bl	80022dc <SerialCommander_Init>
#ifdef ADC_ENABLED
  	HAL_ADC_Start_DMA(&hadc1, ADC_buff, 4);
#endif

  	/* Start tim4 periodic callback */
  HAL_TIM_Base_Start_IT(&htim4);
 8001abe:	4808      	ldr	r0, [pc, #32]	@ (8001ae0 <main+0x90>)
 8001ac0:	f004 fb86 	bl	80061d0 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SerialCommander_PollCommands();
 8001ac4:	f000 fdc6 	bl	8002654 <SerialCommander_PollCommands>
 8001ac8:	e7fc      	b.n	8001ac4 <main+0x74>
 8001aca:	bf00      	nop
 8001acc:	2000054c 	.word	0x2000054c
 8001ad0:	20000324 	.word	0x20000324
 8001ad4:	41400000 	.word	0x41400000
 8001ad8:	40400000 	.word	0x40400000
 8001adc:	20000624 	.word	0x20000624
 8001ae0:	200005dc 	.word	0x200005dc

08001ae4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b094      	sub	sp, #80	@ 0x50
 8001ae8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001aea:	f107 0320 	add.w	r3, r7, #32
 8001aee:	2230      	movs	r2, #48	@ 0x30
 8001af0:	2100      	movs	r1, #0
 8001af2:	4618      	mov	r0, r3
 8001af4:	f008 f9c5 	bl	8009e82 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	4b27      	ldr	r3, [pc, #156]	@ (8001bac <SystemClock_Config+0xc8>)
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b10:	4a26      	ldr	r2, [pc, #152]	@ (8001bac <SystemClock_Config+0xc8>)
 8001b12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b16:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b18:	4b24      	ldr	r3, [pc, #144]	@ (8001bac <SystemClock_Config+0xc8>)
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b24:	2300      	movs	r3, #0
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	4b21      	ldr	r3, [pc, #132]	@ (8001bb0 <SystemClock_Config+0xcc>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a20      	ldr	r2, [pc, #128]	@ (8001bb0 <SystemClock_Config+0xcc>)
 8001b2e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb0 <SystemClock_Config+0xcc>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b40:	2301      	movs	r3, #1
 8001b42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b44:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b4e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001b54:	2319      	movs	r3, #25
 8001b56:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001b58:	23c0      	movs	r3, #192	@ 0xc0
 8001b5a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001b60:	2304      	movs	r3, #4
 8001b62:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b64:	f107 0320 	add.w	r3, r7, #32
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f003 fed9 	bl	8005920 <HAL_RCC_OscConfig>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b74:	f000 fb88 	bl	8002288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b78:	230f      	movs	r3, #15
 8001b7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001b8e:	f107 030c 	add.w	r3, r7, #12
 8001b92:	2103      	movs	r1, #3
 8001b94:	4618      	mov	r0, r3
 8001b96:	f004 f93b 	bl	8005e10 <HAL_RCC_ClockConfig>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001ba0:	f000 fb72 	bl	8002288 <Error_Handler>
  }
}
 8001ba4:	bf00      	nop
 8001ba6:	3750      	adds	r7, #80	@ 0x50
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40007000 	.word	0x40007000

08001bb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bba:	463b      	mov	r3, r7
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001bc6:	4b37      	ldr	r3, [pc, #220]	@ (8001ca4 <MX_ADC1_Init+0xf0>)
 8001bc8:	4a37      	ldr	r2, [pc, #220]	@ (8001ca8 <MX_ADC1_Init+0xf4>)
 8001bca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001bcc:	4b35      	ldr	r3, [pc, #212]	@ (8001ca4 <MX_ADC1_Init+0xf0>)
 8001bce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001bd2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001bd4:	4b33      	ldr	r3, [pc, #204]	@ (8001ca4 <MX_ADC1_Init+0xf0>)
 8001bd6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001bda:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001bdc:	4b31      	ldr	r3, [pc, #196]	@ (8001ca4 <MX_ADC1_Init+0xf0>)
 8001bde:	2201      	movs	r2, #1
 8001be0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001be2:	4b30      	ldr	r3, [pc, #192]	@ (8001ca4 <MX_ADC1_Init+0xf0>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001be8:	4b2e      	ldr	r3, [pc, #184]	@ (8001ca4 <MX_ADC1_Init+0xf0>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001bf0:	4b2c      	ldr	r3, [pc, #176]	@ (8001ca4 <MX_ADC1_Init+0xf0>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bf6:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca4 <MX_ADC1_Init+0xf0>)
 8001bf8:	4a2c      	ldr	r2, [pc, #176]	@ (8001cac <MX_ADC1_Init+0xf8>)
 8001bfa:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bfc:	4b29      	ldr	r3, [pc, #164]	@ (8001ca4 <MX_ADC1_Init+0xf0>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001c02:	4b28      	ldr	r3, [pc, #160]	@ (8001ca4 <MX_ADC1_Init+0xf0>)
 8001c04:	2204      	movs	r2, #4
 8001c06:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001c08:	4b26      	ldr	r3, [pc, #152]	@ (8001ca4 <MX_ADC1_Init+0xf0>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001c10:	4b24      	ldr	r3, [pc, #144]	@ (8001ca4 <MX_ADC1_Init+0xf0>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c16:	4823      	ldr	r0, [pc, #140]	@ (8001ca4 <MX_ADC1_Init+0xf0>)
 8001c18:	f001 fb04 	bl	8003224 <HAL_ADC_Init>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d001      	beq.n	8001c26 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001c22:	f000 fb31 	bl	8002288 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c32:	463b      	mov	r3, r7
 8001c34:	4619      	mov	r1, r3
 8001c36:	481b      	ldr	r0, [pc, #108]	@ (8001ca4 <MX_ADC1_Init+0xf0>)
 8001c38:	f001 fb38 	bl	80032ac <HAL_ADC_ConfigChannel>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001c42:	f000 fb21 	bl	8002288 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001c46:	2301      	movs	r3, #1
 8001c48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c4e:	463b      	mov	r3, r7
 8001c50:	4619      	mov	r1, r3
 8001c52:	4814      	ldr	r0, [pc, #80]	@ (8001ca4 <MX_ADC1_Init+0xf0>)
 8001c54:	f001 fb2a 	bl	80032ac <HAL_ADC_ConfigChannel>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001c5e:	f000 fb13 	bl	8002288 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001c62:	2303      	movs	r3, #3
 8001c64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001c66:	2303      	movs	r3, #3
 8001c68:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c6a:	463b      	mov	r3, r7
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	480d      	ldr	r0, [pc, #52]	@ (8001ca4 <MX_ADC1_Init+0xf0>)
 8001c70:	f001 fb1c 	bl	80032ac <HAL_ADC_ConfigChannel>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8001c7a:	f000 fb05 	bl	8002288 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001c7e:	2304      	movs	r3, #4
 8001c80:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001c82:	2304      	movs	r3, #4
 8001c84:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c86:	463b      	mov	r3, r7
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4806      	ldr	r0, [pc, #24]	@ (8001ca4 <MX_ADC1_Init+0xf0>)
 8001c8c:	f001 fb0e 	bl	80032ac <HAL_ADC_ConfigChannel>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8001c96:	f000 faf7 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	2000027c 	.word	0x2000027c
 8001ca8:	40012000 	.word	0x40012000
 8001cac:	0f000001 	.word	0x0f000001

08001cb0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001cb4:	4b12      	ldr	r3, [pc, #72]	@ (8001d00 <MX_I2C1_Init+0x50>)
 8001cb6:	4a13      	ldr	r2, [pc, #76]	@ (8001d04 <MX_I2C1_Init+0x54>)
 8001cb8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001cba:	4b11      	ldr	r3, [pc, #68]	@ (8001d00 <MX_I2C1_Init+0x50>)
 8001cbc:	4a12      	ldr	r2, [pc, #72]	@ (8001d08 <MX_I2C1_Init+0x58>)
 8001cbe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cc0:	4b0f      	ldr	r3, [pc, #60]	@ (8001d00 <MX_I2C1_Init+0x50>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8001d00 <MX_I2C1_Init+0x50>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	@ (8001d00 <MX_I2C1_Init+0x50>)
 8001cce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001cd2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8001d00 <MX_I2C1_Init+0x50>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001cda:	4b09      	ldr	r3, [pc, #36]	@ (8001d00 <MX_I2C1_Init+0x50>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ce0:	4b07      	ldr	r3, [pc, #28]	@ (8001d00 <MX_I2C1_Init+0x50>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ce6:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <MX_I2C1_Init+0x50>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001cec:	4804      	ldr	r0, [pc, #16]	@ (8001d00 <MX_I2C1_Init+0x50>)
 8001cee:	f002 fbc9 	bl	8004484 <HAL_I2C_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001cf8:	f000 fac6 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000324 	.word	0x20000324
 8001d04:	40005400 	.word	0x40005400
 8001d08:	00061a80 	.word	0x00061a80

08001d0c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d10:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <MX_I2C2_Init+0x50>)
 8001d12:	4a13      	ldr	r2, [pc, #76]	@ (8001d60 <MX_I2C2_Init+0x54>)
 8001d14:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001d16:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <MX_I2C2_Init+0x50>)
 8001d18:	4a12      	ldr	r2, [pc, #72]	@ (8001d64 <MX_I2C2_Init+0x58>)
 8001d1a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d5c <MX_I2C2_Init+0x50>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	@ (8001d5c <MX_I2C2_Init+0x50>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d28:	4b0c      	ldr	r3, [pc, #48]	@ (8001d5c <MX_I2C2_Init+0x50>)
 8001d2a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d2e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d30:	4b0a      	ldr	r3, [pc, #40]	@ (8001d5c <MX_I2C2_Init+0x50>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001d36:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <MX_I2C2_Init+0x50>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d3c:	4b07      	ldr	r3, [pc, #28]	@ (8001d5c <MX_I2C2_Init+0x50>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d42:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <MX_I2C2_Init+0x50>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d48:	4804      	ldr	r0, [pc, #16]	@ (8001d5c <MX_I2C2_Init+0x50>)
 8001d4a:	f002 fb9b 	bl	8004484 <HAL_I2C_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001d54:	f000 fa98 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000378 	.word	0x20000378
 8001d60:	40005800 	.word	0x40005800
 8001d64:	00061a80 	.word	0x00061a80

08001d68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08a      	sub	sp, #40	@ 0x28
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d6e:	f107 0320 	add.w	r3, r7, #32
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d78:	1d3b      	adds	r3, r7, #4
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	601a      	str	r2, [r3, #0]
 8001d7e:	605a      	str	r2, [r3, #4]
 8001d80:	609a      	str	r2, [r3, #8]
 8001d82:	60da      	str	r2, [r3, #12]
 8001d84:	611a      	str	r2, [r3, #16]
 8001d86:	615a      	str	r2, [r3, #20]
 8001d88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001e40 <MX_TIM2_Init+0xd8>)
 8001d8c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8001d92:	4b2b      	ldr	r3, [pc, #172]	@ (8001e40 <MX_TIM2_Init+0xd8>)
 8001d94:	220a      	movs	r2, #10
 8001d96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d98:	4b29      	ldr	r3, [pc, #164]	@ (8001e40 <MX_TIM2_Init+0xd8>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001d9e:	4b28      	ldr	r3, [pc, #160]	@ (8001e40 <MX_TIM2_Init+0xd8>)
 8001da0:	22ff      	movs	r2, #255	@ 0xff
 8001da2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da4:	4b26      	ldr	r3, [pc, #152]	@ (8001e40 <MX_TIM2_Init+0xd8>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001daa:	4b25      	ldr	r3, [pc, #148]	@ (8001e40 <MX_TIM2_Init+0xd8>)
 8001dac:	2280      	movs	r2, #128	@ 0x80
 8001dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001db0:	4823      	ldr	r0, [pc, #140]	@ (8001e40 <MX_TIM2_Init+0xd8>)
 8001db2:	f004 fabe 	bl	8006332 <HAL_TIM_PWM_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001dbc:	f000 fa64 	bl	8002288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dc8:	f107 0320 	add.w	r3, r7, #32
 8001dcc:	4619      	mov	r1, r3
 8001dce:	481c      	ldr	r0, [pc, #112]	@ (8001e40 <MX_TIM2_Init+0xd8>)
 8001dd0:	f005 f822 	bl	8006e18 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001dda:	f000 fa55 	bl	8002288 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dde:	2360      	movs	r3, #96	@ 0x60
 8001de0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	2200      	movs	r2, #0
 8001df2:	4619      	mov	r1, r3
 8001df4:	4812      	ldr	r0, [pc, #72]	@ (8001e40 <MX_TIM2_Init+0xd8>)
 8001df6:	f004 fce7 	bl	80067c8 <HAL_TIM_PWM_ConfigChannel>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001e00:	f000 fa42 	bl	8002288 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	2204      	movs	r2, #4
 8001e08:	4619      	mov	r1, r3
 8001e0a:	480d      	ldr	r0, [pc, #52]	@ (8001e40 <MX_TIM2_Init+0xd8>)
 8001e0c:	f004 fcdc 	bl	80067c8 <HAL_TIM_PWM_ConfigChannel>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001e16:	f000 fa37 	bl	8002288 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	2208      	movs	r2, #8
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4807      	ldr	r0, [pc, #28]	@ (8001e40 <MX_TIM2_Init+0xd8>)
 8001e22:	f004 fcd1 	bl	80067c8 <HAL_TIM_PWM_ConfigChannel>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8001e2c:	f000 fa2c 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e30:	4803      	ldr	r0, [pc, #12]	@ (8001e40 <MX_TIM2_Init+0xd8>)
 8001e32:	f000 fea1 	bl	8002b78 <HAL_TIM_MspPostInit>

}
 8001e36:	bf00      	nop
 8001e38:	3728      	adds	r7, #40	@ 0x28
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	2000054c 	.word	0x2000054c

08001e44 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08a      	sub	sp, #40	@ 0x28
 8001e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e4a:	f107 0320 	add.w	r3, r7, #32
 8001e4e:	2200      	movs	r2, #0
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e54:	1d3b      	adds	r3, r7, #4
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
 8001e5c:	609a      	str	r2, [r3, #8]
 8001e5e:	60da      	str	r2, [r3, #12]
 8001e60:	611a      	str	r2, [r3, #16]
 8001e62:	615a      	str	r2, [r3, #20]
 8001e64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e66:	4b2c      	ldr	r3, [pc, #176]	@ (8001f18 <MX_TIM3_Init+0xd4>)
 8001e68:	4a2c      	ldr	r2, [pc, #176]	@ (8001f1c <MX_TIM3_Init+0xd8>)
 8001e6a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10;
 8001e6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f18 <MX_TIM3_Init+0xd4>)
 8001e6e:	220a      	movs	r2, #10
 8001e70:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e72:	4b29      	ldr	r3, [pc, #164]	@ (8001f18 <MX_TIM3_Init+0xd4>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8001e78:	4b27      	ldr	r3, [pc, #156]	@ (8001f18 <MX_TIM3_Init+0xd4>)
 8001e7a:	22ff      	movs	r2, #255	@ 0xff
 8001e7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7e:	4b26      	ldr	r3, [pc, #152]	@ (8001f18 <MX_TIM3_Init+0xd4>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e84:	4b24      	ldr	r3, [pc, #144]	@ (8001f18 <MX_TIM3_Init+0xd4>)
 8001e86:	2280      	movs	r2, #128	@ 0x80
 8001e88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e8a:	4823      	ldr	r0, [pc, #140]	@ (8001f18 <MX_TIM3_Init+0xd4>)
 8001e8c:	f004 fa51 	bl	8006332 <HAL_TIM_PWM_Init>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001e96:	f000 f9f7 	bl	8002288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ea2:	f107 0320 	add.w	r3, r7, #32
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	481b      	ldr	r0, [pc, #108]	@ (8001f18 <MX_TIM3_Init+0xd4>)
 8001eaa:	f004 ffb5 	bl	8006e18 <HAL_TIMEx_MasterConfigSynchronization>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d001      	beq.n	8001eb8 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001eb4:	f000 f9e8 	bl	8002288 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001eb8:	2360      	movs	r3, #96	@ 0x60
 8001eba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ec8:	1d3b      	adds	r3, r7, #4
 8001eca:	2200      	movs	r2, #0
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4812      	ldr	r0, [pc, #72]	@ (8001f18 <MX_TIM3_Init+0xd4>)
 8001ed0:	f004 fc7a 	bl	80067c8 <HAL_TIM_PWM_ConfigChannel>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001eda:	f000 f9d5 	bl	8002288 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	480c      	ldr	r0, [pc, #48]	@ (8001f18 <MX_TIM3_Init+0xd4>)
 8001ee6:	f004 fc6f 	bl	80067c8 <HAL_TIM_PWM_ConfigChannel>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001ef0:	f000 f9ca 	bl	8002288 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	2208      	movs	r2, #8
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4807      	ldr	r0, [pc, #28]	@ (8001f18 <MX_TIM3_Init+0xd4>)
 8001efc:	f004 fc64 	bl	80067c8 <HAL_TIM_PWM_ConfigChannel>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8001f06:	f000 f9bf 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f0a:	4803      	ldr	r0, [pc, #12]	@ (8001f18 <MX_TIM3_Init+0xd4>)
 8001f0c:	f000 fe34 	bl	8002b78 <HAL_TIM_MspPostInit>

}
 8001f10:	bf00      	nop
 8001f12:	3728      	adds	r7, #40	@ 0x28
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20000594 	.word	0x20000594
 8001f1c:	40000400 	.word	0x40000400

08001f20 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b08a      	sub	sp, #40	@ 0x28
 8001f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f26:	f107 0320 	add.w	r3, r7, #32
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]
 8001f2e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	605a      	str	r2, [r3, #4]
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	60da      	str	r2, [r3, #12]
 8001f3c:	611a      	str	r2, [r3, #16]
 8001f3e:	615a      	str	r2, [r3, #20]
 8001f40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f42:	4b20      	ldr	r3, [pc, #128]	@ (8001fc4 <MX_TIM4_Init+0xa4>)
 8001f44:	4a20      	ldr	r2, [pc, #128]	@ (8001fc8 <MX_TIM4_Init+0xa8>)
 8001f46:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 95;
 8001f48:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc4 <MX_TIM4_Init+0xa4>)
 8001f4a:	225f      	movs	r2, #95	@ 0x5f
 8001f4c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc4 <MX_TIM4_Init+0xa4>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 8001f54:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc4 <MX_TIM4_Init+0xa4>)
 8001f56:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8001f5a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f5c:	4b19      	ldr	r3, [pc, #100]	@ (8001fc4 <MX_TIM4_Init+0xa4>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f62:	4b18      	ldr	r3, [pc, #96]	@ (8001fc4 <MX_TIM4_Init+0xa4>)
 8001f64:	2280      	movs	r2, #128	@ 0x80
 8001f66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8001f68:	4816      	ldr	r0, [pc, #88]	@ (8001fc4 <MX_TIM4_Init+0xa4>)
 8001f6a:	f004 f993 	bl	8006294 <HAL_TIM_OC_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001f74:	f000 f988 	bl	8002288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f80:	f107 0320 	add.w	r3, r7, #32
 8001f84:	4619      	mov	r1, r3
 8001f86:	480f      	ldr	r0, [pc, #60]	@ (8001fc4 <MX_TIM4_Init+0xa4>)
 8001f88:	f004 ff46 	bl	8006e18 <HAL_TIMEx_MasterConfigSynchronization>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001f92:	f000 f979 	bl	8002288 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001f96:	2300      	movs	r3, #0
 8001f98:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fa6:	1d3b      	adds	r3, r7, #4
 8001fa8:	2200      	movs	r2, #0
 8001faa:	4619      	mov	r1, r3
 8001fac:	4805      	ldr	r0, [pc, #20]	@ (8001fc4 <MX_TIM4_Init+0xa4>)
 8001fae:	f004 fbaf 	bl	8006710 <HAL_TIM_OC_ConfigChannel>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001fb8:	f000 f966 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001fbc:	bf00      	nop
 8001fbe:	3728      	adds	r7, #40	@ 0x28
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	200005dc 	.word	0x200005dc
 8001fc8:	40000800 	.word	0x40000800

08001fcc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fd0:	4b11      	ldr	r3, [pc, #68]	@ (8002018 <MX_USART1_UART_Init+0x4c>)
 8001fd2:	4a12      	ldr	r2, [pc, #72]	@ (800201c <MX_USART1_UART_Init+0x50>)
 8001fd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fd6:	4b10      	ldr	r3, [pc, #64]	@ (8002018 <MX_USART1_UART_Init+0x4c>)
 8001fd8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fdc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fde:	4b0e      	ldr	r3, [pc, #56]	@ (8002018 <MX_USART1_UART_Init+0x4c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8002018 <MX_USART1_UART_Init+0x4c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fea:	4b0b      	ldr	r3, [pc, #44]	@ (8002018 <MX_USART1_UART_Init+0x4c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ff0:	4b09      	ldr	r3, [pc, #36]	@ (8002018 <MX_USART1_UART_Init+0x4c>)
 8001ff2:	220c      	movs	r2, #12
 8001ff4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ff6:	4b08      	ldr	r3, [pc, #32]	@ (8002018 <MX_USART1_UART_Init+0x4c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ffc:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <MX_USART1_UART_Init+0x4c>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002002:	4805      	ldr	r0, [pc, #20]	@ (8002018 <MX_USART1_UART_Init+0x4c>)
 8002004:	f004 ff8a 	bl	8006f1c <HAL_UART_Init>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800200e:	f000 f93b 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000624 	.word	0x20000624
 800201c:	40011000 	.word	0x40011000

08002020 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	607b      	str	r3, [r7, #4]
 800202a:	4b2b      	ldr	r3, [pc, #172]	@ (80020d8 <MX_DMA_Init+0xb8>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202e:	4a2a      	ldr	r2, [pc, #168]	@ (80020d8 <MX_DMA_Init+0xb8>)
 8002030:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002034:	6313      	str	r3, [r2, #48]	@ 0x30
 8002036:	4b28      	ldr	r3, [pc, #160]	@ (80020d8 <MX_DMA_Init+0xb8>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800203e:	607b      	str	r3, [r7, #4]
 8002040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002042:	2300      	movs	r3, #0
 8002044:	603b      	str	r3, [r7, #0]
 8002046:	4b24      	ldr	r3, [pc, #144]	@ (80020d8 <MX_DMA_Init+0xb8>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204a:	4a23      	ldr	r2, [pc, #140]	@ (80020d8 <MX_DMA_Init+0xb8>)
 800204c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002050:	6313      	str	r3, [r2, #48]	@ 0x30
 8002052:	4b21      	ldr	r3, [pc, #132]	@ (80020d8 <MX_DMA_Init+0xb8>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800205a:	603b      	str	r3, [r7, #0]
 800205c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800205e:	2200      	movs	r2, #0
 8002060:	2100      	movs	r1, #0
 8002062:	200b      	movs	r0, #11
 8002064:	f001 fc2b 	bl	80038be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002068:	200b      	movs	r0, #11
 800206a:	f001 fc44 	bl	80038f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800206e:	2200      	movs	r2, #0
 8002070:	2100      	movs	r1, #0
 8002072:	200c      	movs	r0, #12
 8002074:	f001 fc23 	bl	80038be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002078:	200c      	movs	r0, #12
 800207a:	f001 fc3c 	bl	80038f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2100      	movs	r1, #0
 8002082:	200d      	movs	r0, #13
 8002084:	f001 fc1b 	bl	80038be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002088:	200d      	movs	r0, #13
 800208a:	f001 fc34 	bl	80038f6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800208e:	2200      	movs	r2, #0
 8002090:	2100      	movs	r1, #0
 8002092:	202f      	movs	r0, #47	@ 0x2f
 8002094:	f001 fc13 	bl	80038be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002098:	202f      	movs	r0, #47	@ 0x2f
 800209a:	f001 fc2c 	bl	80038f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800209e:	2200      	movs	r2, #0
 80020a0:	2100      	movs	r1, #0
 80020a2:	2038      	movs	r0, #56	@ 0x38
 80020a4:	f001 fc0b 	bl	80038be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80020a8:	2038      	movs	r0, #56	@ 0x38
 80020aa:	f001 fc24 	bl	80038f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80020ae:	2200      	movs	r2, #0
 80020b0:	2100      	movs	r1, #0
 80020b2:	203a      	movs	r0, #58	@ 0x3a
 80020b4:	f001 fc03 	bl	80038be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80020b8:	203a      	movs	r0, #58	@ 0x3a
 80020ba:	f001 fc1c 	bl	80038f6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80020be:	2200      	movs	r2, #0
 80020c0:	2100      	movs	r1, #0
 80020c2:	2046      	movs	r0, #70	@ 0x46
 80020c4:	f001 fbfb 	bl	80038be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80020c8:	2046      	movs	r0, #70	@ 0x46
 80020ca:	f001 fc14 	bl	80038f6 <HAL_NVIC_EnableIRQ>

}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40023800 	.word	0x40023800

080020dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	@ 0x28
 80020e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e2:	f107 0314 	add.w	r3, r7, #20
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	605a      	str	r2, [r3, #4]
 80020ec:	609a      	str	r2, [r3, #8]
 80020ee:	60da      	str	r2, [r3, #12]
 80020f0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	4b27      	ldr	r3, [pc, #156]	@ (8002194 <MX_GPIO_Init+0xb8>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fa:	4a26      	ldr	r2, [pc, #152]	@ (8002194 <MX_GPIO_Init+0xb8>)
 80020fc:	f043 0304 	orr.w	r3, r3, #4
 8002100:	6313      	str	r3, [r2, #48]	@ 0x30
 8002102:	4b24      	ldr	r3, [pc, #144]	@ (8002194 <MX_GPIO_Init+0xb8>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	4b20      	ldr	r3, [pc, #128]	@ (8002194 <MX_GPIO_Init+0xb8>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	4a1f      	ldr	r2, [pc, #124]	@ (8002194 <MX_GPIO_Init+0xb8>)
 8002118:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800211c:	6313      	str	r3, [r2, #48]	@ 0x30
 800211e:	4b1d      	ldr	r3, [pc, #116]	@ (8002194 <MX_GPIO_Init+0xb8>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	4b19      	ldr	r3, [pc, #100]	@ (8002194 <MX_GPIO_Init+0xb8>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002132:	4a18      	ldr	r2, [pc, #96]	@ (8002194 <MX_GPIO_Init+0xb8>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6313      	str	r3, [r2, #48]	@ 0x30
 800213a:	4b16      	ldr	r3, [pc, #88]	@ (8002194 <MX_GPIO_Init+0xb8>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	60bb      	str	r3, [r7, #8]
 8002144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]
 800214a:	4b12      	ldr	r3, [pc, #72]	@ (8002194 <MX_GPIO_Init+0xb8>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	4a11      	ldr	r2, [pc, #68]	@ (8002194 <MX_GPIO_Init+0xb8>)
 8002150:	f043 0302 	orr.w	r3, r3, #2
 8002154:	6313      	str	r3, [r2, #48]	@ 0x30
 8002156:	4b0f      	ldr	r3, [pc, #60]	@ (8002194 <MX_GPIO_Init+0xb8>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002162:	2200      	movs	r2, #0
 8002164:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002168:	480b      	ldr	r0, [pc, #44]	@ (8002198 <MX_GPIO_Init+0xbc>)
 800216a:	f002 f971 	bl	8004450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800216e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002174:	2301      	movs	r3, #1
 8002176:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002178:	2300      	movs	r3, #0
 800217a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217c:	2300      	movs	r3, #0
 800217e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002180:	f107 0314 	add.w	r3, r7, #20
 8002184:	4619      	mov	r1, r3
 8002186:	4804      	ldr	r0, [pc, #16]	@ (8002198 <MX_GPIO_Init+0xbc>)
 8002188:	f001 ffde 	bl	8004148 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800218c:	bf00      	nop
 800218e:	3728      	adds	r7, #40	@ 0x28
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40023800 	.word	0x40023800
 8002198:	40020800 	.word	0x40020800

0800219c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
	/* Set I2C receive complete flags  */
	if(hi2c->Instance == I2C1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a0e      	ldr	r2, [pc, #56]	@ (80021e4 <HAL_I2C_MemRxCpltCallback+0x48>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d107      	bne.n	80021be <HAL_I2C_MemRxCpltCallback+0x22>
	{
		EVENT_FLAGS |= I2C1_DMA_FLAG;
 80021ae:	4b0e      	ldr	r3, [pc, #56]	@ (80021e8 <HAL_I2C_MemRxCpltCallback+0x4c>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	f043 0301 	orr.w	r3, r3, #1
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	4b0b      	ldr	r3, [pc, #44]	@ (80021e8 <HAL_I2C_MemRxCpltCallback+0x4c>)
 80021ba:	701a      	strb	r2, [r3, #0]
	}
	else if(hi2c->Instance == I2C2)
	{
		EVENT_FLAGS |= I2C2_DMA_FLAG;
	}
}
 80021bc:	e00b      	b.n	80021d6 <HAL_I2C_MemRxCpltCallback+0x3a>
	else if(hi2c->Instance == I2C2)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a0a      	ldr	r2, [pc, #40]	@ (80021ec <HAL_I2C_MemRxCpltCallback+0x50>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d106      	bne.n	80021d6 <HAL_I2C_MemRxCpltCallback+0x3a>
		EVENT_FLAGS |= I2C2_DMA_FLAG;
 80021c8:	4b07      	ldr	r3, [pc, #28]	@ (80021e8 <HAL_I2C_MemRxCpltCallback+0x4c>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	f043 0302 	orr.w	r3, r3, #2
 80021d0:	b2da      	uxtb	r2, r3
 80021d2:	4b05      	ldr	r3, [pc, #20]	@ (80021e8 <HAL_I2C_MemRxCpltCallback+0x4c>)
 80021d4:	701a      	strb	r2, [r3, #0]
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40005400 	.word	0x40005400
 80021e8:	2000072c 	.word	0x2000072c
 80021ec:	40005800 	.word	0x40005800

080021f0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a1f      	ldr	r2, [pc, #124]	@ (800227c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d137      	bne.n	8002272 <HAL_TIM_PeriodElapsedCallback+0x82>
        }

#endif

        /* Check I2C ch1 data receive complete */
        if(EVENT_FLAGS & I2C1_DMA_FLAG)
 8002202:	4b1f      	ldr	r3, [pc, #124]	@ (8002280 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d015      	beq.n	800223a <HAL_TIM_PeriodElapsedCallback+0x4a>
        {
        	if(BLDCMotorArray[0] != NULL && BLDCMotorArray[0]->sensor != NULL)
 800220e:	4b1d      	ldr	r3, [pc, #116]	@ (8002284 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d011      	beq.n	800223a <HAL_TIM_PeriodElapsedCallback+0x4a>
 8002216:	4b1b      	ldr	r3, [pc, #108]	@ (8002284 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00c      	beq.n	800223a <HAL_TIM_PeriodElapsedCallback+0x4a>
        	{
        		EVENT_FLAGS &= (~I2C1_DMA_FLAG);
 8002220:	4b17      	ldr	r3, [pc, #92]	@ (8002280 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	f023 0301 	bic.w	r3, r3, #1
 8002228:	b2da      	uxtb	r2, r3
 800222a:	4b15      	ldr	r3, [pc, #84]	@ (8002280 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800222c:	701a      	strb	r2, [r3, #0]

        		/* Start new DMA read */
        		AS5600_UpdateAngle_DMA(BLDCMotorArray[0]->sensor);
 800222e:	4b15      	ldr	r3, [pc, #84]	@ (8002284 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff f807 	bl	8001248 <AS5600_UpdateAngle_DMA>
        	}
        }

        /* Check I2C ch2 data receive complete */
        if(EVENT_FLAGS & I2C2_DMA_FLAG)
 800223a:	4b11      	ldr	r3, [pc, #68]	@ (8002280 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d015      	beq.n	8002272 <HAL_TIM_PeriodElapsedCallback+0x82>
        {
             if(BLDCMotorArray[1] != NULL && BLDCMotorArray[1]->sensor != NULL)
 8002246:	4b0f      	ldr	r3, [pc, #60]	@ (8002284 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d011      	beq.n	8002272 <HAL_TIM_PeriodElapsedCallback+0x82>
 800224e:	4b0d      	ldr	r3, [pc, #52]	@ (8002284 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00c      	beq.n	8002272 <HAL_TIM_PeriodElapsedCallback+0x82>
             {
            	EVENT_FLAGS &= (~I2C2_DMA_FLAG);
 8002258:	4b09      	ldr	r3, [pc, #36]	@ (8002280 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	f023 0302 	bic.w	r3, r3, #2
 8002260:	b2da      	uxtb	r2, r3
 8002262:	4b07      	ldr	r3, [pc, #28]	@ (8002280 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002264:	701a      	strb	r2, [r3, #0]

            	/* Start new DMA read */
                AS5600_UpdateAngle_DMA(BLDCMotorArray[1]->sensor);
 8002266:	4b07      	ldr	r3, [pc, #28]	@ (8002284 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe ffeb 	bl	8001248 <AS5600_UpdateAngle_DMA>
        else {
        	OLED_CallbackCounter++;
        }
#endif
    }
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40000800 	.word	0x40000800
 8002280:	2000072c 	.word	0x2000072c
 8002284:	20000274 	.word	0x20000274

08002288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800228c:	b672      	cpsid	i
}
 800228e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002290:	bf00      	nop
 8002292:	e7fd      	b.n	8002290 <Error_Handler+0x8>

08002294 <PID_Init>:
 * @params[in] float ki
 * @params[in] float kd
 * @retval PID structure
 */
PID_t PID_Init()
{
 8002294:	b4b0      	push	{r4, r5, r7}
 8002296:	b08d      	sub	sp, #52	@ 0x34
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
	PID_t PID_dev =
 800229c:	4b0e      	ldr	r3, [pc, #56]	@ (80022d8 <PID_Init+0x44>)
 800229e:	f107 0408 	add.w	r4, r7, #8
 80022a2:	461d      	mov	r5, r3
 80022a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022ac:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022b0:	e884 0003 	stmia.w	r4, {r0, r1}
		.upper_bound = 10,
		.timestamp_us = 0,
		.mode = P
	};

	return PID_dev;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	461d      	mov	r5, r3
 80022b8:	f107 0408 	add.w	r4, r7, #8
 80022bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022c8:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	3734      	adds	r7, #52	@ 0x34
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bcb0      	pop	{r4, r5, r7}
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	0800cd88 	.word	0x0800cd88

080022dc <SerialCommander_Init>:
 * @param[in] UART handle
 * @retval -
 * @note Pass NULL for second motor ptr if only using 1 motor
 */
__INLINE void SerialCommander_Init(UART_HandleTypeDef* huart)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
	serial_dev.uart = huart;
 80022e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002310 <SerialCommander_Init+0x34>)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6093      	str	r3, [r2, #8]
	serial_dev.m0 = BLDCMotorArray[0];
 80022ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002314 <SerialCommander_Init+0x38>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a08      	ldr	r2, [pc, #32]	@ (8002310 <SerialCommander_Init+0x34>)
 80022f0:	6013      	str	r3, [r2, #0]
	serial_dev.m1 = BLDCMotorArray[1];
 80022f2:	4b08      	ldr	r3, [pc, #32]	@ (8002314 <SerialCommander_Init+0x38>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	4a06      	ldr	r2, [pc, #24]	@ (8002310 <SerialCommander_Init+0x34>)
 80022f8:	6053      	str	r3, [r2, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(serial_dev.uart, serial_dev.rx_buff, 32);
 80022fa:	4b05      	ldr	r3, [pc, #20]	@ (8002310 <SerialCommander_Init+0x34>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	2220      	movs	r2, #32
 8002300:	4905      	ldr	r1, [pc, #20]	@ (8002318 <SerialCommander_Init+0x3c>)
 8002302:	4618      	mov	r0, r3
 8002304:	f004 feca 	bl	800709c <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	20000730 	.word	0x20000730
 8002314:	20000274 	.word	0x20000274
 8002318:	2000073c 	.word	0x2000073c

0800231c <HAL_UARTEx_RxEventCallback>:
/*
 * @brief DMA receive to idle interrupt callback function
 * @note Sets the receive flag to 1 and append null terminator to end of string
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	807b      	strh	r3, [r7, #2]
	/* Indicate incoming data */
	serial_dev.rx_flag = 1;
 8002328:	4b0a      	ldr	r3, [pc, #40]	@ (8002354 <HAL_UARTEx_RxEventCallback+0x38>)
 800232a:	2201      	movs	r2, #1
 800232c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

	/* Insert null terminator for C string */
	if(Size > 15)
 8002330:	887b      	ldrh	r3, [r7, #2]
 8002332:	2b0f      	cmp	r3, #15
 8002334:	d903      	bls.n	800233e <HAL_UARTEx_RxEventCallback+0x22>
	{
		serial_dev.rx_buff[15] = '\0';
 8002336:	4b07      	ldr	r3, [pc, #28]	@ (8002354 <HAL_UARTEx_RxEventCallback+0x38>)
 8002338:	2200      	movs	r2, #0
 800233a:	76da      	strb	r2, [r3, #27]
	}
	else
	{
		serial_dev.rx_buff[Size] = '\0';
	}
}
 800233c:	e004      	b.n	8002348 <HAL_UARTEx_RxEventCallback+0x2c>
		serial_dev.rx_buff[Size] = '\0';
 800233e:	887b      	ldrh	r3, [r7, #2]
 8002340:	4a04      	ldr	r2, [pc, #16]	@ (8002354 <HAL_UARTEx_RxEventCallback+0x38>)
 8002342:	4413      	add	r3, r2
 8002344:	2200      	movs	r2, #0
 8002346:	731a      	strb	r2, [r3, #12]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	20000730 	.word	0x20000730

08002358 <Serial_Print>:
 * @param[in] UART handle
 * @param[in] string
 * @retval -
 */
__INLINE void Serial_Print(const char* s)
{
 8002358:	b590      	push	{r4, r7, lr}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(serial_dev.uart, s, strlen(s));
 8002360:	4b07      	ldr	r3, [pc, #28]	@ (8002380 <Serial_Print+0x28>)
 8002362:	689c      	ldr	r4, [r3, #8]
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f7fd ff9b 	bl	80002a0 <strlen>
 800236a:	4603      	mov	r3, r0
 800236c:	b29b      	uxth	r3, r3
 800236e:	461a      	mov	r2, r3
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4620      	mov	r0, r4
 8002374:	f004 fe22 	bl	8006fbc <HAL_UART_Transmit_DMA>
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	bd90      	pop	{r4, r7, pc}
 8002380:	20000730 	.word	0x20000730

08002384 <SerialCommander_ParseControlType>:
 * @param[in] const char* command string
 * @retval Ctrl_t ctrl
 * @note Returns Ctrl_t error if command not recognised
 */
static Ctrl_t SerialCommander_ParseControlType(uint8_t motor_idx, const char* type)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	4603      	mov	r3, r0
 800238c:	6039      	str	r1, [r7, #0]
 800238e:	71fb      	strb	r3, [r7, #7]
	BLDCMotor* motor = BLDCMotorArray[motor_idx];
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	4a25      	ldr	r2, [pc, #148]	@ (8002428 <SerialCommander_ParseControlType+0xa4>)
 8002394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002398:	60fb      	str	r3, [r7, #12]

	/* Motor not in use */
	if(!motor){
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d101      	bne.n	80023a4 <SerialCommander_ParseControlType+0x20>
		return error;
 80023a0:	2300      	movs	r3, #0
 80023a2:	e03d      	b.n	8002420 <SerialCommander_ParseControlType+0x9c>
	}

	/* All the closed-loop control types need to check if sensor is attached */
	if(!strcmp(type, "OL-vel")){
 80023a4:	4921      	ldr	r1, [pc, #132]	@ (800242c <SerialCommander_ParseControlType+0xa8>)
 80023a6:	6838      	ldr	r0, [r7, #0]
 80023a8:	f7fd ff1a 	bl	80001e0 <strcmp>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <SerialCommander_ParseControlType+0x32>
		return open_loop_velocity;
 80023b2:	2302      	movs	r3, #2
 80023b4:	e034      	b.n	8002420 <SerialCommander_ParseControlType+0x9c>
	}
	else if(!strcmp(type, "CL-pos") && motor->sensor != NULL){
 80023b6:	491e      	ldr	r1, [pc, #120]	@ (8002430 <SerialCommander_ParseControlType+0xac>)
 80023b8:	6838      	ldr	r0, [r7, #0]
 80023ba:	f7fd ff11 	bl	80001e0 <strcmp>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d105      	bne.n	80023d0 <SerialCommander_ParseControlType+0x4c>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <SerialCommander_ParseControlType+0x4c>
		return closed_loop_position_no_cs;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e027      	b.n	8002420 <SerialCommander_ParseControlType+0x9c>
	}
	else if(!strcmp(type, "CL-vel") && motor->sensor != NULL){
 80023d0:	4918      	ldr	r1, [pc, #96]	@ (8002434 <SerialCommander_ParseControlType+0xb0>)
 80023d2:	6838      	ldr	r0, [r7, #0]
 80023d4:	f7fd ff04 	bl	80001e0 <strcmp>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d105      	bne.n	80023ea <SerialCommander_ParseControlType+0x66>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <SerialCommander_ParseControlType+0x66>
		return closed_loop_velocity_no_cs;
 80023e6:	2304      	movs	r3, #4
 80023e8:	e01a      	b.n	8002420 <SerialCommander_ParseControlType+0x9c>
	}
	else if(!strcmp(type, "CL-pos-cs") && motor->sensor != NULL){
 80023ea:	4913      	ldr	r1, [pc, #76]	@ (8002438 <SerialCommander_ParseControlType+0xb4>)
 80023ec:	6838      	ldr	r0, [r7, #0]
 80023ee:	f7fd fef7 	bl	80001e0 <strcmp>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d105      	bne.n	8002404 <SerialCommander_ParseControlType+0x80>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <SerialCommander_ParseControlType+0x80>
		return closed_loop_position;
 8002400:	2305      	movs	r3, #5
 8002402:	e00d      	b.n	8002420 <SerialCommander_ParseControlType+0x9c>
	}
	else if(!strcmp(type, "CL-vel-cs") && motor->sensor != NULL){
 8002404:	490d      	ldr	r1, [pc, #52]	@ (800243c <SerialCommander_ParseControlType+0xb8>)
 8002406:	6838      	ldr	r0, [r7, #0]
 8002408:	f7fd feea 	bl	80001e0 <strcmp>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d105      	bne.n	800241e <SerialCommander_ParseControlType+0x9a>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <SerialCommander_ParseControlType+0x9a>
		return closed_loop_velocity;
 800241a:	2306      	movs	r3, #6
 800241c:	e000      	b.n	8002420 <SerialCommander_ParseControlType+0x9c>
	}
	else{
		return error;
 800241e:	2300      	movs	r3, #0
	}
}
 8002420:	4618      	mov	r0, r3
 8002422:	3710      	adds	r7, #16
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	20000274 	.word	0x20000274
 800242c:	0800cdb0 	.word	0x0800cdb0
 8002430:	0800cdb8 	.word	0x0800cdb8
 8002434:	0800cdc0 	.word	0x0800cdc0
 8002438:	0800cdc8 	.word	0x0800cdc8
 800243c:	0800cdd4 	.word	0x0800cdd4

08002440 <SerialCommander_ParseCommand>:
 * @param[in] float* val
 * @param[in] Ctrl_t* ctrl
 * @retval uint8_t state; 0 if success, 1 if error
 */
static uint8_t SerialCommander_ParseCommand(const char* cmd, uint8_t* motor_idx, char* param, uint32_t param_size, float* val, Ctrl_t* ctrl)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08e      	sub	sp, #56	@ 0x38
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	603b      	str	r3, [r7, #0]
	char buff[32];

	/* Copy cmd to buffer & append null terminator */
	strncpy(buff, cmd, sizeof(buff));
 800244e:	f107 0314 	add.w	r3, r7, #20
 8002452:	2220      	movs	r2, #32
 8002454:	68f9      	ldr	r1, [r7, #12]
 8002456:	4618      	mov	r0, r3
 8002458:	f007 fd2d 	bl	8009eb6 <strncpy>
	buff[sizeof(buff) - 1] = '\0';
 800245c:	2300      	movs	r3, #0
 800245e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	/* Generate token: motor ID */
	char* tok = strtok(buff, " ");
 8002462:	f107 0314 	add.w	r3, r7, #20
 8002466:	4936      	ldr	r1, [pc, #216]	@ (8002540 <SerialCommander_ParseCommand+0x100>)
 8002468:	4618      	mov	r0, r3
 800246a:	f007 fd37 	bl	8009edc <strtok>
 800246e:	6378      	str	r0, [r7, #52]	@ 0x34
	if(!tok || tok[0] != 'm')
 8002470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <SerialCommander_ParseCommand+0x3e>
 8002476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b6d      	cmp	r3, #109	@ 0x6d
 800247c:	d004      	beq.n	8002488 <SerialCommander_ParseCommand+0x48>
	{
		Serial_Print("Invalid motor ID\n");
 800247e:	4831      	ldr	r0, [pc, #196]	@ (8002544 <SerialCommander_ParseCommand+0x104>)
 8002480:	f7ff ff6a 	bl	8002358 <Serial_Print>
		return 1;
 8002484:	2301      	movs	r3, #1
 8002486:	e056      	b.n	8002536 <SerialCommander_ParseCommand+0xf6>
	}

	*motor_idx = tok[1] - '0';
 8002488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800248a:	3301      	adds	r3, #1
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	3b30      	subs	r3, #48	@ 0x30
 8002490:	b2da      	uxtb	r2, r3
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	701a      	strb	r2, [r3, #0]
	if(*motor_idx < 0 || *motor_idx >= 2)
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d904      	bls.n	80024a8 <SerialCommander_ParseCommand+0x68>
	{
		Serial_Print("Motor ID out of range\n");
 800249e:	482a      	ldr	r0, [pc, #168]	@ (8002548 <SerialCommander_ParseCommand+0x108>)
 80024a0:	f7ff ff5a 	bl	8002358 <Serial_Print>
		return 1;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e046      	b.n	8002536 <SerialCommander_ParseCommand+0xf6>
	}

	/* Generate token: param */
	tok = strtok(NULL, " ");
 80024a8:	4925      	ldr	r1, [pc, #148]	@ (8002540 <SerialCommander_ParseCommand+0x100>)
 80024aa:	2000      	movs	r0, #0
 80024ac:	f007 fd16 	bl	8009edc <strtok>
 80024b0:	6378      	str	r0, [r7, #52]	@ 0x34
	if(!tok)
 80024b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d104      	bne.n	80024c2 <SerialCommander_ParseCommand+0x82>
	{
		Serial_Print("Invalid command: no param\n");
 80024b8:	4824      	ldr	r0, [pc, #144]	@ (800254c <SerialCommander_ParseCommand+0x10c>)
 80024ba:	f7ff ff4d 	bl	8002358 <Serial_Print>
		return 1;
 80024be:	2301      	movs	r3, #1
 80024c0:	e039      	b.n	8002536 <SerialCommander_ParseCommand+0xf6>
	}
	strncpy(param, tok, param_size);
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f007 fcf5 	bl	8009eb6 <strncpy>
	param[param_size - 1] = '\0';
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	4413      	add	r3, r2
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]

	/* Generate token: value */
	tok = strtok(NULL, " ");
 80024d8:	4919      	ldr	r1, [pc, #100]	@ (8002540 <SerialCommander_ParseCommand+0x100>)
 80024da:	2000      	movs	r0, #0
 80024dc:	f007 fcfe 	bl	8009edc <strtok>
 80024e0:	6378      	str	r0, [r7, #52]	@ 0x34
	if(!tok)
 80024e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d104      	bne.n	80024f2 <SerialCommander_ParseCommand+0xb2>
	{
		Serial_Print("Invalid command: no value\n");
 80024e8:	4819      	ldr	r0, [pc, #100]	@ (8002550 <SerialCommander_ParseCommand+0x110>)
 80024ea:	f7ff ff35 	bl	8002358 <Serial_Print>
		return 1;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e021      	b.n	8002536 <SerialCommander_ParseCommand+0xf6>
	}

	/* Handle control parameter */
	if(!strcmp(param, "ctrl")){
 80024f2:	4918      	ldr	r1, [pc, #96]	@ (8002554 <SerialCommander_ParseCommand+0x114>)
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7fd fe73 	bl	80001e0 <strcmp>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10a      	bne.n	8002516 <SerialCommander_ParseCommand+0xd6>
		*ctrl = SerialCommander_ParseControlType(*motor_idx, (const char*)param);
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff ff3c 	bl	8002384 <SerialCommander_ParseControlType>
 800250c:	4603      	mov	r3, r0
 800250e:	461a      	mov	r2, r3
 8002510:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002512:	701a      	strb	r2, [r3, #0]
 8002514:	e00e      	b.n	8002534 <SerialCommander_ParseCommand+0xf4>
	}
	else{
		*ctrl = error;
 8002516:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
		*val = atof(tok);
 800251c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800251e:	f005 ff0d 	bl	800833c <atof>
 8002522:	ec53 2b10 	vmov	r2, r3, d0
 8002526:	4610      	mov	r0, r2
 8002528:	4619      	mov	r1, r3
 800252a:	f7fe fb75 	bl	8000c18 <__aeabi_d2f>
 800252e:	4602      	mov	r2, r0
 8002530:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002532:	601a      	str	r2, [r3, #0]
	}

	return 0;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3738      	adds	r7, #56	@ 0x38
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	0800cde0 	.word	0x0800cde0
 8002544:	0800cde4 	.word	0x0800cde4
 8002548:	0800cdf8 	.word	0x0800cdf8
 800254c:	0800ce10 	.word	0x0800ce10
 8002550:	0800ce2c 	.word	0x0800ce2c
 8002554:	0800ce48 	.word	0x0800ce48

08002558 <SerialCommander_SetMotorParam>:
 * @param[in] float val
 * @param[in] Ctrl_t ctrl
 * @retval uint8_t state; 0 if success, 1 if error
 */
static uint8_t SerialCommander_SetMotorParam(uint8_t motor_idx, const char* param, float val, Ctrl_t ctrl)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	ed87 0a01 	vstr	s0, [r7, #4]
 8002566:	73fb      	strb	r3, [r7, #15]
 8002568:	4613      	mov	r3, r2
 800256a:	73bb      	strb	r3, [r7, #14]
	/* Get motor reference & check if motor is in use */
	BLDCMotor* motor = BLDCMotorArray[motor_idx];
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	4a31      	ldr	r2, [pc, #196]	@ (8002634 <SerialCommander_SetMotorParam+0xdc>)
 8002570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002574:	617b      	str	r3, [r7, #20]
	if(!motor)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <SerialCommander_SetMotorParam+0x28>
	{
		return 1;
 800257c:	2301      	movs	r3, #1
 800257e:	e055      	b.n	800262c <SerialCommander_SetMotorParam+0xd4>
	}

	/* Set param value */
	if(!strcmp(param, "vel")){
 8002580:	492d      	ldr	r1, [pc, #180]	@ (8002638 <SerialCommander_SetMotorParam+0xe0>)
 8002582:	68b8      	ldr	r0, [r7, #8]
 8002584:	f7fd fe2c 	bl	80001e0 <strcmp>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d103      	bne.n	8002596 <SerialCommander_SetMotorParam+0x3e>
		motor->target_velocity = val;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	60da      	str	r2, [r3, #12]
 8002594:	e049      	b.n	800262a <SerialCommander_SetMotorParam+0xd2>
	}
	else if(!strcmp(param, "pos")){
 8002596:	4929      	ldr	r1, [pc, #164]	@ (800263c <SerialCommander_SetMotorParam+0xe4>)
 8002598:	68b8      	ldr	r0, [r7, #8]
 800259a:	f7fd fe21 	bl	80001e0 <strcmp>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d103      	bne.n	80025ac <SerialCommander_SetMotorParam+0x54>
		motor->target_pos = val;
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	611a      	str	r2, [r3, #16]
 80025aa:	e03e      	b.n	800262a <SerialCommander_SetMotorParam+0xd2>
	}
	else if(!strcmp(param, "v_limit")){
 80025ac:	4924      	ldr	r1, [pc, #144]	@ (8002640 <SerialCommander_SetMotorParam+0xe8>)
 80025ae:	68b8      	ldr	r0, [r7, #8]
 80025b0:	f7fd fe16 	bl	80001e0 <strcmp>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d103      	bne.n	80025c2 <SerialCommander_SetMotorParam+0x6a>
		motor->voltage_limit = val;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	605a      	str	r2, [r3, #4]
 80025c0:	e033      	b.n	800262a <SerialCommander_SetMotorParam+0xd2>
	}
	else if(!strcmp(param, "pid_p")){
 80025c2:	4920      	ldr	r1, [pc, #128]	@ (8002644 <SerialCommander_SetMotorParam+0xec>)
 80025c4:	68b8      	ldr	r0, [r7, #8]
 80025c6:	f7fd fe0b 	bl	80001e0 <strcmp>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d103      	bne.n	80025d8 <SerialCommander_SetMotorParam+0x80>
		motor->pid.kp = val;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80025d6:	e028      	b.n	800262a <SerialCommander_SetMotorParam+0xd2>
	}
	else if(!strcmp(param, "pid_i")){
 80025d8:	491b      	ldr	r1, [pc, #108]	@ (8002648 <SerialCommander_SetMotorParam+0xf0>)
 80025da:	68b8      	ldr	r0, [r7, #8]
 80025dc:	f7fd fe00 	bl	80001e0 <strcmp>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d103      	bne.n	80025ee <SerialCommander_SetMotorParam+0x96>
		motor->pid.ki = val;
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025ec:	e01d      	b.n	800262a <SerialCommander_SetMotorParam+0xd2>
	}
	else if(!strcmp(param, "pid_d")){
 80025ee:	4917      	ldr	r1, [pc, #92]	@ (800264c <SerialCommander_SetMotorParam+0xf4>)
 80025f0:	68b8      	ldr	r0, [r7, #8]
 80025f2:	f7fd fdf5 	bl	80001e0 <strcmp>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d103      	bne.n	8002604 <SerialCommander_SetMotorParam+0xac>
		motor->pid.kd = val;
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	641a      	str	r2, [r3, #64]	@ 0x40
 8002602:	e012      	b.n	800262a <SerialCommander_SetMotorParam+0xd2>
	}
	else if(!strcmp(param, "ctrl")){
 8002604:	4912      	ldr	r1, [pc, #72]	@ (8002650 <SerialCommander_SetMotorParam+0xf8>)
 8002606:	68b8      	ldr	r0, [r7, #8]
 8002608:	f7fd fdea 	bl	80001e0 <strcmp>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d109      	bne.n	8002626 <SerialCommander_SetMotorParam+0xce>
		/* No update to control type if error parsing */
		if(ctrl != error){
 8002612:	7bbb      	ldrb	r3, [r7, #14]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d004      	beq.n	8002622 <SerialCommander_SetMotorParam+0xca>
			motor->control = ctrl;
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	7bba      	ldrb	r2, [r7, #14]
 800261c:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 8002620:	e003      	b.n	800262a <SerialCommander_SetMotorParam+0xd2>
		}
		else{
			return 1;
 8002622:	2301      	movs	r3, #1
 8002624:	e002      	b.n	800262c <SerialCommander_SetMotorParam+0xd4>
		}
	}
	else{
		return 1;
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <SerialCommander_SetMotorParam+0xd4>
	}
	return 0;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000274 	.word	0x20000274
 8002638:	0800ce50 	.word	0x0800ce50
 800263c:	0800ce54 	.word	0x0800ce54
 8002640:	0800ce58 	.word	0x0800ce58
 8002644:	0800ce60 	.word	0x0800ce60
 8002648:	0800ce68 	.word	0x0800ce68
 800264c:	0800ce70 	.word	0x0800ce70
 8002650:	0800ce48 	.word	0x0800ce48

08002654 <SerialCommander_PollCommands>:
 * @brief Event updater; to be called repeatedly in main loop
 * @param[in] -
 * @retval -
 */
void SerialCommander_PollCommands()
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b088      	sub	sp, #32
 8002658:	af02      	add	r7, sp, #8
	/* If data flag raised, parse buffer data */
	if(serial_dev.rx_flag == 1)
 800265a:	4b1b      	ldr	r3, [pc, #108]	@ (80026c8 <SerialCommander_PollCommands+0x74>)
 800265c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002660:	2b01      	cmp	r3, #1
 8002662:	d12d      	bne.n	80026c0 <SerialCommander_PollCommands+0x6c>
		uint8_t motor_idx;
		char param[8];
		float val;
		Ctrl_t ctrl;

		uint8_t state = 1;
 8002664:	2301      	movs	r3, #1
 8002666:	75fb      	strb	r3, [r7, #23]

		/* Parse commands */
		state = SerialCommander_ParseCommand((const char*)serial_dev.rx_buff, &motor_idx, param, sizeof(param), &val, &ctrl);
 8002668:	f107 020c 	add.w	r2, r7, #12
 800266c:	f107 0116 	add.w	r1, r7, #22
 8002670:	1dfb      	adds	r3, r7, #7
 8002672:	9301      	str	r3, [sp, #4]
 8002674:	f107 0308 	add.w	r3, r7, #8
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	2308      	movs	r3, #8
 800267c:	4813      	ldr	r0, [pc, #76]	@ (80026cc <SerialCommander_PollCommands+0x78>)
 800267e:	f7ff fedf 	bl	8002440 <SerialCommander_ParseCommand>
 8002682:	4603      	mov	r3, r0
 8002684:	75fb      	strb	r3, [r7, #23]

		if(state){
 8002686:	7dfb      	ldrb	r3, [r7, #23]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d118      	bne.n	80026be <SerialCommander_PollCommands+0x6a>
			return;
		}

		/* Set new params */
		state = SerialCommander_SetMotorParam(motor_idx, (const char*)param, val, ctrl);
 800268c:	7dbb      	ldrb	r3, [r7, #22]
 800268e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002692:	79fa      	ldrb	r2, [r7, #7]
 8002694:	f107 010c 	add.w	r1, r7, #12
 8002698:	eeb0 0a67 	vmov.f32	s0, s15
 800269c:	4618      	mov	r0, r3
 800269e:	f7ff ff5b 	bl	8002558 <SerialCommander_SetMotorParam>
 80026a2:	4603      	mov	r3, r0
 80026a4:	75fb      	strb	r3, [r7, #23]

		/* Initiate next uart receive to idle event */
		HAL_UARTEx_ReceiveToIdle_DMA(serial_dev.uart, serial_dev.rx_buff, 32);
 80026a6:	4b08      	ldr	r3, [pc, #32]	@ (80026c8 <SerialCommander_PollCommands+0x74>)
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2220      	movs	r2, #32
 80026ac:	4907      	ldr	r1, [pc, #28]	@ (80026cc <SerialCommander_PollCommands+0x78>)
 80026ae:	4618      	mov	r0, r3
 80026b0:	f004 fcf4 	bl	800709c <HAL_UARTEx_ReceiveToIdle_DMA>
		serial_dev.rx_flag = 0;
 80026b4:	4b04      	ldr	r3, [pc, #16]	@ (80026c8 <SerialCommander_PollCommands+0x74>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 80026bc:	e000      	b.n	80026c0 <SerialCommander_PollCommands+0x6c>
			return;
 80026be:	bf00      	nop
	}
}
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20000730 	.word	0x20000730
 80026cc:	2000073c 	.word	0x2000073c

080026d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d6:	2300      	movs	r3, #0
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	4b10      	ldr	r3, [pc, #64]	@ (800271c <HAL_MspInit+0x4c>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026de:	4a0f      	ldr	r2, [pc, #60]	@ (800271c <HAL_MspInit+0x4c>)
 80026e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80026e6:	4b0d      	ldr	r3, [pc, #52]	@ (800271c <HAL_MspInit+0x4c>)
 80026e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	603b      	str	r3, [r7, #0]
 80026f6:	4b09      	ldr	r3, [pc, #36]	@ (800271c <HAL_MspInit+0x4c>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fa:	4a08      	ldr	r2, [pc, #32]	@ (800271c <HAL_MspInit+0x4c>)
 80026fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002700:	6413      	str	r3, [r2, #64]	@ 0x40
 8002702:	4b06      	ldr	r3, [pc, #24]	@ (800271c <HAL_MspInit+0x4c>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800270a:	603b      	str	r3, [r7, #0]
 800270c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800

08002720 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b08a      	sub	sp, #40	@ 0x28
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002728:	f107 0314 	add.w	r3, r7, #20
 800272c:	2200      	movs	r2, #0
 800272e:	601a      	str	r2, [r3, #0]
 8002730:	605a      	str	r2, [r3, #4]
 8002732:	609a      	str	r2, [r3, #8]
 8002734:	60da      	str	r2, [r3, #12]
 8002736:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a2f      	ldr	r2, [pc, #188]	@ (80027fc <HAL_ADC_MspInit+0xdc>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d157      	bne.n	80027f2 <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	4b2e      	ldr	r3, [pc, #184]	@ (8002800 <HAL_ADC_MspInit+0xe0>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274a:	4a2d      	ldr	r2, [pc, #180]	@ (8002800 <HAL_ADC_MspInit+0xe0>)
 800274c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002750:	6453      	str	r3, [r2, #68]	@ 0x44
 8002752:	4b2b      	ldr	r3, [pc, #172]	@ (8002800 <HAL_ADC_MspInit+0xe0>)
 8002754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800275a:	613b      	str	r3, [r7, #16]
 800275c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	4b27      	ldr	r3, [pc, #156]	@ (8002800 <HAL_ADC_MspInit+0xe0>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002766:	4a26      	ldr	r2, [pc, #152]	@ (8002800 <HAL_ADC_MspInit+0xe0>)
 8002768:	f043 0301 	orr.w	r3, r3, #1
 800276c:	6313      	str	r3, [r2, #48]	@ 0x30
 800276e:	4b24      	ldr	r3, [pc, #144]	@ (8002800 <HAL_ADC_MspInit+0xe0>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 800277a:	231b      	movs	r3, #27
 800277c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800277e:	2303      	movs	r3, #3
 8002780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002782:	2300      	movs	r3, #0
 8002784:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002786:	f107 0314 	add.w	r3, r7, #20
 800278a:	4619      	mov	r1, r3
 800278c:	481d      	ldr	r0, [pc, #116]	@ (8002804 <HAL_ADC_MspInit+0xe4>)
 800278e:	f001 fcdb 	bl	8004148 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002792:	4b1d      	ldr	r3, [pc, #116]	@ (8002808 <HAL_ADC_MspInit+0xe8>)
 8002794:	4a1d      	ldr	r2, [pc, #116]	@ (800280c <HAL_ADC_MspInit+0xec>)
 8002796:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002798:	4b1b      	ldr	r3, [pc, #108]	@ (8002808 <HAL_ADC_MspInit+0xe8>)
 800279a:	2200      	movs	r2, #0
 800279c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800279e:	4b1a      	ldr	r3, [pc, #104]	@ (8002808 <HAL_ADC_MspInit+0xe8>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027a4:	4b18      	ldr	r3, [pc, #96]	@ (8002808 <HAL_ADC_MspInit+0xe8>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027aa:	4b17      	ldr	r3, [pc, #92]	@ (8002808 <HAL_ADC_MspInit+0xe8>)
 80027ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027b0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027b2:	4b15      	ldr	r3, [pc, #84]	@ (8002808 <HAL_ADC_MspInit+0xe8>)
 80027b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027b8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027ba:	4b13      	ldr	r3, [pc, #76]	@ (8002808 <HAL_ADC_MspInit+0xe8>)
 80027bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80027c2:	4b11      	ldr	r3, [pc, #68]	@ (8002808 <HAL_ADC_MspInit+0xe8>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80027c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002808 <HAL_ADC_MspInit+0xe8>)
 80027ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80027ce:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027d0:	4b0d      	ldr	r3, [pc, #52]	@ (8002808 <HAL_ADC_MspInit+0xe8>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027d6:	480c      	ldr	r0, [pc, #48]	@ (8002808 <HAL_ADC_MspInit+0xe8>)
 80027d8:	f001 f8a8 	bl	800392c <HAL_DMA_Init>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80027e2:	f7ff fd51 	bl	8002288 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a07      	ldr	r2, [pc, #28]	@ (8002808 <HAL_ADC_MspInit+0xe8>)
 80027ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80027ec:	4a06      	ldr	r2, [pc, #24]	@ (8002808 <HAL_ADC_MspInit+0xe8>)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80027f2:	bf00      	nop
 80027f4:	3728      	adds	r7, #40	@ 0x28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40012000 	.word	0x40012000
 8002800:	40023800 	.word	0x40023800
 8002804:	40020000 	.word	0x40020000
 8002808:	200002c4 	.word	0x200002c4
 800280c:	40026410 	.word	0x40026410

08002810 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08c      	sub	sp, #48	@ 0x30
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002818:	f107 031c 	add.w	r3, r7, #28
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	605a      	str	r2, [r3, #4]
 8002822:	609a      	str	r2, [r3, #8]
 8002824:	60da      	str	r2, [r3, #12]
 8002826:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a97      	ldr	r2, [pc, #604]	@ (8002a8c <HAL_I2C_MspInit+0x27c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	f040 8088 	bne.w	8002944 <HAL_I2C_MspInit+0x134>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002834:	2300      	movs	r3, #0
 8002836:	61bb      	str	r3, [r7, #24]
 8002838:	4b95      	ldr	r3, [pc, #596]	@ (8002a90 <HAL_I2C_MspInit+0x280>)
 800283a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283c:	4a94      	ldr	r2, [pc, #592]	@ (8002a90 <HAL_I2C_MspInit+0x280>)
 800283e:	f043 0302 	orr.w	r3, r3, #2
 8002842:	6313      	str	r3, [r2, #48]	@ 0x30
 8002844:	4b92      	ldr	r3, [pc, #584]	@ (8002a90 <HAL_I2C_MspInit+0x280>)
 8002846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	61bb      	str	r3, [r7, #24]
 800284e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002850:	23c0      	movs	r3, #192	@ 0xc0
 8002852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002854:	2312      	movs	r3, #18
 8002856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002858:	2300      	movs	r3, #0
 800285a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285c:	2303      	movs	r3, #3
 800285e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002860:	2304      	movs	r3, #4
 8002862:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002864:	f107 031c 	add.w	r3, r7, #28
 8002868:	4619      	mov	r1, r3
 800286a:	488a      	ldr	r0, [pc, #552]	@ (8002a94 <HAL_I2C_MspInit+0x284>)
 800286c:	f001 fc6c 	bl	8004148 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	4b86      	ldr	r3, [pc, #536]	@ (8002a90 <HAL_I2C_MspInit+0x280>)
 8002876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002878:	4a85      	ldr	r2, [pc, #532]	@ (8002a90 <HAL_I2C_MspInit+0x280>)
 800287a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800287e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002880:	4b83      	ldr	r3, [pc, #524]	@ (8002a90 <HAL_I2C_MspInit+0x280>)
 8002882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002884:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800288c:	4b82      	ldr	r3, [pc, #520]	@ (8002a98 <HAL_I2C_MspInit+0x288>)
 800288e:	4a83      	ldr	r2, [pc, #524]	@ (8002a9c <HAL_I2C_MspInit+0x28c>)
 8002890:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002892:	4b81      	ldr	r3, [pc, #516]	@ (8002a98 <HAL_I2C_MspInit+0x288>)
 8002894:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002898:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800289a:	4b7f      	ldr	r3, [pc, #508]	@ (8002a98 <HAL_I2C_MspInit+0x288>)
 800289c:	2200      	movs	r2, #0
 800289e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028a0:	4b7d      	ldr	r3, [pc, #500]	@ (8002a98 <HAL_I2C_MspInit+0x288>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028a6:	4b7c      	ldr	r3, [pc, #496]	@ (8002a98 <HAL_I2C_MspInit+0x288>)
 80028a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028ac:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028ae:	4b7a      	ldr	r3, [pc, #488]	@ (8002a98 <HAL_I2C_MspInit+0x288>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028b4:	4b78      	ldr	r3, [pc, #480]	@ (8002a98 <HAL_I2C_MspInit+0x288>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80028ba:	4b77      	ldr	r3, [pc, #476]	@ (8002a98 <HAL_I2C_MspInit+0x288>)
 80028bc:	2200      	movs	r2, #0
 80028be:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028c0:	4b75      	ldr	r3, [pc, #468]	@ (8002a98 <HAL_I2C_MspInit+0x288>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028c6:	4b74      	ldr	r3, [pc, #464]	@ (8002a98 <HAL_I2C_MspInit+0x288>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80028cc:	4872      	ldr	r0, [pc, #456]	@ (8002a98 <HAL_I2C_MspInit+0x288>)
 80028ce:	f001 f82d 	bl	800392c <HAL_DMA_Init>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80028d8:	f7ff fcd6 	bl	8002288 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a6e      	ldr	r2, [pc, #440]	@ (8002a98 <HAL_I2C_MspInit+0x288>)
 80028e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80028e2:	4a6d      	ldr	r2, [pc, #436]	@ (8002a98 <HAL_I2C_MspInit+0x288>)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 80028e8:	4b6d      	ldr	r3, [pc, #436]	@ (8002aa0 <HAL_I2C_MspInit+0x290>)
 80028ea:	4a6e      	ldr	r2, [pc, #440]	@ (8002aa4 <HAL_I2C_MspInit+0x294>)
 80028ec:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 80028ee:	4b6c      	ldr	r3, [pc, #432]	@ (8002aa0 <HAL_I2C_MspInit+0x290>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028f4:	4b6a      	ldr	r3, [pc, #424]	@ (8002aa0 <HAL_I2C_MspInit+0x290>)
 80028f6:	2240      	movs	r2, #64	@ 0x40
 80028f8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028fa:	4b69      	ldr	r3, [pc, #420]	@ (8002aa0 <HAL_I2C_MspInit+0x290>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002900:	4b67      	ldr	r3, [pc, #412]	@ (8002aa0 <HAL_I2C_MspInit+0x290>)
 8002902:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002906:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002908:	4b65      	ldr	r3, [pc, #404]	@ (8002aa0 <HAL_I2C_MspInit+0x290>)
 800290a:	2200      	movs	r2, #0
 800290c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800290e:	4b64      	ldr	r3, [pc, #400]	@ (8002aa0 <HAL_I2C_MspInit+0x290>)
 8002910:	2200      	movs	r2, #0
 8002912:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002914:	4b62      	ldr	r3, [pc, #392]	@ (8002aa0 <HAL_I2C_MspInit+0x290>)
 8002916:	2200      	movs	r2, #0
 8002918:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800291a:	4b61      	ldr	r3, [pc, #388]	@ (8002aa0 <HAL_I2C_MspInit+0x290>)
 800291c:	2200      	movs	r2, #0
 800291e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002920:	4b5f      	ldr	r3, [pc, #380]	@ (8002aa0 <HAL_I2C_MspInit+0x290>)
 8002922:	2200      	movs	r2, #0
 8002924:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002926:	485e      	ldr	r0, [pc, #376]	@ (8002aa0 <HAL_I2C_MspInit+0x290>)
 8002928:	f001 f800 	bl	800392c <HAL_DMA_Init>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8002932:	f7ff fca9 	bl	8002288 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a59      	ldr	r2, [pc, #356]	@ (8002aa0 <HAL_I2C_MspInit+0x290>)
 800293a:	635a      	str	r2, [r3, #52]	@ 0x34
 800293c:	4a58      	ldr	r2, [pc, #352]	@ (8002aa0 <HAL_I2C_MspInit+0x290>)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002942:	e09f      	b.n	8002a84 <HAL_I2C_MspInit+0x274>
  else if(hi2c->Instance==I2C2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a57      	ldr	r2, [pc, #348]	@ (8002aa8 <HAL_I2C_MspInit+0x298>)
 800294a:	4293      	cmp	r3, r2
 800294c:	f040 809a 	bne.w	8002a84 <HAL_I2C_MspInit+0x274>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002950:	2300      	movs	r3, #0
 8002952:	613b      	str	r3, [r7, #16]
 8002954:	4b4e      	ldr	r3, [pc, #312]	@ (8002a90 <HAL_I2C_MspInit+0x280>)
 8002956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002958:	4a4d      	ldr	r2, [pc, #308]	@ (8002a90 <HAL_I2C_MspInit+0x280>)
 800295a:	f043 0302 	orr.w	r3, r3, #2
 800295e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002960:	4b4b      	ldr	r3, [pc, #300]	@ (8002a90 <HAL_I2C_MspInit+0x280>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800296c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002970:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002972:	2312      	movs	r3, #18
 8002974:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002976:	2300      	movs	r3, #0
 8002978:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800297a:	2303      	movs	r3, #3
 800297c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800297e:	2304      	movs	r3, #4
 8002980:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002982:	f107 031c 	add.w	r3, r7, #28
 8002986:	4619      	mov	r1, r3
 8002988:	4842      	ldr	r0, [pc, #264]	@ (8002a94 <HAL_I2C_MspInit+0x284>)
 800298a:	f001 fbdd 	bl	8004148 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800298e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002994:	2312      	movs	r3, #18
 8002996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002998:	2300      	movs	r3, #0
 800299a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800299c:	2303      	movs	r3, #3
 800299e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80029a0:	2309      	movs	r3, #9
 80029a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029a4:	f107 031c 	add.w	r3, r7, #28
 80029a8:	4619      	mov	r1, r3
 80029aa:	483a      	ldr	r0, [pc, #232]	@ (8002a94 <HAL_I2C_MspInit+0x284>)
 80029ac:	f001 fbcc 	bl	8004148 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80029b0:	2300      	movs	r3, #0
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	4b36      	ldr	r3, [pc, #216]	@ (8002a90 <HAL_I2C_MspInit+0x280>)
 80029b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b8:	4a35      	ldr	r2, [pc, #212]	@ (8002a90 <HAL_I2C_MspInit+0x280>)
 80029ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029be:	6413      	str	r3, [r2, #64]	@ 0x40
 80029c0:	4b33      	ldr	r3, [pc, #204]	@ (8002a90 <HAL_I2C_MspInit+0x280>)
 80029c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 80029cc:	4b37      	ldr	r3, [pc, #220]	@ (8002aac <HAL_I2C_MspInit+0x29c>)
 80029ce:	4a38      	ldr	r2, [pc, #224]	@ (8002ab0 <HAL_I2C_MspInit+0x2a0>)
 80029d0:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 80029d2:	4b36      	ldr	r3, [pc, #216]	@ (8002aac <HAL_I2C_MspInit+0x29c>)
 80029d4:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 80029d8:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029da:	4b34      	ldr	r3, [pc, #208]	@ (8002aac <HAL_I2C_MspInit+0x29c>)
 80029dc:	2200      	movs	r2, #0
 80029de:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029e0:	4b32      	ldr	r3, [pc, #200]	@ (8002aac <HAL_I2C_MspInit+0x29c>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029e6:	4b31      	ldr	r3, [pc, #196]	@ (8002aac <HAL_I2C_MspInit+0x29c>)
 80029e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029ec:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029ee:	4b2f      	ldr	r3, [pc, #188]	@ (8002aac <HAL_I2C_MspInit+0x29c>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029f4:	4b2d      	ldr	r3, [pc, #180]	@ (8002aac <HAL_I2C_MspInit+0x29c>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 80029fa:	4b2c      	ldr	r3, [pc, #176]	@ (8002aac <HAL_I2C_MspInit+0x29c>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a00:	4b2a      	ldr	r3, [pc, #168]	@ (8002aac <HAL_I2C_MspInit+0x29c>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a06:	4b29      	ldr	r3, [pc, #164]	@ (8002aac <HAL_I2C_MspInit+0x29c>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8002a0c:	4827      	ldr	r0, [pc, #156]	@ (8002aac <HAL_I2C_MspInit+0x29c>)
 8002a0e:	f000 ff8d 	bl	800392c <HAL_DMA_Init>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <HAL_I2C_MspInit+0x20c>
      Error_Handler();
 8002a18:	f7ff fc36 	bl	8002288 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a23      	ldr	r2, [pc, #140]	@ (8002aac <HAL_I2C_MspInit+0x29c>)
 8002a20:	639a      	str	r2, [r3, #56]	@ 0x38
 8002a22:	4a22      	ldr	r2, [pc, #136]	@ (8002aac <HAL_I2C_MspInit+0x29c>)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8002a28:	4b22      	ldr	r3, [pc, #136]	@ (8002ab4 <HAL_I2C_MspInit+0x2a4>)
 8002a2a:	4a23      	ldr	r2, [pc, #140]	@ (8002ab8 <HAL_I2C_MspInit+0x2a8>)
 8002a2c:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8002a2e:	4b21      	ldr	r3, [pc, #132]	@ (8002ab4 <HAL_I2C_MspInit+0x2a4>)
 8002a30:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8002a34:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a36:	4b1f      	ldr	r3, [pc, #124]	@ (8002ab4 <HAL_I2C_MspInit+0x2a4>)
 8002a38:	2240      	movs	r2, #64	@ 0x40
 8002a3a:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ab4 <HAL_I2C_MspInit+0x2a4>)
 8002a3e:	2200      	movs	r2, #0
 8002a40:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a42:	4b1c      	ldr	r3, [pc, #112]	@ (8002ab4 <HAL_I2C_MspInit+0x2a4>)
 8002a44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a48:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab4 <HAL_I2C_MspInit+0x2a4>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a50:	4b18      	ldr	r3, [pc, #96]	@ (8002ab4 <HAL_I2C_MspInit+0x2a4>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8002a56:	4b17      	ldr	r3, [pc, #92]	@ (8002ab4 <HAL_I2C_MspInit+0x2a4>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a5c:	4b15      	ldr	r3, [pc, #84]	@ (8002ab4 <HAL_I2C_MspInit+0x2a4>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a62:	4b14      	ldr	r3, [pc, #80]	@ (8002ab4 <HAL_I2C_MspInit+0x2a4>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8002a68:	4812      	ldr	r0, [pc, #72]	@ (8002ab4 <HAL_I2C_MspInit+0x2a4>)
 8002a6a:	f000 ff5f 	bl	800392c <HAL_DMA_Init>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <HAL_I2C_MspInit+0x268>
      Error_Handler();
 8002a74:	f7ff fc08 	bl	8002288 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a0e      	ldr	r2, [pc, #56]	@ (8002ab4 <HAL_I2C_MspInit+0x2a4>)
 8002a7c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002a7e:	4a0d      	ldr	r2, [pc, #52]	@ (8002ab4 <HAL_I2C_MspInit+0x2a4>)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002a84:	bf00      	nop
 8002a86:	3730      	adds	r7, #48	@ 0x30
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40005400 	.word	0x40005400
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40020400 	.word	0x40020400
 8002a98:	200003cc 	.word	0x200003cc
 8002a9c:	40026010 	.word	0x40026010
 8002aa0:	2000042c 	.word	0x2000042c
 8002aa4:	40026028 	.word	0x40026028
 8002aa8:	40005800 	.word	0x40005800
 8002aac:	2000048c 	.word	0x2000048c
 8002ab0:	40026040 	.word	0x40026040
 8002ab4:	200004ec 	.word	0x200004ec
 8002ab8:	400260b8 	.word	0x400260b8

08002abc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002acc:	d10e      	bne.n	8002aec <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	60fb      	str	r3, [r7, #12]
 8002ad2:	4b13      	ldr	r3, [pc, #76]	@ (8002b20 <HAL_TIM_PWM_MspInit+0x64>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad6:	4a12      	ldr	r2, [pc, #72]	@ (8002b20 <HAL_TIM_PWM_MspInit+0x64>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ade:	4b10      	ldr	r3, [pc, #64]	@ (8002b20 <HAL_TIM_PWM_MspInit+0x64>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002aea:	e012      	b.n	8002b12 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a0c      	ldr	r2, [pc, #48]	@ (8002b24 <HAL_TIM_PWM_MspInit+0x68>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d10d      	bne.n	8002b12 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	4b09      	ldr	r3, [pc, #36]	@ (8002b20 <HAL_TIM_PWM_MspInit+0x64>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afe:	4a08      	ldr	r2, [pc, #32]	@ (8002b20 <HAL_TIM_PWM_MspInit+0x64>)
 8002b00:	f043 0302 	orr.w	r3, r3, #2
 8002b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b06:	4b06      	ldr	r3, [pc, #24]	@ (8002b20 <HAL_TIM_PWM_MspInit+0x64>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	68bb      	ldr	r3, [r7, #8]
}
 8002b12:	bf00      	nop
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40023800 	.word	0x40023800
 8002b24:	40000400 	.word	0x40000400

08002b28 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a0e      	ldr	r2, [pc, #56]	@ (8002b70 <HAL_TIM_OC_MspInit+0x48>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d115      	bne.n	8002b66 <HAL_TIM_OC_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002b74 <HAL_TIM_OC_MspInit+0x4c>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	4a0c      	ldr	r2, [pc, #48]	@ (8002b74 <HAL_TIM_OC_MspInit+0x4c>)
 8002b44:	f043 0304 	orr.w	r3, r3, #4
 8002b48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b74 <HAL_TIM_OC_MspInit+0x4c>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002b56:	2200      	movs	r2, #0
 8002b58:	2100      	movs	r1, #0
 8002b5a:	201e      	movs	r0, #30
 8002b5c:	f000 feaf 	bl	80038be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b60:	201e      	movs	r0, #30
 8002b62:	f000 fec8 	bl	80038f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40000800 	.word	0x40000800
 8002b74:	40023800 	.word	0x40023800

08002b78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b08a      	sub	sp, #40	@ 0x28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
 8002b8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b98:	d13c      	bne.n	8002c14 <HAL_TIM_MspPostInit+0x9c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	4b31      	ldr	r3, [pc, #196]	@ (8002c64 <HAL_TIM_MspPostInit+0xec>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba2:	4a30      	ldr	r2, [pc, #192]	@ (8002c64 <HAL_TIM_MspPostInit+0xec>)
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002baa:	4b2e      	ldr	r3, [pc, #184]	@ (8002c64 <HAL_TIM_MspPostInit+0xec>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bae:	f003 0301 	and.w	r3, r3, #1
 8002bb2:	613b      	str	r3, [r7, #16]
 8002bb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	4b2a      	ldr	r3, [pc, #168]	@ (8002c64 <HAL_TIM_MspPostInit+0xec>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	4a29      	ldr	r2, [pc, #164]	@ (8002c64 <HAL_TIM_MspPostInit+0xec>)
 8002bc0:	f043 0302 	orr.w	r3, r3, #2
 8002bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bc6:	4b27      	ldr	r3, [pc, #156]	@ (8002c64 <HAL_TIM_MspPostInit+0xec>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 8002bd2:	2324      	movs	r3, #36	@ 0x24
 8002bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bde:	2300      	movs	r3, #0
 8002be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002be2:	2301      	movs	r3, #1
 8002be4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be6:	f107 0314 	add.w	r3, r7, #20
 8002bea:	4619      	mov	r1, r3
 8002bec:	481e      	ldr	r0, [pc, #120]	@ (8002c68 <HAL_TIM_MspPostInit+0xf0>)
 8002bee:	f001 faab 	bl	8004148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002bf2:	2308      	movs	r3, #8
 8002bf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c02:	2301      	movs	r3, #1
 8002c04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c06:	f107 0314 	add.w	r3, r7, #20
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4817      	ldr	r0, [pc, #92]	@ (8002c6c <HAL_TIM_MspPostInit+0xf4>)
 8002c0e:	f001 fa9b 	bl	8004148 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002c12:	e022      	b.n	8002c5a <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a15      	ldr	r2, [pc, #84]	@ (8002c70 <HAL_TIM_MspPostInit+0xf8>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d11d      	bne.n	8002c5a <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	60bb      	str	r3, [r7, #8]
 8002c22:	4b10      	ldr	r3, [pc, #64]	@ (8002c64 <HAL_TIM_MspPostInit+0xec>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c26:	4a0f      	ldr	r2, [pc, #60]	@ (8002c64 <HAL_TIM_MspPostInit+0xec>)
 8002c28:	f043 0302 	orr.w	r3, r3, #2
 8002c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c64 <HAL_TIM_MspPostInit+0xec>)
 8002c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	60bb      	str	r3, [r7, #8]
 8002c38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 8002c3a:	2331      	movs	r3, #49	@ 0x31
 8002c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3e:	2302      	movs	r3, #2
 8002c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c46:	2300      	movs	r3, #0
 8002c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c4e:	f107 0314 	add.w	r3, r7, #20
 8002c52:	4619      	mov	r1, r3
 8002c54:	4805      	ldr	r0, [pc, #20]	@ (8002c6c <HAL_TIM_MspPostInit+0xf4>)
 8002c56:	f001 fa77 	bl	8004148 <HAL_GPIO_Init>
}
 8002c5a:	bf00      	nop
 8002c5c:	3728      	adds	r7, #40	@ 0x28
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40020000 	.word	0x40020000
 8002c6c:	40020400 	.word	0x40020400
 8002c70:	40000400 	.word	0x40000400

08002c74 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08a      	sub	sp, #40	@ 0x28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c7c:	f107 0314 	add.w	r3, r7, #20
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	605a      	str	r2, [r3, #4]
 8002c86:	609a      	str	r2, [r3, #8]
 8002c88:	60da      	str	r2, [r3, #12]
 8002c8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a4c      	ldr	r2, [pc, #304]	@ (8002dc4 <HAL_UART_MspInit+0x150>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	f040 8091 	bne.w	8002dba <HAL_UART_MspInit+0x146>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c98:	2300      	movs	r3, #0
 8002c9a:	613b      	str	r3, [r7, #16]
 8002c9c:	4b4a      	ldr	r3, [pc, #296]	@ (8002dc8 <HAL_UART_MspInit+0x154>)
 8002c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca0:	4a49      	ldr	r2, [pc, #292]	@ (8002dc8 <HAL_UART_MspInit+0x154>)
 8002ca2:	f043 0310 	orr.w	r3, r3, #16
 8002ca6:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ca8:	4b47      	ldr	r3, [pc, #284]	@ (8002dc8 <HAL_UART_MspInit+0x154>)
 8002caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cac:	f003 0310 	and.w	r3, r3, #16
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	4b43      	ldr	r3, [pc, #268]	@ (8002dc8 <HAL_UART_MspInit+0x154>)
 8002cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cbc:	4a42      	ldr	r2, [pc, #264]	@ (8002dc8 <HAL_UART_MspInit+0x154>)
 8002cbe:	f043 0301 	orr.w	r3, r3, #1
 8002cc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cc4:	4b40      	ldr	r3, [pc, #256]	@ (8002dc8 <HAL_UART_MspInit+0x154>)
 8002cc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002cd0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ce2:	2307      	movs	r3, #7
 8002ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce6:	f107 0314 	add.w	r3, r7, #20
 8002cea:	4619      	mov	r1, r3
 8002cec:	4837      	ldr	r0, [pc, #220]	@ (8002dcc <HAL_UART_MspInit+0x158>)
 8002cee:	f001 fa2b 	bl	8004148 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002cf2:	4b37      	ldr	r3, [pc, #220]	@ (8002dd0 <HAL_UART_MspInit+0x15c>)
 8002cf4:	4a37      	ldr	r2, [pc, #220]	@ (8002dd4 <HAL_UART_MspInit+0x160>)
 8002cf6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002cf8:	4b35      	ldr	r3, [pc, #212]	@ (8002dd0 <HAL_UART_MspInit+0x15c>)
 8002cfa:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002cfe:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d00:	4b33      	ldr	r3, [pc, #204]	@ (8002dd0 <HAL_UART_MspInit+0x15c>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d06:	4b32      	ldr	r3, [pc, #200]	@ (8002dd0 <HAL_UART_MspInit+0x15c>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d0c:	4b30      	ldr	r3, [pc, #192]	@ (8002dd0 <HAL_UART_MspInit+0x15c>)
 8002d0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d12:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d14:	4b2e      	ldr	r3, [pc, #184]	@ (8002dd0 <HAL_UART_MspInit+0x15c>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d1a:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd0 <HAL_UART_MspInit+0x15c>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002d20:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd0 <HAL_UART_MspInit+0x15c>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d26:	4b2a      	ldr	r3, [pc, #168]	@ (8002dd0 <HAL_UART_MspInit+0x15c>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d2c:	4b28      	ldr	r3, [pc, #160]	@ (8002dd0 <HAL_UART_MspInit+0x15c>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002d32:	4827      	ldr	r0, [pc, #156]	@ (8002dd0 <HAL_UART_MspInit+0x15c>)
 8002d34:	f000 fdfa 	bl	800392c <HAL_DMA_Init>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002d3e:	f7ff faa3 	bl	8002288 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a22      	ldr	r2, [pc, #136]	@ (8002dd0 <HAL_UART_MspInit+0x15c>)
 8002d46:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002d48:	4a21      	ldr	r2, [pc, #132]	@ (8002dd0 <HAL_UART_MspInit+0x15c>)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002d4e:	4b22      	ldr	r3, [pc, #136]	@ (8002dd8 <HAL_UART_MspInit+0x164>)
 8002d50:	4a22      	ldr	r2, [pc, #136]	@ (8002ddc <HAL_UART_MspInit+0x168>)
 8002d52:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002d54:	4b20      	ldr	r3, [pc, #128]	@ (8002dd8 <HAL_UART_MspInit+0x164>)
 8002d56:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002d5a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002dd8 <HAL_UART_MspInit+0x164>)
 8002d5e:	2240      	movs	r2, #64	@ 0x40
 8002d60:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d62:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd8 <HAL_UART_MspInit+0x164>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d68:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd8 <HAL_UART_MspInit+0x164>)
 8002d6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d6e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d70:	4b19      	ldr	r3, [pc, #100]	@ (8002dd8 <HAL_UART_MspInit+0x164>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d76:	4b18      	ldr	r3, [pc, #96]	@ (8002dd8 <HAL_UART_MspInit+0x164>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002d7c:	4b16      	ldr	r3, [pc, #88]	@ (8002dd8 <HAL_UART_MspInit+0x164>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d82:	4b15      	ldr	r3, [pc, #84]	@ (8002dd8 <HAL_UART_MspInit+0x164>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d88:	4b13      	ldr	r3, [pc, #76]	@ (8002dd8 <HAL_UART_MspInit+0x164>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002d8e:	4812      	ldr	r0, [pc, #72]	@ (8002dd8 <HAL_UART_MspInit+0x164>)
 8002d90:	f000 fdcc 	bl	800392c <HAL_DMA_Init>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002d9a:	f7ff fa75 	bl	8002288 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a0d      	ldr	r2, [pc, #52]	@ (8002dd8 <HAL_UART_MspInit+0x164>)
 8002da2:	639a      	str	r2, [r3, #56]	@ 0x38
 8002da4:	4a0c      	ldr	r2, [pc, #48]	@ (8002dd8 <HAL_UART_MspInit+0x164>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002daa:	2200      	movs	r2, #0
 8002dac:	2100      	movs	r1, #0
 8002dae:	2025      	movs	r0, #37	@ 0x25
 8002db0:	f000 fd85 	bl	80038be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002db4:	2025      	movs	r0, #37	@ 0x25
 8002db6:	f000 fd9e 	bl	80038f6 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002dba:	bf00      	nop
 8002dbc:	3728      	adds	r7, #40	@ 0x28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	40011000 	.word	0x40011000
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40020000 	.word	0x40020000
 8002dd0:	2000066c 	.word	0x2000066c
 8002dd4:	40026440 	.word	0x40026440
 8002dd8:	200006cc 	.word	0x200006cc
 8002ddc:	400264b8 	.word	0x400264b8

08002de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002de4:	bf00      	nop
 8002de6:	e7fd      	b.n	8002de4 <NMI_Handler+0x4>

08002de8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dec:	bf00      	nop
 8002dee:	e7fd      	b.n	8002dec <HardFault_Handler+0x4>

08002df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002df4:	bf00      	nop
 8002df6:	e7fd      	b.n	8002df4 <MemManage_Handler+0x4>

08002df8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dfc:	bf00      	nop
 8002dfe:	e7fd      	b.n	8002dfc <BusFault_Handler+0x4>

08002e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e04:	bf00      	nop
 8002e06:	e7fd      	b.n	8002e04 <UsageFault_Handler+0x4>

08002e08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e16:	b480      	push	{r7}
 8002e18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e28:	bf00      	nop
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e36:	f000 f9b1 	bl	800319c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002e44:	4802      	ldr	r0, [pc, #8]	@ (8002e50 <DMA1_Stream0_IRQHandler+0x10>)
 8002e46:	f000 ff09 	bl	8003c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	200003cc 	.word	0x200003cc

08002e54 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002e58:	4802      	ldr	r0, [pc, #8]	@ (8002e64 <DMA1_Stream1_IRQHandler+0x10>)
 8002e5a:	f000 feff 	bl	8003c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	2000042c 	.word	0x2000042c

08002e68 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 8002e6c:	4802      	ldr	r0, [pc, #8]	@ (8002e78 <DMA1_Stream2_IRQHandler+0x10>)
 8002e6e:	f000 fef5 	bl	8003c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	2000048c 	.word	0x2000048c

08002e7c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002e80:	4802      	ldr	r0, [pc, #8]	@ (8002e8c <TIM4_IRQHandler+0x10>)
 8002e82:	f003 fb55 	bl	8006530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	200005dc 	.word	0x200005dc

08002e90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002e94:	4802      	ldr	r0, [pc, #8]	@ (8002ea0 <USART1_IRQHandler+0x10>)
 8002e96:	f004 f95f 	bl	8007158 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002e9a:	bf00      	nop
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	20000624 	.word	0x20000624

08002ea4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 8002ea8:	4802      	ldr	r0, [pc, #8]	@ (8002eb4 <DMA1_Stream7_IRQHandler+0x10>)
 8002eaa:	f000 fed7 	bl	8003c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002eae:	bf00      	nop
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	200004ec 	.word	0x200004ec

08002eb8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002ebc:	4802      	ldr	r0, [pc, #8]	@ (8002ec8 <DMA2_Stream0_IRQHandler+0x10>)
 8002ebe:	f000 fecd 	bl	8003c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	200002c4 	.word	0x200002c4

08002ecc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002ed0:	4802      	ldr	r0, [pc, #8]	@ (8002edc <DMA2_Stream2_IRQHandler+0x10>)
 8002ed2:	f000 fec3 	bl	8003c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002ed6:	bf00      	nop
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	2000066c 	.word	0x2000066c

08002ee0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002ee4:	4802      	ldr	r0, [pc, #8]	@ (8002ef0 <DMA2_Stream7_IRQHandler+0x10>)
 8002ee6:	f000 feb9 	bl	8003c5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002eea:	bf00      	nop
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	200006cc 	.word	0x200006cc

08002ef4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  return 1;
 8002ef8:	2301      	movs	r3, #1
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <_kill>:

int _kill(int pid, int sig)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f0e:	f007 f88b 	bl	800a028 <__errno>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2216      	movs	r2, #22
 8002f16:	601a      	str	r2, [r3, #0]
  return -1;
 8002f18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <_exit>:

void _exit (int status)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f7ff ffe7 	bl	8002f04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f36:	bf00      	nop
 8002f38:	e7fd      	b.n	8002f36 <_exit+0x12>

08002f3a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b086      	sub	sp, #24
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	60f8      	str	r0, [r7, #12]
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f46:	2300      	movs	r3, #0
 8002f48:	617b      	str	r3, [r7, #20]
 8002f4a:	e00a      	b.n	8002f62 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f4c:	f3af 8000 	nop.w
 8002f50:	4601      	mov	r1, r0
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	60ba      	str	r2, [r7, #8]
 8002f58:	b2ca      	uxtb	r2, r1
 8002f5a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	429a      	cmp	r2, r3
 8002f68:	dbf0      	blt.n	8002f4c <_read+0x12>
  }

  return len;
 8002f6a:	687b      	ldr	r3, [r7, #4]
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b086      	sub	sp, #24
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f80:	2300      	movs	r3, #0
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	e009      	b.n	8002f9a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	60ba      	str	r2, [r7, #8]
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	3301      	adds	r3, #1
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	dbf1      	blt.n	8002f86 <_write+0x12>
  }
  return len;
 8002fa2:	687b      	ldr	r3, [r7, #4]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <_close>:

int _close(int file)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002fd4:	605a      	str	r2, [r3, #4]
  return 0;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <_isatty>:

int _isatty(int file)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002fec:	2301      	movs	r3, #1
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b085      	sub	sp, #20
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	60f8      	str	r0, [r7, #12]
 8003002:	60b9      	str	r1, [r7, #8]
 8003004:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3714      	adds	r7, #20
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800301c:	4a14      	ldr	r2, [pc, #80]	@ (8003070 <_sbrk+0x5c>)
 800301e:	4b15      	ldr	r3, [pc, #84]	@ (8003074 <_sbrk+0x60>)
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003028:	4b13      	ldr	r3, [pc, #76]	@ (8003078 <_sbrk+0x64>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d102      	bne.n	8003036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003030:	4b11      	ldr	r3, [pc, #68]	@ (8003078 <_sbrk+0x64>)
 8003032:	4a12      	ldr	r2, [pc, #72]	@ (800307c <_sbrk+0x68>)
 8003034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003036:	4b10      	ldr	r3, [pc, #64]	@ (8003078 <_sbrk+0x64>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4413      	add	r3, r2
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	429a      	cmp	r2, r3
 8003042:	d207      	bcs.n	8003054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003044:	f006 fff0 	bl	800a028 <__errno>
 8003048:	4603      	mov	r3, r0
 800304a:	220c      	movs	r2, #12
 800304c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800304e:	f04f 33ff 	mov.w	r3, #4294967295
 8003052:	e009      	b.n	8003068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003054:	4b08      	ldr	r3, [pc, #32]	@ (8003078 <_sbrk+0x64>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800305a:	4b07      	ldr	r3, [pc, #28]	@ (8003078 <_sbrk+0x64>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4413      	add	r3, r2
 8003062:	4a05      	ldr	r2, [pc, #20]	@ (8003078 <_sbrk+0x64>)
 8003064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003066:	68fb      	ldr	r3, [r7, #12]
}
 8003068:	4618      	mov	r0, r3
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	20020000 	.word	0x20020000
 8003074:	00000400 	.word	0x00000400
 8003078:	20000780 	.word	0x20000780
 800307c:	200008d8 	.word	0x200008d8

08003080 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003084:	4b06      	ldr	r3, [pc, #24]	@ (80030a0 <SystemInit+0x20>)
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800308a:	4a05      	ldr	r2, [pc, #20]	@ (80030a0 <SystemInit+0x20>)
 800308c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003090:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003094:	bf00      	nop
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	e000ed00 	.word	0xe000ed00

080030a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80030a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80030dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80030a8:	f7ff ffea 	bl	8003080 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030ac:	480c      	ldr	r0, [pc, #48]	@ (80030e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80030ae:	490d      	ldr	r1, [pc, #52]	@ (80030e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80030b0:	4a0d      	ldr	r2, [pc, #52]	@ (80030e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80030b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030b4:	e002      	b.n	80030bc <LoopCopyDataInit>

080030b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030ba:	3304      	adds	r3, #4

080030bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030c0:	d3f9      	bcc.n	80030b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030c2:	4a0a      	ldr	r2, [pc, #40]	@ (80030ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80030c4:	4c0a      	ldr	r4, [pc, #40]	@ (80030f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80030c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030c8:	e001      	b.n	80030ce <LoopFillZerobss>

080030ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030cc:	3204      	adds	r2, #4

080030ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030d0:	d3fb      	bcc.n	80030ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80030d2:	f006 ffaf 	bl	800a034 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030d6:	f7fe fcbb 	bl	8001a50 <main>
  bx  lr    
 80030da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80030dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030e4:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 80030e8:	0800d340 	.word	0x0800d340
  ldr r2, =_sbss
 80030ec:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 80030f0:	200008d4 	.word	0x200008d4

080030f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030f4:	e7fe      	b.n	80030f4 <ADC_IRQHandler>
	...

080030f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003138 <HAL_Init+0x40>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a0d      	ldr	r2, [pc, #52]	@ (8003138 <HAL_Init+0x40>)
 8003102:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003106:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003108:	4b0b      	ldr	r3, [pc, #44]	@ (8003138 <HAL_Init+0x40>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a0a      	ldr	r2, [pc, #40]	@ (8003138 <HAL_Init+0x40>)
 800310e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003112:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003114:	4b08      	ldr	r3, [pc, #32]	@ (8003138 <HAL_Init+0x40>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a07      	ldr	r2, [pc, #28]	@ (8003138 <HAL_Init+0x40>)
 800311a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800311e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003120:	2003      	movs	r0, #3
 8003122:	f000 fbc1 	bl	80038a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003126:	200f      	movs	r0, #15
 8003128:	f000 f808 	bl	800313c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800312c:	f7ff fad0 	bl	80026d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40023c00 	.word	0x40023c00

0800313c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003144:	4b12      	ldr	r3, [pc, #72]	@ (8003190 <HAL_InitTick+0x54>)
 8003146:	681a      	ldr	r2, [r3, #0]
 8003148:	4b12      	ldr	r3, [pc, #72]	@ (8003194 <HAL_InitTick+0x58>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	4619      	mov	r1, r3
 800314e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003152:	fbb3 f3f1 	udiv	r3, r3, r1
 8003156:	fbb2 f3f3 	udiv	r3, r2, r3
 800315a:	4618      	mov	r0, r3
 800315c:	f000 fbd9 	bl	8003912 <HAL_SYSTICK_Config>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e00e      	b.n	8003188 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b0f      	cmp	r3, #15
 800316e:	d80a      	bhi.n	8003186 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003170:	2200      	movs	r2, #0
 8003172:	6879      	ldr	r1, [r7, #4]
 8003174:	f04f 30ff 	mov.w	r0, #4294967295
 8003178:	f000 fba1 	bl	80038be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800317c:	4a06      	ldr	r2, [pc, #24]	@ (8003198 <HAL_InitTick+0x5c>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	e000      	b.n	8003188 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
}
 8003188:	4618      	mov	r0, r3
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	20000084 	.word	0x20000084
 8003194:	2000008c 	.word	0x2000008c
 8003198:	20000088 	.word	0x20000088

0800319c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031a0:	4b06      	ldr	r3, [pc, #24]	@ (80031bc <HAL_IncTick+0x20>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	461a      	mov	r2, r3
 80031a6:	4b06      	ldr	r3, [pc, #24]	@ (80031c0 <HAL_IncTick+0x24>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4413      	add	r3, r2
 80031ac:	4a04      	ldr	r2, [pc, #16]	@ (80031c0 <HAL_IncTick+0x24>)
 80031ae:	6013      	str	r3, [r2, #0]
}
 80031b0:	bf00      	nop
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	2000008c 	.word	0x2000008c
 80031c0:	20000784 	.word	0x20000784

080031c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  return uwTick;
 80031c8:	4b03      	ldr	r3, [pc, #12]	@ (80031d8 <HAL_GetTick+0x14>)
 80031ca:	681b      	ldr	r3, [r3, #0]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr
 80031d6:	bf00      	nop
 80031d8:	20000784 	.word	0x20000784

080031dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031e4:	f7ff ffee 	bl	80031c4 <HAL_GetTick>
 80031e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f4:	d005      	beq.n	8003202 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003220 <HAL_Delay+0x44>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	461a      	mov	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4413      	add	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003202:	bf00      	nop
 8003204:	f7ff ffde 	bl	80031c4 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	429a      	cmp	r2, r3
 8003212:	d8f7      	bhi.n	8003204 <HAL_Delay+0x28>
  {
  }
}
 8003214:	bf00      	nop
 8003216:	bf00      	nop
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	2000008c 	.word	0x2000008c

08003224 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800322c:	2300      	movs	r3, #0
 800322e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d101      	bne.n	800323a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e033      	b.n	80032a2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323e:	2b00      	cmp	r3, #0
 8003240:	d109      	bne.n	8003256 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f7ff fa6c 	bl	8002720 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	2b00      	cmp	r3, #0
 8003260:	d118      	bne.n	8003294 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003266:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800326a:	f023 0302 	bic.w	r3, r3, #2
 800326e:	f043 0202 	orr.w	r2, r3, #2
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 f94a 	bl	8003510 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	f023 0303 	bic.w	r3, r3, #3
 800328a:	f043 0201 	orr.w	r2, r3, #1
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	641a      	str	r2, [r3, #64]	@ 0x40
 8003292:	e001      	b.n	8003298 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3710      	adds	r7, #16
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
	...

080032ac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x1c>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e113      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x244>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b09      	cmp	r3, #9
 80032d6:	d925      	bls.n	8003324 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68d9      	ldr	r1, [r3, #12]
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	461a      	mov	r2, r3
 80032e6:	4613      	mov	r3, r2
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	4413      	add	r3, r2
 80032ec:	3b1e      	subs	r3, #30
 80032ee:	2207      	movs	r2, #7
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43da      	mvns	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	400a      	ands	r2, r1
 80032fc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68d9      	ldr	r1, [r3, #12]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	b29b      	uxth	r3, r3
 800330e:	4618      	mov	r0, r3
 8003310:	4603      	mov	r3, r0
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	4403      	add	r3, r0
 8003316:	3b1e      	subs	r3, #30
 8003318:	409a      	lsls	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	60da      	str	r2, [r3, #12]
 8003322:	e022      	b.n	800336a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6919      	ldr	r1, [r3, #16]
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	b29b      	uxth	r3, r3
 8003330:	461a      	mov	r2, r3
 8003332:	4613      	mov	r3, r2
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	4413      	add	r3, r2
 8003338:	2207      	movs	r2, #7
 800333a:	fa02 f303 	lsl.w	r3, r2, r3
 800333e:	43da      	mvns	r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	400a      	ands	r2, r1
 8003346:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6919      	ldr	r1, [r3, #16]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	689a      	ldr	r2, [r3, #8]
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	b29b      	uxth	r3, r3
 8003358:	4618      	mov	r0, r3
 800335a:	4603      	mov	r3, r0
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	4403      	add	r3, r0
 8003360:	409a      	lsls	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	430a      	orrs	r2, r1
 8003368:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b06      	cmp	r3, #6
 8003370:	d824      	bhi.n	80033bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685a      	ldr	r2, [r3, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	3b05      	subs	r3, #5
 8003384:	221f      	movs	r2, #31
 8003386:	fa02 f303 	lsl.w	r3, r2, r3
 800338a:	43da      	mvns	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	400a      	ands	r2, r1
 8003392:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	b29b      	uxth	r3, r3
 80033a0:	4618      	mov	r0, r3
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	3b05      	subs	r3, #5
 80033ae:	fa00 f203 	lsl.w	r2, r0, r3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80033ba:	e04c      	b.n	8003456 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	2b0c      	cmp	r3, #12
 80033c2:	d824      	bhi.n	800340e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	3b23      	subs	r3, #35	@ 0x23
 80033d6:	221f      	movs	r2, #31
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	43da      	mvns	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	400a      	ands	r2, r1
 80033e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	4618      	mov	r0, r3
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	3b23      	subs	r3, #35	@ 0x23
 8003400:	fa00 f203 	lsl.w	r2, r0, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	631a      	str	r2, [r3, #48]	@ 0x30
 800340c:	e023      	b.n	8003456 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	3b41      	subs	r3, #65	@ 0x41
 8003420:	221f      	movs	r2, #31
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43da      	mvns	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	400a      	ands	r2, r1
 800342e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	b29b      	uxth	r3, r3
 800343c:	4618      	mov	r0, r3
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	3b41      	subs	r3, #65	@ 0x41
 800344a:	fa00 f203 	lsl.w	r2, r0, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003456:	4b29      	ldr	r3, [pc, #164]	@ (80034fc <HAL_ADC_ConfigChannel+0x250>)
 8003458:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a28      	ldr	r2, [pc, #160]	@ (8003500 <HAL_ADC_ConfigChannel+0x254>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d10f      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x1d8>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b12      	cmp	r3, #18
 800346a:	d10b      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a1d      	ldr	r2, [pc, #116]	@ (8003500 <HAL_ADC_ConfigChannel+0x254>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d12b      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x23a>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a1c      	ldr	r2, [pc, #112]	@ (8003504 <HAL_ADC_ConfigChannel+0x258>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d003      	beq.n	80034a0 <HAL_ADC_ConfigChannel+0x1f4>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b11      	cmp	r3, #17
 800349e:	d122      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a11      	ldr	r2, [pc, #68]	@ (8003504 <HAL_ADC_ConfigChannel+0x258>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d111      	bne.n	80034e6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80034c2:	4b11      	ldr	r3, [pc, #68]	@ (8003508 <HAL_ADC_ConfigChannel+0x25c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a11      	ldr	r2, [pc, #68]	@ (800350c <HAL_ADC_ConfigChannel+0x260>)
 80034c8:	fba2 2303 	umull	r2, r3, r2, r3
 80034cc:	0c9a      	lsrs	r2, r3, #18
 80034ce:	4613      	mov	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	4413      	add	r3, r2
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80034d8:	e002      	b.n	80034e0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	3b01      	subs	r3, #1
 80034de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f9      	bne.n	80034da <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	40012300 	.word	0x40012300
 8003500:	40012000 	.word	0x40012000
 8003504:	10000012 	.word	0x10000012
 8003508:	20000084 	.word	0x20000084
 800350c:	431bde83 	.word	0x431bde83

08003510 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003510:	b480      	push	{r7}
 8003512:	b085      	sub	sp, #20
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003518:	4b79      	ldr	r3, [pc, #484]	@ (8003700 <ADC_Init+0x1f0>)
 800351a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	431a      	orrs	r2, r3
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003544:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6859      	ldr	r1, [r3, #4]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691b      	ldr	r3, [r3, #16]
 8003550:	021a      	lsls	r2, r3, #8
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003568:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6859      	ldr	r1, [r3, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800358a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6899      	ldr	r1, [r3, #8]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a2:	4a58      	ldr	r2, [pc, #352]	@ (8003704 <ADC_Init+0x1f4>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d022      	beq.n	80035ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6899      	ldr	r1, [r3, #8]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	430a      	orrs	r2, r1
 80035c8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80035d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6899      	ldr	r1, [r3, #8]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	609a      	str	r2, [r3, #8]
 80035ec:	e00f      	b.n	800360e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800360c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0202 	bic.w	r2, r2, #2
 800361c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6899      	ldr	r1, [r3, #8]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	7e1b      	ldrb	r3, [r3, #24]
 8003628:	005a      	lsls	r2, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d01b      	beq.n	8003674 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800364a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685a      	ldr	r2, [r3, #4]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800365a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6859      	ldr	r1, [r3, #4]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003666:	3b01      	subs	r3, #1
 8003668:	035a      	lsls	r2, r3, #13
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	e007      	b.n	8003684 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	685a      	ldr	r2, [r3, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003682:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003692:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	3b01      	subs	r3, #1
 80036a0:	051a      	lsls	r2, r3, #20
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	430a      	orrs	r2, r1
 80036a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80036b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	6899      	ldr	r1, [r3, #8]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80036c6:	025a      	lsls	r2, r3, #9
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6899      	ldr	r1, [r3, #8]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	029a      	lsls	r2, r3, #10
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	609a      	str	r2, [r3, #8]
}
 80036f4:	bf00      	nop
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	40012300 	.word	0x40012300
 8003704:	0f000001 	.word	0x0f000001

08003708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003708:	b480      	push	{r7}
 800370a:	b085      	sub	sp, #20
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f003 0307 	and.w	r3, r3, #7
 8003716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003718:	4b0c      	ldr	r3, [pc, #48]	@ (800374c <__NVIC_SetPriorityGrouping+0x44>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003724:	4013      	ands	r3, r2
 8003726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003730:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800373a:	4a04      	ldr	r2, [pc, #16]	@ (800374c <__NVIC_SetPriorityGrouping+0x44>)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	60d3      	str	r3, [r2, #12]
}
 8003740:	bf00      	nop
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	e000ed00 	.word	0xe000ed00

08003750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003754:	4b04      	ldr	r3, [pc, #16]	@ (8003768 <__NVIC_GetPriorityGrouping+0x18>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	0a1b      	lsrs	r3, r3, #8
 800375a:	f003 0307 	and.w	r3, r3, #7
}
 800375e:	4618      	mov	r0, r3
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	e000ed00 	.word	0xe000ed00

0800376c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	4603      	mov	r3, r0
 8003774:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377a:	2b00      	cmp	r3, #0
 800377c:	db0b      	blt.n	8003796 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800377e:	79fb      	ldrb	r3, [r7, #7]
 8003780:	f003 021f 	and.w	r2, r3, #31
 8003784:	4907      	ldr	r1, [pc, #28]	@ (80037a4 <__NVIC_EnableIRQ+0x38>)
 8003786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378a:	095b      	lsrs	r3, r3, #5
 800378c:	2001      	movs	r0, #1
 800378e:	fa00 f202 	lsl.w	r2, r0, r2
 8003792:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003796:	bf00      	nop
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	e000e100 	.word	0xe000e100

080037a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	6039      	str	r1, [r7, #0]
 80037b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	db0a      	blt.n	80037d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	490c      	ldr	r1, [pc, #48]	@ (80037f4 <__NVIC_SetPriority+0x4c>)
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	0112      	lsls	r2, r2, #4
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	440b      	add	r3, r1
 80037cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037d0:	e00a      	b.n	80037e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	4908      	ldr	r1, [pc, #32]	@ (80037f8 <__NVIC_SetPriority+0x50>)
 80037d8:	79fb      	ldrb	r3, [r7, #7]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	3b04      	subs	r3, #4
 80037e0:	0112      	lsls	r2, r2, #4
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	440b      	add	r3, r1
 80037e6:	761a      	strb	r2, [r3, #24]
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr
 80037f4:	e000e100 	.word	0xe000e100
 80037f8:	e000ed00 	.word	0xe000ed00

080037fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b089      	sub	sp, #36	@ 0x24
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f1c3 0307 	rsb	r3, r3, #7
 8003816:	2b04      	cmp	r3, #4
 8003818:	bf28      	it	cs
 800381a:	2304      	movcs	r3, #4
 800381c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	3304      	adds	r3, #4
 8003822:	2b06      	cmp	r3, #6
 8003824:	d902      	bls.n	800382c <NVIC_EncodePriority+0x30>
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	3b03      	subs	r3, #3
 800382a:	e000      	b.n	800382e <NVIC_EncodePriority+0x32>
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003830:	f04f 32ff 	mov.w	r2, #4294967295
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	43da      	mvns	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	401a      	ands	r2, r3
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003844:	f04f 31ff 	mov.w	r1, #4294967295
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	fa01 f303 	lsl.w	r3, r1, r3
 800384e:	43d9      	mvns	r1, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003854:	4313      	orrs	r3, r2
         );
}
 8003856:	4618      	mov	r0, r3
 8003858:	3724      	adds	r7, #36	@ 0x24
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
	...

08003864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3b01      	subs	r3, #1
 8003870:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003874:	d301      	bcc.n	800387a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003876:	2301      	movs	r3, #1
 8003878:	e00f      	b.n	800389a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800387a:	4a0a      	ldr	r2, [pc, #40]	@ (80038a4 <SysTick_Config+0x40>)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3b01      	subs	r3, #1
 8003880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003882:	210f      	movs	r1, #15
 8003884:	f04f 30ff 	mov.w	r0, #4294967295
 8003888:	f7ff ff8e 	bl	80037a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800388c:	4b05      	ldr	r3, [pc, #20]	@ (80038a4 <SysTick_Config+0x40>)
 800388e:	2200      	movs	r2, #0
 8003890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003892:	4b04      	ldr	r3, [pc, #16]	@ (80038a4 <SysTick_Config+0x40>)
 8003894:	2207      	movs	r2, #7
 8003896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	e000e010 	.word	0xe000e010

080038a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7ff ff29 	bl	8003708 <__NVIC_SetPriorityGrouping>
}
 80038b6:	bf00      	nop
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038be:	b580      	push	{r7, lr}
 80038c0:	b086      	sub	sp, #24
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	4603      	mov	r3, r0
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	607a      	str	r2, [r7, #4]
 80038ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038d0:	f7ff ff3e 	bl	8003750 <__NVIC_GetPriorityGrouping>
 80038d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	68b9      	ldr	r1, [r7, #8]
 80038da:	6978      	ldr	r0, [r7, #20]
 80038dc:	f7ff ff8e 	bl	80037fc <NVIC_EncodePriority>
 80038e0:	4602      	mov	r2, r0
 80038e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038e6:	4611      	mov	r1, r2
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff ff5d 	bl	80037a8 <__NVIC_SetPriority>
}
 80038ee:	bf00      	nop
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}

080038f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b082      	sub	sp, #8
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	4603      	mov	r3, r0
 80038fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff ff31 	bl	800376c <__NVIC_EnableIRQ>
}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800391a:	6878      	ldr	r0, [r7, #4]
 800391c:	f7ff ffa2 	bl	8003864 <SysTick_Config>
 8003920:	4603      	mov	r3, r0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b086      	sub	sp, #24
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003934:	2300      	movs	r3, #0
 8003936:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003938:	f7ff fc44 	bl	80031c4 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e099      	b.n	8003a7c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2202      	movs	r2, #2
 800394c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f022 0201 	bic.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003968:	e00f      	b.n	800398a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800396a:	f7ff fc2b 	bl	80031c4 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b05      	cmp	r3, #5
 8003976:	d908      	bls.n	800398a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2220      	movs	r2, #32
 800397c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2203      	movs	r2, #3
 8003982:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e078      	b.n	8003a7c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1e8      	bne.n	800396a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	4b38      	ldr	r3, [pc, #224]	@ (8003a84 <HAL_DMA_Init+0x158>)
 80039a4:	4013      	ands	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80039c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80039ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	4313      	orrs	r3, r2
 80039da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e0:	2b04      	cmp	r3, #4
 80039e2:	d107      	bne.n	80039f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ec:	4313      	orrs	r3, r2
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f023 0307 	bic.w	r3, r3, #7
 8003a0a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1a:	2b04      	cmp	r3, #4
 8003a1c:	d117      	bne.n	8003a4e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00e      	beq.n	8003a4e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 fb0d 	bl	8004050 <DMA_CheckFifoParam>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d008      	beq.n	8003a4e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2240      	movs	r2, #64	@ 0x40
 8003a40:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e016      	b.n	8003a7c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 fac4 	bl	8003fe4 <DMA_CalcBaseAndBitshift>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a64:	223f      	movs	r2, #63	@ 0x3f
 8003a66:	409a      	lsls	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3718      	adds	r7, #24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	f010803f 	.word	0xf010803f

08003a88 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b086      	sub	sp, #24
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	607a      	str	r2, [r7, #4]
 8003a94:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a9e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d101      	bne.n	8003aae <HAL_DMA_Start_IT+0x26>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e040      	b.n	8003b30 <HAL_DMA_Start_IT+0xa8>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2201      	movs	r2, #1
 8003ab2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d12f      	bne.n	8003b22 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	68b9      	ldr	r1, [r7, #8]
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 fa56 	bl	8003f88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ae0:	223f      	movs	r2, #63	@ 0x3f
 8003ae2:	409a      	lsls	r2, r3
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f042 0216 	orr.w	r2, r2, #22
 8003af6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d007      	beq.n	8003b10 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0208 	orr.w	r2, r2, #8
 8003b0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0201 	orr.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	e005      	b.n	8003b2e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003b2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3718      	adds	r7, #24
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b44:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b46:	f7ff fb3d 	bl	80031c4 <HAL_GetTick>
 8003b4a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d008      	beq.n	8003b6a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2280      	movs	r2, #128	@ 0x80
 8003b5c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e052      	b.n	8003c10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0216 	bic.w	r2, r2, #22
 8003b78:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	695a      	ldr	r2, [r3, #20]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b88:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d103      	bne.n	8003b9a <HAL_DMA_Abort+0x62>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d007      	beq.n	8003baa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0208 	bic.w	r2, r2, #8
 8003ba8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0201 	bic.w	r2, r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bba:	e013      	b.n	8003be4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003bbc:	f7ff fb02 	bl	80031c4 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b05      	cmp	r3, #5
 8003bc8:	d90c      	bls.n	8003be4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e015      	b.n	8003c10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1e4      	bne.n	8003bbc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bf6:	223f      	movs	r2, #63	@ 0x3f
 8003bf8:	409a      	lsls	r2, r3
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d004      	beq.n	8003c36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2280      	movs	r2, #128	@ 0x80
 8003c30:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e00c      	b.n	8003c50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2205      	movs	r2, #5
 8003c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0201 	bic.w	r2, r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003c68:	4b8e      	ldr	r3, [pc, #568]	@ (8003ea4 <HAL_DMA_IRQHandler+0x248>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a8e      	ldr	r2, [pc, #568]	@ (8003ea8 <HAL_DMA_IRQHandler+0x24c>)
 8003c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c72:	0a9b      	lsrs	r3, r3, #10
 8003c74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c86:	2208      	movs	r2, #8
 8003c88:	409a      	lsls	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d01a      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d013      	beq.n	8003cc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0204 	bic.w	r2, r2, #4
 8003cae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb4:	2208      	movs	r2, #8
 8003cb6:	409a      	lsls	r2, r3
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc0:	f043 0201 	orr.w	r2, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ccc:	2201      	movs	r2, #1
 8003cce:	409a      	lsls	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d012      	beq.n	8003cfe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00b      	beq.n	8003cfe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cea:	2201      	movs	r2, #1
 8003cec:	409a      	lsls	r2, r3
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf6:	f043 0202 	orr.w	r2, r3, #2
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d02:	2204      	movs	r2, #4
 8003d04:	409a      	lsls	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d012      	beq.n	8003d34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00b      	beq.n	8003d34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d20:	2204      	movs	r2, #4
 8003d22:	409a      	lsls	r2, r3
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d2c:	f043 0204 	orr.w	r2, r3, #4
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d38:	2210      	movs	r2, #16
 8003d3a:	409a      	lsls	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d043      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0308 	and.w	r3, r3, #8
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d03c      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d56:	2210      	movs	r2, #16
 8003d58:	409a      	lsls	r2, r3
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d018      	beq.n	8003d9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d108      	bne.n	8003d8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d024      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	4798      	blx	r3
 8003d8a:	e01f      	b.n	8003dcc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d01b      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	4798      	blx	r3
 8003d9c:	e016      	b.n	8003dcc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d107      	bne.n	8003dbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0208 	bic.w	r2, r2, #8
 8003dba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	409a      	lsls	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 808f 	beq.w	8003efc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0310 	and.w	r3, r3, #16
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	f000 8087 	beq.w	8003efc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df2:	2220      	movs	r2, #32
 8003df4:	409a      	lsls	r2, r3
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b05      	cmp	r3, #5
 8003e04:	d136      	bne.n	8003e74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 0216 	bic.w	r2, r2, #22
 8003e14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695a      	ldr	r2, [r3, #20]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d103      	bne.n	8003e36 <HAL_DMA_IRQHandler+0x1da>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d007      	beq.n	8003e46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0208 	bic.w	r2, r2, #8
 8003e44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e4a:	223f      	movs	r2, #63	@ 0x3f
 8003e4c:	409a      	lsls	r2, r3
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d07e      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	4798      	blx	r3
        }
        return;
 8003e72:	e079      	b.n	8003f68 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d01d      	beq.n	8003ebe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10d      	bne.n	8003eac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d031      	beq.n	8003efc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	4798      	blx	r3
 8003ea0:	e02c      	b.n	8003efc <HAL_DMA_IRQHandler+0x2a0>
 8003ea2:	bf00      	nop
 8003ea4:	20000084 	.word	0x20000084
 8003ea8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d023      	beq.n	8003efc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	4798      	blx	r3
 8003ebc:	e01e      	b.n	8003efc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10f      	bne.n	8003eec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0210 	bic.w	r2, r2, #16
 8003eda:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d032      	beq.n	8003f6a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d022      	beq.n	8003f56 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2205      	movs	r2, #5
 8003f14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f022 0201 	bic.w	r2, r2, #1
 8003f26:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	60bb      	str	r3, [r7, #8]
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d307      	bcc.n	8003f44 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1f2      	bne.n	8003f28 <HAL_DMA_IRQHandler+0x2cc>
 8003f42:	e000      	b.n	8003f46 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003f44:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d005      	beq.n	8003f6a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	4798      	blx	r3
 8003f66:	e000      	b.n	8003f6a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003f68:	bf00      	nop
    }
  }
}
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003fa4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	683a      	ldr	r2, [r7, #0]
 8003fac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2b40      	cmp	r3, #64	@ 0x40
 8003fb4:	d108      	bne.n	8003fc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003fc6:	e007      	b.n	8003fd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	687a      	ldr	r2, [r7, #4]
 8003fd6:	60da      	str	r2, [r3, #12]
}
 8003fd8:	bf00      	nop
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	3b10      	subs	r3, #16
 8003ff4:	4a14      	ldr	r2, [pc, #80]	@ (8004048 <DMA_CalcBaseAndBitshift+0x64>)
 8003ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffa:	091b      	lsrs	r3, r3, #4
 8003ffc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ffe:	4a13      	ldr	r2, [pc, #76]	@ (800404c <DMA_CalcBaseAndBitshift+0x68>)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4413      	add	r3, r2
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b03      	cmp	r3, #3
 8004010:	d909      	bls.n	8004026 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800401a:	f023 0303 	bic.w	r3, r3, #3
 800401e:	1d1a      	adds	r2, r3, #4
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	659a      	str	r2, [r3, #88]	@ 0x58
 8004024:	e007      	b.n	8004036 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800402e:	f023 0303 	bic.w	r3, r3, #3
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800403a:	4618      	mov	r0, r3
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	aaaaaaab 	.word	0xaaaaaaab
 800404c:	0800ce90 	.word	0x0800ce90

08004050 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004058:	2300      	movs	r3, #0
 800405a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004060:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d11f      	bne.n	80040aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2b03      	cmp	r3, #3
 800406e:	d856      	bhi.n	800411e <DMA_CheckFifoParam+0xce>
 8004070:	a201      	add	r2, pc, #4	@ (adr r2, 8004078 <DMA_CheckFifoParam+0x28>)
 8004072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004076:	bf00      	nop
 8004078:	08004089 	.word	0x08004089
 800407c:	0800409b 	.word	0x0800409b
 8004080:	08004089 	.word	0x08004089
 8004084:	0800411f 	.word	0x0800411f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800408c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d046      	beq.n	8004122 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004098:	e043      	b.n	8004122 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800409e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040a2:	d140      	bne.n	8004126 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040a8:	e03d      	b.n	8004126 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040b2:	d121      	bne.n	80040f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b03      	cmp	r3, #3
 80040b8:	d837      	bhi.n	800412a <DMA_CheckFifoParam+0xda>
 80040ba:	a201      	add	r2, pc, #4	@ (adr r2, 80040c0 <DMA_CheckFifoParam+0x70>)
 80040bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c0:	080040d1 	.word	0x080040d1
 80040c4:	080040d7 	.word	0x080040d7
 80040c8:	080040d1 	.word	0x080040d1
 80040cc:	080040e9 	.word	0x080040e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	73fb      	strb	r3, [r7, #15]
      break;
 80040d4:	e030      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d025      	beq.n	800412e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040e6:	e022      	b.n	800412e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040f0:	d11f      	bne.n	8004132 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80040f6:	e01c      	b.n	8004132 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d903      	bls.n	8004106 <DMA_CheckFifoParam+0xb6>
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	2b03      	cmp	r3, #3
 8004102:	d003      	beq.n	800410c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004104:	e018      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	73fb      	strb	r3, [r7, #15]
      break;
 800410a:	e015      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004110:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004114:	2b00      	cmp	r3, #0
 8004116:	d00e      	beq.n	8004136 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	73fb      	strb	r3, [r7, #15]
      break;
 800411c:	e00b      	b.n	8004136 <DMA_CheckFifoParam+0xe6>
      break;
 800411e:	bf00      	nop
 8004120:	e00a      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
      break;
 8004122:	bf00      	nop
 8004124:	e008      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
      break;
 8004126:	bf00      	nop
 8004128:	e006      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
      break;
 800412a:	bf00      	nop
 800412c:	e004      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
      break;
 800412e:	bf00      	nop
 8004130:	e002      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
      break;   
 8004132:	bf00      	nop
 8004134:	e000      	b.n	8004138 <DMA_CheckFifoParam+0xe8>
      break;
 8004136:	bf00      	nop
    }
  } 
  
  return status; 
 8004138:	7bfb      	ldrb	r3, [r7, #15]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop

08004148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004148:	b480      	push	{r7}
 800414a:	b089      	sub	sp, #36	@ 0x24
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004152:	2300      	movs	r3, #0
 8004154:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004156:	2300      	movs	r3, #0
 8004158:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800415a:	2300      	movs	r3, #0
 800415c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800415e:	2300      	movs	r3, #0
 8004160:	61fb      	str	r3, [r7, #28]
 8004162:	e159      	b.n	8004418 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004164:	2201      	movs	r2, #1
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	fa02 f303 	lsl.w	r3, r2, r3
 800416c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	697a      	ldr	r2, [r7, #20]
 8004174:	4013      	ands	r3, r2
 8004176:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004178:	693a      	ldr	r2, [r7, #16]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	429a      	cmp	r2, r3
 800417e:	f040 8148 	bne.w	8004412 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	2b01      	cmp	r3, #1
 800418c:	d005      	beq.n	800419a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004196:	2b02      	cmp	r3, #2
 8004198:	d130      	bne.n	80041fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	2203      	movs	r2, #3
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	43db      	mvns	r3, r3
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	4013      	ands	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	005b      	lsls	r3, r3, #1
 80041ba:	fa02 f303 	lsl.w	r3, r2, r3
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041d0:	2201      	movs	r2, #1
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	fa02 f303 	lsl.w	r3, r2, r3
 80041d8:	43db      	mvns	r3, r3
 80041da:	69ba      	ldr	r2, [r7, #24]
 80041dc:	4013      	ands	r3, r2
 80041de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	091b      	lsrs	r3, r3, #4
 80041e6:	f003 0201 	and.w	r2, r3, #1
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f003 0303 	and.w	r3, r3, #3
 8004204:	2b03      	cmp	r3, #3
 8004206:	d017      	beq.n	8004238 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	2203      	movs	r2, #3
 8004214:	fa02 f303 	lsl.w	r3, r2, r3
 8004218:	43db      	mvns	r3, r3
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4013      	ands	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	689a      	ldr	r2, [r3, #8]
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	4313      	orrs	r3, r2
 8004230:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f003 0303 	and.w	r3, r3, #3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d123      	bne.n	800428c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	08da      	lsrs	r2, r3, #3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	3208      	adds	r2, #8
 800424c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004250:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	220f      	movs	r2, #15
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	43db      	mvns	r3, r3
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	4013      	ands	r3, r2
 8004266:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	fa02 f303 	lsl.w	r3, r2, r3
 8004278:	69ba      	ldr	r2, [r7, #24]
 800427a:	4313      	orrs	r3, r2
 800427c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	08da      	lsrs	r2, r3, #3
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3208      	adds	r2, #8
 8004286:	69b9      	ldr	r1, [r7, #24]
 8004288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	2203      	movs	r2, #3
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	43db      	mvns	r3, r3
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	4013      	ands	r3, r2
 80042a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f003 0203 	and.w	r2, r3, #3
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	fa02 f303 	lsl.w	r3, r2, r3
 80042b4:	69ba      	ldr	r2, [r7, #24]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 80a2 	beq.w	8004412 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	4b57      	ldr	r3, [pc, #348]	@ (8004430 <HAL_GPIO_Init+0x2e8>)
 80042d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d6:	4a56      	ldr	r2, [pc, #344]	@ (8004430 <HAL_GPIO_Init+0x2e8>)
 80042d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80042dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80042de:	4b54      	ldr	r3, [pc, #336]	@ (8004430 <HAL_GPIO_Init+0x2e8>)
 80042e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042ea:	4a52      	ldr	r2, [pc, #328]	@ (8004434 <HAL_GPIO_Init+0x2ec>)
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	089b      	lsrs	r3, r3, #2
 80042f0:	3302      	adds	r3, #2
 80042f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	220f      	movs	r2, #15
 8004302:	fa02 f303 	lsl.w	r3, r2, r3
 8004306:	43db      	mvns	r3, r3
 8004308:	69ba      	ldr	r2, [r7, #24]
 800430a:	4013      	ands	r3, r2
 800430c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a49      	ldr	r2, [pc, #292]	@ (8004438 <HAL_GPIO_Init+0x2f0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d019      	beq.n	800434a <HAL_GPIO_Init+0x202>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a48      	ldr	r2, [pc, #288]	@ (800443c <HAL_GPIO_Init+0x2f4>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d013      	beq.n	8004346 <HAL_GPIO_Init+0x1fe>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a47      	ldr	r2, [pc, #284]	@ (8004440 <HAL_GPIO_Init+0x2f8>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d00d      	beq.n	8004342 <HAL_GPIO_Init+0x1fa>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a46      	ldr	r2, [pc, #280]	@ (8004444 <HAL_GPIO_Init+0x2fc>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d007      	beq.n	800433e <HAL_GPIO_Init+0x1f6>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a45      	ldr	r2, [pc, #276]	@ (8004448 <HAL_GPIO_Init+0x300>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d101      	bne.n	800433a <HAL_GPIO_Init+0x1f2>
 8004336:	2304      	movs	r3, #4
 8004338:	e008      	b.n	800434c <HAL_GPIO_Init+0x204>
 800433a:	2307      	movs	r3, #7
 800433c:	e006      	b.n	800434c <HAL_GPIO_Init+0x204>
 800433e:	2303      	movs	r3, #3
 8004340:	e004      	b.n	800434c <HAL_GPIO_Init+0x204>
 8004342:	2302      	movs	r3, #2
 8004344:	e002      	b.n	800434c <HAL_GPIO_Init+0x204>
 8004346:	2301      	movs	r3, #1
 8004348:	e000      	b.n	800434c <HAL_GPIO_Init+0x204>
 800434a:	2300      	movs	r3, #0
 800434c:	69fa      	ldr	r2, [r7, #28]
 800434e:	f002 0203 	and.w	r2, r2, #3
 8004352:	0092      	lsls	r2, r2, #2
 8004354:	4093      	lsls	r3, r2
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	4313      	orrs	r3, r2
 800435a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800435c:	4935      	ldr	r1, [pc, #212]	@ (8004434 <HAL_GPIO_Init+0x2ec>)
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	089b      	lsrs	r3, r3, #2
 8004362:	3302      	adds	r3, #2
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800436a:	4b38      	ldr	r3, [pc, #224]	@ (800444c <HAL_GPIO_Init+0x304>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	43db      	mvns	r3, r3
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	4013      	ands	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800438e:	4a2f      	ldr	r2, [pc, #188]	@ (800444c <HAL_GPIO_Init+0x304>)
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004394:	4b2d      	ldr	r3, [pc, #180]	@ (800444c <HAL_GPIO_Init+0x304>)
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	43db      	mvns	r3, r3
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	4013      	ands	r3, r2
 80043a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d003      	beq.n	80043b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043b8:	4a24      	ldr	r2, [pc, #144]	@ (800444c <HAL_GPIO_Init+0x304>)
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80043be:	4b23      	ldr	r3, [pc, #140]	@ (800444c <HAL_GPIO_Init+0x304>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	43db      	mvns	r3, r3
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	4013      	ands	r3, r2
 80043cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d003      	beq.n	80043e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	4313      	orrs	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043e2:	4a1a      	ldr	r2, [pc, #104]	@ (800444c <HAL_GPIO_Init+0x304>)
 80043e4:	69bb      	ldr	r3, [r7, #24]
 80043e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043e8:	4b18      	ldr	r3, [pc, #96]	@ (800444c <HAL_GPIO_Init+0x304>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	43db      	mvns	r3, r3
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4013      	ands	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004404:	69ba      	ldr	r2, [r7, #24]
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800440c:	4a0f      	ldr	r2, [pc, #60]	@ (800444c <HAL_GPIO_Init+0x304>)
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	3301      	adds	r3, #1
 8004416:	61fb      	str	r3, [r7, #28]
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	2b0f      	cmp	r3, #15
 800441c:	f67f aea2 	bls.w	8004164 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004420:	bf00      	nop
 8004422:	bf00      	nop
 8004424:	3724      	adds	r7, #36	@ 0x24
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40023800 	.word	0x40023800
 8004434:	40013800 	.word	0x40013800
 8004438:	40020000 	.word	0x40020000
 800443c:	40020400 	.word	0x40020400
 8004440:	40020800 	.word	0x40020800
 8004444:	40020c00 	.word	0x40020c00
 8004448:	40021000 	.word	0x40021000
 800444c:	40013c00 	.word	0x40013c00

08004450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	460b      	mov	r3, r1
 800445a:	807b      	strh	r3, [r7, #2]
 800445c:	4613      	mov	r3, r2
 800445e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004460:	787b      	ldrb	r3, [r7, #1]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004466:	887a      	ldrh	r2, [r7, #2]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800446c:	e003      	b.n	8004476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800446e:	887b      	ldrh	r3, [r7, #2]
 8004470:	041a      	lsls	r2, r3, #16
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	619a      	str	r2, [r3, #24]
}
 8004476:	bf00      	nop
 8004478:	370c      	adds	r7, #12
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
	...

08004484 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d101      	bne.n	8004496 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e12b      	b.n	80046ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d106      	bne.n	80044b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7fe f9b0 	bl	8002810 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2224      	movs	r2, #36	@ 0x24
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0201 	bic.w	r2, r2, #1
 80044c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044e8:	f001 fe4a 	bl	8006180 <HAL_RCC_GetPCLK1Freq>
 80044ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	4a81      	ldr	r2, [pc, #516]	@ (80046f8 <HAL_I2C_Init+0x274>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d807      	bhi.n	8004508 <HAL_I2C_Init+0x84>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4a80      	ldr	r2, [pc, #512]	@ (80046fc <HAL_I2C_Init+0x278>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	bf94      	ite	ls
 8004500:	2301      	movls	r3, #1
 8004502:	2300      	movhi	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	e006      	b.n	8004516 <HAL_I2C_Init+0x92>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4a7d      	ldr	r2, [pc, #500]	@ (8004700 <HAL_I2C_Init+0x27c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	bf94      	ite	ls
 8004510:	2301      	movls	r3, #1
 8004512:	2300      	movhi	r3, #0
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e0e7      	b.n	80046ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	4a78      	ldr	r2, [pc, #480]	@ (8004704 <HAL_I2C_Init+0x280>)
 8004522:	fba2 2303 	umull	r2, r3, r2, r3
 8004526:	0c9b      	lsrs	r3, r3, #18
 8004528:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	430a      	orrs	r2, r1
 800453c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	4a6a      	ldr	r2, [pc, #424]	@ (80046f8 <HAL_I2C_Init+0x274>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d802      	bhi.n	8004558 <HAL_I2C_Init+0xd4>
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	3301      	adds	r3, #1
 8004556:	e009      	b.n	800456c <HAL_I2C_Init+0xe8>
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800455e:	fb02 f303 	mul.w	r3, r2, r3
 8004562:	4a69      	ldr	r2, [pc, #420]	@ (8004708 <HAL_I2C_Init+0x284>)
 8004564:	fba2 2303 	umull	r2, r3, r2, r3
 8004568:	099b      	lsrs	r3, r3, #6
 800456a:	3301      	adds	r3, #1
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6812      	ldr	r2, [r2, #0]
 8004570:	430b      	orrs	r3, r1
 8004572:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800457e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	495c      	ldr	r1, [pc, #368]	@ (80046f8 <HAL_I2C_Init+0x274>)
 8004588:	428b      	cmp	r3, r1
 800458a:	d819      	bhi.n	80045c0 <HAL_I2C_Init+0x13c>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	1e59      	subs	r1, r3, #1
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	fbb1 f3f3 	udiv	r3, r1, r3
 800459a:	1c59      	adds	r1, r3, #1
 800459c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80045a0:	400b      	ands	r3, r1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <HAL_I2C_Init+0x138>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	1e59      	subs	r1, r3, #1
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	005b      	lsls	r3, r3, #1
 80045b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80045b4:	3301      	adds	r3, #1
 80045b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ba:	e051      	b.n	8004660 <HAL_I2C_Init+0x1dc>
 80045bc:	2304      	movs	r3, #4
 80045be:	e04f      	b.n	8004660 <HAL_I2C_Init+0x1dc>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d111      	bne.n	80045ec <HAL_I2C_Init+0x168>
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	1e58      	subs	r0, r3, #1
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6859      	ldr	r1, [r3, #4]
 80045d0:	460b      	mov	r3, r1
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	440b      	add	r3, r1
 80045d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80045da:	3301      	adds	r3, #1
 80045dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	bf0c      	ite	eq
 80045e4:	2301      	moveq	r3, #1
 80045e6:	2300      	movne	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	e012      	b.n	8004612 <HAL_I2C_Init+0x18e>
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	1e58      	subs	r0, r3, #1
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6859      	ldr	r1, [r3, #4]
 80045f4:	460b      	mov	r3, r1
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	440b      	add	r3, r1
 80045fa:	0099      	lsls	r1, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004602:	3301      	adds	r3, #1
 8004604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004608:	2b00      	cmp	r3, #0
 800460a:	bf0c      	ite	eq
 800460c:	2301      	moveq	r3, #1
 800460e:	2300      	movne	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <HAL_I2C_Init+0x196>
 8004616:	2301      	movs	r3, #1
 8004618:	e022      	b.n	8004660 <HAL_I2C_Init+0x1dc>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10e      	bne.n	8004640 <HAL_I2C_Init+0x1bc>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	1e58      	subs	r0, r3, #1
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6859      	ldr	r1, [r3, #4]
 800462a:	460b      	mov	r3, r1
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	440b      	add	r3, r1
 8004630:	fbb0 f3f3 	udiv	r3, r0, r3
 8004634:	3301      	adds	r3, #1
 8004636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800463a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800463e:	e00f      	b.n	8004660 <HAL_I2C_Init+0x1dc>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	1e58      	subs	r0, r3, #1
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6859      	ldr	r1, [r3, #4]
 8004648:	460b      	mov	r3, r1
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	0099      	lsls	r1, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	fbb0 f3f3 	udiv	r3, r0, r3
 8004656:	3301      	adds	r3, #1
 8004658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800465c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004660:	6879      	ldr	r1, [r7, #4]
 8004662:	6809      	ldr	r1, [r1, #0]
 8004664:	4313      	orrs	r3, r2
 8004666:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	69da      	ldr	r2, [r3, #28]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800468e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004692:	687a      	ldr	r2, [r7, #4]
 8004694:	6911      	ldr	r1, [r2, #16]
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	68d2      	ldr	r2, [r2, #12]
 800469a:	4311      	orrs	r1, r2
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	6812      	ldr	r2, [r2, #0]
 80046a0:	430b      	orrs	r3, r1
 80046a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	695a      	ldr	r2, [r3, #20]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	430a      	orrs	r2, r1
 80046be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0201 	orr.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2220      	movs	r2, #32
 80046da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80046ec:	2300      	movs	r3, #0
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	000186a0 	.word	0x000186a0
 80046fc:	001e847f 	.word	0x001e847f
 8004700:	003d08ff 	.word	0x003d08ff
 8004704:	431bde83 	.word	0x431bde83
 8004708:	10624dd3 	.word	0x10624dd3

0800470c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08c      	sub	sp, #48	@ 0x30
 8004710:	af02      	add	r7, sp, #8
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	4608      	mov	r0, r1
 8004716:	4611      	mov	r1, r2
 8004718:	461a      	mov	r2, r3
 800471a:	4603      	mov	r3, r0
 800471c:	817b      	strh	r3, [r7, #10]
 800471e:	460b      	mov	r3, r1
 8004720:	813b      	strh	r3, [r7, #8]
 8004722:	4613      	mov	r3, r2
 8004724:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004726:	f7fe fd4d 	bl	80031c4 <HAL_GetTick>
 800472a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b20      	cmp	r3, #32
 8004736:	f040 8214 	bne.w	8004b62 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800473a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	2319      	movs	r3, #25
 8004740:	2201      	movs	r2, #1
 8004742:	497b      	ldr	r1, [pc, #492]	@ (8004930 <HAL_I2C_Mem_Read+0x224>)
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f000 fefd 	bl	8005544 <I2C_WaitOnFlagUntilTimeout>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004750:	2302      	movs	r3, #2
 8004752:	e207      	b.n	8004b64 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800475a:	2b01      	cmp	r3, #1
 800475c:	d101      	bne.n	8004762 <HAL_I2C_Mem_Read+0x56>
 800475e:	2302      	movs	r3, #2
 8004760:	e200      	b.n	8004b64 <HAL_I2C_Mem_Read+0x458>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b01      	cmp	r3, #1
 8004776:	d007      	beq.n	8004788 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f042 0201 	orr.w	r2, r2, #1
 8004786:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004796:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2222      	movs	r2, #34	@ 0x22
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2240      	movs	r2, #64	@ 0x40
 80047a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80047b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047be:	b29a      	uxth	r2, r3
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4a5b      	ldr	r2, [pc, #364]	@ (8004934 <HAL_I2C_Mem_Read+0x228>)
 80047c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047ca:	88f8      	ldrh	r0, [r7, #6]
 80047cc:	893a      	ldrh	r2, [r7, #8]
 80047ce:	8979      	ldrh	r1, [r7, #10]
 80047d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d2:	9301      	str	r3, [sp, #4]
 80047d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d6:	9300      	str	r3, [sp, #0]
 80047d8:	4603      	mov	r3, r0
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f000 fcae 	bl	800513c <I2C_RequestMemoryRead>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e1bc      	b.n	8004b64 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d113      	bne.n	800481a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047f2:	2300      	movs	r3, #0
 80047f4:	623b      	str	r3, [r7, #32]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	623b      	str	r3, [r7, #32]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	623b      	str	r3, [r7, #32]
 8004806:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	e190      	b.n	8004b3c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800481e:	2b01      	cmp	r3, #1
 8004820:	d11b      	bne.n	800485a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004830:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004832:	2300      	movs	r3, #0
 8004834:	61fb      	str	r3, [r7, #28]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	61fb      	str	r3, [r7, #28]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	61fb      	str	r3, [r7, #28]
 8004846:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	e170      	b.n	8004b3c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800485e:	2b02      	cmp	r3, #2
 8004860:	d11b      	bne.n	800489a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004870:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004880:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004882:	2300      	movs	r3, #0
 8004884:	61bb      	str	r3, [r7, #24]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	61bb      	str	r3, [r7, #24]
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	e150      	b.n	8004b3c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800489a:	2300      	movs	r3, #0
 800489c:	617b      	str	r3, [r7, #20]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	695b      	ldr	r3, [r3, #20]
 80048a4:	617b      	str	r3, [r7, #20]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	617b      	str	r3, [r7, #20]
 80048ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80048b0:	e144      	b.n	8004b3c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	f200 80f1 	bhi.w	8004a9e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d123      	bne.n	800490c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048c6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 ff9d 	bl	8005808 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e145      	b.n	8004b64 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	691a      	ldr	r2, [r3, #16]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ea:	1c5a      	adds	r2, r3, #1
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004900:	b29b      	uxth	r3, r3
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800490a:	e117      	b.n	8004b3c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004910:	2b02      	cmp	r3, #2
 8004912:	d14e      	bne.n	80049b2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004916:	9300      	str	r3, [sp, #0]
 8004918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800491a:	2200      	movs	r2, #0
 800491c:	4906      	ldr	r1, [pc, #24]	@ (8004938 <HAL_I2C_Mem_Read+0x22c>)
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f000 fe10 	bl	8005544 <I2C_WaitOnFlagUntilTimeout>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d008      	beq.n	800493c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e11a      	b.n	8004b64 <HAL_I2C_Mem_Read+0x458>
 800492e:	bf00      	nop
 8004930:	00100002 	.word	0x00100002
 8004934:	ffff0000 	.word	0xffff0000
 8004938:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800494a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691a      	ldr	r2, [r3, #16]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004968:	3b01      	subs	r3, #1
 800496a:	b29a      	uxth	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	691a      	ldr	r2, [r3, #16]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004988:	b2d2      	uxtb	r2, r2
 800498a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800499a:	3b01      	subs	r3, #1
 800499c:	b29a      	uxth	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80049b0:	e0c4      	b.n	8004b3c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b8:	2200      	movs	r2, #0
 80049ba:	496c      	ldr	r1, [pc, #432]	@ (8004b6c <HAL_I2C_Mem_Read+0x460>)
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 fdc1 	bl	8005544 <I2C_WaitOnFlagUntilTimeout>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e0cb      	b.n	8004b64 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691a      	ldr	r2, [r3, #16]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a14:	2200      	movs	r2, #0
 8004a16:	4955      	ldr	r1, [pc, #340]	@ (8004b6c <HAL_I2C_Mem_Read+0x460>)
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 fd93 	bl	8005544 <I2C_WaitOnFlagUntilTimeout>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e09d      	b.n	8004b64 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691a      	ldr	r2, [r3, #16]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4a:	1c5a      	adds	r2, r3, #1
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a54:	3b01      	subs	r3, #1
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a60:	b29b      	uxth	r3, r3
 8004a62:	3b01      	subs	r3, #1
 8004a64:	b29a      	uxth	r2, r3
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	691a      	ldr	r2, [r3, #16]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a74:	b2d2      	uxtb	r2, r2
 8004a76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a86:	3b01      	subs	r3, #1
 8004a88:	b29a      	uxth	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a9c:	e04e      	b.n	8004b3c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aa0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f000 feb0 	bl	8005808 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e058      	b.n	8004b64 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	691a      	ldr	r2, [r3, #16]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abc:	b2d2      	uxtb	r2, r2
 8004abe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac4:	1c5a      	adds	r2, r3, #1
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	3b01      	subs	r3, #1
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	f003 0304 	and.w	r3, r3, #4
 8004aee:	2b04      	cmp	r3, #4
 8004af0:	d124      	bne.n	8004b3c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004af6:	2b03      	cmp	r3, #3
 8004af8:	d107      	bne.n	8004b0a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b08:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	691a      	ldr	r2, [r3, #16]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b14:	b2d2      	uxtb	r2, r2
 8004b16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b26:	3b01      	subs	r3, #1
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	3b01      	subs	r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	f47f aeb6 	bne.w	80048b2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	e000      	b.n	8004b64 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004b62:	2302      	movs	r3, #2
  }
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3728      	adds	r7, #40	@ 0x28
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	00010004 	.word	0x00010004

08004b70 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08c      	sub	sp, #48	@ 0x30
 8004b74:	af02      	add	r7, sp, #8
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	4608      	mov	r0, r1
 8004b7a:	4611      	mov	r1, r2
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	4603      	mov	r3, r0
 8004b80:	817b      	strh	r3, [r7, #10]
 8004b82:	460b      	mov	r3, r1
 8004b84:	813b      	strh	r3, [r7, #8]
 8004b86:	4613      	mov	r3, r2
 8004b88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b8a:	f7fe fb1b 	bl	80031c4 <HAL_GetTick>
 8004b8e:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	2b20      	cmp	r3, #32
 8004b9e:	f040 8172 	bne.w	8004e86 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ba2:	4b93      	ldr	r3, [pc, #588]	@ (8004df0 <HAL_I2C_Mem_Read_DMA+0x280>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	08db      	lsrs	r3, r3, #3
 8004ba8:	4a92      	ldr	r2, [pc, #584]	@ (8004df4 <HAL_I2C_Mem_Read_DMA+0x284>)
 8004baa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bae:	0a1a      	lsrs	r2, r3, #8
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	009a      	lsls	r2, r3, #2
 8004bb8:	4413      	add	r3, r2
 8004bba:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d112      	bne.n	8004bee <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be2:	f043 0220 	orr.w	r2, r3, #32
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8004bea:	2302      	movs	r3, #2
 8004bec:	e14c      	b.n	8004e88 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b02      	cmp	r3, #2
 8004bfa:	d0df      	beq.n	8004bbc <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d101      	bne.n	8004c0a <HAL_I2C_Mem_Read_DMA+0x9a>
 8004c06:	2302      	movs	r3, #2
 8004c08:	e13e      	b.n	8004e88 <HAL_I2C_Mem_Read_DMA+0x318>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d007      	beq.n	8004c30 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f042 0201 	orr.w	r2, r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2222      	movs	r2, #34	@ 0x22
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2240      	movs	r2, #64	@ 0x40
 8004c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004c60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c66:	b29a      	uxth	r2, r3
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4a62      	ldr	r2, [pc, #392]	@ (8004df8 <HAL_I2C_Mem_Read_DMA+0x288>)
 8004c70:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8004c72:	897a      	ldrh	r2, [r7, #10]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8004c78:	893a      	ldrh	r2, [r7, #8]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004c7e:	88fa      	ldrh	r2, [r7, #6]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 80cc 	beq.w	8004e2c <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d02d      	beq.n	8004cf8 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca0:	4a56      	ldr	r2, [pc, #344]	@ (8004dfc <HAL_I2C_Mem_Read_DMA+0x28c>)
 8004ca2:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca8:	4a55      	ldr	r2, [pc, #340]	@ (8004e00 <HAL_I2C_Mem_Read_DMA+0x290>)
 8004caa:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb8:	2200      	movs	r2, #0
 8004cba:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc8:	2200      	movs	r2, #0
 8004cca:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	3310      	adds	r3, #16
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cdc:	461a      	mov	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ce2:	f7fe fed1 	bl	8003a88 <HAL_DMA_Start_IT>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004cec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f040 8087 	bne.w	8004e04 <HAL_I2C_Mem_Read_DMA+0x294>
 8004cf6:	e013      	b.n	8004d20 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d0c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e0b3      	b.n	8004e88 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004d20:	88f8      	ldrh	r0, [r7, #6]
 8004d22:	893a      	ldrh	r2, [r7, #8]
 8004d24:	8979      	ldrh	r1, [r7, #10]
 8004d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d28:	9301      	str	r3, [sp, #4]
 8004d2a:	2323      	movs	r3, #35	@ 0x23
 8004d2c:	9300      	str	r3, [sp, #0]
 8004d2e:	4603      	mov	r3, r0
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 fa03 	bl	800513c <I2C_RequestMemoryRead>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d023      	beq.n	8004d84 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d40:	4618      	mov	r0, r3
 8004d42:	f7fe ff69 	bl	8003c18 <HAL_DMA_Abort_IT>
 8004d46:	4603      	mov	r3, r0
 8004d48:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d50:	2200      	movs	r2, #0
 8004d52:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d62:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 0201 	bic.w	r2, r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e081      	b.n	8004e88 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d108      	bne.n	8004d9e <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d9a:	601a      	str	r2, [r3, #0]
 8004d9c:	e007      	b.n	8004dae <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685a      	ldr	r2, [r3, #4]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004dac:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dae:	2300      	movs	r3, #0
 8004db0:	61bb      	str	r3, [r7, #24]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	695b      	ldr	r3, [r3, #20]
 8004db8:	61bb      	str	r3, [r7, #24]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	61bb      	str	r3, [r7, #24]
 8004dc2:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004dda:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dea:	605a      	str	r2, [r3, #4]
 8004dec:	e049      	b.n	8004e82 <HAL_I2C_Mem_Read_DMA+0x312>
 8004dee:	bf00      	nop
 8004df0:	20000084 	.word	0x20000084
 8004df4:	14f8b589 	.word	0x14f8b589
 8004df8:	ffff0000 	.word	0xffff0000
 8004dfc:	0800530d 	.word	0x0800530d
 8004e00:	080054cb 	.word	0x080054cb
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e18:	f043 0210 	orr.w	r2, r3, #16
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e02d      	b.n	8004e88 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004e2c:	88f8      	ldrh	r0, [r7, #6]
 8004e2e:	893a      	ldrh	r2, [r7, #8]
 8004e30:	8979      	ldrh	r1, [r7, #10]
 8004e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e34:	9301      	str	r3, [sp, #4]
 8004e36:	2323      	movs	r3, #35	@ 0x23
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 f97d 	bl	800513c <I2C_RequestMemoryRead>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e01d      	b.n	8004e88 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	617b      	str	r3, [r7, #20]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	695b      	ldr	r3, [r3, #20]
 8004e56:	617b      	str	r3, [r7, #20]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	617b      	str	r3, [r7, #20]
 8004e60:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e70:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8004e82:	2300      	movs	r3, #0
 8004e84:	e000      	b.n	8004e88 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8004e86:	2302      	movs	r3, #2
  }
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3728      	adds	r7, #40	@ 0x28
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08a      	sub	sp, #40	@ 0x28
 8004e94:	af02      	add	r7, sp, #8
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	607a      	str	r2, [r7, #4]
 8004e9a:	603b      	str	r3, [r7, #0]
 8004e9c:	460b      	mov	r3, r1
 8004e9e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004ea0:	f7fe f990 	bl	80031c4 <HAL_GetTick>
 8004ea4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	2b20      	cmp	r3, #32
 8004eb4:	f040 8111 	bne.w	80050da <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	2319      	movs	r3, #25
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	4988      	ldr	r1, [pc, #544]	@ (80050e4 <HAL_I2C_IsDeviceReady+0x254>)
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 fb3e 	bl	8005544 <I2C_WaitOnFlagUntilTimeout>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d001      	beq.n	8004ed2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004ece:	2302      	movs	r3, #2
 8004ed0:	e104      	b.n	80050dc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d101      	bne.n	8004ee0 <HAL_I2C_IsDeviceReady+0x50>
 8004edc:	2302      	movs	r3, #2
 8004ede:	e0fd      	b.n	80050dc <HAL_I2C_IsDeviceReady+0x24c>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d007      	beq.n	8004f06 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f042 0201 	orr.w	r2, r2, #1
 8004f04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2224      	movs	r2, #36	@ 0x24
 8004f1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	4a70      	ldr	r2, [pc, #448]	@ (80050e8 <HAL_I2C_IsDeviceReady+0x258>)
 8004f28:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f38:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	9300      	str	r3, [sp, #0]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f000 fafc 	bl	8005544 <I2C_WaitOnFlagUntilTimeout>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00d      	beq.n	8004f6e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f60:	d103      	bne.n	8004f6a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004f68:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e0b6      	b.n	80050dc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f6e:	897b      	ldrh	r3, [r7, #10]
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	461a      	mov	r2, r3
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004f7c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004f7e:	f7fe f921 	bl	80031c4 <HAL_GetTick>
 8004f82:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695b      	ldr	r3, [r3, #20]
 8004f8a:	f003 0302 	and.w	r3, r3, #2
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	bf0c      	ite	eq
 8004f92:	2301      	moveq	r3, #1
 8004f94:	2300      	movne	r3, #0
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fa8:	bf0c      	ite	eq
 8004faa:	2301      	moveq	r3, #1
 8004fac:	2300      	movne	r3, #0
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004fb2:	e025      	b.n	8005000 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004fb4:	f7fe f906 	bl	80031c4 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d302      	bcc.n	8004fca <HAL_I2C_IsDeviceReady+0x13a>
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d103      	bne.n	8004fd2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	22a0      	movs	r2, #160	@ 0xa0
 8004fce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	bf0c      	ite	eq
 8004fe0:	2301      	moveq	r3, #1
 8004fe2:	2300      	movne	r3, #0
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ff2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ff6:	bf0c      	ite	eq
 8004ff8:	2301      	moveq	r3, #1
 8004ffa:	2300      	movne	r3, #0
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2ba0      	cmp	r3, #160	@ 0xa0
 800500a:	d005      	beq.n	8005018 <HAL_I2C_IsDeviceReady+0x188>
 800500c:	7dfb      	ldrb	r3, [r7, #23]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d102      	bne.n	8005018 <HAL_I2C_IsDeviceReady+0x188>
 8005012:	7dbb      	ldrb	r3, [r7, #22]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d0cd      	beq.n	8004fb4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2220      	movs	r2, #32
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	2b02      	cmp	r3, #2
 800502c:	d129      	bne.n	8005082 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800503c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800503e:	2300      	movs	r3, #0
 8005040:	613b      	str	r3, [r7, #16]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	613b      	str	r3, [r7, #16]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	613b      	str	r3, [r7, #16]
 8005052:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	9300      	str	r3, [sp, #0]
 8005058:	2319      	movs	r3, #25
 800505a:	2201      	movs	r2, #1
 800505c:	4921      	ldr	r1, [pc, #132]	@ (80050e4 <HAL_I2C_IsDeviceReady+0x254>)
 800505e:	68f8      	ldr	r0, [r7, #12]
 8005060:	f000 fa70 	bl	8005544 <I2C_WaitOnFlagUntilTimeout>
 8005064:	4603      	mov	r3, r0
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e036      	b.n	80050dc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2220      	movs	r2, #32
 8005072:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800507e:	2300      	movs	r3, #0
 8005080:	e02c      	b.n	80050dc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005090:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800509a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	2319      	movs	r3, #25
 80050a2:	2201      	movs	r2, #1
 80050a4:	490f      	ldr	r1, [pc, #60]	@ (80050e4 <HAL_I2C_IsDeviceReady+0x254>)
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 fa4c 	bl	8005544 <I2C_WaitOnFlagUntilTimeout>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d001      	beq.n	80050b6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e012      	b.n	80050dc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	3301      	adds	r3, #1
 80050ba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	f4ff af32 	bcc.w	8004f2a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2220      	movs	r2, #32
 80050ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e000      	b.n	80050dc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80050da:	2302      	movs	r3, #2
  }
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3720      	adds	r7, #32
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	00100002 	.word	0x00100002
 80050e8:	ffff0000 	.word	0xffff0000

080050ec <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80050f4:	bf00      	nop
 80050f6:	370c      	adds	r7, #12
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af02      	add	r7, sp, #8
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	4608      	mov	r0, r1
 8005146:	4611      	mov	r1, r2
 8005148:	461a      	mov	r2, r3
 800514a:	4603      	mov	r3, r0
 800514c:	817b      	strh	r3, [r7, #10]
 800514e:	460b      	mov	r3, r1
 8005150:	813b      	strh	r3, [r7, #8]
 8005152:	4613      	mov	r3, r2
 8005154:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005164:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005174:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	6a3b      	ldr	r3, [r7, #32]
 800517c:	2200      	movs	r2, #0
 800517e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 f9de 	bl	8005544 <I2C_WaitOnFlagUntilTimeout>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00d      	beq.n	80051aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005198:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800519c:	d103      	bne.n	80051a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051a4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e0aa      	b.n	8005300 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051aa:	897b      	ldrh	r3, [r7, #10]
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	461a      	mov	r2, r3
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80051b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	6a3a      	ldr	r2, [r7, #32]
 80051be:	4952      	ldr	r1, [pc, #328]	@ (8005308 <I2C_RequestMemoryRead+0x1cc>)
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f000 fa39 	bl	8005638 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	e097      	b.n	8005300 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051d0:	2300      	movs	r3, #0
 80051d2:	617b      	str	r3, [r7, #20]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	617b      	str	r3, [r7, #20]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	617b      	str	r3, [r7, #20]
 80051e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80051e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051e8:	6a39      	ldr	r1, [r7, #32]
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 fac4 	bl	8005778 <I2C_WaitOnTXEFlagUntilTimeout>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00d      	beq.n	8005212 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fa:	2b04      	cmp	r3, #4
 80051fc:	d107      	bne.n	800520e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800520c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e076      	b.n	8005300 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005212:	88fb      	ldrh	r3, [r7, #6]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d105      	bne.n	8005224 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005218:	893b      	ldrh	r3, [r7, #8]
 800521a:	b2da      	uxtb	r2, r3
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	611a      	str	r2, [r3, #16]
 8005222:	e021      	b.n	8005268 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005224:	893b      	ldrh	r3, [r7, #8]
 8005226:	0a1b      	lsrs	r3, r3, #8
 8005228:	b29b      	uxth	r3, r3
 800522a:	b2da      	uxtb	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005232:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005234:	6a39      	ldr	r1, [r7, #32]
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 fa9e 	bl	8005778 <I2C_WaitOnTXEFlagUntilTimeout>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00d      	beq.n	800525e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005246:	2b04      	cmp	r3, #4
 8005248:	d107      	bne.n	800525a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005258:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e050      	b.n	8005300 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800525e:	893b      	ldrh	r3, [r7, #8]
 8005260:	b2da      	uxtb	r2, r3
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800526a:	6a39      	ldr	r1, [r7, #32]
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f000 fa83 	bl	8005778 <I2C_WaitOnTXEFlagUntilTimeout>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00d      	beq.n	8005294 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527c:	2b04      	cmp	r3, #4
 800527e:	d107      	bne.n	8005290 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800528e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e035      	b.n	8005300 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 f947 	bl	8005544 <I2C_WaitOnFlagUntilTimeout>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00d      	beq.n	80052d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052ca:	d103      	bne.n	80052d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80052d4:	2303      	movs	r3, #3
 80052d6:	e013      	b.n	8005300 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80052d8:	897b      	ldrh	r3, [r7, #10]
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	f043 0301 	orr.w	r3, r3, #1
 80052e0:	b2da      	uxtb	r2, r3
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ea:	6a3a      	ldr	r2, [r7, #32]
 80052ec:	4906      	ldr	r1, [pc, #24]	@ (8005308 <I2C_RequestMemoryRead+0x1cc>)
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 f9a2 	bl	8005638 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e000      	b.n	8005300 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3718      	adds	r7, #24
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	00010002 	.word	0x00010002

0800530c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005318:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005320:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005328:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800533e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005344:	2b00      	cmp	r3, #0
 8005346:	d003      	beq.n	8005350 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800534c:	2200      	movs	r2, #0
 800534e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005354:	2b00      	cmp	r3, #0
 8005356:	d003      	beq.n	8005360 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800535c:	2200      	movs	r2, #0
 800535e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005360:	7cfb      	ldrb	r3, [r7, #19]
 8005362:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005366:	2b21      	cmp	r3, #33	@ 0x21
 8005368:	d007      	beq.n	800537a <I2C_DMAXferCplt+0x6e>
 800536a:	7cfb      	ldrb	r3, [r7, #19]
 800536c:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8005370:	2b22      	cmp	r3, #34	@ 0x22
 8005372:	d131      	bne.n	80053d8 <I2C_DMAXferCplt+0xcc>
 8005374:	7cbb      	ldrb	r3, [r7, #18]
 8005376:	2b20      	cmp	r3, #32
 8005378:	d12e      	bne.n	80053d8 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685a      	ldr	r2, [r3, #4]
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005388:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2200      	movs	r2, #0
 800538e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005390:	7cfb      	ldrb	r3, [r7, #19]
 8005392:	2b29      	cmp	r3, #41	@ 0x29
 8005394:	d10a      	bne.n	80053ac <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2221      	movs	r2, #33	@ 0x21
 800539a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	2228      	movs	r2, #40	@ 0x28
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80053a4:	6978      	ldr	r0, [r7, #20]
 80053a6:	f7ff feab 	bl	8005100 <HAL_I2C_SlaveTxCpltCallback>
 80053aa:	e00c      	b.n	80053c6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80053ac:	7cfb      	ldrb	r3, [r7, #19]
 80053ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80053b0:	d109      	bne.n	80053c6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	2222      	movs	r2, #34	@ 0x22
 80053b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	2228      	movs	r2, #40	@ 0x28
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053c0:	6978      	ldr	r0, [r7, #20]
 80053c2:	f7ff fea7 	bl	8005114 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80053d4:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80053d6:	e074      	b.n	80054c2 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d06e      	beq.n	80054c2 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d107      	bne.n	80053fe <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053fc:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	685a      	ldr	r2, [r3, #4]
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800540c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005414:	d009      	beq.n	800542a <I2C_DMAXferCplt+0x11e>
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2b08      	cmp	r3, #8
 800541a:	d006      	beq.n	800542a <I2C_DMAXferCplt+0x11e>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005422:	d002      	beq.n	800542a <I2C_DMAXferCplt+0x11e>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2b20      	cmp	r3, #32
 8005428:	d107      	bne.n	800543a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005438:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005448:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685a      	ldr	r2, [r3, #4]
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005458:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	2200      	movs	r2, #0
 800545e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005468:	6978      	ldr	r0, [r7, #20]
 800546a:	f7ff fe5d 	bl	8005128 <HAL_I2C_ErrorCallback>
}
 800546e:	e028      	b.n	80054c2 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	2220      	movs	r2, #32
 8005474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b40      	cmp	r3, #64	@ 0x40
 8005482:	d10a      	bne.n	800549a <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	2200      	movs	r2, #0
 8005488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	2200      	movs	r2, #0
 8005490:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005492:	6978      	ldr	r0, [r7, #20]
 8005494:	f7fc fe82 	bl	800219c <HAL_I2C_MemRxCpltCallback>
}
 8005498:	e013      	b.n	80054c2 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d002      	beq.n	80054ae <I2C_DMAXferCplt+0x1a2>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2b20      	cmp	r3, #32
 80054ac:	d103      	bne.n	80054b6 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2200      	movs	r2, #0
 80054b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80054b4:	e002      	b.n	80054bc <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2212      	movs	r2, #18
 80054ba:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80054bc:	6978      	ldr	r0, [r7, #20]
 80054be:	f7ff fe15 	bl	80050ec <HAL_I2C_MasterRxCpltCallback>
}
 80054c2:	bf00      	nop
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b084      	sub	sp, #16
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d003      	beq.n	80054e8 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054e4:	2200      	movs	r2, #0
 80054e6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d003      	beq.n	80054f8 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f4:	2200      	movs	r2, #0
 80054f6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7fe fd39 	bl	8003f70 <HAL_DMA_GetError>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b02      	cmp	r3, #2
 8005502:	d01b      	beq.n	800553c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005512:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2200      	movs	r2, #0
 8005518:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2220      	movs	r2, #32
 800551e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552e:	f043 0210 	orr.w	r2, r3, #16
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f7ff fdf6 	bl	8005128 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800553c:	bf00      	nop
 800553e:	3710      	adds	r7, #16
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	603b      	str	r3, [r7, #0]
 8005550:	4613      	mov	r3, r2
 8005552:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005554:	e048      	b.n	80055e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555c:	d044      	beq.n	80055e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800555e:	f7fd fe31 	bl	80031c4 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	429a      	cmp	r2, r3
 800556c:	d302      	bcc.n	8005574 <I2C_WaitOnFlagUntilTimeout+0x30>
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d139      	bne.n	80055e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	0c1b      	lsrs	r3, r3, #16
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b01      	cmp	r3, #1
 800557c:	d10d      	bne.n	800559a <I2C_WaitOnFlagUntilTimeout+0x56>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	43da      	mvns	r2, r3
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	4013      	ands	r3, r2
 800558a:	b29b      	uxth	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	bf0c      	ite	eq
 8005590:	2301      	moveq	r3, #1
 8005592:	2300      	movne	r3, #0
 8005594:	b2db      	uxtb	r3, r3
 8005596:	461a      	mov	r2, r3
 8005598:	e00c      	b.n	80055b4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	43da      	mvns	r2, r3
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	4013      	ands	r3, r2
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	bf0c      	ite	eq
 80055ac:	2301      	moveq	r3, #1
 80055ae:	2300      	movne	r3, #0
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	461a      	mov	r2, r3
 80055b4:	79fb      	ldrb	r3, [r7, #7]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d116      	bne.n	80055e8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d4:	f043 0220 	orr.w	r2, r3, #32
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	e023      	b.n	8005630 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	0c1b      	lsrs	r3, r3, #16
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d10d      	bne.n	800560e <I2C_WaitOnFlagUntilTimeout+0xca>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	43da      	mvns	r2, r3
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	4013      	ands	r3, r2
 80055fe:	b29b      	uxth	r3, r3
 8005600:	2b00      	cmp	r3, #0
 8005602:	bf0c      	ite	eq
 8005604:	2301      	moveq	r3, #1
 8005606:	2300      	movne	r3, #0
 8005608:	b2db      	uxtb	r3, r3
 800560a:	461a      	mov	r2, r3
 800560c:	e00c      	b.n	8005628 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	699b      	ldr	r3, [r3, #24]
 8005614:	43da      	mvns	r2, r3
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	4013      	ands	r3, r2
 800561a:	b29b      	uxth	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	bf0c      	ite	eq
 8005620:	2301      	moveq	r3, #1
 8005622:	2300      	movne	r3, #0
 8005624:	b2db      	uxtb	r3, r3
 8005626:	461a      	mov	r2, r3
 8005628:	79fb      	ldrb	r3, [r7, #7]
 800562a:	429a      	cmp	r2, r3
 800562c:	d093      	beq.n	8005556 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
 8005644:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005646:	e071      	b.n	800572c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005652:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005656:	d123      	bne.n	80056a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005666:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005670:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2220      	movs	r2, #32
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800568c:	f043 0204 	orr.w	r2, r3, #4
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e067      	b.n	8005770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a6:	d041      	beq.n	800572c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a8:	f7fd fd8c 	bl	80031c4 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d302      	bcc.n	80056be <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d136      	bne.n	800572c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	0c1b      	lsrs	r3, r3, #16
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d10c      	bne.n	80056e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	43da      	mvns	r2, r3
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	4013      	ands	r3, r2
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	bf14      	ite	ne
 80056da:	2301      	movne	r3, #1
 80056dc:	2300      	moveq	r3, #0
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	e00b      	b.n	80056fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	43da      	mvns	r2, r3
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	4013      	ands	r3, r2
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	bf14      	ite	ne
 80056f4:	2301      	movne	r3, #1
 80056f6:	2300      	moveq	r3, #0
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d016      	beq.n	800572c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005718:	f043 0220 	orr.w	r2, r3, #32
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e021      	b.n	8005770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	0c1b      	lsrs	r3, r3, #16
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b01      	cmp	r3, #1
 8005734:	d10c      	bne.n	8005750 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	43da      	mvns	r2, r3
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	4013      	ands	r3, r2
 8005742:	b29b      	uxth	r3, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	bf14      	ite	ne
 8005748:	2301      	movne	r3, #1
 800574a:	2300      	moveq	r3, #0
 800574c:	b2db      	uxtb	r3, r3
 800574e:	e00b      	b.n	8005768 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	43da      	mvns	r2, r3
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	4013      	ands	r3, r2
 800575c:	b29b      	uxth	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	bf14      	ite	ne
 8005762:	2301      	movne	r3, #1
 8005764:	2300      	moveq	r3, #0
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	f47f af6d 	bne.w	8005648 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005784:	e034      	b.n	80057f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f000 f89b 	bl	80058c2 <I2C_IsAcknowledgeFailed>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e034      	b.n	8005800 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579c:	d028      	beq.n	80057f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800579e:	f7fd fd11 	bl	80031c4 <HAL_GetTick>
 80057a2:	4602      	mov	r2, r0
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	1ad3      	subs	r3, r2, r3
 80057a8:	68ba      	ldr	r2, [r7, #8]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d302      	bcc.n	80057b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d11d      	bne.n	80057f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057be:	2b80      	cmp	r3, #128	@ 0x80
 80057c0:	d016      	beq.n	80057f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2220      	movs	r2, #32
 80057cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057dc:	f043 0220 	orr.w	r2, r3, #32
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e007      	b.n	8005800 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057fa:	2b80      	cmp	r3, #128	@ 0x80
 80057fc:	d1c3      	bne.n	8005786 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80057fe:	2300      	movs	r3, #0
}
 8005800:	4618      	mov	r0, r3
 8005802:	3710      	adds	r7, #16
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}

08005808 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005814:	e049      	b.n	80058aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	f003 0310 	and.w	r3, r3, #16
 8005820:	2b10      	cmp	r3, #16
 8005822:	d119      	bne.n	8005858 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f06f 0210 	mvn.w	r2, #16
 800582c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2220      	movs	r2, #32
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e030      	b.n	80058ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005858:	f7fd fcb4 	bl	80031c4 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	429a      	cmp	r2, r3
 8005866:	d302      	bcc.n	800586e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d11d      	bne.n	80058aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005878:	2b40      	cmp	r3, #64	@ 0x40
 800587a:	d016      	beq.n	80058aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2220      	movs	r2, #32
 8005886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005896:	f043 0220 	orr.w	r2, r3, #32
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e007      	b.n	80058ba <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	695b      	ldr	r3, [r3, #20]
 80058b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058b4:	2b40      	cmp	r3, #64	@ 0x40
 80058b6:	d1ae      	bne.n	8005816 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b083      	sub	sp, #12
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058d8:	d11b      	bne.n	8005912 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80058e2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2220      	movs	r2, #32
 80058ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fe:	f043 0204 	orr.w	r2, r3, #4
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	e000      	b.n	8005914 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b086      	sub	sp, #24
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e267      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d075      	beq.n	8005a2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800593e:	4b88      	ldr	r3, [pc, #544]	@ (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	f003 030c 	and.w	r3, r3, #12
 8005946:	2b04      	cmp	r3, #4
 8005948:	d00c      	beq.n	8005964 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800594a:	4b85      	ldr	r3, [pc, #532]	@ (8005b60 <HAL_RCC_OscConfig+0x240>)
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005952:	2b08      	cmp	r3, #8
 8005954:	d112      	bne.n	800597c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005956:	4b82      	ldr	r3, [pc, #520]	@ (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800595e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005962:	d10b      	bne.n	800597c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005964:	4b7e      	ldr	r3, [pc, #504]	@ (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d05b      	beq.n	8005a28 <HAL_RCC_OscConfig+0x108>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d157      	bne.n	8005a28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e242      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005984:	d106      	bne.n	8005994 <HAL_RCC_OscConfig+0x74>
 8005986:	4b76      	ldr	r3, [pc, #472]	@ (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a75      	ldr	r2, [pc, #468]	@ (8005b60 <HAL_RCC_OscConfig+0x240>)
 800598c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	e01d      	b.n	80059d0 <HAL_RCC_OscConfig+0xb0>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800599c:	d10c      	bne.n	80059b8 <HAL_RCC_OscConfig+0x98>
 800599e:	4b70      	ldr	r3, [pc, #448]	@ (8005b60 <HAL_RCC_OscConfig+0x240>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a6f      	ldr	r2, [pc, #444]	@ (8005b60 <HAL_RCC_OscConfig+0x240>)
 80059a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059a8:	6013      	str	r3, [r2, #0]
 80059aa:	4b6d      	ldr	r3, [pc, #436]	@ (8005b60 <HAL_RCC_OscConfig+0x240>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a6c      	ldr	r2, [pc, #432]	@ (8005b60 <HAL_RCC_OscConfig+0x240>)
 80059b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059b4:	6013      	str	r3, [r2, #0]
 80059b6:	e00b      	b.n	80059d0 <HAL_RCC_OscConfig+0xb0>
 80059b8:	4b69      	ldr	r3, [pc, #420]	@ (8005b60 <HAL_RCC_OscConfig+0x240>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a68      	ldr	r2, [pc, #416]	@ (8005b60 <HAL_RCC_OscConfig+0x240>)
 80059be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059c2:	6013      	str	r3, [r2, #0]
 80059c4:	4b66      	ldr	r3, [pc, #408]	@ (8005b60 <HAL_RCC_OscConfig+0x240>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a65      	ldr	r2, [pc, #404]	@ (8005b60 <HAL_RCC_OscConfig+0x240>)
 80059ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d013      	beq.n	8005a00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059d8:	f7fd fbf4 	bl	80031c4 <HAL_GetTick>
 80059dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059de:	e008      	b.n	80059f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059e0:	f7fd fbf0 	bl	80031c4 <HAL_GetTick>
 80059e4:	4602      	mov	r2, r0
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	2b64      	cmp	r3, #100	@ 0x64
 80059ec:	d901      	bls.n	80059f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e207      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059f2:	4b5b      	ldr	r3, [pc, #364]	@ (8005b60 <HAL_RCC_OscConfig+0x240>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d0f0      	beq.n	80059e0 <HAL_RCC_OscConfig+0xc0>
 80059fe:	e014      	b.n	8005a2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a00:	f7fd fbe0 	bl	80031c4 <HAL_GetTick>
 8005a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a06:	e008      	b.n	8005a1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a08:	f7fd fbdc 	bl	80031c4 <HAL_GetTick>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b64      	cmp	r3, #100	@ 0x64
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e1f3      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a1a:	4b51      	ldr	r3, [pc, #324]	@ (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1f0      	bne.n	8005a08 <HAL_RCC_OscConfig+0xe8>
 8005a26:	e000      	b.n	8005a2a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d063      	beq.n	8005afe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005a36:	4b4a      	ldr	r3, [pc, #296]	@ (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f003 030c 	and.w	r3, r3, #12
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00b      	beq.n	8005a5a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a42:	4b47      	ldr	r3, [pc, #284]	@ (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005a4a:	2b08      	cmp	r3, #8
 8005a4c:	d11c      	bne.n	8005a88 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a4e:	4b44      	ldr	r3, [pc, #272]	@ (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d116      	bne.n	8005a88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a5a:	4b41      	ldr	r3, [pc, #260]	@ (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d005      	beq.n	8005a72 <HAL_RCC_OscConfig+0x152>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d001      	beq.n	8005a72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e1c7      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a72:	4b3b      	ldr	r3, [pc, #236]	@ (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	4937      	ldr	r1, [pc, #220]	@ (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a86:	e03a      	b.n	8005afe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d020      	beq.n	8005ad2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a90:	4b34      	ldr	r3, [pc, #208]	@ (8005b64 <HAL_RCC_OscConfig+0x244>)
 8005a92:	2201      	movs	r2, #1
 8005a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a96:	f7fd fb95 	bl	80031c4 <HAL_GetTick>
 8005a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a9c:	e008      	b.n	8005ab0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005a9e:	f7fd fb91 	bl	80031c4 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d901      	bls.n	8005ab0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e1a8      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ab0:	4b2b      	ldr	r3, [pc, #172]	@ (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0f0      	beq.n	8005a9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005abc:	4b28      	ldr	r3, [pc, #160]	@ (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	00db      	lsls	r3, r3, #3
 8005aca:	4925      	ldr	r1, [pc, #148]	@ (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	600b      	str	r3, [r1, #0]
 8005ad0:	e015      	b.n	8005afe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ad2:	4b24      	ldr	r3, [pc, #144]	@ (8005b64 <HAL_RCC_OscConfig+0x244>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad8:	f7fd fb74 	bl	80031c4 <HAL_GetTick>
 8005adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ade:	e008      	b.n	8005af2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ae0:	f7fd fb70 	bl	80031c4 <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e187      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005af2:	4b1b      	ldr	r3, [pc, #108]	@ (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d1f0      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0308 	and.w	r3, r3, #8
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d036      	beq.n	8005b78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d016      	beq.n	8005b40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b12:	4b15      	ldr	r3, [pc, #84]	@ (8005b68 <HAL_RCC_OscConfig+0x248>)
 8005b14:	2201      	movs	r2, #1
 8005b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b18:	f7fd fb54 	bl	80031c4 <HAL_GetTick>
 8005b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b1e:	e008      	b.n	8005b32 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b20:	f7fd fb50 	bl	80031c4 <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	2b02      	cmp	r3, #2
 8005b2c:	d901      	bls.n	8005b32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e167      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b32:	4b0b      	ldr	r3, [pc, #44]	@ (8005b60 <HAL_RCC_OscConfig+0x240>)
 8005b34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b36:	f003 0302 	and.w	r3, r3, #2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d0f0      	beq.n	8005b20 <HAL_RCC_OscConfig+0x200>
 8005b3e:	e01b      	b.n	8005b78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b40:	4b09      	ldr	r3, [pc, #36]	@ (8005b68 <HAL_RCC_OscConfig+0x248>)
 8005b42:	2200      	movs	r2, #0
 8005b44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b46:	f7fd fb3d 	bl	80031c4 <HAL_GetTick>
 8005b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b4c:	e00e      	b.n	8005b6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b4e:	f7fd fb39 	bl	80031c4 <HAL_GetTick>
 8005b52:	4602      	mov	r2, r0
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	1ad3      	subs	r3, r2, r3
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d907      	bls.n	8005b6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e150      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
 8005b60:	40023800 	.word	0x40023800
 8005b64:	42470000 	.word	0x42470000
 8005b68:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b6c:	4b88      	ldr	r3, [pc, #544]	@ (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005b6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b70:	f003 0302 	and.w	r3, r3, #2
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1ea      	bne.n	8005b4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f003 0304 	and.w	r3, r3, #4
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 8097 	beq.w	8005cb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b86:	2300      	movs	r3, #0
 8005b88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b8a:	4b81      	ldr	r3, [pc, #516]	@ (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10f      	bne.n	8005bb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b96:	2300      	movs	r3, #0
 8005b98:	60bb      	str	r3, [r7, #8]
 8005b9a:	4b7d      	ldr	r3, [pc, #500]	@ (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9e:	4a7c      	ldr	r2, [pc, #496]	@ (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ba6:	4b7a      	ldr	r3, [pc, #488]	@ (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bae:	60bb      	str	r3, [r7, #8]
 8005bb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bb6:	4b77      	ldr	r3, [pc, #476]	@ (8005d94 <HAL_RCC_OscConfig+0x474>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d118      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bc2:	4b74      	ldr	r3, [pc, #464]	@ (8005d94 <HAL_RCC_OscConfig+0x474>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a73      	ldr	r2, [pc, #460]	@ (8005d94 <HAL_RCC_OscConfig+0x474>)
 8005bc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bce:	f7fd faf9 	bl	80031c4 <HAL_GetTick>
 8005bd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bd4:	e008      	b.n	8005be8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bd6:	f7fd faf5 	bl	80031c4 <HAL_GetTick>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	1ad3      	subs	r3, r2, r3
 8005be0:	2b02      	cmp	r3, #2
 8005be2:	d901      	bls.n	8005be8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e10c      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005be8:	4b6a      	ldr	r3, [pc, #424]	@ (8005d94 <HAL_RCC_OscConfig+0x474>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d0f0      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d106      	bne.n	8005c0a <HAL_RCC_OscConfig+0x2ea>
 8005bfc:	4b64      	ldr	r3, [pc, #400]	@ (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005bfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c00:	4a63      	ldr	r2, [pc, #396]	@ (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005c02:	f043 0301 	orr.w	r3, r3, #1
 8005c06:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c08:	e01c      	b.n	8005c44 <HAL_RCC_OscConfig+0x324>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	2b05      	cmp	r3, #5
 8005c10:	d10c      	bne.n	8005c2c <HAL_RCC_OscConfig+0x30c>
 8005c12:	4b5f      	ldr	r3, [pc, #380]	@ (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c16:	4a5e      	ldr	r2, [pc, #376]	@ (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005c18:	f043 0304 	orr.w	r3, r3, #4
 8005c1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c1e:	4b5c      	ldr	r3, [pc, #368]	@ (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c22:	4a5b      	ldr	r2, [pc, #364]	@ (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005c24:	f043 0301 	orr.w	r3, r3, #1
 8005c28:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c2a:	e00b      	b.n	8005c44 <HAL_RCC_OscConfig+0x324>
 8005c2c:	4b58      	ldr	r3, [pc, #352]	@ (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c30:	4a57      	ldr	r2, [pc, #348]	@ (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005c32:	f023 0301 	bic.w	r3, r3, #1
 8005c36:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c38:	4b55      	ldr	r3, [pc, #340]	@ (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c3c:	4a54      	ldr	r2, [pc, #336]	@ (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005c3e:	f023 0304 	bic.w	r3, r3, #4
 8005c42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d015      	beq.n	8005c78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c4c:	f7fd faba 	bl	80031c4 <HAL_GetTick>
 8005c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c52:	e00a      	b.n	8005c6a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c54:	f7fd fab6 	bl	80031c4 <HAL_GetTick>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	1ad3      	subs	r3, r2, r3
 8005c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e0cb      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c6a:	4b49      	ldr	r3, [pc, #292]	@ (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c6e:	f003 0302 	and.w	r3, r3, #2
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0ee      	beq.n	8005c54 <HAL_RCC_OscConfig+0x334>
 8005c76:	e014      	b.n	8005ca2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c78:	f7fd faa4 	bl	80031c4 <HAL_GetTick>
 8005c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c7e:	e00a      	b.n	8005c96 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c80:	f7fd faa0 	bl	80031c4 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e0b5      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c96:	4b3e      	ldr	r3, [pc, #248]	@ (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1ee      	bne.n	8005c80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ca2:	7dfb      	ldrb	r3, [r7, #23]
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d105      	bne.n	8005cb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ca8:	4b39      	ldr	r3, [pc, #228]	@ (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cac:	4a38      	ldr	r2, [pc, #224]	@ (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005cae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cb2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	699b      	ldr	r3, [r3, #24]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 80a1 	beq.w	8005e00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cbe:	4b34      	ldr	r3, [pc, #208]	@ (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f003 030c 	and.w	r3, r3, #12
 8005cc6:	2b08      	cmp	r3, #8
 8005cc8:	d05c      	beq.n	8005d84 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	d141      	bne.n	8005d56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cd2:	4b31      	ldr	r3, [pc, #196]	@ (8005d98 <HAL_RCC_OscConfig+0x478>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cd8:	f7fd fa74 	bl	80031c4 <HAL_GetTick>
 8005cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cde:	e008      	b.n	8005cf2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ce0:	f7fd fa70 	bl	80031c4 <HAL_GetTick>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	1ad3      	subs	r3, r2, r3
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e087      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cf2:	4b27      	ldr	r3, [pc, #156]	@ (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1f0      	bne.n	8005ce0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	69da      	ldr	r2, [r3, #28]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	431a      	orrs	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0c:	019b      	lsls	r3, r3, #6
 8005d0e:	431a      	orrs	r2, r3
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d14:	085b      	lsrs	r3, r3, #1
 8005d16:	3b01      	subs	r3, #1
 8005d18:	041b      	lsls	r3, r3, #16
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d20:	061b      	lsls	r3, r3, #24
 8005d22:	491b      	ldr	r1, [pc, #108]	@ (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d28:	4b1b      	ldr	r3, [pc, #108]	@ (8005d98 <HAL_RCC_OscConfig+0x478>)
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d2e:	f7fd fa49 	bl	80031c4 <HAL_GetTick>
 8005d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d34:	e008      	b.n	8005d48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d36:	f7fd fa45 	bl	80031c4 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d901      	bls.n	8005d48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e05c      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d48:	4b11      	ldr	r3, [pc, #68]	@ (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d0f0      	beq.n	8005d36 <HAL_RCC_OscConfig+0x416>
 8005d54:	e054      	b.n	8005e00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d56:	4b10      	ldr	r3, [pc, #64]	@ (8005d98 <HAL_RCC_OscConfig+0x478>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d5c:	f7fd fa32 	bl	80031c4 <HAL_GetTick>
 8005d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d62:	e008      	b.n	8005d76 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d64:	f7fd fa2e 	bl	80031c4 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e045      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d76:	4b06      	ldr	r3, [pc, #24]	@ (8005d90 <HAL_RCC_OscConfig+0x470>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1f0      	bne.n	8005d64 <HAL_RCC_OscConfig+0x444>
 8005d82:	e03d      	b.n	8005e00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d107      	bne.n	8005d9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e038      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
 8005d90:	40023800 	.word	0x40023800
 8005d94:	40007000 	.word	0x40007000
 8005d98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8005e0c <HAL_RCC_OscConfig+0x4ec>)
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d028      	beq.n	8005dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d121      	bne.n	8005dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d11a      	bne.n	8005dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005dcc:	4013      	ands	r3, r2
 8005dce:	687a      	ldr	r2, [r7, #4]
 8005dd0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005dd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d111      	bne.n	8005dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de2:	085b      	lsrs	r3, r3, #1
 8005de4:	3b01      	subs	r3, #1
 8005de6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d107      	bne.n	8005dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d001      	beq.n	8005e00 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	e000      	b.n	8005e02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3718      	adds	r7, #24
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	40023800 	.word	0x40023800

08005e10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d101      	bne.n	8005e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e0cc      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e24:	4b68      	ldr	r3, [pc, #416]	@ (8005fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0307 	and.w	r3, r3, #7
 8005e2c:	683a      	ldr	r2, [r7, #0]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d90c      	bls.n	8005e4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e32:	4b65      	ldr	r3, [pc, #404]	@ (8005fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	b2d2      	uxtb	r2, r2
 8005e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e3a:	4b63      	ldr	r3, [pc, #396]	@ (8005fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	683a      	ldr	r2, [r7, #0]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d001      	beq.n	8005e4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	e0b8      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0302 	and.w	r3, r3, #2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d020      	beq.n	8005e9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d005      	beq.n	8005e70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e64:	4b59      	ldr	r3, [pc, #356]	@ (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	4a58      	ldr	r2, [pc, #352]	@ (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005e6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005e6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0308 	and.w	r3, r3, #8
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d005      	beq.n	8005e88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e7c:	4b53      	ldr	r3, [pc, #332]	@ (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	4a52      	ldr	r2, [pc, #328]	@ (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005e82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005e86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e88:	4b50      	ldr	r3, [pc, #320]	@ (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	494d      	ldr	r1, [pc, #308]	@ (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d044      	beq.n	8005f30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d107      	bne.n	8005ebe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eae:	4b47      	ldr	r3, [pc, #284]	@ (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d119      	bne.n	8005eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e07f      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d003      	beq.n	8005ece <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005eca:	2b03      	cmp	r3, #3
 8005ecc:	d107      	bne.n	8005ede <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ece:	4b3f      	ldr	r3, [pc, #252]	@ (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d109      	bne.n	8005eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e06f      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ede:	4b3b      	ldr	r3, [pc, #236]	@ (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e067      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005eee:	4b37      	ldr	r3, [pc, #220]	@ (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f023 0203 	bic.w	r2, r3, #3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	4934      	ldr	r1, [pc, #208]	@ (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f00:	f7fd f960 	bl	80031c4 <HAL_GetTick>
 8005f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f06:	e00a      	b.n	8005f1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f08:	f7fd f95c 	bl	80031c4 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d901      	bls.n	8005f1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f1a:	2303      	movs	r3, #3
 8005f1c:	e04f      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f1e:	4b2b      	ldr	r3, [pc, #172]	@ (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f003 020c 	and.w	r2, r3, #12
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d1eb      	bne.n	8005f08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f30:	4b25      	ldr	r3, [pc, #148]	@ (8005fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0307 	and.w	r3, r3, #7
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d20c      	bcs.n	8005f58 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f3e:	4b22      	ldr	r3, [pc, #136]	@ (8005fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	b2d2      	uxtb	r2, r2
 8005f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f46:	4b20      	ldr	r3, [pc, #128]	@ (8005fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 0307 	and.w	r3, r3, #7
 8005f4e:	683a      	ldr	r2, [r7, #0]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d001      	beq.n	8005f58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e032      	b.n	8005fbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d008      	beq.n	8005f76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f64:	4b19      	ldr	r3, [pc, #100]	@ (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	4916      	ldr	r1, [pc, #88]	@ (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d009      	beq.n	8005f96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f82:	4b12      	ldr	r3, [pc, #72]	@ (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	00db      	lsls	r3, r3, #3
 8005f90:	490e      	ldr	r1, [pc, #56]	@ (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005f96:	f000 f821 	bl	8005fdc <HAL_RCC_GetSysClockFreq>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8005fcc <HAL_RCC_ClockConfig+0x1bc>)
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	091b      	lsrs	r3, r3, #4
 8005fa2:	f003 030f 	and.w	r3, r3, #15
 8005fa6:	490a      	ldr	r1, [pc, #40]	@ (8005fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8005fa8:	5ccb      	ldrb	r3, [r1, r3]
 8005faa:	fa22 f303 	lsr.w	r3, r2, r3
 8005fae:	4a09      	ldr	r2, [pc, #36]	@ (8005fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005fb2:	4b09      	ldr	r3, [pc, #36]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fd f8c0 	bl	800313c <HAL_InitTick>

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	40023c00 	.word	0x40023c00
 8005fcc:	40023800 	.word	0x40023800
 8005fd0:	0800ce78 	.word	0x0800ce78
 8005fd4:	20000084 	.word	0x20000084
 8005fd8:	20000088 	.word	0x20000088

08005fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fe0:	b090      	sub	sp, #64	@ 0x40
 8005fe2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ff4:	4b59      	ldr	r3, [pc, #356]	@ (800615c <HAL_RCC_GetSysClockFreq+0x180>)
 8005ff6:	689b      	ldr	r3, [r3, #8]
 8005ff8:	f003 030c 	and.w	r3, r3, #12
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	d00d      	beq.n	800601c <HAL_RCC_GetSysClockFreq+0x40>
 8006000:	2b08      	cmp	r3, #8
 8006002:	f200 80a1 	bhi.w	8006148 <HAL_RCC_GetSysClockFreq+0x16c>
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <HAL_RCC_GetSysClockFreq+0x34>
 800600a:	2b04      	cmp	r3, #4
 800600c:	d003      	beq.n	8006016 <HAL_RCC_GetSysClockFreq+0x3a>
 800600e:	e09b      	b.n	8006148 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006010:	4b53      	ldr	r3, [pc, #332]	@ (8006160 <HAL_RCC_GetSysClockFreq+0x184>)
 8006012:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006014:	e09b      	b.n	800614e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006016:	4b53      	ldr	r3, [pc, #332]	@ (8006164 <HAL_RCC_GetSysClockFreq+0x188>)
 8006018:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800601a:	e098      	b.n	800614e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800601c:	4b4f      	ldr	r3, [pc, #316]	@ (800615c <HAL_RCC_GetSysClockFreq+0x180>)
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006024:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006026:	4b4d      	ldr	r3, [pc, #308]	@ (800615c <HAL_RCC_GetSysClockFreq+0x180>)
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d028      	beq.n	8006084 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006032:	4b4a      	ldr	r3, [pc, #296]	@ (800615c <HAL_RCC_GetSysClockFreq+0x180>)
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	099b      	lsrs	r3, r3, #6
 8006038:	2200      	movs	r2, #0
 800603a:	623b      	str	r3, [r7, #32]
 800603c:	627a      	str	r2, [r7, #36]	@ 0x24
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006044:	2100      	movs	r1, #0
 8006046:	4b47      	ldr	r3, [pc, #284]	@ (8006164 <HAL_RCC_GetSysClockFreq+0x188>)
 8006048:	fb03 f201 	mul.w	r2, r3, r1
 800604c:	2300      	movs	r3, #0
 800604e:	fb00 f303 	mul.w	r3, r0, r3
 8006052:	4413      	add	r3, r2
 8006054:	4a43      	ldr	r2, [pc, #268]	@ (8006164 <HAL_RCC_GetSysClockFreq+0x188>)
 8006056:	fba0 1202 	umull	r1, r2, r0, r2
 800605a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800605c:	460a      	mov	r2, r1
 800605e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006060:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006062:	4413      	add	r3, r2
 8006064:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006068:	2200      	movs	r2, #0
 800606a:	61bb      	str	r3, [r7, #24]
 800606c:	61fa      	str	r2, [r7, #28]
 800606e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006072:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006076:	f7fa fe1f 	bl	8000cb8 <__aeabi_uldivmod>
 800607a:	4602      	mov	r2, r0
 800607c:	460b      	mov	r3, r1
 800607e:	4613      	mov	r3, r2
 8006080:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006082:	e053      	b.n	800612c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006084:	4b35      	ldr	r3, [pc, #212]	@ (800615c <HAL_RCC_GetSysClockFreq+0x180>)
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	099b      	lsrs	r3, r3, #6
 800608a:	2200      	movs	r2, #0
 800608c:	613b      	str	r3, [r7, #16]
 800608e:	617a      	str	r2, [r7, #20]
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006096:	f04f 0b00 	mov.w	fp, #0
 800609a:	4652      	mov	r2, sl
 800609c:	465b      	mov	r3, fp
 800609e:	f04f 0000 	mov.w	r0, #0
 80060a2:	f04f 0100 	mov.w	r1, #0
 80060a6:	0159      	lsls	r1, r3, #5
 80060a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80060ac:	0150      	lsls	r0, r2, #5
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	ebb2 080a 	subs.w	r8, r2, sl
 80060b6:	eb63 090b 	sbc.w	r9, r3, fp
 80060ba:	f04f 0200 	mov.w	r2, #0
 80060be:	f04f 0300 	mov.w	r3, #0
 80060c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80060c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80060ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80060ce:	ebb2 0408 	subs.w	r4, r2, r8
 80060d2:	eb63 0509 	sbc.w	r5, r3, r9
 80060d6:	f04f 0200 	mov.w	r2, #0
 80060da:	f04f 0300 	mov.w	r3, #0
 80060de:	00eb      	lsls	r3, r5, #3
 80060e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060e4:	00e2      	lsls	r2, r4, #3
 80060e6:	4614      	mov	r4, r2
 80060e8:	461d      	mov	r5, r3
 80060ea:	eb14 030a 	adds.w	r3, r4, sl
 80060ee:	603b      	str	r3, [r7, #0]
 80060f0:	eb45 030b 	adc.w	r3, r5, fp
 80060f4:	607b      	str	r3, [r7, #4]
 80060f6:	f04f 0200 	mov.w	r2, #0
 80060fa:	f04f 0300 	mov.w	r3, #0
 80060fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006102:	4629      	mov	r1, r5
 8006104:	028b      	lsls	r3, r1, #10
 8006106:	4621      	mov	r1, r4
 8006108:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800610c:	4621      	mov	r1, r4
 800610e:	028a      	lsls	r2, r1, #10
 8006110:	4610      	mov	r0, r2
 8006112:	4619      	mov	r1, r3
 8006114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006116:	2200      	movs	r2, #0
 8006118:	60bb      	str	r3, [r7, #8]
 800611a:	60fa      	str	r2, [r7, #12]
 800611c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006120:	f7fa fdca 	bl	8000cb8 <__aeabi_uldivmod>
 8006124:	4602      	mov	r2, r0
 8006126:	460b      	mov	r3, r1
 8006128:	4613      	mov	r3, r2
 800612a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800612c:	4b0b      	ldr	r3, [pc, #44]	@ (800615c <HAL_RCC_GetSysClockFreq+0x180>)
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	0c1b      	lsrs	r3, r3, #16
 8006132:	f003 0303 	and.w	r3, r3, #3
 8006136:	3301      	adds	r3, #1
 8006138:	005b      	lsls	r3, r3, #1
 800613a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800613c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800613e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006140:	fbb2 f3f3 	udiv	r3, r2, r3
 8006144:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006146:	e002      	b.n	800614e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006148:	4b05      	ldr	r3, [pc, #20]	@ (8006160 <HAL_RCC_GetSysClockFreq+0x184>)
 800614a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800614c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800614e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006150:	4618      	mov	r0, r3
 8006152:	3740      	adds	r7, #64	@ 0x40
 8006154:	46bd      	mov	sp, r7
 8006156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800615a:	bf00      	nop
 800615c:	40023800 	.word	0x40023800
 8006160:	00f42400 	.word	0x00f42400
 8006164:	017d7840 	.word	0x017d7840

08006168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006168:	b480      	push	{r7}
 800616a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800616c:	4b03      	ldr	r3, [pc, #12]	@ (800617c <HAL_RCC_GetHCLKFreq+0x14>)
 800616e:	681b      	ldr	r3, [r3, #0]
}
 8006170:	4618      	mov	r0, r3
 8006172:	46bd      	mov	sp, r7
 8006174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006178:	4770      	bx	lr
 800617a:	bf00      	nop
 800617c:	20000084 	.word	0x20000084

08006180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006184:	f7ff fff0 	bl	8006168 <HAL_RCC_GetHCLKFreq>
 8006188:	4602      	mov	r2, r0
 800618a:	4b05      	ldr	r3, [pc, #20]	@ (80061a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	0a9b      	lsrs	r3, r3, #10
 8006190:	f003 0307 	and.w	r3, r3, #7
 8006194:	4903      	ldr	r1, [pc, #12]	@ (80061a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006196:	5ccb      	ldrb	r3, [r1, r3]
 8006198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800619c:	4618      	mov	r0, r3
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	40023800 	.word	0x40023800
 80061a4:	0800ce88 	.word	0x0800ce88

080061a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80061ac:	f7ff ffdc 	bl	8006168 <HAL_RCC_GetHCLKFreq>
 80061b0:	4602      	mov	r2, r0
 80061b2:	4b05      	ldr	r3, [pc, #20]	@ (80061c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	0b5b      	lsrs	r3, r3, #13
 80061b8:	f003 0307 	and.w	r3, r3, #7
 80061bc:	4903      	ldr	r1, [pc, #12]	@ (80061cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80061be:	5ccb      	ldrb	r3, [r1, r3]
 80061c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	40023800 	.word	0x40023800
 80061cc:	0800ce88 	.word	0x0800ce88

080061d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d001      	beq.n	80061e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e044      	b.n	8006272 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2202      	movs	r2, #2
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	68da      	ldr	r2, [r3, #12]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f042 0201 	orr.w	r2, r2, #1
 80061fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a1e      	ldr	r2, [pc, #120]	@ (8006280 <HAL_TIM_Base_Start_IT+0xb0>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d018      	beq.n	800623c <HAL_TIM_Base_Start_IT+0x6c>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006212:	d013      	beq.n	800623c <HAL_TIM_Base_Start_IT+0x6c>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a1a      	ldr	r2, [pc, #104]	@ (8006284 <HAL_TIM_Base_Start_IT+0xb4>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d00e      	beq.n	800623c <HAL_TIM_Base_Start_IT+0x6c>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a19      	ldr	r2, [pc, #100]	@ (8006288 <HAL_TIM_Base_Start_IT+0xb8>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d009      	beq.n	800623c <HAL_TIM_Base_Start_IT+0x6c>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a17      	ldr	r2, [pc, #92]	@ (800628c <HAL_TIM_Base_Start_IT+0xbc>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d004      	beq.n	800623c <HAL_TIM_Base_Start_IT+0x6c>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a16      	ldr	r2, [pc, #88]	@ (8006290 <HAL_TIM_Base_Start_IT+0xc0>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d111      	bne.n	8006260 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f003 0307 	and.w	r3, r3, #7
 8006246:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b06      	cmp	r3, #6
 800624c:	d010      	beq.n	8006270 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f042 0201 	orr.w	r2, r2, #1
 800625c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800625e:	e007      	b.n	8006270 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f042 0201 	orr.w	r2, r2, #1
 800626e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006270:	2300      	movs	r3, #0
}
 8006272:	4618      	mov	r0, r3
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	40010000 	.word	0x40010000
 8006284:	40000400 	.word	0x40000400
 8006288:	40000800 	.word	0x40000800
 800628c:	40000c00 	.word	0x40000c00
 8006290:	40014000 	.word	0x40014000

08006294 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e041      	b.n	800632a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d106      	bne.n	80062c0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f7fc fc34 	bl	8002b28 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2202      	movs	r2, #2
 80062c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	3304      	adds	r3, #4
 80062d0:	4619      	mov	r1, r3
 80062d2:	4610      	mov	r0, r2
 80062d4:	f000 fb62 	bl	800699c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006328:	2300      	movs	r3, #0
}
 800632a:	4618      	mov	r0, r3
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b082      	sub	sp, #8
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e041      	b.n	80063c8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800634a:	b2db      	uxtb	r3, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	d106      	bne.n	800635e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f7fc fbaf 	bl	8002abc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2202      	movs	r2, #2
 8006362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	3304      	adds	r3, #4
 800636e:	4619      	mov	r1, r3
 8006370:	4610      	mov	r0, r2
 8006372:	f000 fb13 	bl	800699c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
 80063d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d109      	bne.n	80063f4 <HAL_TIM_PWM_Start+0x24>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	bf14      	ite	ne
 80063ec:	2301      	movne	r3, #1
 80063ee:	2300      	moveq	r3, #0
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	e022      	b.n	800643a <HAL_TIM_PWM_Start+0x6a>
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	2b04      	cmp	r3, #4
 80063f8:	d109      	bne.n	800640e <HAL_TIM_PWM_Start+0x3e>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b01      	cmp	r3, #1
 8006404:	bf14      	ite	ne
 8006406:	2301      	movne	r3, #1
 8006408:	2300      	moveq	r3, #0
 800640a:	b2db      	uxtb	r3, r3
 800640c:	e015      	b.n	800643a <HAL_TIM_PWM_Start+0x6a>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b08      	cmp	r3, #8
 8006412:	d109      	bne.n	8006428 <HAL_TIM_PWM_Start+0x58>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b01      	cmp	r3, #1
 800641e:	bf14      	ite	ne
 8006420:	2301      	movne	r3, #1
 8006422:	2300      	moveq	r3, #0
 8006424:	b2db      	uxtb	r3, r3
 8006426:	e008      	b.n	800643a <HAL_TIM_PWM_Start+0x6a>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800642e:	b2db      	uxtb	r3, r3
 8006430:	2b01      	cmp	r3, #1
 8006432:	bf14      	ite	ne
 8006434:	2301      	movne	r3, #1
 8006436:	2300      	moveq	r3, #0
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d001      	beq.n	8006442 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e068      	b.n	8006514 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d104      	bne.n	8006452 <HAL_TIM_PWM_Start+0x82>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2202      	movs	r2, #2
 800644c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006450:	e013      	b.n	800647a <HAL_TIM_PWM_Start+0xaa>
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b04      	cmp	r3, #4
 8006456:	d104      	bne.n	8006462 <HAL_TIM_PWM_Start+0x92>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2202      	movs	r2, #2
 800645c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006460:	e00b      	b.n	800647a <HAL_TIM_PWM_Start+0xaa>
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	2b08      	cmp	r3, #8
 8006466:	d104      	bne.n	8006472 <HAL_TIM_PWM_Start+0xa2>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2202      	movs	r2, #2
 800646c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006470:	e003      	b.n	800647a <HAL_TIM_PWM_Start+0xaa>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2202      	movs	r2, #2
 8006476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2201      	movs	r2, #1
 8006480:	6839      	ldr	r1, [r7, #0]
 8006482:	4618      	mov	r0, r3
 8006484:	f000 fca2 	bl	8006dcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a23      	ldr	r2, [pc, #140]	@ (800651c <HAL_TIM_PWM_Start+0x14c>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d107      	bne.n	80064a2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80064a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a1d      	ldr	r2, [pc, #116]	@ (800651c <HAL_TIM_PWM_Start+0x14c>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d018      	beq.n	80064de <HAL_TIM_PWM_Start+0x10e>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064b4:	d013      	beq.n	80064de <HAL_TIM_PWM_Start+0x10e>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a19      	ldr	r2, [pc, #100]	@ (8006520 <HAL_TIM_PWM_Start+0x150>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d00e      	beq.n	80064de <HAL_TIM_PWM_Start+0x10e>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a17      	ldr	r2, [pc, #92]	@ (8006524 <HAL_TIM_PWM_Start+0x154>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d009      	beq.n	80064de <HAL_TIM_PWM_Start+0x10e>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4a16      	ldr	r2, [pc, #88]	@ (8006528 <HAL_TIM_PWM_Start+0x158>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d004      	beq.n	80064de <HAL_TIM_PWM_Start+0x10e>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4a14      	ldr	r2, [pc, #80]	@ (800652c <HAL_TIM_PWM_Start+0x15c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d111      	bne.n	8006502 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f003 0307 	and.w	r3, r3, #7
 80064e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2b06      	cmp	r3, #6
 80064ee:	d010      	beq.n	8006512 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f042 0201 	orr.w	r2, r2, #1
 80064fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006500:	e007      	b.n	8006512 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f042 0201 	orr.w	r2, r2, #1
 8006510:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006512:	2300      	movs	r3, #0
}
 8006514:	4618      	mov	r0, r3
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	40010000 	.word	0x40010000
 8006520:	40000400 	.word	0x40000400
 8006524:	40000800 	.word	0x40000800
 8006528:	40000c00 	.word	0x40000c00
 800652c:	40014000 	.word	0x40014000

08006530 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d020      	beq.n	8006594 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d01b      	beq.n	8006594 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f06f 0202 	mvn.w	r2, #2
 8006564:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	699b      	ldr	r3, [r3, #24]
 8006572:	f003 0303 	and.w	r3, r3, #3
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f9f0 	bl	8006960 <HAL_TIM_IC_CaptureCallback>
 8006580:	e005      	b.n	800658e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f9e2 	bl	800694c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 f9f3 	bl	8006974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	f003 0304 	and.w	r3, r3, #4
 800659a:	2b00      	cmp	r3, #0
 800659c:	d020      	beq.n	80065e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f003 0304 	and.w	r3, r3, #4
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d01b      	beq.n	80065e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f06f 0204 	mvn.w	r2, #4
 80065b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2202      	movs	r2, #2
 80065b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d003      	beq.n	80065ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f9ca 	bl	8006960 <HAL_TIM_IC_CaptureCallback>
 80065cc:	e005      	b.n	80065da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 f9bc 	bl	800694c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 f9cd 	bl	8006974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	f003 0308 	and.w	r3, r3, #8
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d020      	beq.n	800662c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f003 0308 	and.w	r3, r3, #8
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d01b      	beq.n	800662c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f06f 0208 	mvn.w	r2, #8
 80065fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2204      	movs	r2, #4
 8006602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	f003 0303 	and.w	r3, r3, #3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d003      	beq.n	800661a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f9a4 	bl	8006960 <HAL_TIM_IC_CaptureCallback>
 8006618:	e005      	b.n	8006626 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f996 	bl	800694c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f9a7 	bl	8006974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	f003 0310 	and.w	r3, r3, #16
 8006632:	2b00      	cmp	r3, #0
 8006634:	d020      	beq.n	8006678 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f003 0310 	and.w	r3, r3, #16
 800663c:	2b00      	cmp	r3, #0
 800663e:	d01b      	beq.n	8006678 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f06f 0210 	mvn.w	r2, #16
 8006648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2208      	movs	r2, #8
 800664e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f97e 	bl	8006960 <HAL_TIM_IC_CaptureCallback>
 8006664:	e005      	b.n	8006672 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f970 	bl	800694c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f981 	bl	8006974 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	f003 0301 	and.w	r3, r3, #1
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00c      	beq.n	800669c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f003 0301 	and.w	r3, r3, #1
 8006688:	2b00      	cmp	r3, #0
 800668a:	d007      	beq.n	800669c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f06f 0201 	mvn.w	r2, #1
 8006694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7fb fdaa 	bl	80021f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00c      	beq.n	80066c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d007      	beq.n	80066c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80066b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 fc24 	bl	8006f08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00c      	beq.n	80066e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d007      	beq.n	80066e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80066dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 f952 	bl	8006988 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	f003 0320 	and.w	r3, r3, #32
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00c      	beq.n	8006708 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f003 0320 	and.w	r3, r3, #32
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d007      	beq.n	8006708 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f06f 0220 	mvn.w	r2, #32
 8006700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fbf6 	bl	8006ef4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006708:	bf00      	nop
 800670a:	3710      	adds	r7, #16
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800671c:	2300      	movs	r3, #0
 800671e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006726:	2b01      	cmp	r3, #1
 8006728:	d101      	bne.n	800672e <HAL_TIM_OC_ConfigChannel+0x1e>
 800672a:	2302      	movs	r3, #2
 800672c:	e048      	b.n	80067c0 <HAL_TIM_OC_ConfigChannel+0xb0>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2b0c      	cmp	r3, #12
 800673a:	d839      	bhi.n	80067b0 <HAL_TIM_OC_ConfigChannel+0xa0>
 800673c:	a201      	add	r2, pc, #4	@ (adr r2, 8006744 <HAL_TIM_OC_ConfigChannel+0x34>)
 800673e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006742:	bf00      	nop
 8006744:	08006779 	.word	0x08006779
 8006748:	080067b1 	.word	0x080067b1
 800674c:	080067b1 	.word	0x080067b1
 8006750:	080067b1 	.word	0x080067b1
 8006754:	08006787 	.word	0x08006787
 8006758:	080067b1 	.word	0x080067b1
 800675c:	080067b1 	.word	0x080067b1
 8006760:	080067b1 	.word	0x080067b1
 8006764:	08006795 	.word	0x08006795
 8006768:	080067b1 	.word	0x080067b1
 800676c:	080067b1 	.word	0x080067b1
 8006770:	080067b1 	.word	0x080067b1
 8006774:	080067a3 	.word	0x080067a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68b9      	ldr	r1, [r7, #8]
 800677e:	4618      	mov	r0, r3
 8006780:	f000 f998 	bl	8006ab4 <TIM_OC1_SetConfig>
      break;
 8006784:	e017      	b.n	80067b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68b9      	ldr	r1, [r7, #8]
 800678c:	4618      	mov	r0, r3
 800678e:	f000 f9f7 	bl	8006b80 <TIM_OC2_SetConfig>
      break;
 8006792:	e010      	b.n	80067b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68b9      	ldr	r1, [r7, #8]
 800679a:	4618      	mov	r0, r3
 800679c:	f000 fa5c 	bl	8006c58 <TIM_OC3_SetConfig>
      break;
 80067a0:	e009      	b.n	80067b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	68b9      	ldr	r1, [r7, #8]
 80067a8:	4618      	mov	r0, r3
 80067aa:	f000 fabf 	bl	8006d2c <TIM_OC4_SetConfig>
      break;
 80067ae:	e002      	b.n	80067b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	75fb      	strb	r3, [r7, #23]
      break;
 80067b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067be:	7dfb      	ldrb	r3, [r7, #23]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3718      	adds	r7, #24
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d101      	bne.n	80067e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80067e2:	2302      	movs	r3, #2
 80067e4:	e0ae      	b.n	8006944 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2b0c      	cmp	r3, #12
 80067f2:	f200 809f 	bhi.w	8006934 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80067f6:	a201      	add	r2, pc, #4	@ (adr r2, 80067fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80067f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fc:	08006831 	.word	0x08006831
 8006800:	08006935 	.word	0x08006935
 8006804:	08006935 	.word	0x08006935
 8006808:	08006935 	.word	0x08006935
 800680c:	08006871 	.word	0x08006871
 8006810:	08006935 	.word	0x08006935
 8006814:	08006935 	.word	0x08006935
 8006818:	08006935 	.word	0x08006935
 800681c:	080068b3 	.word	0x080068b3
 8006820:	08006935 	.word	0x08006935
 8006824:	08006935 	.word	0x08006935
 8006828:	08006935 	.word	0x08006935
 800682c:	080068f3 	.word	0x080068f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68b9      	ldr	r1, [r7, #8]
 8006836:	4618      	mov	r0, r3
 8006838:	f000 f93c 	bl	8006ab4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	699a      	ldr	r2, [r3, #24]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f042 0208 	orr.w	r2, r2, #8
 800684a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	699a      	ldr	r2, [r3, #24]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f022 0204 	bic.w	r2, r2, #4
 800685a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	6999      	ldr	r1, [r3, #24]
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	691a      	ldr	r2, [r3, #16]
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	430a      	orrs	r2, r1
 800686c:	619a      	str	r2, [r3, #24]
      break;
 800686e:	e064      	b.n	800693a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68b9      	ldr	r1, [r7, #8]
 8006876:	4618      	mov	r0, r3
 8006878:	f000 f982 	bl	8006b80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	699a      	ldr	r2, [r3, #24]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800688a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	699a      	ldr	r2, [r3, #24]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800689a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	6999      	ldr	r1, [r3, #24]
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	021a      	lsls	r2, r3, #8
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	430a      	orrs	r2, r1
 80068ae:	619a      	str	r2, [r3, #24]
      break;
 80068b0:	e043      	b.n	800693a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68b9      	ldr	r1, [r7, #8]
 80068b8:	4618      	mov	r0, r3
 80068ba:	f000 f9cd 	bl	8006c58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	69da      	ldr	r2, [r3, #28]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f042 0208 	orr.w	r2, r2, #8
 80068cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	69da      	ldr	r2, [r3, #28]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f022 0204 	bic.w	r2, r2, #4
 80068dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	69d9      	ldr	r1, [r3, #28]
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	691a      	ldr	r2, [r3, #16]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	430a      	orrs	r2, r1
 80068ee:	61da      	str	r2, [r3, #28]
      break;
 80068f0:	e023      	b.n	800693a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68b9      	ldr	r1, [r7, #8]
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 fa17 	bl	8006d2c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	69da      	ldr	r2, [r3, #28]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800690c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	69da      	ldr	r2, [r3, #28]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800691c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	69d9      	ldr	r1, [r3, #28]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	021a      	lsls	r2, r3, #8
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	430a      	orrs	r2, r1
 8006930:	61da      	str	r2, [r3, #28]
      break;
 8006932:	e002      	b.n	800693a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	75fb      	strb	r3, [r7, #23]
      break;
 8006938:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006942:	7dfb      	ldrb	r3, [r7, #23]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3718      	adds	r7, #24
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006954:	bf00      	nop
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006968:	bf00      	nop
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006990:	bf00      	nop
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4a3a      	ldr	r2, [pc, #232]	@ (8006a98 <TIM_Base_SetConfig+0xfc>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d00f      	beq.n	80069d4 <TIM_Base_SetConfig+0x38>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069ba:	d00b      	beq.n	80069d4 <TIM_Base_SetConfig+0x38>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a37      	ldr	r2, [pc, #220]	@ (8006a9c <TIM_Base_SetConfig+0x100>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d007      	beq.n	80069d4 <TIM_Base_SetConfig+0x38>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a36      	ldr	r2, [pc, #216]	@ (8006aa0 <TIM_Base_SetConfig+0x104>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d003      	beq.n	80069d4 <TIM_Base_SetConfig+0x38>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a35      	ldr	r2, [pc, #212]	@ (8006aa4 <TIM_Base_SetConfig+0x108>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d108      	bne.n	80069e6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	68fa      	ldr	r2, [r7, #12]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a2b      	ldr	r2, [pc, #172]	@ (8006a98 <TIM_Base_SetConfig+0xfc>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d01b      	beq.n	8006a26 <TIM_Base_SetConfig+0x8a>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069f4:	d017      	beq.n	8006a26 <TIM_Base_SetConfig+0x8a>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a28      	ldr	r2, [pc, #160]	@ (8006a9c <TIM_Base_SetConfig+0x100>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d013      	beq.n	8006a26 <TIM_Base_SetConfig+0x8a>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a27      	ldr	r2, [pc, #156]	@ (8006aa0 <TIM_Base_SetConfig+0x104>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d00f      	beq.n	8006a26 <TIM_Base_SetConfig+0x8a>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	4a26      	ldr	r2, [pc, #152]	@ (8006aa4 <TIM_Base_SetConfig+0x108>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d00b      	beq.n	8006a26 <TIM_Base_SetConfig+0x8a>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a25      	ldr	r2, [pc, #148]	@ (8006aa8 <TIM_Base_SetConfig+0x10c>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d007      	beq.n	8006a26 <TIM_Base_SetConfig+0x8a>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a24      	ldr	r2, [pc, #144]	@ (8006aac <TIM_Base_SetConfig+0x110>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d003      	beq.n	8006a26 <TIM_Base_SetConfig+0x8a>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a23      	ldr	r2, [pc, #140]	@ (8006ab0 <TIM_Base_SetConfig+0x114>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d108      	bne.n	8006a38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	68db      	ldr	r3, [r3, #12]
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	695b      	ldr	r3, [r3, #20]
 8006a42:	4313      	orrs	r3, r2
 8006a44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	689a      	ldr	r2, [r3, #8]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a0e      	ldr	r2, [pc, #56]	@ (8006a98 <TIM_Base_SetConfig+0xfc>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d103      	bne.n	8006a6c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	691a      	ldr	r2, [r3, #16]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	691b      	ldr	r3, [r3, #16]
 8006a76:	f003 0301 	and.w	r3, r3, #1
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d105      	bne.n	8006a8a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	691b      	ldr	r3, [r3, #16]
 8006a82:	f023 0201 	bic.w	r2, r3, #1
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	611a      	str	r2, [r3, #16]
  }
}
 8006a8a:	bf00      	nop
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
 8006a96:	bf00      	nop
 8006a98:	40010000 	.word	0x40010000
 8006a9c:	40000400 	.word	0x40000400
 8006aa0:	40000800 	.word	0x40000800
 8006aa4:	40000c00 	.word	0x40000c00
 8006aa8:	40014000 	.word	0x40014000
 8006aac:	40014400 	.word	0x40014400
 8006ab0:	40014800 	.word	0x40014800

08006ab4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
 8006ac8:	f023 0201 	bic.w	r2, r3, #1
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	699b      	ldr	r3, [r3, #24]
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f023 0303 	bic.w	r3, r3, #3
 8006aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	f023 0302 	bic.w	r3, r3, #2
 8006afc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	697a      	ldr	r2, [r7, #20]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8006b7c <TIM_OC1_SetConfig+0xc8>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d10c      	bne.n	8006b2a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	f023 0308 	bic.w	r3, r3, #8
 8006b16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	697a      	ldr	r2, [r7, #20]
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	f023 0304 	bic.w	r3, r3, #4
 8006b28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a13      	ldr	r2, [pc, #76]	@ (8006b7c <TIM_OC1_SetConfig+0xc8>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d111      	bne.n	8006b56 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006b38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006b40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	699b      	ldr	r3, [r3, #24]
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	685a      	ldr	r2, [r3, #4]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	621a      	str	r2, [r3, #32]
}
 8006b70:	bf00      	nop
 8006b72:	371c      	adds	r7, #28
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr
 8006b7c:	40010000 	.word	0x40010000

08006b80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b087      	sub	sp, #28
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a1b      	ldr	r3, [r3, #32]
 8006b94:	f023 0210 	bic.w	r2, r3, #16
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	699b      	ldr	r3, [r3, #24]
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	021b      	lsls	r3, r3, #8
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f023 0320 	bic.w	r3, r3, #32
 8006bca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	011b      	lsls	r3, r3, #4
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a1e      	ldr	r2, [pc, #120]	@ (8006c54 <TIM_OC2_SetConfig+0xd4>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d10d      	bne.n	8006bfc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006be6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	011b      	lsls	r3, r3, #4
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bfa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a15      	ldr	r2, [pc, #84]	@ (8006c54 <TIM_OC2_SetConfig+0xd4>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d113      	bne.n	8006c2c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006c0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006c12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685a      	ldr	r2, [r3, #4]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	621a      	str	r2, [r3, #32]
}
 8006c46:	bf00      	nop
 8006c48:	371c      	adds	r7, #28
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	40010000 	.word	0x40010000

08006c58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b087      	sub	sp, #28
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f023 0303 	bic.w	r3, r3, #3
 8006c8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006ca0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	021b      	lsls	r3, r3, #8
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	4313      	orrs	r3, r2
 8006cac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8006d28 <TIM_OC3_SetConfig+0xd0>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d10d      	bne.n	8006cd2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006cbc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	021b      	lsls	r3, r3, #8
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006cd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a14      	ldr	r2, [pc, #80]	@ (8006d28 <TIM_OC3_SetConfig+0xd0>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d113      	bne.n	8006d02 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006ce0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006ce8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	011b      	lsls	r3, r3, #4
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	011b      	lsls	r3, r3, #4
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	621a      	str	r2, [r3, #32]
}
 8006d1c:	bf00      	nop
 8006d1e:	371c      	adds	r7, #28
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr
 8006d28:	40010000 	.word	0x40010000

08006d2c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b087      	sub	sp, #28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6a1b      	ldr	r3, [r3, #32]
 8006d40:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006d62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	021b      	lsls	r3, r3, #8
 8006d6a:	68fa      	ldr	r2, [r7, #12]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006d76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	031b      	lsls	r3, r3, #12
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a10      	ldr	r2, [pc, #64]	@ (8006dc8 <TIM_OC4_SetConfig+0x9c>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d109      	bne.n	8006da0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	019b      	lsls	r3, r3, #6
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	697a      	ldr	r2, [r7, #20]
 8006da4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68fa      	ldr	r2, [r7, #12]
 8006daa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	685a      	ldr	r2, [r3, #4]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	621a      	str	r2, [r3, #32]
}
 8006dba:	bf00      	nop
 8006dbc:	371c      	adds	r7, #28
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr
 8006dc6:	bf00      	nop
 8006dc8:	40010000 	.word	0x40010000

08006dcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	f003 031f 	and.w	r3, r3, #31
 8006dde:	2201      	movs	r2, #1
 8006de0:	fa02 f303 	lsl.w	r3, r2, r3
 8006de4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	6a1a      	ldr	r2, [r3, #32]
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	43db      	mvns	r3, r3
 8006dee:	401a      	ands	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6a1a      	ldr	r2, [r3, #32]
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	f003 031f 	and.w	r3, r3, #31
 8006dfe:	6879      	ldr	r1, [r7, #4]
 8006e00:	fa01 f303 	lsl.w	r3, r1, r3
 8006e04:	431a      	orrs	r2, r3
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	621a      	str	r2, [r3, #32]
}
 8006e0a:	bf00      	nop
 8006e0c:	371c      	adds	r7, #28
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
	...

08006e18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d101      	bne.n	8006e30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e2c:	2302      	movs	r3, #2
 8006e2e:	e050      	b.n	8006ed2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8006ee0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d018      	beq.n	8006ea6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e7c:	d013      	beq.n	8006ea6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4a18      	ldr	r2, [pc, #96]	@ (8006ee4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d00e      	beq.n	8006ea6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a16      	ldr	r2, [pc, #88]	@ (8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d009      	beq.n	8006ea6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a15      	ldr	r2, [pc, #84]	@ (8006eec <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d004      	beq.n	8006ea6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a13      	ldr	r2, [pc, #76]	@ (8006ef0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d10c      	bne.n	8006ec0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006eac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	4313      	orrs	r3, r2
 8006eb6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ed0:	2300      	movs	r3, #0
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	40010000 	.word	0x40010000
 8006ee4:	40000400 	.word	0x40000400
 8006ee8:	40000800 	.word	0x40000800
 8006eec:	40000c00 	.word	0x40000c00
 8006ef0:	40014000 	.word	0x40014000

08006ef4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006efc:	bf00      	nop
 8006efe:	370c      	adds	r7, #12
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f10:	bf00      	nop
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e042      	b.n	8006fb4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d106      	bne.n	8006f48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7fb fe96 	bl	8002c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2224      	movs	r2, #36	@ 0x24
 8006f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68da      	ldr	r2, [r3, #12]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006f5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 ff77 	bl	8007e54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	691a      	ldr	r2, [r3, #16]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006f74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	695a      	ldr	r2, [r3, #20]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006f84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68da      	ldr	r2, [r3, #12]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006f94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3708      	adds	r7, #8
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b08c      	sub	sp, #48	@ 0x30
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	4613      	mov	r3, r2
 8006fc8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	2b20      	cmp	r3, #32
 8006fd4:	d156      	bne.n	8007084 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d002      	beq.n	8006fe2 <HAL_UART_Transmit_DMA+0x26>
 8006fdc:	88fb      	ldrh	r3, [r7, #6]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d101      	bne.n	8006fe6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e04f      	b.n	8007086 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8006fe6:	68ba      	ldr	r2, [r7, #8]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	88fa      	ldrh	r2, [r7, #6]
 8006ff0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	88fa      	ldrh	r2, [r7, #6]
 8006ff6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2221      	movs	r2, #33	@ 0x21
 8007002:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800700a:	4a21      	ldr	r2, [pc, #132]	@ (8007090 <HAL_UART_Transmit_DMA+0xd4>)
 800700c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007012:	4a20      	ldr	r2, [pc, #128]	@ (8007094 <HAL_UART_Transmit_DMA+0xd8>)
 8007014:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800701a:	4a1f      	ldr	r2, [pc, #124]	@ (8007098 <HAL_UART_Transmit_DMA+0xdc>)
 800701c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007022:	2200      	movs	r2, #0
 8007024:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007026:	f107 0308 	add.w	r3, r7, #8
 800702a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007032:	6819      	ldr	r1, [r3, #0]
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	3304      	adds	r3, #4
 800703a:	461a      	mov	r2, r3
 800703c:	88fb      	ldrh	r3, [r7, #6]
 800703e:	f7fc fd23 	bl	8003a88 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800704a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	3314      	adds	r3, #20
 8007052:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	e853 3f00 	ldrex	r3, [r3]
 800705a:	617b      	str	r3, [r7, #20]
   return(result);
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007062:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	3314      	adds	r3, #20
 800706a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800706c:	627a      	str	r2, [r7, #36]	@ 0x24
 800706e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007070:	6a39      	ldr	r1, [r7, #32]
 8007072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007074:	e841 2300 	strex	r3, r2, [r1]
 8007078:	61fb      	str	r3, [r7, #28]
   return(result);
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1e5      	bne.n	800704c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8007080:	2300      	movs	r3, #0
 8007082:	e000      	b.n	8007086 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8007084:	2302      	movs	r3, #2
  }
}
 8007086:	4618      	mov	r0, r3
 8007088:	3730      	adds	r7, #48	@ 0x30
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	080076e1 	.word	0x080076e1
 8007094:	0800777b 	.word	0x0800777b
 8007098:	080078ff 	.word	0x080078ff

0800709c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b08c      	sub	sp, #48	@ 0x30
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	60f8      	str	r0, [r7, #12]
 80070a4:	60b9      	str	r1, [r7, #8]
 80070a6:	4613      	mov	r3, r2
 80070a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	2b20      	cmp	r3, #32
 80070b4:	d14a      	bne.n	800714c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80070bc:	88fb      	ldrh	r3, [r7, #6]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e043      	b.n	800714e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2201      	movs	r2, #1
 80070ca:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80070d2:	88fb      	ldrh	r3, [r7, #6]
 80070d4:	461a      	mov	r2, r3
 80070d6:	68b9      	ldr	r1, [r7, #8]
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f000 fc5b 	bl	8007994 <UART_Start_Receive_DMA>
 80070de:	4603      	mov	r3, r0
 80070e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80070e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d12c      	bne.n	8007146 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d125      	bne.n	8007140 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070f4:	2300      	movs	r3, #0
 80070f6:	613b      	str	r3, [r7, #16]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	613b      	str	r3, [r7, #16]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	613b      	str	r3, [r7, #16]
 8007108:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	330c      	adds	r3, #12
 8007110:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007112:	69bb      	ldr	r3, [r7, #24]
 8007114:	e853 3f00 	ldrex	r3, [r3]
 8007118:	617b      	str	r3, [r7, #20]
   return(result);
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	f043 0310 	orr.w	r3, r3, #16
 8007120:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	330c      	adds	r3, #12
 8007128:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800712a:	627a      	str	r2, [r7, #36]	@ 0x24
 800712c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800712e:	6a39      	ldr	r1, [r7, #32]
 8007130:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007132:	e841 2300 	strex	r3, r2, [r1]
 8007136:	61fb      	str	r3, [r7, #28]
   return(result);
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d1e5      	bne.n	800710a <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800713e:	e002      	b.n	8007146 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007140:	2301      	movs	r3, #1
 8007142:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8007146:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800714a:	e000      	b.n	800714e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800714c:	2302      	movs	r3, #2
  }
}
 800714e:	4618      	mov	r0, r3
 8007150:	3730      	adds	r7, #48	@ 0x30
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
	...

08007158 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b0ba      	sub	sp, #232	@ 0xe8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68db      	ldr	r3, [r3, #12]
 8007170:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	695b      	ldr	r3, [r3, #20]
 800717a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800717e:	2300      	movs	r3, #0
 8007180:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007184:	2300      	movs	r3, #0
 8007186:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800718a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800718e:	f003 030f 	and.w	r3, r3, #15
 8007192:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007196:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800719a:	2b00      	cmp	r3, #0
 800719c:	d10f      	bne.n	80071be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800719e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071a2:	f003 0320 	and.w	r3, r3, #32
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d009      	beq.n	80071be <HAL_UART_IRQHandler+0x66>
 80071aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071ae:	f003 0320 	and.w	r3, r3, #32
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80071b6:	6878      	ldr	r0, [r7, #4]
 80071b8:	f000 fd8d 	bl	8007cd6 <UART_Receive_IT>
      return;
 80071bc:	e25b      	b.n	8007676 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80071be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	f000 80de 	beq.w	8007384 <HAL_UART_IRQHandler+0x22c>
 80071c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d106      	bne.n	80071e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80071d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f000 80d1 	beq.w	8007384 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80071e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d00b      	beq.n	8007206 <HAL_UART_IRQHandler+0xae>
 80071ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d005      	beq.n	8007206 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071fe:	f043 0201 	orr.w	r2, r3, #1
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800720a:	f003 0304 	and.w	r3, r3, #4
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00b      	beq.n	800722a <HAL_UART_IRQHandler+0xd2>
 8007212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	d005      	beq.n	800722a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007222:	f043 0202 	orr.w	r2, r3, #2
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800722a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800722e:	f003 0302 	and.w	r3, r3, #2
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00b      	beq.n	800724e <HAL_UART_IRQHandler+0xf6>
 8007236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b00      	cmp	r3, #0
 8007240:	d005      	beq.n	800724e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007246:	f043 0204 	orr.w	r2, r3, #4
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800724e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007252:	f003 0308 	and.w	r3, r3, #8
 8007256:	2b00      	cmp	r3, #0
 8007258:	d011      	beq.n	800727e <HAL_UART_IRQHandler+0x126>
 800725a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800725e:	f003 0320 	and.w	r3, r3, #32
 8007262:	2b00      	cmp	r3, #0
 8007264:	d105      	bne.n	8007272 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007266:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	2b00      	cmp	r3, #0
 8007270:	d005      	beq.n	800727e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007276:	f043 0208 	orr.w	r2, r3, #8
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007282:	2b00      	cmp	r3, #0
 8007284:	f000 81f2 	beq.w	800766c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800728c:	f003 0320 	and.w	r3, r3, #32
 8007290:	2b00      	cmp	r3, #0
 8007292:	d008      	beq.n	80072a6 <HAL_UART_IRQHandler+0x14e>
 8007294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007298:	f003 0320 	and.w	r3, r3, #32
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 fd18 	bl	8007cd6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	695b      	ldr	r3, [r3, #20]
 80072ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072b0:	2b40      	cmp	r3, #64	@ 0x40
 80072b2:	bf0c      	ite	eq
 80072b4:	2301      	moveq	r3, #1
 80072b6:	2300      	movne	r3, #0
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072c2:	f003 0308 	and.w	r3, r3, #8
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d103      	bne.n	80072d2 <HAL_UART_IRQHandler+0x17a>
 80072ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d04f      	beq.n	8007372 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f000 fc20 	bl	8007b18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	695b      	ldr	r3, [r3, #20]
 80072de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072e2:	2b40      	cmp	r3, #64	@ 0x40
 80072e4:	d141      	bne.n	800736a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	3314      	adds	r3, #20
 80072ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80072f4:	e853 3f00 	ldrex	r3, [r3]
 80072f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80072fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007300:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007304:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	3314      	adds	r3, #20
 800730e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007312:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007316:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800731e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007322:	e841 2300 	strex	r3, r2, [r1]
 8007326:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800732a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1d9      	bne.n	80072e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007336:	2b00      	cmp	r3, #0
 8007338:	d013      	beq.n	8007362 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800733e:	4a7e      	ldr	r2, [pc, #504]	@ (8007538 <HAL_UART_IRQHandler+0x3e0>)
 8007340:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007346:	4618      	mov	r0, r3
 8007348:	f7fc fc66 	bl	8003c18 <HAL_DMA_Abort_IT>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d016      	beq.n	8007380 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800735c:	4610      	mov	r0, r2
 800735e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007360:	e00e      	b.n	8007380 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f9b2 	bl	80076cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007368:	e00a      	b.n	8007380 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f9ae 	bl	80076cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007370:	e006      	b.n	8007380 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f000 f9aa 	bl	80076cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800737e:	e175      	b.n	800766c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007380:	bf00      	nop
    return;
 8007382:	e173      	b.n	800766c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007388:	2b01      	cmp	r3, #1
 800738a:	f040 814f 	bne.w	800762c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800738e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007392:	f003 0310 	and.w	r3, r3, #16
 8007396:	2b00      	cmp	r3, #0
 8007398:	f000 8148 	beq.w	800762c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800739c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073a0:	f003 0310 	and.w	r3, r3, #16
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f000 8141 	beq.w	800762c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80073aa:	2300      	movs	r3, #0
 80073ac:	60bb      	str	r3, [r7, #8]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	60bb      	str	r3, [r7, #8]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	60bb      	str	r3, [r7, #8]
 80073be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073ca:	2b40      	cmp	r3, #64	@ 0x40
 80073cc:	f040 80b6 	bne.w	800753c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80073dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f000 8145 	beq.w	8007670 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80073ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80073ee:	429a      	cmp	r2, r3
 80073f0:	f080 813e 	bcs.w	8007670 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80073fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007406:	f000 8088 	beq.w	800751a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	330c      	adds	r3, #12
 8007410:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007414:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007418:	e853 3f00 	ldrex	r3, [r3]
 800741c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007420:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007424:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007428:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	330c      	adds	r3, #12
 8007432:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007436:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800743a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800743e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007442:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007446:	e841 2300 	strex	r3, r2, [r1]
 800744a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800744e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1d9      	bne.n	800740a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	3314      	adds	r3, #20
 800745c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007460:	e853 3f00 	ldrex	r3, [r3]
 8007464:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007466:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007468:	f023 0301 	bic.w	r3, r3, #1
 800746c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	3314      	adds	r3, #20
 8007476:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800747a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800747e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007480:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007482:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007486:	e841 2300 	strex	r3, r2, [r1]
 800748a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800748c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800748e:	2b00      	cmp	r3, #0
 8007490:	d1e1      	bne.n	8007456 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	3314      	adds	r3, #20
 8007498:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800749a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800749c:	e853 3f00 	ldrex	r3, [r3]
 80074a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80074a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	3314      	adds	r3, #20
 80074b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80074b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80074b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80074bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80074be:	e841 2300 	strex	r3, r2, [r1]
 80074c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80074c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d1e3      	bne.n	8007492 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2220      	movs	r2, #32
 80074ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	330c      	adds	r3, #12
 80074de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074e2:	e853 3f00 	ldrex	r3, [r3]
 80074e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80074e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80074ea:	f023 0310 	bic.w	r3, r3, #16
 80074ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	330c      	adds	r3, #12
 80074f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80074fc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80074fe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007500:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007502:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007504:	e841 2300 	strex	r3, r2, [r1]
 8007508:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800750a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1e3      	bne.n	80074d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007514:	4618      	mov	r0, r3
 8007516:	f7fc fb0f 	bl	8003b38 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2202      	movs	r2, #2
 800751e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007528:	b29b      	uxth	r3, r3
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	b29b      	uxth	r3, r3
 800752e:	4619      	mov	r1, r3
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f7fa fef3 	bl	800231c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007536:	e09b      	b.n	8007670 <HAL_UART_IRQHandler+0x518>
 8007538:	08007bdf 	.word	0x08007bdf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007544:	b29b      	uxth	r3, r3
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007550:	b29b      	uxth	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	f000 808e 	beq.w	8007674 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007558:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800755c:	2b00      	cmp	r3, #0
 800755e:	f000 8089 	beq.w	8007674 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	330c      	adds	r3, #12
 8007568:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800756c:	e853 3f00 	ldrex	r3, [r3]
 8007570:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007572:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007574:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007578:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	330c      	adds	r3, #12
 8007582:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007586:	647a      	str	r2, [r7, #68]	@ 0x44
 8007588:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800758c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800758e:	e841 2300 	strex	r3, r2, [r1]
 8007592:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1e3      	bne.n	8007562 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	3314      	adds	r3, #20
 80075a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a4:	e853 3f00 	ldrex	r3, [r3]
 80075a8:	623b      	str	r3, [r7, #32]
   return(result);
 80075aa:	6a3b      	ldr	r3, [r7, #32]
 80075ac:	f023 0301 	bic.w	r3, r3, #1
 80075b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	3314      	adds	r3, #20
 80075ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80075be:	633a      	str	r2, [r7, #48]	@ 0x30
 80075c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80075c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075c6:	e841 2300 	strex	r3, r2, [r1]
 80075ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80075cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d1e3      	bne.n	800759a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2220      	movs	r2, #32
 80075d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	330c      	adds	r3, #12
 80075e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	e853 3f00 	ldrex	r3, [r3]
 80075ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f023 0310 	bic.w	r3, r3, #16
 80075f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	330c      	adds	r3, #12
 8007600:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007604:	61fa      	str	r2, [r7, #28]
 8007606:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007608:	69b9      	ldr	r1, [r7, #24]
 800760a:	69fa      	ldr	r2, [r7, #28]
 800760c:	e841 2300 	strex	r3, r2, [r1]
 8007610:	617b      	str	r3, [r7, #20]
   return(result);
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1e3      	bne.n	80075e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2202      	movs	r2, #2
 800761c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800761e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007622:	4619      	mov	r1, r3
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f7fa fe79 	bl	800231c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800762a:	e023      	b.n	8007674 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800762c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007630:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007634:	2b00      	cmp	r3, #0
 8007636:	d009      	beq.n	800764c <HAL_UART_IRQHandler+0x4f4>
 8007638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800763c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007640:	2b00      	cmp	r3, #0
 8007642:	d003      	beq.n	800764c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 fade 	bl	8007c06 <UART_Transmit_IT>
    return;
 800764a:	e014      	b.n	8007676 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800764c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00e      	beq.n	8007676 <HAL_UART_IRQHandler+0x51e>
 8007658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800765c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007660:	2b00      	cmp	r3, #0
 8007662:	d008      	beq.n	8007676 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f000 fb1e 	bl	8007ca6 <UART_EndTransmit_IT>
    return;
 800766a:	e004      	b.n	8007676 <HAL_UART_IRQHandler+0x51e>
    return;
 800766c:	bf00      	nop
 800766e:	e002      	b.n	8007676 <HAL_UART_IRQHandler+0x51e>
      return;
 8007670:	bf00      	nop
 8007672:	e000      	b.n	8007676 <HAL_UART_IRQHandler+0x51e>
      return;
 8007674:	bf00      	nop
  }
}
 8007676:	37e8      	adds	r7, #232	@ 0xe8
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007684:	bf00      	nop
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007698:	bf00      	nop
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80076c0:	bf00      	nop
 80076c2:	370c      	adds	r7, #12
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b090      	sub	sp, #64	@ 0x40
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d137      	bne.n	800776c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80076fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076fe:	2200      	movs	r2, #0
 8007700:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007702:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	3314      	adds	r3, #20
 8007708:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770c:	e853 3f00 	ldrex	r3, [r3]
 8007710:	623b      	str	r3, [r7, #32]
   return(result);
 8007712:	6a3b      	ldr	r3, [r7, #32]
 8007714:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007718:	63bb      	str	r3, [r7, #56]	@ 0x38
 800771a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	3314      	adds	r3, #20
 8007720:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007722:	633a      	str	r2, [r7, #48]	@ 0x30
 8007724:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007726:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007728:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800772a:	e841 2300 	strex	r3, r2, [r1]
 800772e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007732:	2b00      	cmp	r3, #0
 8007734:	d1e5      	bne.n	8007702 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007736:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	330c      	adds	r3, #12
 800773c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	e853 3f00 	ldrex	r3, [r3]
 8007744:	60fb      	str	r3, [r7, #12]
   return(result);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800774c:	637b      	str	r3, [r7, #52]	@ 0x34
 800774e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	330c      	adds	r3, #12
 8007754:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007756:	61fa      	str	r2, [r7, #28]
 8007758:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800775a:	69b9      	ldr	r1, [r7, #24]
 800775c:	69fa      	ldr	r2, [r7, #28]
 800775e:	e841 2300 	strex	r3, r2, [r1]
 8007762:	617b      	str	r3, [r7, #20]
   return(result);
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1e5      	bne.n	8007736 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800776a:	e002      	b.n	8007772 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800776c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800776e:	f7ff ff85 	bl	800767c <HAL_UART_TxCpltCallback>
}
 8007772:	bf00      	nop
 8007774:	3740      	adds	r7, #64	@ 0x40
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}

0800777a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800777a:	b580      	push	{r7, lr}
 800777c:	b084      	sub	sp, #16
 800777e:	af00      	add	r7, sp, #0
 8007780:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007786:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f7ff ff81 	bl	8007690 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800778e:	bf00      	nop
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b09c      	sub	sp, #112	@ 0x70
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d172      	bne.n	8007898 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80077b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077b4:	2200      	movs	r2, #0
 80077b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	330c      	adds	r3, #12
 80077be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077c2:	e853 3f00 	ldrex	r3, [r3]
 80077c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80077c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80077ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	330c      	adds	r3, #12
 80077d6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80077d8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80077da:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80077de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80077e0:	e841 2300 	strex	r3, r2, [r1]
 80077e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80077e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d1e5      	bne.n	80077b8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	3314      	adds	r3, #20
 80077f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f6:	e853 3f00 	ldrex	r3, [r3]
 80077fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077fe:	f023 0301 	bic.w	r3, r3, #1
 8007802:	667b      	str	r3, [r7, #100]	@ 0x64
 8007804:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	3314      	adds	r3, #20
 800780a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800780c:	647a      	str	r2, [r7, #68]	@ 0x44
 800780e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007810:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007812:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007814:	e841 2300 	strex	r3, r2, [r1]
 8007818:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800781a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1e5      	bne.n	80077ec <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007820:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	3314      	adds	r3, #20
 8007826:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782a:	e853 3f00 	ldrex	r3, [r3]
 800782e:	623b      	str	r3, [r7, #32]
   return(result);
 8007830:	6a3b      	ldr	r3, [r7, #32]
 8007832:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007836:	663b      	str	r3, [r7, #96]	@ 0x60
 8007838:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3314      	adds	r3, #20
 800783e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007840:	633a      	str	r2, [r7, #48]	@ 0x30
 8007842:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007844:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007846:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007848:	e841 2300 	strex	r3, r2, [r1]
 800784c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800784e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1e5      	bne.n	8007820 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007854:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007856:	2220      	movs	r2, #32
 8007858:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800785c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800785e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007860:	2b01      	cmp	r3, #1
 8007862:	d119      	bne.n	8007898 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007864:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	330c      	adds	r3, #12
 800786a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	e853 3f00 	ldrex	r3, [r3]
 8007872:	60fb      	str	r3, [r7, #12]
   return(result);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f023 0310 	bic.w	r3, r3, #16
 800787a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800787c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	330c      	adds	r3, #12
 8007882:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007884:	61fa      	str	r2, [r7, #28]
 8007886:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007888:	69b9      	ldr	r1, [r7, #24]
 800788a:	69fa      	ldr	r2, [r7, #28]
 800788c:	e841 2300 	strex	r3, r2, [r1]
 8007890:	617b      	str	r3, [r7, #20]
   return(result);
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d1e5      	bne.n	8007864 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007898:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800789a:	2200      	movs	r2, #0
 800789c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800789e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	d106      	bne.n	80078b4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80078a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80078aa:	4619      	mov	r1, r3
 80078ac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80078ae:	f7fa fd35 	bl	800231c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80078b2:	e002      	b.n	80078ba <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80078b4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80078b6:	f7ff fef5 	bl	80076a4 <HAL_UART_RxCpltCallback>
}
 80078ba:	bf00      	nop
 80078bc:	3770      	adds	r7, #112	@ 0x70
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}

080078c2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b084      	sub	sp, #16
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ce:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2201      	movs	r2, #1
 80078d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d108      	bne.n	80078f0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80078e2:	085b      	lsrs	r3, r3, #1
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	4619      	mov	r1, r3
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f7fa fd17 	bl	800231c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80078ee:	e002      	b.n	80078f6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f7ff fee1 	bl	80076b8 <HAL_UART_RxHalfCpltCallback>
}
 80078f6:	bf00      	nop
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}

080078fe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80078fe:	b580      	push	{r7, lr}
 8007900:	b084      	sub	sp, #16
 8007902:	af00      	add	r7, sp, #0
 8007904:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007906:	2300      	movs	r3, #0
 8007908:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800790e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	695b      	ldr	r3, [r3, #20]
 8007916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800791a:	2b80      	cmp	r3, #128	@ 0x80
 800791c:	bf0c      	ite	eq
 800791e:	2301      	moveq	r3, #1
 8007920:	2300      	movne	r3, #0
 8007922:	b2db      	uxtb	r3, r3
 8007924:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b21      	cmp	r3, #33	@ 0x21
 8007930:	d108      	bne.n	8007944 <UART_DMAError+0x46>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d005      	beq.n	8007944 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2200      	movs	r2, #0
 800793c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800793e:	68b8      	ldr	r0, [r7, #8]
 8007940:	f000 f8c2 	bl	8007ac8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800794e:	2b40      	cmp	r3, #64	@ 0x40
 8007950:	bf0c      	ite	eq
 8007952:	2301      	moveq	r3, #1
 8007954:	2300      	movne	r3, #0
 8007956:	b2db      	uxtb	r3, r3
 8007958:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b22      	cmp	r3, #34	@ 0x22
 8007964:	d108      	bne.n	8007978 <UART_DMAError+0x7a>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d005      	beq.n	8007978 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	2200      	movs	r2, #0
 8007970:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8007972:	68b8      	ldr	r0, [r7, #8]
 8007974:	f000 f8d0 	bl	8007b18 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800797c:	f043 0210 	orr.w	r2, r3, #16
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007984:	68b8      	ldr	r0, [r7, #8]
 8007986:	f7ff fea1 	bl	80076cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800798a:	bf00      	nop
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
	...

08007994 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b098      	sub	sp, #96	@ 0x60
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	4613      	mov	r3, r2
 80079a0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80079a2:	68ba      	ldr	r2, [r7, #8]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	88fa      	ldrh	r2, [r7, #6]
 80079ac:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2222      	movs	r2, #34	@ 0x22
 80079b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079c0:	4a3e      	ldr	r2, [pc, #248]	@ (8007abc <UART_Start_Receive_DMA+0x128>)
 80079c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079c8:	4a3d      	ldr	r2, [pc, #244]	@ (8007ac0 <UART_Start_Receive_DMA+0x12c>)
 80079ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079d0:	4a3c      	ldr	r2, [pc, #240]	@ (8007ac4 <UART_Start_Receive_DMA+0x130>)
 80079d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079d8:	2200      	movs	r2, #0
 80079da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80079dc:	f107 0308 	add.w	r3, r7, #8
 80079e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	3304      	adds	r3, #4
 80079ec:	4619      	mov	r1, r3
 80079ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	88fb      	ldrh	r3, [r7, #6]
 80079f4:	f7fc f848 	bl	8003a88 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80079f8:	2300      	movs	r3, #0
 80079fa:	613b      	str	r3, [r7, #16]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	613b      	str	r3, [r7, #16]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	613b      	str	r3, [r7, #16]
 8007a0c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d019      	beq.n	8007a4a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	330c      	adds	r3, #12
 8007a1c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a20:	e853 3f00 	ldrex	r3, [r3]
 8007a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a2c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	330c      	adds	r3, #12
 8007a34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a36:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8007a38:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8007a3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a3e:	e841 2300 	strex	r3, r2, [r1]
 8007a42:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007a44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1e5      	bne.n	8007a16 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	3314      	adds	r3, #20
 8007a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a54:	e853 3f00 	ldrex	r3, [r3]
 8007a58:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a5c:	f043 0301 	orr.w	r3, r3, #1
 8007a60:	657b      	str	r3, [r7, #84]	@ 0x54
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	3314      	adds	r3, #20
 8007a68:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007a6a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8007a6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a6e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007a70:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a72:	e841 2300 	strex	r3, r2, [r1]
 8007a76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d1e5      	bne.n	8007a4a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	3314      	adds	r3, #20
 8007a84:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	e853 3f00 	ldrex	r3, [r3]
 8007a8c:	617b      	str	r3, [r7, #20]
   return(result);
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a94:	653b      	str	r3, [r7, #80]	@ 0x50
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	3314      	adds	r3, #20
 8007a9c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007a9e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007aa0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa2:	6a39      	ldr	r1, [r7, #32]
 8007aa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007aa6:	e841 2300 	strex	r3, r2, [r1]
 8007aaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1e5      	bne.n	8007a7e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8007ab2:	2300      	movs	r3, #0
}
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	3760      	adds	r7, #96	@ 0x60
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	08007797 	.word	0x08007797
 8007ac0:	080078c3 	.word	0x080078c3
 8007ac4:	080078ff 	.word	0x080078ff

08007ac8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b089      	sub	sp, #36	@ 0x24
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	330c      	adds	r3, #12
 8007ad6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	e853 3f00 	ldrex	r3, [r3]
 8007ade:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007ae6:	61fb      	str	r3, [r7, #28]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	330c      	adds	r3, #12
 8007aee:	69fa      	ldr	r2, [r7, #28]
 8007af0:	61ba      	str	r2, [r7, #24]
 8007af2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af4:	6979      	ldr	r1, [r7, #20]
 8007af6:	69ba      	ldr	r2, [r7, #24]
 8007af8:	e841 2300 	strex	r3, r2, [r1]
 8007afc:	613b      	str	r3, [r7, #16]
   return(result);
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1e5      	bne.n	8007ad0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2220      	movs	r2, #32
 8007b08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007b0c:	bf00      	nop
 8007b0e:	3724      	adds	r7, #36	@ 0x24
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr

08007b18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b095      	sub	sp, #84	@ 0x54
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	330c      	adds	r3, #12
 8007b26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b2a:	e853 3f00 	ldrex	r3, [r3]
 8007b2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	330c      	adds	r3, #12
 8007b3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b40:	643a      	str	r2, [r7, #64]	@ 0x40
 8007b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b48:	e841 2300 	strex	r3, r2, [r1]
 8007b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1e5      	bne.n	8007b20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	3314      	adds	r3, #20
 8007b5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5c:	6a3b      	ldr	r3, [r7, #32]
 8007b5e:	e853 3f00 	ldrex	r3, [r3]
 8007b62:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b64:	69fb      	ldr	r3, [r7, #28]
 8007b66:	f023 0301 	bic.w	r3, r3, #1
 8007b6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	3314      	adds	r3, #20
 8007b72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007b74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b76:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b7c:	e841 2300 	strex	r3, r2, [r1]
 8007b80:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1e5      	bne.n	8007b54 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b8c:	2b01      	cmp	r3, #1
 8007b8e:	d119      	bne.n	8007bc4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	330c      	adds	r3, #12
 8007b96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	e853 3f00 	ldrex	r3, [r3]
 8007b9e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	f023 0310 	bic.w	r3, r3, #16
 8007ba6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	330c      	adds	r3, #12
 8007bae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007bb0:	61ba      	str	r2, [r7, #24]
 8007bb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb4:	6979      	ldr	r1, [r7, #20]
 8007bb6:	69ba      	ldr	r2, [r7, #24]
 8007bb8:	e841 2300 	strex	r3, r2, [r1]
 8007bbc:	613b      	str	r3, [r7, #16]
   return(result);
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1e5      	bne.n	8007b90 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2220      	movs	r2, #32
 8007bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007bd2:	bf00      	nop
 8007bd4:	3754      	adds	r7, #84	@ 0x54
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr

08007bde <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b084      	sub	sp, #16
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f7ff fd67 	bl	80076cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bfe:	bf00      	nop
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007c06:	b480      	push	{r7}
 8007c08:	b085      	sub	sp, #20
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b21      	cmp	r3, #33	@ 0x21
 8007c18:	d13e      	bne.n	8007c98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c22:	d114      	bne.n	8007c4e <UART_Transmit_IT+0x48>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d110      	bne.n	8007c4e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6a1b      	ldr	r3, [r3, #32]
 8007c30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	461a      	mov	r2, r3
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007c40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a1b      	ldr	r3, [r3, #32]
 8007c46:	1c9a      	adds	r2, r3, #2
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	621a      	str	r2, [r3, #32]
 8007c4c:	e008      	b.n	8007c60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	1c59      	adds	r1, r3, #1
 8007c54:	687a      	ldr	r2, [r7, #4]
 8007c56:	6211      	str	r1, [r2, #32]
 8007c58:	781a      	ldrb	r2, [r3, #0]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	3b01      	subs	r3, #1
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d10f      	bne.n	8007c94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	68da      	ldr	r2, [r3, #12]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007c82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	68da      	ldr	r2, [r3, #12]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007c94:	2300      	movs	r3, #0
 8007c96:	e000      	b.n	8007c9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007c98:	2302      	movs	r3, #2
  }
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3714      	adds	r7, #20
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr

08007ca6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b082      	sub	sp, #8
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68da      	ldr	r2, [r3, #12]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007cbc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2220      	movs	r2, #32
 8007cc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f7ff fcd8 	bl	800767c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}

08007cd6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007cd6:	b580      	push	{r7, lr}
 8007cd8:	b08c      	sub	sp, #48	@ 0x30
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b22      	cmp	r3, #34	@ 0x22
 8007ce8:	f040 80ae 	bne.w	8007e48 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cf4:	d117      	bne.n	8007d26 <UART_Receive_IT+0x50>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d113      	bne.n	8007d26 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d06:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d14:	b29a      	uxth	r2, r3
 8007d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d1e:	1c9a      	adds	r2, r3, #2
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	629a      	str	r2, [r3, #40]	@ 0x28
 8007d24:	e026      	b.n	8007d74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d38:	d007      	beq.n	8007d4a <UART_Receive_IT+0x74>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d10a      	bne.n	8007d58 <UART_Receive_IT+0x82>
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d106      	bne.n	8007d58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	b2da      	uxtb	r2, r3
 8007d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d54:	701a      	strb	r2, [r3, #0]
 8007d56:	e008      	b.n	8007d6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d64:	b2da      	uxtb	r2, r3
 8007d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d6e:	1c5a      	adds	r2, r3, #1
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	4619      	mov	r1, r3
 8007d82:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d15d      	bne.n	8007e44 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68da      	ldr	r2, [r3, #12]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f022 0220 	bic.w	r2, r2, #32
 8007d96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	68da      	ldr	r2, [r3, #12]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007da6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	695a      	ldr	r2, [r3, #20]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f022 0201 	bic.w	r2, r2, #1
 8007db6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2220      	movs	r2, #32
 8007dbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d135      	bne.n	8007e3a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	330c      	adds	r3, #12
 8007dda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	e853 3f00 	ldrex	r3, [r3]
 8007de2:	613b      	str	r3, [r7, #16]
   return(result);
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	f023 0310 	bic.w	r3, r3, #16
 8007dea:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	330c      	adds	r3, #12
 8007df2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007df4:	623a      	str	r2, [r7, #32]
 8007df6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df8:	69f9      	ldr	r1, [r7, #28]
 8007dfa:	6a3a      	ldr	r2, [r7, #32]
 8007dfc:	e841 2300 	strex	r3, r2, [r1]
 8007e00:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d1e5      	bne.n	8007dd4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f003 0310 	and.w	r3, r3, #16
 8007e12:	2b10      	cmp	r3, #16
 8007e14:	d10a      	bne.n	8007e2c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e16:	2300      	movs	r3, #0
 8007e18:	60fb      	str	r3, [r7, #12]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	60fb      	str	r3, [r7, #12]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	60fb      	str	r3, [r7, #12]
 8007e2a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007e30:	4619      	mov	r1, r3
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f7fa fa72 	bl	800231c <HAL_UARTEx_RxEventCallback>
 8007e38:	e002      	b.n	8007e40 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f7ff fc32 	bl	80076a4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007e40:	2300      	movs	r3, #0
 8007e42:	e002      	b.n	8007e4a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007e44:	2300      	movs	r3, #0
 8007e46:	e000      	b.n	8007e4a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007e48:	2302      	movs	r3, #2
  }
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3730      	adds	r7, #48	@ 0x30
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}
	...

08007e54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e58:	b0c0      	sub	sp, #256	@ 0x100
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	691b      	ldr	r3, [r3, #16]
 8007e68:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e70:	68d9      	ldr	r1, [r3, #12]
 8007e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	ea40 0301 	orr.w	r3, r0, r1
 8007e7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e82:	689a      	ldr	r2, [r3, #8]
 8007e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	431a      	orrs	r2, r3
 8007e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e90:	695b      	ldr	r3, [r3, #20]
 8007e92:	431a      	orrs	r2, r3
 8007e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e98:	69db      	ldr	r3, [r3, #28]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007eac:	f021 010c 	bic.w	r1, r1, #12
 8007eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007eba:	430b      	orrs	r3, r1
 8007ebc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007ebe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ece:	6999      	ldr	r1, [r3, #24]
 8007ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	ea40 0301 	orr.w	r3, r0, r1
 8007eda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	4b8f      	ldr	r3, [pc, #572]	@ (8008120 <UART_SetConfig+0x2cc>)
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d005      	beq.n	8007ef4 <UART_SetConfig+0xa0>
 8007ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	4b8d      	ldr	r3, [pc, #564]	@ (8008124 <UART_SetConfig+0x2d0>)
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d104      	bne.n	8007efe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ef4:	f7fe f958 	bl	80061a8 <HAL_RCC_GetPCLK2Freq>
 8007ef8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007efc:	e003      	b.n	8007f06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007efe:	f7fe f93f 	bl	8006180 <HAL_RCC_GetPCLK1Freq>
 8007f02:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f0a:	69db      	ldr	r3, [r3, #28]
 8007f0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f10:	f040 810c 	bne.w	800812c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007f14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007f1e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007f22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007f26:	4622      	mov	r2, r4
 8007f28:	462b      	mov	r3, r5
 8007f2a:	1891      	adds	r1, r2, r2
 8007f2c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007f2e:	415b      	adcs	r3, r3
 8007f30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007f36:	4621      	mov	r1, r4
 8007f38:	eb12 0801 	adds.w	r8, r2, r1
 8007f3c:	4629      	mov	r1, r5
 8007f3e:	eb43 0901 	adc.w	r9, r3, r1
 8007f42:	f04f 0200 	mov.w	r2, #0
 8007f46:	f04f 0300 	mov.w	r3, #0
 8007f4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007f4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007f52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007f56:	4690      	mov	r8, r2
 8007f58:	4699      	mov	r9, r3
 8007f5a:	4623      	mov	r3, r4
 8007f5c:	eb18 0303 	adds.w	r3, r8, r3
 8007f60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007f64:	462b      	mov	r3, r5
 8007f66:	eb49 0303 	adc.w	r3, r9, r3
 8007f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007f7a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007f7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007f82:	460b      	mov	r3, r1
 8007f84:	18db      	adds	r3, r3, r3
 8007f86:	653b      	str	r3, [r7, #80]	@ 0x50
 8007f88:	4613      	mov	r3, r2
 8007f8a:	eb42 0303 	adc.w	r3, r2, r3
 8007f8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007f90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007f94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007f98:	f7f8 fe8e 	bl	8000cb8 <__aeabi_uldivmod>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	4b61      	ldr	r3, [pc, #388]	@ (8008128 <UART_SetConfig+0x2d4>)
 8007fa2:	fba3 2302 	umull	r2, r3, r3, r2
 8007fa6:	095b      	lsrs	r3, r3, #5
 8007fa8:	011c      	lsls	r4, r3, #4
 8007faa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007fb4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007fb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007fbc:	4642      	mov	r2, r8
 8007fbe:	464b      	mov	r3, r9
 8007fc0:	1891      	adds	r1, r2, r2
 8007fc2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007fc4:	415b      	adcs	r3, r3
 8007fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007fcc:	4641      	mov	r1, r8
 8007fce:	eb12 0a01 	adds.w	sl, r2, r1
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	eb43 0b01 	adc.w	fp, r3, r1
 8007fd8:	f04f 0200 	mov.w	r2, #0
 8007fdc:	f04f 0300 	mov.w	r3, #0
 8007fe0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007fe4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007fe8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007fec:	4692      	mov	sl, r2
 8007fee:	469b      	mov	fp, r3
 8007ff0:	4643      	mov	r3, r8
 8007ff2:	eb1a 0303 	adds.w	r3, sl, r3
 8007ff6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ffa:	464b      	mov	r3, r9
 8007ffc:	eb4b 0303 	adc.w	r3, fp, r3
 8008000:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	2200      	movs	r2, #0
 800800c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008010:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008014:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008018:	460b      	mov	r3, r1
 800801a:	18db      	adds	r3, r3, r3
 800801c:	643b      	str	r3, [r7, #64]	@ 0x40
 800801e:	4613      	mov	r3, r2
 8008020:	eb42 0303 	adc.w	r3, r2, r3
 8008024:	647b      	str	r3, [r7, #68]	@ 0x44
 8008026:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800802a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800802e:	f7f8 fe43 	bl	8000cb8 <__aeabi_uldivmod>
 8008032:	4602      	mov	r2, r0
 8008034:	460b      	mov	r3, r1
 8008036:	4611      	mov	r1, r2
 8008038:	4b3b      	ldr	r3, [pc, #236]	@ (8008128 <UART_SetConfig+0x2d4>)
 800803a:	fba3 2301 	umull	r2, r3, r3, r1
 800803e:	095b      	lsrs	r3, r3, #5
 8008040:	2264      	movs	r2, #100	@ 0x64
 8008042:	fb02 f303 	mul.w	r3, r2, r3
 8008046:	1acb      	subs	r3, r1, r3
 8008048:	00db      	lsls	r3, r3, #3
 800804a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800804e:	4b36      	ldr	r3, [pc, #216]	@ (8008128 <UART_SetConfig+0x2d4>)
 8008050:	fba3 2302 	umull	r2, r3, r3, r2
 8008054:	095b      	lsrs	r3, r3, #5
 8008056:	005b      	lsls	r3, r3, #1
 8008058:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800805c:	441c      	add	r4, r3
 800805e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008062:	2200      	movs	r2, #0
 8008064:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008068:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800806c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008070:	4642      	mov	r2, r8
 8008072:	464b      	mov	r3, r9
 8008074:	1891      	adds	r1, r2, r2
 8008076:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008078:	415b      	adcs	r3, r3
 800807a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800807c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008080:	4641      	mov	r1, r8
 8008082:	1851      	adds	r1, r2, r1
 8008084:	6339      	str	r1, [r7, #48]	@ 0x30
 8008086:	4649      	mov	r1, r9
 8008088:	414b      	adcs	r3, r1
 800808a:	637b      	str	r3, [r7, #52]	@ 0x34
 800808c:	f04f 0200 	mov.w	r2, #0
 8008090:	f04f 0300 	mov.w	r3, #0
 8008094:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008098:	4659      	mov	r1, fp
 800809a:	00cb      	lsls	r3, r1, #3
 800809c:	4651      	mov	r1, sl
 800809e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080a2:	4651      	mov	r1, sl
 80080a4:	00ca      	lsls	r2, r1, #3
 80080a6:	4610      	mov	r0, r2
 80080a8:	4619      	mov	r1, r3
 80080aa:	4603      	mov	r3, r0
 80080ac:	4642      	mov	r2, r8
 80080ae:	189b      	adds	r3, r3, r2
 80080b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80080b4:	464b      	mov	r3, r9
 80080b6:	460a      	mov	r2, r1
 80080b8:	eb42 0303 	adc.w	r3, r2, r3
 80080bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80080c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80080cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80080d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80080d4:	460b      	mov	r3, r1
 80080d6:	18db      	adds	r3, r3, r3
 80080d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80080da:	4613      	mov	r3, r2
 80080dc:	eb42 0303 	adc.w	r3, r2, r3
 80080e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80080e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80080ea:	f7f8 fde5 	bl	8000cb8 <__aeabi_uldivmod>
 80080ee:	4602      	mov	r2, r0
 80080f0:	460b      	mov	r3, r1
 80080f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008128 <UART_SetConfig+0x2d4>)
 80080f4:	fba3 1302 	umull	r1, r3, r3, r2
 80080f8:	095b      	lsrs	r3, r3, #5
 80080fa:	2164      	movs	r1, #100	@ 0x64
 80080fc:	fb01 f303 	mul.w	r3, r1, r3
 8008100:	1ad3      	subs	r3, r2, r3
 8008102:	00db      	lsls	r3, r3, #3
 8008104:	3332      	adds	r3, #50	@ 0x32
 8008106:	4a08      	ldr	r2, [pc, #32]	@ (8008128 <UART_SetConfig+0x2d4>)
 8008108:	fba2 2303 	umull	r2, r3, r2, r3
 800810c:	095b      	lsrs	r3, r3, #5
 800810e:	f003 0207 	and.w	r2, r3, #7
 8008112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4422      	add	r2, r4
 800811a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800811c:	e106      	b.n	800832c <UART_SetConfig+0x4d8>
 800811e:	bf00      	nop
 8008120:	40011000 	.word	0x40011000
 8008124:	40011400 	.word	0x40011400
 8008128:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800812c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008130:	2200      	movs	r2, #0
 8008132:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008136:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800813a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800813e:	4642      	mov	r2, r8
 8008140:	464b      	mov	r3, r9
 8008142:	1891      	adds	r1, r2, r2
 8008144:	6239      	str	r1, [r7, #32]
 8008146:	415b      	adcs	r3, r3
 8008148:	627b      	str	r3, [r7, #36]	@ 0x24
 800814a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800814e:	4641      	mov	r1, r8
 8008150:	1854      	adds	r4, r2, r1
 8008152:	4649      	mov	r1, r9
 8008154:	eb43 0501 	adc.w	r5, r3, r1
 8008158:	f04f 0200 	mov.w	r2, #0
 800815c:	f04f 0300 	mov.w	r3, #0
 8008160:	00eb      	lsls	r3, r5, #3
 8008162:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008166:	00e2      	lsls	r2, r4, #3
 8008168:	4614      	mov	r4, r2
 800816a:	461d      	mov	r5, r3
 800816c:	4643      	mov	r3, r8
 800816e:	18e3      	adds	r3, r4, r3
 8008170:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008174:	464b      	mov	r3, r9
 8008176:	eb45 0303 	adc.w	r3, r5, r3
 800817a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800817e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	2200      	movs	r2, #0
 8008186:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800818a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800818e:	f04f 0200 	mov.w	r2, #0
 8008192:	f04f 0300 	mov.w	r3, #0
 8008196:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800819a:	4629      	mov	r1, r5
 800819c:	008b      	lsls	r3, r1, #2
 800819e:	4621      	mov	r1, r4
 80081a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80081a4:	4621      	mov	r1, r4
 80081a6:	008a      	lsls	r2, r1, #2
 80081a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80081ac:	f7f8 fd84 	bl	8000cb8 <__aeabi_uldivmod>
 80081b0:	4602      	mov	r2, r0
 80081b2:	460b      	mov	r3, r1
 80081b4:	4b60      	ldr	r3, [pc, #384]	@ (8008338 <UART_SetConfig+0x4e4>)
 80081b6:	fba3 2302 	umull	r2, r3, r3, r2
 80081ba:	095b      	lsrs	r3, r3, #5
 80081bc:	011c      	lsls	r4, r3, #4
 80081be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081c2:	2200      	movs	r2, #0
 80081c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80081c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80081cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80081d0:	4642      	mov	r2, r8
 80081d2:	464b      	mov	r3, r9
 80081d4:	1891      	adds	r1, r2, r2
 80081d6:	61b9      	str	r1, [r7, #24]
 80081d8:	415b      	adcs	r3, r3
 80081da:	61fb      	str	r3, [r7, #28]
 80081dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081e0:	4641      	mov	r1, r8
 80081e2:	1851      	adds	r1, r2, r1
 80081e4:	6139      	str	r1, [r7, #16]
 80081e6:	4649      	mov	r1, r9
 80081e8:	414b      	adcs	r3, r1
 80081ea:	617b      	str	r3, [r7, #20]
 80081ec:	f04f 0200 	mov.w	r2, #0
 80081f0:	f04f 0300 	mov.w	r3, #0
 80081f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80081f8:	4659      	mov	r1, fp
 80081fa:	00cb      	lsls	r3, r1, #3
 80081fc:	4651      	mov	r1, sl
 80081fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008202:	4651      	mov	r1, sl
 8008204:	00ca      	lsls	r2, r1, #3
 8008206:	4610      	mov	r0, r2
 8008208:	4619      	mov	r1, r3
 800820a:	4603      	mov	r3, r0
 800820c:	4642      	mov	r2, r8
 800820e:	189b      	adds	r3, r3, r2
 8008210:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008214:	464b      	mov	r3, r9
 8008216:	460a      	mov	r2, r1
 8008218:	eb42 0303 	adc.w	r3, r2, r3
 800821c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	67bb      	str	r3, [r7, #120]	@ 0x78
 800822a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800822c:	f04f 0200 	mov.w	r2, #0
 8008230:	f04f 0300 	mov.w	r3, #0
 8008234:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008238:	4649      	mov	r1, r9
 800823a:	008b      	lsls	r3, r1, #2
 800823c:	4641      	mov	r1, r8
 800823e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008242:	4641      	mov	r1, r8
 8008244:	008a      	lsls	r2, r1, #2
 8008246:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800824a:	f7f8 fd35 	bl	8000cb8 <__aeabi_uldivmod>
 800824e:	4602      	mov	r2, r0
 8008250:	460b      	mov	r3, r1
 8008252:	4611      	mov	r1, r2
 8008254:	4b38      	ldr	r3, [pc, #224]	@ (8008338 <UART_SetConfig+0x4e4>)
 8008256:	fba3 2301 	umull	r2, r3, r3, r1
 800825a:	095b      	lsrs	r3, r3, #5
 800825c:	2264      	movs	r2, #100	@ 0x64
 800825e:	fb02 f303 	mul.w	r3, r2, r3
 8008262:	1acb      	subs	r3, r1, r3
 8008264:	011b      	lsls	r3, r3, #4
 8008266:	3332      	adds	r3, #50	@ 0x32
 8008268:	4a33      	ldr	r2, [pc, #204]	@ (8008338 <UART_SetConfig+0x4e4>)
 800826a:	fba2 2303 	umull	r2, r3, r2, r3
 800826e:	095b      	lsrs	r3, r3, #5
 8008270:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008274:	441c      	add	r4, r3
 8008276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800827a:	2200      	movs	r2, #0
 800827c:	673b      	str	r3, [r7, #112]	@ 0x70
 800827e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008280:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008284:	4642      	mov	r2, r8
 8008286:	464b      	mov	r3, r9
 8008288:	1891      	adds	r1, r2, r2
 800828a:	60b9      	str	r1, [r7, #8]
 800828c:	415b      	adcs	r3, r3
 800828e:	60fb      	str	r3, [r7, #12]
 8008290:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008294:	4641      	mov	r1, r8
 8008296:	1851      	adds	r1, r2, r1
 8008298:	6039      	str	r1, [r7, #0]
 800829a:	4649      	mov	r1, r9
 800829c:	414b      	adcs	r3, r1
 800829e:	607b      	str	r3, [r7, #4]
 80082a0:	f04f 0200 	mov.w	r2, #0
 80082a4:	f04f 0300 	mov.w	r3, #0
 80082a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80082ac:	4659      	mov	r1, fp
 80082ae:	00cb      	lsls	r3, r1, #3
 80082b0:	4651      	mov	r1, sl
 80082b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80082b6:	4651      	mov	r1, sl
 80082b8:	00ca      	lsls	r2, r1, #3
 80082ba:	4610      	mov	r0, r2
 80082bc:	4619      	mov	r1, r3
 80082be:	4603      	mov	r3, r0
 80082c0:	4642      	mov	r2, r8
 80082c2:	189b      	adds	r3, r3, r2
 80082c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80082c6:	464b      	mov	r3, r9
 80082c8:	460a      	mov	r2, r1
 80082ca:	eb42 0303 	adc.w	r3, r2, r3
 80082ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80082d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80082da:	667a      	str	r2, [r7, #100]	@ 0x64
 80082dc:	f04f 0200 	mov.w	r2, #0
 80082e0:	f04f 0300 	mov.w	r3, #0
 80082e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80082e8:	4649      	mov	r1, r9
 80082ea:	008b      	lsls	r3, r1, #2
 80082ec:	4641      	mov	r1, r8
 80082ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80082f2:	4641      	mov	r1, r8
 80082f4:	008a      	lsls	r2, r1, #2
 80082f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80082fa:	f7f8 fcdd 	bl	8000cb8 <__aeabi_uldivmod>
 80082fe:	4602      	mov	r2, r0
 8008300:	460b      	mov	r3, r1
 8008302:	4b0d      	ldr	r3, [pc, #52]	@ (8008338 <UART_SetConfig+0x4e4>)
 8008304:	fba3 1302 	umull	r1, r3, r3, r2
 8008308:	095b      	lsrs	r3, r3, #5
 800830a:	2164      	movs	r1, #100	@ 0x64
 800830c:	fb01 f303 	mul.w	r3, r1, r3
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	011b      	lsls	r3, r3, #4
 8008314:	3332      	adds	r3, #50	@ 0x32
 8008316:	4a08      	ldr	r2, [pc, #32]	@ (8008338 <UART_SetConfig+0x4e4>)
 8008318:	fba2 2303 	umull	r2, r3, r2, r3
 800831c:	095b      	lsrs	r3, r3, #5
 800831e:	f003 020f 	and.w	r2, r3, #15
 8008322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4422      	add	r2, r4
 800832a:	609a      	str	r2, [r3, #8]
}
 800832c:	bf00      	nop
 800832e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008332:	46bd      	mov	sp, r7
 8008334:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008338:	51eb851f 	.word	0x51eb851f

0800833c <atof>:
 800833c:	2100      	movs	r1, #0
 800833e:	f000 be09 	b.w	8008f54 <strtod>

08008342 <sulp>:
 8008342:	b570      	push	{r4, r5, r6, lr}
 8008344:	4604      	mov	r4, r0
 8008346:	460d      	mov	r5, r1
 8008348:	ec45 4b10 	vmov	d0, r4, r5
 800834c:	4616      	mov	r6, r2
 800834e:	f003 fce3 	bl	800bd18 <__ulp>
 8008352:	ec51 0b10 	vmov	r0, r1, d0
 8008356:	b17e      	cbz	r6, 8008378 <sulp+0x36>
 8008358:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800835c:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008360:	2b00      	cmp	r3, #0
 8008362:	dd09      	ble.n	8008378 <sulp+0x36>
 8008364:	051b      	lsls	r3, r3, #20
 8008366:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800836a:	2400      	movs	r4, #0
 800836c:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008370:	4622      	mov	r2, r4
 8008372:	462b      	mov	r3, r5
 8008374:	f7f8 f958 	bl	8000628 <__aeabi_dmul>
 8008378:	ec41 0b10 	vmov	d0, r0, r1
 800837c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008380 <_strtod_l>:
 8008380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008384:	b09f      	sub	sp, #124	@ 0x7c
 8008386:	460c      	mov	r4, r1
 8008388:	9217      	str	r2, [sp, #92]	@ 0x5c
 800838a:	2200      	movs	r2, #0
 800838c:	921a      	str	r2, [sp, #104]	@ 0x68
 800838e:	9005      	str	r0, [sp, #20]
 8008390:	f04f 0a00 	mov.w	sl, #0
 8008394:	f04f 0b00 	mov.w	fp, #0
 8008398:	460a      	mov	r2, r1
 800839a:	9219      	str	r2, [sp, #100]	@ 0x64
 800839c:	7811      	ldrb	r1, [r2, #0]
 800839e:	292b      	cmp	r1, #43	@ 0x2b
 80083a0:	d04a      	beq.n	8008438 <_strtod_l+0xb8>
 80083a2:	d838      	bhi.n	8008416 <_strtod_l+0x96>
 80083a4:	290d      	cmp	r1, #13
 80083a6:	d832      	bhi.n	800840e <_strtod_l+0x8e>
 80083a8:	2908      	cmp	r1, #8
 80083aa:	d832      	bhi.n	8008412 <_strtod_l+0x92>
 80083ac:	2900      	cmp	r1, #0
 80083ae:	d03b      	beq.n	8008428 <_strtod_l+0xa8>
 80083b0:	2200      	movs	r2, #0
 80083b2:	920e      	str	r2, [sp, #56]	@ 0x38
 80083b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80083b6:	782a      	ldrb	r2, [r5, #0]
 80083b8:	2a30      	cmp	r2, #48	@ 0x30
 80083ba:	f040 80b2 	bne.w	8008522 <_strtod_l+0x1a2>
 80083be:	786a      	ldrb	r2, [r5, #1]
 80083c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80083c4:	2a58      	cmp	r2, #88	@ 0x58
 80083c6:	d16e      	bne.n	80084a6 <_strtod_l+0x126>
 80083c8:	9302      	str	r3, [sp, #8]
 80083ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083cc:	9301      	str	r3, [sp, #4]
 80083ce:	ab1a      	add	r3, sp, #104	@ 0x68
 80083d0:	9300      	str	r3, [sp, #0]
 80083d2:	4a8f      	ldr	r2, [pc, #572]	@ (8008610 <_strtod_l+0x290>)
 80083d4:	9805      	ldr	r0, [sp, #20]
 80083d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80083d8:	a919      	add	r1, sp, #100	@ 0x64
 80083da:	f002 fd97 	bl	800af0c <__gethex>
 80083de:	f010 060f 	ands.w	r6, r0, #15
 80083e2:	4604      	mov	r4, r0
 80083e4:	d005      	beq.n	80083f2 <_strtod_l+0x72>
 80083e6:	2e06      	cmp	r6, #6
 80083e8:	d128      	bne.n	800843c <_strtod_l+0xbc>
 80083ea:	3501      	adds	r5, #1
 80083ec:	2300      	movs	r3, #0
 80083ee:	9519      	str	r5, [sp, #100]	@ 0x64
 80083f0:	930e      	str	r3, [sp, #56]	@ 0x38
 80083f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f040 858e 	bne.w	8008f16 <_strtod_l+0xb96>
 80083fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083fc:	b1cb      	cbz	r3, 8008432 <_strtod_l+0xb2>
 80083fe:	4652      	mov	r2, sl
 8008400:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008404:	ec43 2b10 	vmov	d0, r2, r3
 8008408:	b01f      	add	sp, #124	@ 0x7c
 800840a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800840e:	2920      	cmp	r1, #32
 8008410:	d1ce      	bne.n	80083b0 <_strtod_l+0x30>
 8008412:	3201      	adds	r2, #1
 8008414:	e7c1      	b.n	800839a <_strtod_l+0x1a>
 8008416:	292d      	cmp	r1, #45	@ 0x2d
 8008418:	d1ca      	bne.n	80083b0 <_strtod_l+0x30>
 800841a:	2101      	movs	r1, #1
 800841c:	910e      	str	r1, [sp, #56]	@ 0x38
 800841e:	1c51      	adds	r1, r2, #1
 8008420:	9119      	str	r1, [sp, #100]	@ 0x64
 8008422:	7852      	ldrb	r2, [r2, #1]
 8008424:	2a00      	cmp	r2, #0
 8008426:	d1c5      	bne.n	80083b4 <_strtod_l+0x34>
 8008428:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800842a:	9419      	str	r4, [sp, #100]	@ 0x64
 800842c:	2b00      	cmp	r3, #0
 800842e:	f040 8570 	bne.w	8008f12 <_strtod_l+0xb92>
 8008432:	4652      	mov	r2, sl
 8008434:	465b      	mov	r3, fp
 8008436:	e7e5      	b.n	8008404 <_strtod_l+0x84>
 8008438:	2100      	movs	r1, #0
 800843a:	e7ef      	b.n	800841c <_strtod_l+0x9c>
 800843c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800843e:	b13a      	cbz	r2, 8008450 <_strtod_l+0xd0>
 8008440:	2135      	movs	r1, #53	@ 0x35
 8008442:	a81c      	add	r0, sp, #112	@ 0x70
 8008444:	f003 fd62 	bl	800bf0c <__copybits>
 8008448:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800844a:	9805      	ldr	r0, [sp, #20]
 800844c:	f003 f938 	bl	800b6c0 <_Bfree>
 8008450:	3e01      	subs	r6, #1
 8008452:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008454:	2e04      	cmp	r6, #4
 8008456:	d806      	bhi.n	8008466 <_strtod_l+0xe6>
 8008458:	e8df f006 	tbb	[pc, r6]
 800845c:	201d0314 	.word	0x201d0314
 8008460:	14          	.byte	0x14
 8008461:	00          	.byte	0x00
 8008462:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008466:	05e1      	lsls	r1, r4, #23
 8008468:	bf48      	it	mi
 800846a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800846e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008472:	0d1b      	lsrs	r3, r3, #20
 8008474:	051b      	lsls	r3, r3, #20
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1bb      	bne.n	80083f2 <_strtod_l+0x72>
 800847a:	f001 fdd5 	bl	800a028 <__errno>
 800847e:	2322      	movs	r3, #34	@ 0x22
 8008480:	6003      	str	r3, [r0, #0]
 8008482:	e7b6      	b.n	80083f2 <_strtod_l+0x72>
 8008484:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008488:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800848c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008490:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008494:	e7e7      	b.n	8008466 <_strtod_l+0xe6>
 8008496:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8008618 <_strtod_l+0x298>
 800849a:	e7e4      	b.n	8008466 <_strtod_l+0xe6>
 800849c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80084a0:	f04f 3aff 	mov.w	sl, #4294967295
 80084a4:	e7df      	b.n	8008466 <_strtod_l+0xe6>
 80084a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084a8:	1c5a      	adds	r2, r3, #1
 80084aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80084ac:	785b      	ldrb	r3, [r3, #1]
 80084ae:	2b30      	cmp	r3, #48	@ 0x30
 80084b0:	d0f9      	beq.n	80084a6 <_strtod_l+0x126>
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d09d      	beq.n	80083f2 <_strtod_l+0x72>
 80084b6:	2301      	movs	r3, #1
 80084b8:	2700      	movs	r7, #0
 80084ba:	9308      	str	r3, [sp, #32]
 80084bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80084be:	930c      	str	r3, [sp, #48]	@ 0x30
 80084c0:	970b      	str	r7, [sp, #44]	@ 0x2c
 80084c2:	46b9      	mov	r9, r7
 80084c4:	220a      	movs	r2, #10
 80084c6:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80084c8:	7805      	ldrb	r5, [r0, #0]
 80084ca:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80084ce:	b2d9      	uxtb	r1, r3
 80084d0:	2909      	cmp	r1, #9
 80084d2:	d928      	bls.n	8008526 <_strtod_l+0x1a6>
 80084d4:	494f      	ldr	r1, [pc, #316]	@ (8008614 <_strtod_l+0x294>)
 80084d6:	2201      	movs	r2, #1
 80084d8:	f001 fcdb 	bl	8009e92 <strncmp>
 80084dc:	2800      	cmp	r0, #0
 80084de:	d032      	beq.n	8008546 <_strtod_l+0x1c6>
 80084e0:	2000      	movs	r0, #0
 80084e2:	462a      	mov	r2, r5
 80084e4:	900a      	str	r0, [sp, #40]	@ 0x28
 80084e6:	464d      	mov	r5, r9
 80084e8:	4603      	mov	r3, r0
 80084ea:	2a65      	cmp	r2, #101	@ 0x65
 80084ec:	d001      	beq.n	80084f2 <_strtod_l+0x172>
 80084ee:	2a45      	cmp	r2, #69	@ 0x45
 80084f0:	d114      	bne.n	800851c <_strtod_l+0x19c>
 80084f2:	b91d      	cbnz	r5, 80084fc <_strtod_l+0x17c>
 80084f4:	9a08      	ldr	r2, [sp, #32]
 80084f6:	4302      	orrs	r2, r0
 80084f8:	d096      	beq.n	8008428 <_strtod_l+0xa8>
 80084fa:	2500      	movs	r5, #0
 80084fc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80084fe:	1c62      	adds	r2, r4, #1
 8008500:	9219      	str	r2, [sp, #100]	@ 0x64
 8008502:	7862      	ldrb	r2, [r4, #1]
 8008504:	2a2b      	cmp	r2, #43	@ 0x2b
 8008506:	d07a      	beq.n	80085fe <_strtod_l+0x27e>
 8008508:	2a2d      	cmp	r2, #45	@ 0x2d
 800850a:	d07e      	beq.n	800860a <_strtod_l+0x28a>
 800850c:	f04f 0c00 	mov.w	ip, #0
 8008510:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008514:	2909      	cmp	r1, #9
 8008516:	f240 8085 	bls.w	8008624 <_strtod_l+0x2a4>
 800851a:	9419      	str	r4, [sp, #100]	@ 0x64
 800851c:	f04f 0800 	mov.w	r8, #0
 8008520:	e0a5      	b.n	800866e <_strtod_l+0x2ee>
 8008522:	2300      	movs	r3, #0
 8008524:	e7c8      	b.n	80084b8 <_strtod_l+0x138>
 8008526:	f1b9 0f08 	cmp.w	r9, #8
 800852a:	bfd8      	it	le
 800852c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800852e:	f100 0001 	add.w	r0, r0, #1
 8008532:	bfda      	itte	le
 8008534:	fb02 3301 	mlale	r3, r2, r1, r3
 8008538:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800853a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800853e:	f109 0901 	add.w	r9, r9, #1
 8008542:	9019      	str	r0, [sp, #100]	@ 0x64
 8008544:	e7bf      	b.n	80084c6 <_strtod_l+0x146>
 8008546:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008548:	1c5a      	adds	r2, r3, #1
 800854a:	9219      	str	r2, [sp, #100]	@ 0x64
 800854c:	785a      	ldrb	r2, [r3, #1]
 800854e:	f1b9 0f00 	cmp.w	r9, #0
 8008552:	d03b      	beq.n	80085cc <_strtod_l+0x24c>
 8008554:	900a      	str	r0, [sp, #40]	@ 0x28
 8008556:	464d      	mov	r5, r9
 8008558:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800855c:	2b09      	cmp	r3, #9
 800855e:	d912      	bls.n	8008586 <_strtod_l+0x206>
 8008560:	2301      	movs	r3, #1
 8008562:	e7c2      	b.n	80084ea <_strtod_l+0x16a>
 8008564:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008566:	1c5a      	adds	r2, r3, #1
 8008568:	9219      	str	r2, [sp, #100]	@ 0x64
 800856a:	785a      	ldrb	r2, [r3, #1]
 800856c:	3001      	adds	r0, #1
 800856e:	2a30      	cmp	r2, #48	@ 0x30
 8008570:	d0f8      	beq.n	8008564 <_strtod_l+0x1e4>
 8008572:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008576:	2b08      	cmp	r3, #8
 8008578:	f200 84d2 	bhi.w	8008f20 <_strtod_l+0xba0>
 800857c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800857e:	900a      	str	r0, [sp, #40]	@ 0x28
 8008580:	2000      	movs	r0, #0
 8008582:	930c      	str	r3, [sp, #48]	@ 0x30
 8008584:	4605      	mov	r5, r0
 8008586:	3a30      	subs	r2, #48	@ 0x30
 8008588:	f100 0301 	add.w	r3, r0, #1
 800858c:	d018      	beq.n	80085c0 <_strtod_l+0x240>
 800858e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008590:	4419      	add	r1, r3
 8008592:	910a      	str	r1, [sp, #40]	@ 0x28
 8008594:	462e      	mov	r6, r5
 8008596:	f04f 0e0a 	mov.w	lr, #10
 800859a:	1c71      	adds	r1, r6, #1
 800859c:	eba1 0c05 	sub.w	ip, r1, r5
 80085a0:	4563      	cmp	r3, ip
 80085a2:	dc15      	bgt.n	80085d0 <_strtod_l+0x250>
 80085a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80085a8:	182b      	adds	r3, r5, r0
 80085aa:	2b08      	cmp	r3, #8
 80085ac:	f105 0501 	add.w	r5, r5, #1
 80085b0:	4405      	add	r5, r0
 80085b2:	dc1a      	bgt.n	80085ea <_strtod_l+0x26a>
 80085b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80085b6:	230a      	movs	r3, #10
 80085b8:	fb03 2301 	mla	r3, r3, r1, r2
 80085bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80085be:	2300      	movs	r3, #0
 80085c0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80085c2:	1c51      	adds	r1, r2, #1
 80085c4:	9119      	str	r1, [sp, #100]	@ 0x64
 80085c6:	7852      	ldrb	r2, [r2, #1]
 80085c8:	4618      	mov	r0, r3
 80085ca:	e7c5      	b.n	8008558 <_strtod_l+0x1d8>
 80085cc:	4648      	mov	r0, r9
 80085ce:	e7ce      	b.n	800856e <_strtod_l+0x1ee>
 80085d0:	2e08      	cmp	r6, #8
 80085d2:	dc05      	bgt.n	80085e0 <_strtod_l+0x260>
 80085d4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80085d6:	fb0e f606 	mul.w	r6, lr, r6
 80085da:	960b      	str	r6, [sp, #44]	@ 0x2c
 80085dc:	460e      	mov	r6, r1
 80085de:	e7dc      	b.n	800859a <_strtod_l+0x21a>
 80085e0:	2910      	cmp	r1, #16
 80085e2:	bfd8      	it	le
 80085e4:	fb0e f707 	mulle.w	r7, lr, r7
 80085e8:	e7f8      	b.n	80085dc <_strtod_l+0x25c>
 80085ea:	2b0f      	cmp	r3, #15
 80085ec:	bfdc      	itt	le
 80085ee:	230a      	movle	r3, #10
 80085f0:	fb03 2707 	mlale	r7, r3, r7, r2
 80085f4:	e7e3      	b.n	80085be <_strtod_l+0x23e>
 80085f6:	2300      	movs	r3, #0
 80085f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80085fa:	2301      	movs	r3, #1
 80085fc:	e77a      	b.n	80084f4 <_strtod_l+0x174>
 80085fe:	f04f 0c00 	mov.w	ip, #0
 8008602:	1ca2      	adds	r2, r4, #2
 8008604:	9219      	str	r2, [sp, #100]	@ 0x64
 8008606:	78a2      	ldrb	r2, [r4, #2]
 8008608:	e782      	b.n	8008510 <_strtod_l+0x190>
 800860a:	f04f 0c01 	mov.w	ip, #1
 800860e:	e7f8      	b.n	8008602 <_strtod_l+0x282>
 8008610:	0800d0dc 	.word	0x0800d0dc
 8008614:	0800ce98 	.word	0x0800ce98
 8008618:	7ff00000 	.word	0x7ff00000
 800861c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800861e:	1c51      	adds	r1, r2, #1
 8008620:	9119      	str	r1, [sp, #100]	@ 0x64
 8008622:	7852      	ldrb	r2, [r2, #1]
 8008624:	2a30      	cmp	r2, #48	@ 0x30
 8008626:	d0f9      	beq.n	800861c <_strtod_l+0x29c>
 8008628:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800862c:	2908      	cmp	r1, #8
 800862e:	f63f af75 	bhi.w	800851c <_strtod_l+0x19c>
 8008632:	3a30      	subs	r2, #48	@ 0x30
 8008634:	9209      	str	r2, [sp, #36]	@ 0x24
 8008636:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008638:	920f      	str	r2, [sp, #60]	@ 0x3c
 800863a:	f04f 080a 	mov.w	r8, #10
 800863e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008640:	1c56      	adds	r6, r2, #1
 8008642:	9619      	str	r6, [sp, #100]	@ 0x64
 8008644:	7852      	ldrb	r2, [r2, #1]
 8008646:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800864a:	f1be 0f09 	cmp.w	lr, #9
 800864e:	d939      	bls.n	80086c4 <_strtod_l+0x344>
 8008650:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008652:	1a76      	subs	r6, r6, r1
 8008654:	2e08      	cmp	r6, #8
 8008656:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800865a:	dc03      	bgt.n	8008664 <_strtod_l+0x2e4>
 800865c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800865e:	4588      	cmp	r8, r1
 8008660:	bfa8      	it	ge
 8008662:	4688      	movge	r8, r1
 8008664:	f1bc 0f00 	cmp.w	ip, #0
 8008668:	d001      	beq.n	800866e <_strtod_l+0x2ee>
 800866a:	f1c8 0800 	rsb	r8, r8, #0
 800866e:	2d00      	cmp	r5, #0
 8008670:	d14e      	bne.n	8008710 <_strtod_l+0x390>
 8008672:	9908      	ldr	r1, [sp, #32]
 8008674:	4308      	orrs	r0, r1
 8008676:	f47f aebc 	bne.w	80083f2 <_strtod_l+0x72>
 800867a:	2b00      	cmp	r3, #0
 800867c:	f47f aed4 	bne.w	8008428 <_strtod_l+0xa8>
 8008680:	2a69      	cmp	r2, #105	@ 0x69
 8008682:	d028      	beq.n	80086d6 <_strtod_l+0x356>
 8008684:	dc25      	bgt.n	80086d2 <_strtod_l+0x352>
 8008686:	2a49      	cmp	r2, #73	@ 0x49
 8008688:	d025      	beq.n	80086d6 <_strtod_l+0x356>
 800868a:	2a4e      	cmp	r2, #78	@ 0x4e
 800868c:	f47f aecc 	bne.w	8008428 <_strtod_l+0xa8>
 8008690:	499a      	ldr	r1, [pc, #616]	@ (80088fc <_strtod_l+0x57c>)
 8008692:	a819      	add	r0, sp, #100	@ 0x64
 8008694:	f002 fe5c 	bl	800b350 <__match>
 8008698:	2800      	cmp	r0, #0
 800869a:	f43f aec5 	beq.w	8008428 <_strtod_l+0xa8>
 800869e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	2b28      	cmp	r3, #40	@ 0x28
 80086a4:	d12e      	bne.n	8008704 <_strtod_l+0x384>
 80086a6:	4996      	ldr	r1, [pc, #600]	@ (8008900 <_strtod_l+0x580>)
 80086a8:	aa1c      	add	r2, sp, #112	@ 0x70
 80086aa:	a819      	add	r0, sp, #100	@ 0x64
 80086ac:	f002 fe64 	bl	800b378 <__hexnan>
 80086b0:	2805      	cmp	r0, #5
 80086b2:	d127      	bne.n	8008704 <_strtod_l+0x384>
 80086b4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80086b6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80086ba:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80086be:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80086c2:	e696      	b.n	80083f2 <_strtod_l+0x72>
 80086c4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80086c6:	fb08 2101 	mla	r1, r8, r1, r2
 80086ca:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80086ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80086d0:	e7b5      	b.n	800863e <_strtod_l+0x2be>
 80086d2:	2a6e      	cmp	r2, #110	@ 0x6e
 80086d4:	e7da      	b.n	800868c <_strtod_l+0x30c>
 80086d6:	498b      	ldr	r1, [pc, #556]	@ (8008904 <_strtod_l+0x584>)
 80086d8:	a819      	add	r0, sp, #100	@ 0x64
 80086da:	f002 fe39 	bl	800b350 <__match>
 80086de:	2800      	cmp	r0, #0
 80086e0:	f43f aea2 	beq.w	8008428 <_strtod_l+0xa8>
 80086e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80086e6:	4988      	ldr	r1, [pc, #544]	@ (8008908 <_strtod_l+0x588>)
 80086e8:	3b01      	subs	r3, #1
 80086ea:	a819      	add	r0, sp, #100	@ 0x64
 80086ec:	9319      	str	r3, [sp, #100]	@ 0x64
 80086ee:	f002 fe2f 	bl	800b350 <__match>
 80086f2:	b910      	cbnz	r0, 80086fa <_strtod_l+0x37a>
 80086f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80086f6:	3301      	adds	r3, #1
 80086f8:	9319      	str	r3, [sp, #100]	@ 0x64
 80086fa:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8008918 <_strtod_l+0x598>
 80086fe:	f04f 0a00 	mov.w	sl, #0
 8008702:	e676      	b.n	80083f2 <_strtod_l+0x72>
 8008704:	4881      	ldr	r0, [pc, #516]	@ (800890c <_strtod_l+0x58c>)
 8008706:	f001 fccb 	bl	800a0a0 <nan>
 800870a:	ec5b ab10 	vmov	sl, fp, d0
 800870e:	e670      	b.n	80083f2 <_strtod_l+0x72>
 8008710:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008712:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008714:	eba8 0303 	sub.w	r3, r8, r3
 8008718:	f1b9 0f00 	cmp.w	r9, #0
 800871c:	bf08      	it	eq
 800871e:	46a9      	moveq	r9, r5
 8008720:	2d10      	cmp	r5, #16
 8008722:	9309      	str	r3, [sp, #36]	@ 0x24
 8008724:	462c      	mov	r4, r5
 8008726:	bfa8      	it	ge
 8008728:	2410      	movge	r4, #16
 800872a:	f7f7 ff03 	bl	8000534 <__aeabi_ui2d>
 800872e:	2d09      	cmp	r5, #9
 8008730:	4682      	mov	sl, r0
 8008732:	468b      	mov	fp, r1
 8008734:	dc13      	bgt.n	800875e <_strtod_l+0x3de>
 8008736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008738:	2b00      	cmp	r3, #0
 800873a:	f43f ae5a 	beq.w	80083f2 <_strtod_l+0x72>
 800873e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008740:	dd78      	ble.n	8008834 <_strtod_l+0x4b4>
 8008742:	2b16      	cmp	r3, #22
 8008744:	dc5f      	bgt.n	8008806 <_strtod_l+0x486>
 8008746:	4972      	ldr	r1, [pc, #456]	@ (8008910 <_strtod_l+0x590>)
 8008748:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800874c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008750:	4652      	mov	r2, sl
 8008752:	465b      	mov	r3, fp
 8008754:	f7f7 ff68 	bl	8000628 <__aeabi_dmul>
 8008758:	4682      	mov	sl, r0
 800875a:	468b      	mov	fp, r1
 800875c:	e649      	b.n	80083f2 <_strtod_l+0x72>
 800875e:	4b6c      	ldr	r3, [pc, #432]	@ (8008910 <_strtod_l+0x590>)
 8008760:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008764:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008768:	f7f7 ff5e 	bl	8000628 <__aeabi_dmul>
 800876c:	4682      	mov	sl, r0
 800876e:	4638      	mov	r0, r7
 8008770:	468b      	mov	fp, r1
 8008772:	f7f7 fedf 	bl	8000534 <__aeabi_ui2d>
 8008776:	4602      	mov	r2, r0
 8008778:	460b      	mov	r3, r1
 800877a:	4650      	mov	r0, sl
 800877c:	4659      	mov	r1, fp
 800877e:	f7f7 fd9d 	bl	80002bc <__adddf3>
 8008782:	2d0f      	cmp	r5, #15
 8008784:	4682      	mov	sl, r0
 8008786:	468b      	mov	fp, r1
 8008788:	ddd5      	ble.n	8008736 <_strtod_l+0x3b6>
 800878a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800878c:	1b2c      	subs	r4, r5, r4
 800878e:	441c      	add	r4, r3
 8008790:	2c00      	cmp	r4, #0
 8008792:	f340 8093 	ble.w	80088bc <_strtod_l+0x53c>
 8008796:	f014 030f 	ands.w	r3, r4, #15
 800879a:	d00a      	beq.n	80087b2 <_strtod_l+0x432>
 800879c:	495c      	ldr	r1, [pc, #368]	@ (8008910 <_strtod_l+0x590>)
 800879e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80087a2:	4652      	mov	r2, sl
 80087a4:	465b      	mov	r3, fp
 80087a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087aa:	f7f7 ff3d 	bl	8000628 <__aeabi_dmul>
 80087ae:	4682      	mov	sl, r0
 80087b0:	468b      	mov	fp, r1
 80087b2:	f034 040f 	bics.w	r4, r4, #15
 80087b6:	d073      	beq.n	80088a0 <_strtod_l+0x520>
 80087b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80087bc:	dd49      	ble.n	8008852 <_strtod_l+0x4d2>
 80087be:	2400      	movs	r4, #0
 80087c0:	46a0      	mov	r8, r4
 80087c2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80087c4:	46a1      	mov	r9, r4
 80087c6:	9a05      	ldr	r2, [sp, #20]
 80087c8:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8008918 <_strtod_l+0x598>
 80087cc:	2322      	movs	r3, #34	@ 0x22
 80087ce:	6013      	str	r3, [r2, #0]
 80087d0:	f04f 0a00 	mov.w	sl, #0
 80087d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	f43f ae0b 	beq.w	80083f2 <_strtod_l+0x72>
 80087dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80087de:	9805      	ldr	r0, [sp, #20]
 80087e0:	f002 ff6e 	bl	800b6c0 <_Bfree>
 80087e4:	9805      	ldr	r0, [sp, #20]
 80087e6:	4649      	mov	r1, r9
 80087e8:	f002 ff6a 	bl	800b6c0 <_Bfree>
 80087ec:	9805      	ldr	r0, [sp, #20]
 80087ee:	4641      	mov	r1, r8
 80087f0:	f002 ff66 	bl	800b6c0 <_Bfree>
 80087f4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80087f6:	9805      	ldr	r0, [sp, #20]
 80087f8:	f002 ff62 	bl	800b6c0 <_Bfree>
 80087fc:	9805      	ldr	r0, [sp, #20]
 80087fe:	4621      	mov	r1, r4
 8008800:	f002 ff5e 	bl	800b6c0 <_Bfree>
 8008804:	e5f5      	b.n	80083f2 <_strtod_l+0x72>
 8008806:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008808:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800880c:	4293      	cmp	r3, r2
 800880e:	dbbc      	blt.n	800878a <_strtod_l+0x40a>
 8008810:	4c3f      	ldr	r4, [pc, #252]	@ (8008910 <_strtod_l+0x590>)
 8008812:	f1c5 050f 	rsb	r5, r5, #15
 8008816:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800881a:	4652      	mov	r2, sl
 800881c:	465b      	mov	r3, fp
 800881e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008822:	f7f7 ff01 	bl	8000628 <__aeabi_dmul>
 8008826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008828:	1b5d      	subs	r5, r3, r5
 800882a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800882e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008832:	e78f      	b.n	8008754 <_strtod_l+0x3d4>
 8008834:	3316      	adds	r3, #22
 8008836:	dba8      	blt.n	800878a <_strtod_l+0x40a>
 8008838:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800883a:	eba3 0808 	sub.w	r8, r3, r8
 800883e:	4b34      	ldr	r3, [pc, #208]	@ (8008910 <_strtod_l+0x590>)
 8008840:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008844:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008848:	4650      	mov	r0, sl
 800884a:	4659      	mov	r1, fp
 800884c:	f7f8 f816 	bl	800087c <__aeabi_ddiv>
 8008850:	e782      	b.n	8008758 <_strtod_l+0x3d8>
 8008852:	2300      	movs	r3, #0
 8008854:	4f2f      	ldr	r7, [pc, #188]	@ (8008914 <_strtod_l+0x594>)
 8008856:	1124      	asrs	r4, r4, #4
 8008858:	4650      	mov	r0, sl
 800885a:	4659      	mov	r1, fp
 800885c:	461e      	mov	r6, r3
 800885e:	2c01      	cmp	r4, #1
 8008860:	dc21      	bgt.n	80088a6 <_strtod_l+0x526>
 8008862:	b10b      	cbz	r3, 8008868 <_strtod_l+0x4e8>
 8008864:	4682      	mov	sl, r0
 8008866:	468b      	mov	fp, r1
 8008868:	492a      	ldr	r1, [pc, #168]	@ (8008914 <_strtod_l+0x594>)
 800886a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800886e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008872:	4652      	mov	r2, sl
 8008874:	465b      	mov	r3, fp
 8008876:	e9d1 0100 	ldrd	r0, r1, [r1]
 800887a:	f7f7 fed5 	bl	8000628 <__aeabi_dmul>
 800887e:	4b26      	ldr	r3, [pc, #152]	@ (8008918 <_strtod_l+0x598>)
 8008880:	460a      	mov	r2, r1
 8008882:	400b      	ands	r3, r1
 8008884:	4925      	ldr	r1, [pc, #148]	@ (800891c <_strtod_l+0x59c>)
 8008886:	428b      	cmp	r3, r1
 8008888:	4682      	mov	sl, r0
 800888a:	d898      	bhi.n	80087be <_strtod_l+0x43e>
 800888c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008890:	428b      	cmp	r3, r1
 8008892:	bf86      	itte	hi
 8008894:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008920 <_strtod_l+0x5a0>
 8008898:	f04f 3aff 	movhi.w	sl, #4294967295
 800889c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80088a0:	2300      	movs	r3, #0
 80088a2:	9308      	str	r3, [sp, #32]
 80088a4:	e076      	b.n	8008994 <_strtod_l+0x614>
 80088a6:	07e2      	lsls	r2, r4, #31
 80088a8:	d504      	bpl.n	80088b4 <_strtod_l+0x534>
 80088aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088ae:	f7f7 febb 	bl	8000628 <__aeabi_dmul>
 80088b2:	2301      	movs	r3, #1
 80088b4:	3601      	adds	r6, #1
 80088b6:	1064      	asrs	r4, r4, #1
 80088b8:	3708      	adds	r7, #8
 80088ba:	e7d0      	b.n	800885e <_strtod_l+0x4de>
 80088bc:	d0f0      	beq.n	80088a0 <_strtod_l+0x520>
 80088be:	4264      	negs	r4, r4
 80088c0:	f014 020f 	ands.w	r2, r4, #15
 80088c4:	d00a      	beq.n	80088dc <_strtod_l+0x55c>
 80088c6:	4b12      	ldr	r3, [pc, #72]	@ (8008910 <_strtod_l+0x590>)
 80088c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088cc:	4650      	mov	r0, sl
 80088ce:	4659      	mov	r1, fp
 80088d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d4:	f7f7 ffd2 	bl	800087c <__aeabi_ddiv>
 80088d8:	4682      	mov	sl, r0
 80088da:	468b      	mov	fp, r1
 80088dc:	1124      	asrs	r4, r4, #4
 80088de:	d0df      	beq.n	80088a0 <_strtod_l+0x520>
 80088e0:	2c1f      	cmp	r4, #31
 80088e2:	dd1f      	ble.n	8008924 <_strtod_l+0x5a4>
 80088e4:	2400      	movs	r4, #0
 80088e6:	46a0      	mov	r8, r4
 80088e8:	940b      	str	r4, [sp, #44]	@ 0x2c
 80088ea:	46a1      	mov	r9, r4
 80088ec:	9a05      	ldr	r2, [sp, #20]
 80088ee:	2322      	movs	r3, #34	@ 0x22
 80088f0:	f04f 0a00 	mov.w	sl, #0
 80088f4:	f04f 0b00 	mov.w	fp, #0
 80088f8:	6013      	str	r3, [r2, #0]
 80088fa:	e76b      	b.n	80087d4 <_strtod_l+0x454>
 80088fc:	0800cea7 	.word	0x0800cea7
 8008900:	0800d0c8 	.word	0x0800d0c8
 8008904:	0800ce9f 	.word	0x0800ce9f
 8008908:	0800cf8b 	.word	0x0800cf8b
 800890c:	0800cf87 	.word	0x0800cf87
 8008910:	0800d150 	.word	0x0800d150
 8008914:	0800d128 	.word	0x0800d128
 8008918:	7ff00000 	.word	0x7ff00000
 800891c:	7ca00000 	.word	0x7ca00000
 8008920:	7fefffff 	.word	0x7fefffff
 8008924:	f014 0310 	ands.w	r3, r4, #16
 8008928:	bf18      	it	ne
 800892a:	236a      	movne	r3, #106	@ 0x6a
 800892c:	4ea9      	ldr	r6, [pc, #676]	@ (8008bd4 <_strtod_l+0x854>)
 800892e:	9308      	str	r3, [sp, #32]
 8008930:	4650      	mov	r0, sl
 8008932:	4659      	mov	r1, fp
 8008934:	2300      	movs	r3, #0
 8008936:	07e7      	lsls	r7, r4, #31
 8008938:	d504      	bpl.n	8008944 <_strtod_l+0x5c4>
 800893a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800893e:	f7f7 fe73 	bl	8000628 <__aeabi_dmul>
 8008942:	2301      	movs	r3, #1
 8008944:	1064      	asrs	r4, r4, #1
 8008946:	f106 0608 	add.w	r6, r6, #8
 800894a:	d1f4      	bne.n	8008936 <_strtod_l+0x5b6>
 800894c:	b10b      	cbz	r3, 8008952 <_strtod_l+0x5d2>
 800894e:	4682      	mov	sl, r0
 8008950:	468b      	mov	fp, r1
 8008952:	9b08      	ldr	r3, [sp, #32]
 8008954:	b1b3      	cbz	r3, 8008984 <_strtod_l+0x604>
 8008956:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800895a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800895e:	2b00      	cmp	r3, #0
 8008960:	4659      	mov	r1, fp
 8008962:	dd0f      	ble.n	8008984 <_strtod_l+0x604>
 8008964:	2b1f      	cmp	r3, #31
 8008966:	dd56      	ble.n	8008a16 <_strtod_l+0x696>
 8008968:	2b34      	cmp	r3, #52	@ 0x34
 800896a:	bfde      	ittt	le
 800896c:	f04f 33ff 	movle.w	r3, #4294967295
 8008970:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008974:	4093      	lslle	r3, r2
 8008976:	f04f 0a00 	mov.w	sl, #0
 800897a:	bfcc      	ite	gt
 800897c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008980:	ea03 0b01 	andle.w	fp, r3, r1
 8008984:	2200      	movs	r2, #0
 8008986:	2300      	movs	r3, #0
 8008988:	4650      	mov	r0, sl
 800898a:	4659      	mov	r1, fp
 800898c:	f7f8 f8b4 	bl	8000af8 <__aeabi_dcmpeq>
 8008990:	2800      	cmp	r0, #0
 8008992:	d1a7      	bne.n	80088e4 <_strtod_l+0x564>
 8008994:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008996:	9300      	str	r3, [sp, #0]
 8008998:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800899a:	9805      	ldr	r0, [sp, #20]
 800899c:	462b      	mov	r3, r5
 800899e:	464a      	mov	r2, r9
 80089a0:	f002 fef6 	bl	800b790 <__s2b>
 80089a4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80089a6:	2800      	cmp	r0, #0
 80089a8:	f43f af09 	beq.w	80087be <_strtod_l+0x43e>
 80089ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089b0:	2a00      	cmp	r2, #0
 80089b2:	eba3 0308 	sub.w	r3, r3, r8
 80089b6:	bfa8      	it	ge
 80089b8:	2300      	movge	r3, #0
 80089ba:	9312      	str	r3, [sp, #72]	@ 0x48
 80089bc:	2400      	movs	r4, #0
 80089be:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80089c2:	9316      	str	r3, [sp, #88]	@ 0x58
 80089c4:	46a0      	mov	r8, r4
 80089c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089c8:	9805      	ldr	r0, [sp, #20]
 80089ca:	6859      	ldr	r1, [r3, #4]
 80089cc:	f002 fe38 	bl	800b640 <_Balloc>
 80089d0:	4681      	mov	r9, r0
 80089d2:	2800      	cmp	r0, #0
 80089d4:	f43f aef7 	beq.w	80087c6 <_strtod_l+0x446>
 80089d8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089da:	691a      	ldr	r2, [r3, #16]
 80089dc:	3202      	adds	r2, #2
 80089de:	f103 010c 	add.w	r1, r3, #12
 80089e2:	0092      	lsls	r2, r2, #2
 80089e4:	300c      	adds	r0, #12
 80089e6:	f001 fb4c 	bl	800a082 <memcpy>
 80089ea:	ec4b ab10 	vmov	d0, sl, fp
 80089ee:	9805      	ldr	r0, [sp, #20]
 80089f0:	aa1c      	add	r2, sp, #112	@ 0x70
 80089f2:	a91b      	add	r1, sp, #108	@ 0x6c
 80089f4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80089f8:	f003 f9fe 	bl	800bdf8 <__d2b>
 80089fc:	901a      	str	r0, [sp, #104]	@ 0x68
 80089fe:	2800      	cmp	r0, #0
 8008a00:	f43f aee1 	beq.w	80087c6 <_strtod_l+0x446>
 8008a04:	9805      	ldr	r0, [sp, #20]
 8008a06:	2101      	movs	r1, #1
 8008a08:	f002 ff58 	bl	800b8bc <__i2b>
 8008a0c:	4680      	mov	r8, r0
 8008a0e:	b948      	cbnz	r0, 8008a24 <_strtod_l+0x6a4>
 8008a10:	f04f 0800 	mov.w	r8, #0
 8008a14:	e6d7      	b.n	80087c6 <_strtod_l+0x446>
 8008a16:	f04f 32ff 	mov.w	r2, #4294967295
 8008a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a1e:	ea03 0a0a 	and.w	sl, r3, sl
 8008a22:	e7af      	b.n	8008984 <_strtod_l+0x604>
 8008a24:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008a26:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008a28:	2d00      	cmp	r5, #0
 8008a2a:	bfab      	itete	ge
 8008a2c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008a2e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008a30:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008a32:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008a34:	bfac      	ite	ge
 8008a36:	18ef      	addge	r7, r5, r3
 8008a38:	1b5e      	sublt	r6, r3, r5
 8008a3a:	9b08      	ldr	r3, [sp, #32]
 8008a3c:	1aed      	subs	r5, r5, r3
 8008a3e:	4415      	add	r5, r2
 8008a40:	4b65      	ldr	r3, [pc, #404]	@ (8008bd8 <_strtod_l+0x858>)
 8008a42:	3d01      	subs	r5, #1
 8008a44:	429d      	cmp	r5, r3
 8008a46:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008a4a:	da50      	bge.n	8008aee <_strtod_l+0x76e>
 8008a4c:	1b5b      	subs	r3, r3, r5
 8008a4e:	2b1f      	cmp	r3, #31
 8008a50:	eba2 0203 	sub.w	r2, r2, r3
 8008a54:	f04f 0101 	mov.w	r1, #1
 8008a58:	dc3d      	bgt.n	8008ad6 <_strtod_l+0x756>
 8008a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a5e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008a60:	2300      	movs	r3, #0
 8008a62:	9310      	str	r3, [sp, #64]	@ 0x40
 8008a64:	18bd      	adds	r5, r7, r2
 8008a66:	9b08      	ldr	r3, [sp, #32]
 8008a68:	42af      	cmp	r7, r5
 8008a6a:	4416      	add	r6, r2
 8008a6c:	441e      	add	r6, r3
 8008a6e:	463b      	mov	r3, r7
 8008a70:	bfa8      	it	ge
 8008a72:	462b      	movge	r3, r5
 8008a74:	42b3      	cmp	r3, r6
 8008a76:	bfa8      	it	ge
 8008a78:	4633      	movge	r3, r6
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	bfc2      	ittt	gt
 8008a7e:	1aed      	subgt	r5, r5, r3
 8008a80:	1af6      	subgt	r6, r6, r3
 8008a82:	1aff      	subgt	r7, r7, r3
 8008a84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	dd16      	ble.n	8008ab8 <_strtod_l+0x738>
 8008a8a:	4641      	mov	r1, r8
 8008a8c:	9805      	ldr	r0, [sp, #20]
 8008a8e:	461a      	mov	r2, r3
 8008a90:	f002 ffcc 	bl	800ba2c <__pow5mult>
 8008a94:	4680      	mov	r8, r0
 8008a96:	2800      	cmp	r0, #0
 8008a98:	d0ba      	beq.n	8008a10 <_strtod_l+0x690>
 8008a9a:	4601      	mov	r1, r0
 8008a9c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008a9e:	9805      	ldr	r0, [sp, #20]
 8008aa0:	f002 ff22 	bl	800b8e8 <__multiply>
 8008aa4:	900a      	str	r0, [sp, #40]	@ 0x28
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	f43f ae8d 	beq.w	80087c6 <_strtod_l+0x446>
 8008aac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008aae:	9805      	ldr	r0, [sp, #20]
 8008ab0:	f002 fe06 	bl	800b6c0 <_Bfree>
 8008ab4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ab6:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ab8:	2d00      	cmp	r5, #0
 8008aba:	dc1d      	bgt.n	8008af8 <_strtod_l+0x778>
 8008abc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	dd23      	ble.n	8008b0a <_strtod_l+0x78a>
 8008ac2:	4649      	mov	r1, r9
 8008ac4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008ac6:	9805      	ldr	r0, [sp, #20]
 8008ac8:	f002 ffb0 	bl	800ba2c <__pow5mult>
 8008acc:	4681      	mov	r9, r0
 8008ace:	b9e0      	cbnz	r0, 8008b0a <_strtod_l+0x78a>
 8008ad0:	f04f 0900 	mov.w	r9, #0
 8008ad4:	e677      	b.n	80087c6 <_strtod_l+0x446>
 8008ad6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008ada:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008ade:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8008ae2:	35e2      	adds	r5, #226	@ 0xe2
 8008ae4:	fa01 f305 	lsl.w	r3, r1, r5
 8008ae8:	9310      	str	r3, [sp, #64]	@ 0x40
 8008aea:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008aec:	e7ba      	b.n	8008a64 <_strtod_l+0x6e4>
 8008aee:	2300      	movs	r3, #0
 8008af0:	9310      	str	r3, [sp, #64]	@ 0x40
 8008af2:	2301      	movs	r3, #1
 8008af4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008af6:	e7b5      	b.n	8008a64 <_strtod_l+0x6e4>
 8008af8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008afa:	9805      	ldr	r0, [sp, #20]
 8008afc:	462a      	mov	r2, r5
 8008afe:	f002 ffef 	bl	800bae0 <__lshift>
 8008b02:	901a      	str	r0, [sp, #104]	@ 0x68
 8008b04:	2800      	cmp	r0, #0
 8008b06:	d1d9      	bne.n	8008abc <_strtod_l+0x73c>
 8008b08:	e65d      	b.n	80087c6 <_strtod_l+0x446>
 8008b0a:	2e00      	cmp	r6, #0
 8008b0c:	dd07      	ble.n	8008b1e <_strtod_l+0x79e>
 8008b0e:	4649      	mov	r1, r9
 8008b10:	9805      	ldr	r0, [sp, #20]
 8008b12:	4632      	mov	r2, r6
 8008b14:	f002 ffe4 	bl	800bae0 <__lshift>
 8008b18:	4681      	mov	r9, r0
 8008b1a:	2800      	cmp	r0, #0
 8008b1c:	d0d8      	beq.n	8008ad0 <_strtod_l+0x750>
 8008b1e:	2f00      	cmp	r7, #0
 8008b20:	dd08      	ble.n	8008b34 <_strtod_l+0x7b4>
 8008b22:	4641      	mov	r1, r8
 8008b24:	9805      	ldr	r0, [sp, #20]
 8008b26:	463a      	mov	r2, r7
 8008b28:	f002 ffda 	bl	800bae0 <__lshift>
 8008b2c:	4680      	mov	r8, r0
 8008b2e:	2800      	cmp	r0, #0
 8008b30:	f43f ae49 	beq.w	80087c6 <_strtod_l+0x446>
 8008b34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008b36:	9805      	ldr	r0, [sp, #20]
 8008b38:	464a      	mov	r2, r9
 8008b3a:	f003 f859 	bl	800bbf0 <__mdiff>
 8008b3e:	4604      	mov	r4, r0
 8008b40:	2800      	cmp	r0, #0
 8008b42:	f43f ae40 	beq.w	80087c6 <_strtod_l+0x446>
 8008b46:	68c3      	ldr	r3, [r0, #12]
 8008b48:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	60c3      	str	r3, [r0, #12]
 8008b4e:	4641      	mov	r1, r8
 8008b50:	f003 f832 	bl	800bbb8 <__mcmp>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	da45      	bge.n	8008be4 <_strtod_l+0x864>
 8008b58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b5a:	ea53 030a 	orrs.w	r3, r3, sl
 8008b5e:	d16b      	bne.n	8008c38 <_strtod_l+0x8b8>
 8008b60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d167      	bne.n	8008c38 <_strtod_l+0x8b8>
 8008b68:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008b6c:	0d1b      	lsrs	r3, r3, #20
 8008b6e:	051b      	lsls	r3, r3, #20
 8008b70:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008b74:	d960      	bls.n	8008c38 <_strtod_l+0x8b8>
 8008b76:	6963      	ldr	r3, [r4, #20]
 8008b78:	b913      	cbnz	r3, 8008b80 <_strtod_l+0x800>
 8008b7a:	6923      	ldr	r3, [r4, #16]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	dd5b      	ble.n	8008c38 <_strtod_l+0x8b8>
 8008b80:	4621      	mov	r1, r4
 8008b82:	2201      	movs	r2, #1
 8008b84:	9805      	ldr	r0, [sp, #20]
 8008b86:	f002 ffab 	bl	800bae0 <__lshift>
 8008b8a:	4641      	mov	r1, r8
 8008b8c:	4604      	mov	r4, r0
 8008b8e:	f003 f813 	bl	800bbb8 <__mcmp>
 8008b92:	2800      	cmp	r0, #0
 8008b94:	dd50      	ble.n	8008c38 <_strtod_l+0x8b8>
 8008b96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008b9a:	9a08      	ldr	r2, [sp, #32]
 8008b9c:	0d1b      	lsrs	r3, r3, #20
 8008b9e:	051b      	lsls	r3, r3, #20
 8008ba0:	2a00      	cmp	r2, #0
 8008ba2:	d06a      	beq.n	8008c7a <_strtod_l+0x8fa>
 8008ba4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008ba8:	d867      	bhi.n	8008c7a <_strtod_l+0x8fa>
 8008baa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008bae:	f67f ae9d 	bls.w	80088ec <_strtod_l+0x56c>
 8008bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8008bdc <_strtod_l+0x85c>)
 8008bb4:	4650      	mov	r0, sl
 8008bb6:	4659      	mov	r1, fp
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f7f7 fd35 	bl	8000628 <__aeabi_dmul>
 8008bbe:	4b08      	ldr	r3, [pc, #32]	@ (8008be0 <_strtod_l+0x860>)
 8008bc0:	400b      	ands	r3, r1
 8008bc2:	4682      	mov	sl, r0
 8008bc4:	468b      	mov	fp, r1
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	f47f ae08 	bne.w	80087dc <_strtod_l+0x45c>
 8008bcc:	9a05      	ldr	r2, [sp, #20]
 8008bce:	2322      	movs	r3, #34	@ 0x22
 8008bd0:	6013      	str	r3, [r2, #0]
 8008bd2:	e603      	b.n	80087dc <_strtod_l+0x45c>
 8008bd4:	0800d0f0 	.word	0x0800d0f0
 8008bd8:	fffffc02 	.word	0xfffffc02
 8008bdc:	39500000 	.word	0x39500000
 8008be0:	7ff00000 	.word	0x7ff00000
 8008be4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008be8:	d165      	bne.n	8008cb6 <_strtod_l+0x936>
 8008bea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008bec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bf0:	b35a      	cbz	r2, 8008c4a <_strtod_l+0x8ca>
 8008bf2:	4a9f      	ldr	r2, [pc, #636]	@ (8008e70 <_strtod_l+0xaf0>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d12b      	bne.n	8008c50 <_strtod_l+0x8d0>
 8008bf8:	9b08      	ldr	r3, [sp, #32]
 8008bfa:	4651      	mov	r1, sl
 8008bfc:	b303      	cbz	r3, 8008c40 <_strtod_l+0x8c0>
 8008bfe:	4b9d      	ldr	r3, [pc, #628]	@ (8008e74 <_strtod_l+0xaf4>)
 8008c00:	465a      	mov	r2, fp
 8008c02:	4013      	ands	r3, r2
 8008c04:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008c08:	f04f 32ff 	mov.w	r2, #4294967295
 8008c0c:	d81b      	bhi.n	8008c46 <_strtod_l+0x8c6>
 8008c0e:	0d1b      	lsrs	r3, r3, #20
 8008c10:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008c14:	fa02 f303 	lsl.w	r3, r2, r3
 8008c18:	4299      	cmp	r1, r3
 8008c1a:	d119      	bne.n	8008c50 <_strtod_l+0x8d0>
 8008c1c:	4b96      	ldr	r3, [pc, #600]	@ (8008e78 <_strtod_l+0xaf8>)
 8008c1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d102      	bne.n	8008c2a <_strtod_l+0x8aa>
 8008c24:	3101      	adds	r1, #1
 8008c26:	f43f adce 	beq.w	80087c6 <_strtod_l+0x446>
 8008c2a:	4b92      	ldr	r3, [pc, #584]	@ (8008e74 <_strtod_l+0xaf4>)
 8008c2c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c2e:	401a      	ands	r2, r3
 8008c30:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008c34:	f04f 0a00 	mov.w	sl, #0
 8008c38:	9b08      	ldr	r3, [sp, #32]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d1b9      	bne.n	8008bb2 <_strtod_l+0x832>
 8008c3e:	e5cd      	b.n	80087dc <_strtod_l+0x45c>
 8008c40:	f04f 33ff 	mov.w	r3, #4294967295
 8008c44:	e7e8      	b.n	8008c18 <_strtod_l+0x898>
 8008c46:	4613      	mov	r3, r2
 8008c48:	e7e6      	b.n	8008c18 <_strtod_l+0x898>
 8008c4a:	ea53 030a 	orrs.w	r3, r3, sl
 8008c4e:	d0a2      	beq.n	8008b96 <_strtod_l+0x816>
 8008c50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008c52:	b1db      	cbz	r3, 8008c8c <_strtod_l+0x90c>
 8008c54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008c56:	4213      	tst	r3, r2
 8008c58:	d0ee      	beq.n	8008c38 <_strtod_l+0x8b8>
 8008c5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c5c:	9a08      	ldr	r2, [sp, #32]
 8008c5e:	4650      	mov	r0, sl
 8008c60:	4659      	mov	r1, fp
 8008c62:	b1bb      	cbz	r3, 8008c94 <_strtod_l+0x914>
 8008c64:	f7ff fb6d 	bl	8008342 <sulp>
 8008c68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c6c:	ec53 2b10 	vmov	r2, r3, d0
 8008c70:	f7f7 fb24 	bl	80002bc <__adddf3>
 8008c74:	4682      	mov	sl, r0
 8008c76:	468b      	mov	fp, r1
 8008c78:	e7de      	b.n	8008c38 <_strtod_l+0x8b8>
 8008c7a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008c7e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008c82:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008c86:	f04f 3aff 	mov.w	sl, #4294967295
 8008c8a:	e7d5      	b.n	8008c38 <_strtod_l+0x8b8>
 8008c8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008c8e:	ea13 0f0a 	tst.w	r3, sl
 8008c92:	e7e1      	b.n	8008c58 <_strtod_l+0x8d8>
 8008c94:	f7ff fb55 	bl	8008342 <sulp>
 8008c98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c9c:	ec53 2b10 	vmov	r2, r3, d0
 8008ca0:	f7f7 fb0a 	bl	80002b8 <__aeabi_dsub>
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	4682      	mov	sl, r0
 8008caa:	468b      	mov	fp, r1
 8008cac:	f7f7 ff24 	bl	8000af8 <__aeabi_dcmpeq>
 8008cb0:	2800      	cmp	r0, #0
 8008cb2:	d0c1      	beq.n	8008c38 <_strtod_l+0x8b8>
 8008cb4:	e61a      	b.n	80088ec <_strtod_l+0x56c>
 8008cb6:	4641      	mov	r1, r8
 8008cb8:	4620      	mov	r0, r4
 8008cba:	f003 f8f5 	bl	800bea8 <__ratio>
 8008cbe:	ec57 6b10 	vmov	r6, r7, d0
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008cc8:	4630      	mov	r0, r6
 8008cca:	4639      	mov	r1, r7
 8008ccc:	f7f7 ff28 	bl	8000b20 <__aeabi_dcmple>
 8008cd0:	2800      	cmp	r0, #0
 8008cd2:	d06f      	beq.n	8008db4 <_strtod_l+0xa34>
 8008cd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d17a      	bne.n	8008dd0 <_strtod_l+0xa50>
 8008cda:	f1ba 0f00 	cmp.w	sl, #0
 8008cde:	d158      	bne.n	8008d92 <_strtod_l+0xa12>
 8008ce0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ce2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d15a      	bne.n	8008da0 <_strtod_l+0xa20>
 8008cea:	4b64      	ldr	r3, [pc, #400]	@ (8008e7c <_strtod_l+0xafc>)
 8008cec:	2200      	movs	r2, #0
 8008cee:	4630      	mov	r0, r6
 8008cf0:	4639      	mov	r1, r7
 8008cf2:	f7f7 ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8008cf6:	2800      	cmp	r0, #0
 8008cf8:	d159      	bne.n	8008dae <_strtod_l+0xa2e>
 8008cfa:	4630      	mov	r0, r6
 8008cfc:	4639      	mov	r1, r7
 8008cfe:	4b60      	ldr	r3, [pc, #384]	@ (8008e80 <_strtod_l+0xb00>)
 8008d00:	2200      	movs	r2, #0
 8008d02:	f7f7 fc91 	bl	8000628 <__aeabi_dmul>
 8008d06:	4606      	mov	r6, r0
 8008d08:	460f      	mov	r7, r1
 8008d0a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008d0e:	9606      	str	r6, [sp, #24]
 8008d10:	9307      	str	r3, [sp, #28]
 8008d12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d16:	4d57      	ldr	r5, [pc, #348]	@ (8008e74 <_strtod_l+0xaf4>)
 8008d18:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008d1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d1e:	401d      	ands	r5, r3
 8008d20:	4b58      	ldr	r3, [pc, #352]	@ (8008e84 <_strtod_l+0xb04>)
 8008d22:	429d      	cmp	r5, r3
 8008d24:	f040 80b2 	bne.w	8008e8c <_strtod_l+0xb0c>
 8008d28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d2a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008d2e:	ec4b ab10 	vmov	d0, sl, fp
 8008d32:	f002 fff1 	bl	800bd18 <__ulp>
 8008d36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008d3a:	ec51 0b10 	vmov	r0, r1, d0
 8008d3e:	f7f7 fc73 	bl	8000628 <__aeabi_dmul>
 8008d42:	4652      	mov	r2, sl
 8008d44:	465b      	mov	r3, fp
 8008d46:	f7f7 fab9 	bl	80002bc <__adddf3>
 8008d4a:	460b      	mov	r3, r1
 8008d4c:	4949      	ldr	r1, [pc, #292]	@ (8008e74 <_strtod_l+0xaf4>)
 8008d4e:	4a4e      	ldr	r2, [pc, #312]	@ (8008e88 <_strtod_l+0xb08>)
 8008d50:	4019      	ands	r1, r3
 8008d52:	4291      	cmp	r1, r2
 8008d54:	4682      	mov	sl, r0
 8008d56:	d942      	bls.n	8008dde <_strtod_l+0xa5e>
 8008d58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008d5a:	4b47      	ldr	r3, [pc, #284]	@ (8008e78 <_strtod_l+0xaf8>)
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d103      	bne.n	8008d68 <_strtod_l+0x9e8>
 8008d60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008d62:	3301      	adds	r3, #1
 8008d64:	f43f ad2f 	beq.w	80087c6 <_strtod_l+0x446>
 8008d68:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008e78 <_strtod_l+0xaf8>
 8008d6c:	f04f 3aff 	mov.w	sl, #4294967295
 8008d70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d72:	9805      	ldr	r0, [sp, #20]
 8008d74:	f002 fca4 	bl	800b6c0 <_Bfree>
 8008d78:	9805      	ldr	r0, [sp, #20]
 8008d7a:	4649      	mov	r1, r9
 8008d7c:	f002 fca0 	bl	800b6c0 <_Bfree>
 8008d80:	9805      	ldr	r0, [sp, #20]
 8008d82:	4641      	mov	r1, r8
 8008d84:	f002 fc9c 	bl	800b6c0 <_Bfree>
 8008d88:	9805      	ldr	r0, [sp, #20]
 8008d8a:	4621      	mov	r1, r4
 8008d8c:	f002 fc98 	bl	800b6c0 <_Bfree>
 8008d90:	e619      	b.n	80089c6 <_strtod_l+0x646>
 8008d92:	f1ba 0f01 	cmp.w	sl, #1
 8008d96:	d103      	bne.n	8008da0 <_strtod_l+0xa20>
 8008d98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	f43f ada6 	beq.w	80088ec <_strtod_l+0x56c>
 8008da0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008e50 <_strtod_l+0xad0>
 8008da4:	4f35      	ldr	r7, [pc, #212]	@ (8008e7c <_strtod_l+0xafc>)
 8008da6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008daa:	2600      	movs	r6, #0
 8008dac:	e7b1      	b.n	8008d12 <_strtod_l+0x992>
 8008dae:	4f34      	ldr	r7, [pc, #208]	@ (8008e80 <_strtod_l+0xb00>)
 8008db0:	2600      	movs	r6, #0
 8008db2:	e7aa      	b.n	8008d0a <_strtod_l+0x98a>
 8008db4:	4b32      	ldr	r3, [pc, #200]	@ (8008e80 <_strtod_l+0xb00>)
 8008db6:	4630      	mov	r0, r6
 8008db8:	4639      	mov	r1, r7
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f7f7 fc34 	bl	8000628 <__aeabi_dmul>
 8008dc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008dc2:	4606      	mov	r6, r0
 8008dc4:	460f      	mov	r7, r1
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d09f      	beq.n	8008d0a <_strtod_l+0x98a>
 8008dca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008dce:	e7a0      	b.n	8008d12 <_strtod_l+0x992>
 8008dd0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008e58 <_strtod_l+0xad8>
 8008dd4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008dd8:	ec57 6b17 	vmov	r6, r7, d7
 8008ddc:	e799      	b.n	8008d12 <_strtod_l+0x992>
 8008dde:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008de2:	9b08      	ldr	r3, [sp, #32]
 8008de4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d1c1      	bne.n	8008d70 <_strtod_l+0x9f0>
 8008dec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008df0:	0d1b      	lsrs	r3, r3, #20
 8008df2:	051b      	lsls	r3, r3, #20
 8008df4:	429d      	cmp	r5, r3
 8008df6:	d1bb      	bne.n	8008d70 <_strtod_l+0x9f0>
 8008df8:	4630      	mov	r0, r6
 8008dfa:	4639      	mov	r1, r7
 8008dfc:	f7f7 ff74 	bl	8000ce8 <__aeabi_d2lz>
 8008e00:	f7f7 fbe4 	bl	80005cc <__aeabi_l2d>
 8008e04:	4602      	mov	r2, r0
 8008e06:	460b      	mov	r3, r1
 8008e08:	4630      	mov	r0, r6
 8008e0a:	4639      	mov	r1, r7
 8008e0c:	f7f7 fa54 	bl	80002b8 <__aeabi_dsub>
 8008e10:	460b      	mov	r3, r1
 8008e12:	4602      	mov	r2, r0
 8008e14:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008e18:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008e1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e1e:	ea46 060a 	orr.w	r6, r6, sl
 8008e22:	431e      	orrs	r6, r3
 8008e24:	d06f      	beq.n	8008f06 <_strtod_l+0xb86>
 8008e26:	a30e      	add	r3, pc, #56	@ (adr r3, 8008e60 <_strtod_l+0xae0>)
 8008e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2c:	f7f7 fe6e 	bl	8000b0c <__aeabi_dcmplt>
 8008e30:	2800      	cmp	r0, #0
 8008e32:	f47f acd3 	bne.w	80087dc <_strtod_l+0x45c>
 8008e36:	a30c      	add	r3, pc, #48	@ (adr r3, 8008e68 <_strtod_l+0xae8>)
 8008e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008e40:	f7f7 fe82 	bl	8000b48 <__aeabi_dcmpgt>
 8008e44:	2800      	cmp	r0, #0
 8008e46:	d093      	beq.n	8008d70 <_strtod_l+0x9f0>
 8008e48:	e4c8      	b.n	80087dc <_strtod_l+0x45c>
 8008e4a:	bf00      	nop
 8008e4c:	f3af 8000 	nop.w
 8008e50:	00000000 	.word	0x00000000
 8008e54:	bff00000 	.word	0xbff00000
 8008e58:	00000000 	.word	0x00000000
 8008e5c:	3ff00000 	.word	0x3ff00000
 8008e60:	94a03595 	.word	0x94a03595
 8008e64:	3fdfffff 	.word	0x3fdfffff
 8008e68:	35afe535 	.word	0x35afe535
 8008e6c:	3fe00000 	.word	0x3fe00000
 8008e70:	000fffff 	.word	0x000fffff
 8008e74:	7ff00000 	.word	0x7ff00000
 8008e78:	7fefffff 	.word	0x7fefffff
 8008e7c:	3ff00000 	.word	0x3ff00000
 8008e80:	3fe00000 	.word	0x3fe00000
 8008e84:	7fe00000 	.word	0x7fe00000
 8008e88:	7c9fffff 	.word	0x7c9fffff
 8008e8c:	9b08      	ldr	r3, [sp, #32]
 8008e8e:	b323      	cbz	r3, 8008eda <_strtod_l+0xb5a>
 8008e90:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008e94:	d821      	bhi.n	8008eda <_strtod_l+0xb5a>
 8008e96:	a328      	add	r3, pc, #160	@ (adr r3, 8008f38 <_strtod_l+0xbb8>)
 8008e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	4639      	mov	r1, r7
 8008ea0:	f7f7 fe3e 	bl	8000b20 <__aeabi_dcmple>
 8008ea4:	b1a0      	cbz	r0, 8008ed0 <_strtod_l+0xb50>
 8008ea6:	4639      	mov	r1, r7
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	f7f7 fe95 	bl	8000bd8 <__aeabi_d2uiz>
 8008eae:	2801      	cmp	r0, #1
 8008eb0:	bf38      	it	cc
 8008eb2:	2001      	movcc	r0, #1
 8008eb4:	f7f7 fb3e 	bl	8000534 <__aeabi_ui2d>
 8008eb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008eba:	4606      	mov	r6, r0
 8008ebc:	460f      	mov	r7, r1
 8008ebe:	b9fb      	cbnz	r3, 8008f00 <_strtod_l+0xb80>
 8008ec0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008ec4:	9014      	str	r0, [sp, #80]	@ 0x50
 8008ec6:	9315      	str	r3, [sp, #84]	@ 0x54
 8008ec8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008ecc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008ed0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008ed2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008ed6:	1b5b      	subs	r3, r3, r5
 8008ed8:	9311      	str	r3, [sp, #68]	@ 0x44
 8008eda:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008ede:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008ee2:	f002 ff19 	bl	800bd18 <__ulp>
 8008ee6:	4650      	mov	r0, sl
 8008ee8:	ec53 2b10 	vmov	r2, r3, d0
 8008eec:	4659      	mov	r1, fp
 8008eee:	f7f7 fb9b 	bl	8000628 <__aeabi_dmul>
 8008ef2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008ef6:	f7f7 f9e1 	bl	80002bc <__adddf3>
 8008efa:	4682      	mov	sl, r0
 8008efc:	468b      	mov	fp, r1
 8008efe:	e770      	b.n	8008de2 <_strtod_l+0xa62>
 8008f00:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008f04:	e7e0      	b.n	8008ec8 <_strtod_l+0xb48>
 8008f06:	a30e      	add	r3, pc, #56	@ (adr r3, 8008f40 <_strtod_l+0xbc0>)
 8008f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0c:	f7f7 fdfe 	bl	8000b0c <__aeabi_dcmplt>
 8008f10:	e798      	b.n	8008e44 <_strtod_l+0xac4>
 8008f12:	2300      	movs	r3, #0
 8008f14:	930e      	str	r3, [sp, #56]	@ 0x38
 8008f16:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008f18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f1a:	6013      	str	r3, [r2, #0]
 8008f1c:	f7ff ba6d 	b.w	80083fa <_strtod_l+0x7a>
 8008f20:	2a65      	cmp	r2, #101	@ 0x65
 8008f22:	f43f ab68 	beq.w	80085f6 <_strtod_l+0x276>
 8008f26:	2a45      	cmp	r2, #69	@ 0x45
 8008f28:	f43f ab65 	beq.w	80085f6 <_strtod_l+0x276>
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	f7ff bba0 	b.w	8008672 <_strtod_l+0x2f2>
 8008f32:	bf00      	nop
 8008f34:	f3af 8000 	nop.w
 8008f38:	ffc00000 	.word	0xffc00000
 8008f3c:	41dfffff 	.word	0x41dfffff
 8008f40:	94a03595 	.word	0x94a03595
 8008f44:	3fcfffff 	.word	0x3fcfffff

08008f48 <_strtod_r>:
 8008f48:	4b01      	ldr	r3, [pc, #4]	@ (8008f50 <_strtod_r+0x8>)
 8008f4a:	f7ff ba19 	b.w	8008380 <_strtod_l>
 8008f4e:	bf00      	nop
 8008f50:	2000009c 	.word	0x2000009c

08008f54 <strtod>:
 8008f54:	460a      	mov	r2, r1
 8008f56:	4601      	mov	r1, r0
 8008f58:	4802      	ldr	r0, [pc, #8]	@ (8008f64 <strtod+0x10>)
 8008f5a:	4b03      	ldr	r3, [pc, #12]	@ (8008f68 <strtod+0x14>)
 8008f5c:	6800      	ldr	r0, [r0, #0]
 8008f5e:	f7ff ba0f 	b.w	8008380 <_strtod_l>
 8008f62:	bf00      	nop
 8008f64:	20000208 	.word	0x20000208
 8008f68:	2000009c 	.word	0x2000009c

08008f6c <__cvt>:
 8008f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f70:	ec57 6b10 	vmov	r6, r7, d0
 8008f74:	2f00      	cmp	r7, #0
 8008f76:	460c      	mov	r4, r1
 8008f78:	4619      	mov	r1, r3
 8008f7a:	463b      	mov	r3, r7
 8008f7c:	bfbb      	ittet	lt
 8008f7e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008f82:	461f      	movlt	r7, r3
 8008f84:	2300      	movge	r3, #0
 8008f86:	232d      	movlt	r3, #45	@ 0x2d
 8008f88:	700b      	strb	r3, [r1, #0]
 8008f8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008f8c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008f90:	4691      	mov	r9, r2
 8008f92:	f023 0820 	bic.w	r8, r3, #32
 8008f96:	bfbc      	itt	lt
 8008f98:	4632      	movlt	r2, r6
 8008f9a:	4616      	movlt	r6, r2
 8008f9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008fa0:	d005      	beq.n	8008fae <__cvt+0x42>
 8008fa2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008fa6:	d100      	bne.n	8008faa <__cvt+0x3e>
 8008fa8:	3401      	adds	r4, #1
 8008faa:	2102      	movs	r1, #2
 8008fac:	e000      	b.n	8008fb0 <__cvt+0x44>
 8008fae:	2103      	movs	r1, #3
 8008fb0:	ab03      	add	r3, sp, #12
 8008fb2:	9301      	str	r3, [sp, #4]
 8008fb4:	ab02      	add	r3, sp, #8
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	ec47 6b10 	vmov	d0, r6, r7
 8008fbc:	4653      	mov	r3, sl
 8008fbe:	4622      	mov	r2, r4
 8008fc0:	f001 f922 	bl	800a208 <_dtoa_r>
 8008fc4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008fc8:	4605      	mov	r5, r0
 8008fca:	d119      	bne.n	8009000 <__cvt+0x94>
 8008fcc:	f019 0f01 	tst.w	r9, #1
 8008fd0:	d00e      	beq.n	8008ff0 <__cvt+0x84>
 8008fd2:	eb00 0904 	add.w	r9, r0, r4
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	2300      	movs	r3, #0
 8008fda:	4630      	mov	r0, r6
 8008fdc:	4639      	mov	r1, r7
 8008fde:	f7f7 fd8b 	bl	8000af8 <__aeabi_dcmpeq>
 8008fe2:	b108      	cbz	r0, 8008fe8 <__cvt+0x7c>
 8008fe4:	f8cd 900c 	str.w	r9, [sp, #12]
 8008fe8:	2230      	movs	r2, #48	@ 0x30
 8008fea:	9b03      	ldr	r3, [sp, #12]
 8008fec:	454b      	cmp	r3, r9
 8008fee:	d31e      	bcc.n	800902e <__cvt+0xc2>
 8008ff0:	9b03      	ldr	r3, [sp, #12]
 8008ff2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ff4:	1b5b      	subs	r3, r3, r5
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	6013      	str	r3, [r2, #0]
 8008ffa:	b004      	add	sp, #16
 8008ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009000:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009004:	eb00 0904 	add.w	r9, r0, r4
 8009008:	d1e5      	bne.n	8008fd6 <__cvt+0x6a>
 800900a:	7803      	ldrb	r3, [r0, #0]
 800900c:	2b30      	cmp	r3, #48	@ 0x30
 800900e:	d10a      	bne.n	8009026 <__cvt+0xba>
 8009010:	2200      	movs	r2, #0
 8009012:	2300      	movs	r3, #0
 8009014:	4630      	mov	r0, r6
 8009016:	4639      	mov	r1, r7
 8009018:	f7f7 fd6e 	bl	8000af8 <__aeabi_dcmpeq>
 800901c:	b918      	cbnz	r0, 8009026 <__cvt+0xba>
 800901e:	f1c4 0401 	rsb	r4, r4, #1
 8009022:	f8ca 4000 	str.w	r4, [sl]
 8009026:	f8da 3000 	ldr.w	r3, [sl]
 800902a:	4499      	add	r9, r3
 800902c:	e7d3      	b.n	8008fd6 <__cvt+0x6a>
 800902e:	1c59      	adds	r1, r3, #1
 8009030:	9103      	str	r1, [sp, #12]
 8009032:	701a      	strb	r2, [r3, #0]
 8009034:	e7d9      	b.n	8008fea <__cvt+0x7e>

08009036 <__exponent>:
 8009036:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009038:	2900      	cmp	r1, #0
 800903a:	bfba      	itte	lt
 800903c:	4249      	neglt	r1, r1
 800903e:	232d      	movlt	r3, #45	@ 0x2d
 8009040:	232b      	movge	r3, #43	@ 0x2b
 8009042:	2909      	cmp	r1, #9
 8009044:	7002      	strb	r2, [r0, #0]
 8009046:	7043      	strb	r3, [r0, #1]
 8009048:	dd29      	ble.n	800909e <__exponent+0x68>
 800904a:	f10d 0307 	add.w	r3, sp, #7
 800904e:	461d      	mov	r5, r3
 8009050:	270a      	movs	r7, #10
 8009052:	461a      	mov	r2, r3
 8009054:	fbb1 f6f7 	udiv	r6, r1, r7
 8009058:	fb07 1416 	mls	r4, r7, r6, r1
 800905c:	3430      	adds	r4, #48	@ 0x30
 800905e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009062:	460c      	mov	r4, r1
 8009064:	2c63      	cmp	r4, #99	@ 0x63
 8009066:	f103 33ff 	add.w	r3, r3, #4294967295
 800906a:	4631      	mov	r1, r6
 800906c:	dcf1      	bgt.n	8009052 <__exponent+0x1c>
 800906e:	3130      	adds	r1, #48	@ 0x30
 8009070:	1e94      	subs	r4, r2, #2
 8009072:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009076:	1c41      	adds	r1, r0, #1
 8009078:	4623      	mov	r3, r4
 800907a:	42ab      	cmp	r3, r5
 800907c:	d30a      	bcc.n	8009094 <__exponent+0x5e>
 800907e:	f10d 0309 	add.w	r3, sp, #9
 8009082:	1a9b      	subs	r3, r3, r2
 8009084:	42ac      	cmp	r4, r5
 8009086:	bf88      	it	hi
 8009088:	2300      	movhi	r3, #0
 800908a:	3302      	adds	r3, #2
 800908c:	4403      	add	r3, r0
 800908e:	1a18      	subs	r0, r3, r0
 8009090:	b003      	add	sp, #12
 8009092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009094:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009098:	f801 6f01 	strb.w	r6, [r1, #1]!
 800909c:	e7ed      	b.n	800907a <__exponent+0x44>
 800909e:	2330      	movs	r3, #48	@ 0x30
 80090a0:	3130      	adds	r1, #48	@ 0x30
 80090a2:	7083      	strb	r3, [r0, #2]
 80090a4:	70c1      	strb	r1, [r0, #3]
 80090a6:	1d03      	adds	r3, r0, #4
 80090a8:	e7f1      	b.n	800908e <__exponent+0x58>
	...

080090ac <_printf_float>:
 80090ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b0:	b08d      	sub	sp, #52	@ 0x34
 80090b2:	460c      	mov	r4, r1
 80090b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80090b8:	4616      	mov	r6, r2
 80090ba:	461f      	mov	r7, r3
 80090bc:	4605      	mov	r5, r0
 80090be:	f000 ff69 	bl	8009f94 <_localeconv_r>
 80090c2:	6803      	ldr	r3, [r0, #0]
 80090c4:	9304      	str	r3, [sp, #16]
 80090c6:	4618      	mov	r0, r3
 80090c8:	f7f7 f8ea 	bl	80002a0 <strlen>
 80090cc:	2300      	movs	r3, #0
 80090ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80090d0:	f8d8 3000 	ldr.w	r3, [r8]
 80090d4:	9005      	str	r0, [sp, #20]
 80090d6:	3307      	adds	r3, #7
 80090d8:	f023 0307 	bic.w	r3, r3, #7
 80090dc:	f103 0208 	add.w	r2, r3, #8
 80090e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80090e4:	f8d4 b000 	ldr.w	fp, [r4]
 80090e8:	f8c8 2000 	str.w	r2, [r8]
 80090ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80090f4:	9307      	str	r3, [sp, #28]
 80090f6:	f8cd 8018 	str.w	r8, [sp, #24]
 80090fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80090fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009102:	4b9c      	ldr	r3, [pc, #624]	@ (8009374 <_printf_float+0x2c8>)
 8009104:	f04f 32ff 	mov.w	r2, #4294967295
 8009108:	f7f7 fd28 	bl	8000b5c <__aeabi_dcmpun>
 800910c:	bb70      	cbnz	r0, 800916c <_printf_float+0xc0>
 800910e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009112:	4b98      	ldr	r3, [pc, #608]	@ (8009374 <_printf_float+0x2c8>)
 8009114:	f04f 32ff 	mov.w	r2, #4294967295
 8009118:	f7f7 fd02 	bl	8000b20 <__aeabi_dcmple>
 800911c:	bb30      	cbnz	r0, 800916c <_printf_float+0xc0>
 800911e:	2200      	movs	r2, #0
 8009120:	2300      	movs	r3, #0
 8009122:	4640      	mov	r0, r8
 8009124:	4649      	mov	r1, r9
 8009126:	f7f7 fcf1 	bl	8000b0c <__aeabi_dcmplt>
 800912a:	b110      	cbz	r0, 8009132 <_printf_float+0x86>
 800912c:	232d      	movs	r3, #45	@ 0x2d
 800912e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009132:	4a91      	ldr	r2, [pc, #580]	@ (8009378 <_printf_float+0x2cc>)
 8009134:	4b91      	ldr	r3, [pc, #580]	@ (800937c <_printf_float+0x2d0>)
 8009136:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800913a:	bf8c      	ite	hi
 800913c:	4690      	movhi	r8, r2
 800913e:	4698      	movls	r8, r3
 8009140:	2303      	movs	r3, #3
 8009142:	6123      	str	r3, [r4, #16]
 8009144:	f02b 0304 	bic.w	r3, fp, #4
 8009148:	6023      	str	r3, [r4, #0]
 800914a:	f04f 0900 	mov.w	r9, #0
 800914e:	9700      	str	r7, [sp, #0]
 8009150:	4633      	mov	r3, r6
 8009152:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009154:	4621      	mov	r1, r4
 8009156:	4628      	mov	r0, r5
 8009158:	f000 f9d2 	bl	8009500 <_printf_common>
 800915c:	3001      	adds	r0, #1
 800915e:	f040 808d 	bne.w	800927c <_printf_float+0x1d0>
 8009162:	f04f 30ff 	mov.w	r0, #4294967295
 8009166:	b00d      	add	sp, #52	@ 0x34
 8009168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800916c:	4642      	mov	r2, r8
 800916e:	464b      	mov	r3, r9
 8009170:	4640      	mov	r0, r8
 8009172:	4649      	mov	r1, r9
 8009174:	f7f7 fcf2 	bl	8000b5c <__aeabi_dcmpun>
 8009178:	b140      	cbz	r0, 800918c <_printf_float+0xe0>
 800917a:	464b      	mov	r3, r9
 800917c:	2b00      	cmp	r3, #0
 800917e:	bfbc      	itt	lt
 8009180:	232d      	movlt	r3, #45	@ 0x2d
 8009182:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009186:	4a7e      	ldr	r2, [pc, #504]	@ (8009380 <_printf_float+0x2d4>)
 8009188:	4b7e      	ldr	r3, [pc, #504]	@ (8009384 <_printf_float+0x2d8>)
 800918a:	e7d4      	b.n	8009136 <_printf_float+0x8a>
 800918c:	6863      	ldr	r3, [r4, #4]
 800918e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009192:	9206      	str	r2, [sp, #24]
 8009194:	1c5a      	adds	r2, r3, #1
 8009196:	d13b      	bne.n	8009210 <_printf_float+0x164>
 8009198:	2306      	movs	r3, #6
 800919a:	6063      	str	r3, [r4, #4]
 800919c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80091a0:	2300      	movs	r3, #0
 80091a2:	6022      	str	r2, [r4, #0]
 80091a4:	9303      	str	r3, [sp, #12]
 80091a6:	ab0a      	add	r3, sp, #40	@ 0x28
 80091a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80091ac:	ab09      	add	r3, sp, #36	@ 0x24
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	6861      	ldr	r1, [r4, #4]
 80091b2:	ec49 8b10 	vmov	d0, r8, r9
 80091b6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80091ba:	4628      	mov	r0, r5
 80091bc:	f7ff fed6 	bl	8008f6c <__cvt>
 80091c0:	9b06      	ldr	r3, [sp, #24]
 80091c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80091c4:	2b47      	cmp	r3, #71	@ 0x47
 80091c6:	4680      	mov	r8, r0
 80091c8:	d129      	bne.n	800921e <_printf_float+0x172>
 80091ca:	1cc8      	adds	r0, r1, #3
 80091cc:	db02      	blt.n	80091d4 <_printf_float+0x128>
 80091ce:	6863      	ldr	r3, [r4, #4]
 80091d0:	4299      	cmp	r1, r3
 80091d2:	dd41      	ble.n	8009258 <_printf_float+0x1ac>
 80091d4:	f1aa 0a02 	sub.w	sl, sl, #2
 80091d8:	fa5f fa8a 	uxtb.w	sl, sl
 80091dc:	3901      	subs	r1, #1
 80091de:	4652      	mov	r2, sl
 80091e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80091e4:	9109      	str	r1, [sp, #36]	@ 0x24
 80091e6:	f7ff ff26 	bl	8009036 <__exponent>
 80091ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80091ec:	1813      	adds	r3, r2, r0
 80091ee:	2a01      	cmp	r2, #1
 80091f0:	4681      	mov	r9, r0
 80091f2:	6123      	str	r3, [r4, #16]
 80091f4:	dc02      	bgt.n	80091fc <_printf_float+0x150>
 80091f6:	6822      	ldr	r2, [r4, #0]
 80091f8:	07d2      	lsls	r2, r2, #31
 80091fa:	d501      	bpl.n	8009200 <_printf_float+0x154>
 80091fc:	3301      	adds	r3, #1
 80091fe:	6123      	str	r3, [r4, #16]
 8009200:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009204:	2b00      	cmp	r3, #0
 8009206:	d0a2      	beq.n	800914e <_printf_float+0xa2>
 8009208:	232d      	movs	r3, #45	@ 0x2d
 800920a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800920e:	e79e      	b.n	800914e <_printf_float+0xa2>
 8009210:	9a06      	ldr	r2, [sp, #24]
 8009212:	2a47      	cmp	r2, #71	@ 0x47
 8009214:	d1c2      	bne.n	800919c <_printf_float+0xf0>
 8009216:	2b00      	cmp	r3, #0
 8009218:	d1c0      	bne.n	800919c <_printf_float+0xf0>
 800921a:	2301      	movs	r3, #1
 800921c:	e7bd      	b.n	800919a <_printf_float+0xee>
 800921e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009222:	d9db      	bls.n	80091dc <_printf_float+0x130>
 8009224:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009228:	d118      	bne.n	800925c <_printf_float+0x1b0>
 800922a:	2900      	cmp	r1, #0
 800922c:	6863      	ldr	r3, [r4, #4]
 800922e:	dd0b      	ble.n	8009248 <_printf_float+0x19c>
 8009230:	6121      	str	r1, [r4, #16]
 8009232:	b913      	cbnz	r3, 800923a <_printf_float+0x18e>
 8009234:	6822      	ldr	r2, [r4, #0]
 8009236:	07d0      	lsls	r0, r2, #31
 8009238:	d502      	bpl.n	8009240 <_printf_float+0x194>
 800923a:	3301      	adds	r3, #1
 800923c:	440b      	add	r3, r1
 800923e:	6123      	str	r3, [r4, #16]
 8009240:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009242:	f04f 0900 	mov.w	r9, #0
 8009246:	e7db      	b.n	8009200 <_printf_float+0x154>
 8009248:	b913      	cbnz	r3, 8009250 <_printf_float+0x1a4>
 800924a:	6822      	ldr	r2, [r4, #0]
 800924c:	07d2      	lsls	r2, r2, #31
 800924e:	d501      	bpl.n	8009254 <_printf_float+0x1a8>
 8009250:	3302      	adds	r3, #2
 8009252:	e7f4      	b.n	800923e <_printf_float+0x192>
 8009254:	2301      	movs	r3, #1
 8009256:	e7f2      	b.n	800923e <_printf_float+0x192>
 8009258:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800925c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800925e:	4299      	cmp	r1, r3
 8009260:	db05      	blt.n	800926e <_printf_float+0x1c2>
 8009262:	6823      	ldr	r3, [r4, #0]
 8009264:	6121      	str	r1, [r4, #16]
 8009266:	07d8      	lsls	r0, r3, #31
 8009268:	d5ea      	bpl.n	8009240 <_printf_float+0x194>
 800926a:	1c4b      	adds	r3, r1, #1
 800926c:	e7e7      	b.n	800923e <_printf_float+0x192>
 800926e:	2900      	cmp	r1, #0
 8009270:	bfd4      	ite	le
 8009272:	f1c1 0202 	rsble	r2, r1, #2
 8009276:	2201      	movgt	r2, #1
 8009278:	4413      	add	r3, r2
 800927a:	e7e0      	b.n	800923e <_printf_float+0x192>
 800927c:	6823      	ldr	r3, [r4, #0]
 800927e:	055a      	lsls	r2, r3, #21
 8009280:	d407      	bmi.n	8009292 <_printf_float+0x1e6>
 8009282:	6923      	ldr	r3, [r4, #16]
 8009284:	4642      	mov	r2, r8
 8009286:	4631      	mov	r1, r6
 8009288:	4628      	mov	r0, r5
 800928a:	47b8      	blx	r7
 800928c:	3001      	adds	r0, #1
 800928e:	d12b      	bne.n	80092e8 <_printf_float+0x23c>
 8009290:	e767      	b.n	8009162 <_printf_float+0xb6>
 8009292:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009296:	f240 80dd 	bls.w	8009454 <_printf_float+0x3a8>
 800929a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800929e:	2200      	movs	r2, #0
 80092a0:	2300      	movs	r3, #0
 80092a2:	f7f7 fc29 	bl	8000af8 <__aeabi_dcmpeq>
 80092a6:	2800      	cmp	r0, #0
 80092a8:	d033      	beq.n	8009312 <_printf_float+0x266>
 80092aa:	4a37      	ldr	r2, [pc, #220]	@ (8009388 <_printf_float+0x2dc>)
 80092ac:	2301      	movs	r3, #1
 80092ae:	4631      	mov	r1, r6
 80092b0:	4628      	mov	r0, r5
 80092b2:	47b8      	blx	r7
 80092b4:	3001      	adds	r0, #1
 80092b6:	f43f af54 	beq.w	8009162 <_printf_float+0xb6>
 80092ba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80092be:	4543      	cmp	r3, r8
 80092c0:	db02      	blt.n	80092c8 <_printf_float+0x21c>
 80092c2:	6823      	ldr	r3, [r4, #0]
 80092c4:	07d8      	lsls	r0, r3, #31
 80092c6:	d50f      	bpl.n	80092e8 <_printf_float+0x23c>
 80092c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092cc:	4631      	mov	r1, r6
 80092ce:	4628      	mov	r0, r5
 80092d0:	47b8      	blx	r7
 80092d2:	3001      	adds	r0, #1
 80092d4:	f43f af45 	beq.w	8009162 <_printf_float+0xb6>
 80092d8:	f04f 0900 	mov.w	r9, #0
 80092dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80092e0:	f104 0a1a 	add.w	sl, r4, #26
 80092e4:	45c8      	cmp	r8, r9
 80092e6:	dc09      	bgt.n	80092fc <_printf_float+0x250>
 80092e8:	6823      	ldr	r3, [r4, #0]
 80092ea:	079b      	lsls	r3, r3, #30
 80092ec:	f100 8103 	bmi.w	80094f6 <_printf_float+0x44a>
 80092f0:	68e0      	ldr	r0, [r4, #12]
 80092f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092f4:	4298      	cmp	r0, r3
 80092f6:	bfb8      	it	lt
 80092f8:	4618      	movlt	r0, r3
 80092fa:	e734      	b.n	8009166 <_printf_float+0xba>
 80092fc:	2301      	movs	r3, #1
 80092fe:	4652      	mov	r2, sl
 8009300:	4631      	mov	r1, r6
 8009302:	4628      	mov	r0, r5
 8009304:	47b8      	blx	r7
 8009306:	3001      	adds	r0, #1
 8009308:	f43f af2b 	beq.w	8009162 <_printf_float+0xb6>
 800930c:	f109 0901 	add.w	r9, r9, #1
 8009310:	e7e8      	b.n	80092e4 <_printf_float+0x238>
 8009312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009314:	2b00      	cmp	r3, #0
 8009316:	dc39      	bgt.n	800938c <_printf_float+0x2e0>
 8009318:	4a1b      	ldr	r2, [pc, #108]	@ (8009388 <_printf_float+0x2dc>)
 800931a:	2301      	movs	r3, #1
 800931c:	4631      	mov	r1, r6
 800931e:	4628      	mov	r0, r5
 8009320:	47b8      	blx	r7
 8009322:	3001      	adds	r0, #1
 8009324:	f43f af1d 	beq.w	8009162 <_printf_float+0xb6>
 8009328:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800932c:	ea59 0303 	orrs.w	r3, r9, r3
 8009330:	d102      	bne.n	8009338 <_printf_float+0x28c>
 8009332:	6823      	ldr	r3, [r4, #0]
 8009334:	07d9      	lsls	r1, r3, #31
 8009336:	d5d7      	bpl.n	80092e8 <_printf_float+0x23c>
 8009338:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800933c:	4631      	mov	r1, r6
 800933e:	4628      	mov	r0, r5
 8009340:	47b8      	blx	r7
 8009342:	3001      	adds	r0, #1
 8009344:	f43f af0d 	beq.w	8009162 <_printf_float+0xb6>
 8009348:	f04f 0a00 	mov.w	sl, #0
 800934c:	f104 0b1a 	add.w	fp, r4, #26
 8009350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009352:	425b      	negs	r3, r3
 8009354:	4553      	cmp	r3, sl
 8009356:	dc01      	bgt.n	800935c <_printf_float+0x2b0>
 8009358:	464b      	mov	r3, r9
 800935a:	e793      	b.n	8009284 <_printf_float+0x1d8>
 800935c:	2301      	movs	r3, #1
 800935e:	465a      	mov	r2, fp
 8009360:	4631      	mov	r1, r6
 8009362:	4628      	mov	r0, r5
 8009364:	47b8      	blx	r7
 8009366:	3001      	adds	r0, #1
 8009368:	f43f aefb 	beq.w	8009162 <_printf_float+0xb6>
 800936c:	f10a 0a01 	add.w	sl, sl, #1
 8009370:	e7ee      	b.n	8009350 <_printf_float+0x2a4>
 8009372:	bf00      	nop
 8009374:	7fefffff 	.word	0x7fefffff
 8009378:	0800ce9e 	.word	0x0800ce9e
 800937c:	0800ce9a 	.word	0x0800ce9a
 8009380:	0800cea6 	.word	0x0800cea6
 8009384:	0800cea2 	.word	0x0800cea2
 8009388:	0800ceaa 	.word	0x0800ceaa
 800938c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800938e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009392:	4553      	cmp	r3, sl
 8009394:	bfa8      	it	ge
 8009396:	4653      	movge	r3, sl
 8009398:	2b00      	cmp	r3, #0
 800939a:	4699      	mov	r9, r3
 800939c:	dc36      	bgt.n	800940c <_printf_float+0x360>
 800939e:	f04f 0b00 	mov.w	fp, #0
 80093a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093a6:	f104 021a 	add.w	r2, r4, #26
 80093aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80093ac:	9306      	str	r3, [sp, #24]
 80093ae:	eba3 0309 	sub.w	r3, r3, r9
 80093b2:	455b      	cmp	r3, fp
 80093b4:	dc31      	bgt.n	800941a <_printf_float+0x36e>
 80093b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093b8:	459a      	cmp	sl, r3
 80093ba:	dc3a      	bgt.n	8009432 <_printf_float+0x386>
 80093bc:	6823      	ldr	r3, [r4, #0]
 80093be:	07da      	lsls	r2, r3, #31
 80093c0:	d437      	bmi.n	8009432 <_printf_float+0x386>
 80093c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093c4:	ebaa 0903 	sub.w	r9, sl, r3
 80093c8:	9b06      	ldr	r3, [sp, #24]
 80093ca:	ebaa 0303 	sub.w	r3, sl, r3
 80093ce:	4599      	cmp	r9, r3
 80093d0:	bfa8      	it	ge
 80093d2:	4699      	movge	r9, r3
 80093d4:	f1b9 0f00 	cmp.w	r9, #0
 80093d8:	dc33      	bgt.n	8009442 <_printf_float+0x396>
 80093da:	f04f 0800 	mov.w	r8, #0
 80093de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093e2:	f104 0b1a 	add.w	fp, r4, #26
 80093e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093e8:	ebaa 0303 	sub.w	r3, sl, r3
 80093ec:	eba3 0309 	sub.w	r3, r3, r9
 80093f0:	4543      	cmp	r3, r8
 80093f2:	f77f af79 	ble.w	80092e8 <_printf_float+0x23c>
 80093f6:	2301      	movs	r3, #1
 80093f8:	465a      	mov	r2, fp
 80093fa:	4631      	mov	r1, r6
 80093fc:	4628      	mov	r0, r5
 80093fe:	47b8      	blx	r7
 8009400:	3001      	adds	r0, #1
 8009402:	f43f aeae 	beq.w	8009162 <_printf_float+0xb6>
 8009406:	f108 0801 	add.w	r8, r8, #1
 800940a:	e7ec      	b.n	80093e6 <_printf_float+0x33a>
 800940c:	4642      	mov	r2, r8
 800940e:	4631      	mov	r1, r6
 8009410:	4628      	mov	r0, r5
 8009412:	47b8      	blx	r7
 8009414:	3001      	adds	r0, #1
 8009416:	d1c2      	bne.n	800939e <_printf_float+0x2f2>
 8009418:	e6a3      	b.n	8009162 <_printf_float+0xb6>
 800941a:	2301      	movs	r3, #1
 800941c:	4631      	mov	r1, r6
 800941e:	4628      	mov	r0, r5
 8009420:	9206      	str	r2, [sp, #24]
 8009422:	47b8      	blx	r7
 8009424:	3001      	adds	r0, #1
 8009426:	f43f ae9c 	beq.w	8009162 <_printf_float+0xb6>
 800942a:	9a06      	ldr	r2, [sp, #24]
 800942c:	f10b 0b01 	add.w	fp, fp, #1
 8009430:	e7bb      	b.n	80093aa <_printf_float+0x2fe>
 8009432:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009436:	4631      	mov	r1, r6
 8009438:	4628      	mov	r0, r5
 800943a:	47b8      	blx	r7
 800943c:	3001      	adds	r0, #1
 800943e:	d1c0      	bne.n	80093c2 <_printf_float+0x316>
 8009440:	e68f      	b.n	8009162 <_printf_float+0xb6>
 8009442:	9a06      	ldr	r2, [sp, #24]
 8009444:	464b      	mov	r3, r9
 8009446:	4442      	add	r2, r8
 8009448:	4631      	mov	r1, r6
 800944a:	4628      	mov	r0, r5
 800944c:	47b8      	blx	r7
 800944e:	3001      	adds	r0, #1
 8009450:	d1c3      	bne.n	80093da <_printf_float+0x32e>
 8009452:	e686      	b.n	8009162 <_printf_float+0xb6>
 8009454:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009458:	f1ba 0f01 	cmp.w	sl, #1
 800945c:	dc01      	bgt.n	8009462 <_printf_float+0x3b6>
 800945e:	07db      	lsls	r3, r3, #31
 8009460:	d536      	bpl.n	80094d0 <_printf_float+0x424>
 8009462:	2301      	movs	r3, #1
 8009464:	4642      	mov	r2, r8
 8009466:	4631      	mov	r1, r6
 8009468:	4628      	mov	r0, r5
 800946a:	47b8      	blx	r7
 800946c:	3001      	adds	r0, #1
 800946e:	f43f ae78 	beq.w	8009162 <_printf_float+0xb6>
 8009472:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009476:	4631      	mov	r1, r6
 8009478:	4628      	mov	r0, r5
 800947a:	47b8      	blx	r7
 800947c:	3001      	adds	r0, #1
 800947e:	f43f ae70 	beq.w	8009162 <_printf_float+0xb6>
 8009482:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009486:	2200      	movs	r2, #0
 8009488:	2300      	movs	r3, #0
 800948a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800948e:	f7f7 fb33 	bl	8000af8 <__aeabi_dcmpeq>
 8009492:	b9c0      	cbnz	r0, 80094c6 <_printf_float+0x41a>
 8009494:	4653      	mov	r3, sl
 8009496:	f108 0201 	add.w	r2, r8, #1
 800949a:	4631      	mov	r1, r6
 800949c:	4628      	mov	r0, r5
 800949e:	47b8      	blx	r7
 80094a0:	3001      	adds	r0, #1
 80094a2:	d10c      	bne.n	80094be <_printf_float+0x412>
 80094a4:	e65d      	b.n	8009162 <_printf_float+0xb6>
 80094a6:	2301      	movs	r3, #1
 80094a8:	465a      	mov	r2, fp
 80094aa:	4631      	mov	r1, r6
 80094ac:	4628      	mov	r0, r5
 80094ae:	47b8      	blx	r7
 80094b0:	3001      	adds	r0, #1
 80094b2:	f43f ae56 	beq.w	8009162 <_printf_float+0xb6>
 80094b6:	f108 0801 	add.w	r8, r8, #1
 80094ba:	45d0      	cmp	r8, sl
 80094bc:	dbf3      	blt.n	80094a6 <_printf_float+0x3fa>
 80094be:	464b      	mov	r3, r9
 80094c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80094c4:	e6df      	b.n	8009286 <_printf_float+0x1da>
 80094c6:	f04f 0800 	mov.w	r8, #0
 80094ca:	f104 0b1a 	add.w	fp, r4, #26
 80094ce:	e7f4      	b.n	80094ba <_printf_float+0x40e>
 80094d0:	2301      	movs	r3, #1
 80094d2:	4642      	mov	r2, r8
 80094d4:	e7e1      	b.n	800949a <_printf_float+0x3ee>
 80094d6:	2301      	movs	r3, #1
 80094d8:	464a      	mov	r2, r9
 80094da:	4631      	mov	r1, r6
 80094dc:	4628      	mov	r0, r5
 80094de:	47b8      	blx	r7
 80094e0:	3001      	adds	r0, #1
 80094e2:	f43f ae3e 	beq.w	8009162 <_printf_float+0xb6>
 80094e6:	f108 0801 	add.w	r8, r8, #1
 80094ea:	68e3      	ldr	r3, [r4, #12]
 80094ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80094ee:	1a5b      	subs	r3, r3, r1
 80094f0:	4543      	cmp	r3, r8
 80094f2:	dcf0      	bgt.n	80094d6 <_printf_float+0x42a>
 80094f4:	e6fc      	b.n	80092f0 <_printf_float+0x244>
 80094f6:	f04f 0800 	mov.w	r8, #0
 80094fa:	f104 0919 	add.w	r9, r4, #25
 80094fe:	e7f4      	b.n	80094ea <_printf_float+0x43e>

08009500 <_printf_common>:
 8009500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009504:	4616      	mov	r6, r2
 8009506:	4698      	mov	r8, r3
 8009508:	688a      	ldr	r2, [r1, #8]
 800950a:	690b      	ldr	r3, [r1, #16]
 800950c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009510:	4293      	cmp	r3, r2
 8009512:	bfb8      	it	lt
 8009514:	4613      	movlt	r3, r2
 8009516:	6033      	str	r3, [r6, #0]
 8009518:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800951c:	4607      	mov	r7, r0
 800951e:	460c      	mov	r4, r1
 8009520:	b10a      	cbz	r2, 8009526 <_printf_common+0x26>
 8009522:	3301      	adds	r3, #1
 8009524:	6033      	str	r3, [r6, #0]
 8009526:	6823      	ldr	r3, [r4, #0]
 8009528:	0699      	lsls	r1, r3, #26
 800952a:	bf42      	ittt	mi
 800952c:	6833      	ldrmi	r3, [r6, #0]
 800952e:	3302      	addmi	r3, #2
 8009530:	6033      	strmi	r3, [r6, #0]
 8009532:	6825      	ldr	r5, [r4, #0]
 8009534:	f015 0506 	ands.w	r5, r5, #6
 8009538:	d106      	bne.n	8009548 <_printf_common+0x48>
 800953a:	f104 0a19 	add.w	sl, r4, #25
 800953e:	68e3      	ldr	r3, [r4, #12]
 8009540:	6832      	ldr	r2, [r6, #0]
 8009542:	1a9b      	subs	r3, r3, r2
 8009544:	42ab      	cmp	r3, r5
 8009546:	dc26      	bgt.n	8009596 <_printf_common+0x96>
 8009548:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800954c:	6822      	ldr	r2, [r4, #0]
 800954e:	3b00      	subs	r3, #0
 8009550:	bf18      	it	ne
 8009552:	2301      	movne	r3, #1
 8009554:	0692      	lsls	r2, r2, #26
 8009556:	d42b      	bmi.n	80095b0 <_printf_common+0xb0>
 8009558:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800955c:	4641      	mov	r1, r8
 800955e:	4638      	mov	r0, r7
 8009560:	47c8      	blx	r9
 8009562:	3001      	adds	r0, #1
 8009564:	d01e      	beq.n	80095a4 <_printf_common+0xa4>
 8009566:	6823      	ldr	r3, [r4, #0]
 8009568:	6922      	ldr	r2, [r4, #16]
 800956a:	f003 0306 	and.w	r3, r3, #6
 800956e:	2b04      	cmp	r3, #4
 8009570:	bf02      	ittt	eq
 8009572:	68e5      	ldreq	r5, [r4, #12]
 8009574:	6833      	ldreq	r3, [r6, #0]
 8009576:	1aed      	subeq	r5, r5, r3
 8009578:	68a3      	ldr	r3, [r4, #8]
 800957a:	bf0c      	ite	eq
 800957c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009580:	2500      	movne	r5, #0
 8009582:	4293      	cmp	r3, r2
 8009584:	bfc4      	itt	gt
 8009586:	1a9b      	subgt	r3, r3, r2
 8009588:	18ed      	addgt	r5, r5, r3
 800958a:	2600      	movs	r6, #0
 800958c:	341a      	adds	r4, #26
 800958e:	42b5      	cmp	r5, r6
 8009590:	d11a      	bne.n	80095c8 <_printf_common+0xc8>
 8009592:	2000      	movs	r0, #0
 8009594:	e008      	b.n	80095a8 <_printf_common+0xa8>
 8009596:	2301      	movs	r3, #1
 8009598:	4652      	mov	r2, sl
 800959a:	4641      	mov	r1, r8
 800959c:	4638      	mov	r0, r7
 800959e:	47c8      	blx	r9
 80095a0:	3001      	adds	r0, #1
 80095a2:	d103      	bne.n	80095ac <_printf_common+0xac>
 80095a4:	f04f 30ff 	mov.w	r0, #4294967295
 80095a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ac:	3501      	adds	r5, #1
 80095ae:	e7c6      	b.n	800953e <_printf_common+0x3e>
 80095b0:	18e1      	adds	r1, r4, r3
 80095b2:	1c5a      	adds	r2, r3, #1
 80095b4:	2030      	movs	r0, #48	@ 0x30
 80095b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80095ba:	4422      	add	r2, r4
 80095bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80095c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80095c4:	3302      	adds	r3, #2
 80095c6:	e7c7      	b.n	8009558 <_printf_common+0x58>
 80095c8:	2301      	movs	r3, #1
 80095ca:	4622      	mov	r2, r4
 80095cc:	4641      	mov	r1, r8
 80095ce:	4638      	mov	r0, r7
 80095d0:	47c8      	blx	r9
 80095d2:	3001      	adds	r0, #1
 80095d4:	d0e6      	beq.n	80095a4 <_printf_common+0xa4>
 80095d6:	3601      	adds	r6, #1
 80095d8:	e7d9      	b.n	800958e <_printf_common+0x8e>
	...

080095dc <_printf_i>:
 80095dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095e0:	7e0f      	ldrb	r7, [r1, #24]
 80095e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80095e4:	2f78      	cmp	r7, #120	@ 0x78
 80095e6:	4691      	mov	r9, r2
 80095e8:	4680      	mov	r8, r0
 80095ea:	460c      	mov	r4, r1
 80095ec:	469a      	mov	sl, r3
 80095ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80095f2:	d807      	bhi.n	8009604 <_printf_i+0x28>
 80095f4:	2f62      	cmp	r7, #98	@ 0x62
 80095f6:	d80a      	bhi.n	800960e <_printf_i+0x32>
 80095f8:	2f00      	cmp	r7, #0
 80095fa:	f000 80d1 	beq.w	80097a0 <_printf_i+0x1c4>
 80095fe:	2f58      	cmp	r7, #88	@ 0x58
 8009600:	f000 80b8 	beq.w	8009774 <_printf_i+0x198>
 8009604:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009608:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800960c:	e03a      	b.n	8009684 <_printf_i+0xa8>
 800960e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009612:	2b15      	cmp	r3, #21
 8009614:	d8f6      	bhi.n	8009604 <_printf_i+0x28>
 8009616:	a101      	add	r1, pc, #4	@ (adr r1, 800961c <_printf_i+0x40>)
 8009618:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800961c:	08009675 	.word	0x08009675
 8009620:	08009689 	.word	0x08009689
 8009624:	08009605 	.word	0x08009605
 8009628:	08009605 	.word	0x08009605
 800962c:	08009605 	.word	0x08009605
 8009630:	08009605 	.word	0x08009605
 8009634:	08009689 	.word	0x08009689
 8009638:	08009605 	.word	0x08009605
 800963c:	08009605 	.word	0x08009605
 8009640:	08009605 	.word	0x08009605
 8009644:	08009605 	.word	0x08009605
 8009648:	08009787 	.word	0x08009787
 800964c:	080096b3 	.word	0x080096b3
 8009650:	08009741 	.word	0x08009741
 8009654:	08009605 	.word	0x08009605
 8009658:	08009605 	.word	0x08009605
 800965c:	080097a9 	.word	0x080097a9
 8009660:	08009605 	.word	0x08009605
 8009664:	080096b3 	.word	0x080096b3
 8009668:	08009605 	.word	0x08009605
 800966c:	08009605 	.word	0x08009605
 8009670:	08009749 	.word	0x08009749
 8009674:	6833      	ldr	r3, [r6, #0]
 8009676:	1d1a      	adds	r2, r3, #4
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	6032      	str	r2, [r6, #0]
 800967c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009680:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009684:	2301      	movs	r3, #1
 8009686:	e09c      	b.n	80097c2 <_printf_i+0x1e6>
 8009688:	6833      	ldr	r3, [r6, #0]
 800968a:	6820      	ldr	r0, [r4, #0]
 800968c:	1d19      	adds	r1, r3, #4
 800968e:	6031      	str	r1, [r6, #0]
 8009690:	0606      	lsls	r6, r0, #24
 8009692:	d501      	bpl.n	8009698 <_printf_i+0xbc>
 8009694:	681d      	ldr	r5, [r3, #0]
 8009696:	e003      	b.n	80096a0 <_printf_i+0xc4>
 8009698:	0645      	lsls	r5, r0, #25
 800969a:	d5fb      	bpl.n	8009694 <_printf_i+0xb8>
 800969c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80096a0:	2d00      	cmp	r5, #0
 80096a2:	da03      	bge.n	80096ac <_printf_i+0xd0>
 80096a4:	232d      	movs	r3, #45	@ 0x2d
 80096a6:	426d      	negs	r5, r5
 80096a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80096ac:	4858      	ldr	r0, [pc, #352]	@ (8009810 <_printf_i+0x234>)
 80096ae:	230a      	movs	r3, #10
 80096b0:	e011      	b.n	80096d6 <_printf_i+0xfa>
 80096b2:	6821      	ldr	r1, [r4, #0]
 80096b4:	6833      	ldr	r3, [r6, #0]
 80096b6:	0608      	lsls	r0, r1, #24
 80096b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80096bc:	d402      	bmi.n	80096c4 <_printf_i+0xe8>
 80096be:	0649      	lsls	r1, r1, #25
 80096c0:	bf48      	it	mi
 80096c2:	b2ad      	uxthmi	r5, r5
 80096c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80096c6:	4852      	ldr	r0, [pc, #328]	@ (8009810 <_printf_i+0x234>)
 80096c8:	6033      	str	r3, [r6, #0]
 80096ca:	bf14      	ite	ne
 80096cc:	230a      	movne	r3, #10
 80096ce:	2308      	moveq	r3, #8
 80096d0:	2100      	movs	r1, #0
 80096d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80096d6:	6866      	ldr	r6, [r4, #4]
 80096d8:	60a6      	str	r6, [r4, #8]
 80096da:	2e00      	cmp	r6, #0
 80096dc:	db05      	blt.n	80096ea <_printf_i+0x10e>
 80096de:	6821      	ldr	r1, [r4, #0]
 80096e0:	432e      	orrs	r6, r5
 80096e2:	f021 0104 	bic.w	r1, r1, #4
 80096e6:	6021      	str	r1, [r4, #0]
 80096e8:	d04b      	beq.n	8009782 <_printf_i+0x1a6>
 80096ea:	4616      	mov	r6, r2
 80096ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80096f0:	fb03 5711 	mls	r7, r3, r1, r5
 80096f4:	5dc7      	ldrb	r7, [r0, r7]
 80096f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80096fa:	462f      	mov	r7, r5
 80096fc:	42bb      	cmp	r3, r7
 80096fe:	460d      	mov	r5, r1
 8009700:	d9f4      	bls.n	80096ec <_printf_i+0x110>
 8009702:	2b08      	cmp	r3, #8
 8009704:	d10b      	bne.n	800971e <_printf_i+0x142>
 8009706:	6823      	ldr	r3, [r4, #0]
 8009708:	07df      	lsls	r7, r3, #31
 800970a:	d508      	bpl.n	800971e <_printf_i+0x142>
 800970c:	6923      	ldr	r3, [r4, #16]
 800970e:	6861      	ldr	r1, [r4, #4]
 8009710:	4299      	cmp	r1, r3
 8009712:	bfde      	ittt	le
 8009714:	2330      	movle	r3, #48	@ 0x30
 8009716:	f806 3c01 	strble.w	r3, [r6, #-1]
 800971a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800971e:	1b92      	subs	r2, r2, r6
 8009720:	6122      	str	r2, [r4, #16]
 8009722:	f8cd a000 	str.w	sl, [sp]
 8009726:	464b      	mov	r3, r9
 8009728:	aa03      	add	r2, sp, #12
 800972a:	4621      	mov	r1, r4
 800972c:	4640      	mov	r0, r8
 800972e:	f7ff fee7 	bl	8009500 <_printf_common>
 8009732:	3001      	adds	r0, #1
 8009734:	d14a      	bne.n	80097cc <_printf_i+0x1f0>
 8009736:	f04f 30ff 	mov.w	r0, #4294967295
 800973a:	b004      	add	sp, #16
 800973c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009740:	6823      	ldr	r3, [r4, #0]
 8009742:	f043 0320 	orr.w	r3, r3, #32
 8009746:	6023      	str	r3, [r4, #0]
 8009748:	4832      	ldr	r0, [pc, #200]	@ (8009814 <_printf_i+0x238>)
 800974a:	2778      	movs	r7, #120	@ 0x78
 800974c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009750:	6823      	ldr	r3, [r4, #0]
 8009752:	6831      	ldr	r1, [r6, #0]
 8009754:	061f      	lsls	r7, r3, #24
 8009756:	f851 5b04 	ldr.w	r5, [r1], #4
 800975a:	d402      	bmi.n	8009762 <_printf_i+0x186>
 800975c:	065f      	lsls	r7, r3, #25
 800975e:	bf48      	it	mi
 8009760:	b2ad      	uxthmi	r5, r5
 8009762:	6031      	str	r1, [r6, #0]
 8009764:	07d9      	lsls	r1, r3, #31
 8009766:	bf44      	itt	mi
 8009768:	f043 0320 	orrmi.w	r3, r3, #32
 800976c:	6023      	strmi	r3, [r4, #0]
 800976e:	b11d      	cbz	r5, 8009778 <_printf_i+0x19c>
 8009770:	2310      	movs	r3, #16
 8009772:	e7ad      	b.n	80096d0 <_printf_i+0xf4>
 8009774:	4826      	ldr	r0, [pc, #152]	@ (8009810 <_printf_i+0x234>)
 8009776:	e7e9      	b.n	800974c <_printf_i+0x170>
 8009778:	6823      	ldr	r3, [r4, #0]
 800977a:	f023 0320 	bic.w	r3, r3, #32
 800977e:	6023      	str	r3, [r4, #0]
 8009780:	e7f6      	b.n	8009770 <_printf_i+0x194>
 8009782:	4616      	mov	r6, r2
 8009784:	e7bd      	b.n	8009702 <_printf_i+0x126>
 8009786:	6833      	ldr	r3, [r6, #0]
 8009788:	6825      	ldr	r5, [r4, #0]
 800978a:	6961      	ldr	r1, [r4, #20]
 800978c:	1d18      	adds	r0, r3, #4
 800978e:	6030      	str	r0, [r6, #0]
 8009790:	062e      	lsls	r6, r5, #24
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	d501      	bpl.n	800979a <_printf_i+0x1be>
 8009796:	6019      	str	r1, [r3, #0]
 8009798:	e002      	b.n	80097a0 <_printf_i+0x1c4>
 800979a:	0668      	lsls	r0, r5, #25
 800979c:	d5fb      	bpl.n	8009796 <_printf_i+0x1ba>
 800979e:	8019      	strh	r1, [r3, #0]
 80097a0:	2300      	movs	r3, #0
 80097a2:	6123      	str	r3, [r4, #16]
 80097a4:	4616      	mov	r6, r2
 80097a6:	e7bc      	b.n	8009722 <_printf_i+0x146>
 80097a8:	6833      	ldr	r3, [r6, #0]
 80097aa:	1d1a      	adds	r2, r3, #4
 80097ac:	6032      	str	r2, [r6, #0]
 80097ae:	681e      	ldr	r6, [r3, #0]
 80097b0:	6862      	ldr	r2, [r4, #4]
 80097b2:	2100      	movs	r1, #0
 80097b4:	4630      	mov	r0, r6
 80097b6:	f7f6 fd23 	bl	8000200 <memchr>
 80097ba:	b108      	cbz	r0, 80097c0 <_printf_i+0x1e4>
 80097bc:	1b80      	subs	r0, r0, r6
 80097be:	6060      	str	r0, [r4, #4]
 80097c0:	6863      	ldr	r3, [r4, #4]
 80097c2:	6123      	str	r3, [r4, #16]
 80097c4:	2300      	movs	r3, #0
 80097c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80097ca:	e7aa      	b.n	8009722 <_printf_i+0x146>
 80097cc:	6923      	ldr	r3, [r4, #16]
 80097ce:	4632      	mov	r2, r6
 80097d0:	4649      	mov	r1, r9
 80097d2:	4640      	mov	r0, r8
 80097d4:	47d0      	blx	sl
 80097d6:	3001      	adds	r0, #1
 80097d8:	d0ad      	beq.n	8009736 <_printf_i+0x15a>
 80097da:	6823      	ldr	r3, [r4, #0]
 80097dc:	079b      	lsls	r3, r3, #30
 80097de:	d413      	bmi.n	8009808 <_printf_i+0x22c>
 80097e0:	68e0      	ldr	r0, [r4, #12]
 80097e2:	9b03      	ldr	r3, [sp, #12]
 80097e4:	4298      	cmp	r0, r3
 80097e6:	bfb8      	it	lt
 80097e8:	4618      	movlt	r0, r3
 80097ea:	e7a6      	b.n	800973a <_printf_i+0x15e>
 80097ec:	2301      	movs	r3, #1
 80097ee:	4632      	mov	r2, r6
 80097f0:	4649      	mov	r1, r9
 80097f2:	4640      	mov	r0, r8
 80097f4:	47d0      	blx	sl
 80097f6:	3001      	adds	r0, #1
 80097f8:	d09d      	beq.n	8009736 <_printf_i+0x15a>
 80097fa:	3501      	adds	r5, #1
 80097fc:	68e3      	ldr	r3, [r4, #12]
 80097fe:	9903      	ldr	r1, [sp, #12]
 8009800:	1a5b      	subs	r3, r3, r1
 8009802:	42ab      	cmp	r3, r5
 8009804:	dcf2      	bgt.n	80097ec <_printf_i+0x210>
 8009806:	e7eb      	b.n	80097e0 <_printf_i+0x204>
 8009808:	2500      	movs	r5, #0
 800980a:	f104 0619 	add.w	r6, r4, #25
 800980e:	e7f5      	b.n	80097fc <_printf_i+0x220>
 8009810:	0800ceac 	.word	0x0800ceac
 8009814:	0800cebd 	.word	0x0800cebd

08009818 <_scanf_float>:
 8009818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800981c:	b087      	sub	sp, #28
 800981e:	4691      	mov	r9, r2
 8009820:	9303      	str	r3, [sp, #12]
 8009822:	688b      	ldr	r3, [r1, #8]
 8009824:	1e5a      	subs	r2, r3, #1
 8009826:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800982a:	bf81      	itttt	hi
 800982c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009830:	eb03 0b05 	addhi.w	fp, r3, r5
 8009834:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009838:	608b      	strhi	r3, [r1, #8]
 800983a:	680b      	ldr	r3, [r1, #0]
 800983c:	460a      	mov	r2, r1
 800983e:	f04f 0500 	mov.w	r5, #0
 8009842:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009846:	f842 3b1c 	str.w	r3, [r2], #28
 800984a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800984e:	4680      	mov	r8, r0
 8009850:	460c      	mov	r4, r1
 8009852:	bf98      	it	ls
 8009854:	f04f 0b00 	movls.w	fp, #0
 8009858:	9201      	str	r2, [sp, #4]
 800985a:	4616      	mov	r6, r2
 800985c:	46aa      	mov	sl, r5
 800985e:	462f      	mov	r7, r5
 8009860:	9502      	str	r5, [sp, #8]
 8009862:	68a2      	ldr	r2, [r4, #8]
 8009864:	b15a      	cbz	r2, 800987e <_scanf_float+0x66>
 8009866:	f8d9 3000 	ldr.w	r3, [r9]
 800986a:	781b      	ldrb	r3, [r3, #0]
 800986c:	2b4e      	cmp	r3, #78	@ 0x4e
 800986e:	d863      	bhi.n	8009938 <_scanf_float+0x120>
 8009870:	2b40      	cmp	r3, #64	@ 0x40
 8009872:	d83b      	bhi.n	80098ec <_scanf_float+0xd4>
 8009874:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009878:	b2c8      	uxtb	r0, r1
 800987a:	280e      	cmp	r0, #14
 800987c:	d939      	bls.n	80098f2 <_scanf_float+0xda>
 800987e:	b11f      	cbz	r7, 8009888 <_scanf_float+0x70>
 8009880:	6823      	ldr	r3, [r4, #0]
 8009882:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009886:	6023      	str	r3, [r4, #0]
 8009888:	f10a 3aff 	add.w	sl, sl, #4294967295
 800988c:	f1ba 0f01 	cmp.w	sl, #1
 8009890:	f200 8114 	bhi.w	8009abc <_scanf_float+0x2a4>
 8009894:	9b01      	ldr	r3, [sp, #4]
 8009896:	429e      	cmp	r6, r3
 8009898:	f200 8105 	bhi.w	8009aa6 <_scanf_float+0x28e>
 800989c:	2001      	movs	r0, #1
 800989e:	b007      	add	sp, #28
 80098a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80098a8:	2a0d      	cmp	r2, #13
 80098aa:	d8e8      	bhi.n	800987e <_scanf_float+0x66>
 80098ac:	a101      	add	r1, pc, #4	@ (adr r1, 80098b4 <_scanf_float+0x9c>)
 80098ae:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80098b2:	bf00      	nop
 80098b4:	080099fd 	.word	0x080099fd
 80098b8:	0800987f 	.word	0x0800987f
 80098bc:	0800987f 	.word	0x0800987f
 80098c0:	0800987f 	.word	0x0800987f
 80098c4:	08009a59 	.word	0x08009a59
 80098c8:	08009a33 	.word	0x08009a33
 80098cc:	0800987f 	.word	0x0800987f
 80098d0:	0800987f 	.word	0x0800987f
 80098d4:	08009a0b 	.word	0x08009a0b
 80098d8:	0800987f 	.word	0x0800987f
 80098dc:	0800987f 	.word	0x0800987f
 80098e0:	0800987f 	.word	0x0800987f
 80098e4:	0800987f 	.word	0x0800987f
 80098e8:	080099c7 	.word	0x080099c7
 80098ec:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80098f0:	e7da      	b.n	80098a8 <_scanf_float+0x90>
 80098f2:	290e      	cmp	r1, #14
 80098f4:	d8c3      	bhi.n	800987e <_scanf_float+0x66>
 80098f6:	a001      	add	r0, pc, #4	@ (adr r0, 80098fc <_scanf_float+0xe4>)
 80098f8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80098fc:	080099b7 	.word	0x080099b7
 8009900:	0800987f 	.word	0x0800987f
 8009904:	080099b7 	.word	0x080099b7
 8009908:	08009a47 	.word	0x08009a47
 800990c:	0800987f 	.word	0x0800987f
 8009910:	08009959 	.word	0x08009959
 8009914:	0800999d 	.word	0x0800999d
 8009918:	0800999d 	.word	0x0800999d
 800991c:	0800999d 	.word	0x0800999d
 8009920:	0800999d 	.word	0x0800999d
 8009924:	0800999d 	.word	0x0800999d
 8009928:	0800999d 	.word	0x0800999d
 800992c:	0800999d 	.word	0x0800999d
 8009930:	0800999d 	.word	0x0800999d
 8009934:	0800999d 	.word	0x0800999d
 8009938:	2b6e      	cmp	r3, #110	@ 0x6e
 800993a:	d809      	bhi.n	8009950 <_scanf_float+0x138>
 800993c:	2b60      	cmp	r3, #96	@ 0x60
 800993e:	d8b1      	bhi.n	80098a4 <_scanf_float+0x8c>
 8009940:	2b54      	cmp	r3, #84	@ 0x54
 8009942:	d07b      	beq.n	8009a3c <_scanf_float+0x224>
 8009944:	2b59      	cmp	r3, #89	@ 0x59
 8009946:	d19a      	bne.n	800987e <_scanf_float+0x66>
 8009948:	2d07      	cmp	r5, #7
 800994a:	d198      	bne.n	800987e <_scanf_float+0x66>
 800994c:	2508      	movs	r5, #8
 800994e:	e02f      	b.n	80099b0 <_scanf_float+0x198>
 8009950:	2b74      	cmp	r3, #116	@ 0x74
 8009952:	d073      	beq.n	8009a3c <_scanf_float+0x224>
 8009954:	2b79      	cmp	r3, #121	@ 0x79
 8009956:	e7f6      	b.n	8009946 <_scanf_float+0x12e>
 8009958:	6821      	ldr	r1, [r4, #0]
 800995a:	05c8      	lsls	r0, r1, #23
 800995c:	d51e      	bpl.n	800999c <_scanf_float+0x184>
 800995e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009962:	6021      	str	r1, [r4, #0]
 8009964:	3701      	adds	r7, #1
 8009966:	f1bb 0f00 	cmp.w	fp, #0
 800996a:	d003      	beq.n	8009974 <_scanf_float+0x15c>
 800996c:	3201      	adds	r2, #1
 800996e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009972:	60a2      	str	r2, [r4, #8]
 8009974:	68a3      	ldr	r3, [r4, #8]
 8009976:	3b01      	subs	r3, #1
 8009978:	60a3      	str	r3, [r4, #8]
 800997a:	6923      	ldr	r3, [r4, #16]
 800997c:	3301      	adds	r3, #1
 800997e:	6123      	str	r3, [r4, #16]
 8009980:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009984:	3b01      	subs	r3, #1
 8009986:	2b00      	cmp	r3, #0
 8009988:	f8c9 3004 	str.w	r3, [r9, #4]
 800998c:	f340 8082 	ble.w	8009a94 <_scanf_float+0x27c>
 8009990:	f8d9 3000 	ldr.w	r3, [r9]
 8009994:	3301      	adds	r3, #1
 8009996:	f8c9 3000 	str.w	r3, [r9]
 800999a:	e762      	b.n	8009862 <_scanf_float+0x4a>
 800999c:	eb1a 0105 	adds.w	r1, sl, r5
 80099a0:	f47f af6d 	bne.w	800987e <_scanf_float+0x66>
 80099a4:	6822      	ldr	r2, [r4, #0]
 80099a6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80099aa:	6022      	str	r2, [r4, #0]
 80099ac:	460d      	mov	r5, r1
 80099ae:	468a      	mov	sl, r1
 80099b0:	f806 3b01 	strb.w	r3, [r6], #1
 80099b4:	e7de      	b.n	8009974 <_scanf_float+0x15c>
 80099b6:	6822      	ldr	r2, [r4, #0]
 80099b8:	0610      	lsls	r0, r2, #24
 80099ba:	f57f af60 	bpl.w	800987e <_scanf_float+0x66>
 80099be:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80099c2:	6022      	str	r2, [r4, #0]
 80099c4:	e7f4      	b.n	80099b0 <_scanf_float+0x198>
 80099c6:	f1ba 0f00 	cmp.w	sl, #0
 80099ca:	d10c      	bne.n	80099e6 <_scanf_float+0x1ce>
 80099cc:	b977      	cbnz	r7, 80099ec <_scanf_float+0x1d4>
 80099ce:	6822      	ldr	r2, [r4, #0]
 80099d0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80099d4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80099d8:	d108      	bne.n	80099ec <_scanf_float+0x1d4>
 80099da:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80099de:	6022      	str	r2, [r4, #0]
 80099e0:	f04f 0a01 	mov.w	sl, #1
 80099e4:	e7e4      	b.n	80099b0 <_scanf_float+0x198>
 80099e6:	f1ba 0f02 	cmp.w	sl, #2
 80099ea:	d050      	beq.n	8009a8e <_scanf_float+0x276>
 80099ec:	2d01      	cmp	r5, #1
 80099ee:	d002      	beq.n	80099f6 <_scanf_float+0x1de>
 80099f0:	2d04      	cmp	r5, #4
 80099f2:	f47f af44 	bne.w	800987e <_scanf_float+0x66>
 80099f6:	3501      	adds	r5, #1
 80099f8:	b2ed      	uxtb	r5, r5
 80099fa:	e7d9      	b.n	80099b0 <_scanf_float+0x198>
 80099fc:	f1ba 0f01 	cmp.w	sl, #1
 8009a00:	f47f af3d 	bne.w	800987e <_scanf_float+0x66>
 8009a04:	f04f 0a02 	mov.w	sl, #2
 8009a08:	e7d2      	b.n	80099b0 <_scanf_float+0x198>
 8009a0a:	b975      	cbnz	r5, 8009a2a <_scanf_float+0x212>
 8009a0c:	2f00      	cmp	r7, #0
 8009a0e:	f47f af37 	bne.w	8009880 <_scanf_float+0x68>
 8009a12:	6822      	ldr	r2, [r4, #0]
 8009a14:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009a18:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009a1c:	f040 8103 	bne.w	8009c26 <_scanf_float+0x40e>
 8009a20:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009a24:	6022      	str	r2, [r4, #0]
 8009a26:	2501      	movs	r5, #1
 8009a28:	e7c2      	b.n	80099b0 <_scanf_float+0x198>
 8009a2a:	2d03      	cmp	r5, #3
 8009a2c:	d0e3      	beq.n	80099f6 <_scanf_float+0x1de>
 8009a2e:	2d05      	cmp	r5, #5
 8009a30:	e7df      	b.n	80099f2 <_scanf_float+0x1da>
 8009a32:	2d02      	cmp	r5, #2
 8009a34:	f47f af23 	bne.w	800987e <_scanf_float+0x66>
 8009a38:	2503      	movs	r5, #3
 8009a3a:	e7b9      	b.n	80099b0 <_scanf_float+0x198>
 8009a3c:	2d06      	cmp	r5, #6
 8009a3e:	f47f af1e 	bne.w	800987e <_scanf_float+0x66>
 8009a42:	2507      	movs	r5, #7
 8009a44:	e7b4      	b.n	80099b0 <_scanf_float+0x198>
 8009a46:	6822      	ldr	r2, [r4, #0]
 8009a48:	0591      	lsls	r1, r2, #22
 8009a4a:	f57f af18 	bpl.w	800987e <_scanf_float+0x66>
 8009a4e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009a52:	6022      	str	r2, [r4, #0]
 8009a54:	9702      	str	r7, [sp, #8]
 8009a56:	e7ab      	b.n	80099b0 <_scanf_float+0x198>
 8009a58:	6822      	ldr	r2, [r4, #0]
 8009a5a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009a5e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009a62:	d005      	beq.n	8009a70 <_scanf_float+0x258>
 8009a64:	0550      	lsls	r0, r2, #21
 8009a66:	f57f af0a 	bpl.w	800987e <_scanf_float+0x66>
 8009a6a:	2f00      	cmp	r7, #0
 8009a6c:	f000 80db 	beq.w	8009c26 <_scanf_float+0x40e>
 8009a70:	0591      	lsls	r1, r2, #22
 8009a72:	bf58      	it	pl
 8009a74:	9902      	ldrpl	r1, [sp, #8]
 8009a76:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009a7a:	bf58      	it	pl
 8009a7c:	1a79      	subpl	r1, r7, r1
 8009a7e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009a82:	bf58      	it	pl
 8009a84:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009a88:	6022      	str	r2, [r4, #0]
 8009a8a:	2700      	movs	r7, #0
 8009a8c:	e790      	b.n	80099b0 <_scanf_float+0x198>
 8009a8e:	f04f 0a03 	mov.w	sl, #3
 8009a92:	e78d      	b.n	80099b0 <_scanf_float+0x198>
 8009a94:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009a98:	4649      	mov	r1, r9
 8009a9a:	4640      	mov	r0, r8
 8009a9c:	4798      	blx	r3
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	f43f aedf 	beq.w	8009862 <_scanf_float+0x4a>
 8009aa4:	e6eb      	b.n	800987e <_scanf_float+0x66>
 8009aa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009aaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009aae:	464a      	mov	r2, r9
 8009ab0:	4640      	mov	r0, r8
 8009ab2:	4798      	blx	r3
 8009ab4:	6923      	ldr	r3, [r4, #16]
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	6123      	str	r3, [r4, #16]
 8009aba:	e6eb      	b.n	8009894 <_scanf_float+0x7c>
 8009abc:	1e6b      	subs	r3, r5, #1
 8009abe:	2b06      	cmp	r3, #6
 8009ac0:	d824      	bhi.n	8009b0c <_scanf_float+0x2f4>
 8009ac2:	2d02      	cmp	r5, #2
 8009ac4:	d836      	bhi.n	8009b34 <_scanf_float+0x31c>
 8009ac6:	9b01      	ldr	r3, [sp, #4]
 8009ac8:	429e      	cmp	r6, r3
 8009aca:	f67f aee7 	bls.w	800989c <_scanf_float+0x84>
 8009ace:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009ad2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009ad6:	464a      	mov	r2, r9
 8009ad8:	4640      	mov	r0, r8
 8009ada:	4798      	blx	r3
 8009adc:	6923      	ldr	r3, [r4, #16]
 8009ade:	3b01      	subs	r3, #1
 8009ae0:	6123      	str	r3, [r4, #16]
 8009ae2:	e7f0      	b.n	8009ac6 <_scanf_float+0x2ae>
 8009ae4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009ae8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009aec:	464a      	mov	r2, r9
 8009aee:	4640      	mov	r0, r8
 8009af0:	4798      	blx	r3
 8009af2:	6923      	ldr	r3, [r4, #16]
 8009af4:	3b01      	subs	r3, #1
 8009af6:	6123      	str	r3, [r4, #16]
 8009af8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009afc:	fa5f fa8a 	uxtb.w	sl, sl
 8009b00:	f1ba 0f02 	cmp.w	sl, #2
 8009b04:	d1ee      	bne.n	8009ae4 <_scanf_float+0x2cc>
 8009b06:	3d03      	subs	r5, #3
 8009b08:	b2ed      	uxtb	r5, r5
 8009b0a:	1b76      	subs	r6, r6, r5
 8009b0c:	6823      	ldr	r3, [r4, #0]
 8009b0e:	05da      	lsls	r2, r3, #23
 8009b10:	d530      	bpl.n	8009b74 <_scanf_float+0x35c>
 8009b12:	055b      	lsls	r3, r3, #21
 8009b14:	d511      	bpl.n	8009b3a <_scanf_float+0x322>
 8009b16:	9b01      	ldr	r3, [sp, #4]
 8009b18:	429e      	cmp	r6, r3
 8009b1a:	f67f aebf 	bls.w	800989c <_scanf_float+0x84>
 8009b1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b26:	464a      	mov	r2, r9
 8009b28:	4640      	mov	r0, r8
 8009b2a:	4798      	blx	r3
 8009b2c:	6923      	ldr	r3, [r4, #16]
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	6123      	str	r3, [r4, #16]
 8009b32:	e7f0      	b.n	8009b16 <_scanf_float+0x2fe>
 8009b34:	46aa      	mov	sl, r5
 8009b36:	46b3      	mov	fp, r6
 8009b38:	e7de      	b.n	8009af8 <_scanf_float+0x2e0>
 8009b3a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009b3e:	6923      	ldr	r3, [r4, #16]
 8009b40:	2965      	cmp	r1, #101	@ 0x65
 8009b42:	f103 33ff 	add.w	r3, r3, #4294967295
 8009b46:	f106 35ff 	add.w	r5, r6, #4294967295
 8009b4a:	6123      	str	r3, [r4, #16]
 8009b4c:	d00c      	beq.n	8009b68 <_scanf_float+0x350>
 8009b4e:	2945      	cmp	r1, #69	@ 0x45
 8009b50:	d00a      	beq.n	8009b68 <_scanf_float+0x350>
 8009b52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b56:	464a      	mov	r2, r9
 8009b58:	4640      	mov	r0, r8
 8009b5a:	4798      	blx	r3
 8009b5c:	6923      	ldr	r3, [r4, #16]
 8009b5e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009b62:	3b01      	subs	r3, #1
 8009b64:	1eb5      	subs	r5, r6, #2
 8009b66:	6123      	str	r3, [r4, #16]
 8009b68:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009b6c:	464a      	mov	r2, r9
 8009b6e:	4640      	mov	r0, r8
 8009b70:	4798      	blx	r3
 8009b72:	462e      	mov	r6, r5
 8009b74:	6822      	ldr	r2, [r4, #0]
 8009b76:	f012 0210 	ands.w	r2, r2, #16
 8009b7a:	d001      	beq.n	8009b80 <_scanf_float+0x368>
 8009b7c:	2000      	movs	r0, #0
 8009b7e:	e68e      	b.n	800989e <_scanf_float+0x86>
 8009b80:	7032      	strb	r2, [r6, #0]
 8009b82:	6823      	ldr	r3, [r4, #0]
 8009b84:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009b88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b8c:	d125      	bne.n	8009bda <_scanf_float+0x3c2>
 8009b8e:	9b02      	ldr	r3, [sp, #8]
 8009b90:	429f      	cmp	r7, r3
 8009b92:	d00a      	beq.n	8009baa <_scanf_float+0x392>
 8009b94:	1bda      	subs	r2, r3, r7
 8009b96:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009b9a:	429e      	cmp	r6, r3
 8009b9c:	bf28      	it	cs
 8009b9e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009ba2:	4922      	ldr	r1, [pc, #136]	@ (8009c2c <_scanf_float+0x414>)
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	f000 f907 	bl	8009db8 <siprintf>
 8009baa:	9901      	ldr	r1, [sp, #4]
 8009bac:	2200      	movs	r2, #0
 8009bae:	4640      	mov	r0, r8
 8009bb0:	f7ff f9ca 	bl	8008f48 <_strtod_r>
 8009bb4:	9b03      	ldr	r3, [sp, #12]
 8009bb6:	6821      	ldr	r1, [r4, #0]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f011 0f02 	tst.w	r1, #2
 8009bbe:	ec57 6b10 	vmov	r6, r7, d0
 8009bc2:	f103 0204 	add.w	r2, r3, #4
 8009bc6:	d015      	beq.n	8009bf4 <_scanf_float+0x3dc>
 8009bc8:	9903      	ldr	r1, [sp, #12]
 8009bca:	600a      	str	r2, [r1, #0]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	e9c3 6700 	strd	r6, r7, [r3]
 8009bd2:	68e3      	ldr	r3, [r4, #12]
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	60e3      	str	r3, [r4, #12]
 8009bd8:	e7d0      	b.n	8009b7c <_scanf_float+0x364>
 8009bda:	9b04      	ldr	r3, [sp, #16]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d0e4      	beq.n	8009baa <_scanf_float+0x392>
 8009be0:	9905      	ldr	r1, [sp, #20]
 8009be2:	230a      	movs	r3, #10
 8009be4:	3101      	adds	r1, #1
 8009be6:	4640      	mov	r0, r8
 8009be8:	f002 fa4e 	bl	800c088 <_strtol_r>
 8009bec:	9b04      	ldr	r3, [sp, #16]
 8009bee:	9e05      	ldr	r6, [sp, #20]
 8009bf0:	1ac2      	subs	r2, r0, r3
 8009bf2:	e7d0      	b.n	8009b96 <_scanf_float+0x37e>
 8009bf4:	f011 0f04 	tst.w	r1, #4
 8009bf8:	9903      	ldr	r1, [sp, #12]
 8009bfa:	600a      	str	r2, [r1, #0]
 8009bfc:	d1e6      	bne.n	8009bcc <_scanf_float+0x3b4>
 8009bfe:	681d      	ldr	r5, [r3, #0]
 8009c00:	4632      	mov	r2, r6
 8009c02:	463b      	mov	r3, r7
 8009c04:	4630      	mov	r0, r6
 8009c06:	4639      	mov	r1, r7
 8009c08:	f7f6 ffa8 	bl	8000b5c <__aeabi_dcmpun>
 8009c0c:	b128      	cbz	r0, 8009c1a <_scanf_float+0x402>
 8009c0e:	4808      	ldr	r0, [pc, #32]	@ (8009c30 <_scanf_float+0x418>)
 8009c10:	f000 fa4e 	bl	800a0b0 <nanf>
 8009c14:	ed85 0a00 	vstr	s0, [r5]
 8009c18:	e7db      	b.n	8009bd2 <_scanf_float+0x3ba>
 8009c1a:	4630      	mov	r0, r6
 8009c1c:	4639      	mov	r1, r7
 8009c1e:	f7f6 fffb 	bl	8000c18 <__aeabi_d2f>
 8009c22:	6028      	str	r0, [r5, #0]
 8009c24:	e7d5      	b.n	8009bd2 <_scanf_float+0x3ba>
 8009c26:	2700      	movs	r7, #0
 8009c28:	e62e      	b.n	8009888 <_scanf_float+0x70>
 8009c2a:	bf00      	nop
 8009c2c:	0800cece 	.word	0x0800cece
 8009c30:	0800cf87 	.word	0x0800cf87

08009c34 <std>:
 8009c34:	2300      	movs	r3, #0
 8009c36:	b510      	push	{r4, lr}
 8009c38:	4604      	mov	r4, r0
 8009c3a:	e9c0 3300 	strd	r3, r3, [r0]
 8009c3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c42:	6083      	str	r3, [r0, #8]
 8009c44:	8181      	strh	r1, [r0, #12]
 8009c46:	6643      	str	r3, [r0, #100]	@ 0x64
 8009c48:	81c2      	strh	r2, [r0, #14]
 8009c4a:	6183      	str	r3, [r0, #24]
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	2208      	movs	r2, #8
 8009c50:	305c      	adds	r0, #92	@ 0x5c
 8009c52:	f000 f916 	bl	8009e82 <memset>
 8009c56:	4b0d      	ldr	r3, [pc, #52]	@ (8009c8c <std+0x58>)
 8009c58:	6263      	str	r3, [r4, #36]	@ 0x24
 8009c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8009c90 <std+0x5c>)
 8009c5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8009c94 <std+0x60>)
 8009c60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009c62:	4b0d      	ldr	r3, [pc, #52]	@ (8009c98 <std+0x64>)
 8009c64:	6323      	str	r3, [r4, #48]	@ 0x30
 8009c66:	4b0d      	ldr	r3, [pc, #52]	@ (8009c9c <std+0x68>)
 8009c68:	6224      	str	r4, [r4, #32]
 8009c6a:	429c      	cmp	r4, r3
 8009c6c:	d006      	beq.n	8009c7c <std+0x48>
 8009c6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009c72:	4294      	cmp	r4, r2
 8009c74:	d002      	beq.n	8009c7c <std+0x48>
 8009c76:	33d0      	adds	r3, #208	@ 0xd0
 8009c78:	429c      	cmp	r4, r3
 8009c7a:	d105      	bne.n	8009c88 <std+0x54>
 8009c7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c84:	f000 b9fa 	b.w	800a07c <__retarget_lock_init_recursive>
 8009c88:	bd10      	pop	{r4, pc}
 8009c8a:	bf00      	nop
 8009c8c:	08009dfd 	.word	0x08009dfd
 8009c90:	08009e1f 	.word	0x08009e1f
 8009c94:	08009e57 	.word	0x08009e57
 8009c98:	08009e7b 	.word	0x08009e7b
 8009c9c:	20000788 	.word	0x20000788

08009ca0 <stdio_exit_handler>:
 8009ca0:	4a02      	ldr	r2, [pc, #8]	@ (8009cac <stdio_exit_handler+0xc>)
 8009ca2:	4903      	ldr	r1, [pc, #12]	@ (8009cb0 <stdio_exit_handler+0x10>)
 8009ca4:	4803      	ldr	r0, [pc, #12]	@ (8009cb4 <stdio_exit_handler+0x14>)
 8009ca6:	f000 b869 	b.w	8009d7c <_fwalk_sglue>
 8009caa:	bf00      	nop
 8009cac:	20000090 	.word	0x20000090
 8009cb0:	0800c45d 	.word	0x0800c45d
 8009cb4:	2000020c 	.word	0x2000020c

08009cb8 <cleanup_stdio>:
 8009cb8:	6841      	ldr	r1, [r0, #4]
 8009cba:	4b0c      	ldr	r3, [pc, #48]	@ (8009cec <cleanup_stdio+0x34>)
 8009cbc:	4299      	cmp	r1, r3
 8009cbe:	b510      	push	{r4, lr}
 8009cc0:	4604      	mov	r4, r0
 8009cc2:	d001      	beq.n	8009cc8 <cleanup_stdio+0x10>
 8009cc4:	f002 fbca 	bl	800c45c <_fflush_r>
 8009cc8:	68a1      	ldr	r1, [r4, #8]
 8009cca:	4b09      	ldr	r3, [pc, #36]	@ (8009cf0 <cleanup_stdio+0x38>)
 8009ccc:	4299      	cmp	r1, r3
 8009cce:	d002      	beq.n	8009cd6 <cleanup_stdio+0x1e>
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	f002 fbc3 	bl	800c45c <_fflush_r>
 8009cd6:	68e1      	ldr	r1, [r4, #12]
 8009cd8:	4b06      	ldr	r3, [pc, #24]	@ (8009cf4 <cleanup_stdio+0x3c>)
 8009cda:	4299      	cmp	r1, r3
 8009cdc:	d004      	beq.n	8009ce8 <cleanup_stdio+0x30>
 8009cde:	4620      	mov	r0, r4
 8009ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ce4:	f002 bbba 	b.w	800c45c <_fflush_r>
 8009ce8:	bd10      	pop	{r4, pc}
 8009cea:	bf00      	nop
 8009cec:	20000788 	.word	0x20000788
 8009cf0:	200007f0 	.word	0x200007f0
 8009cf4:	20000858 	.word	0x20000858

08009cf8 <global_stdio_init.part.0>:
 8009cf8:	b510      	push	{r4, lr}
 8009cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8009d28 <global_stdio_init.part.0+0x30>)
 8009cfc:	4c0b      	ldr	r4, [pc, #44]	@ (8009d2c <global_stdio_init.part.0+0x34>)
 8009cfe:	4a0c      	ldr	r2, [pc, #48]	@ (8009d30 <global_stdio_init.part.0+0x38>)
 8009d00:	601a      	str	r2, [r3, #0]
 8009d02:	4620      	mov	r0, r4
 8009d04:	2200      	movs	r2, #0
 8009d06:	2104      	movs	r1, #4
 8009d08:	f7ff ff94 	bl	8009c34 <std>
 8009d0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009d10:	2201      	movs	r2, #1
 8009d12:	2109      	movs	r1, #9
 8009d14:	f7ff ff8e 	bl	8009c34 <std>
 8009d18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009d1c:	2202      	movs	r2, #2
 8009d1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d22:	2112      	movs	r1, #18
 8009d24:	f7ff bf86 	b.w	8009c34 <std>
 8009d28:	200008c0 	.word	0x200008c0
 8009d2c:	20000788 	.word	0x20000788
 8009d30:	08009ca1 	.word	0x08009ca1

08009d34 <__sfp_lock_acquire>:
 8009d34:	4801      	ldr	r0, [pc, #4]	@ (8009d3c <__sfp_lock_acquire+0x8>)
 8009d36:	f000 b9a2 	b.w	800a07e <__retarget_lock_acquire_recursive>
 8009d3a:	bf00      	nop
 8009d3c:	200008c9 	.word	0x200008c9

08009d40 <__sfp_lock_release>:
 8009d40:	4801      	ldr	r0, [pc, #4]	@ (8009d48 <__sfp_lock_release+0x8>)
 8009d42:	f000 b99d 	b.w	800a080 <__retarget_lock_release_recursive>
 8009d46:	bf00      	nop
 8009d48:	200008c9 	.word	0x200008c9

08009d4c <__sinit>:
 8009d4c:	b510      	push	{r4, lr}
 8009d4e:	4604      	mov	r4, r0
 8009d50:	f7ff fff0 	bl	8009d34 <__sfp_lock_acquire>
 8009d54:	6a23      	ldr	r3, [r4, #32]
 8009d56:	b11b      	cbz	r3, 8009d60 <__sinit+0x14>
 8009d58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d5c:	f7ff bff0 	b.w	8009d40 <__sfp_lock_release>
 8009d60:	4b04      	ldr	r3, [pc, #16]	@ (8009d74 <__sinit+0x28>)
 8009d62:	6223      	str	r3, [r4, #32]
 8009d64:	4b04      	ldr	r3, [pc, #16]	@ (8009d78 <__sinit+0x2c>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d1f5      	bne.n	8009d58 <__sinit+0xc>
 8009d6c:	f7ff ffc4 	bl	8009cf8 <global_stdio_init.part.0>
 8009d70:	e7f2      	b.n	8009d58 <__sinit+0xc>
 8009d72:	bf00      	nop
 8009d74:	08009cb9 	.word	0x08009cb9
 8009d78:	200008c0 	.word	0x200008c0

08009d7c <_fwalk_sglue>:
 8009d7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d80:	4607      	mov	r7, r0
 8009d82:	4688      	mov	r8, r1
 8009d84:	4614      	mov	r4, r2
 8009d86:	2600      	movs	r6, #0
 8009d88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d8c:	f1b9 0901 	subs.w	r9, r9, #1
 8009d90:	d505      	bpl.n	8009d9e <_fwalk_sglue+0x22>
 8009d92:	6824      	ldr	r4, [r4, #0]
 8009d94:	2c00      	cmp	r4, #0
 8009d96:	d1f7      	bne.n	8009d88 <_fwalk_sglue+0xc>
 8009d98:	4630      	mov	r0, r6
 8009d9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d9e:	89ab      	ldrh	r3, [r5, #12]
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d907      	bls.n	8009db4 <_fwalk_sglue+0x38>
 8009da4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009da8:	3301      	adds	r3, #1
 8009daa:	d003      	beq.n	8009db4 <_fwalk_sglue+0x38>
 8009dac:	4629      	mov	r1, r5
 8009dae:	4638      	mov	r0, r7
 8009db0:	47c0      	blx	r8
 8009db2:	4306      	orrs	r6, r0
 8009db4:	3568      	adds	r5, #104	@ 0x68
 8009db6:	e7e9      	b.n	8009d8c <_fwalk_sglue+0x10>

08009db8 <siprintf>:
 8009db8:	b40e      	push	{r1, r2, r3}
 8009dba:	b510      	push	{r4, lr}
 8009dbc:	b09d      	sub	sp, #116	@ 0x74
 8009dbe:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009dc0:	9002      	str	r0, [sp, #8]
 8009dc2:	9006      	str	r0, [sp, #24]
 8009dc4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009dc8:	480a      	ldr	r0, [pc, #40]	@ (8009df4 <siprintf+0x3c>)
 8009dca:	9107      	str	r1, [sp, #28]
 8009dcc:	9104      	str	r1, [sp, #16]
 8009dce:	490a      	ldr	r1, [pc, #40]	@ (8009df8 <siprintf+0x40>)
 8009dd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dd4:	9105      	str	r1, [sp, #20]
 8009dd6:	2400      	movs	r4, #0
 8009dd8:	a902      	add	r1, sp, #8
 8009dda:	6800      	ldr	r0, [r0, #0]
 8009ddc:	9301      	str	r3, [sp, #4]
 8009dde:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009de0:	f002 f9bc 	bl	800c15c <_svfiprintf_r>
 8009de4:	9b02      	ldr	r3, [sp, #8]
 8009de6:	701c      	strb	r4, [r3, #0]
 8009de8:	b01d      	add	sp, #116	@ 0x74
 8009dea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dee:	b003      	add	sp, #12
 8009df0:	4770      	bx	lr
 8009df2:	bf00      	nop
 8009df4:	20000208 	.word	0x20000208
 8009df8:	ffff0208 	.word	0xffff0208

08009dfc <__sread>:
 8009dfc:	b510      	push	{r4, lr}
 8009dfe:	460c      	mov	r4, r1
 8009e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e04:	f000 f8ec 	bl	8009fe0 <_read_r>
 8009e08:	2800      	cmp	r0, #0
 8009e0a:	bfab      	itete	ge
 8009e0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009e0e:	89a3      	ldrhlt	r3, [r4, #12]
 8009e10:	181b      	addge	r3, r3, r0
 8009e12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009e16:	bfac      	ite	ge
 8009e18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009e1a:	81a3      	strhlt	r3, [r4, #12]
 8009e1c:	bd10      	pop	{r4, pc}

08009e1e <__swrite>:
 8009e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e22:	461f      	mov	r7, r3
 8009e24:	898b      	ldrh	r3, [r1, #12]
 8009e26:	05db      	lsls	r3, r3, #23
 8009e28:	4605      	mov	r5, r0
 8009e2a:	460c      	mov	r4, r1
 8009e2c:	4616      	mov	r6, r2
 8009e2e:	d505      	bpl.n	8009e3c <__swrite+0x1e>
 8009e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e34:	2302      	movs	r3, #2
 8009e36:	2200      	movs	r2, #0
 8009e38:	f000 f8c0 	bl	8009fbc <_lseek_r>
 8009e3c:	89a3      	ldrh	r3, [r4, #12]
 8009e3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009e46:	81a3      	strh	r3, [r4, #12]
 8009e48:	4632      	mov	r2, r6
 8009e4a:	463b      	mov	r3, r7
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e52:	f000 b8d7 	b.w	800a004 <_write_r>

08009e56 <__sseek>:
 8009e56:	b510      	push	{r4, lr}
 8009e58:	460c      	mov	r4, r1
 8009e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e5e:	f000 f8ad 	bl	8009fbc <_lseek_r>
 8009e62:	1c43      	adds	r3, r0, #1
 8009e64:	89a3      	ldrh	r3, [r4, #12]
 8009e66:	bf15      	itete	ne
 8009e68:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009e6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009e6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009e72:	81a3      	strheq	r3, [r4, #12]
 8009e74:	bf18      	it	ne
 8009e76:	81a3      	strhne	r3, [r4, #12]
 8009e78:	bd10      	pop	{r4, pc}

08009e7a <__sclose>:
 8009e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e7e:	f000 b88d 	b.w	8009f9c <_close_r>

08009e82 <memset>:
 8009e82:	4402      	add	r2, r0
 8009e84:	4603      	mov	r3, r0
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d100      	bne.n	8009e8c <memset+0xa>
 8009e8a:	4770      	bx	lr
 8009e8c:	f803 1b01 	strb.w	r1, [r3], #1
 8009e90:	e7f9      	b.n	8009e86 <memset+0x4>

08009e92 <strncmp>:
 8009e92:	b510      	push	{r4, lr}
 8009e94:	b16a      	cbz	r2, 8009eb2 <strncmp+0x20>
 8009e96:	3901      	subs	r1, #1
 8009e98:	1884      	adds	r4, r0, r2
 8009e9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e9e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d103      	bne.n	8009eae <strncmp+0x1c>
 8009ea6:	42a0      	cmp	r0, r4
 8009ea8:	d001      	beq.n	8009eae <strncmp+0x1c>
 8009eaa:	2a00      	cmp	r2, #0
 8009eac:	d1f5      	bne.n	8009e9a <strncmp+0x8>
 8009eae:	1ad0      	subs	r0, r2, r3
 8009eb0:	bd10      	pop	{r4, pc}
 8009eb2:	4610      	mov	r0, r2
 8009eb4:	e7fc      	b.n	8009eb0 <strncmp+0x1e>

08009eb6 <strncpy>:
 8009eb6:	b510      	push	{r4, lr}
 8009eb8:	3901      	subs	r1, #1
 8009eba:	4603      	mov	r3, r0
 8009ebc:	b132      	cbz	r2, 8009ecc <strncpy+0x16>
 8009ebe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8009ec2:	f803 4b01 	strb.w	r4, [r3], #1
 8009ec6:	3a01      	subs	r2, #1
 8009ec8:	2c00      	cmp	r4, #0
 8009eca:	d1f7      	bne.n	8009ebc <strncpy+0x6>
 8009ecc:	441a      	add	r2, r3
 8009ece:	2100      	movs	r1, #0
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d100      	bne.n	8009ed6 <strncpy+0x20>
 8009ed4:	bd10      	pop	{r4, pc}
 8009ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8009eda:	e7f9      	b.n	8009ed0 <strncpy+0x1a>

08009edc <strtok>:
 8009edc:	4b16      	ldr	r3, [pc, #88]	@ (8009f38 <strtok+0x5c>)
 8009ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee2:	681f      	ldr	r7, [r3, #0]
 8009ee4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8009ee6:	4605      	mov	r5, r0
 8009ee8:	460e      	mov	r6, r1
 8009eea:	b9ec      	cbnz	r4, 8009f28 <strtok+0x4c>
 8009eec:	2050      	movs	r0, #80	@ 0x50
 8009eee:	f001 fadf 	bl	800b4b0 <malloc>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	6478      	str	r0, [r7, #68]	@ 0x44
 8009ef6:	b920      	cbnz	r0, 8009f02 <strtok+0x26>
 8009ef8:	4b10      	ldr	r3, [pc, #64]	@ (8009f3c <strtok+0x60>)
 8009efa:	4811      	ldr	r0, [pc, #68]	@ (8009f40 <strtok+0x64>)
 8009efc:	215b      	movs	r1, #91	@ 0x5b
 8009efe:	f000 f8dd 	bl	800a0bc <__assert_func>
 8009f02:	e9c0 4400 	strd	r4, r4, [r0]
 8009f06:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009f0a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009f0e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8009f12:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8009f16:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8009f1a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8009f1e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8009f22:	6184      	str	r4, [r0, #24]
 8009f24:	7704      	strb	r4, [r0, #28]
 8009f26:	6244      	str	r4, [r0, #36]	@ 0x24
 8009f28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f2a:	4631      	mov	r1, r6
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f34:	f000 b806 	b.w	8009f44 <__strtok_r>
 8009f38:	20000208 	.word	0x20000208
 8009f3c:	0800ced3 	.word	0x0800ced3
 8009f40:	0800ceea 	.word	0x0800ceea

08009f44 <__strtok_r>:
 8009f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f46:	4604      	mov	r4, r0
 8009f48:	b908      	cbnz	r0, 8009f4e <__strtok_r+0xa>
 8009f4a:	6814      	ldr	r4, [r2, #0]
 8009f4c:	b144      	cbz	r4, 8009f60 <__strtok_r+0x1c>
 8009f4e:	4620      	mov	r0, r4
 8009f50:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009f54:	460f      	mov	r7, r1
 8009f56:	f817 6b01 	ldrb.w	r6, [r7], #1
 8009f5a:	b91e      	cbnz	r6, 8009f64 <__strtok_r+0x20>
 8009f5c:	b965      	cbnz	r5, 8009f78 <__strtok_r+0x34>
 8009f5e:	6015      	str	r5, [r2, #0]
 8009f60:	2000      	movs	r0, #0
 8009f62:	e005      	b.n	8009f70 <__strtok_r+0x2c>
 8009f64:	42b5      	cmp	r5, r6
 8009f66:	d1f6      	bne.n	8009f56 <__strtok_r+0x12>
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d1f0      	bne.n	8009f4e <__strtok_r+0xa>
 8009f6c:	6014      	str	r4, [r2, #0]
 8009f6e:	7003      	strb	r3, [r0, #0]
 8009f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f72:	461c      	mov	r4, r3
 8009f74:	e00c      	b.n	8009f90 <__strtok_r+0x4c>
 8009f76:	b91d      	cbnz	r5, 8009f80 <__strtok_r+0x3c>
 8009f78:	4627      	mov	r7, r4
 8009f7a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009f7e:	460e      	mov	r6, r1
 8009f80:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009f84:	42ab      	cmp	r3, r5
 8009f86:	d1f6      	bne.n	8009f76 <__strtok_r+0x32>
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d0f2      	beq.n	8009f72 <__strtok_r+0x2e>
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	703b      	strb	r3, [r7, #0]
 8009f90:	6014      	str	r4, [r2, #0]
 8009f92:	e7ed      	b.n	8009f70 <__strtok_r+0x2c>

08009f94 <_localeconv_r>:
 8009f94:	4800      	ldr	r0, [pc, #0]	@ (8009f98 <_localeconv_r+0x4>)
 8009f96:	4770      	bx	lr
 8009f98:	2000018c 	.word	0x2000018c

08009f9c <_close_r>:
 8009f9c:	b538      	push	{r3, r4, r5, lr}
 8009f9e:	4d06      	ldr	r5, [pc, #24]	@ (8009fb8 <_close_r+0x1c>)
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	4608      	mov	r0, r1
 8009fa6:	602b      	str	r3, [r5, #0]
 8009fa8:	f7f9 f800 	bl	8002fac <_close>
 8009fac:	1c43      	adds	r3, r0, #1
 8009fae:	d102      	bne.n	8009fb6 <_close_r+0x1a>
 8009fb0:	682b      	ldr	r3, [r5, #0]
 8009fb2:	b103      	cbz	r3, 8009fb6 <_close_r+0x1a>
 8009fb4:	6023      	str	r3, [r4, #0]
 8009fb6:	bd38      	pop	{r3, r4, r5, pc}
 8009fb8:	200008c4 	.word	0x200008c4

08009fbc <_lseek_r>:
 8009fbc:	b538      	push	{r3, r4, r5, lr}
 8009fbe:	4d07      	ldr	r5, [pc, #28]	@ (8009fdc <_lseek_r+0x20>)
 8009fc0:	4604      	mov	r4, r0
 8009fc2:	4608      	mov	r0, r1
 8009fc4:	4611      	mov	r1, r2
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	602a      	str	r2, [r5, #0]
 8009fca:	461a      	mov	r2, r3
 8009fcc:	f7f9 f815 	bl	8002ffa <_lseek>
 8009fd0:	1c43      	adds	r3, r0, #1
 8009fd2:	d102      	bne.n	8009fda <_lseek_r+0x1e>
 8009fd4:	682b      	ldr	r3, [r5, #0]
 8009fd6:	b103      	cbz	r3, 8009fda <_lseek_r+0x1e>
 8009fd8:	6023      	str	r3, [r4, #0]
 8009fda:	bd38      	pop	{r3, r4, r5, pc}
 8009fdc:	200008c4 	.word	0x200008c4

08009fe0 <_read_r>:
 8009fe0:	b538      	push	{r3, r4, r5, lr}
 8009fe2:	4d07      	ldr	r5, [pc, #28]	@ (800a000 <_read_r+0x20>)
 8009fe4:	4604      	mov	r4, r0
 8009fe6:	4608      	mov	r0, r1
 8009fe8:	4611      	mov	r1, r2
 8009fea:	2200      	movs	r2, #0
 8009fec:	602a      	str	r2, [r5, #0]
 8009fee:	461a      	mov	r2, r3
 8009ff0:	f7f8 ffa3 	bl	8002f3a <_read>
 8009ff4:	1c43      	adds	r3, r0, #1
 8009ff6:	d102      	bne.n	8009ffe <_read_r+0x1e>
 8009ff8:	682b      	ldr	r3, [r5, #0]
 8009ffa:	b103      	cbz	r3, 8009ffe <_read_r+0x1e>
 8009ffc:	6023      	str	r3, [r4, #0]
 8009ffe:	bd38      	pop	{r3, r4, r5, pc}
 800a000:	200008c4 	.word	0x200008c4

0800a004 <_write_r>:
 800a004:	b538      	push	{r3, r4, r5, lr}
 800a006:	4d07      	ldr	r5, [pc, #28]	@ (800a024 <_write_r+0x20>)
 800a008:	4604      	mov	r4, r0
 800a00a:	4608      	mov	r0, r1
 800a00c:	4611      	mov	r1, r2
 800a00e:	2200      	movs	r2, #0
 800a010:	602a      	str	r2, [r5, #0]
 800a012:	461a      	mov	r2, r3
 800a014:	f7f8 ffae 	bl	8002f74 <_write>
 800a018:	1c43      	adds	r3, r0, #1
 800a01a:	d102      	bne.n	800a022 <_write_r+0x1e>
 800a01c:	682b      	ldr	r3, [r5, #0]
 800a01e:	b103      	cbz	r3, 800a022 <_write_r+0x1e>
 800a020:	6023      	str	r3, [r4, #0]
 800a022:	bd38      	pop	{r3, r4, r5, pc}
 800a024:	200008c4 	.word	0x200008c4

0800a028 <__errno>:
 800a028:	4b01      	ldr	r3, [pc, #4]	@ (800a030 <__errno+0x8>)
 800a02a:	6818      	ldr	r0, [r3, #0]
 800a02c:	4770      	bx	lr
 800a02e:	bf00      	nop
 800a030:	20000208 	.word	0x20000208

0800a034 <__libc_init_array>:
 800a034:	b570      	push	{r4, r5, r6, lr}
 800a036:	4d0d      	ldr	r5, [pc, #52]	@ (800a06c <__libc_init_array+0x38>)
 800a038:	4c0d      	ldr	r4, [pc, #52]	@ (800a070 <__libc_init_array+0x3c>)
 800a03a:	1b64      	subs	r4, r4, r5
 800a03c:	10a4      	asrs	r4, r4, #2
 800a03e:	2600      	movs	r6, #0
 800a040:	42a6      	cmp	r6, r4
 800a042:	d109      	bne.n	800a058 <__libc_init_array+0x24>
 800a044:	4d0b      	ldr	r5, [pc, #44]	@ (800a074 <__libc_init_array+0x40>)
 800a046:	4c0c      	ldr	r4, [pc, #48]	@ (800a078 <__libc_init_array+0x44>)
 800a048:	f002 fe90 	bl	800cd6c <_init>
 800a04c:	1b64      	subs	r4, r4, r5
 800a04e:	10a4      	asrs	r4, r4, #2
 800a050:	2600      	movs	r6, #0
 800a052:	42a6      	cmp	r6, r4
 800a054:	d105      	bne.n	800a062 <__libc_init_array+0x2e>
 800a056:	bd70      	pop	{r4, r5, r6, pc}
 800a058:	f855 3b04 	ldr.w	r3, [r5], #4
 800a05c:	4798      	blx	r3
 800a05e:	3601      	adds	r6, #1
 800a060:	e7ee      	b.n	800a040 <__libc_init_array+0xc>
 800a062:	f855 3b04 	ldr.w	r3, [r5], #4
 800a066:	4798      	blx	r3
 800a068:	3601      	adds	r6, #1
 800a06a:	e7f2      	b.n	800a052 <__libc_init_array+0x1e>
 800a06c:	0800d338 	.word	0x0800d338
 800a070:	0800d338 	.word	0x0800d338
 800a074:	0800d338 	.word	0x0800d338
 800a078:	0800d33c 	.word	0x0800d33c

0800a07c <__retarget_lock_init_recursive>:
 800a07c:	4770      	bx	lr

0800a07e <__retarget_lock_acquire_recursive>:
 800a07e:	4770      	bx	lr

0800a080 <__retarget_lock_release_recursive>:
 800a080:	4770      	bx	lr

0800a082 <memcpy>:
 800a082:	440a      	add	r2, r1
 800a084:	4291      	cmp	r1, r2
 800a086:	f100 33ff 	add.w	r3, r0, #4294967295
 800a08a:	d100      	bne.n	800a08e <memcpy+0xc>
 800a08c:	4770      	bx	lr
 800a08e:	b510      	push	{r4, lr}
 800a090:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a094:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a098:	4291      	cmp	r1, r2
 800a09a:	d1f9      	bne.n	800a090 <memcpy+0xe>
 800a09c:	bd10      	pop	{r4, pc}
	...

0800a0a0 <nan>:
 800a0a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a0a8 <nan+0x8>
 800a0a4:	4770      	bx	lr
 800a0a6:	bf00      	nop
 800a0a8:	00000000 	.word	0x00000000
 800a0ac:	7ff80000 	.word	0x7ff80000

0800a0b0 <nanf>:
 800a0b0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a0b8 <nanf+0x8>
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	7fc00000 	.word	0x7fc00000

0800a0bc <__assert_func>:
 800a0bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a0be:	4614      	mov	r4, r2
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	4b09      	ldr	r3, [pc, #36]	@ (800a0e8 <__assert_func+0x2c>)
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4605      	mov	r5, r0
 800a0c8:	68d8      	ldr	r0, [r3, #12]
 800a0ca:	b14c      	cbz	r4, 800a0e0 <__assert_func+0x24>
 800a0cc:	4b07      	ldr	r3, [pc, #28]	@ (800a0ec <__assert_func+0x30>)
 800a0ce:	9100      	str	r1, [sp, #0]
 800a0d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a0d4:	4906      	ldr	r1, [pc, #24]	@ (800a0f0 <__assert_func+0x34>)
 800a0d6:	462b      	mov	r3, r5
 800a0d8:	f002 f9e8 	bl	800c4ac <fiprintf>
 800a0dc:	f002 fa22 	bl	800c524 <abort>
 800a0e0:	4b04      	ldr	r3, [pc, #16]	@ (800a0f4 <__assert_func+0x38>)
 800a0e2:	461c      	mov	r4, r3
 800a0e4:	e7f3      	b.n	800a0ce <__assert_func+0x12>
 800a0e6:	bf00      	nop
 800a0e8:	20000208 	.word	0x20000208
 800a0ec:	0800cf4c 	.word	0x0800cf4c
 800a0f0:	0800cf59 	.word	0x0800cf59
 800a0f4:	0800cf87 	.word	0x0800cf87

0800a0f8 <quorem>:
 800a0f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0fc:	6903      	ldr	r3, [r0, #16]
 800a0fe:	690c      	ldr	r4, [r1, #16]
 800a100:	42a3      	cmp	r3, r4
 800a102:	4607      	mov	r7, r0
 800a104:	db7e      	blt.n	800a204 <quorem+0x10c>
 800a106:	3c01      	subs	r4, #1
 800a108:	f101 0814 	add.w	r8, r1, #20
 800a10c:	00a3      	lsls	r3, r4, #2
 800a10e:	f100 0514 	add.w	r5, r0, #20
 800a112:	9300      	str	r3, [sp, #0]
 800a114:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a118:	9301      	str	r3, [sp, #4]
 800a11a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a11e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a122:	3301      	adds	r3, #1
 800a124:	429a      	cmp	r2, r3
 800a126:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a12a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a12e:	d32e      	bcc.n	800a18e <quorem+0x96>
 800a130:	f04f 0a00 	mov.w	sl, #0
 800a134:	46c4      	mov	ip, r8
 800a136:	46ae      	mov	lr, r5
 800a138:	46d3      	mov	fp, sl
 800a13a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a13e:	b298      	uxth	r0, r3
 800a140:	fb06 a000 	mla	r0, r6, r0, sl
 800a144:	0c02      	lsrs	r2, r0, #16
 800a146:	0c1b      	lsrs	r3, r3, #16
 800a148:	fb06 2303 	mla	r3, r6, r3, r2
 800a14c:	f8de 2000 	ldr.w	r2, [lr]
 800a150:	b280      	uxth	r0, r0
 800a152:	b292      	uxth	r2, r2
 800a154:	1a12      	subs	r2, r2, r0
 800a156:	445a      	add	r2, fp
 800a158:	f8de 0000 	ldr.w	r0, [lr]
 800a15c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a160:	b29b      	uxth	r3, r3
 800a162:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a166:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a16a:	b292      	uxth	r2, r2
 800a16c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a170:	45e1      	cmp	r9, ip
 800a172:	f84e 2b04 	str.w	r2, [lr], #4
 800a176:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a17a:	d2de      	bcs.n	800a13a <quorem+0x42>
 800a17c:	9b00      	ldr	r3, [sp, #0]
 800a17e:	58eb      	ldr	r3, [r5, r3]
 800a180:	b92b      	cbnz	r3, 800a18e <quorem+0x96>
 800a182:	9b01      	ldr	r3, [sp, #4]
 800a184:	3b04      	subs	r3, #4
 800a186:	429d      	cmp	r5, r3
 800a188:	461a      	mov	r2, r3
 800a18a:	d32f      	bcc.n	800a1ec <quorem+0xf4>
 800a18c:	613c      	str	r4, [r7, #16]
 800a18e:	4638      	mov	r0, r7
 800a190:	f001 fd12 	bl	800bbb8 <__mcmp>
 800a194:	2800      	cmp	r0, #0
 800a196:	db25      	blt.n	800a1e4 <quorem+0xec>
 800a198:	4629      	mov	r1, r5
 800a19a:	2000      	movs	r0, #0
 800a19c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a1a0:	f8d1 c000 	ldr.w	ip, [r1]
 800a1a4:	fa1f fe82 	uxth.w	lr, r2
 800a1a8:	fa1f f38c 	uxth.w	r3, ip
 800a1ac:	eba3 030e 	sub.w	r3, r3, lr
 800a1b0:	4403      	add	r3, r0
 800a1b2:	0c12      	lsrs	r2, r2, #16
 800a1b4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a1b8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1c2:	45c1      	cmp	r9, r8
 800a1c4:	f841 3b04 	str.w	r3, [r1], #4
 800a1c8:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a1cc:	d2e6      	bcs.n	800a19c <quorem+0xa4>
 800a1ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1d6:	b922      	cbnz	r2, 800a1e2 <quorem+0xea>
 800a1d8:	3b04      	subs	r3, #4
 800a1da:	429d      	cmp	r5, r3
 800a1dc:	461a      	mov	r2, r3
 800a1de:	d30b      	bcc.n	800a1f8 <quorem+0x100>
 800a1e0:	613c      	str	r4, [r7, #16]
 800a1e2:	3601      	adds	r6, #1
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	b003      	add	sp, #12
 800a1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1ec:	6812      	ldr	r2, [r2, #0]
 800a1ee:	3b04      	subs	r3, #4
 800a1f0:	2a00      	cmp	r2, #0
 800a1f2:	d1cb      	bne.n	800a18c <quorem+0x94>
 800a1f4:	3c01      	subs	r4, #1
 800a1f6:	e7c6      	b.n	800a186 <quorem+0x8e>
 800a1f8:	6812      	ldr	r2, [r2, #0]
 800a1fa:	3b04      	subs	r3, #4
 800a1fc:	2a00      	cmp	r2, #0
 800a1fe:	d1ef      	bne.n	800a1e0 <quorem+0xe8>
 800a200:	3c01      	subs	r4, #1
 800a202:	e7ea      	b.n	800a1da <quorem+0xe2>
 800a204:	2000      	movs	r0, #0
 800a206:	e7ee      	b.n	800a1e6 <quorem+0xee>

0800a208 <_dtoa_r>:
 800a208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a20c:	69c7      	ldr	r7, [r0, #28]
 800a20e:	b097      	sub	sp, #92	@ 0x5c
 800a210:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a214:	ec55 4b10 	vmov	r4, r5, d0
 800a218:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a21a:	9107      	str	r1, [sp, #28]
 800a21c:	4681      	mov	r9, r0
 800a21e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a220:	9311      	str	r3, [sp, #68]	@ 0x44
 800a222:	b97f      	cbnz	r7, 800a244 <_dtoa_r+0x3c>
 800a224:	2010      	movs	r0, #16
 800a226:	f001 f943 	bl	800b4b0 <malloc>
 800a22a:	4602      	mov	r2, r0
 800a22c:	f8c9 001c 	str.w	r0, [r9, #28]
 800a230:	b920      	cbnz	r0, 800a23c <_dtoa_r+0x34>
 800a232:	4ba9      	ldr	r3, [pc, #676]	@ (800a4d8 <_dtoa_r+0x2d0>)
 800a234:	21ef      	movs	r1, #239	@ 0xef
 800a236:	48a9      	ldr	r0, [pc, #676]	@ (800a4dc <_dtoa_r+0x2d4>)
 800a238:	f7ff ff40 	bl	800a0bc <__assert_func>
 800a23c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a240:	6007      	str	r7, [r0, #0]
 800a242:	60c7      	str	r7, [r0, #12]
 800a244:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a248:	6819      	ldr	r1, [r3, #0]
 800a24a:	b159      	cbz	r1, 800a264 <_dtoa_r+0x5c>
 800a24c:	685a      	ldr	r2, [r3, #4]
 800a24e:	604a      	str	r2, [r1, #4]
 800a250:	2301      	movs	r3, #1
 800a252:	4093      	lsls	r3, r2
 800a254:	608b      	str	r3, [r1, #8]
 800a256:	4648      	mov	r0, r9
 800a258:	f001 fa32 	bl	800b6c0 <_Bfree>
 800a25c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a260:	2200      	movs	r2, #0
 800a262:	601a      	str	r2, [r3, #0]
 800a264:	1e2b      	subs	r3, r5, #0
 800a266:	bfb9      	ittee	lt
 800a268:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a26c:	9305      	strlt	r3, [sp, #20]
 800a26e:	2300      	movge	r3, #0
 800a270:	6033      	strge	r3, [r6, #0]
 800a272:	9f05      	ldr	r7, [sp, #20]
 800a274:	4b9a      	ldr	r3, [pc, #616]	@ (800a4e0 <_dtoa_r+0x2d8>)
 800a276:	bfbc      	itt	lt
 800a278:	2201      	movlt	r2, #1
 800a27a:	6032      	strlt	r2, [r6, #0]
 800a27c:	43bb      	bics	r3, r7
 800a27e:	d112      	bne.n	800a2a6 <_dtoa_r+0x9e>
 800a280:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a282:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a286:	6013      	str	r3, [r2, #0]
 800a288:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a28c:	4323      	orrs	r3, r4
 800a28e:	f000 855a 	beq.w	800ad46 <_dtoa_r+0xb3e>
 800a292:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a294:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a4f4 <_dtoa_r+0x2ec>
 800a298:	2b00      	cmp	r3, #0
 800a29a:	f000 855c 	beq.w	800ad56 <_dtoa_r+0xb4e>
 800a29e:	f10a 0303 	add.w	r3, sl, #3
 800a2a2:	f000 bd56 	b.w	800ad52 <_dtoa_r+0xb4a>
 800a2a6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	ec51 0b17 	vmov	r0, r1, d7
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a2b6:	f7f6 fc1f 	bl	8000af8 <__aeabi_dcmpeq>
 800a2ba:	4680      	mov	r8, r0
 800a2bc:	b158      	cbz	r0, 800a2d6 <_dtoa_r+0xce>
 800a2be:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	6013      	str	r3, [r2, #0]
 800a2c4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a2c6:	b113      	cbz	r3, 800a2ce <_dtoa_r+0xc6>
 800a2c8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a2ca:	4b86      	ldr	r3, [pc, #536]	@ (800a4e4 <_dtoa_r+0x2dc>)
 800a2cc:	6013      	str	r3, [r2, #0]
 800a2ce:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a4f8 <_dtoa_r+0x2f0>
 800a2d2:	f000 bd40 	b.w	800ad56 <_dtoa_r+0xb4e>
 800a2d6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a2da:	aa14      	add	r2, sp, #80	@ 0x50
 800a2dc:	a915      	add	r1, sp, #84	@ 0x54
 800a2de:	4648      	mov	r0, r9
 800a2e0:	f001 fd8a 	bl	800bdf8 <__d2b>
 800a2e4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a2e8:	9002      	str	r0, [sp, #8]
 800a2ea:	2e00      	cmp	r6, #0
 800a2ec:	d078      	beq.n	800a3e0 <_dtoa_r+0x1d8>
 800a2ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a2f0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a2f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a2f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a2fc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a300:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a304:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a308:	4619      	mov	r1, r3
 800a30a:	2200      	movs	r2, #0
 800a30c:	4b76      	ldr	r3, [pc, #472]	@ (800a4e8 <_dtoa_r+0x2e0>)
 800a30e:	f7f5 ffd3 	bl	80002b8 <__aeabi_dsub>
 800a312:	a36b      	add	r3, pc, #428	@ (adr r3, 800a4c0 <_dtoa_r+0x2b8>)
 800a314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a318:	f7f6 f986 	bl	8000628 <__aeabi_dmul>
 800a31c:	a36a      	add	r3, pc, #424	@ (adr r3, 800a4c8 <_dtoa_r+0x2c0>)
 800a31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a322:	f7f5 ffcb 	bl	80002bc <__adddf3>
 800a326:	4604      	mov	r4, r0
 800a328:	4630      	mov	r0, r6
 800a32a:	460d      	mov	r5, r1
 800a32c:	f7f6 f912 	bl	8000554 <__aeabi_i2d>
 800a330:	a367      	add	r3, pc, #412	@ (adr r3, 800a4d0 <_dtoa_r+0x2c8>)
 800a332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a336:	f7f6 f977 	bl	8000628 <__aeabi_dmul>
 800a33a:	4602      	mov	r2, r0
 800a33c:	460b      	mov	r3, r1
 800a33e:	4620      	mov	r0, r4
 800a340:	4629      	mov	r1, r5
 800a342:	f7f5 ffbb 	bl	80002bc <__adddf3>
 800a346:	4604      	mov	r4, r0
 800a348:	460d      	mov	r5, r1
 800a34a:	f7f6 fc1d 	bl	8000b88 <__aeabi_d2iz>
 800a34e:	2200      	movs	r2, #0
 800a350:	4607      	mov	r7, r0
 800a352:	2300      	movs	r3, #0
 800a354:	4620      	mov	r0, r4
 800a356:	4629      	mov	r1, r5
 800a358:	f7f6 fbd8 	bl	8000b0c <__aeabi_dcmplt>
 800a35c:	b140      	cbz	r0, 800a370 <_dtoa_r+0x168>
 800a35e:	4638      	mov	r0, r7
 800a360:	f7f6 f8f8 	bl	8000554 <__aeabi_i2d>
 800a364:	4622      	mov	r2, r4
 800a366:	462b      	mov	r3, r5
 800a368:	f7f6 fbc6 	bl	8000af8 <__aeabi_dcmpeq>
 800a36c:	b900      	cbnz	r0, 800a370 <_dtoa_r+0x168>
 800a36e:	3f01      	subs	r7, #1
 800a370:	2f16      	cmp	r7, #22
 800a372:	d852      	bhi.n	800a41a <_dtoa_r+0x212>
 800a374:	4b5d      	ldr	r3, [pc, #372]	@ (800a4ec <_dtoa_r+0x2e4>)
 800a376:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a37e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a382:	f7f6 fbc3 	bl	8000b0c <__aeabi_dcmplt>
 800a386:	2800      	cmp	r0, #0
 800a388:	d049      	beq.n	800a41e <_dtoa_r+0x216>
 800a38a:	3f01      	subs	r7, #1
 800a38c:	2300      	movs	r3, #0
 800a38e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a390:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a392:	1b9b      	subs	r3, r3, r6
 800a394:	1e5a      	subs	r2, r3, #1
 800a396:	bf45      	ittet	mi
 800a398:	f1c3 0301 	rsbmi	r3, r3, #1
 800a39c:	9300      	strmi	r3, [sp, #0]
 800a39e:	2300      	movpl	r3, #0
 800a3a0:	2300      	movmi	r3, #0
 800a3a2:	9206      	str	r2, [sp, #24]
 800a3a4:	bf54      	ite	pl
 800a3a6:	9300      	strpl	r3, [sp, #0]
 800a3a8:	9306      	strmi	r3, [sp, #24]
 800a3aa:	2f00      	cmp	r7, #0
 800a3ac:	db39      	blt.n	800a422 <_dtoa_r+0x21a>
 800a3ae:	9b06      	ldr	r3, [sp, #24]
 800a3b0:	970d      	str	r7, [sp, #52]	@ 0x34
 800a3b2:	443b      	add	r3, r7
 800a3b4:	9306      	str	r3, [sp, #24]
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	9308      	str	r3, [sp, #32]
 800a3ba:	9b07      	ldr	r3, [sp, #28]
 800a3bc:	2b09      	cmp	r3, #9
 800a3be:	d863      	bhi.n	800a488 <_dtoa_r+0x280>
 800a3c0:	2b05      	cmp	r3, #5
 800a3c2:	bfc4      	itt	gt
 800a3c4:	3b04      	subgt	r3, #4
 800a3c6:	9307      	strgt	r3, [sp, #28]
 800a3c8:	9b07      	ldr	r3, [sp, #28]
 800a3ca:	f1a3 0302 	sub.w	r3, r3, #2
 800a3ce:	bfcc      	ite	gt
 800a3d0:	2400      	movgt	r4, #0
 800a3d2:	2401      	movle	r4, #1
 800a3d4:	2b03      	cmp	r3, #3
 800a3d6:	d863      	bhi.n	800a4a0 <_dtoa_r+0x298>
 800a3d8:	e8df f003 	tbb	[pc, r3]
 800a3dc:	2b375452 	.word	0x2b375452
 800a3e0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a3e4:	441e      	add	r6, r3
 800a3e6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a3ea:	2b20      	cmp	r3, #32
 800a3ec:	bfc1      	itttt	gt
 800a3ee:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a3f2:	409f      	lslgt	r7, r3
 800a3f4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a3f8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a3fc:	bfd6      	itet	le
 800a3fe:	f1c3 0320 	rsble	r3, r3, #32
 800a402:	ea47 0003 	orrgt.w	r0, r7, r3
 800a406:	fa04 f003 	lslle.w	r0, r4, r3
 800a40a:	f7f6 f893 	bl	8000534 <__aeabi_ui2d>
 800a40e:	2201      	movs	r2, #1
 800a410:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a414:	3e01      	subs	r6, #1
 800a416:	9212      	str	r2, [sp, #72]	@ 0x48
 800a418:	e776      	b.n	800a308 <_dtoa_r+0x100>
 800a41a:	2301      	movs	r3, #1
 800a41c:	e7b7      	b.n	800a38e <_dtoa_r+0x186>
 800a41e:	9010      	str	r0, [sp, #64]	@ 0x40
 800a420:	e7b6      	b.n	800a390 <_dtoa_r+0x188>
 800a422:	9b00      	ldr	r3, [sp, #0]
 800a424:	1bdb      	subs	r3, r3, r7
 800a426:	9300      	str	r3, [sp, #0]
 800a428:	427b      	negs	r3, r7
 800a42a:	9308      	str	r3, [sp, #32]
 800a42c:	2300      	movs	r3, #0
 800a42e:	930d      	str	r3, [sp, #52]	@ 0x34
 800a430:	e7c3      	b.n	800a3ba <_dtoa_r+0x1b2>
 800a432:	2301      	movs	r3, #1
 800a434:	9309      	str	r3, [sp, #36]	@ 0x24
 800a436:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a438:	eb07 0b03 	add.w	fp, r7, r3
 800a43c:	f10b 0301 	add.w	r3, fp, #1
 800a440:	2b01      	cmp	r3, #1
 800a442:	9303      	str	r3, [sp, #12]
 800a444:	bfb8      	it	lt
 800a446:	2301      	movlt	r3, #1
 800a448:	e006      	b.n	800a458 <_dtoa_r+0x250>
 800a44a:	2301      	movs	r3, #1
 800a44c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a44e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a450:	2b00      	cmp	r3, #0
 800a452:	dd28      	ble.n	800a4a6 <_dtoa_r+0x29e>
 800a454:	469b      	mov	fp, r3
 800a456:	9303      	str	r3, [sp, #12]
 800a458:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a45c:	2100      	movs	r1, #0
 800a45e:	2204      	movs	r2, #4
 800a460:	f102 0514 	add.w	r5, r2, #20
 800a464:	429d      	cmp	r5, r3
 800a466:	d926      	bls.n	800a4b6 <_dtoa_r+0x2ae>
 800a468:	6041      	str	r1, [r0, #4]
 800a46a:	4648      	mov	r0, r9
 800a46c:	f001 f8e8 	bl	800b640 <_Balloc>
 800a470:	4682      	mov	sl, r0
 800a472:	2800      	cmp	r0, #0
 800a474:	d142      	bne.n	800a4fc <_dtoa_r+0x2f4>
 800a476:	4b1e      	ldr	r3, [pc, #120]	@ (800a4f0 <_dtoa_r+0x2e8>)
 800a478:	4602      	mov	r2, r0
 800a47a:	f240 11af 	movw	r1, #431	@ 0x1af
 800a47e:	e6da      	b.n	800a236 <_dtoa_r+0x2e>
 800a480:	2300      	movs	r3, #0
 800a482:	e7e3      	b.n	800a44c <_dtoa_r+0x244>
 800a484:	2300      	movs	r3, #0
 800a486:	e7d5      	b.n	800a434 <_dtoa_r+0x22c>
 800a488:	2401      	movs	r4, #1
 800a48a:	2300      	movs	r3, #0
 800a48c:	9307      	str	r3, [sp, #28]
 800a48e:	9409      	str	r4, [sp, #36]	@ 0x24
 800a490:	f04f 3bff 	mov.w	fp, #4294967295
 800a494:	2200      	movs	r2, #0
 800a496:	f8cd b00c 	str.w	fp, [sp, #12]
 800a49a:	2312      	movs	r3, #18
 800a49c:	920c      	str	r2, [sp, #48]	@ 0x30
 800a49e:	e7db      	b.n	800a458 <_dtoa_r+0x250>
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4a4:	e7f4      	b.n	800a490 <_dtoa_r+0x288>
 800a4a6:	f04f 0b01 	mov.w	fp, #1
 800a4aa:	f8cd b00c 	str.w	fp, [sp, #12]
 800a4ae:	465b      	mov	r3, fp
 800a4b0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a4b4:	e7d0      	b.n	800a458 <_dtoa_r+0x250>
 800a4b6:	3101      	adds	r1, #1
 800a4b8:	0052      	lsls	r2, r2, #1
 800a4ba:	e7d1      	b.n	800a460 <_dtoa_r+0x258>
 800a4bc:	f3af 8000 	nop.w
 800a4c0:	636f4361 	.word	0x636f4361
 800a4c4:	3fd287a7 	.word	0x3fd287a7
 800a4c8:	8b60c8b3 	.word	0x8b60c8b3
 800a4cc:	3fc68a28 	.word	0x3fc68a28
 800a4d0:	509f79fb 	.word	0x509f79fb
 800a4d4:	3fd34413 	.word	0x3fd34413
 800a4d8:	0800ced3 	.word	0x0800ced3
 800a4dc:	0800cf95 	.word	0x0800cf95
 800a4e0:	7ff00000 	.word	0x7ff00000
 800a4e4:	0800ceab 	.word	0x0800ceab
 800a4e8:	3ff80000 	.word	0x3ff80000
 800a4ec:	0800d150 	.word	0x0800d150
 800a4f0:	0800cfed 	.word	0x0800cfed
 800a4f4:	0800cf91 	.word	0x0800cf91
 800a4f8:	0800ceaa 	.word	0x0800ceaa
 800a4fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a500:	6018      	str	r0, [r3, #0]
 800a502:	9b03      	ldr	r3, [sp, #12]
 800a504:	2b0e      	cmp	r3, #14
 800a506:	f200 80a1 	bhi.w	800a64c <_dtoa_r+0x444>
 800a50a:	2c00      	cmp	r4, #0
 800a50c:	f000 809e 	beq.w	800a64c <_dtoa_r+0x444>
 800a510:	2f00      	cmp	r7, #0
 800a512:	dd33      	ble.n	800a57c <_dtoa_r+0x374>
 800a514:	4b9c      	ldr	r3, [pc, #624]	@ (800a788 <_dtoa_r+0x580>)
 800a516:	f007 020f 	and.w	r2, r7, #15
 800a51a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a51e:	ed93 7b00 	vldr	d7, [r3]
 800a522:	05f8      	lsls	r0, r7, #23
 800a524:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a528:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a52c:	d516      	bpl.n	800a55c <_dtoa_r+0x354>
 800a52e:	4b97      	ldr	r3, [pc, #604]	@ (800a78c <_dtoa_r+0x584>)
 800a530:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a534:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a538:	f7f6 f9a0 	bl	800087c <__aeabi_ddiv>
 800a53c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a540:	f004 040f 	and.w	r4, r4, #15
 800a544:	2603      	movs	r6, #3
 800a546:	4d91      	ldr	r5, [pc, #580]	@ (800a78c <_dtoa_r+0x584>)
 800a548:	b954      	cbnz	r4, 800a560 <_dtoa_r+0x358>
 800a54a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a54e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a552:	f7f6 f993 	bl	800087c <__aeabi_ddiv>
 800a556:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a55a:	e028      	b.n	800a5ae <_dtoa_r+0x3a6>
 800a55c:	2602      	movs	r6, #2
 800a55e:	e7f2      	b.n	800a546 <_dtoa_r+0x33e>
 800a560:	07e1      	lsls	r1, r4, #31
 800a562:	d508      	bpl.n	800a576 <_dtoa_r+0x36e>
 800a564:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a568:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a56c:	f7f6 f85c 	bl	8000628 <__aeabi_dmul>
 800a570:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a574:	3601      	adds	r6, #1
 800a576:	1064      	asrs	r4, r4, #1
 800a578:	3508      	adds	r5, #8
 800a57a:	e7e5      	b.n	800a548 <_dtoa_r+0x340>
 800a57c:	f000 80af 	beq.w	800a6de <_dtoa_r+0x4d6>
 800a580:	427c      	negs	r4, r7
 800a582:	4b81      	ldr	r3, [pc, #516]	@ (800a788 <_dtoa_r+0x580>)
 800a584:	4d81      	ldr	r5, [pc, #516]	@ (800a78c <_dtoa_r+0x584>)
 800a586:	f004 020f 	and.w	r2, r4, #15
 800a58a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a592:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a596:	f7f6 f847 	bl	8000628 <__aeabi_dmul>
 800a59a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a59e:	1124      	asrs	r4, r4, #4
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	2602      	movs	r6, #2
 800a5a4:	2c00      	cmp	r4, #0
 800a5a6:	f040 808f 	bne.w	800a6c8 <_dtoa_r+0x4c0>
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d1d3      	bne.n	800a556 <_dtoa_r+0x34e>
 800a5ae:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a5b0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f000 8094 	beq.w	800a6e2 <_dtoa_r+0x4da>
 800a5ba:	4b75      	ldr	r3, [pc, #468]	@ (800a790 <_dtoa_r+0x588>)
 800a5bc:	2200      	movs	r2, #0
 800a5be:	4620      	mov	r0, r4
 800a5c0:	4629      	mov	r1, r5
 800a5c2:	f7f6 faa3 	bl	8000b0c <__aeabi_dcmplt>
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	f000 808b 	beq.w	800a6e2 <_dtoa_r+0x4da>
 800a5cc:	9b03      	ldr	r3, [sp, #12]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	f000 8087 	beq.w	800a6e2 <_dtoa_r+0x4da>
 800a5d4:	f1bb 0f00 	cmp.w	fp, #0
 800a5d8:	dd34      	ble.n	800a644 <_dtoa_r+0x43c>
 800a5da:	4620      	mov	r0, r4
 800a5dc:	4b6d      	ldr	r3, [pc, #436]	@ (800a794 <_dtoa_r+0x58c>)
 800a5de:	2200      	movs	r2, #0
 800a5e0:	4629      	mov	r1, r5
 800a5e2:	f7f6 f821 	bl	8000628 <__aeabi_dmul>
 800a5e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5ea:	f107 38ff 	add.w	r8, r7, #4294967295
 800a5ee:	3601      	adds	r6, #1
 800a5f0:	465c      	mov	r4, fp
 800a5f2:	4630      	mov	r0, r6
 800a5f4:	f7f5 ffae 	bl	8000554 <__aeabi_i2d>
 800a5f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5fc:	f7f6 f814 	bl	8000628 <__aeabi_dmul>
 800a600:	4b65      	ldr	r3, [pc, #404]	@ (800a798 <_dtoa_r+0x590>)
 800a602:	2200      	movs	r2, #0
 800a604:	f7f5 fe5a 	bl	80002bc <__adddf3>
 800a608:	4605      	mov	r5, r0
 800a60a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a60e:	2c00      	cmp	r4, #0
 800a610:	d16a      	bne.n	800a6e8 <_dtoa_r+0x4e0>
 800a612:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a616:	4b61      	ldr	r3, [pc, #388]	@ (800a79c <_dtoa_r+0x594>)
 800a618:	2200      	movs	r2, #0
 800a61a:	f7f5 fe4d 	bl	80002b8 <__aeabi_dsub>
 800a61e:	4602      	mov	r2, r0
 800a620:	460b      	mov	r3, r1
 800a622:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a626:	462a      	mov	r2, r5
 800a628:	4633      	mov	r3, r6
 800a62a:	f7f6 fa8d 	bl	8000b48 <__aeabi_dcmpgt>
 800a62e:	2800      	cmp	r0, #0
 800a630:	f040 8298 	bne.w	800ab64 <_dtoa_r+0x95c>
 800a634:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a638:	462a      	mov	r2, r5
 800a63a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a63e:	f7f6 fa65 	bl	8000b0c <__aeabi_dcmplt>
 800a642:	bb38      	cbnz	r0, 800a694 <_dtoa_r+0x48c>
 800a644:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a648:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a64c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a64e:	2b00      	cmp	r3, #0
 800a650:	f2c0 8157 	blt.w	800a902 <_dtoa_r+0x6fa>
 800a654:	2f0e      	cmp	r7, #14
 800a656:	f300 8154 	bgt.w	800a902 <_dtoa_r+0x6fa>
 800a65a:	4b4b      	ldr	r3, [pc, #300]	@ (800a788 <_dtoa_r+0x580>)
 800a65c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a660:	ed93 7b00 	vldr	d7, [r3]
 800a664:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a666:	2b00      	cmp	r3, #0
 800a668:	ed8d 7b00 	vstr	d7, [sp]
 800a66c:	f280 80e5 	bge.w	800a83a <_dtoa_r+0x632>
 800a670:	9b03      	ldr	r3, [sp, #12]
 800a672:	2b00      	cmp	r3, #0
 800a674:	f300 80e1 	bgt.w	800a83a <_dtoa_r+0x632>
 800a678:	d10c      	bne.n	800a694 <_dtoa_r+0x48c>
 800a67a:	4b48      	ldr	r3, [pc, #288]	@ (800a79c <_dtoa_r+0x594>)
 800a67c:	2200      	movs	r2, #0
 800a67e:	ec51 0b17 	vmov	r0, r1, d7
 800a682:	f7f5 ffd1 	bl	8000628 <__aeabi_dmul>
 800a686:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a68a:	f7f6 fa53 	bl	8000b34 <__aeabi_dcmpge>
 800a68e:	2800      	cmp	r0, #0
 800a690:	f000 8266 	beq.w	800ab60 <_dtoa_r+0x958>
 800a694:	2400      	movs	r4, #0
 800a696:	4625      	mov	r5, r4
 800a698:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a69a:	4656      	mov	r6, sl
 800a69c:	ea6f 0803 	mvn.w	r8, r3
 800a6a0:	2700      	movs	r7, #0
 800a6a2:	4621      	mov	r1, r4
 800a6a4:	4648      	mov	r0, r9
 800a6a6:	f001 f80b 	bl	800b6c0 <_Bfree>
 800a6aa:	2d00      	cmp	r5, #0
 800a6ac:	f000 80bd 	beq.w	800a82a <_dtoa_r+0x622>
 800a6b0:	b12f      	cbz	r7, 800a6be <_dtoa_r+0x4b6>
 800a6b2:	42af      	cmp	r7, r5
 800a6b4:	d003      	beq.n	800a6be <_dtoa_r+0x4b6>
 800a6b6:	4639      	mov	r1, r7
 800a6b8:	4648      	mov	r0, r9
 800a6ba:	f001 f801 	bl	800b6c0 <_Bfree>
 800a6be:	4629      	mov	r1, r5
 800a6c0:	4648      	mov	r0, r9
 800a6c2:	f000 fffd 	bl	800b6c0 <_Bfree>
 800a6c6:	e0b0      	b.n	800a82a <_dtoa_r+0x622>
 800a6c8:	07e2      	lsls	r2, r4, #31
 800a6ca:	d505      	bpl.n	800a6d8 <_dtoa_r+0x4d0>
 800a6cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a6d0:	f7f5 ffaa 	bl	8000628 <__aeabi_dmul>
 800a6d4:	3601      	adds	r6, #1
 800a6d6:	2301      	movs	r3, #1
 800a6d8:	1064      	asrs	r4, r4, #1
 800a6da:	3508      	adds	r5, #8
 800a6dc:	e762      	b.n	800a5a4 <_dtoa_r+0x39c>
 800a6de:	2602      	movs	r6, #2
 800a6e0:	e765      	b.n	800a5ae <_dtoa_r+0x3a6>
 800a6e2:	9c03      	ldr	r4, [sp, #12]
 800a6e4:	46b8      	mov	r8, r7
 800a6e6:	e784      	b.n	800a5f2 <_dtoa_r+0x3ea>
 800a6e8:	4b27      	ldr	r3, [pc, #156]	@ (800a788 <_dtoa_r+0x580>)
 800a6ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a6ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a6f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a6f4:	4454      	add	r4, sl
 800a6f6:	2900      	cmp	r1, #0
 800a6f8:	d054      	beq.n	800a7a4 <_dtoa_r+0x59c>
 800a6fa:	4929      	ldr	r1, [pc, #164]	@ (800a7a0 <_dtoa_r+0x598>)
 800a6fc:	2000      	movs	r0, #0
 800a6fe:	f7f6 f8bd 	bl	800087c <__aeabi_ddiv>
 800a702:	4633      	mov	r3, r6
 800a704:	462a      	mov	r2, r5
 800a706:	f7f5 fdd7 	bl	80002b8 <__aeabi_dsub>
 800a70a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a70e:	4656      	mov	r6, sl
 800a710:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a714:	f7f6 fa38 	bl	8000b88 <__aeabi_d2iz>
 800a718:	4605      	mov	r5, r0
 800a71a:	f7f5 ff1b 	bl	8000554 <__aeabi_i2d>
 800a71e:	4602      	mov	r2, r0
 800a720:	460b      	mov	r3, r1
 800a722:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a726:	f7f5 fdc7 	bl	80002b8 <__aeabi_dsub>
 800a72a:	3530      	adds	r5, #48	@ 0x30
 800a72c:	4602      	mov	r2, r0
 800a72e:	460b      	mov	r3, r1
 800a730:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a734:	f806 5b01 	strb.w	r5, [r6], #1
 800a738:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a73c:	f7f6 f9e6 	bl	8000b0c <__aeabi_dcmplt>
 800a740:	2800      	cmp	r0, #0
 800a742:	d172      	bne.n	800a82a <_dtoa_r+0x622>
 800a744:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a748:	4911      	ldr	r1, [pc, #68]	@ (800a790 <_dtoa_r+0x588>)
 800a74a:	2000      	movs	r0, #0
 800a74c:	f7f5 fdb4 	bl	80002b8 <__aeabi_dsub>
 800a750:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a754:	f7f6 f9da 	bl	8000b0c <__aeabi_dcmplt>
 800a758:	2800      	cmp	r0, #0
 800a75a:	f040 80b4 	bne.w	800a8c6 <_dtoa_r+0x6be>
 800a75e:	42a6      	cmp	r6, r4
 800a760:	f43f af70 	beq.w	800a644 <_dtoa_r+0x43c>
 800a764:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a768:	4b0a      	ldr	r3, [pc, #40]	@ (800a794 <_dtoa_r+0x58c>)
 800a76a:	2200      	movs	r2, #0
 800a76c:	f7f5 ff5c 	bl	8000628 <__aeabi_dmul>
 800a770:	4b08      	ldr	r3, [pc, #32]	@ (800a794 <_dtoa_r+0x58c>)
 800a772:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a776:	2200      	movs	r2, #0
 800a778:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a77c:	f7f5 ff54 	bl	8000628 <__aeabi_dmul>
 800a780:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a784:	e7c4      	b.n	800a710 <_dtoa_r+0x508>
 800a786:	bf00      	nop
 800a788:	0800d150 	.word	0x0800d150
 800a78c:	0800d128 	.word	0x0800d128
 800a790:	3ff00000 	.word	0x3ff00000
 800a794:	40240000 	.word	0x40240000
 800a798:	401c0000 	.word	0x401c0000
 800a79c:	40140000 	.word	0x40140000
 800a7a0:	3fe00000 	.word	0x3fe00000
 800a7a4:	4631      	mov	r1, r6
 800a7a6:	4628      	mov	r0, r5
 800a7a8:	f7f5 ff3e 	bl	8000628 <__aeabi_dmul>
 800a7ac:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a7b0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a7b2:	4656      	mov	r6, sl
 800a7b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7b8:	f7f6 f9e6 	bl	8000b88 <__aeabi_d2iz>
 800a7bc:	4605      	mov	r5, r0
 800a7be:	f7f5 fec9 	bl	8000554 <__aeabi_i2d>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7ca:	f7f5 fd75 	bl	80002b8 <__aeabi_dsub>
 800a7ce:	3530      	adds	r5, #48	@ 0x30
 800a7d0:	f806 5b01 	strb.w	r5, [r6], #1
 800a7d4:	4602      	mov	r2, r0
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	42a6      	cmp	r6, r4
 800a7da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a7de:	f04f 0200 	mov.w	r2, #0
 800a7e2:	d124      	bne.n	800a82e <_dtoa_r+0x626>
 800a7e4:	4baf      	ldr	r3, [pc, #700]	@ (800aaa4 <_dtoa_r+0x89c>)
 800a7e6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a7ea:	f7f5 fd67 	bl	80002bc <__adddf3>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a7f6:	f7f6 f9a7 	bl	8000b48 <__aeabi_dcmpgt>
 800a7fa:	2800      	cmp	r0, #0
 800a7fc:	d163      	bne.n	800a8c6 <_dtoa_r+0x6be>
 800a7fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a802:	49a8      	ldr	r1, [pc, #672]	@ (800aaa4 <_dtoa_r+0x89c>)
 800a804:	2000      	movs	r0, #0
 800a806:	f7f5 fd57 	bl	80002b8 <__aeabi_dsub>
 800a80a:	4602      	mov	r2, r0
 800a80c:	460b      	mov	r3, r1
 800a80e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a812:	f7f6 f97b 	bl	8000b0c <__aeabi_dcmplt>
 800a816:	2800      	cmp	r0, #0
 800a818:	f43f af14 	beq.w	800a644 <_dtoa_r+0x43c>
 800a81c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a81e:	1e73      	subs	r3, r6, #1
 800a820:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a822:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a826:	2b30      	cmp	r3, #48	@ 0x30
 800a828:	d0f8      	beq.n	800a81c <_dtoa_r+0x614>
 800a82a:	4647      	mov	r7, r8
 800a82c:	e03b      	b.n	800a8a6 <_dtoa_r+0x69e>
 800a82e:	4b9e      	ldr	r3, [pc, #632]	@ (800aaa8 <_dtoa_r+0x8a0>)
 800a830:	f7f5 fefa 	bl	8000628 <__aeabi_dmul>
 800a834:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a838:	e7bc      	b.n	800a7b4 <_dtoa_r+0x5ac>
 800a83a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a83e:	4656      	mov	r6, sl
 800a840:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a844:	4620      	mov	r0, r4
 800a846:	4629      	mov	r1, r5
 800a848:	f7f6 f818 	bl	800087c <__aeabi_ddiv>
 800a84c:	f7f6 f99c 	bl	8000b88 <__aeabi_d2iz>
 800a850:	4680      	mov	r8, r0
 800a852:	f7f5 fe7f 	bl	8000554 <__aeabi_i2d>
 800a856:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a85a:	f7f5 fee5 	bl	8000628 <__aeabi_dmul>
 800a85e:	4602      	mov	r2, r0
 800a860:	460b      	mov	r3, r1
 800a862:	4620      	mov	r0, r4
 800a864:	4629      	mov	r1, r5
 800a866:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a86a:	f7f5 fd25 	bl	80002b8 <__aeabi_dsub>
 800a86e:	f806 4b01 	strb.w	r4, [r6], #1
 800a872:	9d03      	ldr	r5, [sp, #12]
 800a874:	eba6 040a 	sub.w	r4, r6, sl
 800a878:	42a5      	cmp	r5, r4
 800a87a:	4602      	mov	r2, r0
 800a87c:	460b      	mov	r3, r1
 800a87e:	d133      	bne.n	800a8e8 <_dtoa_r+0x6e0>
 800a880:	f7f5 fd1c 	bl	80002bc <__adddf3>
 800a884:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a888:	4604      	mov	r4, r0
 800a88a:	460d      	mov	r5, r1
 800a88c:	f7f6 f95c 	bl	8000b48 <__aeabi_dcmpgt>
 800a890:	b9c0      	cbnz	r0, 800a8c4 <_dtoa_r+0x6bc>
 800a892:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a896:	4620      	mov	r0, r4
 800a898:	4629      	mov	r1, r5
 800a89a:	f7f6 f92d 	bl	8000af8 <__aeabi_dcmpeq>
 800a89e:	b110      	cbz	r0, 800a8a6 <_dtoa_r+0x69e>
 800a8a0:	f018 0f01 	tst.w	r8, #1
 800a8a4:	d10e      	bne.n	800a8c4 <_dtoa_r+0x6bc>
 800a8a6:	9902      	ldr	r1, [sp, #8]
 800a8a8:	4648      	mov	r0, r9
 800a8aa:	f000 ff09 	bl	800b6c0 <_Bfree>
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	7033      	strb	r3, [r6, #0]
 800a8b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a8b4:	3701      	adds	r7, #1
 800a8b6:	601f      	str	r7, [r3, #0]
 800a8b8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	f000 824b 	beq.w	800ad56 <_dtoa_r+0xb4e>
 800a8c0:	601e      	str	r6, [r3, #0]
 800a8c2:	e248      	b.n	800ad56 <_dtoa_r+0xb4e>
 800a8c4:	46b8      	mov	r8, r7
 800a8c6:	4633      	mov	r3, r6
 800a8c8:	461e      	mov	r6, r3
 800a8ca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a8ce:	2a39      	cmp	r2, #57	@ 0x39
 800a8d0:	d106      	bne.n	800a8e0 <_dtoa_r+0x6d8>
 800a8d2:	459a      	cmp	sl, r3
 800a8d4:	d1f8      	bne.n	800a8c8 <_dtoa_r+0x6c0>
 800a8d6:	2230      	movs	r2, #48	@ 0x30
 800a8d8:	f108 0801 	add.w	r8, r8, #1
 800a8dc:	f88a 2000 	strb.w	r2, [sl]
 800a8e0:	781a      	ldrb	r2, [r3, #0]
 800a8e2:	3201      	adds	r2, #1
 800a8e4:	701a      	strb	r2, [r3, #0]
 800a8e6:	e7a0      	b.n	800a82a <_dtoa_r+0x622>
 800a8e8:	4b6f      	ldr	r3, [pc, #444]	@ (800aaa8 <_dtoa_r+0x8a0>)
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f7f5 fe9c 	bl	8000628 <__aeabi_dmul>
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	4604      	mov	r4, r0
 800a8f6:	460d      	mov	r5, r1
 800a8f8:	f7f6 f8fe 	bl	8000af8 <__aeabi_dcmpeq>
 800a8fc:	2800      	cmp	r0, #0
 800a8fe:	d09f      	beq.n	800a840 <_dtoa_r+0x638>
 800a900:	e7d1      	b.n	800a8a6 <_dtoa_r+0x69e>
 800a902:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a904:	2a00      	cmp	r2, #0
 800a906:	f000 80ea 	beq.w	800aade <_dtoa_r+0x8d6>
 800a90a:	9a07      	ldr	r2, [sp, #28]
 800a90c:	2a01      	cmp	r2, #1
 800a90e:	f300 80cd 	bgt.w	800aaac <_dtoa_r+0x8a4>
 800a912:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a914:	2a00      	cmp	r2, #0
 800a916:	f000 80c1 	beq.w	800aa9c <_dtoa_r+0x894>
 800a91a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a91e:	9c08      	ldr	r4, [sp, #32]
 800a920:	9e00      	ldr	r6, [sp, #0]
 800a922:	9a00      	ldr	r2, [sp, #0]
 800a924:	441a      	add	r2, r3
 800a926:	9200      	str	r2, [sp, #0]
 800a928:	9a06      	ldr	r2, [sp, #24]
 800a92a:	2101      	movs	r1, #1
 800a92c:	441a      	add	r2, r3
 800a92e:	4648      	mov	r0, r9
 800a930:	9206      	str	r2, [sp, #24]
 800a932:	f000 ffc3 	bl	800b8bc <__i2b>
 800a936:	4605      	mov	r5, r0
 800a938:	b166      	cbz	r6, 800a954 <_dtoa_r+0x74c>
 800a93a:	9b06      	ldr	r3, [sp, #24]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	dd09      	ble.n	800a954 <_dtoa_r+0x74c>
 800a940:	42b3      	cmp	r3, r6
 800a942:	9a00      	ldr	r2, [sp, #0]
 800a944:	bfa8      	it	ge
 800a946:	4633      	movge	r3, r6
 800a948:	1ad2      	subs	r2, r2, r3
 800a94a:	9200      	str	r2, [sp, #0]
 800a94c:	9a06      	ldr	r2, [sp, #24]
 800a94e:	1af6      	subs	r6, r6, r3
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	9306      	str	r3, [sp, #24]
 800a954:	9b08      	ldr	r3, [sp, #32]
 800a956:	b30b      	cbz	r3, 800a99c <_dtoa_r+0x794>
 800a958:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	f000 80c6 	beq.w	800aaec <_dtoa_r+0x8e4>
 800a960:	2c00      	cmp	r4, #0
 800a962:	f000 80c0 	beq.w	800aae6 <_dtoa_r+0x8de>
 800a966:	4629      	mov	r1, r5
 800a968:	4622      	mov	r2, r4
 800a96a:	4648      	mov	r0, r9
 800a96c:	f001 f85e 	bl	800ba2c <__pow5mult>
 800a970:	9a02      	ldr	r2, [sp, #8]
 800a972:	4601      	mov	r1, r0
 800a974:	4605      	mov	r5, r0
 800a976:	4648      	mov	r0, r9
 800a978:	f000 ffb6 	bl	800b8e8 <__multiply>
 800a97c:	9902      	ldr	r1, [sp, #8]
 800a97e:	4680      	mov	r8, r0
 800a980:	4648      	mov	r0, r9
 800a982:	f000 fe9d 	bl	800b6c0 <_Bfree>
 800a986:	9b08      	ldr	r3, [sp, #32]
 800a988:	1b1b      	subs	r3, r3, r4
 800a98a:	9308      	str	r3, [sp, #32]
 800a98c:	f000 80b1 	beq.w	800aaf2 <_dtoa_r+0x8ea>
 800a990:	9a08      	ldr	r2, [sp, #32]
 800a992:	4641      	mov	r1, r8
 800a994:	4648      	mov	r0, r9
 800a996:	f001 f849 	bl	800ba2c <__pow5mult>
 800a99a:	9002      	str	r0, [sp, #8]
 800a99c:	2101      	movs	r1, #1
 800a99e:	4648      	mov	r0, r9
 800a9a0:	f000 ff8c 	bl	800b8bc <__i2b>
 800a9a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a9a6:	4604      	mov	r4, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	f000 81d8 	beq.w	800ad5e <_dtoa_r+0xb56>
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	4601      	mov	r1, r0
 800a9b2:	4648      	mov	r0, r9
 800a9b4:	f001 f83a 	bl	800ba2c <__pow5mult>
 800a9b8:	9b07      	ldr	r3, [sp, #28]
 800a9ba:	2b01      	cmp	r3, #1
 800a9bc:	4604      	mov	r4, r0
 800a9be:	f300 809f 	bgt.w	800ab00 <_dtoa_r+0x8f8>
 800a9c2:	9b04      	ldr	r3, [sp, #16]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	f040 8097 	bne.w	800aaf8 <_dtoa_r+0x8f0>
 800a9ca:	9b05      	ldr	r3, [sp, #20]
 800a9cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f040 8093 	bne.w	800aafc <_dtoa_r+0x8f4>
 800a9d6:	9b05      	ldr	r3, [sp, #20]
 800a9d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a9dc:	0d1b      	lsrs	r3, r3, #20
 800a9de:	051b      	lsls	r3, r3, #20
 800a9e0:	b133      	cbz	r3, 800a9f0 <_dtoa_r+0x7e8>
 800a9e2:	9b00      	ldr	r3, [sp, #0]
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	9300      	str	r3, [sp, #0]
 800a9e8:	9b06      	ldr	r3, [sp, #24]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	9306      	str	r3, [sp, #24]
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	9308      	str	r3, [sp, #32]
 800a9f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	f000 81b8 	beq.w	800ad6a <_dtoa_r+0xb62>
 800a9fa:	6923      	ldr	r3, [r4, #16]
 800a9fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800aa00:	6918      	ldr	r0, [r3, #16]
 800aa02:	f000 ff0f 	bl	800b824 <__hi0bits>
 800aa06:	f1c0 0020 	rsb	r0, r0, #32
 800aa0a:	9b06      	ldr	r3, [sp, #24]
 800aa0c:	4418      	add	r0, r3
 800aa0e:	f010 001f 	ands.w	r0, r0, #31
 800aa12:	f000 8082 	beq.w	800ab1a <_dtoa_r+0x912>
 800aa16:	f1c0 0320 	rsb	r3, r0, #32
 800aa1a:	2b04      	cmp	r3, #4
 800aa1c:	dd73      	ble.n	800ab06 <_dtoa_r+0x8fe>
 800aa1e:	9b00      	ldr	r3, [sp, #0]
 800aa20:	f1c0 001c 	rsb	r0, r0, #28
 800aa24:	4403      	add	r3, r0
 800aa26:	9300      	str	r3, [sp, #0]
 800aa28:	9b06      	ldr	r3, [sp, #24]
 800aa2a:	4403      	add	r3, r0
 800aa2c:	4406      	add	r6, r0
 800aa2e:	9306      	str	r3, [sp, #24]
 800aa30:	9b00      	ldr	r3, [sp, #0]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	dd05      	ble.n	800aa42 <_dtoa_r+0x83a>
 800aa36:	9902      	ldr	r1, [sp, #8]
 800aa38:	461a      	mov	r2, r3
 800aa3a:	4648      	mov	r0, r9
 800aa3c:	f001 f850 	bl	800bae0 <__lshift>
 800aa40:	9002      	str	r0, [sp, #8]
 800aa42:	9b06      	ldr	r3, [sp, #24]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	dd05      	ble.n	800aa54 <_dtoa_r+0x84c>
 800aa48:	4621      	mov	r1, r4
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	4648      	mov	r0, r9
 800aa4e:	f001 f847 	bl	800bae0 <__lshift>
 800aa52:	4604      	mov	r4, r0
 800aa54:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d061      	beq.n	800ab1e <_dtoa_r+0x916>
 800aa5a:	9802      	ldr	r0, [sp, #8]
 800aa5c:	4621      	mov	r1, r4
 800aa5e:	f001 f8ab 	bl	800bbb8 <__mcmp>
 800aa62:	2800      	cmp	r0, #0
 800aa64:	da5b      	bge.n	800ab1e <_dtoa_r+0x916>
 800aa66:	2300      	movs	r3, #0
 800aa68:	9902      	ldr	r1, [sp, #8]
 800aa6a:	220a      	movs	r2, #10
 800aa6c:	4648      	mov	r0, r9
 800aa6e:	f000 fe49 	bl	800b704 <__multadd>
 800aa72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa74:	9002      	str	r0, [sp, #8]
 800aa76:	f107 38ff 	add.w	r8, r7, #4294967295
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	f000 8177 	beq.w	800ad6e <_dtoa_r+0xb66>
 800aa80:	4629      	mov	r1, r5
 800aa82:	2300      	movs	r3, #0
 800aa84:	220a      	movs	r2, #10
 800aa86:	4648      	mov	r0, r9
 800aa88:	f000 fe3c 	bl	800b704 <__multadd>
 800aa8c:	f1bb 0f00 	cmp.w	fp, #0
 800aa90:	4605      	mov	r5, r0
 800aa92:	dc6f      	bgt.n	800ab74 <_dtoa_r+0x96c>
 800aa94:	9b07      	ldr	r3, [sp, #28]
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	dc49      	bgt.n	800ab2e <_dtoa_r+0x926>
 800aa9a:	e06b      	b.n	800ab74 <_dtoa_r+0x96c>
 800aa9c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800aa9e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800aaa2:	e73c      	b.n	800a91e <_dtoa_r+0x716>
 800aaa4:	3fe00000 	.word	0x3fe00000
 800aaa8:	40240000 	.word	0x40240000
 800aaac:	9b03      	ldr	r3, [sp, #12]
 800aaae:	1e5c      	subs	r4, r3, #1
 800aab0:	9b08      	ldr	r3, [sp, #32]
 800aab2:	42a3      	cmp	r3, r4
 800aab4:	db09      	blt.n	800aaca <_dtoa_r+0x8c2>
 800aab6:	1b1c      	subs	r4, r3, r4
 800aab8:	9b03      	ldr	r3, [sp, #12]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	f6bf af30 	bge.w	800a920 <_dtoa_r+0x718>
 800aac0:	9b00      	ldr	r3, [sp, #0]
 800aac2:	9a03      	ldr	r2, [sp, #12]
 800aac4:	1a9e      	subs	r6, r3, r2
 800aac6:	2300      	movs	r3, #0
 800aac8:	e72b      	b.n	800a922 <_dtoa_r+0x71a>
 800aaca:	9b08      	ldr	r3, [sp, #32]
 800aacc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aace:	9408      	str	r4, [sp, #32]
 800aad0:	1ae3      	subs	r3, r4, r3
 800aad2:	441a      	add	r2, r3
 800aad4:	9e00      	ldr	r6, [sp, #0]
 800aad6:	9b03      	ldr	r3, [sp, #12]
 800aad8:	920d      	str	r2, [sp, #52]	@ 0x34
 800aada:	2400      	movs	r4, #0
 800aadc:	e721      	b.n	800a922 <_dtoa_r+0x71a>
 800aade:	9c08      	ldr	r4, [sp, #32]
 800aae0:	9e00      	ldr	r6, [sp, #0]
 800aae2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800aae4:	e728      	b.n	800a938 <_dtoa_r+0x730>
 800aae6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800aaea:	e751      	b.n	800a990 <_dtoa_r+0x788>
 800aaec:	9a08      	ldr	r2, [sp, #32]
 800aaee:	9902      	ldr	r1, [sp, #8]
 800aaf0:	e750      	b.n	800a994 <_dtoa_r+0x78c>
 800aaf2:	f8cd 8008 	str.w	r8, [sp, #8]
 800aaf6:	e751      	b.n	800a99c <_dtoa_r+0x794>
 800aaf8:	2300      	movs	r3, #0
 800aafa:	e779      	b.n	800a9f0 <_dtoa_r+0x7e8>
 800aafc:	9b04      	ldr	r3, [sp, #16]
 800aafe:	e777      	b.n	800a9f0 <_dtoa_r+0x7e8>
 800ab00:	2300      	movs	r3, #0
 800ab02:	9308      	str	r3, [sp, #32]
 800ab04:	e779      	b.n	800a9fa <_dtoa_r+0x7f2>
 800ab06:	d093      	beq.n	800aa30 <_dtoa_r+0x828>
 800ab08:	9a00      	ldr	r2, [sp, #0]
 800ab0a:	331c      	adds	r3, #28
 800ab0c:	441a      	add	r2, r3
 800ab0e:	9200      	str	r2, [sp, #0]
 800ab10:	9a06      	ldr	r2, [sp, #24]
 800ab12:	441a      	add	r2, r3
 800ab14:	441e      	add	r6, r3
 800ab16:	9206      	str	r2, [sp, #24]
 800ab18:	e78a      	b.n	800aa30 <_dtoa_r+0x828>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	e7f4      	b.n	800ab08 <_dtoa_r+0x900>
 800ab1e:	9b03      	ldr	r3, [sp, #12]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	46b8      	mov	r8, r7
 800ab24:	dc20      	bgt.n	800ab68 <_dtoa_r+0x960>
 800ab26:	469b      	mov	fp, r3
 800ab28:	9b07      	ldr	r3, [sp, #28]
 800ab2a:	2b02      	cmp	r3, #2
 800ab2c:	dd1e      	ble.n	800ab6c <_dtoa_r+0x964>
 800ab2e:	f1bb 0f00 	cmp.w	fp, #0
 800ab32:	f47f adb1 	bne.w	800a698 <_dtoa_r+0x490>
 800ab36:	4621      	mov	r1, r4
 800ab38:	465b      	mov	r3, fp
 800ab3a:	2205      	movs	r2, #5
 800ab3c:	4648      	mov	r0, r9
 800ab3e:	f000 fde1 	bl	800b704 <__multadd>
 800ab42:	4601      	mov	r1, r0
 800ab44:	4604      	mov	r4, r0
 800ab46:	9802      	ldr	r0, [sp, #8]
 800ab48:	f001 f836 	bl	800bbb8 <__mcmp>
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	f77f ada3 	ble.w	800a698 <_dtoa_r+0x490>
 800ab52:	4656      	mov	r6, sl
 800ab54:	2331      	movs	r3, #49	@ 0x31
 800ab56:	f806 3b01 	strb.w	r3, [r6], #1
 800ab5a:	f108 0801 	add.w	r8, r8, #1
 800ab5e:	e59f      	b.n	800a6a0 <_dtoa_r+0x498>
 800ab60:	9c03      	ldr	r4, [sp, #12]
 800ab62:	46b8      	mov	r8, r7
 800ab64:	4625      	mov	r5, r4
 800ab66:	e7f4      	b.n	800ab52 <_dtoa_r+0x94a>
 800ab68:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ab6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	f000 8101 	beq.w	800ad76 <_dtoa_r+0xb6e>
 800ab74:	2e00      	cmp	r6, #0
 800ab76:	dd05      	ble.n	800ab84 <_dtoa_r+0x97c>
 800ab78:	4629      	mov	r1, r5
 800ab7a:	4632      	mov	r2, r6
 800ab7c:	4648      	mov	r0, r9
 800ab7e:	f000 ffaf 	bl	800bae0 <__lshift>
 800ab82:	4605      	mov	r5, r0
 800ab84:	9b08      	ldr	r3, [sp, #32]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d05c      	beq.n	800ac44 <_dtoa_r+0xa3c>
 800ab8a:	6869      	ldr	r1, [r5, #4]
 800ab8c:	4648      	mov	r0, r9
 800ab8e:	f000 fd57 	bl	800b640 <_Balloc>
 800ab92:	4606      	mov	r6, r0
 800ab94:	b928      	cbnz	r0, 800aba2 <_dtoa_r+0x99a>
 800ab96:	4b82      	ldr	r3, [pc, #520]	@ (800ada0 <_dtoa_r+0xb98>)
 800ab98:	4602      	mov	r2, r0
 800ab9a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ab9e:	f7ff bb4a 	b.w	800a236 <_dtoa_r+0x2e>
 800aba2:	692a      	ldr	r2, [r5, #16]
 800aba4:	3202      	adds	r2, #2
 800aba6:	0092      	lsls	r2, r2, #2
 800aba8:	f105 010c 	add.w	r1, r5, #12
 800abac:	300c      	adds	r0, #12
 800abae:	f7ff fa68 	bl	800a082 <memcpy>
 800abb2:	2201      	movs	r2, #1
 800abb4:	4631      	mov	r1, r6
 800abb6:	4648      	mov	r0, r9
 800abb8:	f000 ff92 	bl	800bae0 <__lshift>
 800abbc:	f10a 0301 	add.w	r3, sl, #1
 800abc0:	9300      	str	r3, [sp, #0]
 800abc2:	eb0a 030b 	add.w	r3, sl, fp
 800abc6:	9308      	str	r3, [sp, #32]
 800abc8:	9b04      	ldr	r3, [sp, #16]
 800abca:	f003 0301 	and.w	r3, r3, #1
 800abce:	462f      	mov	r7, r5
 800abd0:	9306      	str	r3, [sp, #24]
 800abd2:	4605      	mov	r5, r0
 800abd4:	9b00      	ldr	r3, [sp, #0]
 800abd6:	9802      	ldr	r0, [sp, #8]
 800abd8:	4621      	mov	r1, r4
 800abda:	f103 3bff 	add.w	fp, r3, #4294967295
 800abde:	f7ff fa8b 	bl	800a0f8 <quorem>
 800abe2:	4603      	mov	r3, r0
 800abe4:	3330      	adds	r3, #48	@ 0x30
 800abe6:	9003      	str	r0, [sp, #12]
 800abe8:	4639      	mov	r1, r7
 800abea:	9802      	ldr	r0, [sp, #8]
 800abec:	9309      	str	r3, [sp, #36]	@ 0x24
 800abee:	f000 ffe3 	bl	800bbb8 <__mcmp>
 800abf2:	462a      	mov	r2, r5
 800abf4:	9004      	str	r0, [sp, #16]
 800abf6:	4621      	mov	r1, r4
 800abf8:	4648      	mov	r0, r9
 800abfa:	f000 fff9 	bl	800bbf0 <__mdiff>
 800abfe:	68c2      	ldr	r2, [r0, #12]
 800ac00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac02:	4606      	mov	r6, r0
 800ac04:	bb02      	cbnz	r2, 800ac48 <_dtoa_r+0xa40>
 800ac06:	4601      	mov	r1, r0
 800ac08:	9802      	ldr	r0, [sp, #8]
 800ac0a:	f000 ffd5 	bl	800bbb8 <__mcmp>
 800ac0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac10:	4602      	mov	r2, r0
 800ac12:	4631      	mov	r1, r6
 800ac14:	4648      	mov	r0, r9
 800ac16:	920c      	str	r2, [sp, #48]	@ 0x30
 800ac18:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac1a:	f000 fd51 	bl	800b6c0 <_Bfree>
 800ac1e:	9b07      	ldr	r3, [sp, #28]
 800ac20:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ac22:	9e00      	ldr	r6, [sp, #0]
 800ac24:	ea42 0103 	orr.w	r1, r2, r3
 800ac28:	9b06      	ldr	r3, [sp, #24]
 800ac2a:	4319      	orrs	r1, r3
 800ac2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac2e:	d10d      	bne.n	800ac4c <_dtoa_r+0xa44>
 800ac30:	2b39      	cmp	r3, #57	@ 0x39
 800ac32:	d027      	beq.n	800ac84 <_dtoa_r+0xa7c>
 800ac34:	9a04      	ldr	r2, [sp, #16]
 800ac36:	2a00      	cmp	r2, #0
 800ac38:	dd01      	ble.n	800ac3e <_dtoa_r+0xa36>
 800ac3a:	9b03      	ldr	r3, [sp, #12]
 800ac3c:	3331      	adds	r3, #49	@ 0x31
 800ac3e:	f88b 3000 	strb.w	r3, [fp]
 800ac42:	e52e      	b.n	800a6a2 <_dtoa_r+0x49a>
 800ac44:	4628      	mov	r0, r5
 800ac46:	e7b9      	b.n	800abbc <_dtoa_r+0x9b4>
 800ac48:	2201      	movs	r2, #1
 800ac4a:	e7e2      	b.n	800ac12 <_dtoa_r+0xa0a>
 800ac4c:	9904      	ldr	r1, [sp, #16]
 800ac4e:	2900      	cmp	r1, #0
 800ac50:	db04      	blt.n	800ac5c <_dtoa_r+0xa54>
 800ac52:	9807      	ldr	r0, [sp, #28]
 800ac54:	4301      	orrs	r1, r0
 800ac56:	9806      	ldr	r0, [sp, #24]
 800ac58:	4301      	orrs	r1, r0
 800ac5a:	d120      	bne.n	800ac9e <_dtoa_r+0xa96>
 800ac5c:	2a00      	cmp	r2, #0
 800ac5e:	ddee      	ble.n	800ac3e <_dtoa_r+0xa36>
 800ac60:	9902      	ldr	r1, [sp, #8]
 800ac62:	9300      	str	r3, [sp, #0]
 800ac64:	2201      	movs	r2, #1
 800ac66:	4648      	mov	r0, r9
 800ac68:	f000 ff3a 	bl	800bae0 <__lshift>
 800ac6c:	4621      	mov	r1, r4
 800ac6e:	9002      	str	r0, [sp, #8]
 800ac70:	f000 ffa2 	bl	800bbb8 <__mcmp>
 800ac74:	2800      	cmp	r0, #0
 800ac76:	9b00      	ldr	r3, [sp, #0]
 800ac78:	dc02      	bgt.n	800ac80 <_dtoa_r+0xa78>
 800ac7a:	d1e0      	bne.n	800ac3e <_dtoa_r+0xa36>
 800ac7c:	07da      	lsls	r2, r3, #31
 800ac7e:	d5de      	bpl.n	800ac3e <_dtoa_r+0xa36>
 800ac80:	2b39      	cmp	r3, #57	@ 0x39
 800ac82:	d1da      	bne.n	800ac3a <_dtoa_r+0xa32>
 800ac84:	2339      	movs	r3, #57	@ 0x39
 800ac86:	f88b 3000 	strb.w	r3, [fp]
 800ac8a:	4633      	mov	r3, r6
 800ac8c:	461e      	mov	r6, r3
 800ac8e:	3b01      	subs	r3, #1
 800ac90:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ac94:	2a39      	cmp	r2, #57	@ 0x39
 800ac96:	d04e      	beq.n	800ad36 <_dtoa_r+0xb2e>
 800ac98:	3201      	adds	r2, #1
 800ac9a:	701a      	strb	r2, [r3, #0]
 800ac9c:	e501      	b.n	800a6a2 <_dtoa_r+0x49a>
 800ac9e:	2a00      	cmp	r2, #0
 800aca0:	dd03      	ble.n	800acaa <_dtoa_r+0xaa2>
 800aca2:	2b39      	cmp	r3, #57	@ 0x39
 800aca4:	d0ee      	beq.n	800ac84 <_dtoa_r+0xa7c>
 800aca6:	3301      	adds	r3, #1
 800aca8:	e7c9      	b.n	800ac3e <_dtoa_r+0xa36>
 800acaa:	9a00      	ldr	r2, [sp, #0]
 800acac:	9908      	ldr	r1, [sp, #32]
 800acae:	f802 3c01 	strb.w	r3, [r2, #-1]
 800acb2:	428a      	cmp	r2, r1
 800acb4:	d028      	beq.n	800ad08 <_dtoa_r+0xb00>
 800acb6:	9902      	ldr	r1, [sp, #8]
 800acb8:	2300      	movs	r3, #0
 800acba:	220a      	movs	r2, #10
 800acbc:	4648      	mov	r0, r9
 800acbe:	f000 fd21 	bl	800b704 <__multadd>
 800acc2:	42af      	cmp	r7, r5
 800acc4:	9002      	str	r0, [sp, #8]
 800acc6:	f04f 0300 	mov.w	r3, #0
 800acca:	f04f 020a 	mov.w	r2, #10
 800acce:	4639      	mov	r1, r7
 800acd0:	4648      	mov	r0, r9
 800acd2:	d107      	bne.n	800ace4 <_dtoa_r+0xadc>
 800acd4:	f000 fd16 	bl	800b704 <__multadd>
 800acd8:	4607      	mov	r7, r0
 800acda:	4605      	mov	r5, r0
 800acdc:	9b00      	ldr	r3, [sp, #0]
 800acde:	3301      	adds	r3, #1
 800ace0:	9300      	str	r3, [sp, #0]
 800ace2:	e777      	b.n	800abd4 <_dtoa_r+0x9cc>
 800ace4:	f000 fd0e 	bl	800b704 <__multadd>
 800ace8:	4629      	mov	r1, r5
 800acea:	4607      	mov	r7, r0
 800acec:	2300      	movs	r3, #0
 800acee:	220a      	movs	r2, #10
 800acf0:	4648      	mov	r0, r9
 800acf2:	f000 fd07 	bl	800b704 <__multadd>
 800acf6:	4605      	mov	r5, r0
 800acf8:	e7f0      	b.n	800acdc <_dtoa_r+0xad4>
 800acfa:	f1bb 0f00 	cmp.w	fp, #0
 800acfe:	bfcc      	ite	gt
 800ad00:	465e      	movgt	r6, fp
 800ad02:	2601      	movle	r6, #1
 800ad04:	4456      	add	r6, sl
 800ad06:	2700      	movs	r7, #0
 800ad08:	9902      	ldr	r1, [sp, #8]
 800ad0a:	9300      	str	r3, [sp, #0]
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	4648      	mov	r0, r9
 800ad10:	f000 fee6 	bl	800bae0 <__lshift>
 800ad14:	4621      	mov	r1, r4
 800ad16:	9002      	str	r0, [sp, #8]
 800ad18:	f000 ff4e 	bl	800bbb8 <__mcmp>
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	dcb4      	bgt.n	800ac8a <_dtoa_r+0xa82>
 800ad20:	d102      	bne.n	800ad28 <_dtoa_r+0xb20>
 800ad22:	9b00      	ldr	r3, [sp, #0]
 800ad24:	07db      	lsls	r3, r3, #31
 800ad26:	d4b0      	bmi.n	800ac8a <_dtoa_r+0xa82>
 800ad28:	4633      	mov	r3, r6
 800ad2a:	461e      	mov	r6, r3
 800ad2c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad30:	2a30      	cmp	r2, #48	@ 0x30
 800ad32:	d0fa      	beq.n	800ad2a <_dtoa_r+0xb22>
 800ad34:	e4b5      	b.n	800a6a2 <_dtoa_r+0x49a>
 800ad36:	459a      	cmp	sl, r3
 800ad38:	d1a8      	bne.n	800ac8c <_dtoa_r+0xa84>
 800ad3a:	2331      	movs	r3, #49	@ 0x31
 800ad3c:	f108 0801 	add.w	r8, r8, #1
 800ad40:	f88a 3000 	strb.w	r3, [sl]
 800ad44:	e4ad      	b.n	800a6a2 <_dtoa_r+0x49a>
 800ad46:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ad48:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ada4 <_dtoa_r+0xb9c>
 800ad4c:	b11b      	cbz	r3, 800ad56 <_dtoa_r+0xb4e>
 800ad4e:	f10a 0308 	add.w	r3, sl, #8
 800ad52:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ad54:	6013      	str	r3, [r2, #0]
 800ad56:	4650      	mov	r0, sl
 800ad58:	b017      	add	sp, #92	@ 0x5c
 800ad5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad5e:	9b07      	ldr	r3, [sp, #28]
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	f77f ae2e 	ble.w	800a9c2 <_dtoa_r+0x7ba>
 800ad66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad68:	9308      	str	r3, [sp, #32]
 800ad6a:	2001      	movs	r0, #1
 800ad6c:	e64d      	b.n	800aa0a <_dtoa_r+0x802>
 800ad6e:	f1bb 0f00 	cmp.w	fp, #0
 800ad72:	f77f aed9 	ble.w	800ab28 <_dtoa_r+0x920>
 800ad76:	4656      	mov	r6, sl
 800ad78:	9802      	ldr	r0, [sp, #8]
 800ad7a:	4621      	mov	r1, r4
 800ad7c:	f7ff f9bc 	bl	800a0f8 <quorem>
 800ad80:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ad84:	f806 3b01 	strb.w	r3, [r6], #1
 800ad88:	eba6 020a 	sub.w	r2, r6, sl
 800ad8c:	4593      	cmp	fp, r2
 800ad8e:	ddb4      	ble.n	800acfa <_dtoa_r+0xaf2>
 800ad90:	9902      	ldr	r1, [sp, #8]
 800ad92:	2300      	movs	r3, #0
 800ad94:	220a      	movs	r2, #10
 800ad96:	4648      	mov	r0, r9
 800ad98:	f000 fcb4 	bl	800b704 <__multadd>
 800ad9c:	9002      	str	r0, [sp, #8]
 800ad9e:	e7eb      	b.n	800ad78 <_dtoa_r+0xb70>
 800ada0:	0800cfed 	.word	0x0800cfed
 800ada4:	0800cf88 	.word	0x0800cf88

0800ada8 <_free_r>:
 800ada8:	b538      	push	{r3, r4, r5, lr}
 800adaa:	4605      	mov	r5, r0
 800adac:	2900      	cmp	r1, #0
 800adae:	d041      	beq.n	800ae34 <_free_r+0x8c>
 800adb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adb4:	1f0c      	subs	r4, r1, #4
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	bfb8      	it	lt
 800adba:	18e4      	addlt	r4, r4, r3
 800adbc:	f000 fc34 	bl	800b628 <__malloc_lock>
 800adc0:	4a1d      	ldr	r2, [pc, #116]	@ (800ae38 <_free_r+0x90>)
 800adc2:	6813      	ldr	r3, [r2, #0]
 800adc4:	b933      	cbnz	r3, 800add4 <_free_r+0x2c>
 800adc6:	6063      	str	r3, [r4, #4]
 800adc8:	6014      	str	r4, [r2, #0]
 800adca:	4628      	mov	r0, r5
 800adcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800add0:	f000 bc30 	b.w	800b634 <__malloc_unlock>
 800add4:	42a3      	cmp	r3, r4
 800add6:	d908      	bls.n	800adea <_free_r+0x42>
 800add8:	6820      	ldr	r0, [r4, #0]
 800adda:	1821      	adds	r1, r4, r0
 800addc:	428b      	cmp	r3, r1
 800adde:	bf01      	itttt	eq
 800ade0:	6819      	ldreq	r1, [r3, #0]
 800ade2:	685b      	ldreq	r3, [r3, #4]
 800ade4:	1809      	addeq	r1, r1, r0
 800ade6:	6021      	streq	r1, [r4, #0]
 800ade8:	e7ed      	b.n	800adc6 <_free_r+0x1e>
 800adea:	461a      	mov	r2, r3
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	b10b      	cbz	r3, 800adf4 <_free_r+0x4c>
 800adf0:	42a3      	cmp	r3, r4
 800adf2:	d9fa      	bls.n	800adea <_free_r+0x42>
 800adf4:	6811      	ldr	r1, [r2, #0]
 800adf6:	1850      	adds	r0, r2, r1
 800adf8:	42a0      	cmp	r0, r4
 800adfa:	d10b      	bne.n	800ae14 <_free_r+0x6c>
 800adfc:	6820      	ldr	r0, [r4, #0]
 800adfe:	4401      	add	r1, r0
 800ae00:	1850      	adds	r0, r2, r1
 800ae02:	4283      	cmp	r3, r0
 800ae04:	6011      	str	r1, [r2, #0]
 800ae06:	d1e0      	bne.n	800adca <_free_r+0x22>
 800ae08:	6818      	ldr	r0, [r3, #0]
 800ae0a:	685b      	ldr	r3, [r3, #4]
 800ae0c:	6053      	str	r3, [r2, #4]
 800ae0e:	4408      	add	r0, r1
 800ae10:	6010      	str	r0, [r2, #0]
 800ae12:	e7da      	b.n	800adca <_free_r+0x22>
 800ae14:	d902      	bls.n	800ae1c <_free_r+0x74>
 800ae16:	230c      	movs	r3, #12
 800ae18:	602b      	str	r3, [r5, #0]
 800ae1a:	e7d6      	b.n	800adca <_free_r+0x22>
 800ae1c:	6820      	ldr	r0, [r4, #0]
 800ae1e:	1821      	adds	r1, r4, r0
 800ae20:	428b      	cmp	r3, r1
 800ae22:	bf04      	itt	eq
 800ae24:	6819      	ldreq	r1, [r3, #0]
 800ae26:	685b      	ldreq	r3, [r3, #4]
 800ae28:	6063      	str	r3, [r4, #4]
 800ae2a:	bf04      	itt	eq
 800ae2c:	1809      	addeq	r1, r1, r0
 800ae2e:	6021      	streq	r1, [r4, #0]
 800ae30:	6054      	str	r4, [r2, #4]
 800ae32:	e7ca      	b.n	800adca <_free_r+0x22>
 800ae34:	bd38      	pop	{r3, r4, r5, pc}
 800ae36:	bf00      	nop
 800ae38:	200008d0 	.word	0x200008d0

0800ae3c <rshift>:
 800ae3c:	6903      	ldr	r3, [r0, #16]
 800ae3e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ae42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae46:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ae4a:	f100 0414 	add.w	r4, r0, #20
 800ae4e:	dd45      	ble.n	800aedc <rshift+0xa0>
 800ae50:	f011 011f 	ands.w	r1, r1, #31
 800ae54:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ae58:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ae5c:	d10c      	bne.n	800ae78 <rshift+0x3c>
 800ae5e:	f100 0710 	add.w	r7, r0, #16
 800ae62:	4629      	mov	r1, r5
 800ae64:	42b1      	cmp	r1, r6
 800ae66:	d334      	bcc.n	800aed2 <rshift+0x96>
 800ae68:	1a9b      	subs	r3, r3, r2
 800ae6a:	009b      	lsls	r3, r3, #2
 800ae6c:	1eea      	subs	r2, r5, #3
 800ae6e:	4296      	cmp	r6, r2
 800ae70:	bf38      	it	cc
 800ae72:	2300      	movcc	r3, #0
 800ae74:	4423      	add	r3, r4
 800ae76:	e015      	b.n	800aea4 <rshift+0x68>
 800ae78:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ae7c:	f1c1 0820 	rsb	r8, r1, #32
 800ae80:	40cf      	lsrs	r7, r1
 800ae82:	f105 0e04 	add.w	lr, r5, #4
 800ae86:	46a1      	mov	r9, r4
 800ae88:	4576      	cmp	r6, lr
 800ae8a:	46f4      	mov	ip, lr
 800ae8c:	d815      	bhi.n	800aeba <rshift+0x7e>
 800ae8e:	1a9a      	subs	r2, r3, r2
 800ae90:	0092      	lsls	r2, r2, #2
 800ae92:	3a04      	subs	r2, #4
 800ae94:	3501      	adds	r5, #1
 800ae96:	42ae      	cmp	r6, r5
 800ae98:	bf38      	it	cc
 800ae9a:	2200      	movcc	r2, #0
 800ae9c:	18a3      	adds	r3, r4, r2
 800ae9e:	50a7      	str	r7, [r4, r2]
 800aea0:	b107      	cbz	r7, 800aea4 <rshift+0x68>
 800aea2:	3304      	adds	r3, #4
 800aea4:	1b1a      	subs	r2, r3, r4
 800aea6:	42a3      	cmp	r3, r4
 800aea8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800aeac:	bf08      	it	eq
 800aeae:	2300      	moveq	r3, #0
 800aeb0:	6102      	str	r2, [r0, #16]
 800aeb2:	bf08      	it	eq
 800aeb4:	6143      	streq	r3, [r0, #20]
 800aeb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aeba:	f8dc c000 	ldr.w	ip, [ip]
 800aebe:	fa0c fc08 	lsl.w	ip, ip, r8
 800aec2:	ea4c 0707 	orr.w	r7, ip, r7
 800aec6:	f849 7b04 	str.w	r7, [r9], #4
 800aeca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aece:	40cf      	lsrs	r7, r1
 800aed0:	e7da      	b.n	800ae88 <rshift+0x4c>
 800aed2:	f851 cb04 	ldr.w	ip, [r1], #4
 800aed6:	f847 cf04 	str.w	ip, [r7, #4]!
 800aeda:	e7c3      	b.n	800ae64 <rshift+0x28>
 800aedc:	4623      	mov	r3, r4
 800aede:	e7e1      	b.n	800aea4 <rshift+0x68>

0800aee0 <__hexdig_fun>:
 800aee0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800aee4:	2b09      	cmp	r3, #9
 800aee6:	d802      	bhi.n	800aeee <__hexdig_fun+0xe>
 800aee8:	3820      	subs	r0, #32
 800aeea:	b2c0      	uxtb	r0, r0
 800aeec:	4770      	bx	lr
 800aeee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800aef2:	2b05      	cmp	r3, #5
 800aef4:	d801      	bhi.n	800aefa <__hexdig_fun+0x1a>
 800aef6:	3847      	subs	r0, #71	@ 0x47
 800aef8:	e7f7      	b.n	800aeea <__hexdig_fun+0xa>
 800aefa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800aefe:	2b05      	cmp	r3, #5
 800af00:	d801      	bhi.n	800af06 <__hexdig_fun+0x26>
 800af02:	3827      	subs	r0, #39	@ 0x27
 800af04:	e7f1      	b.n	800aeea <__hexdig_fun+0xa>
 800af06:	2000      	movs	r0, #0
 800af08:	4770      	bx	lr
	...

0800af0c <__gethex>:
 800af0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af10:	b085      	sub	sp, #20
 800af12:	468a      	mov	sl, r1
 800af14:	9302      	str	r3, [sp, #8]
 800af16:	680b      	ldr	r3, [r1, #0]
 800af18:	9001      	str	r0, [sp, #4]
 800af1a:	4690      	mov	r8, r2
 800af1c:	1c9c      	adds	r4, r3, #2
 800af1e:	46a1      	mov	r9, r4
 800af20:	f814 0b01 	ldrb.w	r0, [r4], #1
 800af24:	2830      	cmp	r0, #48	@ 0x30
 800af26:	d0fa      	beq.n	800af1e <__gethex+0x12>
 800af28:	eba9 0303 	sub.w	r3, r9, r3
 800af2c:	f1a3 0b02 	sub.w	fp, r3, #2
 800af30:	f7ff ffd6 	bl	800aee0 <__hexdig_fun>
 800af34:	4605      	mov	r5, r0
 800af36:	2800      	cmp	r0, #0
 800af38:	d168      	bne.n	800b00c <__gethex+0x100>
 800af3a:	49a0      	ldr	r1, [pc, #640]	@ (800b1bc <__gethex+0x2b0>)
 800af3c:	2201      	movs	r2, #1
 800af3e:	4648      	mov	r0, r9
 800af40:	f7fe ffa7 	bl	8009e92 <strncmp>
 800af44:	4607      	mov	r7, r0
 800af46:	2800      	cmp	r0, #0
 800af48:	d167      	bne.n	800b01a <__gethex+0x10e>
 800af4a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800af4e:	4626      	mov	r6, r4
 800af50:	f7ff ffc6 	bl	800aee0 <__hexdig_fun>
 800af54:	2800      	cmp	r0, #0
 800af56:	d062      	beq.n	800b01e <__gethex+0x112>
 800af58:	4623      	mov	r3, r4
 800af5a:	7818      	ldrb	r0, [r3, #0]
 800af5c:	2830      	cmp	r0, #48	@ 0x30
 800af5e:	4699      	mov	r9, r3
 800af60:	f103 0301 	add.w	r3, r3, #1
 800af64:	d0f9      	beq.n	800af5a <__gethex+0x4e>
 800af66:	f7ff ffbb 	bl	800aee0 <__hexdig_fun>
 800af6a:	fab0 f580 	clz	r5, r0
 800af6e:	096d      	lsrs	r5, r5, #5
 800af70:	f04f 0b01 	mov.w	fp, #1
 800af74:	464a      	mov	r2, r9
 800af76:	4616      	mov	r6, r2
 800af78:	3201      	adds	r2, #1
 800af7a:	7830      	ldrb	r0, [r6, #0]
 800af7c:	f7ff ffb0 	bl	800aee0 <__hexdig_fun>
 800af80:	2800      	cmp	r0, #0
 800af82:	d1f8      	bne.n	800af76 <__gethex+0x6a>
 800af84:	498d      	ldr	r1, [pc, #564]	@ (800b1bc <__gethex+0x2b0>)
 800af86:	2201      	movs	r2, #1
 800af88:	4630      	mov	r0, r6
 800af8a:	f7fe ff82 	bl	8009e92 <strncmp>
 800af8e:	2800      	cmp	r0, #0
 800af90:	d13f      	bne.n	800b012 <__gethex+0x106>
 800af92:	b944      	cbnz	r4, 800afa6 <__gethex+0x9a>
 800af94:	1c74      	adds	r4, r6, #1
 800af96:	4622      	mov	r2, r4
 800af98:	4616      	mov	r6, r2
 800af9a:	3201      	adds	r2, #1
 800af9c:	7830      	ldrb	r0, [r6, #0]
 800af9e:	f7ff ff9f 	bl	800aee0 <__hexdig_fun>
 800afa2:	2800      	cmp	r0, #0
 800afa4:	d1f8      	bne.n	800af98 <__gethex+0x8c>
 800afa6:	1ba4      	subs	r4, r4, r6
 800afa8:	00a7      	lsls	r7, r4, #2
 800afaa:	7833      	ldrb	r3, [r6, #0]
 800afac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800afb0:	2b50      	cmp	r3, #80	@ 0x50
 800afb2:	d13e      	bne.n	800b032 <__gethex+0x126>
 800afb4:	7873      	ldrb	r3, [r6, #1]
 800afb6:	2b2b      	cmp	r3, #43	@ 0x2b
 800afb8:	d033      	beq.n	800b022 <__gethex+0x116>
 800afba:	2b2d      	cmp	r3, #45	@ 0x2d
 800afbc:	d034      	beq.n	800b028 <__gethex+0x11c>
 800afbe:	1c71      	adds	r1, r6, #1
 800afc0:	2400      	movs	r4, #0
 800afc2:	7808      	ldrb	r0, [r1, #0]
 800afc4:	f7ff ff8c 	bl	800aee0 <__hexdig_fun>
 800afc8:	1e43      	subs	r3, r0, #1
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	2b18      	cmp	r3, #24
 800afce:	d830      	bhi.n	800b032 <__gethex+0x126>
 800afd0:	f1a0 0210 	sub.w	r2, r0, #16
 800afd4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800afd8:	f7ff ff82 	bl	800aee0 <__hexdig_fun>
 800afdc:	f100 3cff 	add.w	ip, r0, #4294967295
 800afe0:	fa5f fc8c 	uxtb.w	ip, ip
 800afe4:	f1bc 0f18 	cmp.w	ip, #24
 800afe8:	f04f 030a 	mov.w	r3, #10
 800afec:	d91e      	bls.n	800b02c <__gethex+0x120>
 800afee:	b104      	cbz	r4, 800aff2 <__gethex+0xe6>
 800aff0:	4252      	negs	r2, r2
 800aff2:	4417      	add	r7, r2
 800aff4:	f8ca 1000 	str.w	r1, [sl]
 800aff8:	b1ed      	cbz	r5, 800b036 <__gethex+0x12a>
 800affa:	f1bb 0f00 	cmp.w	fp, #0
 800affe:	bf0c      	ite	eq
 800b000:	2506      	moveq	r5, #6
 800b002:	2500      	movne	r5, #0
 800b004:	4628      	mov	r0, r5
 800b006:	b005      	add	sp, #20
 800b008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b00c:	2500      	movs	r5, #0
 800b00e:	462c      	mov	r4, r5
 800b010:	e7b0      	b.n	800af74 <__gethex+0x68>
 800b012:	2c00      	cmp	r4, #0
 800b014:	d1c7      	bne.n	800afa6 <__gethex+0x9a>
 800b016:	4627      	mov	r7, r4
 800b018:	e7c7      	b.n	800afaa <__gethex+0x9e>
 800b01a:	464e      	mov	r6, r9
 800b01c:	462f      	mov	r7, r5
 800b01e:	2501      	movs	r5, #1
 800b020:	e7c3      	b.n	800afaa <__gethex+0x9e>
 800b022:	2400      	movs	r4, #0
 800b024:	1cb1      	adds	r1, r6, #2
 800b026:	e7cc      	b.n	800afc2 <__gethex+0xb6>
 800b028:	2401      	movs	r4, #1
 800b02a:	e7fb      	b.n	800b024 <__gethex+0x118>
 800b02c:	fb03 0002 	mla	r0, r3, r2, r0
 800b030:	e7ce      	b.n	800afd0 <__gethex+0xc4>
 800b032:	4631      	mov	r1, r6
 800b034:	e7de      	b.n	800aff4 <__gethex+0xe8>
 800b036:	eba6 0309 	sub.w	r3, r6, r9
 800b03a:	3b01      	subs	r3, #1
 800b03c:	4629      	mov	r1, r5
 800b03e:	2b07      	cmp	r3, #7
 800b040:	dc0a      	bgt.n	800b058 <__gethex+0x14c>
 800b042:	9801      	ldr	r0, [sp, #4]
 800b044:	f000 fafc 	bl	800b640 <_Balloc>
 800b048:	4604      	mov	r4, r0
 800b04a:	b940      	cbnz	r0, 800b05e <__gethex+0x152>
 800b04c:	4b5c      	ldr	r3, [pc, #368]	@ (800b1c0 <__gethex+0x2b4>)
 800b04e:	4602      	mov	r2, r0
 800b050:	21e4      	movs	r1, #228	@ 0xe4
 800b052:	485c      	ldr	r0, [pc, #368]	@ (800b1c4 <__gethex+0x2b8>)
 800b054:	f7ff f832 	bl	800a0bc <__assert_func>
 800b058:	3101      	adds	r1, #1
 800b05a:	105b      	asrs	r3, r3, #1
 800b05c:	e7ef      	b.n	800b03e <__gethex+0x132>
 800b05e:	f100 0a14 	add.w	sl, r0, #20
 800b062:	2300      	movs	r3, #0
 800b064:	4655      	mov	r5, sl
 800b066:	469b      	mov	fp, r3
 800b068:	45b1      	cmp	r9, r6
 800b06a:	d337      	bcc.n	800b0dc <__gethex+0x1d0>
 800b06c:	f845 bb04 	str.w	fp, [r5], #4
 800b070:	eba5 050a 	sub.w	r5, r5, sl
 800b074:	10ad      	asrs	r5, r5, #2
 800b076:	6125      	str	r5, [r4, #16]
 800b078:	4658      	mov	r0, fp
 800b07a:	f000 fbd3 	bl	800b824 <__hi0bits>
 800b07e:	016d      	lsls	r5, r5, #5
 800b080:	f8d8 6000 	ldr.w	r6, [r8]
 800b084:	1a2d      	subs	r5, r5, r0
 800b086:	42b5      	cmp	r5, r6
 800b088:	dd54      	ble.n	800b134 <__gethex+0x228>
 800b08a:	1bad      	subs	r5, r5, r6
 800b08c:	4629      	mov	r1, r5
 800b08e:	4620      	mov	r0, r4
 800b090:	f000 ff5f 	bl	800bf52 <__any_on>
 800b094:	4681      	mov	r9, r0
 800b096:	b178      	cbz	r0, 800b0b8 <__gethex+0x1ac>
 800b098:	1e6b      	subs	r3, r5, #1
 800b09a:	1159      	asrs	r1, r3, #5
 800b09c:	f003 021f 	and.w	r2, r3, #31
 800b0a0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b0a4:	f04f 0901 	mov.w	r9, #1
 800b0a8:	fa09 f202 	lsl.w	r2, r9, r2
 800b0ac:	420a      	tst	r2, r1
 800b0ae:	d003      	beq.n	800b0b8 <__gethex+0x1ac>
 800b0b0:	454b      	cmp	r3, r9
 800b0b2:	dc36      	bgt.n	800b122 <__gethex+0x216>
 800b0b4:	f04f 0902 	mov.w	r9, #2
 800b0b8:	4629      	mov	r1, r5
 800b0ba:	4620      	mov	r0, r4
 800b0bc:	f7ff febe 	bl	800ae3c <rshift>
 800b0c0:	442f      	add	r7, r5
 800b0c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b0c6:	42bb      	cmp	r3, r7
 800b0c8:	da42      	bge.n	800b150 <__gethex+0x244>
 800b0ca:	9801      	ldr	r0, [sp, #4]
 800b0cc:	4621      	mov	r1, r4
 800b0ce:	f000 faf7 	bl	800b6c0 <_Bfree>
 800b0d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	6013      	str	r3, [r2, #0]
 800b0d8:	25a3      	movs	r5, #163	@ 0xa3
 800b0da:	e793      	b.n	800b004 <__gethex+0xf8>
 800b0dc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b0e0:	2a2e      	cmp	r2, #46	@ 0x2e
 800b0e2:	d012      	beq.n	800b10a <__gethex+0x1fe>
 800b0e4:	2b20      	cmp	r3, #32
 800b0e6:	d104      	bne.n	800b0f2 <__gethex+0x1e6>
 800b0e8:	f845 bb04 	str.w	fp, [r5], #4
 800b0ec:	f04f 0b00 	mov.w	fp, #0
 800b0f0:	465b      	mov	r3, fp
 800b0f2:	7830      	ldrb	r0, [r6, #0]
 800b0f4:	9303      	str	r3, [sp, #12]
 800b0f6:	f7ff fef3 	bl	800aee0 <__hexdig_fun>
 800b0fa:	9b03      	ldr	r3, [sp, #12]
 800b0fc:	f000 000f 	and.w	r0, r0, #15
 800b100:	4098      	lsls	r0, r3
 800b102:	ea4b 0b00 	orr.w	fp, fp, r0
 800b106:	3304      	adds	r3, #4
 800b108:	e7ae      	b.n	800b068 <__gethex+0x15c>
 800b10a:	45b1      	cmp	r9, r6
 800b10c:	d8ea      	bhi.n	800b0e4 <__gethex+0x1d8>
 800b10e:	492b      	ldr	r1, [pc, #172]	@ (800b1bc <__gethex+0x2b0>)
 800b110:	9303      	str	r3, [sp, #12]
 800b112:	2201      	movs	r2, #1
 800b114:	4630      	mov	r0, r6
 800b116:	f7fe febc 	bl	8009e92 <strncmp>
 800b11a:	9b03      	ldr	r3, [sp, #12]
 800b11c:	2800      	cmp	r0, #0
 800b11e:	d1e1      	bne.n	800b0e4 <__gethex+0x1d8>
 800b120:	e7a2      	b.n	800b068 <__gethex+0x15c>
 800b122:	1ea9      	subs	r1, r5, #2
 800b124:	4620      	mov	r0, r4
 800b126:	f000 ff14 	bl	800bf52 <__any_on>
 800b12a:	2800      	cmp	r0, #0
 800b12c:	d0c2      	beq.n	800b0b4 <__gethex+0x1a8>
 800b12e:	f04f 0903 	mov.w	r9, #3
 800b132:	e7c1      	b.n	800b0b8 <__gethex+0x1ac>
 800b134:	da09      	bge.n	800b14a <__gethex+0x23e>
 800b136:	1b75      	subs	r5, r6, r5
 800b138:	4621      	mov	r1, r4
 800b13a:	9801      	ldr	r0, [sp, #4]
 800b13c:	462a      	mov	r2, r5
 800b13e:	f000 fccf 	bl	800bae0 <__lshift>
 800b142:	1b7f      	subs	r7, r7, r5
 800b144:	4604      	mov	r4, r0
 800b146:	f100 0a14 	add.w	sl, r0, #20
 800b14a:	f04f 0900 	mov.w	r9, #0
 800b14e:	e7b8      	b.n	800b0c2 <__gethex+0x1b6>
 800b150:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b154:	42bd      	cmp	r5, r7
 800b156:	dd6f      	ble.n	800b238 <__gethex+0x32c>
 800b158:	1bed      	subs	r5, r5, r7
 800b15a:	42ae      	cmp	r6, r5
 800b15c:	dc34      	bgt.n	800b1c8 <__gethex+0x2bc>
 800b15e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b162:	2b02      	cmp	r3, #2
 800b164:	d022      	beq.n	800b1ac <__gethex+0x2a0>
 800b166:	2b03      	cmp	r3, #3
 800b168:	d024      	beq.n	800b1b4 <__gethex+0x2a8>
 800b16a:	2b01      	cmp	r3, #1
 800b16c:	d115      	bne.n	800b19a <__gethex+0x28e>
 800b16e:	42ae      	cmp	r6, r5
 800b170:	d113      	bne.n	800b19a <__gethex+0x28e>
 800b172:	2e01      	cmp	r6, #1
 800b174:	d10b      	bne.n	800b18e <__gethex+0x282>
 800b176:	9a02      	ldr	r2, [sp, #8]
 800b178:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b17c:	6013      	str	r3, [r2, #0]
 800b17e:	2301      	movs	r3, #1
 800b180:	6123      	str	r3, [r4, #16]
 800b182:	f8ca 3000 	str.w	r3, [sl]
 800b186:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b188:	2562      	movs	r5, #98	@ 0x62
 800b18a:	601c      	str	r4, [r3, #0]
 800b18c:	e73a      	b.n	800b004 <__gethex+0xf8>
 800b18e:	1e71      	subs	r1, r6, #1
 800b190:	4620      	mov	r0, r4
 800b192:	f000 fede 	bl	800bf52 <__any_on>
 800b196:	2800      	cmp	r0, #0
 800b198:	d1ed      	bne.n	800b176 <__gethex+0x26a>
 800b19a:	9801      	ldr	r0, [sp, #4]
 800b19c:	4621      	mov	r1, r4
 800b19e:	f000 fa8f 	bl	800b6c0 <_Bfree>
 800b1a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	6013      	str	r3, [r2, #0]
 800b1a8:	2550      	movs	r5, #80	@ 0x50
 800b1aa:	e72b      	b.n	800b004 <__gethex+0xf8>
 800b1ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d1f3      	bne.n	800b19a <__gethex+0x28e>
 800b1b2:	e7e0      	b.n	800b176 <__gethex+0x26a>
 800b1b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d1dd      	bne.n	800b176 <__gethex+0x26a>
 800b1ba:	e7ee      	b.n	800b19a <__gethex+0x28e>
 800b1bc:	0800ce98 	.word	0x0800ce98
 800b1c0:	0800cfed 	.word	0x0800cfed
 800b1c4:	0800cffe 	.word	0x0800cffe
 800b1c8:	1e6f      	subs	r7, r5, #1
 800b1ca:	f1b9 0f00 	cmp.w	r9, #0
 800b1ce:	d130      	bne.n	800b232 <__gethex+0x326>
 800b1d0:	b127      	cbz	r7, 800b1dc <__gethex+0x2d0>
 800b1d2:	4639      	mov	r1, r7
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	f000 febc 	bl	800bf52 <__any_on>
 800b1da:	4681      	mov	r9, r0
 800b1dc:	117a      	asrs	r2, r7, #5
 800b1de:	2301      	movs	r3, #1
 800b1e0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b1e4:	f007 071f 	and.w	r7, r7, #31
 800b1e8:	40bb      	lsls	r3, r7
 800b1ea:	4213      	tst	r3, r2
 800b1ec:	4629      	mov	r1, r5
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	bf18      	it	ne
 800b1f2:	f049 0902 	orrne.w	r9, r9, #2
 800b1f6:	f7ff fe21 	bl	800ae3c <rshift>
 800b1fa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b1fe:	1b76      	subs	r6, r6, r5
 800b200:	2502      	movs	r5, #2
 800b202:	f1b9 0f00 	cmp.w	r9, #0
 800b206:	d047      	beq.n	800b298 <__gethex+0x38c>
 800b208:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b20c:	2b02      	cmp	r3, #2
 800b20e:	d015      	beq.n	800b23c <__gethex+0x330>
 800b210:	2b03      	cmp	r3, #3
 800b212:	d017      	beq.n	800b244 <__gethex+0x338>
 800b214:	2b01      	cmp	r3, #1
 800b216:	d109      	bne.n	800b22c <__gethex+0x320>
 800b218:	f019 0f02 	tst.w	r9, #2
 800b21c:	d006      	beq.n	800b22c <__gethex+0x320>
 800b21e:	f8da 3000 	ldr.w	r3, [sl]
 800b222:	ea49 0903 	orr.w	r9, r9, r3
 800b226:	f019 0f01 	tst.w	r9, #1
 800b22a:	d10e      	bne.n	800b24a <__gethex+0x33e>
 800b22c:	f045 0510 	orr.w	r5, r5, #16
 800b230:	e032      	b.n	800b298 <__gethex+0x38c>
 800b232:	f04f 0901 	mov.w	r9, #1
 800b236:	e7d1      	b.n	800b1dc <__gethex+0x2d0>
 800b238:	2501      	movs	r5, #1
 800b23a:	e7e2      	b.n	800b202 <__gethex+0x2f6>
 800b23c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b23e:	f1c3 0301 	rsb	r3, r3, #1
 800b242:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b244:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b246:	2b00      	cmp	r3, #0
 800b248:	d0f0      	beq.n	800b22c <__gethex+0x320>
 800b24a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b24e:	f104 0314 	add.w	r3, r4, #20
 800b252:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b256:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b25a:	f04f 0c00 	mov.w	ip, #0
 800b25e:	4618      	mov	r0, r3
 800b260:	f853 2b04 	ldr.w	r2, [r3], #4
 800b264:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b268:	d01b      	beq.n	800b2a2 <__gethex+0x396>
 800b26a:	3201      	adds	r2, #1
 800b26c:	6002      	str	r2, [r0, #0]
 800b26e:	2d02      	cmp	r5, #2
 800b270:	f104 0314 	add.w	r3, r4, #20
 800b274:	d13c      	bne.n	800b2f0 <__gethex+0x3e4>
 800b276:	f8d8 2000 	ldr.w	r2, [r8]
 800b27a:	3a01      	subs	r2, #1
 800b27c:	42b2      	cmp	r2, r6
 800b27e:	d109      	bne.n	800b294 <__gethex+0x388>
 800b280:	1171      	asrs	r1, r6, #5
 800b282:	2201      	movs	r2, #1
 800b284:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b288:	f006 061f 	and.w	r6, r6, #31
 800b28c:	fa02 f606 	lsl.w	r6, r2, r6
 800b290:	421e      	tst	r6, r3
 800b292:	d13a      	bne.n	800b30a <__gethex+0x3fe>
 800b294:	f045 0520 	orr.w	r5, r5, #32
 800b298:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b29a:	601c      	str	r4, [r3, #0]
 800b29c:	9b02      	ldr	r3, [sp, #8]
 800b29e:	601f      	str	r7, [r3, #0]
 800b2a0:	e6b0      	b.n	800b004 <__gethex+0xf8>
 800b2a2:	4299      	cmp	r1, r3
 800b2a4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b2a8:	d8d9      	bhi.n	800b25e <__gethex+0x352>
 800b2aa:	68a3      	ldr	r3, [r4, #8]
 800b2ac:	459b      	cmp	fp, r3
 800b2ae:	db17      	blt.n	800b2e0 <__gethex+0x3d4>
 800b2b0:	6861      	ldr	r1, [r4, #4]
 800b2b2:	9801      	ldr	r0, [sp, #4]
 800b2b4:	3101      	adds	r1, #1
 800b2b6:	f000 f9c3 	bl	800b640 <_Balloc>
 800b2ba:	4681      	mov	r9, r0
 800b2bc:	b918      	cbnz	r0, 800b2c6 <__gethex+0x3ba>
 800b2be:	4b1a      	ldr	r3, [pc, #104]	@ (800b328 <__gethex+0x41c>)
 800b2c0:	4602      	mov	r2, r0
 800b2c2:	2184      	movs	r1, #132	@ 0x84
 800b2c4:	e6c5      	b.n	800b052 <__gethex+0x146>
 800b2c6:	6922      	ldr	r2, [r4, #16]
 800b2c8:	3202      	adds	r2, #2
 800b2ca:	f104 010c 	add.w	r1, r4, #12
 800b2ce:	0092      	lsls	r2, r2, #2
 800b2d0:	300c      	adds	r0, #12
 800b2d2:	f7fe fed6 	bl	800a082 <memcpy>
 800b2d6:	4621      	mov	r1, r4
 800b2d8:	9801      	ldr	r0, [sp, #4]
 800b2da:	f000 f9f1 	bl	800b6c0 <_Bfree>
 800b2de:	464c      	mov	r4, r9
 800b2e0:	6923      	ldr	r3, [r4, #16]
 800b2e2:	1c5a      	adds	r2, r3, #1
 800b2e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b2e8:	6122      	str	r2, [r4, #16]
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	615a      	str	r2, [r3, #20]
 800b2ee:	e7be      	b.n	800b26e <__gethex+0x362>
 800b2f0:	6922      	ldr	r2, [r4, #16]
 800b2f2:	455a      	cmp	r2, fp
 800b2f4:	dd0b      	ble.n	800b30e <__gethex+0x402>
 800b2f6:	2101      	movs	r1, #1
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	f7ff fd9f 	bl	800ae3c <rshift>
 800b2fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b302:	3701      	adds	r7, #1
 800b304:	42bb      	cmp	r3, r7
 800b306:	f6ff aee0 	blt.w	800b0ca <__gethex+0x1be>
 800b30a:	2501      	movs	r5, #1
 800b30c:	e7c2      	b.n	800b294 <__gethex+0x388>
 800b30e:	f016 061f 	ands.w	r6, r6, #31
 800b312:	d0fa      	beq.n	800b30a <__gethex+0x3fe>
 800b314:	4453      	add	r3, sl
 800b316:	f1c6 0620 	rsb	r6, r6, #32
 800b31a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b31e:	f000 fa81 	bl	800b824 <__hi0bits>
 800b322:	42b0      	cmp	r0, r6
 800b324:	dbe7      	blt.n	800b2f6 <__gethex+0x3ea>
 800b326:	e7f0      	b.n	800b30a <__gethex+0x3fe>
 800b328:	0800cfed 	.word	0x0800cfed

0800b32c <L_shift>:
 800b32c:	f1c2 0208 	rsb	r2, r2, #8
 800b330:	0092      	lsls	r2, r2, #2
 800b332:	b570      	push	{r4, r5, r6, lr}
 800b334:	f1c2 0620 	rsb	r6, r2, #32
 800b338:	6843      	ldr	r3, [r0, #4]
 800b33a:	6804      	ldr	r4, [r0, #0]
 800b33c:	fa03 f506 	lsl.w	r5, r3, r6
 800b340:	432c      	orrs	r4, r5
 800b342:	40d3      	lsrs	r3, r2
 800b344:	6004      	str	r4, [r0, #0]
 800b346:	f840 3f04 	str.w	r3, [r0, #4]!
 800b34a:	4288      	cmp	r0, r1
 800b34c:	d3f4      	bcc.n	800b338 <L_shift+0xc>
 800b34e:	bd70      	pop	{r4, r5, r6, pc}

0800b350 <__match>:
 800b350:	b530      	push	{r4, r5, lr}
 800b352:	6803      	ldr	r3, [r0, #0]
 800b354:	3301      	adds	r3, #1
 800b356:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b35a:	b914      	cbnz	r4, 800b362 <__match+0x12>
 800b35c:	6003      	str	r3, [r0, #0]
 800b35e:	2001      	movs	r0, #1
 800b360:	bd30      	pop	{r4, r5, pc}
 800b362:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b366:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b36a:	2d19      	cmp	r5, #25
 800b36c:	bf98      	it	ls
 800b36e:	3220      	addls	r2, #32
 800b370:	42a2      	cmp	r2, r4
 800b372:	d0f0      	beq.n	800b356 <__match+0x6>
 800b374:	2000      	movs	r0, #0
 800b376:	e7f3      	b.n	800b360 <__match+0x10>

0800b378 <__hexnan>:
 800b378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b37c:	680b      	ldr	r3, [r1, #0]
 800b37e:	6801      	ldr	r1, [r0, #0]
 800b380:	115e      	asrs	r6, r3, #5
 800b382:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b386:	f013 031f 	ands.w	r3, r3, #31
 800b38a:	b087      	sub	sp, #28
 800b38c:	bf18      	it	ne
 800b38e:	3604      	addne	r6, #4
 800b390:	2500      	movs	r5, #0
 800b392:	1f37      	subs	r7, r6, #4
 800b394:	4682      	mov	sl, r0
 800b396:	4690      	mov	r8, r2
 800b398:	9301      	str	r3, [sp, #4]
 800b39a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b39e:	46b9      	mov	r9, r7
 800b3a0:	463c      	mov	r4, r7
 800b3a2:	9502      	str	r5, [sp, #8]
 800b3a4:	46ab      	mov	fp, r5
 800b3a6:	784a      	ldrb	r2, [r1, #1]
 800b3a8:	1c4b      	adds	r3, r1, #1
 800b3aa:	9303      	str	r3, [sp, #12]
 800b3ac:	b342      	cbz	r2, 800b400 <__hexnan+0x88>
 800b3ae:	4610      	mov	r0, r2
 800b3b0:	9105      	str	r1, [sp, #20]
 800b3b2:	9204      	str	r2, [sp, #16]
 800b3b4:	f7ff fd94 	bl	800aee0 <__hexdig_fun>
 800b3b8:	2800      	cmp	r0, #0
 800b3ba:	d151      	bne.n	800b460 <__hexnan+0xe8>
 800b3bc:	9a04      	ldr	r2, [sp, #16]
 800b3be:	9905      	ldr	r1, [sp, #20]
 800b3c0:	2a20      	cmp	r2, #32
 800b3c2:	d818      	bhi.n	800b3f6 <__hexnan+0x7e>
 800b3c4:	9b02      	ldr	r3, [sp, #8]
 800b3c6:	459b      	cmp	fp, r3
 800b3c8:	dd13      	ble.n	800b3f2 <__hexnan+0x7a>
 800b3ca:	454c      	cmp	r4, r9
 800b3cc:	d206      	bcs.n	800b3dc <__hexnan+0x64>
 800b3ce:	2d07      	cmp	r5, #7
 800b3d0:	dc04      	bgt.n	800b3dc <__hexnan+0x64>
 800b3d2:	462a      	mov	r2, r5
 800b3d4:	4649      	mov	r1, r9
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	f7ff ffa8 	bl	800b32c <L_shift>
 800b3dc:	4544      	cmp	r4, r8
 800b3de:	d952      	bls.n	800b486 <__hexnan+0x10e>
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	f1a4 0904 	sub.w	r9, r4, #4
 800b3e6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b3ea:	f8cd b008 	str.w	fp, [sp, #8]
 800b3ee:	464c      	mov	r4, r9
 800b3f0:	461d      	mov	r5, r3
 800b3f2:	9903      	ldr	r1, [sp, #12]
 800b3f4:	e7d7      	b.n	800b3a6 <__hexnan+0x2e>
 800b3f6:	2a29      	cmp	r2, #41	@ 0x29
 800b3f8:	d157      	bne.n	800b4aa <__hexnan+0x132>
 800b3fa:	3102      	adds	r1, #2
 800b3fc:	f8ca 1000 	str.w	r1, [sl]
 800b400:	f1bb 0f00 	cmp.w	fp, #0
 800b404:	d051      	beq.n	800b4aa <__hexnan+0x132>
 800b406:	454c      	cmp	r4, r9
 800b408:	d206      	bcs.n	800b418 <__hexnan+0xa0>
 800b40a:	2d07      	cmp	r5, #7
 800b40c:	dc04      	bgt.n	800b418 <__hexnan+0xa0>
 800b40e:	462a      	mov	r2, r5
 800b410:	4649      	mov	r1, r9
 800b412:	4620      	mov	r0, r4
 800b414:	f7ff ff8a 	bl	800b32c <L_shift>
 800b418:	4544      	cmp	r4, r8
 800b41a:	d936      	bls.n	800b48a <__hexnan+0x112>
 800b41c:	f1a8 0204 	sub.w	r2, r8, #4
 800b420:	4623      	mov	r3, r4
 800b422:	f853 1b04 	ldr.w	r1, [r3], #4
 800b426:	f842 1f04 	str.w	r1, [r2, #4]!
 800b42a:	429f      	cmp	r7, r3
 800b42c:	d2f9      	bcs.n	800b422 <__hexnan+0xaa>
 800b42e:	1b3b      	subs	r3, r7, r4
 800b430:	f023 0303 	bic.w	r3, r3, #3
 800b434:	3304      	adds	r3, #4
 800b436:	3401      	adds	r4, #1
 800b438:	3e03      	subs	r6, #3
 800b43a:	42b4      	cmp	r4, r6
 800b43c:	bf88      	it	hi
 800b43e:	2304      	movhi	r3, #4
 800b440:	4443      	add	r3, r8
 800b442:	2200      	movs	r2, #0
 800b444:	f843 2b04 	str.w	r2, [r3], #4
 800b448:	429f      	cmp	r7, r3
 800b44a:	d2fb      	bcs.n	800b444 <__hexnan+0xcc>
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	b91b      	cbnz	r3, 800b458 <__hexnan+0xe0>
 800b450:	4547      	cmp	r7, r8
 800b452:	d128      	bne.n	800b4a6 <__hexnan+0x12e>
 800b454:	2301      	movs	r3, #1
 800b456:	603b      	str	r3, [r7, #0]
 800b458:	2005      	movs	r0, #5
 800b45a:	b007      	add	sp, #28
 800b45c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b460:	3501      	adds	r5, #1
 800b462:	2d08      	cmp	r5, #8
 800b464:	f10b 0b01 	add.w	fp, fp, #1
 800b468:	dd06      	ble.n	800b478 <__hexnan+0x100>
 800b46a:	4544      	cmp	r4, r8
 800b46c:	d9c1      	bls.n	800b3f2 <__hexnan+0x7a>
 800b46e:	2300      	movs	r3, #0
 800b470:	f844 3c04 	str.w	r3, [r4, #-4]
 800b474:	2501      	movs	r5, #1
 800b476:	3c04      	subs	r4, #4
 800b478:	6822      	ldr	r2, [r4, #0]
 800b47a:	f000 000f 	and.w	r0, r0, #15
 800b47e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b482:	6020      	str	r0, [r4, #0]
 800b484:	e7b5      	b.n	800b3f2 <__hexnan+0x7a>
 800b486:	2508      	movs	r5, #8
 800b488:	e7b3      	b.n	800b3f2 <__hexnan+0x7a>
 800b48a:	9b01      	ldr	r3, [sp, #4]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d0dd      	beq.n	800b44c <__hexnan+0xd4>
 800b490:	f1c3 0320 	rsb	r3, r3, #32
 800b494:	f04f 32ff 	mov.w	r2, #4294967295
 800b498:	40da      	lsrs	r2, r3
 800b49a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b49e:	4013      	ands	r3, r2
 800b4a0:	f846 3c04 	str.w	r3, [r6, #-4]
 800b4a4:	e7d2      	b.n	800b44c <__hexnan+0xd4>
 800b4a6:	3f04      	subs	r7, #4
 800b4a8:	e7d0      	b.n	800b44c <__hexnan+0xd4>
 800b4aa:	2004      	movs	r0, #4
 800b4ac:	e7d5      	b.n	800b45a <__hexnan+0xe2>
	...

0800b4b0 <malloc>:
 800b4b0:	4b02      	ldr	r3, [pc, #8]	@ (800b4bc <malloc+0xc>)
 800b4b2:	4601      	mov	r1, r0
 800b4b4:	6818      	ldr	r0, [r3, #0]
 800b4b6:	f000 b825 	b.w	800b504 <_malloc_r>
 800b4ba:	bf00      	nop
 800b4bc:	20000208 	.word	0x20000208

0800b4c0 <sbrk_aligned>:
 800b4c0:	b570      	push	{r4, r5, r6, lr}
 800b4c2:	4e0f      	ldr	r6, [pc, #60]	@ (800b500 <sbrk_aligned+0x40>)
 800b4c4:	460c      	mov	r4, r1
 800b4c6:	6831      	ldr	r1, [r6, #0]
 800b4c8:	4605      	mov	r5, r0
 800b4ca:	b911      	cbnz	r1, 800b4d2 <sbrk_aligned+0x12>
 800b4cc:	f001 f81a 	bl	800c504 <_sbrk_r>
 800b4d0:	6030      	str	r0, [r6, #0]
 800b4d2:	4621      	mov	r1, r4
 800b4d4:	4628      	mov	r0, r5
 800b4d6:	f001 f815 	bl	800c504 <_sbrk_r>
 800b4da:	1c43      	adds	r3, r0, #1
 800b4dc:	d103      	bne.n	800b4e6 <sbrk_aligned+0x26>
 800b4de:	f04f 34ff 	mov.w	r4, #4294967295
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	bd70      	pop	{r4, r5, r6, pc}
 800b4e6:	1cc4      	adds	r4, r0, #3
 800b4e8:	f024 0403 	bic.w	r4, r4, #3
 800b4ec:	42a0      	cmp	r0, r4
 800b4ee:	d0f8      	beq.n	800b4e2 <sbrk_aligned+0x22>
 800b4f0:	1a21      	subs	r1, r4, r0
 800b4f2:	4628      	mov	r0, r5
 800b4f4:	f001 f806 	bl	800c504 <_sbrk_r>
 800b4f8:	3001      	adds	r0, #1
 800b4fa:	d1f2      	bne.n	800b4e2 <sbrk_aligned+0x22>
 800b4fc:	e7ef      	b.n	800b4de <sbrk_aligned+0x1e>
 800b4fe:	bf00      	nop
 800b500:	200008cc 	.word	0x200008cc

0800b504 <_malloc_r>:
 800b504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b508:	1ccd      	adds	r5, r1, #3
 800b50a:	f025 0503 	bic.w	r5, r5, #3
 800b50e:	3508      	adds	r5, #8
 800b510:	2d0c      	cmp	r5, #12
 800b512:	bf38      	it	cc
 800b514:	250c      	movcc	r5, #12
 800b516:	2d00      	cmp	r5, #0
 800b518:	4606      	mov	r6, r0
 800b51a:	db01      	blt.n	800b520 <_malloc_r+0x1c>
 800b51c:	42a9      	cmp	r1, r5
 800b51e:	d904      	bls.n	800b52a <_malloc_r+0x26>
 800b520:	230c      	movs	r3, #12
 800b522:	6033      	str	r3, [r6, #0]
 800b524:	2000      	movs	r0, #0
 800b526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b52a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b600 <_malloc_r+0xfc>
 800b52e:	f000 f87b 	bl	800b628 <__malloc_lock>
 800b532:	f8d8 3000 	ldr.w	r3, [r8]
 800b536:	461c      	mov	r4, r3
 800b538:	bb44      	cbnz	r4, 800b58c <_malloc_r+0x88>
 800b53a:	4629      	mov	r1, r5
 800b53c:	4630      	mov	r0, r6
 800b53e:	f7ff ffbf 	bl	800b4c0 <sbrk_aligned>
 800b542:	1c43      	adds	r3, r0, #1
 800b544:	4604      	mov	r4, r0
 800b546:	d158      	bne.n	800b5fa <_malloc_r+0xf6>
 800b548:	f8d8 4000 	ldr.w	r4, [r8]
 800b54c:	4627      	mov	r7, r4
 800b54e:	2f00      	cmp	r7, #0
 800b550:	d143      	bne.n	800b5da <_malloc_r+0xd6>
 800b552:	2c00      	cmp	r4, #0
 800b554:	d04b      	beq.n	800b5ee <_malloc_r+0xea>
 800b556:	6823      	ldr	r3, [r4, #0]
 800b558:	4639      	mov	r1, r7
 800b55a:	4630      	mov	r0, r6
 800b55c:	eb04 0903 	add.w	r9, r4, r3
 800b560:	f000 ffd0 	bl	800c504 <_sbrk_r>
 800b564:	4581      	cmp	r9, r0
 800b566:	d142      	bne.n	800b5ee <_malloc_r+0xea>
 800b568:	6821      	ldr	r1, [r4, #0]
 800b56a:	1a6d      	subs	r5, r5, r1
 800b56c:	4629      	mov	r1, r5
 800b56e:	4630      	mov	r0, r6
 800b570:	f7ff ffa6 	bl	800b4c0 <sbrk_aligned>
 800b574:	3001      	adds	r0, #1
 800b576:	d03a      	beq.n	800b5ee <_malloc_r+0xea>
 800b578:	6823      	ldr	r3, [r4, #0]
 800b57a:	442b      	add	r3, r5
 800b57c:	6023      	str	r3, [r4, #0]
 800b57e:	f8d8 3000 	ldr.w	r3, [r8]
 800b582:	685a      	ldr	r2, [r3, #4]
 800b584:	bb62      	cbnz	r2, 800b5e0 <_malloc_r+0xdc>
 800b586:	f8c8 7000 	str.w	r7, [r8]
 800b58a:	e00f      	b.n	800b5ac <_malloc_r+0xa8>
 800b58c:	6822      	ldr	r2, [r4, #0]
 800b58e:	1b52      	subs	r2, r2, r5
 800b590:	d420      	bmi.n	800b5d4 <_malloc_r+0xd0>
 800b592:	2a0b      	cmp	r2, #11
 800b594:	d917      	bls.n	800b5c6 <_malloc_r+0xc2>
 800b596:	1961      	adds	r1, r4, r5
 800b598:	42a3      	cmp	r3, r4
 800b59a:	6025      	str	r5, [r4, #0]
 800b59c:	bf18      	it	ne
 800b59e:	6059      	strne	r1, [r3, #4]
 800b5a0:	6863      	ldr	r3, [r4, #4]
 800b5a2:	bf08      	it	eq
 800b5a4:	f8c8 1000 	streq.w	r1, [r8]
 800b5a8:	5162      	str	r2, [r4, r5]
 800b5aa:	604b      	str	r3, [r1, #4]
 800b5ac:	4630      	mov	r0, r6
 800b5ae:	f000 f841 	bl	800b634 <__malloc_unlock>
 800b5b2:	f104 000b 	add.w	r0, r4, #11
 800b5b6:	1d23      	adds	r3, r4, #4
 800b5b8:	f020 0007 	bic.w	r0, r0, #7
 800b5bc:	1ac2      	subs	r2, r0, r3
 800b5be:	bf1c      	itt	ne
 800b5c0:	1a1b      	subne	r3, r3, r0
 800b5c2:	50a3      	strne	r3, [r4, r2]
 800b5c4:	e7af      	b.n	800b526 <_malloc_r+0x22>
 800b5c6:	6862      	ldr	r2, [r4, #4]
 800b5c8:	42a3      	cmp	r3, r4
 800b5ca:	bf0c      	ite	eq
 800b5cc:	f8c8 2000 	streq.w	r2, [r8]
 800b5d0:	605a      	strne	r2, [r3, #4]
 800b5d2:	e7eb      	b.n	800b5ac <_malloc_r+0xa8>
 800b5d4:	4623      	mov	r3, r4
 800b5d6:	6864      	ldr	r4, [r4, #4]
 800b5d8:	e7ae      	b.n	800b538 <_malloc_r+0x34>
 800b5da:	463c      	mov	r4, r7
 800b5dc:	687f      	ldr	r7, [r7, #4]
 800b5de:	e7b6      	b.n	800b54e <_malloc_r+0x4a>
 800b5e0:	461a      	mov	r2, r3
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	42a3      	cmp	r3, r4
 800b5e6:	d1fb      	bne.n	800b5e0 <_malloc_r+0xdc>
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	6053      	str	r3, [r2, #4]
 800b5ec:	e7de      	b.n	800b5ac <_malloc_r+0xa8>
 800b5ee:	230c      	movs	r3, #12
 800b5f0:	6033      	str	r3, [r6, #0]
 800b5f2:	4630      	mov	r0, r6
 800b5f4:	f000 f81e 	bl	800b634 <__malloc_unlock>
 800b5f8:	e794      	b.n	800b524 <_malloc_r+0x20>
 800b5fa:	6005      	str	r5, [r0, #0]
 800b5fc:	e7d6      	b.n	800b5ac <_malloc_r+0xa8>
 800b5fe:	bf00      	nop
 800b600:	200008d0 	.word	0x200008d0

0800b604 <__ascii_mbtowc>:
 800b604:	b082      	sub	sp, #8
 800b606:	b901      	cbnz	r1, 800b60a <__ascii_mbtowc+0x6>
 800b608:	a901      	add	r1, sp, #4
 800b60a:	b142      	cbz	r2, 800b61e <__ascii_mbtowc+0x1a>
 800b60c:	b14b      	cbz	r3, 800b622 <__ascii_mbtowc+0x1e>
 800b60e:	7813      	ldrb	r3, [r2, #0]
 800b610:	600b      	str	r3, [r1, #0]
 800b612:	7812      	ldrb	r2, [r2, #0]
 800b614:	1e10      	subs	r0, r2, #0
 800b616:	bf18      	it	ne
 800b618:	2001      	movne	r0, #1
 800b61a:	b002      	add	sp, #8
 800b61c:	4770      	bx	lr
 800b61e:	4610      	mov	r0, r2
 800b620:	e7fb      	b.n	800b61a <__ascii_mbtowc+0x16>
 800b622:	f06f 0001 	mvn.w	r0, #1
 800b626:	e7f8      	b.n	800b61a <__ascii_mbtowc+0x16>

0800b628 <__malloc_lock>:
 800b628:	4801      	ldr	r0, [pc, #4]	@ (800b630 <__malloc_lock+0x8>)
 800b62a:	f7fe bd28 	b.w	800a07e <__retarget_lock_acquire_recursive>
 800b62e:	bf00      	nop
 800b630:	200008c8 	.word	0x200008c8

0800b634 <__malloc_unlock>:
 800b634:	4801      	ldr	r0, [pc, #4]	@ (800b63c <__malloc_unlock+0x8>)
 800b636:	f7fe bd23 	b.w	800a080 <__retarget_lock_release_recursive>
 800b63a:	bf00      	nop
 800b63c:	200008c8 	.word	0x200008c8

0800b640 <_Balloc>:
 800b640:	b570      	push	{r4, r5, r6, lr}
 800b642:	69c6      	ldr	r6, [r0, #28]
 800b644:	4604      	mov	r4, r0
 800b646:	460d      	mov	r5, r1
 800b648:	b976      	cbnz	r6, 800b668 <_Balloc+0x28>
 800b64a:	2010      	movs	r0, #16
 800b64c:	f7ff ff30 	bl	800b4b0 <malloc>
 800b650:	4602      	mov	r2, r0
 800b652:	61e0      	str	r0, [r4, #28]
 800b654:	b920      	cbnz	r0, 800b660 <_Balloc+0x20>
 800b656:	4b18      	ldr	r3, [pc, #96]	@ (800b6b8 <_Balloc+0x78>)
 800b658:	4818      	ldr	r0, [pc, #96]	@ (800b6bc <_Balloc+0x7c>)
 800b65a:	216b      	movs	r1, #107	@ 0x6b
 800b65c:	f7fe fd2e 	bl	800a0bc <__assert_func>
 800b660:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b664:	6006      	str	r6, [r0, #0]
 800b666:	60c6      	str	r6, [r0, #12]
 800b668:	69e6      	ldr	r6, [r4, #28]
 800b66a:	68f3      	ldr	r3, [r6, #12]
 800b66c:	b183      	cbz	r3, 800b690 <_Balloc+0x50>
 800b66e:	69e3      	ldr	r3, [r4, #28]
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b676:	b9b8      	cbnz	r0, 800b6a8 <_Balloc+0x68>
 800b678:	2101      	movs	r1, #1
 800b67a:	fa01 f605 	lsl.w	r6, r1, r5
 800b67e:	1d72      	adds	r2, r6, #5
 800b680:	0092      	lsls	r2, r2, #2
 800b682:	4620      	mov	r0, r4
 800b684:	f000 ff55 	bl	800c532 <_calloc_r>
 800b688:	b160      	cbz	r0, 800b6a4 <_Balloc+0x64>
 800b68a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b68e:	e00e      	b.n	800b6ae <_Balloc+0x6e>
 800b690:	2221      	movs	r2, #33	@ 0x21
 800b692:	2104      	movs	r1, #4
 800b694:	4620      	mov	r0, r4
 800b696:	f000 ff4c 	bl	800c532 <_calloc_r>
 800b69a:	69e3      	ldr	r3, [r4, #28]
 800b69c:	60f0      	str	r0, [r6, #12]
 800b69e:	68db      	ldr	r3, [r3, #12]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d1e4      	bne.n	800b66e <_Balloc+0x2e>
 800b6a4:	2000      	movs	r0, #0
 800b6a6:	bd70      	pop	{r4, r5, r6, pc}
 800b6a8:	6802      	ldr	r2, [r0, #0]
 800b6aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b6b4:	e7f7      	b.n	800b6a6 <_Balloc+0x66>
 800b6b6:	bf00      	nop
 800b6b8:	0800ced3 	.word	0x0800ced3
 800b6bc:	0800d05e 	.word	0x0800d05e

0800b6c0 <_Bfree>:
 800b6c0:	b570      	push	{r4, r5, r6, lr}
 800b6c2:	69c6      	ldr	r6, [r0, #28]
 800b6c4:	4605      	mov	r5, r0
 800b6c6:	460c      	mov	r4, r1
 800b6c8:	b976      	cbnz	r6, 800b6e8 <_Bfree+0x28>
 800b6ca:	2010      	movs	r0, #16
 800b6cc:	f7ff fef0 	bl	800b4b0 <malloc>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	61e8      	str	r0, [r5, #28]
 800b6d4:	b920      	cbnz	r0, 800b6e0 <_Bfree+0x20>
 800b6d6:	4b09      	ldr	r3, [pc, #36]	@ (800b6fc <_Bfree+0x3c>)
 800b6d8:	4809      	ldr	r0, [pc, #36]	@ (800b700 <_Bfree+0x40>)
 800b6da:	218f      	movs	r1, #143	@ 0x8f
 800b6dc:	f7fe fcee 	bl	800a0bc <__assert_func>
 800b6e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b6e4:	6006      	str	r6, [r0, #0]
 800b6e6:	60c6      	str	r6, [r0, #12]
 800b6e8:	b13c      	cbz	r4, 800b6fa <_Bfree+0x3a>
 800b6ea:	69eb      	ldr	r3, [r5, #28]
 800b6ec:	6862      	ldr	r2, [r4, #4]
 800b6ee:	68db      	ldr	r3, [r3, #12]
 800b6f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b6f4:	6021      	str	r1, [r4, #0]
 800b6f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b6fa:	bd70      	pop	{r4, r5, r6, pc}
 800b6fc:	0800ced3 	.word	0x0800ced3
 800b700:	0800d05e 	.word	0x0800d05e

0800b704 <__multadd>:
 800b704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b708:	690d      	ldr	r5, [r1, #16]
 800b70a:	4607      	mov	r7, r0
 800b70c:	460c      	mov	r4, r1
 800b70e:	461e      	mov	r6, r3
 800b710:	f101 0c14 	add.w	ip, r1, #20
 800b714:	2000      	movs	r0, #0
 800b716:	f8dc 3000 	ldr.w	r3, [ip]
 800b71a:	b299      	uxth	r1, r3
 800b71c:	fb02 6101 	mla	r1, r2, r1, r6
 800b720:	0c1e      	lsrs	r6, r3, #16
 800b722:	0c0b      	lsrs	r3, r1, #16
 800b724:	fb02 3306 	mla	r3, r2, r6, r3
 800b728:	b289      	uxth	r1, r1
 800b72a:	3001      	adds	r0, #1
 800b72c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b730:	4285      	cmp	r5, r0
 800b732:	f84c 1b04 	str.w	r1, [ip], #4
 800b736:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b73a:	dcec      	bgt.n	800b716 <__multadd+0x12>
 800b73c:	b30e      	cbz	r6, 800b782 <__multadd+0x7e>
 800b73e:	68a3      	ldr	r3, [r4, #8]
 800b740:	42ab      	cmp	r3, r5
 800b742:	dc19      	bgt.n	800b778 <__multadd+0x74>
 800b744:	6861      	ldr	r1, [r4, #4]
 800b746:	4638      	mov	r0, r7
 800b748:	3101      	adds	r1, #1
 800b74a:	f7ff ff79 	bl	800b640 <_Balloc>
 800b74e:	4680      	mov	r8, r0
 800b750:	b928      	cbnz	r0, 800b75e <__multadd+0x5a>
 800b752:	4602      	mov	r2, r0
 800b754:	4b0c      	ldr	r3, [pc, #48]	@ (800b788 <__multadd+0x84>)
 800b756:	480d      	ldr	r0, [pc, #52]	@ (800b78c <__multadd+0x88>)
 800b758:	21ba      	movs	r1, #186	@ 0xba
 800b75a:	f7fe fcaf 	bl	800a0bc <__assert_func>
 800b75e:	6922      	ldr	r2, [r4, #16]
 800b760:	3202      	adds	r2, #2
 800b762:	f104 010c 	add.w	r1, r4, #12
 800b766:	0092      	lsls	r2, r2, #2
 800b768:	300c      	adds	r0, #12
 800b76a:	f7fe fc8a 	bl	800a082 <memcpy>
 800b76e:	4621      	mov	r1, r4
 800b770:	4638      	mov	r0, r7
 800b772:	f7ff ffa5 	bl	800b6c0 <_Bfree>
 800b776:	4644      	mov	r4, r8
 800b778:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b77c:	3501      	adds	r5, #1
 800b77e:	615e      	str	r6, [r3, #20]
 800b780:	6125      	str	r5, [r4, #16]
 800b782:	4620      	mov	r0, r4
 800b784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b788:	0800cfed 	.word	0x0800cfed
 800b78c:	0800d05e 	.word	0x0800d05e

0800b790 <__s2b>:
 800b790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b794:	460c      	mov	r4, r1
 800b796:	4615      	mov	r5, r2
 800b798:	461f      	mov	r7, r3
 800b79a:	2209      	movs	r2, #9
 800b79c:	3308      	adds	r3, #8
 800b79e:	4606      	mov	r6, r0
 800b7a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7a4:	2100      	movs	r1, #0
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	db09      	blt.n	800b7c0 <__s2b+0x30>
 800b7ac:	4630      	mov	r0, r6
 800b7ae:	f7ff ff47 	bl	800b640 <_Balloc>
 800b7b2:	b940      	cbnz	r0, 800b7c6 <__s2b+0x36>
 800b7b4:	4602      	mov	r2, r0
 800b7b6:	4b19      	ldr	r3, [pc, #100]	@ (800b81c <__s2b+0x8c>)
 800b7b8:	4819      	ldr	r0, [pc, #100]	@ (800b820 <__s2b+0x90>)
 800b7ba:	21d3      	movs	r1, #211	@ 0xd3
 800b7bc:	f7fe fc7e 	bl	800a0bc <__assert_func>
 800b7c0:	0052      	lsls	r2, r2, #1
 800b7c2:	3101      	adds	r1, #1
 800b7c4:	e7f0      	b.n	800b7a8 <__s2b+0x18>
 800b7c6:	9b08      	ldr	r3, [sp, #32]
 800b7c8:	6143      	str	r3, [r0, #20]
 800b7ca:	2d09      	cmp	r5, #9
 800b7cc:	f04f 0301 	mov.w	r3, #1
 800b7d0:	6103      	str	r3, [r0, #16]
 800b7d2:	dd16      	ble.n	800b802 <__s2b+0x72>
 800b7d4:	f104 0909 	add.w	r9, r4, #9
 800b7d8:	46c8      	mov	r8, r9
 800b7da:	442c      	add	r4, r5
 800b7dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b7e0:	4601      	mov	r1, r0
 800b7e2:	3b30      	subs	r3, #48	@ 0x30
 800b7e4:	220a      	movs	r2, #10
 800b7e6:	4630      	mov	r0, r6
 800b7e8:	f7ff ff8c 	bl	800b704 <__multadd>
 800b7ec:	45a0      	cmp	r8, r4
 800b7ee:	d1f5      	bne.n	800b7dc <__s2b+0x4c>
 800b7f0:	f1a5 0408 	sub.w	r4, r5, #8
 800b7f4:	444c      	add	r4, r9
 800b7f6:	1b2d      	subs	r5, r5, r4
 800b7f8:	1963      	adds	r3, r4, r5
 800b7fa:	42bb      	cmp	r3, r7
 800b7fc:	db04      	blt.n	800b808 <__s2b+0x78>
 800b7fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b802:	340a      	adds	r4, #10
 800b804:	2509      	movs	r5, #9
 800b806:	e7f6      	b.n	800b7f6 <__s2b+0x66>
 800b808:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b80c:	4601      	mov	r1, r0
 800b80e:	3b30      	subs	r3, #48	@ 0x30
 800b810:	220a      	movs	r2, #10
 800b812:	4630      	mov	r0, r6
 800b814:	f7ff ff76 	bl	800b704 <__multadd>
 800b818:	e7ee      	b.n	800b7f8 <__s2b+0x68>
 800b81a:	bf00      	nop
 800b81c:	0800cfed 	.word	0x0800cfed
 800b820:	0800d05e 	.word	0x0800d05e

0800b824 <__hi0bits>:
 800b824:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b828:	4603      	mov	r3, r0
 800b82a:	bf36      	itet	cc
 800b82c:	0403      	lslcc	r3, r0, #16
 800b82e:	2000      	movcs	r0, #0
 800b830:	2010      	movcc	r0, #16
 800b832:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b836:	bf3c      	itt	cc
 800b838:	021b      	lslcc	r3, r3, #8
 800b83a:	3008      	addcc	r0, #8
 800b83c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b840:	bf3c      	itt	cc
 800b842:	011b      	lslcc	r3, r3, #4
 800b844:	3004      	addcc	r0, #4
 800b846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b84a:	bf3c      	itt	cc
 800b84c:	009b      	lslcc	r3, r3, #2
 800b84e:	3002      	addcc	r0, #2
 800b850:	2b00      	cmp	r3, #0
 800b852:	db05      	blt.n	800b860 <__hi0bits+0x3c>
 800b854:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b858:	f100 0001 	add.w	r0, r0, #1
 800b85c:	bf08      	it	eq
 800b85e:	2020      	moveq	r0, #32
 800b860:	4770      	bx	lr

0800b862 <__lo0bits>:
 800b862:	6803      	ldr	r3, [r0, #0]
 800b864:	4602      	mov	r2, r0
 800b866:	f013 0007 	ands.w	r0, r3, #7
 800b86a:	d00b      	beq.n	800b884 <__lo0bits+0x22>
 800b86c:	07d9      	lsls	r1, r3, #31
 800b86e:	d421      	bmi.n	800b8b4 <__lo0bits+0x52>
 800b870:	0798      	lsls	r0, r3, #30
 800b872:	bf49      	itett	mi
 800b874:	085b      	lsrmi	r3, r3, #1
 800b876:	089b      	lsrpl	r3, r3, #2
 800b878:	2001      	movmi	r0, #1
 800b87a:	6013      	strmi	r3, [r2, #0]
 800b87c:	bf5c      	itt	pl
 800b87e:	6013      	strpl	r3, [r2, #0]
 800b880:	2002      	movpl	r0, #2
 800b882:	4770      	bx	lr
 800b884:	b299      	uxth	r1, r3
 800b886:	b909      	cbnz	r1, 800b88c <__lo0bits+0x2a>
 800b888:	0c1b      	lsrs	r3, r3, #16
 800b88a:	2010      	movs	r0, #16
 800b88c:	b2d9      	uxtb	r1, r3
 800b88e:	b909      	cbnz	r1, 800b894 <__lo0bits+0x32>
 800b890:	3008      	adds	r0, #8
 800b892:	0a1b      	lsrs	r3, r3, #8
 800b894:	0719      	lsls	r1, r3, #28
 800b896:	bf04      	itt	eq
 800b898:	091b      	lsreq	r3, r3, #4
 800b89a:	3004      	addeq	r0, #4
 800b89c:	0799      	lsls	r1, r3, #30
 800b89e:	bf04      	itt	eq
 800b8a0:	089b      	lsreq	r3, r3, #2
 800b8a2:	3002      	addeq	r0, #2
 800b8a4:	07d9      	lsls	r1, r3, #31
 800b8a6:	d403      	bmi.n	800b8b0 <__lo0bits+0x4e>
 800b8a8:	085b      	lsrs	r3, r3, #1
 800b8aa:	f100 0001 	add.w	r0, r0, #1
 800b8ae:	d003      	beq.n	800b8b8 <__lo0bits+0x56>
 800b8b0:	6013      	str	r3, [r2, #0]
 800b8b2:	4770      	bx	lr
 800b8b4:	2000      	movs	r0, #0
 800b8b6:	4770      	bx	lr
 800b8b8:	2020      	movs	r0, #32
 800b8ba:	4770      	bx	lr

0800b8bc <__i2b>:
 800b8bc:	b510      	push	{r4, lr}
 800b8be:	460c      	mov	r4, r1
 800b8c0:	2101      	movs	r1, #1
 800b8c2:	f7ff febd 	bl	800b640 <_Balloc>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	b928      	cbnz	r0, 800b8d6 <__i2b+0x1a>
 800b8ca:	4b05      	ldr	r3, [pc, #20]	@ (800b8e0 <__i2b+0x24>)
 800b8cc:	4805      	ldr	r0, [pc, #20]	@ (800b8e4 <__i2b+0x28>)
 800b8ce:	f240 1145 	movw	r1, #325	@ 0x145
 800b8d2:	f7fe fbf3 	bl	800a0bc <__assert_func>
 800b8d6:	2301      	movs	r3, #1
 800b8d8:	6144      	str	r4, [r0, #20]
 800b8da:	6103      	str	r3, [r0, #16]
 800b8dc:	bd10      	pop	{r4, pc}
 800b8de:	bf00      	nop
 800b8e0:	0800cfed 	.word	0x0800cfed
 800b8e4:	0800d05e 	.word	0x0800d05e

0800b8e8 <__multiply>:
 800b8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8ec:	4617      	mov	r7, r2
 800b8ee:	690a      	ldr	r2, [r1, #16]
 800b8f0:	693b      	ldr	r3, [r7, #16]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	bfa8      	it	ge
 800b8f6:	463b      	movge	r3, r7
 800b8f8:	4689      	mov	r9, r1
 800b8fa:	bfa4      	itt	ge
 800b8fc:	460f      	movge	r7, r1
 800b8fe:	4699      	movge	r9, r3
 800b900:	693d      	ldr	r5, [r7, #16]
 800b902:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	6879      	ldr	r1, [r7, #4]
 800b90a:	eb05 060a 	add.w	r6, r5, sl
 800b90e:	42b3      	cmp	r3, r6
 800b910:	b085      	sub	sp, #20
 800b912:	bfb8      	it	lt
 800b914:	3101      	addlt	r1, #1
 800b916:	f7ff fe93 	bl	800b640 <_Balloc>
 800b91a:	b930      	cbnz	r0, 800b92a <__multiply+0x42>
 800b91c:	4602      	mov	r2, r0
 800b91e:	4b41      	ldr	r3, [pc, #260]	@ (800ba24 <__multiply+0x13c>)
 800b920:	4841      	ldr	r0, [pc, #260]	@ (800ba28 <__multiply+0x140>)
 800b922:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b926:	f7fe fbc9 	bl	800a0bc <__assert_func>
 800b92a:	f100 0414 	add.w	r4, r0, #20
 800b92e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b932:	4623      	mov	r3, r4
 800b934:	2200      	movs	r2, #0
 800b936:	4573      	cmp	r3, lr
 800b938:	d320      	bcc.n	800b97c <__multiply+0x94>
 800b93a:	f107 0814 	add.w	r8, r7, #20
 800b93e:	f109 0114 	add.w	r1, r9, #20
 800b942:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b946:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b94a:	9302      	str	r3, [sp, #8]
 800b94c:	1beb      	subs	r3, r5, r7
 800b94e:	3b15      	subs	r3, #21
 800b950:	f023 0303 	bic.w	r3, r3, #3
 800b954:	3304      	adds	r3, #4
 800b956:	3715      	adds	r7, #21
 800b958:	42bd      	cmp	r5, r7
 800b95a:	bf38      	it	cc
 800b95c:	2304      	movcc	r3, #4
 800b95e:	9301      	str	r3, [sp, #4]
 800b960:	9b02      	ldr	r3, [sp, #8]
 800b962:	9103      	str	r1, [sp, #12]
 800b964:	428b      	cmp	r3, r1
 800b966:	d80c      	bhi.n	800b982 <__multiply+0x9a>
 800b968:	2e00      	cmp	r6, #0
 800b96a:	dd03      	ble.n	800b974 <__multiply+0x8c>
 800b96c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b970:	2b00      	cmp	r3, #0
 800b972:	d055      	beq.n	800ba20 <__multiply+0x138>
 800b974:	6106      	str	r6, [r0, #16]
 800b976:	b005      	add	sp, #20
 800b978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b97c:	f843 2b04 	str.w	r2, [r3], #4
 800b980:	e7d9      	b.n	800b936 <__multiply+0x4e>
 800b982:	f8b1 a000 	ldrh.w	sl, [r1]
 800b986:	f1ba 0f00 	cmp.w	sl, #0
 800b98a:	d01f      	beq.n	800b9cc <__multiply+0xe4>
 800b98c:	46c4      	mov	ip, r8
 800b98e:	46a1      	mov	r9, r4
 800b990:	2700      	movs	r7, #0
 800b992:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b996:	f8d9 3000 	ldr.w	r3, [r9]
 800b99a:	fa1f fb82 	uxth.w	fp, r2
 800b99e:	b29b      	uxth	r3, r3
 800b9a0:	fb0a 330b 	mla	r3, sl, fp, r3
 800b9a4:	443b      	add	r3, r7
 800b9a6:	f8d9 7000 	ldr.w	r7, [r9]
 800b9aa:	0c12      	lsrs	r2, r2, #16
 800b9ac:	0c3f      	lsrs	r7, r7, #16
 800b9ae:	fb0a 7202 	mla	r2, sl, r2, r7
 800b9b2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b9b6:	b29b      	uxth	r3, r3
 800b9b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9bc:	4565      	cmp	r5, ip
 800b9be:	f849 3b04 	str.w	r3, [r9], #4
 800b9c2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b9c6:	d8e4      	bhi.n	800b992 <__multiply+0xaa>
 800b9c8:	9b01      	ldr	r3, [sp, #4]
 800b9ca:	50e7      	str	r7, [r4, r3]
 800b9cc:	9b03      	ldr	r3, [sp, #12]
 800b9ce:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b9d2:	3104      	adds	r1, #4
 800b9d4:	f1b9 0f00 	cmp.w	r9, #0
 800b9d8:	d020      	beq.n	800ba1c <__multiply+0x134>
 800b9da:	6823      	ldr	r3, [r4, #0]
 800b9dc:	4647      	mov	r7, r8
 800b9de:	46a4      	mov	ip, r4
 800b9e0:	f04f 0a00 	mov.w	sl, #0
 800b9e4:	f8b7 b000 	ldrh.w	fp, [r7]
 800b9e8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b9ec:	fb09 220b 	mla	r2, r9, fp, r2
 800b9f0:	4452      	add	r2, sl
 800b9f2:	b29b      	uxth	r3, r3
 800b9f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9f8:	f84c 3b04 	str.w	r3, [ip], #4
 800b9fc:	f857 3b04 	ldr.w	r3, [r7], #4
 800ba00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba04:	f8bc 3000 	ldrh.w	r3, [ip]
 800ba08:	fb09 330a 	mla	r3, r9, sl, r3
 800ba0c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ba10:	42bd      	cmp	r5, r7
 800ba12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba16:	d8e5      	bhi.n	800b9e4 <__multiply+0xfc>
 800ba18:	9a01      	ldr	r2, [sp, #4]
 800ba1a:	50a3      	str	r3, [r4, r2]
 800ba1c:	3404      	adds	r4, #4
 800ba1e:	e79f      	b.n	800b960 <__multiply+0x78>
 800ba20:	3e01      	subs	r6, #1
 800ba22:	e7a1      	b.n	800b968 <__multiply+0x80>
 800ba24:	0800cfed 	.word	0x0800cfed
 800ba28:	0800d05e 	.word	0x0800d05e

0800ba2c <__pow5mult>:
 800ba2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba30:	4615      	mov	r5, r2
 800ba32:	f012 0203 	ands.w	r2, r2, #3
 800ba36:	4607      	mov	r7, r0
 800ba38:	460e      	mov	r6, r1
 800ba3a:	d007      	beq.n	800ba4c <__pow5mult+0x20>
 800ba3c:	4c25      	ldr	r4, [pc, #148]	@ (800bad4 <__pow5mult+0xa8>)
 800ba3e:	3a01      	subs	r2, #1
 800ba40:	2300      	movs	r3, #0
 800ba42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ba46:	f7ff fe5d 	bl	800b704 <__multadd>
 800ba4a:	4606      	mov	r6, r0
 800ba4c:	10ad      	asrs	r5, r5, #2
 800ba4e:	d03d      	beq.n	800bacc <__pow5mult+0xa0>
 800ba50:	69fc      	ldr	r4, [r7, #28]
 800ba52:	b97c      	cbnz	r4, 800ba74 <__pow5mult+0x48>
 800ba54:	2010      	movs	r0, #16
 800ba56:	f7ff fd2b 	bl	800b4b0 <malloc>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	61f8      	str	r0, [r7, #28]
 800ba5e:	b928      	cbnz	r0, 800ba6c <__pow5mult+0x40>
 800ba60:	4b1d      	ldr	r3, [pc, #116]	@ (800bad8 <__pow5mult+0xac>)
 800ba62:	481e      	ldr	r0, [pc, #120]	@ (800badc <__pow5mult+0xb0>)
 800ba64:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ba68:	f7fe fb28 	bl	800a0bc <__assert_func>
 800ba6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba70:	6004      	str	r4, [r0, #0]
 800ba72:	60c4      	str	r4, [r0, #12]
 800ba74:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ba78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba7c:	b94c      	cbnz	r4, 800ba92 <__pow5mult+0x66>
 800ba7e:	f240 2171 	movw	r1, #625	@ 0x271
 800ba82:	4638      	mov	r0, r7
 800ba84:	f7ff ff1a 	bl	800b8bc <__i2b>
 800ba88:	2300      	movs	r3, #0
 800ba8a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba8e:	4604      	mov	r4, r0
 800ba90:	6003      	str	r3, [r0, #0]
 800ba92:	f04f 0900 	mov.w	r9, #0
 800ba96:	07eb      	lsls	r3, r5, #31
 800ba98:	d50a      	bpl.n	800bab0 <__pow5mult+0x84>
 800ba9a:	4631      	mov	r1, r6
 800ba9c:	4622      	mov	r2, r4
 800ba9e:	4638      	mov	r0, r7
 800baa0:	f7ff ff22 	bl	800b8e8 <__multiply>
 800baa4:	4631      	mov	r1, r6
 800baa6:	4680      	mov	r8, r0
 800baa8:	4638      	mov	r0, r7
 800baaa:	f7ff fe09 	bl	800b6c0 <_Bfree>
 800baae:	4646      	mov	r6, r8
 800bab0:	106d      	asrs	r5, r5, #1
 800bab2:	d00b      	beq.n	800bacc <__pow5mult+0xa0>
 800bab4:	6820      	ldr	r0, [r4, #0]
 800bab6:	b938      	cbnz	r0, 800bac8 <__pow5mult+0x9c>
 800bab8:	4622      	mov	r2, r4
 800baba:	4621      	mov	r1, r4
 800babc:	4638      	mov	r0, r7
 800babe:	f7ff ff13 	bl	800b8e8 <__multiply>
 800bac2:	6020      	str	r0, [r4, #0]
 800bac4:	f8c0 9000 	str.w	r9, [r0]
 800bac8:	4604      	mov	r4, r0
 800baca:	e7e4      	b.n	800ba96 <__pow5mult+0x6a>
 800bacc:	4630      	mov	r0, r6
 800bace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bad2:	bf00      	nop
 800bad4:	0800d118 	.word	0x0800d118
 800bad8:	0800ced3 	.word	0x0800ced3
 800badc:	0800d05e 	.word	0x0800d05e

0800bae0 <__lshift>:
 800bae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bae4:	460c      	mov	r4, r1
 800bae6:	6849      	ldr	r1, [r1, #4]
 800bae8:	6923      	ldr	r3, [r4, #16]
 800baea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800baee:	68a3      	ldr	r3, [r4, #8]
 800baf0:	4607      	mov	r7, r0
 800baf2:	4691      	mov	r9, r2
 800baf4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800baf8:	f108 0601 	add.w	r6, r8, #1
 800bafc:	42b3      	cmp	r3, r6
 800bafe:	db0b      	blt.n	800bb18 <__lshift+0x38>
 800bb00:	4638      	mov	r0, r7
 800bb02:	f7ff fd9d 	bl	800b640 <_Balloc>
 800bb06:	4605      	mov	r5, r0
 800bb08:	b948      	cbnz	r0, 800bb1e <__lshift+0x3e>
 800bb0a:	4602      	mov	r2, r0
 800bb0c:	4b28      	ldr	r3, [pc, #160]	@ (800bbb0 <__lshift+0xd0>)
 800bb0e:	4829      	ldr	r0, [pc, #164]	@ (800bbb4 <__lshift+0xd4>)
 800bb10:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bb14:	f7fe fad2 	bl	800a0bc <__assert_func>
 800bb18:	3101      	adds	r1, #1
 800bb1a:	005b      	lsls	r3, r3, #1
 800bb1c:	e7ee      	b.n	800bafc <__lshift+0x1c>
 800bb1e:	2300      	movs	r3, #0
 800bb20:	f100 0114 	add.w	r1, r0, #20
 800bb24:	f100 0210 	add.w	r2, r0, #16
 800bb28:	4618      	mov	r0, r3
 800bb2a:	4553      	cmp	r3, sl
 800bb2c:	db33      	blt.n	800bb96 <__lshift+0xb6>
 800bb2e:	6920      	ldr	r0, [r4, #16]
 800bb30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bb34:	f104 0314 	add.w	r3, r4, #20
 800bb38:	f019 091f 	ands.w	r9, r9, #31
 800bb3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bb40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bb44:	d02b      	beq.n	800bb9e <__lshift+0xbe>
 800bb46:	f1c9 0e20 	rsb	lr, r9, #32
 800bb4a:	468a      	mov	sl, r1
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	6818      	ldr	r0, [r3, #0]
 800bb50:	fa00 f009 	lsl.w	r0, r0, r9
 800bb54:	4310      	orrs	r0, r2
 800bb56:	f84a 0b04 	str.w	r0, [sl], #4
 800bb5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb5e:	459c      	cmp	ip, r3
 800bb60:	fa22 f20e 	lsr.w	r2, r2, lr
 800bb64:	d8f3      	bhi.n	800bb4e <__lshift+0x6e>
 800bb66:	ebac 0304 	sub.w	r3, ip, r4
 800bb6a:	3b15      	subs	r3, #21
 800bb6c:	f023 0303 	bic.w	r3, r3, #3
 800bb70:	3304      	adds	r3, #4
 800bb72:	f104 0015 	add.w	r0, r4, #21
 800bb76:	4560      	cmp	r0, ip
 800bb78:	bf88      	it	hi
 800bb7a:	2304      	movhi	r3, #4
 800bb7c:	50ca      	str	r2, [r1, r3]
 800bb7e:	b10a      	cbz	r2, 800bb84 <__lshift+0xa4>
 800bb80:	f108 0602 	add.w	r6, r8, #2
 800bb84:	3e01      	subs	r6, #1
 800bb86:	4638      	mov	r0, r7
 800bb88:	612e      	str	r6, [r5, #16]
 800bb8a:	4621      	mov	r1, r4
 800bb8c:	f7ff fd98 	bl	800b6c0 <_Bfree>
 800bb90:	4628      	mov	r0, r5
 800bb92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb96:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	e7c5      	b.n	800bb2a <__lshift+0x4a>
 800bb9e:	3904      	subs	r1, #4
 800bba0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bba4:	f841 2f04 	str.w	r2, [r1, #4]!
 800bba8:	459c      	cmp	ip, r3
 800bbaa:	d8f9      	bhi.n	800bba0 <__lshift+0xc0>
 800bbac:	e7ea      	b.n	800bb84 <__lshift+0xa4>
 800bbae:	bf00      	nop
 800bbb0:	0800cfed 	.word	0x0800cfed
 800bbb4:	0800d05e 	.word	0x0800d05e

0800bbb8 <__mcmp>:
 800bbb8:	690a      	ldr	r2, [r1, #16]
 800bbba:	4603      	mov	r3, r0
 800bbbc:	6900      	ldr	r0, [r0, #16]
 800bbbe:	1a80      	subs	r0, r0, r2
 800bbc0:	b530      	push	{r4, r5, lr}
 800bbc2:	d10e      	bne.n	800bbe2 <__mcmp+0x2a>
 800bbc4:	3314      	adds	r3, #20
 800bbc6:	3114      	adds	r1, #20
 800bbc8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bbcc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bbd0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bbd4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bbd8:	4295      	cmp	r5, r2
 800bbda:	d003      	beq.n	800bbe4 <__mcmp+0x2c>
 800bbdc:	d205      	bcs.n	800bbea <__mcmp+0x32>
 800bbde:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe2:	bd30      	pop	{r4, r5, pc}
 800bbe4:	42a3      	cmp	r3, r4
 800bbe6:	d3f3      	bcc.n	800bbd0 <__mcmp+0x18>
 800bbe8:	e7fb      	b.n	800bbe2 <__mcmp+0x2a>
 800bbea:	2001      	movs	r0, #1
 800bbec:	e7f9      	b.n	800bbe2 <__mcmp+0x2a>
	...

0800bbf0 <__mdiff>:
 800bbf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf4:	4689      	mov	r9, r1
 800bbf6:	4606      	mov	r6, r0
 800bbf8:	4611      	mov	r1, r2
 800bbfa:	4648      	mov	r0, r9
 800bbfc:	4614      	mov	r4, r2
 800bbfe:	f7ff ffdb 	bl	800bbb8 <__mcmp>
 800bc02:	1e05      	subs	r5, r0, #0
 800bc04:	d112      	bne.n	800bc2c <__mdiff+0x3c>
 800bc06:	4629      	mov	r1, r5
 800bc08:	4630      	mov	r0, r6
 800bc0a:	f7ff fd19 	bl	800b640 <_Balloc>
 800bc0e:	4602      	mov	r2, r0
 800bc10:	b928      	cbnz	r0, 800bc1e <__mdiff+0x2e>
 800bc12:	4b3f      	ldr	r3, [pc, #252]	@ (800bd10 <__mdiff+0x120>)
 800bc14:	f240 2137 	movw	r1, #567	@ 0x237
 800bc18:	483e      	ldr	r0, [pc, #248]	@ (800bd14 <__mdiff+0x124>)
 800bc1a:	f7fe fa4f 	bl	800a0bc <__assert_func>
 800bc1e:	2301      	movs	r3, #1
 800bc20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bc24:	4610      	mov	r0, r2
 800bc26:	b003      	add	sp, #12
 800bc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc2c:	bfbc      	itt	lt
 800bc2e:	464b      	movlt	r3, r9
 800bc30:	46a1      	movlt	r9, r4
 800bc32:	4630      	mov	r0, r6
 800bc34:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bc38:	bfba      	itte	lt
 800bc3a:	461c      	movlt	r4, r3
 800bc3c:	2501      	movlt	r5, #1
 800bc3e:	2500      	movge	r5, #0
 800bc40:	f7ff fcfe 	bl	800b640 <_Balloc>
 800bc44:	4602      	mov	r2, r0
 800bc46:	b918      	cbnz	r0, 800bc50 <__mdiff+0x60>
 800bc48:	4b31      	ldr	r3, [pc, #196]	@ (800bd10 <__mdiff+0x120>)
 800bc4a:	f240 2145 	movw	r1, #581	@ 0x245
 800bc4e:	e7e3      	b.n	800bc18 <__mdiff+0x28>
 800bc50:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bc54:	6926      	ldr	r6, [r4, #16]
 800bc56:	60c5      	str	r5, [r0, #12]
 800bc58:	f109 0310 	add.w	r3, r9, #16
 800bc5c:	f109 0514 	add.w	r5, r9, #20
 800bc60:	f104 0e14 	add.w	lr, r4, #20
 800bc64:	f100 0b14 	add.w	fp, r0, #20
 800bc68:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bc6c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bc70:	9301      	str	r3, [sp, #4]
 800bc72:	46d9      	mov	r9, fp
 800bc74:	f04f 0c00 	mov.w	ip, #0
 800bc78:	9b01      	ldr	r3, [sp, #4]
 800bc7a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800bc7e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800bc82:	9301      	str	r3, [sp, #4]
 800bc84:	fa1f f38a 	uxth.w	r3, sl
 800bc88:	4619      	mov	r1, r3
 800bc8a:	b283      	uxth	r3, r0
 800bc8c:	1acb      	subs	r3, r1, r3
 800bc8e:	0c00      	lsrs	r0, r0, #16
 800bc90:	4463      	add	r3, ip
 800bc92:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bc96:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bc9a:	b29b      	uxth	r3, r3
 800bc9c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bca0:	4576      	cmp	r6, lr
 800bca2:	f849 3b04 	str.w	r3, [r9], #4
 800bca6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bcaa:	d8e5      	bhi.n	800bc78 <__mdiff+0x88>
 800bcac:	1b33      	subs	r3, r6, r4
 800bcae:	3b15      	subs	r3, #21
 800bcb0:	f023 0303 	bic.w	r3, r3, #3
 800bcb4:	3415      	adds	r4, #21
 800bcb6:	3304      	adds	r3, #4
 800bcb8:	42a6      	cmp	r6, r4
 800bcba:	bf38      	it	cc
 800bcbc:	2304      	movcc	r3, #4
 800bcbe:	441d      	add	r5, r3
 800bcc0:	445b      	add	r3, fp
 800bcc2:	461e      	mov	r6, r3
 800bcc4:	462c      	mov	r4, r5
 800bcc6:	4544      	cmp	r4, r8
 800bcc8:	d30e      	bcc.n	800bce8 <__mdiff+0xf8>
 800bcca:	f108 0103 	add.w	r1, r8, #3
 800bcce:	1b49      	subs	r1, r1, r5
 800bcd0:	f021 0103 	bic.w	r1, r1, #3
 800bcd4:	3d03      	subs	r5, #3
 800bcd6:	45a8      	cmp	r8, r5
 800bcd8:	bf38      	it	cc
 800bcda:	2100      	movcc	r1, #0
 800bcdc:	440b      	add	r3, r1
 800bcde:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bce2:	b191      	cbz	r1, 800bd0a <__mdiff+0x11a>
 800bce4:	6117      	str	r7, [r2, #16]
 800bce6:	e79d      	b.n	800bc24 <__mdiff+0x34>
 800bce8:	f854 1b04 	ldr.w	r1, [r4], #4
 800bcec:	46e6      	mov	lr, ip
 800bcee:	0c08      	lsrs	r0, r1, #16
 800bcf0:	fa1c fc81 	uxtah	ip, ip, r1
 800bcf4:	4471      	add	r1, lr
 800bcf6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bcfa:	b289      	uxth	r1, r1
 800bcfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bd00:	f846 1b04 	str.w	r1, [r6], #4
 800bd04:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bd08:	e7dd      	b.n	800bcc6 <__mdiff+0xd6>
 800bd0a:	3f01      	subs	r7, #1
 800bd0c:	e7e7      	b.n	800bcde <__mdiff+0xee>
 800bd0e:	bf00      	nop
 800bd10:	0800cfed 	.word	0x0800cfed
 800bd14:	0800d05e 	.word	0x0800d05e

0800bd18 <__ulp>:
 800bd18:	b082      	sub	sp, #8
 800bd1a:	ed8d 0b00 	vstr	d0, [sp]
 800bd1e:	9a01      	ldr	r2, [sp, #4]
 800bd20:	4b0f      	ldr	r3, [pc, #60]	@ (800bd60 <__ulp+0x48>)
 800bd22:	4013      	ands	r3, r2
 800bd24:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	dc08      	bgt.n	800bd3e <__ulp+0x26>
 800bd2c:	425b      	negs	r3, r3
 800bd2e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800bd32:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bd36:	da04      	bge.n	800bd42 <__ulp+0x2a>
 800bd38:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800bd3c:	4113      	asrs	r3, r2
 800bd3e:	2200      	movs	r2, #0
 800bd40:	e008      	b.n	800bd54 <__ulp+0x3c>
 800bd42:	f1a2 0314 	sub.w	r3, r2, #20
 800bd46:	2b1e      	cmp	r3, #30
 800bd48:	bfda      	itte	le
 800bd4a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800bd4e:	40da      	lsrle	r2, r3
 800bd50:	2201      	movgt	r2, #1
 800bd52:	2300      	movs	r3, #0
 800bd54:	4619      	mov	r1, r3
 800bd56:	4610      	mov	r0, r2
 800bd58:	ec41 0b10 	vmov	d0, r0, r1
 800bd5c:	b002      	add	sp, #8
 800bd5e:	4770      	bx	lr
 800bd60:	7ff00000 	.word	0x7ff00000

0800bd64 <__b2d>:
 800bd64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd68:	6906      	ldr	r6, [r0, #16]
 800bd6a:	f100 0814 	add.w	r8, r0, #20
 800bd6e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bd72:	1f37      	subs	r7, r6, #4
 800bd74:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bd78:	4610      	mov	r0, r2
 800bd7a:	f7ff fd53 	bl	800b824 <__hi0bits>
 800bd7e:	f1c0 0320 	rsb	r3, r0, #32
 800bd82:	280a      	cmp	r0, #10
 800bd84:	600b      	str	r3, [r1, #0]
 800bd86:	491b      	ldr	r1, [pc, #108]	@ (800bdf4 <__b2d+0x90>)
 800bd88:	dc15      	bgt.n	800bdb6 <__b2d+0x52>
 800bd8a:	f1c0 0c0b 	rsb	ip, r0, #11
 800bd8e:	fa22 f30c 	lsr.w	r3, r2, ip
 800bd92:	45b8      	cmp	r8, r7
 800bd94:	ea43 0501 	orr.w	r5, r3, r1
 800bd98:	bf34      	ite	cc
 800bd9a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bd9e:	2300      	movcs	r3, #0
 800bda0:	3015      	adds	r0, #21
 800bda2:	fa02 f000 	lsl.w	r0, r2, r0
 800bda6:	fa23 f30c 	lsr.w	r3, r3, ip
 800bdaa:	4303      	orrs	r3, r0
 800bdac:	461c      	mov	r4, r3
 800bdae:	ec45 4b10 	vmov	d0, r4, r5
 800bdb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdb6:	45b8      	cmp	r8, r7
 800bdb8:	bf3a      	itte	cc
 800bdba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bdbe:	f1a6 0708 	subcc.w	r7, r6, #8
 800bdc2:	2300      	movcs	r3, #0
 800bdc4:	380b      	subs	r0, #11
 800bdc6:	d012      	beq.n	800bdee <__b2d+0x8a>
 800bdc8:	f1c0 0120 	rsb	r1, r0, #32
 800bdcc:	fa23 f401 	lsr.w	r4, r3, r1
 800bdd0:	4082      	lsls	r2, r0
 800bdd2:	4322      	orrs	r2, r4
 800bdd4:	4547      	cmp	r7, r8
 800bdd6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800bdda:	bf8c      	ite	hi
 800bddc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bde0:	2200      	movls	r2, #0
 800bde2:	4083      	lsls	r3, r0
 800bde4:	40ca      	lsrs	r2, r1
 800bde6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bdea:	4313      	orrs	r3, r2
 800bdec:	e7de      	b.n	800bdac <__b2d+0x48>
 800bdee:	ea42 0501 	orr.w	r5, r2, r1
 800bdf2:	e7db      	b.n	800bdac <__b2d+0x48>
 800bdf4:	3ff00000 	.word	0x3ff00000

0800bdf8 <__d2b>:
 800bdf8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bdfc:	460f      	mov	r7, r1
 800bdfe:	2101      	movs	r1, #1
 800be00:	ec59 8b10 	vmov	r8, r9, d0
 800be04:	4616      	mov	r6, r2
 800be06:	f7ff fc1b 	bl	800b640 <_Balloc>
 800be0a:	4604      	mov	r4, r0
 800be0c:	b930      	cbnz	r0, 800be1c <__d2b+0x24>
 800be0e:	4602      	mov	r2, r0
 800be10:	4b23      	ldr	r3, [pc, #140]	@ (800bea0 <__d2b+0xa8>)
 800be12:	4824      	ldr	r0, [pc, #144]	@ (800bea4 <__d2b+0xac>)
 800be14:	f240 310f 	movw	r1, #783	@ 0x30f
 800be18:	f7fe f950 	bl	800a0bc <__assert_func>
 800be1c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800be20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800be24:	b10d      	cbz	r5, 800be2a <__d2b+0x32>
 800be26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800be2a:	9301      	str	r3, [sp, #4]
 800be2c:	f1b8 0300 	subs.w	r3, r8, #0
 800be30:	d023      	beq.n	800be7a <__d2b+0x82>
 800be32:	4668      	mov	r0, sp
 800be34:	9300      	str	r3, [sp, #0]
 800be36:	f7ff fd14 	bl	800b862 <__lo0bits>
 800be3a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800be3e:	b1d0      	cbz	r0, 800be76 <__d2b+0x7e>
 800be40:	f1c0 0320 	rsb	r3, r0, #32
 800be44:	fa02 f303 	lsl.w	r3, r2, r3
 800be48:	430b      	orrs	r3, r1
 800be4a:	40c2      	lsrs	r2, r0
 800be4c:	6163      	str	r3, [r4, #20]
 800be4e:	9201      	str	r2, [sp, #4]
 800be50:	9b01      	ldr	r3, [sp, #4]
 800be52:	61a3      	str	r3, [r4, #24]
 800be54:	2b00      	cmp	r3, #0
 800be56:	bf0c      	ite	eq
 800be58:	2201      	moveq	r2, #1
 800be5a:	2202      	movne	r2, #2
 800be5c:	6122      	str	r2, [r4, #16]
 800be5e:	b1a5      	cbz	r5, 800be8a <__d2b+0x92>
 800be60:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800be64:	4405      	add	r5, r0
 800be66:	603d      	str	r5, [r7, #0]
 800be68:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800be6c:	6030      	str	r0, [r6, #0]
 800be6e:	4620      	mov	r0, r4
 800be70:	b003      	add	sp, #12
 800be72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be76:	6161      	str	r1, [r4, #20]
 800be78:	e7ea      	b.n	800be50 <__d2b+0x58>
 800be7a:	a801      	add	r0, sp, #4
 800be7c:	f7ff fcf1 	bl	800b862 <__lo0bits>
 800be80:	9b01      	ldr	r3, [sp, #4]
 800be82:	6163      	str	r3, [r4, #20]
 800be84:	3020      	adds	r0, #32
 800be86:	2201      	movs	r2, #1
 800be88:	e7e8      	b.n	800be5c <__d2b+0x64>
 800be8a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800be8e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800be92:	6038      	str	r0, [r7, #0]
 800be94:	6918      	ldr	r0, [r3, #16]
 800be96:	f7ff fcc5 	bl	800b824 <__hi0bits>
 800be9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800be9e:	e7e5      	b.n	800be6c <__d2b+0x74>
 800bea0:	0800cfed 	.word	0x0800cfed
 800bea4:	0800d05e 	.word	0x0800d05e

0800bea8 <__ratio>:
 800bea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beac:	b085      	sub	sp, #20
 800beae:	e9cd 1000 	strd	r1, r0, [sp]
 800beb2:	a902      	add	r1, sp, #8
 800beb4:	f7ff ff56 	bl	800bd64 <__b2d>
 800beb8:	9800      	ldr	r0, [sp, #0]
 800beba:	a903      	add	r1, sp, #12
 800bebc:	ec55 4b10 	vmov	r4, r5, d0
 800bec0:	f7ff ff50 	bl	800bd64 <__b2d>
 800bec4:	9b01      	ldr	r3, [sp, #4]
 800bec6:	6919      	ldr	r1, [r3, #16]
 800bec8:	9b00      	ldr	r3, [sp, #0]
 800beca:	691b      	ldr	r3, [r3, #16]
 800becc:	1ac9      	subs	r1, r1, r3
 800bece:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bed2:	1a9b      	subs	r3, r3, r2
 800bed4:	ec5b ab10 	vmov	sl, fp, d0
 800bed8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800bedc:	2b00      	cmp	r3, #0
 800bede:	bfce      	itee	gt
 800bee0:	462a      	movgt	r2, r5
 800bee2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bee6:	465a      	movle	r2, fp
 800bee8:	462f      	mov	r7, r5
 800beea:	46d9      	mov	r9, fp
 800beec:	bfcc      	ite	gt
 800beee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bef2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800bef6:	464b      	mov	r3, r9
 800bef8:	4652      	mov	r2, sl
 800befa:	4620      	mov	r0, r4
 800befc:	4639      	mov	r1, r7
 800befe:	f7f4 fcbd 	bl	800087c <__aeabi_ddiv>
 800bf02:	ec41 0b10 	vmov	d0, r0, r1
 800bf06:	b005      	add	sp, #20
 800bf08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bf0c <__copybits>:
 800bf0c:	3901      	subs	r1, #1
 800bf0e:	b570      	push	{r4, r5, r6, lr}
 800bf10:	1149      	asrs	r1, r1, #5
 800bf12:	6914      	ldr	r4, [r2, #16]
 800bf14:	3101      	adds	r1, #1
 800bf16:	f102 0314 	add.w	r3, r2, #20
 800bf1a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bf1e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bf22:	1f05      	subs	r5, r0, #4
 800bf24:	42a3      	cmp	r3, r4
 800bf26:	d30c      	bcc.n	800bf42 <__copybits+0x36>
 800bf28:	1aa3      	subs	r3, r4, r2
 800bf2a:	3b11      	subs	r3, #17
 800bf2c:	f023 0303 	bic.w	r3, r3, #3
 800bf30:	3211      	adds	r2, #17
 800bf32:	42a2      	cmp	r2, r4
 800bf34:	bf88      	it	hi
 800bf36:	2300      	movhi	r3, #0
 800bf38:	4418      	add	r0, r3
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	4288      	cmp	r0, r1
 800bf3e:	d305      	bcc.n	800bf4c <__copybits+0x40>
 800bf40:	bd70      	pop	{r4, r5, r6, pc}
 800bf42:	f853 6b04 	ldr.w	r6, [r3], #4
 800bf46:	f845 6f04 	str.w	r6, [r5, #4]!
 800bf4a:	e7eb      	b.n	800bf24 <__copybits+0x18>
 800bf4c:	f840 3b04 	str.w	r3, [r0], #4
 800bf50:	e7f4      	b.n	800bf3c <__copybits+0x30>

0800bf52 <__any_on>:
 800bf52:	f100 0214 	add.w	r2, r0, #20
 800bf56:	6900      	ldr	r0, [r0, #16]
 800bf58:	114b      	asrs	r3, r1, #5
 800bf5a:	4298      	cmp	r0, r3
 800bf5c:	b510      	push	{r4, lr}
 800bf5e:	db11      	blt.n	800bf84 <__any_on+0x32>
 800bf60:	dd0a      	ble.n	800bf78 <__any_on+0x26>
 800bf62:	f011 011f 	ands.w	r1, r1, #31
 800bf66:	d007      	beq.n	800bf78 <__any_on+0x26>
 800bf68:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bf6c:	fa24 f001 	lsr.w	r0, r4, r1
 800bf70:	fa00 f101 	lsl.w	r1, r0, r1
 800bf74:	428c      	cmp	r4, r1
 800bf76:	d10b      	bne.n	800bf90 <__any_on+0x3e>
 800bf78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d803      	bhi.n	800bf88 <__any_on+0x36>
 800bf80:	2000      	movs	r0, #0
 800bf82:	bd10      	pop	{r4, pc}
 800bf84:	4603      	mov	r3, r0
 800bf86:	e7f7      	b.n	800bf78 <__any_on+0x26>
 800bf88:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bf8c:	2900      	cmp	r1, #0
 800bf8e:	d0f5      	beq.n	800bf7c <__any_on+0x2a>
 800bf90:	2001      	movs	r0, #1
 800bf92:	e7f6      	b.n	800bf82 <__any_on+0x30>

0800bf94 <_strtol_l.isra.0>:
 800bf94:	2b24      	cmp	r3, #36	@ 0x24
 800bf96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf9a:	4686      	mov	lr, r0
 800bf9c:	4690      	mov	r8, r2
 800bf9e:	d801      	bhi.n	800bfa4 <_strtol_l.isra.0+0x10>
 800bfa0:	2b01      	cmp	r3, #1
 800bfa2:	d106      	bne.n	800bfb2 <_strtol_l.isra.0+0x1e>
 800bfa4:	f7fe f840 	bl	800a028 <__errno>
 800bfa8:	2316      	movs	r3, #22
 800bfaa:	6003      	str	r3, [r0, #0]
 800bfac:	2000      	movs	r0, #0
 800bfae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfb2:	4834      	ldr	r0, [pc, #208]	@ (800c084 <_strtol_l.isra.0+0xf0>)
 800bfb4:	460d      	mov	r5, r1
 800bfb6:	462a      	mov	r2, r5
 800bfb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bfbc:	5d06      	ldrb	r6, [r0, r4]
 800bfbe:	f016 0608 	ands.w	r6, r6, #8
 800bfc2:	d1f8      	bne.n	800bfb6 <_strtol_l.isra.0+0x22>
 800bfc4:	2c2d      	cmp	r4, #45	@ 0x2d
 800bfc6:	d110      	bne.n	800bfea <_strtol_l.isra.0+0x56>
 800bfc8:	782c      	ldrb	r4, [r5, #0]
 800bfca:	2601      	movs	r6, #1
 800bfcc:	1c95      	adds	r5, r2, #2
 800bfce:	f033 0210 	bics.w	r2, r3, #16
 800bfd2:	d115      	bne.n	800c000 <_strtol_l.isra.0+0x6c>
 800bfd4:	2c30      	cmp	r4, #48	@ 0x30
 800bfd6:	d10d      	bne.n	800bff4 <_strtol_l.isra.0+0x60>
 800bfd8:	782a      	ldrb	r2, [r5, #0]
 800bfda:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bfde:	2a58      	cmp	r2, #88	@ 0x58
 800bfe0:	d108      	bne.n	800bff4 <_strtol_l.isra.0+0x60>
 800bfe2:	786c      	ldrb	r4, [r5, #1]
 800bfe4:	3502      	adds	r5, #2
 800bfe6:	2310      	movs	r3, #16
 800bfe8:	e00a      	b.n	800c000 <_strtol_l.isra.0+0x6c>
 800bfea:	2c2b      	cmp	r4, #43	@ 0x2b
 800bfec:	bf04      	itt	eq
 800bfee:	782c      	ldrbeq	r4, [r5, #0]
 800bff0:	1c95      	addeq	r5, r2, #2
 800bff2:	e7ec      	b.n	800bfce <_strtol_l.isra.0+0x3a>
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d1f6      	bne.n	800bfe6 <_strtol_l.isra.0+0x52>
 800bff8:	2c30      	cmp	r4, #48	@ 0x30
 800bffa:	bf14      	ite	ne
 800bffc:	230a      	movne	r3, #10
 800bffe:	2308      	moveq	r3, #8
 800c000:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c004:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c008:	2200      	movs	r2, #0
 800c00a:	fbbc f9f3 	udiv	r9, ip, r3
 800c00e:	4610      	mov	r0, r2
 800c010:	fb03 ca19 	mls	sl, r3, r9, ip
 800c014:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c018:	2f09      	cmp	r7, #9
 800c01a:	d80f      	bhi.n	800c03c <_strtol_l.isra.0+0xa8>
 800c01c:	463c      	mov	r4, r7
 800c01e:	42a3      	cmp	r3, r4
 800c020:	dd1b      	ble.n	800c05a <_strtol_l.isra.0+0xc6>
 800c022:	1c57      	adds	r7, r2, #1
 800c024:	d007      	beq.n	800c036 <_strtol_l.isra.0+0xa2>
 800c026:	4581      	cmp	r9, r0
 800c028:	d314      	bcc.n	800c054 <_strtol_l.isra.0+0xc0>
 800c02a:	d101      	bne.n	800c030 <_strtol_l.isra.0+0x9c>
 800c02c:	45a2      	cmp	sl, r4
 800c02e:	db11      	blt.n	800c054 <_strtol_l.isra.0+0xc0>
 800c030:	fb00 4003 	mla	r0, r0, r3, r4
 800c034:	2201      	movs	r2, #1
 800c036:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c03a:	e7eb      	b.n	800c014 <_strtol_l.isra.0+0x80>
 800c03c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c040:	2f19      	cmp	r7, #25
 800c042:	d801      	bhi.n	800c048 <_strtol_l.isra.0+0xb4>
 800c044:	3c37      	subs	r4, #55	@ 0x37
 800c046:	e7ea      	b.n	800c01e <_strtol_l.isra.0+0x8a>
 800c048:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c04c:	2f19      	cmp	r7, #25
 800c04e:	d804      	bhi.n	800c05a <_strtol_l.isra.0+0xc6>
 800c050:	3c57      	subs	r4, #87	@ 0x57
 800c052:	e7e4      	b.n	800c01e <_strtol_l.isra.0+0x8a>
 800c054:	f04f 32ff 	mov.w	r2, #4294967295
 800c058:	e7ed      	b.n	800c036 <_strtol_l.isra.0+0xa2>
 800c05a:	1c53      	adds	r3, r2, #1
 800c05c:	d108      	bne.n	800c070 <_strtol_l.isra.0+0xdc>
 800c05e:	2322      	movs	r3, #34	@ 0x22
 800c060:	f8ce 3000 	str.w	r3, [lr]
 800c064:	4660      	mov	r0, ip
 800c066:	f1b8 0f00 	cmp.w	r8, #0
 800c06a:	d0a0      	beq.n	800bfae <_strtol_l.isra.0+0x1a>
 800c06c:	1e69      	subs	r1, r5, #1
 800c06e:	e006      	b.n	800c07e <_strtol_l.isra.0+0xea>
 800c070:	b106      	cbz	r6, 800c074 <_strtol_l.isra.0+0xe0>
 800c072:	4240      	negs	r0, r0
 800c074:	f1b8 0f00 	cmp.w	r8, #0
 800c078:	d099      	beq.n	800bfae <_strtol_l.isra.0+0x1a>
 800c07a:	2a00      	cmp	r2, #0
 800c07c:	d1f6      	bne.n	800c06c <_strtol_l.isra.0+0xd8>
 800c07e:	f8c8 1000 	str.w	r1, [r8]
 800c082:	e794      	b.n	800bfae <_strtol_l.isra.0+0x1a>
 800c084:	0800d219 	.word	0x0800d219

0800c088 <_strtol_r>:
 800c088:	f7ff bf84 	b.w	800bf94 <_strtol_l.isra.0>

0800c08c <__ascii_wctomb>:
 800c08c:	4603      	mov	r3, r0
 800c08e:	4608      	mov	r0, r1
 800c090:	b141      	cbz	r1, 800c0a4 <__ascii_wctomb+0x18>
 800c092:	2aff      	cmp	r2, #255	@ 0xff
 800c094:	d904      	bls.n	800c0a0 <__ascii_wctomb+0x14>
 800c096:	228a      	movs	r2, #138	@ 0x8a
 800c098:	601a      	str	r2, [r3, #0]
 800c09a:	f04f 30ff 	mov.w	r0, #4294967295
 800c09e:	4770      	bx	lr
 800c0a0:	700a      	strb	r2, [r1, #0]
 800c0a2:	2001      	movs	r0, #1
 800c0a4:	4770      	bx	lr

0800c0a6 <__ssputs_r>:
 800c0a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0aa:	688e      	ldr	r6, [r1, #8]
 800c0ac:	461f      	mov	r7, r3
 800c0ae:	42be      	cmp	r6, r7
 800c0b0:	680b      	ldr	r3, [r1, #0]
 800c0b2:	4682      	mov	sl, r0
 800c0b4:	460c      	mov	r4, r1
 800c0b6:	4690      	mov	r8, r2
 800c0b8:	d82d      	bhi.n	800c116 <__ssputs_r+0x70>
 800c0ba:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c0be:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c0c2:	d026      	beq.n	800c112 <__ssputs_r+0x6c>
 800c0c4:	6965      	ldr	r5, [r4, #20]
 800c0c6:	6909      	ldr	r1, [r1, #16]
 800c0c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c0cc:	eba3 0901 	sub.w	r9, r3, r1
 800c0d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c0d4:	1c7b      	adds	r3, r7, #1
 800c0d6:	444b      	add	r3, r9
 800c0d8:	106d      	asrs	r5, r5, #1
 800c0da:	429d      	cmp	r5, r3
 800c0dc:	bf38      	it	cc
 800c0de:	461d      	movcc	r5, r3
 800c0e0:	0553      	lsls	r3, r2, #21
 800c0e2:	d527      	bpl.n	800c134 <__ssputs_r+0x8e>
 800c0e4:	4629      	mov	r1, r5
 800c0e6:	f7ff fa0d 	bl	800b504 <_malloc_r>
 800c0ea:	4606      	mov	r6, r0
 800c0ec:	b360      	cbz	r0, 800c148 <__ssputs_r+0xa2>
 800c0ee:	6921      	ldr	r1, [r4, #16]
 800c0f0:	464a      	mov	r2, r9
 800c0f2:	f7fd ffc6 	bl	800a082 <memcpy>
 800c0f6:	89a3      	ldrh	r3, [r4, #12]
 800c0f8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c0fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c100:	81a3      	strh	r3, [r4, #12]
 800c102:	6126      	str	r6, [r4, #16]
 800c104:	6165      	str	r5, [r4, #20]
 800c106:	444e      	add	r6, r9
 800c108:	eba5 0509 	sub.w	r5, r5, r9
 800c10c:	6026      	str	r6, [r4, #0]
 800c10e:	60a5      	str	r5, [r4, #8]
 800c110:	463e      	mov	r6, r7
 800c112:	42be      	cmp	r6, r7
 800c114:	d900      	bls.n	800c118 <__ssputs_r+0x72>
 800c116:	463e      	mov	r6, r7
 800c118:	6820      	ldr	r0, [r4, #0]
 800c11a:	4632      	mov	r2, r6
 800c11c:	4641      	mov	r1, r8
 800c11e:	f000 f9d7 	bl	800c4d0 <memmove>
 800c122:	68a3      	ldr	r3, [r4, #8]
 800c124:	1b9b      	subs	r3, r3, r6
 800c126:	60a3      	str	r3, [r4, #8]
 800c128:	6823      	ldr	r3, [r4, #0]
 800c12a:	4433      	add	r3, r6
 800c12c:	6023      	str	r3, [r4, #0]
 800c12e:	2000      	movs	r0, #0
 800c130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c134:	462a      	mov	r2, r5
 800c136:	f000 fa10 	bl	800c55a <_realloc_r>
 800c13a:	4606      	mov	r6, r0
 800c13c:	2800      	cmp	r0, #0
 800c13e:	d1e0      	bne.n	800c102 <__ssputs_r+0x5c>
 800c140:	6921      	ldr	r1, [r4, #16]
 800c142:	4650      	mov	r0, sl
 800c144:	f7fe fe30 	bl	800ada8 <_free_r>
 800c148:	230c      	movs	r3, #12
 800c14a:	f8ca 3000 	str.w	r3, [sl]
 800c14e:	89a3      	ldrh	r3, [r4, #12]
 800c150:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c154:	81a3      	strh	r3, [r4, #12]
 800c156:	f04f 30ff 	mov.w	r0, #4294967295
 800c15a:	e7e9      	b.n	800c130 <__ssputs_r+0x8a>

0800c15c <_svfiprintf_r>:
 800c15c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c160:	4698      	mov	r8, r3
 800c162:	898b      	ldrh	r3, [r1, #12]
 800c164:	061b      	lsls	r3, r3, #24
 800c166:	b09d      	sub	sp, #116	@ 0x74
 800c168:	4607      	mov	r7, r0
 800c16a:	460d      	mov	r5, r1
 800c16c:	4614      	mov	r4, r2
 800c16e:	d510      	bpl.n	800c192 <_svfiprintf_r+0x36>
 800c170:	690b      	ldr	r3, [r1, #16]
 800c172:	b973      	cbnz	r3, 800c192 <_svfiprintf_r+0x36>
 800c174:	2140      	movs	r1, #64	@ 0x40
 800c176:	f7ff f9c5 	bl	800b504 <_malloc_r>
 800c17a:	6028      	str	r0, [r5, #0]
 800c17c:	6128      	str	r0, [r5, #16]
 800c17e:	b930      	cbnz	r0, 800c18e <_svfiprintf_r+0x32>
 800c180:	230c      	movs	r3, #12
 800c182:	603b      	str	r3, [r7, #0]
 800c184:	f04f 30ff 	mov.w	r0, #4294967295
 800c188:	b01d      	add	sp, #116	@ 0x74
 800c18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c18e:	2340      	movs	r3, #64	@ 0x40
 800c190:	616b      	str	r3, [r5, #20]
 800c192:	2300      	movs	r3, #0
 800c194:	9309      	str	r3, [sp, #36]	@ 0x24
 800c196:	2320      	movs	r3, #32
 800c198:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c19c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c1a0:	2330      	movs	r3, #48	@ 0x30
 800c1a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c340 <_svfiprintf_r+0x1e4>
 800c1a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c1aa:	f04f 0901 	mov.w	r9, #1
 800c1ae:	4623      	mov	r3, r4
 800c1b0:	469a      	mov	sl, r3
 800c1b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1b6:	b10a      	cbz	r2, 800c1bc <_svfiprintf_r+0x60>
 800c1b8:	2a25      	cmp	r2, #37	@ 0x25
 800c1ba:	d1f9      	bne.n	800c1b0 <_svfiprintf_r+0x54>
 800c1bc:	ebba 0b04 	subs.w	fp, sl, r4
 800c1c0:	d00b      	beq.n	800c1da <_svfiprintf_r+0x7e>
 800c1c2:	465b      	mov	r3, fp
 800c1c4:	4622      	mov	r2, r4
 800c1c6:	4629      	mov	r1, r5
 800c1c8:	4638      	mov	r0, r7
 800c1ca:	f7ff ff6c 	bl	800c0a6 <__ssputs_r>
 800c1ce:	3001      	adds	r0, #1
 800c1d0:	f000 80a7 	beq.w	800c322 <_svfiprintf_r+0x1c6>
 800c1d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c1d6:	445a      	add	r2, fp
 800c1d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800c1da:	f89a 3000 	ldrb.w	r3, [sl]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	f000 809f 	beq.w	800c322 <_svfiprintf_r+0x1c6>
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	f04f 32ff 	mov.w	r2, #4294967295
 800c1ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1ee:	f10a 0a01 	add.w	sl, sl, #1
 800c1f2:	9304      	str	r3, [sp, #16]
 800c1f4:	9307      	str	r3, [sp, #28]
 800c1f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c1fa:	931a      	str	r3, [sp, #104]	@ 0x68
 800c1fc:	4654      	mov	r4, sl
 800c1fe:	2205      	movs	r2, #5
 800c200:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c204:	484e      	ldr	r0, [pc, #312]	@ (800c340 <_svfiprintf_r+0x1e4>)
 800c206:	f7f3 fffb 	bl	8000200 <memchr>
 800c20a:	9a04      	ldr	r2, [sp, #16]
 800c20c:	b9d8      	cbnz	r0, 800c246 <_svfiprintf_r+0xea>
 800c20e:	06d0      	lsls	r0, r2, #27
 800c210:	bf44      	itt	mi
 800c212:	2320      	movmi	r3, #32
 800c214:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c218:	0711      	lsls	r1, r2, #28
 800c21a:	bf44      	itt	mi
 800c21c:	232b      	movmi	r3, #43	@ 0x2b
 800c21e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c222:	f89a 3000 	ldrb.w	r3, [sl]
 800c226:	2b2a      	cmp	r3, #42	@ 0x2a
 800c228:	d015      	beq.n	800c256 <_svfiprintf_r+0xfa>
 800c22a:	9a07      	ldr	r2, [sp, #28]
 800c22c:	4654      	mov	r4, sl
 800c22e:	2000      	movs	r0, #0
 800c230:	f04f 0c0a 	mov.w	ip, #10
 800c234:	4621      	mov	r1, r4
 800c236:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c23a:	3b30      	subs	r3, #48	@ 0x30
 800c23c:	2b09      	cmp	r3, #9
 800c23e:	d94b      	bls.n	800c2d8 <_svfiprintf_r+0x17c>
 800c240:	b1b0      	cbz	r0, 800c270 <_svfiprintf_r+0x114>
 800c242:	9207      	str	r2, [sp, #28]
 800c244:	e014      	b.n	800c270 <_svfiprintf_r+0x114>
 800c246:	eba0 0308 	sub.w	r3, r0, r8
 800c24a:	fa09 f303 	lsl.w	r3, r9, r3
 800c24e:	4313      	orrs	r3, r2
 800c250:	9304      	str	r3, [sp, #16]
 800c252:	46a2      	mov	sl, r4
 800c254:	e7d2      	b.n	800c1fc <_svfiprintf_r+0xa0>
 800c256:	9b03      	ldr	r3, [sp, #12]
 800c258:	1d19      	adds	r1, r3, #4
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	9103      	str	r1, [sp, #12]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	bfbb      	ittet	lt
 800c262:	425b      	neglt	r3, r3
 800c264:	f042 0202 	orrlt.w	r2, r2, #2
 800c268:	9307      	strge	r3, [sp, #28]
 800c26a:	9307      	strlt	r3, [sp, #28]
 800c26c:	bfb8      	it	lt
 800c26e:	9204      	strlt	r2, [sp, #16]
 800c270:	7823      	ldrb	r3, [r4, #0]
 800c272:	2b2e      	cmp	r3, #46	@ 0x2e
 800c274:	d10a      	bne.n	800c28c <_svfiprintf_r+0x130>
 800c276:	7863      	ldrb	r3, [r4, #1]
 800c278:	2b2a      	cmp	r3, #42	@ 0x2a
 800c27a:	d132      	bne.n	800c2e2 <_svfiprintf_r+0x186>
 800c27c:	9b03      	ldr	r3, [sp, #12]
 800c27e:	1d1a      	adds	r2, r3, #4
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	9203      	str	r2, [sp, #12]
 800c284:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c288:	3402      	adds	r4, #2
 800c28a:	9305      	str	r3, [sp, #20]
 800c28c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c350 <_svfiprintf_r+0x1f4>
 800c290:	7821      	ldrb	r1, [r4, #0]
 800c292:	2203      	movs	r2, #3
 800c294:	4650      	mov	r0, sl
 800c296:	f7f3 ffb3 	bl	8000200 <memchr>
 800c29a:	b138      	cbz	r0, 800c2ac <_svfiprintf_r+0x150>
 800c29c:	9b04      	ldr	r3, [sp, #16]
 800c29e:	eba0 000a 	sub.w	r0, r0, sl
 800c2a2:	2240      	movs	r2, #64	@ 0x40
 800c2a4:	4082      	lsls	r2, r0
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	3401      	adds	r4, #1
 800c2aa:	9304      	str	r3, [sp, #16]
 800c2ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2b0:	4824      	ldr	r0, [pc, #144]	@ (800c344 <_svfiprintf_r+0x1e8>)
 800c2b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c2b6:	2206      	movs	r2, #6
 800c2b8:	f7f3 ffa2 	bl	8000200 <memchr>
 800c2bc:	2800      	cmp	r0, #0
 800c2be:	d036      	beq.n	800c32e <_svfiprintf_r+0x1d2>
 800c2c0:	4b21      	ldr	r3, [pc, #132]	@ (800c348 <_svfiprintf_r+0x1ec>)
 800c2c2:	bb1b      	cbnz	r3, 800c30c <_svfiprintf_r+0x1b0>
 800c2c4:	9b03      	ldr	r3, [sp, #12]
 800c2c6:	3307      	adds	r3, #7
 800c2c8:	f023 0307 	bic.w	r3, r3, #7
 800c2cc:	3308      	adds	r3, #8
 800c2ce:	9303      	str	r3, [sp, #12]
 800c2d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2d2:	4433      	add	r3, r6
 800c2d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2d6:	e76a      	b.n	800c1ae <_svfiprintf_r+0x52>
 800c2d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2dc:	460c      	mov	r4, r1
 800c2de:	2001      	movs	r0, #1
 800c2e0:	e7a8      	b.n	800c234 <_svfiprintf_r+0xd8>
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	3401      	adds	r4, #1
 800c2e6:	9305      	str	r3, [sp, #20]
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	f04f 0c0a 	mov.w	ip, #10
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2f4:	3a30      	subs	r2, #48	@ 0x30
 800c2f6:	2a09      	cmp	r2, #9
 800c2f8:	d903      	bls.n	800c302 <_svfiprintf_r+0x1a6>
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d0c6      	beq.n	800c28c <_svfiprintf_r+0x130>
 800c2fe:	9105      	str	r1, [sp, #20]
 800c300:	e7c4      	b.n	800c28c <_svfiprintf_r+0x130>
 800c302:	fb0c 2101 	mla	r1, ip, r1, r2
 800c306:	4604      	mov	r4, r0
 800c308:	2301      	movs	r3, #1
 800c30a:	e7f0      	b.n	800c2ee <_svfiprintf_r+0x192>
 800c30c:	ab03      	add	r3, sp, #12
 800c30e:	9300      	str	r3, [sp, #0]
 800c310:	462a      	mov	r2, r5
 800c312:	4b0e      	ldr	r3, [pc, #56]	@ (800c34c <_svfiprintf_r+0x1f0>)
 800c314:	a904      	add	r1, sp, #16
 800c316:	4638      	mov	r0, r7
 800c318:	f7fc fec8 	bl	80090ac <_printf_float>
 800c31c:	1c42      	adds	r2, r0, #1
 800c31e:	4606      	mov	r6, r0
 800c320:	d1d6      	bne.n	800c2d0 <_svfiprintf_r+0x174>
 800c322:	89ab      	ldrh	r3, [r5, #12]
 800c324:	065b      	lsls	r3, r3, #25
 800c326:	f53f af2d 	bmi.w	800c184 <_svfiprintf_r+0x28>
 800c32a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c32c:	e72c      	b.n	800c188 <_svfiprintf_r+0x2c>
 800c32e:	ab03      	add	r3, sp, #12
 800c330:	9300      	str	r3, [sp, #0]
 800c332:	462a      	mov	r2, r5
 800c334:	4b05      	ldr	r3, [pc, #20]	@ (800c34c <_svfiprintf_r+0x1f0>)
 800c336:	a904      	add	r1, sp, #16
 800c338:	4638      	mov	r0, r7
 800c33a:	f7fd f94f 	bl	80095dc <_printf_i>
 800c33e:	e7ed      	b.n	800c31c <_svfiprintf_r+0x1c0>
 800c340:	0800d0b7 	.word	0x0800d0b7
 800c344:	0800d0c1 	.word	0x0800d0c1
 800c348:	080090ad 	.word	0x080090ad
 800c34c:	0800c0a7 	.word	0x0800c0a7
 800c350:	0800d0bd 	.word	0x0800d0bd

0800c354 <__sflush_r>:
 800c354:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c35c:	0716      	lsls	r6, r2, #28
 800c35e:	4605      	mov	r5, r0
 800c360:	460c      	mov	r4, r1
 800c362:	d454      	bmi.n	800c40e <__sflush_r+0xba>
 800c364:	684b      	ldr	r3, [r1, #4]
 800c366:	2b00      	cmp	r3, #0
 800c368:	dc02      	bgt.n	800c370 <__sflush_r+0x1c>
 800c36a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	dd48      	ble.n	800c402 <__sflush_r+0xae>
 800c370:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c372:	2e00      	cmp	r6, #0
 800c374:	d045      	beq.n	800c402 <__sflush_r+0xae>
 800c376:	2300      	movs	r3, #0
 800c378:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c37c:	682f      	ldr	r7, [r5, #0]
 800c37e:	6a21      	ldr	r1, [r4, #32]
 800c380:	602b      	str	r3, [r5, #0]
 800c382:	d030      	beq.n	800c3e6 <__sflush_r+0x92>
 800c384:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c386:	89a3      	ldrh	r3, [r4, #12]
 800c388:	0759      	lsls	r1, r3, #29
 800c38a:	d505      	bpl.n	800c398 <__sflush_r+0x44>
 800c38c:	6863      	ldr	r3, [r4, #4]
 800c38e:	1ad2      	subs	r2, r2, r3
 800c390:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c392:	b10b      	cbz	r3, 800c398 <__sflush_r+0x44>
 800c394:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c396:	1ad2      	subs	r2, r2, r3
 800c398:	2300      	movs	r3, #0
 800c39a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c39c:	6a21      	ldr	r1, [r4, #32]
 800c39e:	4628      	mov	r0, r5
 800c3a0:	47b0      	blx	r6
 800c3a2:	1c43      	adds	r3, r0, #1
 800c3a4:	89a3      	ldrh	r3, [r4, #12]
 800c3a6:	d106      	bne.n	800c3b6 <__sflush_r+0x62>
 800c3a8:	6829      	ldr	r1, [r5, #0]
 800c3aa:	291d      	cmp	r1, #29
 800c3ac:	d82b      	bhi.n	800c406 <__sflush_r+0xb2>
 800c3ae:	4a2a      	ldr	r2, [pc, #168]	@ (800c458 <__sflush_r+0x104>)
 800c3b0:	40ca      	lsrs	r2, r1
 800c3b2:	07d6      	lsls	r6, r2, #31
 800c3b4:	d527      	bpl.n	800c406 <__sflush_r+0xb2>
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	6062      	str	r2, [r4, #4]
 800c3ba:	04d9      	lsls	r1, r3, #19
 800c3bc:	6922      	ldr	r2, [r4, #16]
 800c3be:	6022      	str	r2, [r4, #0]
 800c3c0:	d504      	bpl.n	800c3cc <__sflush_r+0x78>
 800c3c2:	1c42      	adds	r2, r0, #1
 800c3c4:	d101      	bne.n	800c3ca <__sflush_r+0x76>
 800c3c6:	682b      	ldr	r3, [r5, #0]
 800c3c8:	b903      	cbnz	r3, 800c3cc <__sflush_r+0x78>
 800c3ca:	6560      	str	r0, [r4, #84]	@ 0x54
 800c3cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c3ce:	602f      	str	r7, [r5, #0]
 800c3d0:	b1b9      	cbz	r1, 800c402 <__sflush_r+0xae>
 800c3d2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c3d6:	4299      	cmp	r1, r3
 800c3d8:	d002      	beq.n	800c3e0 <__sflush_r+0x8c>
 800c3da:	4628      	mov	r0, r5
 800c3dc:	f7fe fce4 	bl	800ada8 <_free_r>
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	6363      	str	r3, [r4, #52]	@ 0x34
 800c3e4:	e00d      	b.n	800c402 <__sflush_r+0xae>
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	4628      	mov	r0, r5
 800c3ea:	47b0      	blx	r6
 800c3ec:	4602      	mov	r2, r0
 800c3ee:	1c50      	adds	r0, r2, #1
 800c3f0:	d1c9      	bne.n	800c386 <__sflush_r+0x32>
 800c3f2:	682b      	ldr	r3, [r5, #0]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d0c6      	beq.n	800c386 <__sflush_r+0x32>
 800c3f8:	2b1d      	cmp	r3, #29
 800c3fa:	d001      	beq.n	800c400 <__sflush_r+0xac>
 800c3fc:	2b16      	cmp	r3, #22
 800c3fe:	d11e      	bne.n	800c43e <__sflush_r+0xea>
 800c400:	602f      	str	r7, [r5, #0]
 800c402:	2000      	movs	r0, #0
 800c404:	e022      	b.n	800c44c <__sflush_r+0xf8>
 800c406:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c40a:	b21b      	sxth	r3, r3
 800c40c:	e01b      	b.n	800c446 <__sflush_r+0xf2>
 800c40e:	690f      	ldr	r7, [r1, #16]
 800c410:	2f00      	cmp	r7, #0
 800c412:	d0f6      	beq.n	800c402 <__sflush_r+0xae>
 800c414:	0793      	lsls	r3, r2, #30
 800c416:	680e      	ldr	r6, [r1, #0]
 800c418:	bf08      	it	eq
 800c41a:	694b      	ldreq	r3, [r1, #20]
 800c41c:	600f      	str	r7, [r1, #0]
 800c41e:	bf18      	it	ne
 800c420:	2300      	movne	r3, #0
 800c422:	eba6 0807 	sub.w	r8, r6, r7
 800c426:	608b      	str	r3, [r1, #8]
 800c428:	f1b8 0f00 	cmp.w	r8, #0
 800c42c:	dde9      	ble.n	800c402 <__sflush_r+0xae>
 800c42e:	6a21      	ldr	r1, [r4, #32]
 800c430:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c432:	4643      	mov	r3, r8
 800c434:	463a      	mov	r2, r7
 800c436:	4628      	mov	r0, r5
 800c438:	47b0      	blx	r6
 800c43a:	2800      	cmp	r0, #0
 800c43c:	dc08      	bgt.n	800c450 <__sflush_r+0xfc>
 800c43e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c442:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c446:	81a3      	strh	r3, [r4, #12]
 800c448:	f04f 30ff 	mov.w	r0, #4294967295
 800c44c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c450:	4407      	add	r7, r0
 800c452:	eba8 0800 	sub.w	r8, r8, r0
 800c456:	e7e7      	b.n	800c428 <__sflush_r+0xd4>
 800c458:	20400001 	.word	0x20400001

0800c45c <_fflush_r>:
 800c45c:	b538      	push	{r3, r4, r5, lr}
 800c45e:	690b      	ldr	r3, [r1, #16]
 800c460:	4605      	mov	r5, r0
 800c462:	460c      	mov	r4, r1
 800c464:	b913      	cbnz	r3, 800c46c <_fflush_r+0x10>
 800c466:	2500      	movs	r5, #0
 800c468:	4628      	mov	r0, r5
 800c46a:	bd38      	pop	{r3, r4, r5, pc}
 800c46c:	b118      	cbz	r0, 800c476 <_fflush_r+0x1a>
 800c46e:	6a03      	ldr	r3, [r0, #32]
 800c470:	b90b      	cbnz	r3, 800c476 <_fflush_r+0x1a>
 800c472:	f7fd fc6b 	bl	8009d4c <__sinit>
 800c476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d0f3      	beq.n	800c466 <_fflush_r+0xa>
 800c47e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c480:	07d0      	lsls	r0, r2, #31
 800c482:	d404      	bmi.n	800c48e <_fflush_r+0x32>
 800c484:	0599      	lsls	r1, r3, #22
 800c486:	d402      	bmi.n	800c48e <_fflush_r+0x32>
 800c488:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c48a:	f7fd fdf8 	bl	800a07e <__retarget_lock_acquire_recursive>
 800c48e:	4628      	mov	r0, r5
 800c490:	4621      	mov	r1, r4
 800c492:	f7ff ff5f 	bl	800c354 <__sflush_r>
 800c496:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c498:	07da      	lsls	r2, r3, #31
 800c49a:	4605      	mov	r5, r0
 800c49c:	d4e4      	bmi.n	800c468 <_fflush_r+0xc>
 800c49e:	89a3      	ldrh	r3, [r4, #12]
 800c4a0:	059b      	lsls	r3, r3, #22
 800c4a2:	d4e1      	bmi.n	800c468 <_fflush_r+0xc>
 800c4a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c4a6:	f7fd fdeb 	bl	800a080 <__retarget_lock_release_recursive>
 800c4aa:	e7dd      	b.n	800c468 <_fflush_r+0xc>

0800c4ac <fiprintf>:
 800c4ac:	b40e      	push	{r1, r2, r3}
 800c4ae:	b503      	push	{r0, r1, lr}
 800c4b0:	4601      	mov	r1, r0
 800c4b2:	ab03      	add	r3, sp, #12
 800c4b4:	4805      	ldr	r0, [pc, #20]	@ (800c4cc <fiprintf+0x20>)
 800c4b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4ba:	6800      	ldr	r0, [r0, #0]
 800c4bc:	9301      	str	r3, [sp, #4]
 800c4be:	f000 f8a3 	bl	800c608 <_vfiprintf_r>
 800c4c2:	b002      	add	sp, #8
 800c4c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4c8:	b003      	add	sp, #12
 800c4ca:	4770      	bx	lr
 800c4cc:	20000208 	.word	0x20000208

0800c4d0 <memmove>:
 800c4d0:	4288      	cmp	r0, r1
 800c4d2:	b510      	push	{r4, lr}
 800c4d4:	eb01 0402 	add.w	r4, r1, r2
 800c4d8:	d902      	bls.n	800c4e0 <memmove+0x10>
 800c4da:	4284      	cmp	r4, r0
 800c4dc:	4623      	mov	r3, r4
 800c4de:	d807      	bhi.n	800c4f0 <memmove+0x20>
 800c4e0:	1e43      	subs	r3, r0, #1
 800c4e2:	42a1      	cmp	r1, r4
 800c4e4:	d008      	beq.n	800c4f8 <memmove+0x28>
 800c4e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c4ee:	e7f8      	b.n	800c4e2 <memmove+0x12>
 800c4f0:	4402      	add	r2, r0
 800c4f2:	4601      	mov	r1, r0
 800c4f4:	428a      	cmp	r2, r1
 800c4f6:	d100      	bne.n	800c4fa <memmove+0x2a>
 800c4f8:	bd10      	pop	{r4, pc}
 800c4fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c4fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c502:	e7f7      	b.n	800c4f4 <memmove+0x24>

0800c504 <_sbrk_r>:
 800c504:	b538      	push	{r3, r4, r5, lr}
 800c506:	4d06      	ldr	r5, [pc, #24]	@ (800c520 <_sbrk_r+0x1c>)
 800c508:	2300      	movs	r3, #0
 800c50a:	4604      	mov	r4, r0
 800c50c:	4608      	mov	r0, r1
 800c50e:	602b      	str	r3, [r5, #0]
 800c510:	f7f6 fd80 	bl	8003014 <_sbrk>
 800c514:	1c43      	adds	r3, r0, #1
 800c516:	d102      	bne.n	800c51e <_sbrk_r+0x1a>
 800c518:	682b      	ldr	r3, [r5, #0]
 800c51a:	b103      	cbz	r3, 800c51e <_sbrk_r+0x1a>
 800c51c:	6023      	str	r3, [r4, #0]
 800c51e:	bd38      	pop	{r3, r4, r5, pc}
 800c520:	200008c4 	.word	0x200008c4

0800c524 <abort>:
 800c524:	b508      	push	{r3, lr}
 800c526:	2006      	movs	r0, #6
 800c528:	f000 fa42 	bl	800c9b0 <raise>
 800c52c:	2001      	movs	r0, #1
 800c52e:	f7f6 fcf9 	bl	8002f24 <_exit>

0800c532 <_calloc_r>:
 800c532:	b570      	push	{r4, r5, r6, lr}
 800c534:	fba1 5402 	umull	r5, r4, r1, r2
 800c538:	b934      	cbnz	r4, 800c548 <_calloc_r+0x16>
 800c53a:	4629      	mov	r1, r5
 800c53c:	f7fe ffe2 	bl	800b504 <_malloc_r>
 800c540:	4606      	mov	r6, r0
 800c542:	b928      	cbnz	r0, 800c550 <_calloc_r+0x1e>
 800c544:	4630      	mov	r0, r6
 800c546:	bd70      	pop	{r4, r5, r6, pc}
 800c548:	220c      	movs	r2, #12
 800c54a:	6002      	str	r2, [r0, #0]
 800c54c:	2600      	movs	r6, #0
 800c54e:	e7f9      	b.n	800c544 <_calloc_r+0x12>
 800c550:	462a      	mov	r2, r5
 800c552:	4621      	mov	r1, r4
 800c554:	f7fd fc95 	bl	8009e82 <memset>
 800c558:	e7f4      	b.n	800c544 <_calloc_r+0x12>

0800c55a <_realloc_r>:
 800c55a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c55e:	4607      	mov	r7, r0
 800c560:	4614      	mov	r4, r2
 800c562:	460d      	mov	r5, r1
 800c564:	b921      	cbnz	r1, 800c570 <_realloc_r+0x16>
 800c566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c56a:	4611      	mov	r1, r2
 800c56c:	f7fe bfca 	b.w	800b504 <_malloc_r>
 800c570:	b92a      	cbnz	r2, 800c57e <_realloc_r+0x24>
 800c572:	f7fe fc19 	bl	800ada8 <_free_r>
 800c576:	4625      	mov	r5, r4
 800c578:	4628      	mov	r0, r5
 800c57a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c57e:	f000 fa33 	bl	800c9e8 <_malloc_usable_size_r>
 800c582:	4284      	cmp	r4, r0
 800c584:	4606      	mov	r6, r0
 800c586:	d802      	bhi.n	800c58e <_realloc_r+0x34>
 800c588:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c58c:	d8f4      	bhi.n	800c578 <_realloc_r+0x1e>
 800c58e:	4621      	mov	r1, r4
 800c590:	4638      	mov	r0, r7
 800c592:	f7fe ffb7 	bl	800b504 <_malloc_r>
 800c596:	4680      	mov	r8, r0
 800c598:	b908      	cbnz	r0, 800c59e <_realloc_r+0x44>
 800c59a:	4645      	mov	r5, r8
 800c59c:	e7ec      	b.n	800c578 <_realloc_r+0x1e>
 800c59e:	42b4      	cmp	r4, r6
 800c5a0:	4622      	mov	r2, r4
 800c5a2:	4629      	mov	r1, r5
 800c5a4:	bf28      	it	cs
 800c5a6:	4632      	movcs	r2, r6
 800c5a8:	f7fd fd6b 	bl	800a082 <memcpy>
 800c5ac:	4629      	mov	r1, r5
 800c5ae:	4638      	mov	r0, r7
 800c5b0:	f7fe fbfa 	bl	800ada8 <_free_r>
 800c5b4:	e7f1      	b.n	800c59a <_realloc_r+0x40>

0800c5b6 <__sfputc_r>:
 800c5b6:	6893      	ldr	r3, [r2, #8]
 800c5b8:	3b01      	subs	r3, #1
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	b410      	push	{r4}
 800c5be:	6093      	str	r3, [r2, #8]
 800c5c0:	da08      	bge.n	800c5d4 <__sfputc_r+0x1e>
 800c5c2:	6994      	ldr	r4, [r2, #24]
 800c5c4:	42a3      	cmp	r3, r4
 800c5c6:	db01      	blt.n	800c5cc <__sfputc_r+0x16>
 800c5c8:	290a      	cmp	r1, #10
 800c5ca:	d103      	bne.n	800c5d4 <__sfputc_r+0x1e>
 800c5cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5d0:	f000 b932 	b.w	800c838 <__swbuf_r>
 800c5d4:	6813      	ldr	r3, [r2, #0]
 800c5d6:	1c58      	adds	r0, r3, #1
 800c5d8:	6010      	str	r0, [r2, #0]
 800c5da:	7019      	strb	r1, [r3, #0]
 800c5dc:	4608      	mov	r0, r1
 800c5de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5e2:	4770      	bx	lr

0800c5e4 <__sfputs_r>:
 800c5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5e6:	4606      	mov	r6, r0
 800c5e8:	460f      	mov	r7, r1
 800c5ea:	4614      	mov	r4, r2
 800c5ec:	18d5      	adds	r5, r2, r3
 800c5ee:	42ac      	cmp	r4, r5
 800c5f0:	d101      	bne.n	800c5f6 <__sfputs_r+0x12>
 800c5f2:	2000      	movs	r0, #0
 800c5f4:	e007      	b.n	800c606 <__sfputs_r+0x22>
 800c5f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5fa:	463a      	mov	r2, r7
 800c5fc:	4630      	mov	r0, r6
 800c5fe:	f7ff ffda 	bl	800c5b6 <__sfputc_r>
 800c602:	1c43      	adds	r3, r0, #1
 800c604:	d1f3      	bne.n	800c5ee <__sfputs_r+0xa>
 800c606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c608 <_vfiprintf_r>:
 800c608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c60c:	460d      	mov	r5, r1
 800c60e:	b09d      	sub	sp, #116	@ 0x74
 800c610:	4614      	mov	r4, r2
 800c612:	4698      	mov	r8, r3
 800c614:	4606      	mov	r6, r0
 800c616:	b118      	cbz	r0, 800c620 <_vfiprintf_r+0x18>
 800c618:	6a03      	ldr	r3, [r0, #32]
 800c61a:	b90b      	cbnz	r3, 800c620 <_vfiprintf_r+0x18>
 800c61c:	f7fd fb96 	bl	8009d4c <__sinit>
 800c620:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c622:	07d9      	lsls	r1, r3, #31
 800c624:	d405      	bmi.n	800c632 <_vfiprintf_r+0x2a>
 800c626:	89ab      	ldrh	r3, [r5, #12]
 800c628:	059a      	lsls	r2, r3, #22
 800c62a:	d402      	bmi.n	800c632 <_vfiprintf_r+0x2a>
 800c62c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c62e:	f7fd fd26 	bl	800a07e <__retarget_lock_acquire_recursive>
 800c632:	89ab      	ldrh	r3, [r5, #12]
 800c634:	071b      	lsls	r3, r3, #28
 800c636:	d501      	bpl.n	800c63c <_vfiprintf_r+0x34>
 800c638:	692b      	ldr	r3, [r5, #16]
 800c63a:	b99b      	cbnz	r3, 800c664 <_vfiprintf_r+0x5c>
 800c63c:	4629      	mov	r1, r5
 800c63e:	4630      	mov	r0, r6
 800c640:	f000 f938 	bl	800c8b4 <__swsetup_r>
 800c644:	b170      	cbz	r0, 800c664 <_vfiprintf_r+0x5c>
 800c646:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c648:	07dc      	lsls	r4, r3, #31
 800c64a:	d504      	bpl.n	800c656 <_vfiprintf_r+0x4e>
 800c64c:	f04f 30ff 	mov.w	r0, #4294967295
 800c650:	b01d      	add	sp, #116	@ 0x74
 800c652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c656:	89ab      	ldrh	r3, [r5, #12]
 800c658:	0598      	lsls	r0, r3, #22
 800c65a:	d4f7      	bmi.n	800c64c <_vfiprintf_r+0x44>
 800c65c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c65e:	f7fd fd0f 	bl	800a080 <__retarget_lock_release_recursive>
 800c662:	e7f3      	b.n	800c64c <_vfiprintf_r+0x44>
 800c664:	2300      	movs	r3, #0
 800c666:	9309      	str	r3, [sp, #36]	@ 0x24
 800c668:	2320      	movs	r3, #32
 800c66a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c66e:	f8cd 800c 	str.w	r8, [sp, #12]
 800c672:	2330      	movs	r3, #48	@ 0x30
 800c674:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c824 <_vfiprintf_r+0x21c>
 800c678:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c67c:	f04f 0901 	mov.w	r9, #1
 800c680:	4623      	mov	r3, r4
 800c682:	469a      	mov	sl, r3
 800c684:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c688:	b10a      	cbz	r2, 800c68e <_vfiprintf_r+0x86>
 800c68a:	2a25      	cmp	r2, #37	@ 0x25
 800c68c:	d1f9      	bne.n	800c682 <_vfiprintf_r+0x7a>
 800c68e:	ebba 0b04 	subs.w	fp, sl, r4
 800c692:	d00b      	beq.n	800c6ac <_vfiprintf_r+0xa4>
 800c694:	465b      	mov	r3, fp
 800c696:	4622      	mov	r2, r4
 800c698:	4629      	mov	r1, r5
 800c69a:	4630      	mov	r0, r6
 800c69c:	f7ff ffa2 	bl	800c5e4 <__sfputs_r>
 800c6a0:	3001      	adds	r0, #1
 800c6a2:	f000 80a7 	beq.w	800c7f4 <_vfiprintf_r+0x1ec>
 800c6a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6a8:	445a      	add	r2, fp
 800c6aa:	9209      	str	r2, [sp, #36]	@ 0x24
 800c6ac:	f89a 3000 	ldrb.w	r3, [sl]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	f000 809f 	beq.w	800c7f4 <_vfiprintf_r+0x1ec>
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	f04f 32ff 	mov.w	r2, #4294967295
 800c6bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c6c0:	f10a 0a01 	add.w	sl, sl, #1
 800c6c4:	9304      	str	r3, [sp, #16]
 800c6c6:	9307      	str	r3, [sp, #28]
 800c6c8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c6cc:	931a      	str	r3, [sp, #104]	@ 0x68
 800c6ce:	4654      	mov	r4, sl
 800c6d0:	2205      	movs	r2, #5
 800c6d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6d6:	4853      	ldr	r0, [pc, #332]	@ (800c824 <_vfiprintf_r+0x21c>)
 800c6d8:	f7f3 fd92 	bl	8000200 <memchr>
 800c6dc:	9a04      	ldr	r2, [sp, #16]
 800c6de:	b9d8      	cbnz	r0, 800c718 <_vfiprintf_r+0x110>
 800c6e0:	06d1      	lsls	r1, r2, #27
 800c6e2:	bf44      	itt	mi
 800c6e4:	2320      	movmi	r3, #32
 800c6e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6ea:	0713      	lsls	r3, r2, #28
 800c6ec:	bf44      	itt	mi
 800c6ee:	232b      	movmi	r3, #43	@ 0x2b
 800c6f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c6f4:	f89a 3000 	ldrb.w	r3, [sl]
 800c6f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800c6fa:	d015      	beq.n	800c728 <_vfiprintf_r+0x120>
 800c6fc:	9a07      	ldr	r2, [sp, #28]
 800c6fe:	4654      	mov	r4, sl
 800c700:	2000      	movs	r0, #0
 800c702:	f04f 0c0a 	mov.w	ip, #10
 800c706:	4621      	mov	r1, r4
 800c708:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c70c:	3b30      	subs	r3, #48	@ 0x30
 800c70e:	2b09      	cmp	r3, #9
 800c710:	d94b      	bls.n	800c7aa <_vfiprintf_r+0x1a2>
 800c712:	b1b0      	cbz	r0, 800c742 <_vfiprintf_r+0x13a>
 800c714:	9207      	str	r2, [sp, #28]
 800c716:	e014      	b.n	800c742 <_vfiprintf_r+0x13a>
 800c718:	eba0 0308 	sub.w	r3, r0, r8
 800c71c:	fa09 f303 	lsl.w	r3, r9, r3
 800c720:	4313      	orrs	r3, r2
 800c722:	9304      	str	r3, [sp, #16]
 800c724:	46a2      	mov	sl, r4
 800c726:	e7d2      	b.n	800c6ce <_vfiprintf_r+0xc6>
 800c728:	9b03      	ldr	r3, [sp, #12]
 800c72a:	1d19      	adds	r1, r3, #4
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	9103      	str	r1, [sp, #12]
 800c730:	2b00      	cmp	r3, #0
 800c732:	bfbb      	ittet	lt
 800c734:	425b      	neglt	r3, r3
 800c736:	f042 0202 	orrlt.w	r2, r2, #2
 800c73a:	9307      	strge	r3, [sp, #28]
 800c73c:	9307      	strlt	r3, [sp, #28]
 800c73e:	bfb8      	it	lt
 800c740:	9204      	strlt	r2, [sp, #16]
 800c742:	7823      	ldrb	r3, [r4, #0]
 800c744:	2b2e      	cmp	r3, #46	@ 0x2e
 800c746:	d10a      	bne.n	800c75e <_vfiprintf_r+0x156>
 800c748:	7863      	ldrb	r3, [r4, #1]
 800c74a:	2b2a      	cmp	r3, #42	@ 0x2a
 800c74c:	d132      	bne.n	800c7b4 <_vfiprintf_r+0x1ac>
 800c74e:	9b03      	ldr	r3, [sp, #12]
 800c750:	1d1a      	adds	r2, r3, #4
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	9203      	str	r2, [sp, #12]
 800c756:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c75a:	3402      	adds	r4, #2
 800c75c:	9305      	str	r3, [sp, #20]
 800c75e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c834 <_vfiprintf_r+0x22c>
 800c762:	7821      	ldrb	r1, [r4, #0]
 800c764:	2203      	movs	r2, #3
 800c766:	4650      	mov	r0, sl
 800c768:	f7f3 fd4a 	bl	8000200 <memchr>
 800c76c:	b138      	cbz	r0, 800c77e <_vfiprintf_r+0x176>
 800c76e:	9b04      	ldr	r3, [sp, #16]
 800c770:	eba0 000a 	sub.w	r0, r0, sl
 800c774:	2240      	movs	r2, #64	@ 0x40
 800c776:	4082      	lsls	r2, r0
 800c778:	4313      	orrs	r3, r2
 800c77a:	3401      	adds	r4, #1
 800c77c:	9304      	str	r3, [sp, #16]
 800c77e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c782:	4829      	ldr	r0, [pc, #164]	@ (800c828 <_vfiprintf_r+0x220>)
 800c784:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c788:	2206      	movs	r2, #6
 800c78a:	f7f3 fd39 	bl	8000200 <memchr>
 800c78e:	2800      	cmp	r0, #0
 800c790:	d03f      	beq.n	800c812 <_vfiprintf_r+0x20a>
 800c792:	4b26      	ldr	r3, [pc, #152]	@ (800c82c <_vfiprintf_r+0x224>)
 800c794:	bb1b      	cbnz	r3, 800c7de <_vfiprintf_r+0x1d6>
 800c796:	9b03      	ldr	r3, [sp, #12]
 800c798:	3307      	adds	r3, #7
 800c79a:	f023 0307 	bic.w	r3, r3, #7
 800c79e:	3308      	adds	r3, #8
 800c7a0:	9303      	str	r3, [sp, #12]
 800c7a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7a4:	443b      	add	r3, r7
 800c7a6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7a8:	e76a      	b.n	800c680 <_vfiprintf_r+0x78>
 800c7aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800c7ae:	460c      	mov	r4, r1
 800c7b0:	2001      	movs	r0, #1
 800c7b2:	e7a8      	b.n	800c706 <_vfiprintf_r+0xfe>
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	3401      	adds	r4, #1
 800c7b8:	9305      	str	r3, [sp, #20]
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	f04f 0c0a 	mov.w	ip, #10
 800c7c0:	4620      	mov	r0, r4
 800c7c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7c6:	3a30      	subs	r2, #48	@ 0x30
 800c7c8:	2a09      	cmp	r2, #9
 800c7ca:	d903      	bls.n	800c7d4 <_vfiprintf_r+0x1cc>
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d0c6      	beq.n	800c75e <_vfiprintf_r+0x156>
 800c7d0:	9105      	str	r1, [sp, #20]
 800c7d2:	e7c4      	b.n	800c75e <_vfiprintf_r+0x156>
 800c7d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7d8:	4604      	mov	r4, r0
 800c7da:	2301      	movs	r3, #1
 800c7dc:	e7f0      	b.n	800c7c0 <_vfiprintf_r+0x1b8>
 800c7de:	ab03      	add	r3, sp, #12
 800c7e0:	9300      	str	r3, [sp, #0]
 800c7e2:	462a      	mov	r2, r5
 800c7e4:	4b12      	ldr	r3, [pc, #72]	@ (800c830 <_vfiprintf_r+0x228>)
 800c7e6:	a904      	add	r1, sp, #16
 800c7e8:	4630      	mov	r0, r6
 800c7ea:	f7fc fc5f 	bl	80090ac <_printf_float>
 800c7ee:	4607      	mov	r7, r0
 800c7f0:	1c78      	adds	r0, r7, #1
 800c7f2:	d1d6      	bne.n	800c7a2 <_vfiprintf_r+0x19a>
 800c7f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c7f6:	07d9      	lsls	r1, r3, #31
 800c7f8:	d405      	bmi.n	800c806 <_vfiprintf_r+0x1fe>
 800c7fa:	89ab      	ldrh	r3, [r5, #12]
 800c7fc:	059a      	lsls	r2, r3, #22
 800c7fe:	d402      	bmi.n	800c806 <_vfiprintf_r+0x1fe>
 800c800:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c802:	f7fd fc3d 	bl	800a080 <__retarget_lock_release_recursive>
 800c806:	89ab      	ldrh	r3, [r5, #12]
 800c808:	065b      	lsls	r3, r3, #25
 800c80a:	f53f af1f 	bmi.w	800c64c <_vfiprintf_r+0x44>
 800c80e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c810:	e71e      	b.n	800c650 <_vfiprintf_r+0x48>
 800c812:	ab03      	add	r3, sp, #12
 800c814:	9300      	str	r3, [sp, #0]
 800c816:	462a      	mov	r2, r5
 800c818:	4b05      	ldr	r3, [pc, #20]	@ (800c830 <_vfiprintf_r+0x228>)
 800c81a:	a904      	add	r1, sp, #16
 800c81c:	4630      	mov	r0, r6
 800c81e:	f7fc fedd 	bl	80095dc <_printf_i>
 800c822:	e7e4      	b.n	800c7ee <_vfiprintf_r+0x1e6>
 800c824:	0800d0b7 	.word	0x0800d0b7
 800c828:	0800d0c1 	.word	0x0800d0c1
 800c82c:	080090ad 	.word	0x080090ad
 800c830:	0800c5e5 	.word	0x0800c5e5
 800c834:	0800d0bd 	.word	0x0800d0bd

0800c838 <__swbuf_r>:
 800c838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c83a:	460e      	mov	r6, r1
 800c83c:	4614      	mov	r4, r2
 800c83e:	4605      	mov	r5, r0
 800c840:	b118      	cbz	r0, 800c84a <__swbuf_r+0x12>
 800c842:	6a03      	ldr	r3, [r0, #32]
 800c844:	b90b      	cbnz	r3, 800c84a <__swbuf_r+0x12>
 800c846:	f7fd fa81 	bl	8009d4c <__sinit>
 800c84a:	69a3      	ldr	r3, [r4, #24]
 800c84c:	60a3      	str	r3, [r4, #8]
 800c84e:	89a3      	ldrh	r3, [r4, #12]
 800c850:	071a      	lsls	r2, r3, #28
 800c852:	d501      	bpl.n	800c858 <__swbuf_r+0x20>
 800c854:	6923      	ldr	r3, [r4, #16]
 800c856:	b943      	cbnz	r3, 800c86a <__swbuf_r+0x32>
 800c858:	4621      	mov	r1, r4
 800c85a:	4628      	mov	r0, r5
 800c85c:	f000 f82a 	bl	800c8b4 <__swsetup_r>
 800c860:	b118      	cbz	r0, 800c86a <__swbuf_r+0x32>
 800c862:	f04f 37ff 	mov.w	r7, #4294967295
 800c866:	4638      	mov	r0, r7
 800c868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c86a:	6823      	ldr	r3, [r4, #0]
 800c86c:	6922      	ldr	r2, [r4, #16]
 800c86e:	1a98      	subs	r0, r3, r2
 800c870:	6963      	ldr	r3, [r4, #20]
 800c872:	b2f6      	uxtb	r6, r6
 800c874:	4283      	cmp	r3, r0
 800c876:	4637      	mov	r7, r6
 800c878:	dc05      	bgt.n	800c886 <__swbuf_r+0x4e>
 800c87a:	4621      	mov	r1, r4
 800c87c:	4628      	mov	r0, r5
 800c87e:	f7ff fded 	bl	800c45c <_fflush_r>
 800c882:	2800      	cmp	r0, #0
 800c884:	d1ed      	bne.n	800c862 <__swbuf_r+0x2a>
 800c886:	68a3      	ldr	r3, [r4, #8]
 800c888:	3b01      	subs	r3, #1
 800c88a:	60a3      	str	r3, [r4, #8]
 800c88c:	6823      	ldr	r3, [r4, #0]
 800c88e:	1c5a      	adds	r2, r3, #1
 800c890:	6022      	str	r2, [r4, #0]
 800c892:	701e      	strb	r6, [r3, #0]
 800c894:	6962      	ldr	r2, [r4, #20]
 800c896:	1c43      	adds	r3, r0, #1
 800c898:	429a      	cmp	r2, r3
 800c89a:	d004      	beq.n	800c8a6 <__swbuf_r+0x6e>
 800c89c:	89a3      	ldrh	r3, [r4, #12]
 800c89e:	07db      	lsls	r3, r3, #31
 800c8a0:	d5e1      	bpl.n	800c866 <__swbuf_r+0x2e>
 800c8a2:	2e0a      	cmp	r6, #10
 800c8a4:	d1df      	bne.n	800c866 <__swbuf_r+0x2e>
 800c8a6:	4621      	mov	r1, r4
 800c8a8:	4628      	mov	r0, r5
 800c8aa:	f7ff fdd7 	bl	800c45c <_fflush_r>
 800c8ae:	2800      	cmp	r0, #0
 800c8b0:	d0d9      	beq.n	800c866 <__swbuf_r+0x2e>
 800c8b2:	e7d6      	b.n	800c862 <__swbuf_r+0x2a>

0800c8b4 <__swsetup_r>:
 800c8b4:	b538      	push	{r3, r4, r5, lr}
 800c8b6:	4b29      	ldr	r3, [pc, #164]	@ (800c95c <__swsetup_r+0xa8>)
 800c8b8:	4605      	mov	r5, r0
 800c8ba:	6818      	ldr	r0, [r3, #0]
 800c8bc:	460c      	mov	r4, r1
 800c8be:	b118      	cbz	r0, 800c8c8 <__swsetup_r+0x14>
 800c8c0:	6a03      	ldr	r3, [r0, #32]
 800c8c2:	b90b      	cbnz	r3, 800c8c8 <__swsetup_r+0x14>
 800c8c4:	f7fd fa42 	bl	8009d4c <__sinit>
 800c8c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8cc:	0719      	lsls	r1, r3, #28
 800c8ce:	d422      	bmi.n	800c916 <__swsetup_r+0x62>
 800c8d0:	06da      	lsls	r2, r3, #27
 800c8d2:	d407      	bmi.n	800c8e4 <__swsetup_r+0x30>
 800c8d4:	2209      	movs	r2, #9
 800c8d6:	602a      	str	r2, [r5, #0]
 800c8d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8dc:	81a3      	strh	r3, [r4, #12]
 800c8de:	f04f 30ff 	mov.w	r0, #4294967295
 800c8e2:	e033      	b.n	800c94c <__swsetup_r+0x98>
 800c8e4:	0758      	lsls	r0, r3, #29
 800c8e6:	d512      	bpl.n	800c90e <__swsetup_r+0x5a>
 800c8e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c8ea:	b141      	cbz	r1, 800c8fe <__swsetup_r+0x4a>
 800c8ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8f0:	4299      	cmp	r1, r3
 800c8f2:	d002      	beq.n	800c8fa <__swsetup_r+0x46>
 800c8f4:	4628      	mov	r0, r5
 800c8f6:	f7fe fa57 	bl	800ada8 <_free_r>
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	6363      	str	r3, [r4, #52]	@ 0x34
 800c8fe:	89a3      	ldrh	r3, [r4, #12]
 800c900:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c904:	81a3      	strh	r3, [r4, #12]
 800c906:	2300      	movs	r3, #0
 800c908:	6063      	str	r3, [r4, #4]
 800c90a:	6923      	ldr	r3, [r4, #16]
 800c90c:	6023      	str	r3, [r4, #0]
 800c90e:	89a3      	ldrh	r3, [r4, #12]
 800c910:	f043 0308 	orr.w	r3, r3, #8
 800c914:	81a3      	strh	r3, [r4, #12]
 800c916:	6923      	ldr	r3, [r4, #16]
 800c918:	b94b      	cbnz	r3, 800c92e <__swsetup_r+0x7a>
 800c91a:	89a3      	ldrh	r3, [r4, #12]
 800c91c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c920:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c924:	d003      	beq.n	800c92e <__swsetup_r+0x7a>
 800c926:	4621      	mov	r1, r4
 800c928:	4628      	mov	r0, r5
 800c92a:	f000 f88b 	bl	800ca44 <__smakebuf_r>
 800c92e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c932:	f013 0201 	ands.w	r2, r3, #1
 800c936:	d00a      	beq.n	800c94e <__swsetup_r+0x9a>
 800c938:	2200      	movs	r2, #0
 800c93a:	60a2      	str	r2, [r4, #8]
 800c93c:	6962      	ldr	r2, [r4, #20]
 800c93e:	4252      	negs	r2, r2
 800c940:	61a2      	str	r2, [r4, #24]
 800c942:	6922      	ldr	r2, [r4, #16]
 800c944:	b942      	cbnz	r2, 800c958 <__swsetup_r+0xa4>
 800c946:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c94a:	d1c5      	bne.n	800c8d8 <__swsetup_r+0x24>
 800c94c:	bd38      	pop	{r3, r4, r5, pc}
 800c94e:	0799      	lsls	r1, r3, #30
 800c950:	bf58      	it	pl
 800c952:	6962      	ldrpl	r2, [r4, #20]
 800c954:	60a2      	str	r2, [r4, #8]
 800c956:	e7f4      	b.n	800c942 <__swsetup_r+0x8e>
 800c958:	2000      	movs	r0, #0
 800c95a:	e7f7      	b.n	800c94c <__swsetup_r+0x98>
 800c95c:	20000208 	.word	0x20000208

0800c960 <_raise_r>:
 800c960:	291f      	cmp	r1, #31
 800c962:	b538      	push	{r3, r4, r5, lr}
 800c964:	4605      	mov	r5, r0
 800c966:	460c      	mov	r4, r1
 800c968:	d904      	bls.n	800c974 <_raise_r+0x14>
 800c96a:	2316      	movs	r3, #22
 800c96c:	6003      	str	r3, [r0, #0]
 800c96e:	f04f 30ff 	mov.w	r0, #4294967295
 800c972:	bd38      	pop	{r3, r4, r5, pc}
 800c974:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c976:	b112      	cbz	r2, 800c97e <_raise_r+0x1e>
 800c978:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c97c:	b94b      	cbnz	r3, 800c992 <_raise_r+0x32>
 800c97e:	4628      	mov	r0, r5
 800c980:	f000 f830 	bl	800c9e4 <_getpid_r>
 800c984:	4622      	mov	r2, r4
 800c986:	4601      	mov	r1, r0
 800c988:	4628      	mov	r0, r5
 800c98a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c98e:	f000 b817 	b.w	800c9c0 <_kill_r>
 800c992:	2b01      	cmp	r3, #1
 800c994:	d00a      	beq.n	800c9ac <_raise_r+0x4c>
 800c996:	1c59      	adds	r1, r3, #1
 800c998:	d103      	bne.n	800c9a2 <_raise_r+0x42>
 800c99a:	2316      	movs	r3, #22
 800c99c:	6003      	str	r3, [r0, #0]
 800c99e:	2001      	movs	r0, #1
 800c9a0:	e7e7      	b.n	800c972 <_raise_r+0x12>
 800c9a2:	2100      	movs	r1, #0
 800c9a4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c9a8:	4620      	mov	r0, r4
 800c9aa:	4798      	blx	r3
 800c9ac:	2000      	movs	r0, #0
 800c9ae:	e7e0      	b.n	800c972 <_raise_r+0x12>

0800c9b0 <raise>:
 800c9b0:	4b02      	ldr	r3, [pc, #8]	@ (800c9bc <raise+0xc>)
 800c9b2:	4601      	mov	r1, r0
 800c9b4:	6818      	ldr	r0, [r3, #0]
 800c9b6:	f7ff bfd3 	b.w	800c960 <_raise_r>
 800c9ba:	bf00      	nop
 800c9bc:	20000208 	.word	0x20000208

0800c9c0 <_kill_r>:
 800c9c0:	b538      	push	{r3, r4, r5, lr}
 800c9c2:	4d07      	ldr	r5, [pc, #28]	@ (800c9e0 <_kill_r+0x20>)
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	4604      	mov	r4, r0
 800c9c8:	4608      	mov	r0, r1
 800c9ca:	4611      	mov	r1, r2
 800c9cc:	602b      	str	r3, [r5, #0]
 800c9ce:	f7f6 fa99 	bl	8002f04 <_kill>
 800c9d2:	1c43      	adds	r3, r0, #1
 800c9d4:	d102      	bne.n	800c9dc <_kill_r+0x1c>
 800c9d6:	682b      	ldr	r3, [r5, #0]
 800c9d8:	b103      	cbz	r3, 800c9dc <_kill_r+0x1c>
 800c9da:	6023      	str	r3, [r4, #0]
 800c9dc:	bd38      	pop	{r3, r4, r5, pc}
 800c9de:	bf00      	nop
 800c9e0:	200008c4 	.word	0x200008c4

0800c9e4 <_getpid_r>:
 800c9e4:	f7f6 ba86 	b.w	8002ef4 <_getpid>

0800c9e8 <_malloc_usable_size_r>:
 800c9e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9ec:	1f18      	subs	r0, r3, #4
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	bfbc      	itt	lt
 800c9f2:	580b      	ldrlt	r3, [r1, r0]
 800c9f4:	18c0      	addlt	r0, r0, r3
 800c9f6:	4770      	bx	lr

0800c9f8 <__swhatbuf_r>:
 800c9f8:	b570      	push	{r4, r5, r6, lr}
 800c9fa:	460c      	mov	r4, r1
 800c9fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca00:	2900      	cmp	r1, #0
 800ca02:	b096      	sub	sp, #88	@ 0x58
 800ca04:	4615      	mov	r5, r2
 800ca06:	461e      	mov	r6, r3
 800ca08:	da0d      	bge.n	800ca26 <__swhatbuf_r+0x2e>
 800ca0a:	89a3      	ldrh	r3, [r4, #12]
 800ca0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ca10:	f04f 0100 	mov.w	r1, #0
 800ca14:	bf14      	ite	ne
 800ca16:	2340      	movne	r3, #64	@ 0x40
 800ca18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ca1c:	2000      	movs	r0, #0
 800ca1e:	6031      	str	r1, [r6, #0]
 800ca20:	602b      	str	r3, [r5, #0]
 800ca22:	b016      	add	sp, #88	@ 0x58
 800ca24:	bd70      	pop	{r4, r5, r6, pc}
 800ca26:	466a      	mov	r2, sp
 800ca28:	f000 f848 	bl	800cabc <_fstat_r>
 800ca2c:	2800      	cmp	r0, #0
 800ca2e:	dbec      	blt.n	800ca0a <__swhatbuf_r+0x12>
 800ca30:	9901      	ldr	r1, [sp, #4]
 800ca32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ca36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ca3a:	4259      	negs	r1, r3
 800ca3c:	4159      	adcs	r1, r3
 800ca3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca42:	e7eb      	b.n	800ca1c <__swhatbuf_r+0x24>

0800ca44 <__smakebuf_r>:
 800ca44:	898b      	ldrh	r3, [r1, #12]
 800ca46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca48:	079d      	lsls	r5, r3, #30
 800ca4a:	4606      	mov	r6, r0
 800ca4c:	460c      	mov	r4, r1
 800ca4e:	d507      	bpl.n	800ca60 <__smakebuf_r+0x1c>
 800ca50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ca54:	6023      	str	r3, [r4, #0]
 800ca56:	6123      	str	r3, [r4, #16]
 800ca58:	2301      	movs	r3, #1
 800ca5a:	6163      	str	r3, [r4, #20]
 800ca5c:	b003      	add	sp, #12
 800ca5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca60:	ab01      	add	r3, sp, #4
 800ca62:	466a      	mov	r2, sp
 800ca64:	f7ff ffc8 	bl	800c9f8 <__swhatbuf_r>
 800ca68:	9f00      	ldr	r7, [sp, #0]
 800ca6a:	4605      	mov	r5, r0
 800ca6c:	4639      	mov	r1, r7
 800ca6e:	4630      	mov	r0, r6
 800ca70:	f7fe fd48 	bl	800b504 <_malloc_r>
 800ca74:	b948      	cbnz	r0, 800ca8a <__smakebuf_r+0x46>
 800ca76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca7a:	059a      	lsls	r2, r3, #22
 800ca7c:	d4ee      	bmi.n	800ca5c <__smakebuf_r+0x18>
 800ca7e:	f023 0303 	bic.w	r3, r3, #3
 800ca82:	f043 0302 	orr.w	r3, r3, #2
 800ca86:	81a3      	strh	r3, [r4, #12]
 800ca88:	e7e2      	b.n	800ca50 <__smakebuf_r+0xc>
 800ca8a:	89a3      	ldrh	r3, [r4, #12]
 800ca8c:	6020      	str	r0, [r4, #0]
 800ca8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ca92:	81a3      	strh	r3, [r4, #12]
 800ca94:	9b01      	ldr	r3, [sp, #4]
 800ca96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ca9a:	b15b      	cbz	r3, 800cab4 <__smakebuf_r+0x70>
 800ca9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800caa0:	4630      	mov	r0, r6
 800caa2:	f000 f81d 	bl	800cae0 <_isatty_r>
 800caa6:	b128      	cbz	r0, 800cab4 <__smakebuf_r+0x70>
 800caa8:	89a3      	ldrh	r3, [r4, #12]
 800caaa:	f023 0303 	bic.w	r3, r3, #3
 800caae:	f043 0301 	orr.w	r3, r3, #1
 800cab2:	81a3      	strh	r3, [r4, #12]
 800cab4:	89a3      	ldrh	r3, [r4, #12]
 800cab6:	431d      	orrs	r5, r3
 800cab8:	81a5      	strh	r5, [r4, #12]
 800caba:	e7cf      	b.n	800ca5c <__smakebuf_r+0x18>

0800cabc <_fstat_r>:
 800cabc:	b538      	push	{r3, r4, r5, lr}
 800cabe:	4d07      	ldr	r5, [pc, #28]	@ (800cadc <_fstat_r+0x20>)
 800cac0:	2300      	movs	r3, #0
 800cac2:	4604      	mov	r4, r0
 800cac4:	4608      	mov	r0, r1
 800cac6:	4611      	mov	r1, r2
 800cac8:	602b      	str	r3, [r5, #0]
 800caca:	f7f6 fa7b 	bl	8002fc4 <_fstat>
 800cace:	1c43      	adds	r3, r0, #1
 800cad0:	d102      	bne.n	800cad8 <_fstat_r+0x1c>
 800cad2:	682b      	ldr	r3, [r5, #0]
 800cad4:	b103      	cbz	r3, 800cad8 <_fstat_r+0x1c>
 800cad6:	6023      	str	r3, [r4, #0]
 800cad8:	bd38      	pop	{r3, r4, r5, pc}
 800cada:	bf00      	nop
 800cadc:	200008c4 	.word	0x200008c4

0800cae0 <_isatty_r>:
 800cae0:	b538      	push	{r3, r4, r5, lr}
 800cae2:	4d06      	ldr	r5, [pc, #24]	@ (800cafc <_isatty_r+0x1c>)
 800cae4:	2300      	movs	r3, #0
 800cae6:	4604      	mov	r4, r0
 800cae8:	4608      	mov	r0, r1
 800caea:	602b      	str	r3, [r5, #0]
 800caec:	f7f6 fa7a 	bl	8002fe4 <_isatty>
 800caf0:	1c43      	adds	r3, r0, #1
 800caf2:	d102      	bne.n	800cafa <_isatty_r+0x1a>
 800caf4:	682b      	ldr	r3, [r5, #0]
 800caf6:	b103      	cbz	r3, 800cafa <_isatty_r+0x1a>
 800caf8:	6023      	str	r3, [r4, #0]
 800cafa:	bd38      	pop	{r3, r4, r5, pc}
 800cafc:	200008c4 	.word	0x200008c4

0800cb00 <fmod>:
 800cb00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb02:	ed2d 8b02 	vpush	{d8}
 800cb06:	ec57 6b10 	vmov	r6, r7, d0
 800cb0a:	ec55 4b11 	vmov	r4, r5, d1
 800cb0e:	f000 f825 	bl	800cb5c <__ieee754_fmod>
 800cb12:	4622      	mov	r2, r4
 800cb14:	462b      	mov	r3, r5
 800cb16:	4630      	mov	r0, r6
 800cb18:	4639      	mov	r1, r7
 800cb1a:	eeb0 8a40 	vmov.f32	s16, s0
 800cb1e:	eef0 8a60 	vmov.f32	s17, s1
 800cb22:	f7f4 f81b 	bl	8000b5c <__aeabi_dcmpun>
 800cb26:	b990      	cbnz	r0, 800cb4e <fmod+0x4e>
 800cb28:	2200      	movs	r2, #0
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	4620      	mov	r0, r4
 800cb2e:	4629      	mov	r1, r5
 800cb30:	f7f3 ffe2 	bl	8000af8 <__aeabi_dcmpeq>
 800cb34:	b158      	cbz	r0, 800cb4e <fmod+0x4e>
 800cb36:	f7fd fa77 	bl	800a028 <__errno>
 800cb3a:	2321      	movs	r3, #33	@ 0x21
 800cb3c:	6003      	str	r3, [r0, #0]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	2300      	movs	r3, #0
 800cb42:	4610      	mov	r0, r2
 800cb44:	4619      	mov	r1, r3
 800cb46:	f7f3 fe99 	bl	800087c <__aeabi_ddiv>
 800cb4a:	ec41 0b18 	vmov	d8, r0, r1
 800cb4e:	eeb0 0a48 	vmov.f32	s0, s16
 800cb52:	eef0 0a68 	vmov.f32	s1, s17
 800cb56:	ecbd 8b02 	vpop	{d8}
 800cb5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cb5c <__ieee754_fmod>:
 800cb5c:	ec53 2b11 	vmov	r2, r3, d1
 800cb60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb64:	f023 4800 	bic.w	r8, r3, #2147483648	@ 0x80000000
 800cb68:	ea52 0408 	orrs.w	r4, r2, r8
 800cb6c:	ec51 0b10 	vmov	r0, r1, d0
 800cb70:	461e      	mov	r6, r3
 800cb72:	4696      	mov	lr, r2
 800cb74:	4694      	mov	ip, r2
 800cb76:	d00c      	beq.n	800cb92 <__ieee754_fmod+0x36>
 800cb78:	4d76      	ldr	r5, [pc, #472]	@ (800cd54 <__ieee754_fmod+0x1f8>)
 800cb7a:	f021 4900 	bic.w	r9, r1, #2147483648	@ 0x80000000
 800cb7e:	45a9      	cmp	r9, r5
 800cb80:	460c      	mov	r4, r1
 800cb82:	d806      	bhi.n	800cb92 <__ieee754_fmod+0x36>
 800cb84:	4255      	negs	r5, r2
 800cb86:	4f74      	ldr	r7, [pc, #464]	@ (800cd58 <__ieee754_fmod+0x1fc>)
 800cb88:	4315      	orrs	r5, r2
 800cb8a:	ea48 75d5 	orr.w	r5, r8, r5, lsr #31
 800cb8e:	42bd      	cmp	r5, r7
 800cb90:	d909      	bls.n	800cba6 <__ieee754_fmod+0x4a>
 800cb92:	f7f3 fd49 	bl	8000628 <__aeabi_dmul>
 800cb96:	4602      	mov	r2, r0
 800cb98:	460b      	mov	r3, r1
 800cb9a:	f7f3 fe6f 	bl	800087c <__aeabi_ddiv>
 800cb9e:	ec41 0b10 	vmov	d0, r0, r1
 800cba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cba6:	45c1      	cmp	r9, r8
 800cba8:	4682      	mov	sl, r0
 800cbaa:	4607      	mov	r7, r0
 800cbac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800cbb0:	dc09      	bgt.n	800cbc6 <__ieee754_fmod+0x6a>
 800cbb2:	dbf4      	blt.n	800cb9e <__ieee754_fmod+0x42>
 800cbb4:	4282      	cmp	r2, r0
 800cbb6:	d8f2      	bhi.n	800cb9e <__ieee754_fmod+0x42>
 800cbb8:	d105      	bne.n	800cbc6 <__ieee754_fmod+0x6a>
 800cbba:	4b68      	ldr	r3, [pc, #416]	@ (800cd5c <__ieee754_fmod+0x200>)
 800cbbc:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800cbc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800cbc4:	e7eb      	b.n	800cb9e <__ieee754_fmod+0x42>
 800cbc6:	4964      	ldr	r1, [pc, #400]	@ (800cd58 <__ieee754_fmod+0x1fc>)
 800cbc8:	420c      	tst	r4, r1
 800cbca:	d148      	bne.n	800cc5e <__ieee754_fmod+0x102>
 800cbcc:	f1b9 0f00 	cmp.w	r9, #0
 800cbd0:	d13d      	bne.n	800cc4e <__ieee754_fmod+0xf2>
 800cbd2:	4a63      	ldr	r2, [pc, #396]	@ (800cd60 <__ieee754_fmod+0x204>)
 800cbd4:	4653      	mov	r3, sl
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	dc36      	bgt.n	800cc48 <__ieee754_fmod+0xec>
 800cbda:	420e      	tst	r6, r1
 800cbdc:	d14f      	bne.n	800cc7e <__ieee754_fmod+0x122>
 800cbde:	f1b8 0f00 	cmp.w	r8, #0
 800cbe2:	d144      	bne.n	800cc6e <__ieee754_fmod+0x112>
 800cbe4:	4b5e      	ldr	r3, [pc, #376]	@ (800cd60 <__ieee754_fmod+0x204>)
 800cbe6:	4671      	mov	r1, lr
 800cbe8:	2900      	cmp	r1, #0
 800cbea:	dc3d      	bgt.n	800cc68 <__ieee754_fmod+0x10c>
 800cbec:	485d      	ldr	r0, [pc, #372]	@ (800cd64 <__ieee754_fmod+0x208>)
 800cbee:	4282      	cmp	r2, r0
 800cbf0:	db4a      	blt.n	800cc88 <__ieee754_fmod+0x12c>
 800cbf2:	f3c4 0113 	ubfx	r1, r4, #0, #20
 800cbf6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800cbfa:	485a      	ldr	r0, [pc, #360]	@ (800cd64 <__ieee754_fmod+0x208>)
 800cbfc:	4283      	cmp	r3, r0
 800cbfe:	db57      	blt.n	800ccb0 <__ieee754_fmod+0x154>
 800cc00:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800cc04:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800cc08:	1ad0      	subs	r0, r2, r3
 800cc0a:	1b8a      	subs	r2, r1, r6
 800cc0c:	eba7 040c 	sub.w	r4, r7, ip
 800cc10:	2800      	cmp	r0, #0
 800cc12:	d162      	bne.n	800ccda <__ieee754_fmod+0x17e>
 800cc14:	4567      	cmp	r7, ip
 800cc16:	bf38      	it	cc
 800cc18:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800cc1c:	2a00      	cmp	r2, #0
 800cc1e:	bfbc      	itt	lt
 800cc20:	463c      	movlt	r4, r7
 800cc22:	460a      	movlt	r2, r1
 800cc24:	ea52 0104 	orrs.w	r1, r2, r4
 800cc28:	d0c7      	beq.n	800cbba <__ieee754_fmod+0x5e>
 800cc2a:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 800cc2e:	db69      	blt.n	800cd04 <__ieee754_fmod+0x1a8>
 800cc30:	494c      	ldr	r1, [pc, #304]	@ (800cd64 <__ieee754_fmod+0x208>)
 800cc32:	428b      	cmp	r3, r1
 800cc34:	db6c      	blt.n	800cd10 <__ieee754_fmod+0x1b4>
 800cc36:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 800cc3a:	432a      	orrs	r2, r5
 800cc3c:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800cc40:	ea42 5103 	orr.w	r1, r2, r3, lsl #20
 800cc44:	4620      	mov	r0, r4
 800cc46:	e7aa      	b.n	800cb9e <__ieee754_fmod+0x42>
 800cc48:	3a01      	subs	r2, #1
 800cc4a:	005b      	lsls	r3, r3, #1
 800cc4c:	e7c3      	b.n	800cbd6 <__ieee754_fmod+0x7a>
 800cc4e:	4a45      	ldr	r2, [pc, #276]	@ (800cd64 <__ieee754_fmod+0x208>)
 800cc50:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	ddc0      	ble.n	800cbda <__ieee754_fmod+0x7e>
 800cc58:	3a01      	subs	r2, #1
 800cc5a:	005b      	lsls	r3, r3, #1
 800cc5c:	e7fa      	b.n	800cc54 <__ieee754_fmod+0xf8>
 800cc5e:	ea4f 5229 	mov.w	r2, r9, asr #20
 800cc62:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800cc66:	e7b8      	b.n	800cbda <__ieee754_fmod+0x7e>
 800cc68:	3b01      	subs	r3, #1
 800cc6a:	0049      	lsls	r1, r1, #1
 800cc6c:	e7bc      	b.n	800cbe8 <__ieee754_fmod+0x8c>
 800cc6e:	4b3d      	ldr	r3, [pc, #244]	@ (800cd64 <__ieee754_fmod+0x208>)
 800cc70:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 800cc74:	2900      	cmp	r1, #0
 800cc76:	ddb9      	ble.n	800cbec <__ieee754_fmod+0x90>
 800cc78:	3b01      	subs	r3, #1
 800cc7a:	0049      	lsls	r1, r1, #1
 800cc7c:	e7fa      	b.n	800cc74 <__ieee754_fmod+0x118>
 800cc7e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800cc82:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800cc86:	e7b1      	b.n	800cbec <__ieee754_fmod+0x90>
 800cc88:	1a80      	subs	r0, r0, r2
 800cc8a:	281f      	cmp	r0, #31
 800cc8c:	dc0a      	bgt.n	800cca4 <__ieee754_fmod+0x148>
 800cc8e:	f202 411e 	addw	r1, r2, #1054	@ 0x41e
 800cc92:	fa09 f900 	lsl.w	r9, r9, r0
 800cc96:	fa2a f101 	lsr.w	r1, sl, r1
 800cc9a:	ea41 0109 	orr.w	r1, r1, r9
 800cc9e:	fa0a f700 	lsl.w	r7, sl, r0
 800cca2:	e7aa      	b.n	800cbfa <__ieee754_fmod+0x9e>
 800cca4:	4930      	ldr	r1, [pc, #192]	@ (800cd68 <__ieee754_fmod+0x20c>)
 800cca6:	1a89      	subs	r1, r1, r2
 800cca8:	fa0a f101 	lsl.w	r1, sl, r1
 800ccac:	2700      	movs	r7, #0
 800ccae:	e7a4      	b.n	800cbfa <__ieee754_fmod+0x9e>
 800ccb0:	1ac0      	subs	r0, r0, r3
 800ccb2:	281f      	cmp	r0, #31
 800ccb4:	dc0a      	bgt.n	800cccc <__ieee754_fmod+0x170>
 800ccb6:	f203 461e 	addw	r6, r3, #1054	@ 0x41e
 800ccba:	fa08 f800 	lsl.w	r8, r8, r0
 800ccbe:	fa2e f606 	lsr.w	r6, lr, r6
 800ccc2:	ea46 0608 	orr.w	r6, r6, r8
 800ccc6:	fa0e fc00 	lsl.w	ip, lr, r0
 800ccca:	e79d      	b.n	800cc08 <__ieee754_fmod+0xac>
 800cccc:	4e26      	ldr	r6, [pc, #152]	@ (800cd68 <__ieee754_fmod+0x20c>)
 800ccce:	1af6      	subs	r6, r6, r3
 800ccd0:	fa0e f606 	lsl.w	r6, lr, r6
 800ccd4:	f04f 0c00 	mov.w	ip, #0
 800ccd8:	e796      	b.n	800cc08 <__ieee754_fmod+0xac>
 800ccda:	4567      	cmp	r7, ip
 800ccdc:	bf38      	it	cc
 800ccde:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800cce2:	2a00      	cmp	r2, #0
 800cce4:	da05      	bge.n	800ccf2 <__ieee754_fmod+0x196>
 800cce6:	0ffa      	lsrs	r2, r7, #31
 800cce8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800ccec:	007f      	lsls	r7, r7, #1
 800ccee:	3801      	subs	r0, #1
 800ccf0:	e78b      	b.n	800cc0a <__ieee754_fmod+0xae>
 800ccf2:	ea52 0104 	orrs.w	r1, r2, r4
 800ccf6:	f43f af60 	beq.w	800cbba <__ieee754_fmod+0x5e>
 800ccfa:	0fe1      	lsrs	r1, r4, #31
 800ccfc:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800cd00:	0067      	lsls	r7, r4, #1
 800cd02:	e7f4      	b.n	800ccee <__ieee754_fmod+0x192>
 800cd04:	0fe1      	lsrs	r1, r4, #31
 800cd06:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800cd0a:	0064      	lsls	r4, r4, #1
 800cd0c:	3b01      	subs	r3, #1
 800cd0e:	e78c      	b.n	800cc2a <__ieee754_fmod+0xce>
 800cd10:	1ac9      	subs	r1, r1, r3
 800cd12:	2914      	cmp	r1, #20
 800cd14:	dc0a      	bgt.n	800cd2c <__ieee754_fmod+0x1d0>
 800cd16:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 800cd1a:	fa02 f303 	lsl.w	r3, r2, r3
 800cd1e:	40cc      	lsrs	r4, r1
 800cd20:	4323      	orrs	r3, r4
 800cd22:	410a      	asrs	r2, r1
 800cd24:	ea42 0105 	orr.w	r1, r2, r5
 800cd28:	4618      	mov	r0, r3
 800cd2a:	e738      	b.n	800cb9e <__ieee754_fmod+0x42>
 800cd2c:	291f      	cmp	r1, #31
 800cd2e:	dc07      	bgt.n	800cd40 <__ieee754_fmod+0x1e4>
 800cd30:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 800cd34:	40cc      	lsrs	r4, r1
 800cd36:	fa02 f303 	lsl.w	r3, r2, r3
 800cd3a:	4323      	orrs	r3, r4
 800cd3c:	462a      	mov	r2, r5
 800cd3e:	e7f1      	b.n	800cd24 <__ieee754_fmod+0x1c8>
 800cd40:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 800cd44:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 800cd48:	f503 437b 	add.w	r3, r3, #64256	@ 0xfb00
 800cd4c:	33e2      	adds	r3, #226	@ 0xe2
 800cd4e:	fa42 f303 	asr.w	r3, r2, r3
 800cd52:	e7f3      	b.n	800cd3c <__ieee754_fmod+0x1e0>
 800cd54:	7fefffff 	.word	0x7fefffff
 800cd58:	7ff00000 	.word	0x7ff00000
 800cd5c:	0800d320 	.word	0x0800d320
 800cd60:	fffffbed 	.word	0xfffffbed
 800cd64:	fffffc02 	.word	0xfffffc02
 800cd68:	fffffbe2 	.word	0xfffffbe2

0800cd6c <_init>:
 800cd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd6e:	bf00      	nop
 800cd70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd72:	bc08      	pop	{r3}
 800cd74:	469e      	mov	lr, r3
 800cd76:	4770      	bx	lr

0800cd78 <_fini>:
 800cd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7a:	bf00      	nop
 800cd7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd7e:	bc08      	pop	{r3}
 800cd80:	469e      	mov	lr, r3
 800cd82:	4770      	bx	lr
