
STM32F411_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d454  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  0800d5f8  0800d5f8  0000e5f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbb0  0800dbb0  0000f258  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800dbb0  0800dbb0  0000ebb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dbb8  0800dbb8  0000f258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dbb8  0800dbb8  0000ebb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dbbc  0800dbbc  0000ebbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000258  20000000  0800dbc0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000684  20000258  0800de18  0000f258  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008dc  0800de18  0000f8dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f258  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001682e  00000000  00000000  0000f288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003200  00000000  00000000  00025ab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001368  00000000  00000000  00028cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f2d  00000000  00000000  0002a020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a186  00000000  00000000  0002af4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001891b  00000000  00000000  000450d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fd39  00000000  00000000  0005d9ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fd727  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006800  00000000  00000000  000fd76c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00103f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000258 	.word	0x20000258
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d5dc 	.word	0x0800d5dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000025c 	.word	0x2000025c
 80001dc:	0800d5dc 	.word	0x0800d5dc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9be 	b.w	800104c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	468e      	mov	lr, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	4688      	mov	r8, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d962      	bls.n	8000e30 <__udivmoddi4+0xdc>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	b14e      	cbz	r6, 8000d84 <__udivmoddi4+0x30>
 8000d70:	f1c6 0320 	rsb	r3, r6, #32
 8000d74:	fa01 f806 	lsl.w	r8, r1, r6
 8000d78:	fa20 f303 	lsr.w	r3, r0, r3
 8000d7c:	40b7      	lsls	r7, r6
 8000d7e:	ea43 0808 	orr.w	r8, r3, r8
 8000d82:	40b4      	lsls	r4, r6
 8000d84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d88:	fa1f fc87 	uxth.w	ip, r7
 8000d8c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d90:	0c23      	lsrs	r3, r4, #16
 8000d92:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000da8:	f080 80ea 	bcs.w	8000f80 <__udivmoddi4+0x22c>
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f240 80e7 	bls.w	8000f80 <__udivmoddi4+0x22c>
 8000db2:	3902      	subs	r1, #2
 8000db4:	443b      	add	r3, r7
 8000db6:	1a9a      	subs	r2, r3, r2
 8000db8:	b2a3      	uxth	r3, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dc6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dca:	459c      	cmp	ip, r3
 8000dcc:	d909      	bls.n	8000de2 <__udivmoddi4+0x8e>
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd4:	f080 80d6 	bcs.w	8000f84 <__udivmoddi4+0x230>
 8000dd8:	459c      	cmp	ip, r3
 8000dda:	f240 80d3 	bls.w	8000f84 <__udivmoddi4+0x230>
 8000dde:	443b      	add	r3, r7
 8000de0:	3802      	subs	r0, #2
 8000de2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de6:	eba3 030c 	sub.w	r3, r3, ip
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11d      	cbz	r5, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40f3      	lsrs	r3, r6
 8000df0:	2200      	movs	r2, #0
 8000df2:	e9c5 3200 	strd	r3, r2, [r5]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d905      	bls.n	8000e0a <__udivmoddi4+0xb6>
 8000dfe:	b10d      	cbz	r5, 8000e04 <__udivmoddi4+0xb0>
 8000e00:	e9c5 0100 	strd	r0, r1, [r5]
 8000e04:	2100      	movs	r1, #0
 8000e06:	4608      	mov	r0, r1
 8000e08:	e7f5      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e0a:	fab3 f183 	clz	r1, r3
 8000e0e:	2900      	cmp	r1, #0
 8000e10:	d146      	bne.n	8000ea0 <__udivmoddi4+0x14c>
 8000e12:	4573      	cmp	r3, lr
 8000e14:	d302      	bcc.n	8000e1c <__udivmoddi4+0xc8>
 8000e16:	4282      	cmp	r2, r0
 8000e18:	f200 8105 	bhi.w	8001026 <__udivmoddi4+0x2d2>
 8000e1c:	1a84      	subs	r4, r0, r2
 8000e1e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e22:	2001      	movs	r0, #1
 8000e24:	4690      	mov	r8, r2
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d0e5      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e2a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e2e:	e7e2      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	2a00      	cmp	r2, #0
 8000e32:	f000 8090 	beq.w	8000f56 <__udivmoddi4+0x202>
 8000e36:	fab2 f682 	clz	r6, r2
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	f040 80a4 	bne.w	8000f88 <__udivmoddi4+0x234>
 8000e40:	1a8a      	subs	r2, r1, r2
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e48:	b280      	uxth	r0, r0
 8000e4a:	b2bc      	uxth	r4, r7
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e52:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e5a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x11e>
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x11c>
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	f200 80e0 	bhi.w	8001030 <__udivmoddi4+0x2dc>
 8000e70:	46c4      	mov	ip, r8
 8000e72:	1a9b      	subs	r3, r3, r2
 8000e74:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e78:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e7c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e80:	fb02 f404 	mul.w	r4, r2, r4
 8000e84:	429c      	cmp	r4, r3
 8000e86:	d907      	bls.n	8000e98 <__udivmoddi4+0x144>
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x142>
 8000e90:	429c      	cmp	r4, r3
 8000e92:	f200 80ca 	bhi.w	800102a <__udivmoddi4+0x2d6>
 8000e96:	4602      	mov	r2, r0
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e9e:	e7a5      	b.n	8000dec <__udivmoddi4+0x98>
 8000ea0:	f1c1 0620 	rsb	r6, r1, #32
 8000ea4:	408b      	lsls	r3, r1
 8000ea6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eaa:	431f      	orrs	r7, r3
 8000eac:	fa0e f401 	lsl.w	r4, lr, r1
 8000eb0:	fa20 f306 	lsr.w	r3, r0, r6
 8000eb4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000eb8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ebc:	4323      	orrs	r3, r4
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	fa1f fc87 	uxth.w	ip, r7
 8000ec6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eca:	0c1c      	lsrs	r4, r3, #16
 8000ecc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ed0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ed4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ed8:	45a6      	cmp	lr, r4
 8000eda:	fa02 f201 	lsl.w	r2, r2, r1
 8000ede:	d909      	bls.n	8000ef4 <__udivmoddi4+0x1a0>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ee6:	f080 809c 	bcs.w	8001022 <__udivmoddi4+0x2ce>
 8000eea:	45a6      	cmp	lr, r4
 8000eec:	f240 8099 	bls.w	8001022 <__udivmoddi4+0x2ce>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	443c      	add	r4, r7
 8000ef4:	eba4 040e 	sub.w	r4, r4, lr
 8000ef8:	fa1f fe83 	uxth.w	lr, r3
 8000efc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f00:	fb09 4413 	mls	r4, r9, r3, r4
 8000f04:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f08:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f0c:	45a4      	cmp	ip, r4
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x1ce>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f16:	f080 8082 	bcs.w	800101e <__udivmoddi4+0x2ca>
 8000f1a:	45a4      	cmp	ip, r4
 8000f1c:	d97f      	bls.n	800101e <__udivmoddi4+0x2ca>
 8000f1e:	3b02      	subs	r3, #2
 8000f20:	443c      	add	r4, r7
 8000f22:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f26:	eba4 040c 	sub.w	r4, r4, ip
 8000f2a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f2e:	4564      	cmp	r4, ip
 8000f30:	4673      	mov	r3, lr
 8000f32:	46e1      	mov	r9, ip
 8000f34:	d362      	bcc.n	8000ffc <__udivmoddi4+0x2a8>
 8000f36:	d05f      	beq.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x1fe>
 8000f3a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f3e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f42:	fa04 f606 	lsl.w	r6, r4, r6
 8000f46:	fa22 f301 	lsr.w	r3, r2, r1
 8000f4a:	431e      	orrs	r6, r3
 8000f4c:	40cc      	lsrs	r4, r1
 8000f4e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f52:	2100      	movs	r1, #0
 8000f54:	e74f      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000f56:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f5a:	0c01      	lsrs	r1, r0, #16
 8000f5c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f60:	b280      	uxth	r0, r0
 8000f62:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f66:	463b      	mov	r3, r7
 8000f68:	4638      	mov	r0, r7
 8000f6a:	463c      	mov	r4, r7
 8000f6c:	46b8      	mov	r8, r7
 8000f6e:	46be      	mov	lr, r7
 8000f70:	2620      	movs	r6, #32
 8000f72:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f76:	eba2 0208 	sub.w	r2, r2, r8
 8000f7a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f7e:	e766      	b.n	8000e4e <__udivmoddi4+0xfa>
 8000f80:	4601      	mov	r1, r0
 8000f82:	e718      	b.n	8000db6 <__udivmoddi4+0x62>
 8000f84:	4610      	mov	r0, r2
 8000f86:	e72c      	b.n	8000de2 <__udivmoddi4+0x8e>
 8000f88:	f1c6 0220 	rsb	r2, r6, #32
 8000f8c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f90:	40b7      	lsls	r7, r6
 8000f92:	40b1      	lsls	r1, r6
 8000f94:	fa20 f202 	lsr.w	r2, r0, r2
 8000f98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fa2:	b2bc      	uxth	r4, r7
 8000fa4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fae:	fb08 f904 	mul.w	r9, r8, r4
 8000fb2:	40b0      	lsls	r0, r6
 8000fb4:	4589      	cmp	r9, r1
 8000fb6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fba:	b280      	uxth	r0, r0
 8000fbc:	d93e      	bls.n	800103c <__udivmoddi4+0x2e8>
 8000fbe:	1879      	adds	r1, r7, r1
 8000fc0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fc4:	d201      	bcs.n	8000fca <__udivmoddi4+0x276>
 8000fc6:	4589      	cmp	r9, r1
 8000fc8:	d81f      	bhi.n	800100a <__udivmoddi4+0x2b6>
 8000fca:	eba1 0109 	sub.w	r1, r1, r9
 8000fce:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd2:	fb09 f804 	mul.w	r8, r9, r4
 8000fd6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fda:	b292      	uxth	r2, r2
 8000fdc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fe0:	4542      	cmp	r2, r8
 8000fe2:	d229      	bcs.n	8001038 <__udivmoddi4+0x2e4>
 8000fe4:	18ba      	adds	r2, r7, r2
 8000fe6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fea:	d2c4      	bcs.n	8000f76 <__udivmoddi4+0x222>
 8000fec:	4542      	cmp	r2, r8
 8000fee:	d2c2      	bcs.n	8000f76 <__udivmoddi4+0x222>
 8000ff0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ff4:	443a      	add	r2, r7
 8000ff6:	e7be      	b.n	8000f76 <__udivmoddi4+0x222>
 8000ff8:	45f0      	cmp	r8, lr
 8000ffa:	d29d      	bcs.n	8000f38 <__udivmoddi4+0x1e4>
 8000ffc:	ebbe 0302 	subs.w	r3, lr, r2
 8001000:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001004:	3801      	subs	r0, #1
 8001006:	46e1      	mov	r9, ip
 8001008:	e796      	b.n	8000f38 <__udivmoddi4+0x1e4>
 800100a:	eba7 0909 	sub.w	r9, r7, r9
 800100e:	4449      	add	r1, r9
 8001010:	f1a8 0c02 	sub.w	ip, r8, #2
 8001014:	fbb1 f9fe 	udiv	r9, r1, lr
 8001018:	fb09 f804 	mul.w	r8, r9, r4
 800101c:	e7db      	b.n	8000fd6 <__udivmoddi4+0x282>
 800101e:	4673      	mov	r3, lr
 8001020:	e77f      	b.n	8000f22 <__udivmoddi4+0x1ce>
 8001022:	4650      	mov	r0, sl
 8001024:	e766      	b.n	8000ef4 <__udivmoddi4+0x1a0>
 8001026:	4608      	mov	r0, r1
 8001028:	e6fd      	b.n	8000e26 <__udivmoddi4+0xd2>
 800102a:	443b      	add	r3, r7
 800102c:	3a02      	subs	r2, #2
 800102e:	e733      	b.n	8000e98 <__udivmoddi4+0x144>
 8001030:	f1ac 0c02 	sub.w	ip, ip, #2
 8001034:	443b      	add	r3, r7
 8001036:	e71c      	b.n	8000e72 <__udivmoddi4+0x11e>
 8001038:	4649      	mov	r1, r9
 800103a:	e79c      	b.n	8000f76 <__udivmoddi4+0x222>
 800103c:	eba1 0109 	sub.w	r1, r1, r9
 8001040:	46c4      	mov	ip, r8
 8001042:	fbb1 f9fe 	udiv	r9, r1, lr
 8001046:	fb09 f804 	mul.w	r8, r9, r4
 800104a:	e7c4      	b.n	8000fd6 <__udivmoddi4+0x282>

0800104c <__aeabi_idiv0>:
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <micros>:
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

__STATIC_INLINE uint32_t micros(void){
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8001054:	4b07      	ldr	r3, [pc, #28]	@ (8001074 <micros+0x24>)
 8001056:	685a      	ldr	r2, [r3, #4]
 8001058:	4b07      	ldr	r3, [pc, #28]	@ (8001078 <micros+0x28>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4907      	ldr	r1, [pc, #28]	@ (800107c <micros+0x2c>)
 800105e:	fba1 1303 	umull	r1, r3, r1, r3
 8001062:	0c9b      	lsrs	r3, r3, #18
 8001064:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001068:	4618      	mov	r0, r3
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e0001000 	.word	0xe0001000
 8001078:	20000084 	.word	0x20000084
 800107c:	431bde83 	.word	0x431bde83

08001080 <AS5600_ReadRegister>:

/*
 * Static low level functions to read/write to registers
 */
__STATIC_INLINE HAL_StatusTypeDef AS5600_ReadRegister(AS5600 *dev, uint8_t reg, uint8_t *data)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af04      	add	r7, sp, #16
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	460b      	mov	r3, r1
 800108a:	607a      	str	r2, [r7, #4]
 800108c:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(dev->i2cHandle, AS5600_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	7afb      	ldrb	r3, [r7, #11]
 8001094:	b29a      	uxth	r2, r3
 8001096:	2364      	movs	r3, #100	@ 0x64
 8001098:	9302      	str	r3, [sp, #8]
 800109a:	2301      	movs	r3, #1
 800109c:	9301      	str	r3, [sp, #4]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	9300      	str	r3, [sp, #0]
 80010a2:	2301      	movs	r3, #1
 80010a4:	216c      	movs	r1, #108	@ 0x6c
 80010a6:	f003 ff59 	bl	8004f5c <HAL_I2C_Mem_Read>
 80010aa:	4603      	mov	r3, r0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3710      	adds	r7, #16
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <AS5600_ReadRegisters>:

__STATIC_INLINE HAL_StatusTypeDef AS5600_ReadRegisters(AS5600 *dev, uint8_t reg, uint8_t *data, uint8_t length)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af04      	add	r7, sp, #16
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	607a      	str	r2, [r7, #4]
 80010be:	461a      	mov	r2, r3
 80010c0:	460b      	mov	r3, r1
 80010c2:	72fb      	strb	r3, [r7, #11]
 80010c4:	4613      	mov	r3, r2
 80010c6:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(dev->i2cHandle, AS5600_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, data, length, 100);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	7afb      	ldrb	r3, [r7, #11]
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	7abb      	ldrb	r3, [r7, #10]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	2164      	movs	r1, #100	@ 0x64
 80010d6:	9102      	str	r1, [sp, #8]
 80010d8:	9301      	str	r3, [sp, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	2301      	movs	r3, #1
 80010e0:	216c      	movs	r1, #108	@ 0x6c
 80010e2:	f003 ff3b 	bl	8004f5c <HAL_I2C_Mem_Read>
 80010e6:	4603      	mov	r3, r0
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <AS5600_ReadRegisters_DMA>:
{
	return HAL_I2C_Mem_Read_DMA(dev->i2cHandle, AS5600_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, data, 1);
}

__STATIC_INLINE HAL_StatusTypeDef AS5600_ReadRegisters_DMA(AS5600 *dev, uint8_t reg, uint8_t *data, uint8_t length)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af02      	add	r7, sp, #8
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	461a      	mov	r2, r3
 80010fc:	460b      	mov	r3, r1
 80010fe:	72fb      	strb	r3, [r7, #11]
 8001100:	4613      	mov	r3, r2
 8001102:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read_DMA(dev->i2cHandle, AS5600_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, data, length);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6818      	ldr	r0, [r3, #0]
 8001108:	7afb      	ldrb	r3, [r7, #11]
 800110a:	b29a      	uxth	r2, r3
 800110c:	7abb      	ldrb	r3, [r7, #10]
 800110e:	b29b      	uxth	r3, r3
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2301      	movs	r3, #1
 8001118:	216c      	movs	r1, #108	@ 0x6c
 800111a:	f004 f951 	bl	80053c0 <HAL_I2C_Mem_Read_DMA>
 800111e:	4603      	mov	r3, r0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <AS5600_CheckSensor>:

__STATIC_INLINE HAL_StatusTypeDef AS5600_CheckSensor(AS5600* dev, uint32_t trials)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
	return HAL_I2C_IsDeviceReady(dev->i2cHandle, AS5600_I2C_ADD, trials, 1000);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6818      	ldr	r0, [r3, #0]
 8001136:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	216c      	movs	r1, #108	@ 0x6c
 800113e:	f004 facf 	bl	80056e0 <HAL_I2C_IsDeviceReady>
 8001142:	4603      	mov	r3, r0
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <AS5600_ZeroAngle>:
/*
 * @brief Zeroes the sensor value.
 * @param[in] AS5600* sensor
 */
void AS5600_ZeroAngle(AS5600* dev)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	dev->total_angle_rad = 0;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f04f 0200 	mov.w	r2, #0
 800115a:	609a      	str	r2, [r3, #8]
	dev->prev_raw_angle = AS5600_GetRawAngle_Blocking(dev);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 f84d 	bl	80011fc <AS5600_GetRawAngle_Blocking>
 8001162:	4603      	mov	r3, r0
 8001164:	461a      	mov	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	809a      	strh	r2, [r3, #4]
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <AS5600_Init>:
/*
 * Initialization
 * Pass the struct to each function as pointer
 */
uint8_t AS5600_Init(AS5600* dev, I2C_HandleTypeDef* i2c_handle)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b084      	sub	sp, #16
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	6039      	str	r1, [r7, #0]
	uint8_t init_status = 0;
 800117c:	2300      	movs	r3, #0
 800117e:	73fb      	strb	r3, [r7, #15]

	/* Set struct params */
	dev->i2cHandle = i2c_handle;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	601a      	str	r2, [r3, #0]
	dev->total_angle_rad = 0;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f04f 0200 	mov.w	r2, #0
 800118c:	609a      	str	r2, [r3, #8]
	dev->prev_time_us = micros();
 800118e:	f7ff ff5f 	bl	8001050 <micros>
 8001192:	4602      	mov	r2, r0
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	60da      	str	r2, [r3, #12]
	dev->regdata[0] = 0;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	719a      	strb	r2, [r3, #6]
	dev->regdata[1] = 0;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	71da      	strb	r2, [r3, #7]

	HAL_StatusTypeDef sensor_status = AS5600_CheckSensor(dev, 10);
 80011a4:	210a      	movs	r1, #10
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff ffbe 	bl	8001128 <AS5600_CheckSensor>
 80011ac:	4603      	mov	r3, r0
 80011ae:	73bb      	strb	r3, [r7, #14]

	if(sensor_status != HAL_OK)
 80011b0:	7bbb      	ldrb	r3, [r7, #14]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d007      	beq.n	80011c6 <AS5600_Init+0x54>
	{
		dev->i2cHandle = NULL;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
		return (init_status | AS5600_READY_MSK);
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	e016      	b.n	80011f4 <AS5600_Init+0x82>
	}

	/* Check magnet strength */
	uint8_t magnet_status = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	737b      	strb	r3, [r7, #13]

	AS5600_ReadRegister(dev, MAGNET_STATUS_REG, &magnet_status);
 80011ca:	f107 030d 	add.w	r3, r7, #13
 80011ce:	461a      	mov	r2, r3
 80011d0:	210b      	movs	r1, #11
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff ff54 	bl	8001080 <AS5600_ReadRegister>
	if((magnet_status & MAGNET_OK_MSK) == 0)
 80011d8:	7b7b      	ldrb	r3, [r7, #13]
 80011da:	f003 0320 	and.w	r3, r3, #32
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d107      	bne.n	80011f2 <AS5600_Init+0x80>
	{
		dev->i2cHandle = NULL;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
		return (init_status | magnet_status);
 80011e8:	7b7a      	ldrb	r2, [r7, #13]
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	e000      	b.n	80011f4 <AS5600_Init+0x82>
	}

	return init_status;
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <AS5600_GetRawAngle_Blocking>:

/*
 * @brief Blocking function to read AS5600 sensor raw angle
 */
uint16_t AS5600_GetRawAngle_Blocking(AS5600* dev)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = AS5600_ReadRegisters(dev, RAW_ANGLE_MSB_REG, dev->regdata, 2);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	1d9a      	adds	r2, r3, #6
 8001208:	2302      	movs	r3, #2
 800120a:	210c      	movs	r1, #12
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ff51 	bl	80010b4 <AS5600_ReadRegisters>
 8001212:	4603      	mov	r3, r0
 8001214:	73fb      	strb	r3, [r7, #15]

	if(status != HAL_OK)
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <AS5600_GetRawAngle_Blocking+0x24>
	{
		return 0;
 800121c:	2300      	movs	r3, #0
 800121e:	e00e      	b.n	800123e <AS5600_GetRawAngle_Blocking+0x42>
	}

	uint16_t raw_angle = (((dev->regdata[0] & 0x0F) << 8) | dev->regdata[1]);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	799b      	ldrb	r3, [r3, #6]
 8001224:	b21b      	sxth	r3, r3
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	b21b      	sxth	r3, r3
 800122a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800122e:	b21a      	sxth	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	79db      	ldrb	r3, [r3, #7]
 8001234:	b21b      	sxth	r3, r3
 8001236:	4313      	orrs	r3, r2
 8001238:	b21b      	sxth	r3, r3
 800123a:	81bb      	strh	r3, [r7, #12]
	return raw_angle;
 800123c:	89bb      	ldrh	r3, [r7, #12]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <AS5600_UpdateAngle_DMA>:

/*
 * @brief Callback to start DMA transaction & update angle value
 */
void AS5600_UpdateAngle_DMA(AS5600 *dev)
{
 8001248:	b5b0      	push	{r4, r5, r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	if(dev == NULL) {
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 8096 	beq.w	8001384 <AS5600_UpdateAngle_DMA+0x13c>
		return;
	}

	HAL_StatusTypeDef status = AS5600_ReadRegisters_DMA(dev, RAW_ANGLE_MSB_REG, dev->regdata, 2);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	1d9a      	adds	r2, r3, #6
 800125c:	2302      	movs	r3, #2
 800125e:	210c      	movs	r1, #12
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ff45 	bl	80010f0 <AS5600_ReadRegisters_DMA>
 8001266:	4603      	mov	r3, r0
 8001268:	73fb      	strb	r3, [r7, #15]

	/* Return early if register read fails */
	if(status != HAL_OK) {
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	2b00      	cmp	r3, #0
 800126e:	f040 808b 	bne.w	8001388 <AS5600_UpdateAngle_DMA+0x140>
		return;
	}

	/* Mask & shift 4 MSB left by 8 and concatenate with 8 LSBs */
	uint16_t raw_angle = (((dev->regdata[0] & 0x0F) << 8) | dev->regdata[1]);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	799b      	ldrb	r3, [r3, #6]
 8001276:	b21b      	sxth	r3, r3
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	b21b      	sxth	r3, r3
 800127c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001280:	b21a      	sxth	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	79db      	ldrb	r3, [r3, #7]
 8001286:	b21b      	sxth	r3, r3
 8001288:	4313      	orrs	r3, r2
 800128a:	b21b      	sxth	r3, r3
 800128c:	81bb      	strh	r3, [r7, #12]

	/* Calculate angle delta from previous angle */
	int16_t delta = raw_angle - dev->prev_raw_angle;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	889b      	ldrh	r3, [r3, #4]
 8001292:	89ba      	ldrh	r2, [r7, #12]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	b29b      	uxth	r3, r3
 8001298:	817b      	strh	r3, [r7, #10]

	/*
	 * Positive large delta -> negative overflow
	 * Negative large delta -> positive overflow
	 */
	if(delta > HALF_MAX_RESOLUTION) {
 800129a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800129e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80012a2:	db23      	blt.n	80012ec <AS5600_UpdateAngle_DMA+0xa4>
		dev->total_angle_rad -= (MAX_RESOLUTION - delta) * BIT_TO_RAD;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689b      	ldr	r3, [r3, #8]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f965 	bl	8000578 <__aeabi_f2d>
 80012ae:	4604      	mov	r4, r0
 80012b0:	460d      	mov	r5, r1
 80012b2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012b6:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 80012ba:	330f      	adds	r3, #15
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f949 	bl	8000554 <__aeabi_i2d>
 80012c2:	a333      	add	r3, pc, #204	@ (adr r3, 8001390 <AS5600_UpdateAngle_DMA+0x148>)
 80012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c8:	f7ff f9ae 	bl	8000628 <__aeabi_dmul>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4620      	mov	r0, r4
 80012d2:	4629      	mov	r1, r5
 80012d4:	f7fe fff0 	bl	80002b8 <__aeabi_dsub>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4610      	mov	r0, r2
 80012de:	4619      	mov	r1, r3
 80012e0:	f7ff fc9a 	bl	8000c18 <__aeabi_d2f>
 80012e4:	4602      	mov	r2, r0
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	e047      	b.n	800137c <AS5600_UpdateAngle_DMA+0x134>
	}
	else if(delta < -HALF_MAX_RESOLUTION) {
 80012ec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012f0:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 80012f4:	dc22      	bgt.n	800133c <AS5600_UpdateAngle_DMA+0xf4>
		dev->total_angle_rad += (MAX_RESOLUTION + delta) * BIT_TO_RAD;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f93c 	bl	8000578 <__aeabi_f2d>
 8001300:	4604      	mov	r4, r0
 8001302:	460d      	mov	r5, r1
 8001304:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001308:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff f921 	bl	8000554 <__aeabi_i2d>
 8001312:	a31f      	add	r3, pc, #124	@ (adr r3, 8001390 <AS5600_UpdateAngle_DMA+0x148>)
 8001314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001318:	f7ff f986 	bl	8000628 <__aeabi_dmul>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	4620      	mov	r0, r4
 8001322:	4629      	mov	r1, r5
 8001324:	f7fe ffca 	bl	80002bc <__adddf3>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	4610      	mov	r0, r2
 800132e:	4619      	mov	r1, r3
 8001330:	f7ff fc72 	bl	8000c18 <__aeabi_d2f>
 8001334:	4602      	mov	r2, r0
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	e01f      	b.n	800137c <AS5600_UpdateAngle_DMA+0x134>
	}
	else {
		dev->total_angle_rad += delta * BIT_TO_RAD;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff f919 	bl	8000578 <__aeabi_f2d>
 8001346:	4604      	mov	r4, r0
 8001348:	460d      	mov	r5, r1
 800134a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f900 	bl	8000554 <__aeabi_i2d>
 8001354:	a30e      	add	r3, pc, #56	@ (adr r3, 8001390 <AS5600_UpdateAngle_DMA+0x148>)
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	f7ff f965 	bl	8000628 <__aeabi_dmul>
 800135e:	4602      	mov	r2, r0
 8001360:	460b      	mov	r3, r1
 8001362:	4620      	mov	r0, r4
 8001364:	4629      	mov	r1, r5
 8001366:	f7fe ffa9 	bl	80002bc <__adddf3>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	4610      	mov	r0, r2
 8001370:	4619      	mov	r1, r3
 8001372:	f7ff fc51 	bl	8000c18 <__aeabi_d2f>
 8001376:	4602      	mov	r2, r0
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	609a      	str	r2, [r3, #8]
	}

	dev->prev_raw_angle = raw_angle;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	89ba      	ldrh	r2, [r7, #12]
 8001380:	809a      	strh	r2, [r3, #4]
 8001382:	e002      	b.n	800138a <AS5600_UpdateAngle_DMA+0x142>
		return;
 8001384:	bf00      	nop
 8001386:	e000      	b.n	800138a <AS5600_UpdateAngle_DMA+0x142>
		return;
 8001388:	bf00      	nop
}
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bdb0      	pop	{r4, r5, r7, pc}
 8001390:	8b5cd7aa 	.word	0x8b5cd7aa
 8001394:	3f59238d 	.word	0x3f59238d

08001398 <AS5600_GetAngle>:

float AS5600_GetAngle(AS5600* dev)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
	return dev->total_angle_rad;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	ee07 3a90 	vmov	s15, r3
}
 80013a8:	eeb0 0a67 	vmov.f32	s0, s15
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <_cos>:
/*
 * @brief Cosine approximation
 * @param[in] angle(radians)
 * @return cos(angle)
 */
__STATIC_INLINE float _cos(float angle) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	ed87 0a01 	vstr	s0, [r7, #4]
  float _angle = angle + _PI_2;
 80013c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013c6:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001410 <_cos+0x58>
 80013ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80013ce:	edc7 7a03 	vstr	s15, [r7, #12]
  _angle = _angle > _2PI ? _angle - _2PI : _angle;
 80013d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80013d6:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001414 <_cos+0x5c>
 80013da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e2:	dd06      	ble.n	80013f2 <_cos+0x3a>
 80013e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80013e8:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001414 <_cos+0x5c>
 80013ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013f0:	e001      	b.n	80013f6 <_cos+0x3e>
 80013f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80013f6:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(_angle);
 80013fa:	ed97 0a03 	vldr	s0, [r7, #12]
 80013fe:	f000 fca7 	bl	8001d50 <_sin>
 8001402:	eef0 7a40 	vmov.f32	s15, s0
}
 8001406:	eeb0 0a67 	vmov.f32	s0, s15
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	3fc90fdb 	.word	0x3fc90fdb
 8001414:	40c90fdb 	.word	0x40c90fdb

08001418 <_normalizeAngle>:
/*
 * @brief Normalize angle to [0, 2pi]
 * @param[in] angle(radians)
 * @return normalized_angle
 */
__STATIC_INLINE float _normalizeAngle(float angle){
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff f8a8 	bl	8000578 <__aeabi_f2d>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 8001478 <_normalizeAngle+0x60>
 8001430:	ec43 2b10 	vmov	d0, r2, r3
 8001434:	f00b ff9c 	bl	800d370 <fmod>
 8001438:	ec53 2b10 	vmov	r2, r3, d0
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	f7ff fbea 	bl	8000c18 <__aeabi_d2f>
 8001444:	4603      	mov	r3, r0
 8001446:	60fb      	str	r3, [r7, #12]

  /* Add 2pi to negative values to make positive */
  return a >= 0 ? a : (a + _2PI);
 8001448:	edd7 7a03 	vldr	s15, [r7, #12]
 800144c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001454:	db02      	blt.n	800145c <_normalizeAngle+0x44>
 8001456:	edd7 7a03 	vldr	s15, [r7, #12]
 800145a:	e005      	b.n	8001468 <_normalizeAngle+0x50>
 800145c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001460:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001480 <_normalizeAngle+0x68>
 8001464:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001468:	eeb0 0a67 	vmov.f32	s0, s15
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	f3af 8000 	nop.w
 8001478:	60000000 	.word	0x60000000
 800147c:	401921fb 	.word	0x401921fb
 8001480:	40c90fdb 	.word	0x40c90fdb

08001484 <_electricalAngle>:
 * @brief Calculates electrical angle from rotor angle
 * @param[in] shaft_angle(radians)
 * @param[in] pole_pairs
 * @return electrical angle
 */
__STATIC_INLINE float _electricalAngle(float shaft_angle, uint8_t pole_pairs){
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	ed87 0a01 	vstr	s0, [r7, #4]
 800148e:	4603      	mov	r3, r0
 8001490:	70fb      	strb	r3, [r7, #3]
  return shaft_angle * pole_pairs;
 8001492:	78fb      	ldrb	r3, [r7, #3]
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800149c:	edd7 7a01 	vldr	s15, [r7, #4]
 80014a0:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80014a4:	eeb0 0a67 	vmov.f32	s0, s15
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <BLDC_UpdateMotorADC_DMA>:

/*
 * @brief periodic interrupt callback function to update motor struct ADC values from ADC buffer
 */
void BLDC_UpdateMotorADC_DMA()
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
	if(BLDCMotorArray[0] != NULL)
 80014b8:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <BLDC_UpdateMotorADC_DMA+0x48>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d009      	beq.n	80014d4 <BLDC_UpdateMotorADC_DMA+0x20>
	{
		BLDCMotorArray[0]->vars.phase_current_buff[0] = ADC_buff[0];
 80014c0:	4b0e      	ldr	r3, [pc, #56]	@ (80014fc <BLDC_UpdateMotorADC_DMA+0x48>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0e      	ldr	r2, [pc, #56]	@ (8001500 <BLDC_UpdateMotorADC_DMA+0x4c>)
 80014c6:	8812      	ldrh	r2, [r2, #0]
 80014c8:	861a      	strh	r2, [r3, #48]	@ 0x30
		BLDCMotorArray[0]->vars.phase_current_buff[1] = ADC_buff[1];
 80014ca:	4b0c      	ldr	r3, [pc, #48]	@ (80014fc <BLDC_UpdateMotorADC_DMA+0x48>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a0c      	ldr	r2, [pc, #48]	@ (8001500 <BLDC_UpdateMotorADC_DMA+0x4c>)
 80014d0:	8852      	ldrh	r2, [r2, #2]
 80014d2:	865a      	strh	r2, [r3, #50]	@ 0x32
	}
	if(BLDCMotorArray[1] != NULL)
 80014d4:	4b09      	ldr	r3, [pc, #36]	@ (80014fc <BLDC_UpdateMotorADC_DMA+0x48>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d009      	beq.n	80014f0 <BLDC_UpdateMotorADC_DMA+0x3c>
	{
		BLDCMotorArray[1]->vars.phase_current_buff[0] = ADC_buff[2];
 80014dc:	4b07      	ldr	r3, [pc, #28]	@ (80014fc <BLDC_UpdateMotorADC_DMA+0x48>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	4a07      	ldr	r2, [pc, #28]	@ (8001500 <BLDC_UpdateMotorADC_DMA+0x4c>)
 80014e2:	8892      	ldrh	r2, [r2, #4]
 80014e4:	861a      	strh	r2, [r3, #48]	@ 0x30
		BLDCMotorArray[1]->vars.phase_current_buff[1] = ADC_buff[3];
 80014e6:	4b05      	ldr	r3, [pc, #20]	@ (80014fc <BLDC_UpdateMotorADC_DMA+0x48>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	4a05      	ldr	r2, [pc, #20]	@ (8001500 <BLDC_UpdateMotorADC_DMA+0x4c>)
 80014ec:	88d2      	ldrh	r2, [r2, #6]
 80014ee:	865a      	strh	r2, [r3, #50]	@ 0x32
	}
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	2000027c 	.word	0x2000027c
 8001500:	20000274 	.word	0x20000274

08001504 <CS_CalibrateAmpOffset>:
 * @brief Calibrate current sense amplifier gain offset
 * @param[in] BLDCMotor* motor
 * @retval -
 */
static void CS_CalibrateAmpOffset(BLDCMotor* motor)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	/* Set torque to 0 */
	motor->dq.Uq = 0;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	635a      	str	r2, [r3, #52]	@ 0x34
	SetTorque(motor);
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 fb3b 	bl	8001b90 <SetTorque>

	uint32_t offset_ia = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
	uint32_t offset_ib = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]

	HAL_ADC_Start_DMA(&hadc1, ADC_buff, 4);
 8001522:	2204      	movs	r2, #4
 8001524:	4922      	ldr	r1, [pc, #136]	@ (80015b0 <CS_CalibrateAmpOffset+0xac>)
 8001526:	4823      	ldr	r0, [pc, #140]	@ (80015b4 <CS_CalibrateAmpOffset+0xb0>)
 8001528:	f002 f962 	bl	80037f0 <HAL_ADC_Start_DMA>

	/* Disable all PWM channels during calibration */
	motor->timer->Instance->CCR1 = 0;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2200      	movs	r2, #0
 8001536:	635a      	str	r2, [r3, #52]	@ 0x34
	motor->timer->Instance->CCR2 = 0;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2200      	movs	r2, #0
 8001542:	639a      	str	r2, [r3, #56]	@ 0x38
	motor->timer->Instance->CCR3 = 0;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2200      	movs	r2, #0
 800154e:	63da      	str	r2, [r3, #60]	@ 0x3c

	HAL_Delay(5);
 8001550:	2005      	movs	r0, #5
 8001552:	f002 f8e5 	bl	8003720 <HAL_Delay>

	/* Run calibration for defined number of iterations */
	for(int i = 0; i < CS_OFFSET_CALIBRATION_TRIALS; i++)
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	e011      	b.n	8001580 <CS_CalibrateAmpOffset+0x7c>
	{
		offset_ia += motor->vars.phase_current_buff[0];
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001560:	461a      	mov	r2, r3
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	4413      	add	r3, r2
 8001566:	617b      	str	r3, [r7, #20]
		offset_ib += motor->vars.phase_current_buff[1];
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800156c:	461a      	mov	r2, r3
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	4413      	add	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
		HAL_Delay(1);
 8001574:	2001      	movs	r0, #1
 8001576:	f002 f8d3 	bl	8003720 <HAL_Delay>
	for(int i = 0; i < CS_OFFSET_CALIBRATION_TRIALS; i++)
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	3301      	adds	r3, #1
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001586:	dbe9      	blt.n	800155c <CS_CalibrateAmpOffset+0x58>
	}

	/* Get average offset */
	motor->cs_offset_ia = offset_ia / CS_OFFSET_CALIBRATION_TRIALS;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	4a0b      	ldr	r2, [pc, #44]	@ (80015b8 <CS_CalibrateAmpOffset+0xb4>)
 800158c:	fba2 2303 	umull	r2, r3, r2, r3
 8001590:	095b      	lsrs	r3, r3, #5
 8001592:	b29a      	uxth	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	849a      	strh	r2, [r3, #36]	@ 0x24
	motor->cs_offset_ib = offset_ib / CS_OFFSET_CALIBRATION_TRIALS;
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	4a07      	ldr	r2, [pc, #28]	@ (80015b8 <CS_CalibrateAmpOffset+0xb4>)
 800159c:	fba2 2303 	umull	r2, r3, r2, r3
 80015a0:	095b      	lsrs	r3, r3, #5
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	84da      	strh	r2, [r3, #38]	@ 0x26
}
 80015a8:	bf00      	nop
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000274 	.word	0x20000274
 80015b4:	20000284 	.word	0x20000284
 80015b8:	10624dd3 	.word	0x10624dd3

080015bc <CS_Init>:
 * @brief Initialize current sense parameters in motor struct
 * @param[in] BLDCMotor* motor
 * @retval -
 */
void CS_Init(BLDCMotor* motor)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	float adc_raw_to_float = ADC_VREF / (float)(ADC_RESOLUTION - 1);
 80015c4:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <CS_Init+0x58>)
 80015c6:	60fb      	str	r3, [r7, #12]
	float v_to_i_ratio = 1.0f / SHUNT_RESISTANCE / AMP_GAIN;
 80015c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015cc:	60bb      	str	r3, [r7, #8]
	motor->cs_gain_a = v_to_i_ratio * adc_raw_to_float;
 80015ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80015d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80015d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	edc3 7a06 	vstr	s15, [r3, #24]
	motor->cs_gain_b = v_to_i_ratio * adc_raw_to_float;
 80015e0:	ed97 7a02 	vldr	s14, [r7, #8]
 80015e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80015e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	edc3 7a07 	vstr	s15, [r3, #28]
	motor->cs_gain_c = v_to_i_ratio * adc_raw_to_float;
 80015f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80015f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80015fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	edc3 7a08 	vstr	s15, [r3, #32]
	CS_CalibrateAmpOffset(motor);
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f7ff ff7d 	bl	8001504 <CS_CalibrateAmpOffset>
}
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	3a534067 	.word	0x3a534067

08001618 <CS_SamplePhaseCurrents>:
 * @brief Compute phase currents and store it back in motor struct
 * @param[in] BLDCMotor* motor
 * @note Only meaasures phase A, B current, phase C current is deduced not measured.
 */
void CS_SamplePhaseCurrents(BLDCMotor* motor)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	motor->pi.Ia = (float)(motor->vars.phase_current_buff[0] - motor->cs_offset_ia) * motor->cs_gain_a;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8001624:	461a      	mov	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	ee07 3a90 	vmov	s15, r3
 8001630:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	edd3 7a06 	vldr	s15, [r3, #24]
 800163a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	motor->pi.Ib = (float)(motor->vars.phase_current_buff[1] - motor->cs_offset_ib) * motor->cs_gain_b;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001648:	461a      	mov	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	ee07 3a90 	vmov	s15, r3
 8001654:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	edd3 7a07 	vldr	s15, [r3, #28]
 800165e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	motor->pi.Ic = motor->pi.Ia + motor->pi.Ib;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	ed93 7a12 	vldr	s14, [r3, #72]	@ 0x48
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8001674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
}
 800167e:	bf00      	nop
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <CS_ComputeQD>:

static float CS_ComputeQD(BLDCMotor* motor)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b088      	sub	sp, #32
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	float Ia = motor->pi.Ia;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001698:	61fb      	str	r3, [r7, #28]
	float Ib = _1_SQRT3 * motor->pi.Ia + _2_SQRT3 * motor->pi.Ib;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 80016a0:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001750 <CS_ComputeQD+0xc4>
 80016a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 80016ae:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8001754 <CS_ComputeQD+0xc8>
 80016b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80016b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ba:	edc7 7a06 	vstr	s15, [r7, #24]

	float ct = _cos(_normalizeAngle(_electricalAngle(motor->vars.shaft_angle, motor->pole_pairs)));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	785b      	ldrb	r3, [r3, #1]
 80016c8:	4618      	mov	r0, r3
 80016ca:	eeb0 0a67 	vmov.f32	s0, s15
 80016ce:	f7ff fed9 	bl	8001484 <_electricalAngle>
 80016d2:	eef0 7a40 	vmov.f32	s15, s0
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	f7ff fe9d 	bl	8001418 <_normalizeAngle>
 80016de:	eef0 7a40 	vmov.f32	s15, s0
 80016e2:	eeb0 0a67 	vmov.f32	s0, s15
 80016e6:	f7ff fe67 	bl	80013b8 <_cos>
 80016ea:	ed87 0a05 	vstr	s0, [r7, #20]
	float st = _sin(_normalizeAngle(_electricalAngle(motor->vars.shaft_angle, motor->pole_pairs)));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	785b      	ldrb	r3, [r3, #1]
 80016f8:	4618      	mov	r0, r3
 80016fa:	eeb0 0a67 	vmov.f32	s0, s15
 80016fe:	f7ff fec1 	bl	8001484 <_electricalAngle>
 8001702:	eef0 7a40 	vmov.f32	s15, s0
 8001706:	eeb0 0a67 	vmov.f32	s0, s15
 800170a:	f7ff fe85 	bl	8001418 <_normalizeAngle>
 800170e:	eef0 7a40 	vmov.f32	s15, s0
 8001712:	eeb0 0a67 	vmov.f32	s0, s15
 8001716:	f000 fb1b 	bl	8001d50 <_sin>
 800171a:	ed87 0a04 	vstr	s0, [r7, #16]

	float Iq = Ib * ct - Ia * st;
 800171e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001722:	edd7 7a05 	vldr	s15, [r7, #20]
 8001726:	ee27 7a27 	vmul.f32	s14, s14, s15
 800172a:	edd7 6a07 	vldr	s13, [r7, #28]
 800172e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001732:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001736:	ee77 7a67 	vsub.f32	s15, s14, s15
 800173a:	edc7 7a03 	vstr	s15, [r7, #12]
	return Iq;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	ee07 3a90 	vmov	s15, r3
}
 8001744:	eeb0 0a67 	vmov.f32	s0, s15
 8001748:	3720      	adds	r7, #32
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	3f13cd3a 	.word	0x3f13cd3a
 8001754:	3f93cd3a 	.word	0x3f93cd3a

08001758 <CS_SetTorque>:

float CS_SetTorque(BLDCMotor* motor)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	CS_SamplePhaseCurrents(motor);
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ff59 	bl	8001618 <CS_SamplePhaseCurrents>
	float Iq = CS_ComputeQD(motor);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff ff90 	bl	800168c <CS_ComputeQD>
 800176c:	ed87 0a03 	vstr	s0, [r7, #12]
	//motor->dq.Uq = PID_Compute(&(motor->pid), motor->target_current, Iq);
	//motor->vars.shaft_angle = AS5600_GetAngle(motor->sensor);
	//SetTorque(motor);
	return Iq;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	ee07 3a90 	vmov	s15, r3
}
 8001776:	eeb0 0a67 	vmov.f32	s0, s15
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <_cos>:
__STATIC_INLINE float _cos(float angle) {
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	ed87 0a01 	vstr	s0, [r7, #4]
  float _angle = angle + _PI_2;
 800178a:	edd7 7a01 	vldr	s15, [r7, #4]
 800178e:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80017d8 <_cos+0x58>
 8001792:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001796:	edc7 7a03 	vstr	s15, [r7, #12]
  _angle = _angle > _2PI ? _angle - _2PI : _angle;
 800179a:	edd7 7a03 	vldr	s15, [r7, #12]
 800179e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80017dc <_cos+0x5c>
 80017a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017aa:	dd06      	ble.n	80017ba <_cos+0x3a>
 80017ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80017b0:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80017dc <_cos+0x5c>
 80017b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017b8:	e001      	b.n	80017be <_cos+0x3e>
 80017ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80017be:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(_angle);
 80017c2:	ed97 0a03 	vldr	s0, [r7, #12]
 80017c6:	f000 fac3 	bl	8001d50 <_sin>
 80017ca:	eef0 7a40 	vmov.f32	s15, s0
}
 80017ce:	eeb0 0a67 	vmov.f32	s0, s15
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	3fc90fdb 	.word	0x3fc90fdb
 80017dc:	40c90fdb 	.word	0x40c90fdb

080017e0 <_normalizeAngle>:
__STATIC_INLINE float _normalizeAngle(float angle){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7fe fec4 	bl	8000578 <__aeabi_f2d>
 80017f0:	4602      	mov	r2, r0
 80017f2:	460b      	mov	r3, r1
 80017f4:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 8001840 <_normalizeAngle+0x60>
 80017f8:	ec43 2b10 	vmov	d0, r2, r3
 80017fc:	f00b fdb8 	bl	800d370 <fmod>
 8001800:	ec53 2b10 	vmov	r2, r3, d0
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f7ff fa06 	bl	8000c18 <__aeabi_d2f>
 800180c:	4603      	mov	r3, r0
 800180e:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + _2PI);
 8001810:	edd7 7a03 	vldr	s15, [r7, #12]
 8001814:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181c:	db02      	blt.n	8001824 <_normalizeAngle+0x44>
 800181e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001822:	e005      	b.n	8001830 <_normalizeAngle+0x50>
 8001824:	edd7 7a03 	vldr	s15, [r7, #12]
 8001828:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001848 <_normalizeAngle+0x68>
 800182c:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001830:	eeb0 0a67 	vmov.f32	s0, s15
 8001834:	3710      	adds	r7, #16
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	f3af 8000 	nop.w
 8001840:	60000000 	.word	0x60000000
 8001844:	401921fb 	.word	0x401921fb
 8001848:	40c90fdb 	.word	0x40c90fdb

0800184c <_electricalAngle>:
__STATIC_INLINE float _electricalAngle(float shaft_angle, uint8_t pole_pairs){
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	ed87 0a01 	vstr	s0, [r7, #4]
 8001856:	4603      	mov	r3, r0
 8001858:	70fb      	strb	r3, [r7, #3]
  return shaft_angle * pole_pairs;
 800185a:	78fb      	ldrb	r3, [r7, #3]
 800185c:	ee07 3a90 	vmov	s15, r3
 8001860:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001864:	edd7 7a01 	vldr	s15, [r7, #4]
 8001868:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800186c:	eeb0 0a67 	vmov.f32	s0, s15
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <PWM_Start_3_Channel>:
/*
 * @brief Starts PWM channels 1, 2, 3 of specified timer.
 * @param[in] TIM_HandleTypeDef timer
 */
void PWM_Start_3_Channel(TIM_HandleTypeDef* timer)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	b082      	sub	sp, #8
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(timer, TIM_CHANNEL_1);
 8001882:	2100      	movs	r1, #0
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f005 f9cb 	bl	8006c20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer, TIM_CHANNEL_2);
 800188a:	2104      	movs	r1, #4
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f005 f9c7 	bl	8006c20 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer, TIM_CHANNEL_3);
 8001892:	2108      	movs	r1, #8
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f005 f9c3 	bl	8006c20 <HAL_TIM_PWM_Start>
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <SetPWM>:
 * @scope static
 * @brief Set pwm duty cycle of timer channels
 * @param[in] BLDCMotor* motor
 */
__STATIC_INLINE void SetPWM(BLDCMotor* motor)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b085      	sub	sp, #20
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
	uint32_t ARR = motor->timer->Instance->ARR;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b4:	60fb      	str	r3, [r7, #12]
	motor->timer->Instance->CCR1 = (motor->pv.Ua / motor->supply_voltage) * ARR;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	edd3 7a02 	vldr	s15, [r3, #8]
 80018c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	ee07 3a90 	vmov	s15, r3
 80018cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018e0:	ee17 2a90 	vmov	r2, s15
 80018e4:	635a      	str	r2, [r3, #52]	@ 0x34
	motor->timer->Instance->CCR2 = (motor->pv.Ub / motor->supply_voltage) * ARR;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	edd3 6a10 	vldr	s13, [r3, #64]	@ 0x40
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80018f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	ee07 3a90 	vmov	s15, r3
 80018fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001910:	ee17 2a90 	vmov	r2, s15
 8001914:	639a      	str	r2, [r3, #56]	@ 0x38
	motor->timer->Instance->CCR3 = (motor->pv.Uc / motor->supply_voltage) * ARR;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	edd3 6a11 	vldr	s13, [r3, #68]	@ 0x44
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	ee07 3a90 	vmov	s15, r3
 800192c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001940:	ee17 2a90 	vmov	r2, s15
 8001944:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001946:	bf00      	nop
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <Var_t_Init>:
 * @scope Static
 * @brief Initializers for motor sub-structs
 * @retval Struct_t struct
 */
static Var_t Var_t_Init()
{
 8001952:	b490      	push	{r4, r7}
 8001954:	b086      	sub	sp, #24
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
	Var_t vars = {
 800195a:	f107 030c 	add.w	r3, r7, #12
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
		.shaft_angle = 0,
		.prev_us = 0,
		.phase_current_buff[0] = 0,
		.phase_current_buff[1] = 0
	};
	return vars;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	461c      	mov	r4, r3
 800196a:	f107 030c 	add.w	r3, r7, #12
 800196e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001972:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001976:	6878      	ldr	r0, [r7, #4]
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bc90      	pop	{r4, r7}
 800197e:	4770      	bx	lr

08001980 <DQ_t_Init>:

static DQ_t DQ_t_Init()
{
 8001980:	b480      	push	{r7}
 8001982:	b087      	sub	sp, #28
 8001984:	af00      	add	r7, sp, #0
	DQ_t dq = {
 8001986:	f04f 0300 	mov.w	r3, #0
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	f04f 0300 	mov.w	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
		.Ud = 0,
		.Uq = 0
	};
	return dq;
 8001992:	f107 0310 	add.w	r3, r7, #16
 8001996:	f107 0208 	add.w	r2, r7, #8
 800199a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800199e:	e883 0003 	stmia.w	r3, {r0, r1}
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	ee07 2a10 	vmov	s14, r2
 80019aa:	ee07 3a90 	vmov	s15, r3
}
 80019ae:	eeb0 0a47 	vmov.f32	s0, s14
 80019b2:	eef0 0a67 	vmov.f32	s1, s15
 80019b6:	371c      	adds	r7, #28
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <PV_t_Init>:

static PV_t PV_t_Init()
{
 80019c0:	b480      	push	{r7}
 80019c2:	b08b      	sub	sp, #44	@ 0x2c
 80019c4:	af00      	add	r7, sp, #0
	PV_t pv = {
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	f04f 0300 	mov.w	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	61bb      	str	r3, [r7, #24]
		.Ua = 0,
		.Ub = 0,
		.Uc = 0
	};
	return pv;
 80019d8:	f107 031c 	add.w	r3, r7, #28
 80019dc:	f107 0210 	add.w	r2, r7, #16
 80019e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80019e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80019e6:	69f9      	ldr	r1, [r7, #28]
 80019e8:	6a3a      	ldr	r2, [r7, #32]
 80019ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ec:	ee06 1a90 	vmov	s13, r1
 80019f0:	ee07 2a10 	vmov	s14, r2
 80019f4:	ee07 3a90 	vmov	s15, r3
}
 80019f8:	eeb0 0a66 	vmov.f32	s0, s13
 80019fc:	eef0 0a47 	vmov.f32	s1, s14
 8001a00:	eeb0 1a67 	vmov.f32	s2, s15
 8001a04:	372c      	adds	r7, #44	@ 0x2c
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <PI_t_Init>:

static PI_t PI_t_Init()
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b08b      	sub	sp, #44	@ 0x2c
 8001a12:	af00      	add	r7, sp, #0
	PI_t pi = {
 8001a14:	f04f 0300 	mov.w	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	f04f 0300 	mov.w	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
			.Ia = 0,
			.Ib = 0,
			.Ic = 0
	};
	return pi;
 8001a26:	f107 031c 	add.w	r3, r7, #28
 8001a2a:	f107 0210 	add.w	r2, r7, #16
 8001a2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001a34:	69f9      	ldr	r1, [r7, #28]
 8001a36:	6a3a      	ldr	r2, [r7, #32]
 8001a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3a:	ee06 1a90 	vmov	s13, r1
 8001a3e:	ee07 2a10 	vmov	s14, r2
 8001a42:	ee07 3a90 	vmov	s15, r3
}
 8001a46:	eeb0 0a66 	vmov.f32	s0, s13
 8001a4a:	eef0 0a47 	vmov.f32	s1, s14
 8001a4e:	eeb0 1a67 	vmov.f32	s2, s15
 8001a52:	372c      	adds	r7, #44	@ 0x2c
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <BLDCMotor_Init>:
 * - Voltage limit is 3V by default.
 *
 * @retval BLDCMotor motor
 */
void BLDCMotor_Init(BLDCMotor* motor, TIM_HandleTypeDef* timer, uint8_t pole_pairs)
{
 8001a5c:	b5b0      	push	{r4, r5, r7, lr}
 8001a5e:	b092      	sub	sp, #72	@ 0x48
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6478      	str	r0, [r7, #68]	@ 0x44
 8001a64:	6439      	str	r1, [r7, #64]	@ 0x40
 8001a66:	4613      	mov	r3, r2
 8001a68:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	/* Store motor in motor array, to be referenced by other functions globally */
	if(BLDCMotorArray[0] == NULL){
 8001a6c:	4b45      	ldr	r3, [pc, #276]	@ (8001b84 <BLDCMotor_Init+0x128>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d103      	bne.n	8001a7c <BLDCMotor_Init+0x20>
		BLDCMotorArray[0] = motor;
 8001a74:	4a43      	ldr	r2, [pc, #268]	@ (8001b84 <BLDCMotor_Init+0x128>)
 8001a76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	e006      	b.n	8001a8a <BLDCMotor_Init+0x2e>
	}
	else if(BLDCMotorArray[1] == NULL){
 8001a7c:	4b41      	ldr	r3, [pc, #260]	@ (8001b84 <BLDCMotor_Init+0x128>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d17a      	bne.n	8001b7a <BLDCMotor_Init+0x11e>
		BLDCMotorArray[1] = motor;
 8001a84:	4a3f      	ldr	r2, [pc, #252]	@ (8001b84 <BLDCMotor_Init+0x128>)
 8001a86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a88:	6053      	str	r3, [r2, #4]
	}
	else {
		return;
	}

	motor->sensor_dir = 1;
 8001a8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	701a      	strb	r2, [r3, #0]
	motor->pole_pairs = pole_pairs;
 8001a90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a92:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8001a96:	705a      	strb	r2, [r3, #1]
	motor->vars.phase_current_buff[0] = 0;
 8001a98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	861a      	strh	r2, [r3, #48]	@ 0x30
	motor->vars.phase_current_buff[1] = 0;
 8001a9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	865a      	strh	r2, [r3, #50]	@ 0x32
	motor->voltage_limit = 3;
 8001aa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001aa6:	4a38      	ldr	r2, [pc, #224]	@ (8001b88 <BLDCMotor_Init+0x12c>)
 8001aa8:	605a      	str	r2, [r3, #4]
	motor->supply_voltage = 12;
 8001aaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001aac:	4a37      	ldr	r2, [pc, #220]	@ (8001b8c <BLDCMotor_Init+0x130>)
 8001aae:	609a      	str	r2, [r3, #8]

	motor->target_velocity = 0;
 8001ab0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ab2:	f04f 0200 	mov.w	r2, #0
 8001ab6:	60da      	str	r2, [r3, #12]
	motor->target_pos = 0;
 8001ab8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]

	motor->vars = Var_t_Init();
 8001ac0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8001ac2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff ff43 	bl	8001952 <Var_t_Init>
 8001acc:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8001ad0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001ad4:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ad6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	motor->dq = DQ_t_Init();
 8001ada:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8001adc:	f7ff ff50 	bl	8001980 <DQ_t_Init>
 8001ae0:	eeb0 7a40 	vmov.f32	s14, s0
 8001ae4:	eef0 7a60 	vmov.f32	s15, s1
 8001ae8:	ed84 7a0d 	vstr	s14, [r4, #52]	@ 0x34
 8001aec:	edc4 7a0e 	vstr	s15, [r4, #56]	@ 0x38
	motor->pv = PV_t_Init();
 8001af0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8001af2:	f7ff ff65 	bl	80019c0 <PV_t_Init>
 8001af6:	eef0 6a40 	vmov.f32	s13, s0
 8001afa:	eeb0 7a60 	vmov.f32	s14, s1
 8001afe:	eef0 7a41 	vmov.f32	s15, s2
 8001b02:	edc4 6a0f 	vstr	s13, [r4, #60]	@ 0x3c
 8001b06:	ed84 7a10 	vstr	s14, [r4, #64]	@ 0x40
 8001b0a:	edc4 7a11 	vstr	s15, [r4, #68]	@ 0x44
	motor->pi = PI_t_Init();
 8001b0e:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8001b10:	f7ff ff7d 	bl	8001a0e <PI_t_Init>
 8001b14:	eef0 6a40 	vmov.f32	s13, s0
 8001b18:	eeb0 7a60 	vmov.f32	s14, s1
 8001b1c:	eef0 7a41 	vmov.f32	s15, s2
 8001b20:	edc4 6a12 	vstr	s13, [r4, #72]	@ 0x48
 8001b24:	ed84 7a13 	vstr	s14, [r4, #76]	@ 0x4c
 8001b28:	edc4 7a14 	vstr	s15, [r4, #80]	@ 0x50
	motor->pid = PID_Init();
 8001b2c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8001b2e:	463b      	mov	r3, r7
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 fe5d 	bl	80027f0 <PID_Init>
 8001b36:	3454      	adds	r4, #84	@ 0x54
 8001b38:	463d      	mov	r5, r7
 8001b3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b42:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001b46:	e884 0003 	stmia.w	r4, {r0, r1}
	motor->lpf = LPF_Init();
 8001b4a:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8001b4c:	463b      	mov	r3, r7
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 f97e 	bl	8001e50 <LPF_Init>
 8001b54:	f104 037c 	add.w	r3, r4, #124	@ 0x7c
 8001b58:	463a      	mov	r2, r7
 8001b5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b5c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	motor->control = none;
 8001b60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	motor->sensor = NULL;
 8001b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
	motor->timer = timer;
 8001b70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001b74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8001b78:	e000      	b.n	8001b7c <BLDCMotor_Init+0x120>
		return;
 8001b7a:	bf00      	nop
}
 8001b7c:	3748      	adds	r7, #72	@ 0x48
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bdb0      	pop	{r4, r5, r7, pc}
 8001b82:	bf00      	nop
 8001b84:	2000027c 	.word	0x2000027c
 8001b88:	40400000 	.word	0x40400000
 8001b8c:	41400000 	.word	0x41400000

08001b90 <SetTorque>:
/*
 * @brief Inverse Clarke & Park transformations to calculate phase voltages
 * @param[in] BLDCMotor* motor
 * @note Calls setpwm()
 */
void SetTorque(BLDCMotor* motor) {
 8001b90:	b580      	push	{r7, lr}
 8001b92:	ed2d 8b02 	vpush	{d8}
 8001b96:	b088      	sub	sp, #32
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
	/* Constrain Uq to within voltage range */
	motor->dq.Uq = _constrain(motor->dq.Uq, -motor->voltage_limit, motor->voltage_limit);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	edd3 7a01 	vldr	s15, [r3, #4]
 8001ba8:	eef1 7a67 	vneg.f32	s15, s15
 8001bac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb4:	d505      	bpl.n	8001bc2 <SetTorque+0x32>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bbc:	eef1 7a67 	vneg.f32	s15, s15
 8001bc0:	e011      	b.n	8001be6 <SetTorque+0x56>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd6:	dd03      	ble.n	8001be0 <SetTorque+0x50>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bde:	e002      	b.n	8001be6 <SetTorque+0x56>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
    /* Normalize electric angle */
    float el_angle = _normalizeAngle(_electricalAngle(motor->vars.shaft_angle, motor->pole_pairs));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	785b      	ldrb	r3, [r3, #1]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bfc:	f7ff fe26 	bl	800184c <_electricalAngle>
 8001c00:	eef0 7a40 	vmov.f32	s15, s0
 8001c04:	eeb0 0a67 	vmov.f32	s0, s15
 8001c08:	f7ff fdea 	bl	80017e0 <_normalizeAngle>
 8001c0c:	ed87 0a07 	vstr	s0, [r7, #28]

	/* Inverse park transform */
	float Ualpha = motor->dq.Uq * _cos(el_angle);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	ed93 8a0d 	vldr	s16, [r3, #52]	@ 0x34
 8001c16:	ed97 0a07 	vldr	s0, [r7, #28]
 8001c1a:	f7ff fdb1 	bl	8001780 <_cos>
 8001c1e:	eef0 7a40 	vmov.f32	s15, s0
 8001c22:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001c26:	edc7 7a06 	vstr	s15, [r7, #24]
	float Ubeta = motor->dq.Uq * _sin(el_angle);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	ed93 8a0d 	vldr	s16, [r3, #52]	@ 0x34
 8001c30:	ed97 0a07 	vldr	s0, [r7, #28]
 8001c34:	f000 f88c 	bl	8001d50 <_sin>
 8001c38:	eef0 7a40 	vmov.f32	s15, s0
 8001c3c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001c40:	edc7 7a05 	vstr	s15, [r7, #20]

	float half_supply_v = motor->supply_voltage / 2.0f;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	ed93 7a02 	vldr	s14, [r3, #8]
 8001c4a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001c4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c52:	edc7 7a04 	vstr	s15, [r7, #16]
	float sqrt3_beta = Ubeta * _SQRT3;
 8001c56:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c5a:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001cd4 <SetTorque+0x144>
 8001c5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c62:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Inverse Clarke transform */
	motor->pv.Ua = Ualpha + half_supply_v;
 8001c66:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c6a:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	motor->pv.Ub = ((sqrt3_beta - Ualpha) / 2.0f) + half_supply_v;
 8001c78:	ed97 7a03 	vldr	s14, [r7, #12]
 8001c7c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c84:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001c88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	motor->pv.Uc = ((-Ualpha - sqrt3_beta) / 2.0f) + half_supply_v;
 8001c9a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c9e:	eeb1 7a67 	vneg.f32	s14, s15
 8001ca2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ca6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001caa:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001cae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001cb2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	SetPWM(motor);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff fdee 	bl	80018a2 <SetPWM>
}
 8001cc6:	bf00      	nop
 8001cc8:	3720      	adds	r7, #32
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	ecbd 8b02 	vpop	{d8}
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	3fddb3d7 	.word	0x3fddb3d7

08001cd8 <LinkSensor>:
 * @param[in] BLDCMotor* motor
 * @param[in] AS5600* sensor
 * @param[in] I2C_HandleTypeDef *i2c_handle
 */
void LinkSensor(BLDCMotor* motor, AS5600* sensor, I2C_HandleTypeDef *i2c_handle)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
	uint8_t init_stat = AS5600_Init(sensor, i2c_handle);
 8001ce4:	6879      	ldr	r1, [r7, #4]
 8001ce6:	68b8      	ldr	r0, [r7, #8]
 8001ce8:	f7ff fa43 	bl	8001172 <AS5600_Init>
 8001cec:	4603      	mov	r3, r0
 8001cee:	75fb      	strb	r3, [r7, #23]

	/* Check if sensor link successful */
	if(init_stat != 0)
 8001cf0:	7dfb      	ldrb	r3, [r7, #23]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d004      	beq.n	8001d00 <LinkSensor+0x28>
	{
		motor->sensor = NULL;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
		return;
 8001cfe:	e022      	b.n	8001d46 <LinkSensor+0x6e>
	}

	motor->sensor = sensor;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

	motor->dq.Uq = motor->voltage_limit;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	635a      	str	r2, [r3, #52]	@ 0x34
	motor->vars.shaft_angle = _3PI_2;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	4a0e      	ldr	r2, [pc, #56]	@ (8001d4c <LinkSensor+0x74>)
 8001d14:	629a      	str	r2, [r3, #40]	@ 0x28
	SetTorque(motor);
 8001d16:	68f8      	ldr	r0, [r7, #12]
 8001d18:	f7ff ff3a 	bl	8001b90 <SetTorque>
	HAL_Delay(1500);
 8001d1c:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001d20:	f001 fcfe 	bl	8003720 <HAL_Delay>
	AS5600_ZeroAngle(sensor);
 8001d24:	68b8      	ldr	r0, [r7, #8]
 8001d26:	f7ff fa11 	bl	800114c <AS5600_ZeroAngle>
	motor->dq.Uq = 0;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f04f 0200 	mov.w	r2, #0
 8001d30:	635a      	str	r2, [r3, #52]	@ 0x34
	motor->vars.shaft_angle = 0;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f04f 0200 	mov.w	r2, #0
 8001d38:	629a      	str	r2, [r3, #40]	@ 0x28
	SetTorque(motor);
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f7ff ff28 	bl	8001b90 <SetTorque>

	AS5600_UpdateAngle_DMA(sensor);
 8001d40:	68b8      	ldr	r0, [r7, #8]
 8001d42:	f7ff fa81 	bl	8001248 <AS5600_UpdateAngle_DMA>
}
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	4096cbe4 	.word	0x4096cbe4

08001d50 <_sin>:
/*
 * @brief Sine approximation using look-up table & linear interpolation
 * @param[in] angle(radians)
 * @return sin(angle)
 */
float _sin(float angle){
 8001d50:	b480      	push	{r7}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	ed87 0a01 	vstr	s0, [r7, #4]

   int32_t first, second;
   uint16_t index = (uint16_t)(angle / _2PI * 65536.0f);
 8001d5a:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d5e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001e40 <_sin+0xf0>
 8001d62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d66:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8001e44 <_sin+0xf4>
 8001d6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d72:	ee17 3a90 	vmov	r3, s15
 8001d76:	81fb      	strh	r3, [r7, #14]
   int frac = index & 0xff;
 8001d78:	89fb      	ldrh	r3, [r7, #14]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	60bb      	str	r3, [r7, #8]
   index = (index >> 8) & 0xff;
 8001d7e:	89fb      	ldrh	r3, [r7, #14]
 8001d80:	0a1b      	lsrs	r3, r3, #8
 8001d82:	81fb      	strh	r3, [r7, #14]

   if (index < 64){
 8001d84:	89fb      	ldrh	r3, [r7, #14]
 8001d86:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d88:	d80b      	bhi.n	8001da2 <_sin+0x52>
     first = (int32_t)sineLUT[index];
 8001d8a:	89fb      	ldrh	r3, [r7, #14]
 8001d8c:	4a2e      	ldr	r2, [pc, #184]	@ (8001e48 <_sin+0xf8>)
 8001d8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d92:	617b      	str	r3, [r7, #20]
     second = (int32_t)sineLUT[index + 1];
 8001d94:	89fb      	ldrh	r3, [r7, #14]
 8001d96:	3301      	adds	r3, #1
 8001d98:	4a2b      	ldr	r2, [pc, #172]	@ (8001e48 <_sin+0xf8>)
 8001d9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	e033      	b.n	8001e0a <_sin+0xba>
   }
   else if (index < 128){
 8001da2:	89fb      	ldrh	r3, [r7, #14]
 8001da4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001da6:	d80e      	bhi.n	8001dc6 <_sin+0x76>
     first = (int32_t)sineLUT[128 - index];
 8001da8:	89fb      	ldrh	r3, [r7, #14]
 8001daa:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001dae:	4a26      	ldr	r2, [pc, #152]	@ (8001e48 <_sin+0xf8>)
 8001db0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001db4:	617b      	str	r3, [r7, #20]
     second = (int32_t)sineLUT[127 - index];
 8001db6:	89fb      	ldrh	r3, [r7, #14]
 8001db8:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8001dbc:	4a22      	ldr	r2, [pc, #136]	@ (8001e48 <_sin+0xf8>)
 8001dbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	e021      	b.n	8001e0a <_sin+0xba>
   }
   else if (index < 192){
 8001dc6:	89fb      	ldrh	r3, [r7, #14]
 8001dc8:	2bbf      	cmp	r3, #191	@ 0xbf
 8001dca:	d80e      	bhi.n	8001dea <_sin+0x9a>
     first = -(int32_t)sineLUT[index - 128];
 8001dcc:	89fb      	ldrh	r3, [r7, #14]
 8001dce:	3b80      	subs	r3, #128	@ 0x80
 8001dd0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e48 <_sin+0xf8>)
 8001dd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001dd6:	425b      	negs	r3, r3
 8001dd8:	617b      	str	r3, [r7, #20]
     second = -(int32_t)sineLUT[index - 127];
 8001dda:	89fb      	ldrh	r3, [r7, #14]
 8001ddc:	3b7f      	subs	r3, #127	@ 0x7f
 8001dde:	4a1a      	ldr	r2, [pc, #104]	@ (8001e48 <_sin+0xf8>)
 8001de0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001de4:	425b      	negs	r3, r3
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	e00f      	b.n	8001e0a <_sin+0xba>
   }
   else {
     first = -(int32_t)sineLUT[256 - index];
 8001dea:	89fb      	ldrh	r3, [r7, #14]
 8001dec:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8001df0:	4a15      	ldr	r2, [pc, #84]	@ (8001e48 <_sin+0xf8>)
 8001df2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001df6:	425b      	negs	r3, r3
 8001df8:	617b      	str	r3, [r7, #20]
     second = -(int32_t)sineLUT[255 - index];
 8001dfa:	89fb      	ldrh	r3, [r7, #14]
 8001dfc:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8001e00:	4a11      	ldr	r2, [pc, #68]	@ (8001e48 <_sin+0xf8>)
 8001e02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001e06:	425b      	negs	r3, r3
 8001e08:	613b      	str	r3, [r7, #16]
   }

   return (first + (((second - first) * frac) >> 8)) / 32768.0f;
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	fb02 f303 	mul.w	r3, r2, r3
 8001e16:	121a      	asrs	r2, r3, #8
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	ee07 3a90 	vmov	s15, r3
 8001e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e24:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001e4c <_sin+0xfc>
 8001e28:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e2c:	eef0 7a66 	vmov.f32	s15, s13
 }
 8001e30:	eeb0 0a67 	vmov.f32	s0, s15
 8001e34:	371c      	adds	r7, #28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	40c90fdb 	.word	0x40c90fdb
 8001e44:	47800000 	.word	0x47800000
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	47000000 	.word	0x47000000

08001e50 <LPF_Init>:

/*
 * @brief LPF struct initialization function
 */
LPF_t LPF_Init()
{
 8001e50:	b490      	push	{r4, r7}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
	LPF_t lpf_dev = {
 8001e58:	4b09      	ldr	r3, [pc, #36]	@ (8001e80 <LPF_Init+0x30>)
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	613b      	str	r3, [r7, #16]
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
			.prev_data = 0,
			.prev_us = 0,
			.time_const = 0.1
	};

	return lpf_dev;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	461c      	mov	r4, r3
 8001e6a:	f107 030c 	add.w	r3, r7, #12
 8001e6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc90      	pop	{r4, r7}
 8001e7e:	4770      	bx	lr
 8001e80:	3dcccccd 	.word	0x3dcccccd

08001e84 <DWT_Init>:
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8001e88:	4b08      	ldr	r3, [pc, #32]	@ (8001eac <DWT_Init+0x28>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	4a07      	ldr	r2, [pc, #28]	@ (8001eac <DWT_Init+0x28>)
 8001e8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e92:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8001e94:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <DWT_Init+0x2c>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a05      	ldr	r2, [pc, #20]	@ (8001eb0 <DWT_Init+0x2c>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6013      	str	r3, [r2, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	e000edf0 	.word	0xe000edf0
 8001eb0:	e0001000 	.word	0xe0001000

08001eb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b0bc      	sub	sp, #240	@ 0xf0
 8001eb8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001eba:	f001 fbbf 	bl	800363c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ebe:	f000 f891 	bl	8001fe4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ec2:	f000 fb89 	bl	80025d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ec6:	f000 fb29 	bl	800251c <MX_DMA_Init>
  MX_I2C1_Init();
 8001eca:	f000 f96f 	bl	80021ac <MX_I2C1_Init>
  MX_TIM2_Init();
 8001ece:	f000 f9c9 	bl	8002264 <MX_TIM2_Init>
  MX_I2C2_Init();
 8001ed2:	f000 f999 	bl	8002208 <MX_I2C2_Init>
  MX_TIM3_Init();
 8001ed6:	f000 fa33 	bl	8002340 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001eda:	f000 faf5 	bl	80024c8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001ede:	f000 f8e9 	bl	80020b4 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001ee2:	f000 fa9b 	bl	800241c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  /* Start PWM channels */
  PWM_Start_3_Channel(&htim2);
 8001ee6:	4836      	ldr	r0, [pc, #216]	@ (8001fc0 <main+0x10c>)
 8001ee8:	f7ff fcc7 	bl	800187a <PWM_Start_3_Channel>

  /* DWT timer init (for micros) */
  DWT_Init();
 8001eec:	f7ff ffca 	bl	8001e84 <DWT_Init>

  HAL_TIM_Base_Start_IT(&htim4);
 8001ef0:	4834      	ldr	r0, [pc, #208]	@ (8001fc4 <main+0x110>)
 8001ef2:	f004 fd95 	bl	8006a20 <HAL_TIM_Base_Start_IT>
  /* Create sensor & motor object */
  AS5600 s1;
  BLDCMotor m1;

  /* Init motor object */
  BLDCMotor_Init(&m1, &htim2, 7);
 8001ef6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001efa:	2207      	movs	r2, #7
 8001efc:	4930      	ldr	r1, [pc, #192]	@ (8001fc0 <main+0x10c>)
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff fdac 	bl	8001a5c <BLDCMotor_Init>
  LinkSensor(&m1, &s1, &hi2c1);
 8001f04:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 8001f08:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001f0c:	4a2e      	ldr	r2, [pc, #184]	@ (8001fc8 <main+0x114>)
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fee2 	bl	8001cd8 <LinkSensor>
  CS_Init(&m1);
 8001f14:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff fb4f 	bl	80015bc <CS_Init>
  m1.supply_voltage = 12;
 8001f1e:	4b2b      	ldr	r3, [pc, #172]	@ (8001fcc <main+0x118>)
 8001f20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  m1.voltage_limit = 4;
 8001f22:	f04f 4381 	mov.w	r3, #1082130432	@ 0x40800000
 8001f26:	64bb      	str	r3, [r7, #72]	@ 0x48
  m1.sensor_dir = -1;
 8001f28:	23ff      	movs	r3, #255	@ 0xff
 8001f2a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  m1.pid.kp = 5;
 8001f2e:	4b28      	ldr	r3, [pc, #160]	@ (8001fd0 <main+0x11c>)
 8001f30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  m1.pid.ki = 200;
 8001f34:	4b27      	ldr	r3, [pc, #156]	@ (8001fd4 <main+0x120>)
 8001f36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  m1.pid.mode = PI;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc
  //SerialCommander_Init(&huart1);
  /* Start tim4 periodic callback */
  char uart_buff[64];
  uint32_t cnt = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  m1.vars.shaft_angle = AS5600_GetAngle(&s1);
 8001f46:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff fa24 	bl	8001398 <AS5600_GetAngle>
 8001f50:	eef0 7a40 	vmov.f32	s15, s0
 8001f54:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
	  m1.dq.Uq = 3;
 8001f58:	4b1f      	ldr	r3, [pc, #124]	@ (8001fd8 <main+0x124>)
 8001f5a:	67bb      	str	r3, [r7, #120]	@ 0x78
	  SetTorque(&m1);
 8001f5c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff fe15 	bl	8001b90 <SetTorque>
	  float current = CS_SetTorque(&m1);
 8001f66:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fbf4 	bl	8001758 <CS_SetTorque>
 8001f70:	ed87 0a3a 	vstr	s0, [r7, #232]	@ 0xe8
	  SerialCommander_PollCommands();
 8001f74:	f000 fe10 	bl	8002b98 <SerialCommander_PollCommands>

	  if(cnt >= 100)
 8001f78:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001f7c:	2b63      	cmp	r3, #99	@ 0x63
 8001f7e:	d918      	bls.n	8001fb2 <main+0xfe>
	  {
		  cnt = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
		  sprintf(uart_buff, "%f\n", current);
 8001f86:	f8d7 00e8 	ldr.w	r0, [r7, #232]	@ 0xe8
 8001f8a:	f7fe faf5 	bl	8000578 <__aeabi_f2d>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	460b      	mov	r3, r1
 8001f92:	1d38      	adds	r0, r7, #4
 8001f94:	4911      	ldr	r1, [pc, #68]	@ (8001fdc <main+0x128>)
 8001f96:	f008 fb47 	bl	800a628 <siprintf>
		  HAL_UART_Transmit(&huart1, uart_buff, strlen(uart_buff), 100);
 8001f9a:	1d3b      	adds	r3, r7, #4
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe f97f 	bl	80002a0 <strlen>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	1d39      	adds	r1, r7, #4
 8001fa8:	2364      	movs	r3, #100	@ 0x64
 8001faa:	480d      	ldr	r0, [pc, #52]	@ (8001fe0 <main+0x12c>)
 8001fac:	f005 fc2e 	bl	800780c <HAL_UART_Transmit>
 8001fb0:	e7c9      	b.n	8001f46 <main+0x92>
	  }
	  else{
		  cnt++;
 8001fb2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  {
 8001fbc:	e7c3      	b.n	8001f46 <main+0x92>
 8001fbe:	bf00      	nop
 8001fc0:	20000554 	.word	0x20000554
 8001fc4:	200005e4 	.word	0x200005e4
 8001fc8:	2000032c 	.word	0x2000032c
 8001fcc:	41400000 	.word	0x41400000
 8001fd0:	40a00000 	.word	0x40a00000
 8001fd4:	43480000 	.word	0x43480000
 8001fd8:	40400000 	.word	0x40400000
 8001fdc:	0800d5f8 	.word	0x0800d5f8
 8001fe0:	2000062c 	.word	0x2000062c

08001fe4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b094      	sub	sp, #80	@ 0x50
 8001fe8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fea:	f107 0320 	add.w	r3, r7, #32
 8001fee:	2230      	movs	r2, #48	@ 0x30
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f008 fb7d 	bl	800a6f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ff8:	f107 030c 	add.w	r3, r7, #12
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002008:	2300      	movs	r3, #0
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	4b27      	ldr	r3, [pc, #156]	@ (80020ac <SystemClock_Config+0xc8>)
 800200e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002010:	4a26      	ldr	r2, [pc, #152]	@ (80020ac <SystemClock_Config+0xc8>)
 8002012:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002016:	6413      	str	r3, [r2, #64]	@ 0x40
 8002018:	4b24      	ldr	r3, [pc, #144]	@ (80020ac <SystemClock_Config+0xc8>)
 800201a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002020:	60bb      	str	r3, [r7, #8]
 8002022:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002024:	2300      	movs	r3, #0
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	4b21      	ldr	r3, [pc, #132]	@ (80020b0 <SystemClock_Config+0xcc>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a20      	ldr	r2, [pc, #128]	@ (80020b0 <SystemClock_Config+0xcc>)
 800202e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	4b1e      	ldr	r3, [pc, #120]	@ (80020b0 <SystemClock_Config+0xcc>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800203c:	607b      	str	r3, [r7, #4]
 800203e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002040:	2301      	movs	r3, #1
 8002042:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002044:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002048:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800204a:	2302      	movs	r3, #2
 800204c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800204e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002052:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002054:	2319      	movs	r3, #25
 8002056:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8002058:	23c0      	movs	r3, #192	@ 0xc0
 800205a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800205c:	2302      	movs	r3, #2
 800205e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002060:	2304      	movs	r3, #4
 8002062:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002064:	f107 0320 	add.w	r3, r7, #32
 8002068:	4618      	mov	r0, r3
 800206a:	f004 f881 	bl	8006170 <HAL_RCC_OscConfig>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002074:	f000 fbb6 	bl	80027e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002078:	230f      	movs	r3, #15
 800207a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800207c:	2302      	movs	r3, #2
 800207e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002084:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002088:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800208e:	f107 030c 	add.w	r3, r7, #12
 8002092:	2103      	movs	r1, #3
 8002094:	4618      	mov	r0, r3
 8002096:	f004 fae3 	bl	8006660 <HAL_RCC_ClockConfig>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80020a0:	f000 fba0 	bl	80027e4 <Error_Handler>
  }
}
 80020a4:	bf00      	nop
 80020a6:	3750      	adds	r7, #80	@ 0x50
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40023800 	.word	0x40023800
 80020b0:	40007000 	.word	0x40007000

080020b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80020ba:	463b      	mov	r3, r7
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80020c6:	4b36      	ldr	r3, [pc, #216]	@ (80021a0 <MX_ADC1_Init+0xec>)
 80020c8:	4a36      	ldr	r2, [pc, #216]	@ (80021a4 <MX_ADC1_Init+0xf0>)
 80020ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80020cc:	4b34      	ldr	r3, [pc, #208]	@ (80021a0 <MX_ADC1_Init+0xec>)
 80020ce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80020d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80020d4:	4b32      	ldr	r3, [pc, #200]	@ (80021a0 <MX_ADC1_Init+0xec>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80020da:	4b31      	ldr	r3, [pc, #196]	@ (80021a0 <MX_ADC1_Init+0xec>)
 80020dc:	2201      	movs	r2, #1
 80020de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80020e0:	4b2f      	ldr	r3, [pc, #188]	@ (80021a0 <MX_ADC1_Init+0xec>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020e6:	4b2e      	ldr	r3, [pc, #184]	@ (80021a0 <MX_ADC1_Init+0xec>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020ee:	4b2c      	ldr	r3, [pc, #176]	@ (80021a0 <MX_ADC1_Init+0xec>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020f4:	4b2a      	ldr	r3, [pc, #168]	@ (80021a0 <MX_ADC1_Init+0xec>)
 80020f6:	4a2c      	ldr	r2, [pc, #176]	@ (80021a8 <MX_ADC1_Init+0xf4>)
 80020f8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020fa:	4b29      	ldr	r3, [pc, #164]	@ (80021a0 <MX_ADC1_Init+0xec>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002100:	4b27      	ldr	r3, [pc, #156]	@ (80021a0 <MX_ADC1_Init+0xec>)
 8002102:	2204      	movs	r2, #4
 8002104:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002106:	4b26      	ldr	r3, [pc, #152]	@ (80021a0 <MX_ADC1_Init+0xec>)
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800210e:	4b24      	ldr	r3, [pc, #144]	@ (80021a0 <MX_ADC1_Init+0xec>)
 8002110:	2200      	movs	r2, #0
 8002112:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002114:	4822      	ldr	r0, [pc, #136]	@ (80021a0 <MX_ADC1_Init+0xec>)
 8002116:	f001 fb27 	bl	8003768 <HAL_ADC_Init>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d001      	beq.n	8002124 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002120:	f000 fb60 	bl	80027e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002124:	2300      	movs	r3, #0
 8002126:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002128:	2301      	movs	r3, #1
 800212a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800212c:	2300      	movs	r3, #0
 800212e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002130:	463b      	mov	r3, r7
 8002132:	4619      	mov	r1, r3
 8002134:	481a      	ldr	r0, [pc, #104]	@ (80021a0 <MX_ADC1_Init+0xec>)
 8002136:	f001 fc5f 	bl	80039f8 <HAL_ADC_ConfigChannel>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002140:	f000 fb50 	bl	80027e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002144:	2301      	movs	r3, #1
 8002146:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8002148:	2302      	movs	r3, #2
 800214a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800214c:	463b      	mov	r3, r7
 800214e:	4619      	mov	r1, r3
 8002150:	4813      	ldr	r0, [pc, #76]	@ (80021a0 <MX_ADC1_Init+0xec>)
 8002152:	f001 fc51 	bl	80039f8 <HAL_ADC_ConfigChannel>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800215c:	f000 fb42 	bl	80027e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002160:	2303      	movs	r3, #3
 8002162:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8002164:	2303      	movs	r3, #3
 8002166:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002168:	463b      	mov	r3, r7
 800216a:	4619      	mov	r1, r3
 800216c:	480c      	ldr	r0, [pc, #48]	@ (80021a0 <MX_ADC1_Init+0xec>)
 800216e:	f001 fc43 	bl	80039f8 <HAL_ADC_ConfigChannel>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d001      	beq.n	800217c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8002178:	f000 fb34 	bl	80027e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800217c:	2304      	movs	r3, #4
 800217e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8002180:	2304      	movs	r3, #4
 8002182:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002184:	463b      	mov	r3, r7
 8002186:	4619      	mov	r1, r3
 8002188:	4805      	ldr	r0, [pc, #20]	@ (80021a0 <MX_ADC1_Init+0xec>)
 800218a:	f001 fc35 	bl	80039f8 <HAL_ADC_ConfigChannel>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8002194:	f000 fb26 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002198:	bf00      	nop
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000284 	.word	0x20000284
 80021a4:	40012000 	.word	0x40012000
 80021a8:	0f000001 	.word	0x0f000001

080021ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80021b0:	4b12      	ldr	r3, [pc, #72]	@ (80021fc <MX_I2C1_Init+0x50>)
 80021b2:	4a13      	ldr	r2, [pc, #76]	@ (8002200 <MX_I2C1_Init+0x54>)
 80021b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80021b6:	4b11      	ldr	r3, [pc, #68]	@ (80021fc <MX_I2C1_Init+0x50>)
 80021b8:	4a12      	ldr	r2, [pc, #72]	@ (8002204 <MX_I2C1_Init+0x58>)
 80021ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80021bc:	4b0f      	ldr	r3, [pc, #60]	@ (80021fc <MX_I2C1_Init+0x50>)
 80021be:	2200      	movs	r2, #0
 80021c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80021c2:	4b0e      	ldr	r3, [pc, #56]	@ (80021fc <MX_I2C1_Init+0x50>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021c8:	4b0c      	ldr	r3, [pc, #48]	@ (80021fc <MX_I2C1_Init+0x50>)
 80021ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80021ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021d0:	4b0a      	ldr	r3, [pc, #40]	@ (80021fc <MX_I2C1_Init+0x50>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80021d6:	4b09      	ldr	r3, [pc, #36]	@ (80021fc <MX_I2C1_Init+0x50>)
 80021d8:	2200      	movs	r2, #0
 80021da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021dc:	4b07      	ldr	r3, [pc, #28]	@ (80021fc <MX_I2C1_Init+0x50>)
 80021de:	2200      	movs	r2, #0
 80021e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021e2:	4b06      	ldr	r3, [pc, #24]	@ (80021fc <MX_I2C1_Init+0x50>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021e8:	4804      	ldr	r0, [pc, #16]	@ (80021fc <MX_I2C1_Init+0x50>)
 80021ea:	f002 fd73 	bl	8004cd4 <HAL_I2C_Init>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80021f4:	f000 faf6 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	2000032c 	.word	0x2000032c
 8002200:	40005400 	.word	0x40005400
 8002204:	00061a80 	.word	0x00061a80

08002208 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800220c:	4b12      	ldr	r3, [pc, #72]	@ (8002258 <MX_I2C2_Init+0x50>)
 800220e:	4a13      	ldr	r2, [pc, #76]	@ (800225c <MX_I2C2_Init+0x54>)
 8002210:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8002212:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <MX_I2C2_Init+0x50>)
 8002214:	4a12      	ldr	r2, [pc, #72]	@ (8002260 <MX_I2C2_Init+0x58>)
 8002216:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002218:	4b0f      	ldr	r3, [pc, #60]	@ (8002258 <MX_I2C2_Init+0x50>)
 800221a:	2200      	movs	r2, #0
 800221c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800221e:	4b0e      	ldr	r3, [pc, #56]	@ (8002258 <MX_I2C2_Init+0x50>)
 8002220:	2200      	movs	r2, #0
 8002222:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002224:	4b0c      	ldr	r3, [pc, #48]	@ (8002258 <MX_I2C2_Init+0x50>)
 8002226:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800222a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800222c:	4b0a      	ldr	r3, [pc, #40]	@ (8002258 <MX_I2C2_Init+0x50>)
 800222e:	2200      	movs	r2, #0
 8002230:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002232:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <MX_I2C2_Init+0x50>)
 8002234:	2200      	movs	r2, #0
 8002236:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002238:	4b07      	ldr	r3, [pc, #28]	@ (8002258 <MX_I2C2_Init+0x50>)
 800223a:	2200      	movs	r2, #0
 800223c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800223e:	4b06      	ldr	r3, [pc, #24]	@ (8002258 <MX_I2C2_Init+0x50>)
 8002240:	2200      	movs	r2, #0
 8002242:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002244:	4804      	ldr	r0, [pc, #16]	@ (8002258 <MX_I2C2_Init+0x50>)
 8002246:	f002 fd45 	bl	8004cd4 <HAL_I2C_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8002250:	f000 fac8 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002254:	bf00      	nop
 8002256:	bd80      	pop	{r7, pc}
 8002258:	20000380 	.word	0x20000380
 800225c:	40005800 	.word	0x40005800
 8002260:	00061a80 	.word	0x00061a80

08002264 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08a      	sub	sp, #40	@ 0x28
 8002268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800226a:	f107 0320 	add.w	r3, r7, #32
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002274:	1d3b      	adds	r3, r7, #4
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	605a      	str	r2, [r3, #4]
 800227c:	609a      	str	r2, [r3, #8]
 800227e:	60da      	str	r2, [r3, #12]
 8002280:	611a      	str	r2, [r3, #16]
 8002282:	615a      	str	r2, [r3, #20]
 8002284:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002286:	4b2d      	ldr	r3, [pc, #180]	@ (800233c <MX_TIM2_Init+0xd8>)
 8002288:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800228c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 800228e:	4b2b      	ldr	r3, [pc, #172]	@ (800233c <MX_TIM2_Init+0xd8>)
 8002290:	220a      	movs	r2, #10
 8002292:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002294:	4b29      	ldr	r3, [pc, #164]	@ (800233c <MX_TIM2_Init+0xd8>)
 8002296:	2200      	movs	r2, #0
 8002298:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 800229a:	4b28      	ldr	r3, [pc, #160]	@ (800233c <MX_TIM2_Init+0xd8>)
 800229c:	22ff      	movs	r2, #255	@ 0xff
 800229e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a0:	4b26      	ldr	r3, [pc, #152]	@ (800233c <MX_TIM2_Init+0xd8>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022a6:	4b25      	ldr	r3, [pc, #148]	@ (800233c <MX_TIM2_Init+0xd8>)
 80022a8:	2280      	movs	r2, #128	@ 0x80
 80022aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80022ac:	4823      	ldr	r0, [pc, #140]	@ (800233c <MX_TIM2_Init+0xd8>)
 80022ae:	f004 fc68 	bl	8006b82 <HAL_TIM_PWM_Init>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80022b8:	f000 fa94 	bl	80027e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022bc:	2300      	movs	r3, #0
 80022be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022c0:	2300      	movs	r3, #0
 80022c2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022c4:	f107 0320 	add.w	r3, r7, #32
 80022c8:	4619      	mov	r1, r3
 80022ca:	481c      	ldr	r0, [pc, #112]	@ (800233c <MX_TIM2_Init+0xd8>)
 80022cc:	f005 f9cc 	bl	8007668 <HAL_TIMEx_MasterConfigSynchronization>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80022d6:	f000 fa85 	bl	80027e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022da:	2360      	movs	r3, #96	@ 0x60
 80022dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022e6:	2300      	movs	r3, #0
 80022e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022ea:	1d3b      	adds	r3, r7, #4
 80022ec:	2200      	movs	r2, #0
 80022ee:	4619      	mov	r1, r3
 80022f0:	4812      	ldr	r0, [pc, #72]	@ (800233c <MX_TIM2_Init+0xd8>)
 80022f2:	f004 fe91 	bl	8007018 <HAL_TIM_PWM_ConfigChannel>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80022fc:	f000 fa72 	bl	80027e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002300:	1d3b      	adds	r3, r7, #4
 8002302:	2204      	movs	r2, #4
 8002304:	4619      	mov	r1, r3
 8002306:	480d      	ldr	r0, [pc, #52]	@ (800233c <MX_TIM2_Init+0xd8>)
 8002308:	f004 fe86 	bl	8007018 <HAL_TIM_PWM_ConfigChannel>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002312:	f000 fa67 	bl	80027e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002316:	1d3b      	adds	r3, r7, #4
 8002318:	2208      	movs	r2, #8
 800231a:	4619      	mov	r1, r3
 800231c:	4807      	ldr	r0, [pc, #28]	@ (800233c <MX_TIM2_Init+0xd8>)
 800231e:	f004 fe7b 	bl	8007018 <HAL_TIM_PWM_ConfigChannel>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8002328:	f000 fa5c 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800232c:	4803      	ldr	r0, [pc, #12]	@ (800233c <MX_TIM2_Init+0xd8>)
 800232e:	f000 fec5 	bl	80030bc <HAL_TIM_MspPostInit>

}
 8002332:	bf00      	nop
 8002334:	3728      	adds	r7, #40	@ 0x28
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000554 	.word	0x20000554

08002340 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08a      	sub	sp, #40	@ 0x28
 8002344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002346:	f107 0320 	add.w	r3, r7, #32
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002350:	1d3b      	adds	r3, r7, #4
 8002352:	2200      	movs	r2, #0
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	605a      	str	r2, [r3, #4]
 8002358:	609a      	str	r2, [r3, #8]
 800235a:	60da      	str	r2, [r3, #12]
 800235c:	611a      	str	r2, [r3, #16]
 800235e:	615a      	str	r2, [r3, #20]
 8002360:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002362:	4b2c      	ldr	r3, [pc, #176]	@ (8002414 <MX_TIM3_Init+0xd4>)
 8002364:	4a2c      	ldr	r2, [pc, #176]	@ (8002418 <MX_TIM3_Init+0xd8>)
 8002366:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10;
 8002368:	4b2a      	ldr	r3, [pc, #168]	@ (8002414 <MX_TIM3_Init+0xd4>)
 800236a:	220a      	movs	r2, #10
 800236c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800236e:	4b29      	ldr	r3, [pc, #164]	@ (8002414 <MX_TIM3_Init+0xd4>)
 8002370:	2200      	movs	r2, #0
 8002372:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8002374:	4b27      	ldr	r3, [pc, #156]	@ (8002414 <MX_TIM3_Init+0xd4>)
 8002376:	22ff      	movs	r2, #255	@ 0xff
 8002378:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800237a:	4b26      	ldr	r3, [pc, #152]	@ (8002414 <MX_TIM3_Init+0xd4>)
 800237c:	2200      	movs	r2, #0
 800237e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002380:	4b24      	ldr	r3, [pc, #144]	@ (8002414 <MX_TIM3_Init+0xd4>)
 8002382:	2280      	movs	r2, #128	@ 0x80
 8002384:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002386:	4823      	ldr	r0, [pc, #140]	@ (8002414 <MX_TIM3_Init+0xd4>)
 8002388:	f004 fbfb 	bl	8006b82 <HAL_TIM_PWM_Init>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002392:	f000 fa27 	bl	80027e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002396:	2300      	movs	r3, #0
 8002398:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800239a:	2300      	movs	r3, #0
 800239c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800239e:	f107 0320 	add.w	r3, r7, #32
 80023a2:	4619      	mov	r1, r3
 80023a4:	481b      	ldr	r0, [pc, #108]	@ (8002414 <MX_TIM3_Init+0xd4>)
 80023a6:	f005 f95f 	bl	8007668 <HAL_TIMEx_MasterConfigSynchronization>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80023b0:	f000 fa18 	bl	80027e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023b4:	2360      	movs	r3, #96	@ 0x60
 80023b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023c4:	1d3b      	adds	r3, r7, #4
 80023c6:	2200      	movs	r2, #0
 80023c8:	4619      	mov	r1, r3
 80023ca:	4812      	ldr	r0, [pc, #72]	@ (8002414 <MX_TIM3_Init+0xd4>)
 80023cc:	f004 fe24 	bl	8007018 <HAL_TIM_PWM_ConfigChannel>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80023d6:	f000 fa05 	bl	80027e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023da:	1d3b      	adds	r3, r7, #4
 80023dc:	2204      	movs	r2, #4
 80023de:	4619      	mov	r1, r3
 80023e0:	480c      	ldr	r0, [pc, #48]	@ (8002414 <MX_TIM3_Init+0xd4>)
 80023e2:	f004 fe19 	bl	8007018 <HAL_TIM_PWM_ConfigChannel>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80023ec:	f000 f9fa 	bl	80027e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023f0:	1d3b      	adds	r3, r7, #4
 80023f2:	2208      	movs	r2, #8
 80023f4:	4619      	mov	r1, r3
 80023f6:	4807      	ldr	r0, [pc, #28]	@ (8002414 <MX_TIM3_Init+0xd4>)
 80023f8:	f004 fe0e 	bl	8007018 <HAL_TIM_PWM_ConfigChannel>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8002402:	f000 f9ef 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002406:	4803      	ldr	r0, [pc, #12]	@ (8002414 <MX_TIM3_Init+0xd4>)
 8002408:	f000 fe58 	bl	80030bc <HAL_TIM_MspPostInit>

}
 800240c:	bf00      	nop
 800240e:	3728      	adds	r7, #40	@ 0x28
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	2000059c 	.word	0x2000059c
 8002418:	40000400 	.word	0x40000400

0800241c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08a      	sub	sp, #40	@ 0x28
 8002420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002422:	f107 0320 	add.w	r3, r7, #32
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800242c:	1d3b      	adds	r3, r7, #4
 800242e:	2200      	movs	r2, #0
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	605a      	str	r2, [r3, #4]
 8002434:	609a      	str	r2, [r3, #8]
 8002436:	60da      	str	r2, [r3, #12]
 8002438:	611a      	str	r2, [r3, #16]
 800243a:	615a      	str	r2, [r3, #20]
 800243c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800243e:	4b20      	ldr	r3, [pc, #128]	@ (80024c0 <MX_TIM4_Init+0xa4>)
 8002440:	4a20      	ldr	r2, [pc, #128]	@ (80024c4 <MX_TIM4_Init+0xa8>)
 8002442:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 95;
 8002444:	4b1e      	ldr	r3, [pc, #120]	@ (80024c0 <MX_TIM4_Init+0xa4>)
 8002446:	225f      	movs	r2, #95	@ 0x5f
 8002448:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800244a:	4b1d      	ldr	r3, [pc, #116]	@ (80024c0 <MX_TIM4_Init+0xa4>)
 800244c:	2200      	movs	r2, #0
 800244e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 8002450:	4b1b      	ldr	r3, [pc, #108]	@ (80024c0 <MX_TIM4_Init+0xa4>)
 8002452:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002456:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002458:	4b19      	ldr	r3, [pc, #100]	@ (80024c0 <MX_TIM4_Init+0xa4>)
 800245a:	2200      	movs	r2, #0
 800245c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800245e:	4b18      	ldr	r3, [pc, #96]	@ (80024c0 <MX_TIM4_Init+0xa4>)
 8002460:	2280      	movs	r2, #128	@ 0x80
 8002462:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8002464:	4816      	ldr	r0, [pc, #88]	@ (80024c0 <MX_TIM4_Init+0xa4>)
 8002466:	f004 fb3d 	bl	8006ae4 <HAL_TIM_OC_Init>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002470:	f000 f9b8 	bl	80027e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002474:	2300      	movs	r3, #0
 8002476:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002478:	2300      	movs	r3, #0
 800247a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800247c:	f107 0320 	add.w	r3, r7, #32
 8002480:	4619      	mov	r1, r3
 8002482:	480f      	ldr	r0, [pc, #60]	@ (80024c0 <MX_TIM4_Init+0xa4>)
 8002484:	f005 f8f0 	bl	8007668 <HAL_TIMEx_MasterConfigSynchronization>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800248e:	f000 f9a9 	bl	80027e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002492:	2300      	movs	r3, #0
 8002494:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800249e:	2300      	movs	r3, #0
 80024a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024a2:	1d3b      	adds	r3, r7, #4
 80024a4:	2200      	movs	r2, #0
 80024a6:	4619      	mov	r1, r3
 80024a8:	4805      	ldr	r0, [pc, #20]	@ (80024c0 <MX_TIM4_Init+0xa4>)
 80024aa:	f004 fd59 	bl	8006f60 <HAL_TIM_OC_ConfigChannel>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80024b4:	f000 f996 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80024b8:	bf00      	nop
 80024ba:	3728      	adds	r7, #40	@ 0x28
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	200005e4 	.word	0x200005e4
 80024c4:	40000800 	.word	0x40000800

080024c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024cc:	4b11      	ldr	r3, [pc, #68]	@ (8002514 <MX_USART1_UART_Init+0x4c>)
 80024ce:	4a12      	ldr	r2, [pc, #72]	@ (8002518 <MX_USART1_UART_Init+0x50>)
 80024d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024d2:	4b10      	ldr	r3, [pc, #64]	@ (8002514 <MX_USART1_UART_Init+0x4c>)
 80024d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024da:	4b0e      	ldr	r3, [pc, #56]	@ (8002514 <MX_USART1_UART_Init+0x4c>)
 80024dc:	2200      	movs	r2, #0
 80024de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002514 <MX_USART1_UART_Init+0x4c>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002514 <MX_USART1_UART_Init+0x4c>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024ec:	4b09      	ldr	r3, [pc, #36]	@ (8002514 <MX_USART1_UART_Init+0x4c>)
 80024ee:	220c      	movs	r2, #12
 80024f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024f2:	4b08      	ldr	r3, [pc, #32]	@ (8002514 <MX_USART1_UART_Init+0x4c>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024f8:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <MX_USART1_UART_Init+0x4c>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024fe:	4805      	ldr	r0, [pc, #20]	@ (8002514 <MX_USART1_UART_Init+0x4c>)
 8002500:	f005 f934 	bl	800776c <HAL_UART_Init>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800250a:	f000 f96b 	bl	80027e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	2000062c 	.word	0x2000062c
 8002518:	40011000 	.word	0x40011000

0800251c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	607b      	str	r3, [r7, #4]
 8002526:	4b2b      	ldr	r3, [pc, #172]	@ (80025d4 <MX_DMA_Init+0xb8>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	4a2a      	ldr	r2, [pc, #168]	@ (80025d4 <MX_DMA_Init+0xb8>)
 800252c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002530:	6313      	str	r3, [r2, #48]	@ 0x30
 8002532:	4b28      	ldr	r3, [pc, #160]	@ (80025d4 <MX_DMA_Init+0xb8>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800253a:	607b      	str	r3, [r7, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	603b      	str	r3, [r7, #0]
 8002542:	4b24      	ldr	r3, [pc, #144]	@ (80025d4 <MX_DMA_Init+0xb8>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002546:	4a23      	ldr	r2, [pc, #140]	@ (80025d4 <MX_DMA_Init+0xb8>)
 8002548:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800254c:	6313      	str	r3, [r2, #48]	@ 0x30
 800254e:	4b21      	ldr	r3, [pc, #132]	@ (80025d4 <MX_DMA_Init+0xb8>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002552:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800255a:	2200      	movs	r2, #0
 800255c:	2100      	movs	r1, #0
 800255e:	200b      	movs	r0, #11
 8002560:	f001 fdd5 	bl	800410e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002564:	200b      	movs	r0, #11
 8002566:	f001 fdee 	bl	8004146 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800256a:	2200      	movs	r2, #0
 800256c:	2100      	movs	r1, #0
 800256e:	200c      	movs	r0, #12
 8002570:	f001 fdcd 	bl	800410e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002574:	200c      	movs	r0, #12
 8002576:	f001 fde6 	bl	8004146 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2100      	movs	r1, #0
 800257e:	200d      	movs	r0, #13
 8002580:	f001 fdc5 	bl	800410e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002584:	200d      	movs	r0, #13
 8002586:	f001 fdde 	bl	8004146 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	2100      	movs	r1, #0
 800258e:	202f      	movs	r0, #47	@ 0x2f
 8002590:	f001 fdbd 	bl	800410e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8002594:	202f      	movs	r0, #47	@ 0x2f
 8002596:	f001 fdd6 	bl	8004146 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	2100      	movs	r1, #0
 800259e:	2038      	movs	r0, #56	@ 0x38
 80025a0:	f001 fdb5 	bl	800410e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80025a4:	2038      	movs	r0, #56	@ 0x38
 80025a6:	f001 fdce 	bl	8004146 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2100      	movs	r1, #0
 80025ae:	203a      	movs	r0, #58	@ 0x3a
 80025b0:	f001 fdad 	bl	800410e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80025b4:	203a      	movs	r0, #58	@ 0x3a
 80025b6:	f001 fdc6 	bl	8004146 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80025ba:	2200      	movs	r2, #0
 80025bc:	2100      	movs	r1, #0
 80025be:	2046      	movs	r0, #70	@ 0x46
 80025c0:	f001 fda5 	bl	800410e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80025c4:	2046      	movs	r0, #70	@ 0x46
 80025c6:	f001 fdbe 	bl	8004146 <HAL_NVIC_EnableIRQ>

}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40023800 	.word	0x40023800

080025d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b08a      	sub	sp, #40	@ 0x28
 80025dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025de:	f107 0314 	add.w	r3, r7, #20
 80025e2:	2200      	movs	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	605a      	str	r2, [r3, #4]
 80025e8:	609a      	str	r2, [r3, #8]
 80025ea:	60da      	str	r2, [r3, #12]
 80025ec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	4b27      	ldr	r3, [pc, #156]	@ (8002690 <MX_GPIO_Init+0xb8>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f6:	4a26      	ldr	r2, [pc, #152]	@ (8002690 <MX_GPIO_Init+0xb8>)
 80025f8:	f043 0304 	orr.w	r3, r3, #4
 80025fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80025fe:	4b24      	ldr	r3, [pc, #144]	@ (8002690 <MX_GPIO_Init+0xb8>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	4b20      	ldr	r3, [pc, #128]	@ (8002690 <MX_GPIO_Init+0xb8>)
 8002610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002612:	4a1f      	ldr	r2, [pc, #124]	@ (8002690 <MX_GPIO_Init+0xb8>)
 8002614:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002618:	6313      	str	r3, [r2, #48]	@ 0x30
 800261a:	4b1d      	ldr	r3, [pc, #116]	@ (8002690 <MX_GPIO_Init+0xb8>)
 800261c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	4b19      	ldr	r3, [pc, #100]	@ (8002690 <MX_GPIO_Init+0xb8>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262e:	4a18      	ldr	r2, [pc, #96]	@ (8002690 <MX_GPIO_Init+0xb8>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	6313      	str	r3, [r2, #48]	@ 0x30
 8002636:	4b16      	ldr	r3, [pc, #88]	@ (8002690 <MX_GPIO_Init+0xb8>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	607b      	str	r3, [r7, #4]
 8002646:	4b12      	ldr	r3, [pc, #72]	@ (8002690 <MX_GPIO_Init+0xb8>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264a:	4a11      	ldr	r2, [pc, #68]	@ (8002690 <MX_GPIO_Init+0xb8>)
 800264c:	f043 0302 	orr.w	r3, r3, #2
 8002650:	6313      	str	r3, [r2, #48]	@ 0x30
 8002652:	4b0f      	ldr	r3, [pc, #60]	@ (8002690 <MX_GPIO_Init+0xb8>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	607b      	str	r3, [r7, #4]
 800265c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800265e:	2200      	movs	r2, #0
 8002660:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002664:	480b      	ldr	r0, [pc, #44]	@ (8002694 <MX_GPIO_Init+0xbc>)
 8002666:	f002 fb1b 	bl	8004ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800266a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800266e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002670:	2301      	movs	r3, #1
 8002672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002674:	2300      	movs	r3, #0
 8002676:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002678:	2300      	movs	r3, #0
 800267a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800267c:	f107 0314 	add.w	r3, r7, #20
 8002680:	4619      	mov	r1, r3
 8002682:	4804      	ldr	r0, [pc, #16]	@ (8002694 <MX_GPIO_Init+0xbc>)
 8002684:	f002 f988 	bl	8004998 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002688:	bf00      	nop
 800268a:	3728      	adds	r7, #40	@ 0x28
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40023800 	.word	0x40023800
 8002694:	40020800 	.word	0x40020800

08002698 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
	/* Set ADC DMA ready flag */
	EVENT_FLAGS |= ADC_DMA_FLAG;
 80026a0:	4b06      	ldr	r3, [pc, #24]	@ (80026bc <HAL_ADC_ConvCpltCallback+0x24>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	f043 0304 	orr.w	r3, r3, #4
 80026a8:	b2da      	uxtb	r2, r3
 80026aa:	4b04      	ldr	r3, [pc, #16]	@ (80026bc <HAL_ADC_ConvCpltCallback+0x24>)
 80026ac:	701a      	strb	r2, [r3, #0]
}
 80026ae:	bf00      	nop
 80026b0:	370c      	adds	r7, #12
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	20000734 	.word	0x20000734

080026c0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
	/* Set I2C receive complete flags  */
	if(hi2c->Instance == I2C1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a0e      	ldr	r2, [pc, #56]	@ (8002708 <HAL_I2C_MemRxCpltCallback+0x48>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d107      	bne.n	80026e2 <HAL_I2C_MemRxCpltCallback+0x22>
	{
		EVENT_FLAGS |= I2C1_DMA_FLAG;
 80026d2:	4b0e      	ldr	r3, [pc, #56]	@ (800270c <HAL_I2C_MemRxCpltCallback+0x4c>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	f043 0301 	orr.w	r3, r3, #1
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	4b0b      	ldr	r3, [pc, #44]	@ (800270c <HAL_I2C_MemRxCpltCallback+0x4c>)
 80026de:	701a      	strb	r2, [r3, #0]
	}
	else if(hi2c->Instance == I2C2)
	{
		EVENT_FLAGS |= I2C2_DMA_FLAG;
	}
}
 80026e0:	e00b      	b.n	80026fa <HAL_I2C_MemRxCpltCallback+0x3a>
	else if(hi2c->Instance == I2C2)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002710 <HAL_I2C_MemRxCpltCallback+0x50>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d106      	bne.n	80026fa <HAL_I2C_MemRxCpltCallback+0x3a>
		EVENT_FLAGS |= I2C2_DMA_FLAG;
 80026ec:	4b07      	ldr	r3, [pc, #28]	@ (800270c <HAL_I2C_MemRxCpltCallback+0x4c>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	f043 0302 	orr.w	r3, r3, #2
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	4b05      	ldr	r3, [pc, #20]	@ (800270c <HAL_I2C_MemRxCpltCallback+0x4c>)
 80026f8:	701a      	strb	r2, [r3, #0]
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40005400 	.word	0x40005400
 800270c:	20000734 	.word	0x20000734
 8002710:	40005800 	.word	0x40005800

08002714 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a2b      	ldr	r2, [pc, #172]	@ (80027d0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d14f      	bne.n	80027c6 <HAL_TIM_PeriodElapsedCallback+0xb2>
    {

    	/* ADC conversion only if ADC enabled */
#ifdef ADC_ENABLED

        if(EVENT_FLAGS & ADC_DMA_FLAG)
 8002726:	4b2b      	ldr	r3, [pc, #172]	@ (80027d4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00d      	beq.n	800274e <HAL_TIM_PeriodElapsedCallback+0x3a>
        {
        	EVENT_FLAGS &= (~ADC_DMA_FLAG);
 8002732:	4b28      	ldr	r3, [pc, #160]	@ (80027d4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	f023 0304 	bic.w	r3, r3, #4
 800273a:	b2da      	uxtb	r2, r3
 800273c:	4b25      	ldr	r3, [pc, #148]	@ (80027d4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800273e:	701a      	strb	r2, [r3, #0]
        	HAL_ADC_Start_DMA(&hadc1, ADC_buff, 4);
 8002740:	2204      	movs	r2, #4
 8002742:	4925      	ldr	r1, [pc, #148]	@ (80027d8 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002744:	4825      	ldr	r0, [pc, #148]	@ (80027dc <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002746:	f001 f853 	bl	80037f0 <HAL_ADC_Start_DMA>
        	BLDC_UpdateMotorADC_DMA();
 800274a:	f7fe feb3 	bl	80014b4 <BLDC_UpdateMotorADC_DMA>
        }

#endif

        /* Check I2C ch1 data receive complete */
        if(EVENT_FLAGS & I2C1_DMA_FLAG)
 800274e:	4b21      	ldr	r3, [pc, #132]	@ (80027d4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d017      	beq.n	800278a <HAL_TIM_PeriodElapsedCallback+0x76>
        {
        	if(BLDCMotorArray[0] != NULL && BLDCMotorArray[0]->sensor != NULL)
 800275a:	4b21      	ldr	r3, [pc, #132]	@ (80027e0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d013      	beq.n	800278a <HAL_TIM_PeriodElapsedCallback+0x76>
 8002762:	4b1f      	ldr	r3, [pc, #124]	@ (80027e0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00d      	beq.n	800278a <HAL_TIM_PeriodElapsedCallback+0x76>
        	{
        		EVENT_FLAGS &= (~I2C1_DMA_FLAG);
 800276e:	4b19      	ldr	r3, [pc, #100]	@ (80027d4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	f023 0301 	bic.w	r3, r3, #1
 8002776:	b2da      	uxtb	r2, r3
 8002778:	4b16      	ldr	r3, [pc, #88]	@ (80027d4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800277a:	701a      	strb	r2, [r3, #0]

        		/* Start new DMA read */
        		AS5600_UpdateAngle_DMA(BLDCMotorArray[0]->sensor);
 800277c:	4b18      	ldr	r3, [pc, #96]	@ (80027e0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002784:	4618      	mov	r0, r3
 8002786:	f7fe fd5f 	bl	8001248 <AS5600_UpdateAngle_DMA>
        	}
        }

        /* Check I2C ch2 data receive complete */
        if(EVENT_FLAGS & I2C2_DMA_FLAG)
 800278a:	4b12      	ldr	r3, [pc, #72]	@ (80027d4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d017      	beq.n	80027c6 <HAL_TIM_PeriodElapsedCallback+0xb2>
        {
             if(BLDCMotorArray[1] != NULL && BLDCMotorArray[1]->sensor != NULL)
 8002796:	4b12      	ldr	r3, [pc, #72]	@ (80027e0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d013      	beq.n	80027c6 <HAL_TIM_PeriodElapsedCallback+0xb2>
 800279e:	4b10      	ldr	r3, [pc, #64]	@ (80027e0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00d      	beq.n	80027c6 <HAL_TIM_PeriodElapsedCallback+0xb2>
             {
            	EVENT_FLAGS &= (~I2C2_DMA_FLAG);
 80027aa:	4b0a      	ldr	r3, [pc, #40]	@ (80027d4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	f023 0302 	bic.w	r3, r3, #2
 80027b2:	b2da      	uxtb	r2, r3
 80027b4:	4b07      	ldr	r3, [pc, #28]	@ (80027d4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80027b6:	701a      	strb	r2, [r3, #0]

            	/* Start new DMA read */
                AS5600_UpdateAngle_DMA(BLDCMotorArray[1]->sensor);
 80027b8:	4b09      	ldr	r3, [pc, #36]	@ (80027e0 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7fe fd41 	bl	8001248 <AS5600_UpdateAngle_DMA>
        else {
        	OLED_CallbackCounter++;
        }
#endif
    }
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40000800 	.word	0x40000800
 80027d4:	20000734 	.word	0x20000734
 80027d8:	20000274 	.word	0x20000274
 80027dc:	20000284 	.word	0x20000284
 80027e0:	2000027c 	.word	0x2000027c

080027e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027e8:	b672      	cpsid	i
}
 80027ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027ec:	bf00      	nop
 80027ee:	e7fd      	b.n	80027ec <Error_Handler+0x8>

080027f0 <PID_Init>:
 * @params[in] float ki
 * @params[in] float kd
 * @retval PID structure
 */
PID_t PID_Init()
{
 80027f0:	b4b0      	push	{r4, r5, r7}
 80027f2:	b08d      	sub	sp, #52	@ 0x34
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
	PID_t PID_dev =
 80027f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002834 <PID_Init+0x44>)
 80027fa:	f107 0408 	add.w	r4, r7, #8
 80027fe:	461d      	mov	r5, r3
 8002800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002804:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002808:	e895 0003 	ldmia.w	r5, {r0, r1}
 800280c:	e884 0003 	stmia.w	r4, {r0, r1}
		.upper_bound = 10,
		.timestamp_us = 0,
		.mode = P
	};

	return PID_dev;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	461d      	mov	r5, r3
 8002814:	f107 0408 	add.w	r4, r7, #8
 8002818:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800281a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800281c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800281e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002820:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002824:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	3734      	adds	r7, #52	@ 0x34
 800282c:	46bd      	mov	sp, r7
 800282e:	bcb0      	pop	{r4, r5, r7}
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	0800d5fc 	.word	0x0800d5fc

08002838 <HAL_UARTEx_RxEventCallback>:
/*
 * @brief DMA receive to idle interrupt callback function
 * @note Sets the receive flag to 1 and append null terminator to end of string
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	807b      	strh	r3, [r7, #2]
	/* Indicate incoming data */
	serial_dev.rx_flag = 1;
 8002844:	4b0a      	ldr	r3, [pc, #40]	@ (8002870 <HAL_UARTEx_RxEventCallback+0x38>)
 8002846:	2201      	movs	r2, #1
 8002848:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

	/* Insert null terminator for C string */
	if(Size > 15)
 800284c:	887b      	ldrh	r3, [r7, #2]
 800284e:	2b0f      	cmp	r3, #15
 8002850:	d903      	bls.n	800285a <HAL_UARTEx_RxEventCallback+0x22>
	{
		serial_dev.rx_buff[15] = '\0';
 8002852:	4b07      	ldr	r3, [pc, #28]	@ (8002870 <HAL_UARTEx_RxEventCallback+0x38>)
 8002854:	2200      	movs	r2, #0
 8002856:	76da      	strb	r2, [r3, #27]
	}
	else
	{
		serial_dev.rx_buff[Size] = '\0';
	}
}
 8002858:	e004      	b.n	8002864 <HAL_UARTEx_RxEventCallback+0x2c>
		serial_dev.rx_buff[Size] = '\0';
 800285a:	887b      	ldrh	r3, [r7, #2]
 800285c:	4a04      	ldr	r2, [pc, #16]	@ (8002870 <HAL_UARTEx_RxEventCallback+0x38>)
 800285e:	4413      	add	r3, r2
 8002860:	2200      	movs	r2, #0
 8002862:	731a      	strb	r2, [r3, #12]
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	20000738 	.word	0x20000738

08002874 <Serial_Print>:
 * @param[in] UART handle
 * @param[in] string
 * @retval -
 */
__INLINE void Serial_Print(const char* s)
{
 8002874:	b590      	push	{r4, r7, lr}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(serial_dev.uart, s, strlen(s), HAL_MAX_DELAY);
 800287c:	4b08      	ldr	r3, [pc, #32]	@ (80028a0 <Serial_Print+0x2c>)
 800287e:	689c      	ldr	r4, [r3, #8]
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7fd fd0d 	bl	80002a0 <strlen>
 8002886:	4603      	mov	r3, r0
 8002888:	b29a      	uxth	r2, r3
 800288a:	f04f 33ff 	mov.w	r3, #4294967295
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	4620      	mov	r0, r4
 8002892:	f004 ffbb 	bl	800780c <HAL_UART_Transmit>
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	bd90      	pop	{r4, r7, pc}
 800289e:	bf00      	nop
 80028a0:	20000738 	.word	0x20000738

080028a4 <SerialCommander_ParseControlType>:
 * @param[in] const char* command string
 * @retval Ctrl_t ctrl
 * @note Returns Ctrl_t error if command not recognised
 */
static Ctrl_t SerialCommander_ParseControlType(uint8_t motor_idx, const char* type)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	4603      	mov	r3, r0
 80028ac:	6039      	str	r1, [r7, #0]
 80028ae:	71fb      	strb	r3, [r7, #7]
	BLDCMotor* motor = BLDCMotorArray[motor_idx];
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	4a27      	ldr	r2, [pc, #156]	@ (8002950 <SerialCommander_ParseControlType+0xac>)
 80028b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028b8:	60fb      	str	r3, [r7, #12]

	/* Motor not in use */
	if(!motor){
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d101      	bne.n	80028c4 <SerialCommander_ParseControlType+0x20>
		return error;
 80028c0:	2300      	movs	r3, #0
 80028c2:	e041      	b.n	8002948 <SerialCommander_ParseControlType+0xa4>
	}

	/* All the closed-loop control types need to check if sensor is attached */
	if(!strcmp(type, "OL-vel")){
 80028c4:	4923      	ldr	r1, [pc, #140]	@ (8002954 <SerialCommander_ParseControlType+0xb0>)
 80028c6:	6838      	ldr	r0, [r7, #0]
 80028c8:	f7fd fc8a 	bl	80001e0 <strcmp>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <SerialCommander_ParseControlType+0x32>
		return open_loop_velocity;
 80028d2:	2302      	movs	r3, #2
 80028d4:	e038      	b.n	8002948 <SerialCommander_ParseControlType+0xa4>
	}
	else if(!strcmp(type, "CL-pos") && motor->sensor != NULL){
 80028d6:	4920      	ldr	r1, [pc, #128]	@ (8002958 <SerialCommander_ParseControlType+0xb4>)
 80028d8:	6838      	ldr	r0, [r7, #0]
 80028da:	f7fd fc81 	bl	80001e0 <strcmp>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d106      	bne.n	80028f2 <SerialCommander_ParseControlType+0x4e>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <SerialCommander_ParseControlType+0x4e>
		return closed_loop_position_no_cs;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e02a      	b.n	8002948 <SerialCommander_ParseControlType+0xa4>
	}
	else if(!strcmp(type, "CL-vel") && motor->sensor != NULL){
 80028f2:	491a      	ldr	r1, [pc, #104]	@ (800295c <SerialCommander_ParseControlType+0xb8>)
 80028f4:	6838      	ldr	r0, [r7, #0]
 80028f6:	f7fd fc73 	bl	80001e0 <strcmp>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d106      	bne.n	800290e <SerialCommander_ParseControlType+0x6a>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002906:	2b00      	cmp	r3, #0
 8002908:	d001      	beq.n	800290e <SerialCommander_ParseControlType+0x6a>
		return closed_loop_velocity_no_cs;
 800290a:	2304      	movs	r3, #4
 800290c:	e01c      	b.n	8002948 <SerialCommander_ParseControlType+0xa4>
	}
	else if(!strcmp(type, "CL-pos-cs") && motor->sensor != NULL){
 800290e:	4914      	ldr	r1, [pc, #80]	@ (8002960 <SerialCommander_ParseControlType+0xbc>)
 8002910:	6838      	ldr	r0, [r7, #0]
 8002912:	f7fd fc65 	bl	80001e0 <strcmp>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d106      	bne.n	800292a <SerialCommander_ParseControlType+0x86>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <SerialCommander_ParseControlType+0x86>
		return closed_loop_position;
 8002926:	2305      	movs	r3, #5
 8002928:	e00e      	b.n	8002948 <SerialCommander_ParseControlType+0xa4>
	}
	else if(!strcmp(type, "CL-vel-cs") && motor->sensor != NULL){
 800292a:	490e      	ldr	r1, [pc, #56]	@ (8002964 <SerialCommander_ParseControlType+0xc0>)
 800292c:	6838      	ldr	r0, [r7, #0]
 800292e:	f7fd fc57 	bl	80001e0 <strcmp>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d106      	bne.n	8002946 <SerialCommander_ParseControlType+0xa2>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <SerialCommander_ParseControlType+0xa2>
		return closed_loop_velocity;
 8002942:	2306      	movs	r3, #6
 8002944:	e000      	b.n	8002948 <SerialCommander_ParseControlType+0xa4>
	}
	else{
		return error;
 8002946:	2300      	movs	r3, #0
	}
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	2000027c 	.word	0x2000027c
 8002954:	0800d624 	.word	0x0800d624
 8002958:	0800d62c 	.word	0x0800d62c
 800295c:	0800d634 	.word	0x0800d634
 8002960:	0800d63c 	.word	0x0800d63c
 8002964:	0800d648 	.word	0x0800d648

08002968 <SerialCommander_ParseCommand>:
 * @param[in] float* val
 * @param[in] Ctrl_t* ctrl
 * @retval uint8_t state; 0 if success, 1 if error
 */
static uint8_t SerialCommander_ParseCommand(const char* cmd, uint8_t* motor_idx, char* param, uint32_t param_size, float* val, Ctrl_t* ctrl)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08e      	sub	sp, #56	@ 0x38
 800296c:	af00      	add	r7, sp, #0
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	607a      	str	r2, [r7, #4]
 8002974:	603b      	str	r3, [r7, #0]
	char buff[32];

	/* Copy cmd to buffer & append null terminator */
	strncpy(buff, cmd, sizeof(buff));
 8002976:	f107 0314 	add.w	r3, r7, #20
 800297a:	2220      	movs	r2, #32
 800297c:	68f9      	ldr	r1, [r7, #12]
 800297e:	4618      	mov	r0, r3
 8002980:	f007 fed1 	bl	800a726 <strncpy>
	buff[sizeof(buff) - 1] = '\0';
 8002984:	2300      	movs	r3, #0
 8002986:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

	/* Generate token: motor ID */
	char* tok = strtok(buff, " ");
 800298a:	f107 0314 	add.w	r3, r7, #20
 800298e:	4936      	ldr	r1, [pc, #216]	@ (8002a68 <SerialCommander_ParseCommand+0x100>)
 8002990:	4618      	mov	r0, r3
 8002992:	f007 fedb 	bl	800a74c <strtok>
 8002996:	6378      	str	r0, [r7, #52]	@ 0x34
	if(!tok || tok[0] != 'm')
 8002998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800299a:	2b00      	cmp	r3, #0
 800299c:	d003      	beq.n	80029a6 <SerialCommander_ParseCommand+0x3e>
 800299e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b6d      	cmp	r3, #109	@ 0x6d
 80029a4:	d004      	beq.n	80029b0 <SerialCommander_ParseCommand+0x48>
	{
		Serial_Print("Invalid motor ID\n");
 80029a6:	4831      	ldr	r0, [pc, #196]	@ (8002a6c <SerialCommander_ParseCommand+0x104>)
 80029a8:	f7ff ff64 	bl	8002874 <Serial_Print>
		return 1;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e056      	b.n	8002a5e <SerialCommander_ParseCommand+0xf6>
	}

	*motor_idx = tok[1] - '0';
 80029b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029b2:	3301      	adds	r3, #1
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	3b30      	subs	r3, #48	@ 0x30
 80029b8:	b2da      	uxtb	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	701a      	strb	r2, [r3, #0]
	if(*motor_idx < 0 || *motor_idx >= 2)
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d904      	bls.n	80029d0 <SerialCommander_ParseCommand+0x68>
	{
		Serial_Print("Motor ID out of range\n");
 80029c6:	482a      	ldr	r0, [pc, #168]	@ (8002a70 <SerialCommander_ParseCommand+0x108>)
 80029c8:	f7ff ff54 	bl	8002874 <Serial_Print>
		return 1;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e046      	b.n	8002a5e <SerialCommander_ParseCommand+0xf6>
	}

	/* Generate token: param */
	tok = strtok(NULL, " ");
 80029d0:	4925      	ldr	r1, [pc, #148]	@ (8002a68 <SerialCommander_ParseCommand+0x100>)
 80029d2:	2000      	movs	r0, #0
 80029d4:	f007 feba 	bl	800a74c <strtok>
 80029d8:	6378      	str	r0, [r7, #52]	@ 0x34
	if(!tok)
 80029da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d104      	bne.n	80029ea <SerialCommander_ParseCommand+0x82>
	{
		Serial_Print("Invalid command: no param\n");
 80029e0:	4824      	ldr	r0, [pc, #144]	@ (8002a74 <SerialCommander_ParseCommand+0x10c>)
 80029e2:	f7ff ff47 	bl	8002874 <Serial_Print>
		return 1;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e039      	b.n	8002a5e <SerialCommander_ParseCommand+0xf6>
	}
	strncpy(param, tok, param_size);
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f007 fe99 	bl	800a726 <strncpy>
	param[param_size - 1] = '\0';
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	4413      	add	r3, r2
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]

	/* Generate token: value */
	tok = strtok(NULL, " ");
 8002a00:	4919      	ldr	r1, [pc, #100]	@ (8002a68 <SerialCommander_ParseCommand+0x100>)
 8002a02:	2000      	movs	r0, #0
 8002a04:	f007 fea2 	bl	800a74c <strtok>
 8002a08:	6378      	str	r0, [r7, #52]	@ 0x34
	if(!tok)
 8002a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d104      	bne.n	8002a1a <SerialCommander_ParseCommand+0xb2>
	{
		Serial_Print("Invalid command: no value\n");
 8002a10:	4819      	ldr	r0, [pc, #100]	@ (8002a78 <SerialCommander_ParseCommand+0x110>)
 8002a12:	f7ff ff2f 	bl	8002874 <Serial_Print>
		return 1;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e021      	b.n	8002a5e <SerialCommander_ParseCommand+0xf6>
	}

	/* Handle control parameter */
	if(!strcmp(param, "ctrl")){
 8002a1a:	4918      	ldr	r1, [pc, #96]	@ (8002a7c <SerialCommander_ParseCommand+0x114>)
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7fd fbdf 	bl	80001e0 <strcmp>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10a      	bne.n	8002a3e <SerialCommander_ParseCommand+0xd6>
		*ctrl = SerialCommander_ParseControlType(*motor_idx, (const char*)tok);
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff ff38 	bl	80028a4 <SerialCommander_ParseControlType>
 8002a34:	4603      	mov	r3, r0
 8002a36:	461a      	mov	r2, r3
 8002a38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a3a:	701a      	strb	r2, [r3, #0]
 8002a3c:	e00e      	b.n	8002a5c <SerialCommander_ParseCommand+0xf4>
	}
	else{
		*ctrl = error;
 8002a3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a40:	2200      	movs	r2, #0
 8002a42:	701a      	strb	r2, [r3, #0]
		*val = atof(tok);
 8002a44:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002a46:	f006 f8af 	bl	8008ba8 <atof>
 8002a4a:	ec53 2b10 	vmov	r2, r3, d0
 8002a4e:	4610      	mov	r0, r2
 8002a50:	4619      	mov	r1, r3
 8002a52:	f7fe f8e1 	bl	8000c18 <__aeabi_d2f>
 8002a56:	4602      	mov	r2, r0
 8002a58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a5a:	601a      	str	r2, [r3, #0]
	}

	return 0;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3738      	adds	r7, #56	@ 0x38
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	0800d654 	.word	0x0800d654
 8002a6c:	0800d658 	.word	0x0800d658
 8002a70:	0800d66c 	.word	0x0800d66c
 8002a74:	0800d684 	.word	0x0800d684
 8002a78:	0800d6a0 	.word	0x0800d6a0
 8002a7c:	0800d6bc 	.word	0x0800d6bc

08002a80 <SerialCommander_SetMotorParam>:
 * @param[in] float val
 * @param[in] Ctrl_t ctrl
 * @retval uint8_t state; 0 if success, 1 if error
 */
static uint8_t SerialCommander_SetMotorParam(uint8_t motor_idx, const char* param, float val, Ctrl_t ctrl)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	ed87 0a01 	vstr	s0, [r7, #4]
 8002a8e:	73fb      	strb	r3, [r7, #15]
 8002a90:	4613      	mov	r3, r2
 8002a92:	73bb      	strb	r3, [r7, #14]
	/* Get motor reference & check if motor is in use */
	BLDCMotor* motor = BLDCMotorArray[motor_idx];
 8002a94:	7bfb      	ldrb	r3, [r7, #15]
 8002a96:	4a37      	ldr	r2, [pc, #220]	@ (8002b74 <SerialCommander_SetMotorParam+0xf4>)
 8002a98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a9c:	617b      	str	r3, [r7, #20]
	if(!motor)
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d101      	bne.n	8002aa8 <SerialCommander_SetMotorParam+0x28>
	{
		return 1;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e060      	b.n	8002b6a <SerialCommander_SetMotorParam+0xea>
	}

	/* Set param value */
	if(!strcmp(param, "vel")){
 8002aa8:	4933      	ldr	r1, [pc, #204]	@ (8002b78 <SerialCommander_SetMotorParam+0xf8>)
 8002aaa:	68b8      	ldr	r0, [r7, #8]
 8002aac:	f7fd fb98 	bl	80001e0 <strcmp>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d103      	bne.n	8002abe <SerialCommander_SetMotorParam+0x3e>
		motor->target_velocity = val;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	60da      	str	r2, [r3, #12]
 8002abc:	e054      	b.n	8002b68 <SerialCommander_SetMotorParam+0xe8>
	}
	else if(!strcmp(param, "pos")){
 8002abe:	492f      	ldr	r1, [pc, #188]	@ (8002b7c <SerialCommander_SetMotorParam+0xfc>)
 8002ac0:	68b8      	ldr	r0, [r7, #8]
 8002ac2:	f7fd fb8d 	bl	80001e0 <strcmp>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d103      	bne.n	8002ad4 <SerialCommander_SetMotorParam+0x54>
		motor->target_pos = val;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	611a      	str	r2, [r3, #16]
 8002ad2:	e049      	b.n	8002b68 <SerialCommander_SetMotorParam+0xe8>
	}
	else if(!strcmp(param, "v_limit")){
 8002ad4:	492a      	ldr	r1, [pc, #168]	@ (8002b80 <SerialCommander_SetMotorParam+0x100>)
 8002ad6:	68b8      	ldr	r0, [r7, #8]
 8002ad8:	f7fd fb82 	bl	80001e0 <strcmp>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d103      	bne.n	8002aea <SerialCommander_SetMotorParam+0x6a>
		motor->voltage_limit = val;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	605a      	str	r2, [r3, #4]
 8002ae8:	e03e      	b.n	8002b68 <SerialCommander_SetMotorParam+0xe8>
	}
	else if(!strcmp(param, "pid_p")){
 8002aea:	4926      	ldr	r1, [pc, #152]	@ (8002b84 <SerialCommander_SetMotorParam+0x104>)
 8002aec:	68b8      	ldr	r0, [r7, #8]
 8002aee:	f7fd fb77 	bl	80001e0 <strcmp>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d103      	bne.n	8002b00 <SerialCommander_SetMotorParam+0x80>
		motor->pid.kp = val;
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	655a      	str	r2, [r3, #84]	@ 0x54
 8002afe:	e033      	b.n	8002b68 <SerialCommander_SetMotorParam+0xe8>
	}
	else if(!strcmp(param, "pid_i")){
 8002b00:	4921      	ldr	r1, [pc, #132]	@ (8002b88 <SerialCommander_SetMotorParam+0x108>)
 8002b02:	68b8      	ldr	r0, [r7, #8]
 8002b04:	f7fd fb6c 	bl	80001e0 <strcmp>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d103      	bne.n	8002b16 <SerialCommander_SetMotorParam+0x96>
		motor->pid.ki = val;
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b14:	e028      	b.n	8002b68 <SerialCommander_SetMotorParam+0xe8>
	}
	else if(!strcmp(param, "pid_d")){
 8002b16:	491d      	ldr	r1, [pc, #116]	@ (8002b8c <SerialCommander_SetMotorParam+0x10c>)
 8002b18:	68b8      	ldr	r0, [r7, #8]
 8002b1a:	f7fd fb61 	bl	80001e0 <strcmp>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d103      	bne.n	8002b2c <SerialCommander_SetMotorParam+0xac>
		motor->pid.kd = val;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002b2a:	e01d      	b.n	8002b68 <SerialCommander_SetMotorParam+0xe8>
	}
	else if(!strcmp(param, "current")){
 8002b2c:	4918      	ldr	r1, [pc, #96]	@ (8002b90 <SerialCommander_SetMotorParam+0x110>)
 8002b2e:	68b8      	ldr	r0, [r7, #8]
 8002b30:	f7fd fb56 	bl	80001e0 <strcmp>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d103      	bne.n	8002b42 <SerialCommander_SetMotorParam+0xc2>
		motor->target_current = val;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	615a      	str	r2, [r3, #20]
 8002b40:	e012      	b.n	8002b68 <SerialCommander_SetMotorParam+0xe8>
	}
	else if(!strcmp(param, "ctrl")){
 8002b42:	4914      	ldr	r1, [pc, #80]	@ (8002b94 <SerialCommander_SetMotorParam+0x114>)
 8002b44:	68b8      	ldr	r0, [r7, #8]
 8002b46:	f7fd fb4b 	bl	80001e0 <strcmp>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d109      	bne.n	8002b64 <SerialCommander_SetMotorParam+0xe4>
		/* No update to control type if error parsing */
		if(ctrl != error){
 8002b50:	7bbb      	ldrb	r3, [r7, #14]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d004      	beq.n	8002b60 <SerialCommander_SetMotorParam+0xe0>
			motor->control = ctrl;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	7bba      	ldrb	r2, [r7, #14]
 8002b5a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
 8002b5e:	e003      	b.n	8002b68 <SerialCommander_SetMotorParam+0xe8>
		}
		else{
			return 1;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e002      	b.n	8002b6a <SerialCommander_SetMotorParam+0xea>
		}
	}
	else{
		return 1;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e000      	b.n	8002b6a <SerialCommander_SetMotorParam+0xea>
	}
	return 0;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	2000027c 	.word	0x2000027c
 8002b78:	0800d6c4 	.word	0x0800d6c4
 8002b7c:	0800d6c8 	.word	0x0800d6c8
 8002b80:	0800d6cc 	.word	0x0800d6cc
 8002b84:	0800d6d4 	.word	0x0800d6d4
 8002b88:	0800d6dc 	.word	0x0800d6dc
 8002b8c:	0800d6e4 	.word	0x0800d6e4
 8002b90:	0800d6ec 	.word	0x0800d6ec
 8002b94:	0800d6bc 	.word	0x0800d6bc

08002b98 <SerialCommander_PollCommands>:
 * @brief Event updater; to be called repeatedly in main loop
 * @param[in] -
 * @retval -
 */
void SerialCommander_PollCommands()
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b08a      	sub	sp, #40	@ 0x28
 8002b9c:	af02      	add	r7, sp, #8
	/* If data flag raised, parse buffer data */
	if(serial_dev.rx_flag == 1)
 8002b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002c0c <SerialCommander_PollCommands+0x74>)
 8002ba0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d12d      	bne.n	8002c04 <SerialCommander_PollCommands+0x6c>
		uint8_t motor_idx;
		char param[16];
		float val;
		Ctrl_t ctrl;

		uint8_t state = 1;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	77fb      	strb	r3, [r7, #31]

		/* Parse commands */
		state = SerialCommander_ParseCommand((const char*)serial_dev.rx_buff, &motor_idx, param, sizeof(param), &val, &ctrl);
 8002bac:	f107 020c 	add.w	r2, r7, #12
 8002bb0:	f107 011e 	add.w	r1, r7, #30
 8002bb4:	1dfb      	adds	r3, r7, #7
 8002bb6:	9301      	str	r3, [sp, #4]
 8002bb8:	f107 0308 	add.w	r3, r7, #8
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	2310      	movs	r3, #16
 8002bc0:	4813      	ldr	r0, [pc, #76]	@ (8002c10 <SerialCommander_PollCommands+0x78>)
 8002bc2:	f7ff fed1 	bl	8002968 <SerialCommander_ParseCommand>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	77fb      	strb	r3, [r7, #31]

		if(state){
 8002bca:	7ffb      	ldrb	r3, [r7, #31]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d118      	bne.n	8002c02 <SerialCommander_PollCommands+0x6a>
			return;
		}

		/* Set new params */
		state = SerialCommander_SetMotorParam(motor_idx, (const char*)param, val, ctrl);
 8002bd0:	7fbb      	ldrb	r3, [r7, #30]
 8002bd2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bd6:	79fa      	ldrb	r2, [r7, #7]
 8002bd8:	f107 010c 	add.w	r1, r7, #12
 8002bdc:	eeb0 0a67 	vmov.f32	s0, s15
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff ff4d 	bl	8002a80 <SerialCommander_SetMotorParam>
 8002be6:	4603      	mov	r3, r0
 8002be8:	77fb      	strb	r3, [r7, #31]

		/* Initiate next uart receive to idle event */
		HAL_UARTEx_ReceiveToIdle_DMA(serial_dev.uart, serial_dev.rx_buff, 32);
 8002bea:	4b08      	ldr	r3, [pc, #32]	@ (8002c0c <SerialCommander_PollCommands+0x74>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	4907      	ldr	r1, [pc, #28]	@ (8002c10 <SerialCommander_PollCommands+0x78>)
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f004 fe95 	bl	8007922 <HAL_UARTEx_ReceiveToIdle_DMA>
		serial_dev.rx_flag = 0;
 8002bf8:	4b04      	ldr	r3, [pc, #16]	@ (8002c0c <SerialCommander_PollCommands+0x74>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
 8002c00:	e000      	b.n	8002c04 <SerialCommander_PollCommands+0x6c>
			return;
 8002c02:	bf00      	nop
	}
}
 8002c04:	3720      	adds	r7, #32
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	20000738 	.word	0x20000738
 8002c10:	20000744 	.word	0x20000744

08002c14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	607b      	str	r3, [r7, #4]
 8002c1e:	4b10      	ldr	r3, [pc, #64]	@ (8002c60 <HAL_MspInit+0x4c>)
 8002c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c22:	4a0f      	ldr	r2, [pc, #60]	@ (8002c60 <HAL_MspInit+0x4c>)
 8002c24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c28:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c60 <HAL_MspInit+0x4c>)
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c32:	607b      	str	r3, [r7, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	603b      	str	r3, [r7, #0]
 8002c3a:	4b09      	ldr	r3, [pc, #36]	@ (8002c60 <HAL_MspInit+0x4c>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3e:	4a08      	ldr	r2, [pc, #32]	@ (8002c60 <HAL_MspInit+0x4c>)
 8002c40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c44:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c46:	4b06      	ldr	r3, [pc, #24]	@ (8002c60 <HAL_MspInit+0x4c>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800

08002c64 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08a      	sub	sp, #40	@ 0x28
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6c:	f107 0314 	add.w	r3, r7, #20
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a2f      	ldr	r2, [pc, #188]	@ (8002d40 <HAL_ADC_MspInit+0xdc>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d157      	bne.n	8002d36 <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	613b      	str	r3, [r7, #16]
 8002c8a:	4b2e      	ldr	r3, [pc, #184]	@ (8002d44 <HAL_ADC_MspInit+0xe0>)
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c8e:	4a2d      	ldr	r2, [pc, #180]	@ (8002d44 <HAL_ADC_MspInit+0xe0>)
 8002c90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c96:	4b2b      	ldr	r3, [pc, #172]	@ (8002d44 <HAL_ADC_MspInit+0xe0>)
 8002c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	4b27      	ldr	r3, [pc, #156]	@ (8002d44 <HAL_ADC_MspInit+0xe0>)
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002caa:	4a26      	ldr	r2, [pc, #152]	@ (8002d44 <HAL_ADC_MspInit+0xe0>)
 8002cac:	f043 0301 	orr.w	r3, r3, #1
 8002cb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cb2:	4b24      	ldr	r3, [pc, #144]	@ (8002d44 <HAL_ADC_MspInit+0xe0>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8002cbe:	231b      	movs	r3, #27
 8002cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cca:	f107 0314 	add.w	r3, r7, #20
 8002cce:	4619      	mov	r1, r3
 8002cd0:	481d      	ldr	r0, [pc, #116]	@ (8002d48 <HAL_ADC_MspInit+0xe4>)
 8002cd2:	f001 fe61 	bl	8004998 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002cd6:	4b1d      	ldr	r3, [pc, #116]	@ (8002d4c <HAL_ADC_MspInit+0xe8>)
 8002cd8:	4a1d      	ldr	r2, [pc, #116]	@ (8002d50 <HAL_ADC_MspInit+0xec>)
 8002cda:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d4c <HAL_ADC_MspInit+0xe8>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d4c <HAL_ADC_MspInit+0xe8>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ce8:	4b18      	ldr	r3, [pc, #96]	@ (8002d4c <HAL_ADC_MspInit+0xe8>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002cee:	4b17      	ldr	r3, [pc, #92]	@ (8002d4c <HAL_ADC_MspInit+0xe8>)
 8002cf0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002cf4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002cf6:	4b15      	ldr	r3, [pc, #84]	@ (8002d4c <HAL_ADC_MspInit+0xe8>)
 8002cf8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002cfc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002cfe:	4b13      	ldr	r3, [pc, #76]	@ (8002d4c <HAL_ADC_MspInit+0xe8>)
 8002d00:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002d04:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002d06:	4b11      	ldr	r3, [pc, #68]	@ (8002d4c <HAL_ADC_MspInit+0xe8>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002d4c <HAL_ADC_MspInit+0xe8>)
 8002d0e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002d12:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d14:	4b0d      	ldr	r3, [pc, #52]	@ (8002d4c <HAL_ADC_MspInit+0xe8>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d1a:	480c      	ldr	r0, [pc, #48]	@ (8002d4c <HAL_ADC_MspInit+0xe8>)
 8002d1c:	f001 fa2e 	bl	800417c <HAL_DMA_Init>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002d26:	f7ff fd5d 	bl	80027e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a07      	ldr	r2, [pc, #28]	@ (8002d4c <HAL_ADC_MspInit+0xe8>)
 8002d2e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002d30:	4a06      	ldr	r2, [pc, #24]	@ (8002d4c <HAL_ADC_MspInit+0xe8>)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002d36:	bf00      	nop
 8002d38:	3728      	adds	r7, #40	@ 0x28
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40012000 	.word	0x40012000
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40020000 	.word	0x40020000
 8002d4c:	200002cc 	.word	0x200002cc
 8002d50:	40026410 	.word	0x40026410

08002d54 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b08c      	sub	sp, #48	@ 0x30
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d5c:	f107 031c 	add.w	r3, r7, #28
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
 8002d64:	605a      	str	r2, [r3, #4]
 8002d66:	609a      	str	r2, [r3, #8]
 8002d68:	60da      	str	r2, [r3, #12]
 8002d6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a97      	ldr	r2, [pc, #604]	@ (8002fd0 <HAL_I2C_MspInit+0x27c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	f040 8088 	bne.w	8002e88 <HAL_I2C_MspInit+0x134>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61bb      	str	r3, [r7, #24]
 8002d7c:	4b95      	ldr	r3, [pc, #596]	@ (8002fd4 <HAL_I2C_MspInit+0x280>)
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d80:	4a94      	ldr	r2, [pc, #592]	@ (8002fd4 <HAL_I2C_MspInit+0x280>)
 8002d82:	f043 0302 	orr.w	r3, r3, #2
 8002d86:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d88:	4b92      	ldr	r3, [pc, #584]	@ (8002fd4 <HAL_I2C_MspInit+0x280>)
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	61bb      	str	r3, [r7, #24]
 8002d92:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d94:	23c0      	movs	r3, #192	@ 0xc0
 8002d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d98:	2312      	movs	r3, #18
 8002d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002da0:	2303      	movs	r3, #3
 8002da2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002da4:	2304      	movs	r3, #4
 8002da6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002da8:	f107 031c 	add.w	r3, r7, #28
 8002dac:	4619      	mov	r1, r3
 8002dae:	488a      	ldr	r0, [pc, #552]	@ (8002fd8 <HAL_I2C_MspInit+0x284>)
 8002db0:	f001 fdf2 	bl	8004998 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]
 8002db8:	4b86      	ldr	r3, [pc, #536]	@ (8002fd4 <HAL_I2C_MspInit+0x280>)
 8002dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbc:	4a85      	ldr	r2, [pc, #532]	@ (8002fd4 <HAL_I2C_MspInit+0x280>)
 8002dbe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002dc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002dc4:	4b83      	ldr	r3, [pc, #524]	@ (8002fd4 <HAL_I2C_MspInit+0x280>)
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dcc:	617b      	str	r3, [r7, #20]
 8002dce:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002dd0:	4b82      	ldr	r3, [pc, #520]	@ (8002fdc <HAL_I2C_MspInit+0x288>)
 8002dd2:	4a83      	ldr	r2, [pc, #524]	@ (8002fe0 <HAL_I2C_MspInit+0x28c>)
 8002dd4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002dd6:	4b81      	ldr	r3, [pc, #516]	@ (8002fdc <HAL_I2C_MspInit+0x288>)
 8002dd8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ddc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dde:	4b7f      	ldr	r3, [pc, #508]	@ (8002fdc <HAL_I2C_MspInit+0x288>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002de4:	4b7d      	ldr	r3, [pc, #500]	@ (8002fdc <HAL_I2C_MspInit+0x288>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002dea:	4b7c      	ldr	r3, [pc, #496]	@ (8002fdc <HAL_I2C_MspInit+0x288>)
 8002dec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002df0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002df2:	4b7a      	ldr	r3, [pc, #488]	@ (8002fdc <HAL_I2C_MspInit+0x288>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002df8:	4b78      	ldr	r3, [pc, #480]	@ (8002fdc <HAL_I2C_MspInit+0x288>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002dfe:	4b77      	ldr	r3, [pc, #476]	@ (8002fdc <HAL_I2C_MspInit+0x288>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e04:	4b75      	ldr	r3, [pc, #468]	@ (8002fdc <HAL_I2C_MspInit+0x288>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e0a:	4b74      	ldr	r3, [pc, #464]	@ (8002fdc <HAL_I2C_MspInit+0x288>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002e10:	4872      	ldr	r0, [pc, #456]	@ (8002fdc <HAL_I2C_MspInit+0x288>)
 8002e12:	f001 f9b3 	bl	800417c <HAL_DMA_Init>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8002e1c:	f7ff fce2 	bl	80027e4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a6e      	ldr	r2, [pc, #440]	@ (8002fdc <HAL_I2C_MspInit+0x288>)
 8002e24:	639a      	str	r2, [r3, #56]	@ 0x38
 8002e26:	4a6d      	ldr	r2, [pc, #436]	@ (8002fdc <HAL_I2C_MspInit+0x288>)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8002e2c:	4b6d      	ldr	r3, [pc, #436]	@ (8002fe4 <HAL_I2C_MspInit+0x290>)
 8002e2e:	4a6e      	ldr	r2, [pc, #440]	@ (8002fe8 <HAL_I2C_MspInit+0x294>)
 8002e30:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8002e32:	4b6c      	ldr	r3, [pc, #432]	@ (8002fe4 <HAL_I2C_MspInit+0x290>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e38:	4b6a      	ldr	r3, [pc, #424]	@ (8002fe4 <HAL_I2C_MspInit+0x290>)
 8002e3a:	2240      	movs	r2, #64	@ 0x40
 8002e3c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e3e:	4b69      	ldr	r3, [pc, #420]	@ (8002fe4 <HAL_I2C_MspInit+0x290>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e44:	4b67      	ldr	r3, [pc, #412]	@ (8002fe4 <HAL_I2C_MspInit+0x290>)
 8002e46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e4a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e4c:	4b65      	ldr	r3, [pc, #404]	@ (8002fe4 <HAL_I2C_MspInit+0x290>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e52:	4b64      	ldr	r3, [pc, #400]	@ (8002fe4 <HAL_I2C_MspInit+0x290>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002e58:	4b62      	ldr	r3, [pc, #392]	@ (8002fe4 <HAL_I2C_MspInit+0x290>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e5e:	4b61      	ldr	r3, [pc, #388]	@ (8002fe4 <HAL_I2C_MspInit+0x290>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e64:	4b5f      	ldr	r3, [pc, #380]	@ (8002fe4 <HAL_I2C_MspInit+0x290>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002e6a:	485e      	ldr	r0, [pc, #376]	@ (8002fe4 <HAL_I2C_MspInit+0x290>)
 8002e6c:	f001 f986 	bl	800417c <HAL_DMA_Init>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8002e76:	f7ff fcb5 	bl	80027e4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a59      	ldr	r2, [pc, #356]	@ (8002fe4 <HAL_I2C_MspInit+0x290>)
 8002e7e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e80:	4a58      	ldr	r2, [pc, #352]	@ (8002fe4 <HAL_I2C_MspInit+0x290>)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002e86:	e09f      	b.n	8002fc8 <HAL_I2C_MspInit+0x274>
  else if(hi2c->Instance==I2C2)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a57      	ldr	r2, [pc, #348]	@ (8002fec <HAL_I2C_MspInit+0x298>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	f040 809a 	bne.w	8002fc8 <HAL_I2C_MspInit+0x274>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e94:	2300      	movs	r3, #0
 8002e96:	613b      	str	r3, [r7, #16]
 8002e98:	4b4e      	ldr	r3, [pc, #312]	@ (8002fd4 <HAL_I2C_MspInit+0x280>)
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9c:	4a4d      	ldr	r2, [pc, #308]	@ (8002fd4 <HAL_I2C_MspInit+0x280>)
 8002e9e:	f043 0302 	orr.w	r3, r3, #2
 8002ea2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ea4:	4b4b      	ldr	r3, [pc, #300]	@ (8002fd4 <HAL_I2C_MspInit+0x280>)
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002eb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002eb6:	2312      	movs	r3, #18
 8002eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002ec2:	2304      	movs	r3, #4
 8002ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ec6:	f107 031c 	add.w	r3, r7, #28
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4842      	ldr	r0, [pc, #264]	@ (8002fd8 <HAL_I2C_MspInit+0x284>)
 8002ece:	f001 fd63 	bl	8004998 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002ed2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ed8:	2312      	movs	r3, #18
 8002eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002edc:	2300      	movs	r3, #0
 8002ede:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002ee4:	2309      	movs	r3, #9
 8002ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee8:	f107 031c 	add.w	r3, r7, #28
 8002eec:	4619      	mov	r1, r3
 8002eee:	483a      	ldr	r0, [pc, #232]	@ (8002fd8 <HAL_I2C_MspInit+0x284>)
 8002ef0:	f001 fd52 	bl	8004998 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	4b36      	ldr	r3, [pc, #216]	@ (8002fd4 <HAL_I2C_MspInit+0x280>)
 8002efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efc:	4a35      	ldr	r2, [pc, #212]	@ (8002fd4 <HAL_I2C_MspInit+0x280>)
 8002efe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002f02:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f04:	4b33      	ldr	r3, [pc, #204]	@ (8002fd4 <HAL_I2C_MspInit+0x280>)
 8002f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
    hdma_i2c2_rx.Instance = DMA1_Stream2;
 8002f10:	4b37      	ldr	r3, [pc, #220]	@ (8002ff0 <HAL_I2C_MspInit+0x29c>)
 8002f12:	4a38      	ldr	r2, [pc, #224]	@ (8002ff4 <HAL_I2C_MspInit+0x2a0>)
 8002f14:	601a      	str	r2, [r3, #0]
    hdma_i2c2_rx.Init.Channel = DMA_CHANNEL_7;
 8002f16:	4b36      	ldr	r3, [pc, #216]	@ (8002ff0 <HAL_I2C_MspInit+0x29c>)
 8002f18:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8002f1c:	605a      	str	r2, [r3, #4]
    hdma_i2c2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f1e:	4b34      	ldr	r3, [pc, #208]	@ (8002ff0 <HAL_I2C_MspInit+0x29c>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	609a      	str	r2, [r3, #8]
    hdma_i2c2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f24:	4b32      	ldr	r3, [pc, #200]	@ (8002ff0 <HAL_I2C_MspInit+0x29c>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	60da      	str	r2, [r3, #12]
    hdma_i2c2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002f2a:	4b31      	ldr	r3, [pc, #196]	@ (8002ff0 <HAL_I2C_MspInit+0x29c>)
 8002f2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f30:	611a      	str	r2, [r3, #16]
    hdma_i2c2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f32:	4b2f      	ldr	r3, [pc, #188]	@ (8002ff0 <HAL_I2C_MspInit+0x29c>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	615a      	str	r2, [r3, #20]
    hdma_i2c2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f38:	4b2d      	ldr	r3, [pc, #180]	@ (8002ff0 <HAL_I2C_MspInit+0x29c>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	619a      	str	r2, [r3, #24]
    hdma_i2c2_rx.Init.Mode = DMA_NORMAL;
 8002f3e:	4b2c      	ldr	r3, [pc, #176]	@ (8002ff0 <HAL_I2C_MspInit+0x29c>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	61da      	str	r2, [r3, #28]
    hdma_i2c2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002f44:	4b2a      	ldr	r3, [pc, #168]	@ (8002ff0 <HAL_I2C_MspInit+0x29c>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	621a      	str	r2, [r3, #32]
    hdma_i2c2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f4a:	4b29      	ldr	r3, [pc, #164]	@ (8002ff0 <HAL_I2C_MspInit+0x29c>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_rx) != HAL_OK)
 8002f50:	4827      	ldr	r0, [pc, #156]	@ (8002ff0 <HAL_I2C_MspInit+0x29c>)
 8002f52:	f001 f913 	bl	800417c <HAL_DMA_Init>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <HAL_I2C_MspInit+0x20c>
      Error_Handler();
 8002f5c:	f7ff fc42 	bl	80027e4 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c2_rx);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a23      	ldr	r2, [pc, #140]	@ (8002ff0 <HAL_I2C_MspInit+0x29c>)
 8002f64:	639a      	str	r2, [r3, #56]	@ 0x38
 8002f66:	4a22      	ldr	r2, [pc, #136]	@ (8002ff0 <HAL_I2C_MspInit+0x29c>)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c2_tx.Instance = DMA1_Stream7;
 8002f6c:	4b22      	ldr	r3, [pc, #136]	@ (8002ff8 <HAL_I2C_MspInit+0x2a4>)
 8002f6e:	4a23      	ldr	r2, [pc, #140]	@ (8002ffc <HAL_I2C_MspInit+0x2a8>)
 8002f70:	601a      	str	r2, [r3, #0]
    hdma_i2c2_tx.Init.Channel = DMA_CHANNEL_7;
 8002f72:	4b21      	ldr	r3, [pc, #132]	@ (8002ff8 <HAL_I2C_MspInit+0x2a4>)
 8002f74:	f04f 6260 	mov.w	r2, #234881024	@ 0xe000000
 8002f78:	605a      	str	r2, [r3, #4]
    hdma_i2c2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ff8 <HAL_I2C_MspInit+0x2a4>)
 8002f7c:	2240      	movs	r2, #64	@ 0x40
 8002f7e:	609a      	str	r2, [r3, #8]
    hdma_i2c2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f80:	4b1d      	ldr	r3, [pc, #116]	@ (8002ff8 <HAL_I2C_MspInit+0x2a4>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	60da      	str	r2, [r3, #12]
    hdma_i2c2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f86:	4b1c      	ldr	r3, [pc, #112]	@ (8002ff8 <HAL_I2C_MspInit+0x2a4>)
 8002f88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f8c:	611a      	str	r2, [r3, #16]
    hdma_i2c2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff8 <HAL_I2C_MspInit+0x2a4>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	615a      	str	r2, [r3, #20]
    hdma_i2c2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f94:	4b18      	ldr	r3, [pc, #96]	@ (8002ff8 <HAL_I2C_MspInit+0x2a4>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	619a      	str	r2, [r3, #24]
    hdma_i2c2_tx.Init.Mode = DMA_NORMAL;
 8002f9a:	4b17      	ldr	r3, [pc, #92]	@ (8002ff8 <HAL_I2C_MspInit+0x2a4>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	61da      	str	r2, [r3, #28]
    hdma_i2c2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002fa0:	4b15      	ldr	r3, [pc, #84]	@ (8002ff8 <HAL_I2C_MspInit+0x2a4>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	621a      	str	r2, [r3, #32]
    hdma_i2c2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fa6:	4b14      	ldr	r3, [pc, #80]	@ (8002ff8 <HAL_I2C_MspInit+0x2a4>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c2_tx) != HAL_OK)
 8002fac:	4812      	ldr	r0, [pc, #72]	@ (8002ff8 <HAL_I2C_MspInit+0x2a4>)
 8002fae:	f001 f8e5 	bl	800417c <HAL_DMA_Init>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d001      	beq.n	8002fbc <HAL_I2C_MspInit+0x268>
      Error_Handler();
 8002fb8:	f7ff fc14 	bl	80027e4 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c2_tx);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8002ff8 <HAL_I2C_MspInit+0x2a4>)
 8002fc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002fc2:	4a0d      	ldr	r2, [pc, #52]	@ (8002ff8 <HAL_I2C_MspInit+0x2a4>)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002fc8:	bf00      	nop
 8002fca:	3730      	adds	r7, #48	@ 0x30
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40005400 	.word	0x40005400
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40020400 	.word	0x40020400
 8002fdc:	200003d4 	.word	0x200003d4
 8002fe0:	40026010 	.word	0x40026010
 8002fe4:	20000434 	.word	0x20000434
 8002fe8:	40026028 	.word	0x40026028
 8002fec:	40005800 	.word	0x40005800
 8002ff0:	20000494 	.word	0x20000494
 8002ff4:	40026040 	.word	0x40026040
 8002ff8:	200004f4 	.word	0x200004f4
 8002ffc:	400260b8 	.word	0x400260b8

08003000 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003010:	d10e      	bne.n	8003030 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003012:	2300      	movs	r3, #0
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	4b13      	ldr	r3, [pc, #76]	@ (8003064 <HAL_TIM_PWM_MspInit+0x64>)
 8003018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301a:	4a12      	ldr	r2, [pc, #72]	@ (8003064 <HAL_TIM_PWM_MspInit+0x64>)
 800301c:	f043 0301 	orr.w	r3, r3, #1
 8003020:	6413      	str	r3, [r2, #64]	@ 0x40
 8003022:	4b10      	ldr	r3, [pc, #64]	@ (8003064 <HAL_TIM_PWM_MspInit+0x64>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	60fb      	str	r3, [r7, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 800302e:	e012      	b.n	8003056 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a0c      	ldr	r2, [pc, #48]	@ (8003068 <HAL_TIM_PWM_MspInit+0x68>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d10d      	bne.n	8003056 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	60bb      	str	r3, [r7, #8]
 800303e:	4b09      	ldr	r3, [pc, #36]	@ (8003064 <HAL_TIM_PWM_MspInit+0x64>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003042:	4a08      	ldr	r2, [pc, #32]	@ (8003064 <HAL_TIM_PWM_MspInit+0x64>)
 8003044:	f043 0302 	orr.w	r3, r3, #2
 8003048:	6413      	str	r3, [r2, #64]	@ 0x40
 800304a:	4b06      	ldr	r3, [pc, #24]	@ (8003064 <HAL_TIM_PWM_MspInit+0x64>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	60bb      	str	r3, [r7, #8]
 8003054:	68bb      	ldr	r3, [r7, #8]
}
 8003056:	bf00      	nop
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40023800 	.word	0x40023800
 8003068:	40000400 	.word	0x40000400

0800306c <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a0e      	ldr	r2, [pc, #56]	@ (80030b4 <HAL_TIM_OC_MspInit+0x48>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d115      	bne.n	80030aa <HAL_TIM_OC_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	4b0d      	ldr	r3, [pc, #52]	@ (80030b8 <HAL_TIM_OC_MspInit+0x4c>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003086:	4a0c      	ldr	r2, [pc, #48]	@ (80030b8 <HAL_TIM_OC_MspInit+0x4c>)
 8003088:	f043 0304 	orr.w	r3, r3, #4
 800308c:	6413      	str	r3, [r2, #64]	@ 0x40
 800308e:	4b0a      	ldr	r3, [pc, #40]	@ (80030b8 <HAL_TIM_OC_MspInit+0x4c>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003092:	f003 0304 	and.w	r3, r3, #4
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800309a:	2200      	movs	r2, #0
 800309c:	2100      	movs	r1, #0
 800309e:	201e      	movs	r0, #30
 80030a0:	f001 f835 	bl	800410e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80030a4:	201e      	movs	r0, #30
 80030a6:	f001 f84e 	bl	8004146 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 80030aa:	bf00      	nop
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40000800 	.word	0x40000800
 80030b8:	40023800 	.word	0x40023800

080030bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b08a      	sub	sp, #40	@ 0x28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c4:	f107 0314 	add.w	r3, r7, #20
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	609a      	str	r2, [r3, #8]
 80030d0:	60da      	str	r2, [r3, #12]
 80030d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030dc:	d13c      	bne.n	8003158 <HAL_TIM_MspPostInit+0x9c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	613b      	str	r3, [r7, #16]
 80030e2:	4b31      	ldr	r3, [pc, #196]	@ (80031a8 <HAL_TIM_MspPostInit+0xec>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e6:	4a30      	ldr	r2, [pc, #192]	@ (80031a8 <HAL_TIM_MspPostInit+0xec>)
 80030e8:	f043 0301 	orr.w	r3, r3, #1
 80030ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ee:	4b2e      	ldr	r3, [pc, #184]	@ (80031a8 <HAL_TIM_MspPostInit+0xec>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	613b      	str	r3, [r7, #16]
 80030f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
 80030fe:	4b2a      	ldr	r3, [pc, #168]	@ (80031a8 <HAL_TIM_MspPostInit+0xec>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003102:	4a29      	ldr	r2, [pc, #164]	@ (80031a8 <HAL_TIM_MspPostInit+0xec>)
 8003104:	f043 0302 	orr.w	r3, r3, #2
 8003108:	6313      	str	r3, [r2, #48]	@ 0x30
 800310a:	4b27      	ldr	r3, [pc, #156]	@ (80031a8 <HAL_TIM_MspPostInit+0xec>)
 800310c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	60fb      	str	r3, [r7, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 8003116:	2324      	movs	r3, #36	@ 0x24
 8003118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311a:	2302      	movs	r3, #2
 800311c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311e:	2300      	movs	r3, #0
 8003120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003122:	2300      	movs	r3, #0
 8003124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003126:	2301      	movs	r3, #1
 8003128:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800312a:	f107 0314 	add.w	r3, r7, #20
 800312e:	4619      	mov	r1, r3
 8003130:	481e      	ldr	r0, [pc, #120]	@ (80031ac <HAL_TIM_MspPostInit+0xf0>)
 8003132:	f001 fc31 	bl	8004998 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003136:	2308      	movs	r3, #8
 8003138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313a:	2302      	movs	r3, #2
 800313c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313e:	2300      	movs	r3, #0
 8003140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003142:	2300      	movs	r3, #0
 8003144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003146:	2301      	movs	r3, #1
 8003148:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800314a:	f107 0314 	add.w	r3, r7, #20
 800314e:	4619      	mov	r1, r3
 8003150:	4817      	ldr	r0, [pc, #92]	@ (80031b0 <HAL_TIM_MspPostInit+0xf4>)
 8003152:	f001 fc21 	bl	8004998 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003156:	e022      	b.n	800319e <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a15      	ldr	r2, [pc, #84]	@ (80031b4 <HAL_TIM_MspPostInit+0xf8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d11d      	bne.n	800319e <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003162:	2300      	movs	r3, #0
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	4b10      	ldr	r3, [pc, #64]	@ (80031a8 <HAL_TIM_MspPostInit+0xec>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316a:	4a0f      	ldr	r2, [pc, #60]	@ (80031a8 <HAL_TIM_MspPostInit+0xec>)
 800316c:	f043 0302 	orr.w	r3, r3, #2
 8003170:	6313      	str	r3, [r2, #48]	@ 0x30
 8003172:	4b0d      	ldr	r3, [pc, #52]	@ (80031a8 <HAL_TIM_MspPostInit+0xec>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	60bb      	str	r3, [r7, #8]
 800317c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 800317e:	2331      	movs	r3, #49	@ 0x31
 8003180:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003182:	2302      	movs	r3, #2
 8003184:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003186:	2300      	movs	r3, #0
 8003188:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318a:	2300      	movs	r3, #0
 800318c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800318e:	2302      	movs	r3, #2
 8003190:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003192:	f107 0314 	add.w	r3, r7, #20
 8003196:	4619      	mov	r1, r3
 8003198:	4805      	ldr	r0, [pc, #20]	@ (80031b0 <HAL_TIM_MspPostInit+0xf4>)
 800319a:	f001 fbfd 	bl	8004998 <HAL_GPIO_Init>
}
 800319e:	bf00      	nop
 80031a0:	3728      	adds	r7, #40	@ 0x28
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40020000 	.word	0x40020000
 80031b0:	40020400 	.word	0x40020400
 80031b4:	40000400 	.word	0x40000400

080031b8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08a      	sub	sp, #40	@ 0x28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031c0:	f107 0314 	add.w	r3, r7, #20
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
 80031c8:	605a      	str	r2, [r3, #4]
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	60da      	str	r2, [r3, #12]
 80031ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a4c      	ldr	r2, [pc, #304]	@ (8003308 <HAL_UART_MspInit+0x150>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	f040 8091 	bne.w	80032fe <HAL_UART_MspInit+0x146>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80031dc:	2300      	movs	r3, #0
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	4b4a      	ldr	r3, [pc, #296]	@ (800330c <HAL_UART_MspInit+0x154>)
 80031e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e4:	4a49      	ldr	r2, [pc, #292]	@ (800330c <HAL_UART_MspInit+0x154>)
 80031e6:	f043 0310 	orr.w	r3, r3, #16
 80031ea:	6453      	str	r3, [r2, #68]	@ 0x44
 80031ec:	4b47      	ldr	r3, [pc, #284]	@ (800330c <HAL_UART_MspInit+0x154>)
 80031ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f0:	f003 0310 	and.w	r3, r3, #16
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	4b43      	ldr	r3, [pc, #268]	@ (800330c <HAL_UART_MspInit+0x154>)
 80031fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003200:	4a42      	ldr	r2, [pc, #264]	@ (800330c <HAL_UART_MspInit+0x154>)
 8003202:	f043 0301 	orr.w	r3, r3, #1
 8003206:	6313      	str	r3, [r2, #48]	@ 0x30
 8003208:	4b40      	ldr	r3, [pc, #256]	@ (800330c <HAL_UART_MspInit+0x154>)
 800320a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003214:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321a:	2302      	movs	r3, #2
 800321c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321e:	2300      	movs	r3, #0
 8003220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003222:	2303      	movs	r3, #3
 8003224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003226:	2307      	movs	r3, #7
 8003228:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800322a:	f107 0314 	add.w	r3, r7, #20
 800322e:	4619      	mov	r1, r3
 8003230:	4837      	ldr	r0, [pc, #220]	@ (8003310 <HAL_UART_MspInit+0x158>)
 8003232:	f001 fbb1 	bl	8004998 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003236:	4b37      	ldr	r3, [pc, #220]	@ (8003314 <HAL_UART_MspInit+0x15c>)
 8003238:	4a37      	ldr	r2, [pc, #220]	@ (8003318 <HAL_UART_MspInit+0x160>)
 800323a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800323c:	4b35      	ldr	r3, [pc, #212]	@ (8003314 <HAL_UART_MspInit+0x15c>)
 800323e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003242:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003244:	4b33      	ldr	r3, [pc, #204]	@ (8003314 <HAL_UART_MspInit+0x15c>)
 8003246:	2200      	movs	r2, #0
 8003248:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800324a:	4b32      	ldr	r3, [pc, #200]	@ (8003314 <HAL_UART_MspInit+0x15c>)
 800324c:	2200      	movs	r2, #0
 800324e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003250:	4b30      	ldr	r3, [pc, #192]	@ (8003314 <HAL_UART_MspInit+0x15c>)
 8003252:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003256:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003258:	4b2e      	ldr	r3, [pc, #184]	@ (8003314 <HAL_UART_MspInit+0x15c>)
 800325a:	2200      	movs	r2, #0
 800325c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800325e:	4b2d      	ldr	r3, [pc, #180]	@ (8003314 <HAL_UART_MspInit+0x15c>)
 8003260:	2200      	movs	r2, #0
 8003262:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003264:	4b2b      	ldr	r3, [pc, #172]	@ (8003314 <HAL_UART_MspInit+0x15c>)
 8003266:	2200      	movs	r2, #0
 8003268:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800326a:	4b2a      	ldr	r3, [pc, #168]	@ (8003314 <HAL_UART_MspInit+0x15c>)
 800326c:	2200      	movs	r2, #0
 800326e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003270:	4b28      	ldr	r3, [pc, #160]	@ (8003314 <HAL_UART_MspInit+0x15c>)
 8003272:	2200      	movs	r2, #0
 8003274:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003276:	4827      	ldr	r0, [pc, #156]	@ (8003314 <HAL_UART_MspInit+0x15c>)
 8003278:	f000 ff80 	bl	800417c <HAL_DMA_Init>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003282:	f7ff faaf 	bl	80027e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a22      	ldr	r2, [pc, #136]	@ (8003314 <HAL_UART_MspInit+0x15c>)
 800328a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800328c:	4a21      	ldr	r2, [pc, #132]	@ (8003314 <HAL_UART_MspInit+0x15c>)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003292:	4b22      	ldr	r3, [pc, #136]	@ (800331c <HAL_UART_MspInit+0x164>)
 8003294:	4a22      	ldr	r2, [pc, #136]	@ (8003320 <HAL_UART_MspInit+0x168>)
 8003296:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003298:	4b20      	ldr	r3, [pc, #128]	@ (800331c <HAL_UART_MspInit+0x164>)
 800329a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800329e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032a0:	4b1e      	ldr	r3, [pc, #120]	@ (800331c <HAL_UART_MspInit+0x164>)
 80032a2:	2240      	movs	r2, #64	@ 0x40
 80032a4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80032a6:	4b1d      	ldr	r3, [pc, #116]	@ (800331c <HAL_UART_MspInit+0x164>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80032ac:	4b1b      	ldr	r3, [pc, #108]	@ (800331c <HAL_UART_MspInit+0x164>)
 80032ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80032b2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80032b4:	4b19      	ldr	r3, [pc, #100]	@ (800331c <HAL_UART_MspInit+0x164>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80032ba:	4b18      	ldr	r3, [pc, #96]	@ (800331c <HAL_UART_MspInit+0x164>)
 80032bc:	2200      	movs	r2, #0
 80032be:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80032c0:	4b16      	ldr	r3, [pc, #88]	@ (800331c <HAL_UART_MspInit+0x164>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80032c6:	4b15      	ldr	r3, [pc, #84]	@ (800331c <HAL_UART_MspInit+0x164>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032cc:	4b13      	ldr	r3, [pc, #76]	@ (800331c <HAL_UART_MspInit+0x164>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80032d2:	4812      	ldr	r0, [pc, #72]	@ (800331c <HAL_UART_MspInit+0x164>)
 80032d4:	f000 ff52 	bl	800417c <HAL_DMA_Init>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80032de:	f7ff fa81 	bl	80027e4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a0d      	ldr	r2, [pc, #52]	@ (800331c <HAL_UART_MspInit+0x164>)
 80032e6:	639a      	str	r2, [r3, #56]	@ 0x38
 80032e8:	4a0c      	ldr	r2, [pc, #48]	@ (800331c <HAL_UART_MspInit+0x164>)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80032ee:	2200      	movs	r2, #0
 80032f0:	2100      	movs	r1, #0
 80032f2:	2025      	movs	r0, #37	@ 0x25
 80032f4:	f000 ff0b 	bl	800410e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80032f8:	2025      	movs	r0, #37	@ 0x25
 80032fa:	f000 ff24 	bl	8004146 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80032fe:	bf00      	nop
 8003300:	3728      	adds	r7, #40	@ 0x28
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	40011000 	.word	0x40011000
 800330c:	40023800 	.word	0x40023800
 8003310:	40020000 	.word	0x40020000
 8003314:	20000674 	.word	0x20000674
 8003318:	40026440 	.word	0x40026440
 800331c:	200006d4 	.word	0x200006d4
 8003320:	400264b8 	.word	0x400264b8

08003324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003328:	bf00      	nop
 800332a:	e7fd      	b.n	8003328 <NMI_Handler+0x4>

0800332c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003330:	bf00      	nop
 8003332:	e7fd      	b.n	8003330 <HardFault_Handler+0x4>

08003334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003338:	bf00      	nop
 800333a:	e7fd      	b.n	8003338 <MemManage_Handler+0x4>

0800333c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003340:	bf00      	nop
 8003342:	e7fd      	b.n	8003340 <BusFault_Handler+0x4>

08003344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003348:	bf00      	nop
 800334a:	e7fd      	b.n	8003348 <UsageFault_Handler+0x4>

0800334c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003350:	bf00      	nop
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800335a:	b480      	push	{r7}
 800335c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800335e:	bf00      	nop
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800337a:	f000 f9b1 	bl	80036e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800337e:	bf00      	nop
 8003380:	bd80      	pop	{r7, pc}
	...

08003384 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003388:	4802      	ldr	r0, [pc, #8]	@ (8003394 <DMA1_Stream0_IRQHandler+0x10>)
 800338a:	f001 f88f 	bl	80044ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800338e:	bf00      	nop
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	200003d4 	.word	0x200003d4

08003398 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800339c:	4802      	ldr	r0, [pc, #8]	@ (80033a8 <DMA1_Stream1_IRQHandler+0x10>)
 800339e:	f001 f885 	bl	80044ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80033a2:	bf00      	nop
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	20000434 	.word	0x20000434

080033ac <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_rx);
 80033b0:	4802      	ldr	r0, [pc, #8]	@ (80033bc <DMA1_Stream2_IRQHandler+0x10>)
 80033b2:	f001 f87b 	bl	80044ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80033b6:	bf00      	nop
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	20000494 	.word	0x20000494

080033c0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80033c4:	4802      	ldr	r0, [pc, #8]	@ (80033d0 <TIM4_IRQHandler+0x10>)
 80033c6:	f003 fcdb 	bl	8006d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	200005e4 	.word	0x200005e4

080033d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033d8:	4802      	ldr	r0, [pc, #8]	@ (80033e4 <USART1_IRQHandler+0x10>)
 80033da:	f004 faff 	bl	80079dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80033de:	bf00      	nop
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	2000062c 	.word	0x2000062c

080033e8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c2_tx);
 80033ec:	4802      	ldr	r0, [pc, #8]	@ (80033f8 <DMA1_Stream7_IRQHandler+0x10>)
 80033ee:	f001 f85d 	bl	80044ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	200004f4 	.word	0x200004f4

080033fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003400:	4802      	ldr	r0, [pc, #8]	@ (800340c <DMA2_Stream0_IRQHandler+0x10>)
 8003402:	f001 f853 	bl	80044ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	200002cc 	.word	0x200002cc

08003410 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003414:	4802      	ldr	r0, [pc, #8]	@ (8003420 <DMA2_Stream2_IRQHandler+0x10>)
 8003416:	f001 f849 	bl	80044ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	20000674 	.word	0x20000674

08003424 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003428:	4802      	ldr	r0, [pc, #8]	@ (8003434 <DMA2_Stream7_IRQHandler+0x10>)
 800342a:	f001 f83f 	bl	80044ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800342e:	bf00      	nop
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	200006d4 	.word	0x200006d4

08003438 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  return 1;
 800343c:	2301      	movs	r3, #1
}
 800343e:	4618      	mov	r0, r3
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <_kill>:

int _kill(int pid, int sig)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003452:	f007 fa21 	bl	800a898 <__errno>
 8003456:	4603      	mov	r3, r0
 8003458:	2216      	movs	r2, #22
 800345a:	601a      	str	r2, [r3, #0]
  return -1;
 800345c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <_exit>:

void _exit (int status)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003470:	f04f 31ff 	mov.w	r1, #4294967295
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7ff ffe7 	bl	8003448 <_kill>
  while (1) {}    /* Make sure we hang here */
 800347a:	bf00      	nop
 800347c:	e7fd      	b.n	800347a <_exit+0x12>

0800347e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b086      	sub	sp, #24
 8003482:	af00      	add	r7, sp, #0
 8003484:	60f8      	str	r0, [r7, #12]
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]
 800348e:	e00a      	b.n	80034a6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003490:	f3af 8000 	nop.w
 8003494:	4601      	mov	r1, r0
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	60ba      	str	r2, [r7, #8]
 800349c:	b2ca      	uxtb	r2, r1
 800349e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	3301      	adds	r3, #1
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	429a      	cmp	r2, r3
 80034ac:	dbf0      	blt.n	8003490 <_read+0x12>
  }

  return len;
 80034ae:	687b      	ldr	r3, [r7, #4]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3718      	adds	r7, #24
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034c4:	2300      	movs	r3, #0
 80034c6:	617b      	str	r3, [r7, #20]
 80034c8:	e009      	b.n	80034de <_write+0x26>
  {
    __io_putchar(*ptr++);
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	60ba      	str	r2, [r7, #8]
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	3301      	adds	r3, #1
 80034dc:	617b      	str	r3, [r7, #20]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	dbf1      	blt.n	80034ca <_write+0x12>
  }
  return len;
 80034e6:	687b      	ldr	r3, [r7, #4]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <_close>:

int _close(int file)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003518:	605a      	str	r2, [r3, #4]
  return 0;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <_isatty>:

int _isatty(int file)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003530:	2301      	movs	r3, #1
}
 8003532:	4618      	mov	r0, r3
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800353e:	b480      	push	{r7}
 8003540:	b085      	sub	sp, #20
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003560:	4a14      	ldr	r2, [pc, #80]	@ (80035b4 <_sbrk+0x5c>)
 8003562:	4b15      	ldr	r3, [pc, #84]	@ (80035b8 <_sbrk+0x60>)
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800356c:	4b13      	ldr	r3, [pc, #76]	@ (80035bc <_sbrk+0x64>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d102      	bne.n	800357a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003574:	4b11      	ldr	r3, [pc, #68]	@ (80035bc <_sbrk+0x64>)
 8003576:	4a12      	ldr	r2, [pc, #72]	@ (80035c0 <_sbrk+0x68>)
 8003578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800357a:	4b10      	ldr	r3, [pc, #64]	@ (80035bc <_sbrk+0x64>)
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4413      	add	r3, r2
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	429a      	cmp	r2, r3
 8003586:	d207      	bcs.n	8003598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003588:	f007 f986 	bl	800a898 <__errno>
 800358c:	4603      	mov	r3, r0
 800358e:	220c      	movs	r2, #12
 8003590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003592:	f04f 33ff 	mov.w	r3, #4294967295
 8003596:	e009      	b.n	80035ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003598:	4b08      	ldr	r3, [pc, #32]	@ (80035bc <_sbrk+0x64>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800359e:	4b07      	ldr	r3, [pc, #28]	@ (80035bc <_sbrk+0x64>)
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4413      	add	r3, r2
 80035a6:	4a05      	ldr	r2, [pc, #20]	@ (80035bc <_sbrk+0x64>)
 80035a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035aa:	68fb      	ldr	r3, [r7, #12]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	20020000 	.word	0x20020000
 80035b8:	00000400 	.word	0x00000400
 80035bc:	20000788 	.word	0x20000788
 80035c0:	200008e0 	.word	0x200008e0

080035c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035c8:	4b06      	ldr	r3, [pc, #24]	@ (80035e4 <SystemInit+0x20>)
 80035ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ce:	4a05      	ldr	r2, [pc, #20]	@ (80035e4 <SystemInit+0x20>)
 80035d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80035d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035d8:	bf00      	nop
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	e000ed00 	.word	0xe000ed00

080035e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80035e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003620 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80035ec:	f7ff ffea 	bl	80035c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035f0:	480c      	ldr	r0, [pc, #48]	@ (8003624 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80035f2:	490d      	ldr	r1, [pc, #52]	@ (8003628 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80035f4:	4a0d      	ldr	r2, [pc, #52]	@ (800362c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80035f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035f8:	e002      	b.n	8003600 <LoopCopyDataInit>

080035fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035fe:	3304      	adds	r3, #4

08003600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003604:	d3f9      	bcc.n	80035fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003606:	4a0a      	ldr	r2, [pc, #40]	@ (8003630 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003608:	4c0a      	ldr	r4, [pc, #40]	@ (8003634 <LoopFillZerobss+0x22>)
  movs r3, #0
 800360a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800360c:	e001      	b.n	8003612 <LoopFillZerobss>

0800360e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800360e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003610:	3204      	adds	r2, #4

08003612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003614:	d3fb      	bcc.n	800360e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003616:	f007 f945 	bl	800a8a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800361a:	f7fe fc4b 	bl	8001eb4 <main>
  bx  lr    
 800361e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003620:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003628:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 800362c:	0800dbc0 	.word	0x0800dbc0
  ldr r2, =_sbss
 8003630:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8003634:	200008dc 	.word	0x200008dc

08003638 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003638:	e7fe      	b.n	8003638 <ADC_IRQHandler>
	...

0800363c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003640:	4b0e      	ldr	r3, [pc, #56]	@ (800367c <HAL_Init+0x40>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a0d      	ldr	r2, [pc, #52]	@ (800367c <HAL_Init+0x40>)
 8003646:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800364a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800364c:	4b0b      	ldr	r3, [pc, #44]	@ (800367c <HAL_Init+0x40>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a0a      	ldr	r2, [pc, #40]	@ (800367c <HAL_Init+0x40>)
 8003652:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003656:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003658:	4b08      	ldr	r3, [pc, #32]	@ (800367c <HAL_Init+0x40>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a07      	ldr	r2, [pc, #28]	@ (800367c <HAL_Init+0x40>)
 800365e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003662:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003664:	2003      	movs	r0, #3
 8003666:	f000 fd47 	bl	80040f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800366a:	200f      	movs	r0, #15
 800366c:	f000 f808 	bl	8003680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003670:	f7ff fad0 	bl	8002c14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	40023c00 	.word	0x40023c00

08003680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003688:	4b12      	ldr	r3, [pc, #72]	@ (80036d4 <HAL_InitTick+0x54>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4b12      	ldr	r3, [pc, #72]	@ (80036d8 <HAL_InitTick+0x58>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	4619      	mov	r1, r3
 8003692:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003696:	fbb3 f3f1 	udiv	r3, r3, r1
 800369a:	fbb2 f3f3 	udiv	r3, r2, r3
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 fd5f 	bl	8004162 <HAL_SYSTICK_Config>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e00e      	b.n	80036cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b0f      	cmp	r3, #15
 80036b2:	d80a      	bhi.n	80036ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036b4:	2200      	movs	r2, #0
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	f04f 30ff 	mov.w	r0, #4294967295
 80036bc:	f000 fd27 	bl	800410e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036c0:	4a06      	ldr	r2, [pc, #24]	@ (80036dc <HAL_InitTick+0x5c>)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	e000      	b.n	80036cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3708      	adds	r7, #8
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	20000084 	.word	0x20000084
 80036d8:	2000008c 	.word	0x2000008c
 80036dc:	20000088 	.word	0x20000088

080036e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036e4:	4b06      	ldr	r3, [pc, #24]	@ (8003700 <HAL_IncTick+0x20>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	461a      	mov	r2, r3
 80036ea:	4b06      	ldr	r3, [pc, #24]	@ (8003704 <HAL_IncTick+0x24>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4413      	add	r3, r2
 80036f0:	4a04      	ldr	r2, [pc, #16]	@ (8003704 <HAL_IncTick+0x24>)
 80036f2:	6013      	str	r3, [r2, #0]
}
 80036f4:	bf00      	nop
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	2000008c 	.word	0x2000008c
 8003704:	2000078c 	.word	0x2000078c

08003708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  return uwTick;
 800370c:	4b03      	ldr	r3, [pc, #12]	@ (800371c <HAL_GetTick+0x14>)
 800370e:	681b      	ldr	r3, [r3, #0]
}
 8003710:	4618      	mov	r0, r3
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	2000078c 	.word	0x2000078c

08003720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003728:	f7ff ffee 	bl	8003708 <HAL_GetTick>
 800372c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003738:	d005      	beq.n	8003746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800373a:	4b0a      	ldr	r3, [pc, #40]	@ (8003764 <HAL_Delay+0x44>)
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	461a      	mov	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4413      	add	r3, r2
 8003744:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003746:	bf00      	nop
 8003748:	f7ff ffde 	bl	8003708 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	429a      	cmp	r2, r3
 8003756:	d8f7      	bhi.n	8003748 <HAL_Delay+0x28>
  {
  }
}
 8003758:	bf00      	nop
 800375a:	bf00      	nop
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	2000008c 	.word	0x2000008c

08003768 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003770:	2300      	movs	r3, #0
 8003772:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e033      	b.n	80037e6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003782:	2b00      	cmp	r3, #0
 8003784:	d109      	bne.n	800379a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f7ff fa6c 	bl	8002c64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379e:	f003 0310 	and.w	r3, r3, #16
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d118      	bne.n	80037d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037aa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80037ae:	f023 0302 	bic.w	r3, r3, #2
 80037b2:	f043 0202 	orr.w	r2, r3, #2
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 fa4e 	bl	8003c5c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ca:	f023 0303 	bic.w	r3, r3, #3
 80037ce:	f043 0201 	orr.w	r2, r3, #1
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80037d6:	e001      	b.n	80037dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80037e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80037fc:	2300      	movs	r3, #0
 80037fe:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_ADC_Start_DMA+0x1e>
 800380a:	2302      	movs	r3, #2
 800380c:	e0ce      	b.n	80039ac <HAL_ADC_Start_DMA+0x1bc>
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b01      	cmp	r3, #1
 8003822:	d018      	beq.n	8003856 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689a      	ldr	r2, [r3, #8]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003834:	4b5f      	ldr	r3, [pc, #380]	@ (80039b4 <HAL_ADC_Start_DMA+0x1c4>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a5f      	ldr	r2, [pc, #380]	@ (80039b8 <HAL_ADC_Start_DMA+0x1c8>)
 800383a:	fba2 2303 	umull	r2, r3, r2, r3
 800383e:	0c9a      	lsrs	r2, r3, #18
 8003840:	4613      	mov	r3, r2
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	4413      	add	r3, r2
 8003846:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003848:	e002      	b.n	8003850 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	3b01      	subs	r3, #1
 800384e:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f9      	bne.n	800384a <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003860:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003864:	d107      	bne.n	8003876 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689a      	ldr	r2, [r3, #8]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003874:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b01      	cmp	r3, #1
 8003882:	f040 8086 	bne.w	8003992 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800388a:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800388e:	f023 0301 	bic.w	r3, r3, #1
 8003892:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d007      	beq.n	80038b8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80038b0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80038c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038c4:	d106      	bne.n	80038d4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ca:	f023 0206 	bic.w	r2, r3, #6
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	645a      	str	r2, [r3, #68]	@ 0x44
 80038d2:	e002      	b.n	80038da <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038e2:	4b36      	ldr	r3, [pc, #216]	@ (80039bc <HAL_ADC_Start_DMA+0x1cc>)
 80038e4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ea:	4a35      	ldr	r2, [pc, #212]	@ (80039c0 <HAL_ADC_Start_DMA+0x1d0>)
 80038ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f2:	4a34      	ldr	r2, [pc, #208]	@ (80039c4 <HAL_ADC_Start_DMA+0x1d4>)
 80038f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038fa:	4a33      	ldr	r2, [pc, #204]	@ (80039c8 <HAL_ADC_Start_DMA+0x1d8>)
 80038fc:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003906:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003916:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689a      	ldr	r2, [r3, #8]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003926:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	334c      	adds	r3, #76	@ 0x4c
 8003932:	4619      	mov	r1, r3
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f000 fcce 	bl	80042d8 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 031f 	and.w	r3, r3, #31
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10f      	bne.n	8003968 <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d129      	bne.n	80039aa <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	689a      	ldr	r2, [r3, #8]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003964:	609a      	str	r2, [r3, #8]
 8003966:	e020      	b.n	80039aa <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a17      	ldr	r2, [pc, #92]	@ (80039cc <HAL_ADC_Start_DMA+0x1dc>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d11b      	bne.n	80039aa <HAL_ADC_Start_DMA+0x1ba>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d114      	bne.n	80039aa <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689a      	ldr	r2, [r3, #8]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800398e:	609a      	str	r2, [r3, #8]
 8003990:	e00b      	b.n	80039aa <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003996:	f043 0210 	orr.w	r2, r3, #16
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a2:	f043 0201 	orr.w	r2, r3, #1
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3718      	adds	r7, #24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	20000084 	.word	0x20000084
 80039b8:	431bde83 	.word	0x431bde83
 80039bc:	40012300 	.word	0x40012300
 80039c0:	08003e55 	.word	0x08003e55
 80039c4:	08003f0f 	.word	0x08003f0f
 80039c8:	08003f2b 	.word	0x08003f2b
 80039cc:	40012000 	.word	0x40012000

080039d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80039ec:	bf00      	nop
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_ADC_ConfigChannel+0x1c>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e113      	b.n	8003c3c <HAL_ADC_ConfigChannel+0x244>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2b09      	cmp	r3, #9
 8003a22:	d925      	bls.n	8003a70 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68d9      	ldr	r1, [r3, #12]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	461a      	mov	r2, r3
 8003a32:	4613      	mov	r3, r2
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	4413      	add	r3, r2
 8003a38:	3b1e      	subs	r3, #30
 8003a3a:	2207      	movs	r2, #7
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	43da      	mvns	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	400a      	ands	r2, r1
 8003a48:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68d9      	ldr	r1, [r3, #12]
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	4403      	add	r3, r0
 8003a62:	3b1e      	subs	r3, #30
 8003a64:	409a      	lsls	r2, r3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	430a      	orrs	r2, r1
 8003a6c:	60da      	str	r2, [r3, #12]
 8003a6e:	e022      	b.n	8003ab6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6919      	ldr	r1, [r3, #16]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	4613      	mov	r3, r2
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	4413      	add	r3, r2
 8003a84:	2207      	movs	r2, #7
 8003a86:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8a:	43da      	mvns	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	400a      	ands	r2, r1
 8003a92:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6919      	ldr	r1, [r3, #16]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	4403      	add	r3, r0
 8003aac:	409a      	lsls	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	2b06      	cmp	r3, #6
 8003abc:	d824      	bhi.n	8003b08 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	3b05      	subs	r3, #5
 8003ad0:	221f      	movs	r2, #31
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	43da      	mvns	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	400a      	ands	r2, r1
 8003ade:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	4618      	mov	r0, r3
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	4613      	mov	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4413      	add	r3, r2
 8003af8:	3b05      	subs	r3, #5
 8003afa:	fa00 f203 	lsl.w	r2, r0, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	635a      	str	r2, [r3, #52]	@ 0x34
 8003b06:	e04c      	b.n	8003ba2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b0c      	cmp	r3, #12
 8003b0e:	d824      	bhi.n	8003b5a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	4413      	add	r3, r2
 8003b20:	3b23      	subs	r3, #35	@ 0x23
 8003b22:	221f      	movs	r2, #31
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	43da      	mvns	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	400a      	ands	r2, r1
 8003b30:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	4618      	mov	r0, r3
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	4613      	mov	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	4413      	add	r3, r2
 8003b4a:	3b23      	subs	r3, #35	@ 0x23
 8003b4c:	fa00 f203 	lsl.w	r2, r0, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	631a      	str	r2, [r3, #48]	@ 0x30
 8003b58:	e023      	b.n	8003ba2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	4613      	mov	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	3b41      	subs	r3, #65	@ 0x41
 8003b6c:	221f      	movs	r2, #31
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	43da      	mvns	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	400a      	ands	r2, r1
 8003b7a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	4618      	mov	r0, r3
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685a      	ldr	r2, [r3, #4]
 8003b8e:	4613      	mov	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	3b41      	subs	r3, #65	@ 0x41
 8003b96:	fa00 f203 	lsl.w	r2, r0, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ba2:	4b29      	ldr	r3, [pc, #164]	@ (8003c48 <HAL_ADC_ConfigChannel+0x250>)
 8003ba4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a28      	ldr	r2, [pc, #160]	@ (8003c4c <HAL_ADC_ConfigChannel+0x254>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d10f      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x1d8>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b12      	cmp	r3, #18
 8003bb6:	d10b      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8003c4c <HAL_ADC_ConfigChannel+0x254>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d12b      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x23a>
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a1c      	ldr	r2, [pc, #112]	@ (8003c50 <HAL_ADC_ConfigChannel+0x258>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d003      	beq.n	8003bec <HAL_ADC_ConfigChannel+0x1f4>
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2b11      	cmp	r3, #17
 8003bea:	d122      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a11      	ldr	r2, [pc, #68]	@ (8003c50 <HAL_ADC_ConfigChannel+0x258>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d111      	bne.n	8003c32 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c0e:	4b11      	ldr	r3, [pc, #68]	@ (8003c54 <HAL_ADC_ConfigChannel+0x25c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a11      	ldr	r2, [pc, #68]	@ (8003c58 <HAL_ADC_ConfigChannel+0x260>)
 8003c14:	fba2 2303 	umull	r2, r3, r2, r3
 8003c18:	0c9a      	lsrs	r2, r3, #18
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003c24:	e002      	b.n	8003c2c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f9      	bne.n	8003c26 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3714      	adds	r7, #20
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	40012300 	.word	0x40012300
 8003c4c:	40012000 	.word	0x40012000
 8003c50:	10000012 	.word	0x10000012
 8003c54:	20000084 	.word	0x20000084
 8003c58:	431bde83 	.word	0x431bde83

08003c5c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b085      	sub	sp, #20
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c64:	4b79      	ldr	r3, [pc, #484]	@ (8003e4c <ADC_Init+0x1f0>)
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c90:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6859      	ldr	r1, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	021a      	lsls	r2, r3, #8
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003cb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6859      	ldr	r1, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689a      	ldr	r2, [r3, #8]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689a      	ldr	r2, [r3, #8]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cd6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6899      	ldr	r1, [r3, #8]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cee:	4a58      	ldr	r2, [pc, #352]	@ (8003e50 <ADC_Init+0x1f4>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d022      	beq.n	8003d3a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d02:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6899      	ldr	r1, [r3, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	430a      	orrs	r2, r1
 8003d14:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003d24:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	6899      	ldr	r1, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	430a      	orrs	r2, r1
 8003d36:	609a      	str	r2, [r3, #8]
 8003d38:	e00f      	b.n	8003d5a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003d58:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0202 	bic.w	r2, r2, #2
 8003d68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	6899      	ldr	r1, [r3, #8]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	7e1b      	ldrb	r3, [r3, #24]
 8003d74:	005a      	lsls	r2, r3, #1
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01b      	beq.n	8003dc0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d96:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	685a      	ldr	r2, [r3, #4]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003da6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6859      	ldr	r1, [r3, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db2:	3b01      	subs	r3, #1
 8003db4:	035a      	lsls	r2, r3, #13
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	e007      	b.n	8003dd0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003dce:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003dde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	051a      	lsls	r2, r3, #20
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	430a      	orrs	r2, r1
 8003df4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003e04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6899      	ldr	r1, [r3, #8]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003e12:	025a      	lsls	r2, r3, #9
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689a      	ldr	r2, [r3, #8]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6899      	ldr	r1, [r3, #8]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	029a      	lsls	r2, r3, #10
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	609a      	str	r2, [r3, #8]
}
 8003e40:	bf00      	nop
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	40012300 	.word	0x40012300
 8003e50:	0f000001 	.word	0x0f000001

08003e54 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e60:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e66:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d13c      	bne.n	8003ee8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e72:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d12b      	bne.n	8003ee0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d127      	bne.n	8003ee0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e96:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d006      	beq.n	8003eac <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d119      	bne.n	8003ee0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0220 	bic.w	r2, r2, #32
 8003eba:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ecc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d105      	bne.n	8003ee0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ed8:	f043 0201 	orr.w	r2, r3, #1
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f7fe fbd9 	bl	8002698 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003ee6:	e00e      	b.n	8003f06 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eec:	f003 0310 	and.w	r3, r3, #16
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	f7ff fd75 	bl	80039e4 <HAL_ADC_ErrorCallback>
}
 8003efa:	e004      	b.n	8003f06 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	4798      	blx	r3
}
 8003f06:	bf00      	nop
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b084      	sub	sp, #16
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f1a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f7ff fd57 	bl	80039d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f22:	bf00      	nop
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b084      	sub	sp, #16
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f36:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2240      	movs	r2, #64	@ 0x40
 8003f3c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f42:	f043 0204 	orr.w	r2, r3, #4
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f7ff fd4a 	bl	80039e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f50:	bf00      	nop
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f003 0307 	and.w	r3, r3, #7
 8003f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f68:	4b0c      	ldr	r3, [pc, #48]	@ (8003f9c <__NVIC_SetPriorityGrouping+0x44>)
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f6e:	68ba      	ldr	r2, [r7, #8]
 8003f70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003f74:	4013      	ands	r3, r2
 8003f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003f84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f8a:	4a04      	ldr	r2, [pc, #16]	@ (8003f9c <__NVIC_SetPriorityGrouping+0x44>)
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	60d3      	str	r3, [r2, #12]
}
 8003f90:	bf00      	nop
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	e000ed00 	.word	0xe000ed00

08003fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003fa4:	4b04      	ldr	r3, [pc, #16]	@ (8003fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	0a1b      	lsrs	r3, r3, #8
 8003faa:	f003 0307 	and.w	r3, r3, #7
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	e000ed00 	.word	0xe000ed00

08003fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	db0b      	blt.n	8003fe6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fce:	79fb      	ldrb	r3, [r7, #7]
 8003fd0:	f003 021f 	and.w	r2, r3, #31
 8003fd4:	4907      	ldr	r1, [pc, #28]	@ (8003ff4 <__NVIC_EnableIRQ+0x38>)
 8003fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fda:	095b      	lsrs	r3, r3, #5
 8003fdc:	2001      	movs	r0, #1
 8003fde:	fa00 f202 	lsl.w	r2, r0, r2
 8003fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	e000e100 	.word	0xe000e100

08003ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	4603      	mov	r3, r0
 8004000:	6039      	str	r1, [r7, #0]
 8004002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004008:	2b00      	cmp	r3, #0
 800400a:	db0a      	blt.n	8004022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	b2da      	uxtb	r2, r3
 8004010:	490c      	ldr	r1, [pc, #48]	@ (8004044 <__NVIC_SetPriority+0x4c>)
 8004012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004016:	0112      	lsls	r2, r2, #4
 8004018:	b2d2      	uxtb	r2, r2
 800401a:	440b      	add	r3, r1
 800401c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004020:	e00a      	b.n	8004038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	b2da      	uxtb	r2, r3
 8004026:	4908      	ldr	r1, [pc, #32]	@ (8004048 <__NVIC_SetPriority+0x50>)
 8004028:	79fb      	ldrb	r3, [r7, #7]
 800402a:	f003 030f 	and.w	r3, r3, #15
 800402e:	3b04      	subs	r3, #4
 8004030:	0112      	lsls	r2, r2, #4
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	440b      	add	r3, r1
 8004036:	761a      	strb	r2, [r3, #24]
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	e000e100 	.word	0xe000e100
 8004048:	e000ed00 	.word	0xe000ed00

0800404c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800404c:	b480      	push	{r7}
 800404e:	b089      	sub	sp, #36	@ 0x24
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f003 0307 	and.w	r3, r3, #7
 800405e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	f1c3 0307 	rsb	r3, r3, #7
 8004066:	2b04      	cmp	r3, #4
 8004068:	bf28      	it	cs
 800406a:	2304      	movcs	r3, #4
 800406c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	3304      	adds	r3, #4
 8004072:	2b06      	cmp	r3, #6
 8004074:	d902      	bls.n	800407c <NVIC_EncodePriority+0x30>
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	3b03      	subs	r3, #3
 800407a:	e000      	b.n	800407e <NVIC_EncodePriority+0x32>
 800407c:	2300      	movs	r3, #0
 800407e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004080:	f04f 32ff 	mov.w	r2, #4294967295
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	43da      	mvns	r2, r3
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	401a      	ands	r2, r3
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004094:	f04f 31ff 	mov.w	r1, #4294967295
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	fa01 f303 	lsl.w	r3, r1, r3
 800409e:	43d9      	mvns	r1, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040a4:	4313      	orrs	r3, r2
         );
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3724      	adds	r7, #36	@ 0x24
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
	...

080040b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3b01      	subs	r3, #1
 80040c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040c4:	d301      	bcc.n	80040ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040c6:	2301      	movs	r3, #1
 80040c8:	e00f      	b.n	80040ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040ca:	4a0a      	ldr	r2, [pc, #40]	@ (80040f4 <SysTick_Config+0x40>)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040d2:	210f      	movs	r1, #15
 80040d4:	f04f 30ff 	mov.w	r0, #4294967295
 80040d8:	f7ff ff8e 	bl	8003ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040dc:	4b05      	ldr	r3, [pc, #20]	@ (80040f4 <SysTick_Config+0x40>)
 80040de:	2200      	movs	r2, #0
 80040e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040e2:	4b04      	ldr	r3, [pc, #16]	@ (80040f4 <SysTick_Config+0x40>)
 80040e4:	2207      	movs	r2, #7
 80040e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	e000e010 	.word	0xe000e010

080040f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7ff ff29 	bl	8003f58 <__NVIC_SetPriorityGrouping>
}
 8004106:	bf00      	nop
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800410e:	b580      	push	{r7, lr}
 8004110:	b086      	sub	sp, #24
 8004112:	af00      	add	r7, sp, #0
 8004114:	4603      	mov	r3, r0
 8004116:	60b9      	str	r1, [r7, #8]
 8004118:	607a      	str	r2, [r7, #4]
 800411a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800411c:	2300      	movs	r3, #0
 800411e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004120:	f7ff ff3e 	bl	8003fa0 <__NVIC_GetPriorityGrouping>
 8004124:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	68b9      	ldr	r1, [r7, #8]
 800412a:	6978      	ldr	r0, [r7, #20]
 800412c:	f7ff ff8e 	bl	800404c <NVIC_EncodePriority>
 8004130:	4602      	mov	r2, r0
 8004132:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004136:	4611      	mov	r1, r2
 8004138:	4618      	mov	r0, r3
 800413a:	f7ff ff5d 	bl	8003ff8 <__NVIC_SetPriority>
}
 800413e:	bf00      	nop
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b082      	sub	sp, #8
 800414a:	af00      	add	r7, sp, #0
 800414c:	4603      	mov	r3, r0
 800414e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff ff31 	bl	8003fbc <__NVIC_EnableIRQ>
}
 800415a:	bf00      	nop
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b082      	sub	sp, #8
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7ff ffa2 	bl	80040b4 <SysTick_Config>
 8004170:	4603      	mov	r3, r0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004188:	f7ff fabe 	bl	8003708 <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d101      	bne.n	8004198 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e099      	b.n	80042cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2202      	movs	r2, #2
 800419c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0201 	bic.w	r2, r2, #1
 80041b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041b8:	e00f      	b.n	80041da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041ba:	f7ff faa5 	bl	8003708 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b05      	cmp	r3, #5
 80041c6:	d908      	bls.n	80041da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2220      	movs	r2, #32
 80041cc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2203      	movs	r2, #3
 80041d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e078      	b.n	80042cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1e8      	bne.n	80041ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041f0:	697a      	ldr	r2, [r7, #20]
 80041f2:	4b38      	ldr	r3, [pc, #224]	@ (80042d4 <HAL_DMA_Init+0x158>)
 80041f4:	4013      	ands	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004206:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004212:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800421e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	4313      	orrs	r3, r2
 800422a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004230:	2b04      	cmp	r3, #4
 8004232:	d107      	bne.n	8004244 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800423c:	4313      	orrs	r3, r2
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	4313      	orrs	r3, r2
 8004242:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	f023 0307 	bic.w	r3, r3, #7
 800425a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	4313      	orrs	r3, r2
 8004264:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426a:	2b04      	cmp	r3, #4
 800426c:	d117      	bne.n	800429e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	4313      	orrs	r3, r2
 8004276:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00e      	beq.n	800429e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	f000 fb0d 	bl	80048a0 <DMA_CheckFifoParam>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d008      	beq.n	800429e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2240      	movs	r2, #64	@ 0x40
 8004290:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800429a:	2301      	movs	r3, #1
 800429c:	e016      	b.n	80042cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 fac4 	bl	8004834 <DMA_CalcBaseAndBitshift>
 80042ac:	4603      	mov	r3, r0
 80042ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b4:	223f      	movs	r2, #63	@ 0x3f
 80042b6:	409a      	lsls	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3718      	adds	r7, #24
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	f010803f 	.word	0xf010803f

080042d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b086      	sub	sp, #24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	607a      	str	r2, [r7, #4]
 80042e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d101      	bne.n	80042fe <HAL_DMA_Start_IT+0x26>
 80042fa:	2302      	movs	r3, #2
 80042fc:	e040      	b.n	8004380 <HAL_DMA_Start_IT+0xa8>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b01      	cmp	r3, #1
 8004310:	d12f      	bne.n	8004372 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2202      	movs	r2, #2
 8004316:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	68b9      	ldr	r1, [r7, #8]
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 fa56 	bl	80047d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004330:	223f      	movs	r2, #63	@ 0x3f
 8004332:	409a      	lsls	r2, r3
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0216 	orr.w	r2, r2, #22
 8004346:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434c:	2b00      	cmp	r3, #0
 800434e:	d007      	beq.n	8004360 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0208 	orr.w	r2, r2, #8
 800435e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0201 	orr.w	r2, r2, #1
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	e005      	b.n	800437e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800437a:	2302      	movs	r3, #2
 800437c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800437e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004394:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004396:	f7ff f9b7 	bl	8003708 <HAL_GetTick>
 800439a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	d008      	beq.n	80043ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2280      	movs	r2, #128	@ 0x80
 80043ac:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e052      	b.n	8004460 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0216 	bic.w	r2, r2, #22
 80043c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	695a      	ldr	r2, [r3, #20]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d103      	bne.n	80043ea <HAL_DMA_Abort+0x62>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d007      	beq.n	80043fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 0208 	bic.w	r2, r2, #8
 80043f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0201 	bic.w	r2, r2, #1
 8004408:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800440a:	e013      	b.n	8004434 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800440c:	f7ff f97c 	bl	8003708 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b05      	cmp	r3, #5
 8004418:	d90c      	bls.n	8004434 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2220      	movs	r2, #32
 800441e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2203      	movs	r2, #3
 8004424:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004430:	2303      	movs	r3, #3
 8004432:	e015      	b.n	8004460 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d1e4      	bne.n	800440c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004446:	223f      	movs	r2, #63	@ 0x3f
 8004448:	409a      	lsls	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d004      	beq.n	8004486 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2280      	movs	r2, #128	@ 0x80
 8004480:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e00c      	b.n	80044a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2205      	movs	r2, #5
 800448a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0201 	bic.w	r2, r2, #1
 800449c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80044b8:	4b8e      	ldr	r3, [pc, #568]	@ (80046f4 <HAL_DMA_IRQHandler+0x248>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a8e      	ldr	r2, [pc, #568]	@ (80046f8 <HAL_DMA_IRQHandler+0x24c>)
 80044be:	fba2 2303 	umull	r2, r3, r2, r3
 80044c2:	0a9b      	lsrs	r3, r3, #10
 80044c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044d6:	2208      	movs	r2, #8
 80044d8:	409a      	lsls	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	4013      	ands	r3, r2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d01a      	beq.n	8004518 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d013      	beq.n	8004518 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0204 	bic.w	r2, r2, #4
 80044fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004504:	2208      	movs	r2, #8
 8004506:	409a      	lsls	r2, r3
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004510:	f043 0201 	orr.w	r2, r3, #1
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800451c:	2201      	movs	r2, #1
 800451e:	409a      	lsls	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4013      	ands	r3, r2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d012      	beq.n	800454e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00b      	beq.n	800454e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800453a:	2201      	movs	r2, #1
 800453c:	409a      	lsls	r2, r3
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004546:	f043 0202 	orr.w	r2, r3, #2
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004552:	2204      	movs	r2, #4
 8004554:	409a      	lsls	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	4013      	ands	r3, r2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d012      	beq.n	8004584 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00b      	beq.n	8004584 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004570:	2204      	movs	r2, #4
 8004572:	409a      	lsls	r2, r3
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800457c:	f043 0204 	orr.w	r2, r3, #4
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004588:	2210      	movs	r2, #16
 800458a:	409a      	lsls	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4013      	ands	r3, r2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d043      	beq.n	800461c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0308 	and.w	r3, r3, #8
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d03c      	beq.n	800461c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045a6:	2210      	movs	r2, #16
 80045a8:	409a      	lsls	r2, r3
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d018      	beq.n	80045ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d108      	bne.n	80045dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d024      	beq.n	800461c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	4798      	blx	r3
 80045da:	e01f      	b.n	800461c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d01b      	beq.n	800461c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	4798      	blx	r3
 80045ec:	e016      	b.n	800461c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d107      	bne.n	800460c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0208 	bic.w	r2, r2, #8
 800460a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004620:	2220      	movs	r2, #32
 8004622:	409a      	lsls	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	4013      	ands	r3, r2
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 808f 	beq.w	800474c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0310 	and.w	r3, r3, #16
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 8087 	beq.w	800474c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004642:	2220      	movs	r2, #32
 8004644:	409a      	lsls	r2, r3
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004650:	b2db      	uxtb	r3, r3
 8004652:	2b05      	cmp	r3, #5
 8004654:	d136      	bne.n	80046c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0216 	bic.w	r2, r2, #22
 8004664:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	695a      	ldr	r2, [r3, #20]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004674:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467a:	2b00      	cmp	r3, #0
 800467c:	d103      	bne.n	8004686 <HAL_DMA_IRQHandler+0x1da>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004682:	2b00      	cmp	r3, #0
 8004684:	d007      	beq.n	8004696 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0208 	bic.w	r2, r2, #8
 8004694:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800469a:	223f      	movs	r2, #63	@ 0x3f
 800469c:	409a      	lsls	r2, r3
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d07e      	beq.n	80047b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	4798      	blx	r3
        }
        return;
 80046c2:	e079      	b.n	80047b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d01d      	beq.n	800470e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d10d      	bne.n	80046fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d031      	beq.n	800474c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	4798      	blx	r3
 80046f0:	e02c      	b.n	800474c <HAL_DMA_IRQHandler+0x2a0>
 80046f2:	bf00      	nop
 80046f4:	20000084 	.word	0x20000084
 80046f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004700:	2b00      	cmp	r3, #0
 8004702:	d023      	beq.n	800474c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	4798      	blx	r3
 800470c:	e01e      	b.n	800474c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10f      	bne.n	800473c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0210 	bic.w	r2, r2, #16
 800472a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004750:	2b00      	cmp	r3, #0
 8004752:	d032      	beq.n	80047ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b00      	cmp	r3, #0
 800475e:	d022      	beq.n	80047a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2205      	movs	r2, #5
 8004764:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0201 	bic.w	r2, r2, #1
 8004776:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	3301      	adds	r3, #1
 800477c:	60bb      	str	r3, [r7, #8]
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	429a      	cmp	r2, r3
 8004782:	d307      	bcc.n	8004794 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1f2      	bne.n	8004778 <HAL_DMA_IRQHandler+0x2cc>
 8004792:	e000      	b.n	8004796 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004794:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d005      	beq.n	80047ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	4798      	blx	r3
 80047b6:	e000      	b.n	80047ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80047b8:	bf00      	nop
    }
  }
}
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
 80047e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80047f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b40      	cmp	r3, #64	@ 0x40
 8004804:	d108      	bne.n	8004818 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68ba      	ldr	r2, [r7, #8]
 8004814:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004816:	e007      	b.n	8004828 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	60da      	str	r2, [r3, #12]
}
 8004828:	bf00      	nop
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	b2db      	uxtb	r3, r3
 8004842:	3b10      	subs	r3, #16
 8004844:	4a14      	ldr	r2, [pc, #80]	@ (8004898 <DMA_CalcBaseAndBitshift+0x64>)
 8004846:	fba2 2303 	umull	r2, r3, r2, r3
 800484a:	091b      	lsrs	r3, r3, #4
 800484c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800484e:	4a13      	ldr	r2, [pc, #76]	@ (800489c <DMA_CalcBaseAndBitshift+0x68>)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4413      	add	r3, r2
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	461a      	mov	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2b03      	cmp	r3, #3
 8004860:	d909      	bls.n	8004876 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800486a:	f023 0303 	bic.w	r3, r3, #3
 800486e:	1d1a      	adds	r2, r3, #4
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	659a      	str	r2, [r3, #88]	@ 0x58
 8004874:	e007      	b.n	8004886 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800487e:	f023 0303 	bic.w	r3, r3, #3
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800488a:	4618      	mov	r0, r3
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	aaaaaaab 	.word	0xaaaaaaab
 800489c:	0800d70c 	.word	0x0800d70c

080048a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048a8:	2300      	movs	r3, #0
 80048aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	699b      	ldr	r3, [r3, #24]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d11f      	bne.n	80048fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2b03      	cmp	r3, #3
 80048be:	d856      	bhi.n	800496e <DMA_CheckFifoParam+0xce>
 80048c0:	a201      	add	r2, pc, #4	@ (adr r2, 80048c8 <DMA_CheckFifoParam+0x28>)
 80048c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c6:	bf00      	nop
 80048c8:	080048d9 	.word	0x080048d9
 80048cc:	080048eb 	.word	0x080048eb
 80048d0:	080048d9 	.word	0x080048d9
 80048d4:	0800496f 	.word	0x0800496f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d046      	beq.n	8004972 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048e8:	e043      	b.n	8004972 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80048f2:	d140      	bne.n	8004976 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048f8:	e03d      	b.n	8004976 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004902:	d121      	bne.n	8004948 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2b03      	cmp	r3, #3
 8004908:	d837      	bhi.n	800497a <DMA_CheckFifoParam+0xda>
 800490a:	a201      	add	r2, pc, #4	@ (adr r2, 8004910 <DMA_CheckFifoParam+0x70>)
 800490c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004910:	08004921 	.word	0x08004921
 8004914:	08004927 	.word	0x08004927
 8004918:	08004921 	.word	0x08004921
 800491c:	08004939 	.word	0x08004939
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	73fb      	strb	r3, [r7, #15]
      break;
 8004924:	e030      	b.n	8004988 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800492a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d025      	beq.n	800497e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004936:	e022      	b.n	800497e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800493c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004940:	d11f      	bne.n	8004982 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004946:	e01c      	b.n	8004982 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2b02      	cmp	r3, #2
 800494c:	d903      	bls.n	8004956 <DMA_CheckFifoParam+0xb6>
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	2b03      	cmp	r3, #3
 8004952:	d003      	beq.n	800495c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004954:	e018      	b.n	8004988 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	73fb      	strb	r3, [r7, #15]
      break;
 800495a:	e015      	b.n	8004988 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004960:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d00e      	beq.n	8004986 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	73fb      	strb	r3, [r7, #15]
      break;
 800496c:	e00b      	b.n	8004986 <DMA_CheckFifoParam+0xe6>
      break;
 800496e:	bf00      	nop
 8004970:	e00a      	b.n	8004988 <DMA_CheckFifoParam+0xe8>
      break;
 8004972:	bf00      	nop
 8004974:	e008      	b.n	8004988 <DMA_CheckFifoParam+0xe8>
      break;
 8004976:	bf00      	nop
 8004978:	e006      	b.n	8004988 <DMA_CheckFifoParam+0xe8>
      break;
 800497a:	bf00      	nop
 800497c:	e004      	b.n	8004988 <DMA_CheckFifoParam+0xe8>
      break;
 800497e:	bf00      	nop
 8004980:	e002      	b.n	8004988 <DMA_CheckFifoParam+0xe8>
      break;   
 8004982:	bf00      	nop
 8004984:	e000      	b.n	8004988 <DMA_CheckFifoParam+0xe8>
      break;
 8004986:	bf00      	nop
    }
  } 
  
  return status; 
 8004988:	7bfb      	ldrb	r3, [r7, #15]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop

08004998 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004998:	b480      	push	{r7}
 800499a:	b089      	sub	sp, #36	@ 0x24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049ae:	2300      	movs	r3, #0
 80049b0:	61fb      	str	r3, [r7, #28]
 80049b2:	e159      	b.n	8004c68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80049b4:	2201      	movs	r2, #1
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	fa02 f303 	lsl.w	r3, r2, r3
 80049bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	697a      	ldr	r2, [r7, #20]
 80049c4:	4013      	ands	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	f040 8148 	bne.w	8004c62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	f003 0303 	and.w	r3, r3, #3
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d005      	beq.n	80049ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d130      	bne.n	8004a4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	2203      	movs	r2, #3
 80049f6:	fa02 f303 	lsl.w	r3, r2, r3
 80049fa:	43db      	mvns	r3, r3
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	4013      	ands	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68da      	ldr	r2, [r3, #12]
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	69ba      	ldr	r2, [r7, #24]
 8004a18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a20:	2201      	movs	r2, #1
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	fa02 f303 	lsl.w	r3, r2, r3
 8004a28:	43db      	mvns	r3, r3
 8004a2a:	69ba      	ldr	r2, [r7, #24]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	091b      	lsrs	r3, r3, #4
 8004a36:	f003 0201 	and.w	r2, r3, #1
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	f003 0303 	and.w	r3, r3, #3
 8004a54:	2b03      	cmp	r3, #3
 8004a56:	d017      	beq.n	8004a88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	2203      	movs	r2, #3
 8004a64:	fa02 f303 	lsl.w	r3, r2, r3
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	689a      	ldr	r2, [r3, #8]
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f003 0303 	and.w	r3, r3, #3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d123      	bne.n	8004adc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	08da      	lsrs	r2, r3, #3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3208      	adds	r2, #8
 8004a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	f003 0307 	and.w	r3, r3, #7
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	220f      	movs	r2, #15
 8004aac:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab0:	43db      	mvns	r3, r3
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	691a      	ldr	r2, [r3, #16]
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	f003 0307 	and.w	r3, r3, #7
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	08da      	lsrs	r2, r3, #3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	3208      	adds	r2, #8
 8004ad6:	69b9      	ldr	r1, [r7, #24]
 8004ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	2203      	movs	r2, #3
 8004ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8004aec:	43db      	mvns	r3, r3
 8004aee:	69ba      	ldr	r2, [r7, #24]
 8004af0:	4013      	ands	r3, r2
 8004af2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	f003 0203 	and.w	r2, r3, #3
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	005b      	lsls	r3, r3, #1
 8004b00:	fa02 f303 	lsl.w	r3, r2, r3
 8004b04:	69ba      	ldr	r2, [r7, #24]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f000 80a2 	beq.w	8004c62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b1e:	2300      	movs	r3, #0
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	4b57      	ldr	r3, [pc, #348]	@ (8004c80 <HAL_GPIO_Init+0x2e8>)
 8004b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b26:	4a56      	ldr	r2, [pc, #344]	@ (8004c80 <HAL_GPIO_Init+0x2e8>)
 8004b28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004b2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8004b2e:	4b54      	ldr	r3, [pc, #336]	@ (8004c80 <HAL_GPIO_Init+0x2e8>)
 8004b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b36:	60fb      	str	r3, [r7, #12]
 8004b38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b3a:	4a52      	ldr	r2, [pc, #328]	@ (8004c84 <HAL_GPIO_Init+0x2ec>)
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	089b      	lsrs	r3, r3, #2
 8004b40:	3302      	adds	r3, #2
 8004b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	f003 0303 	and.w	r3, r3, #3
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	220f      	movs	r2, #15
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	43db      	mvns	r3, r3
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a49      	ldr	r2, [pc, #292]	@ (8004c88 <HAL_GPIO_Init+0x2f0>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d019      	beq.n	8004b9a <HAL_GPIO_Init+0x202>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a48      	ldr	r2, [pc, #288]	@ (8004c8c <HAL_GPIO_Init+0x2f4>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d013      	beq.n	8004b96 <HAL_GPIO_Init+0x1fe>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	4a47      	ldr	r2, [pc, #284]	@ (8004c90 <HAL_GPIO_Init+0x2f8>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d00d      	beq.n	8004b92 <HAL_GPIO_Init+0x1fa>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4a46      	ldr	r2, [pc, #280]	@ (8004c94 <HAL_GPIO_Init+0x2fc>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d007      	beq.n	8004b8e <HAL_GPIO_Init+0x1f6>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a45      	ldr	r2, [pc, #276]	@ (8004c98 <HAL_GPIO_Init+0x300>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d101      	bne.n	8004b8a <HAL_GPIO_Init+0x1f2>
 8004b86:	2304      	movs	r3, #4
 8004b88:	e008      	b.n	8004b9c <HAL_GPIO_Init+0x204>
 8004b8a:	2307      	movs	r3, #7
 8004b8c:	e006      	b.n	8004b9c <HAL_GPIO_Init+0x204>
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e004      	b.n	8004b9c <HAL_GPIO_Init+0x204>
 8004b92:	2302      	movs	r3, #2
 8004b94:	e002      	b.n	8004b9c <HAL_GPIO_Init+0x204>
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <HAL_GPIO_Init+0x204>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	69fa      	ldr	r2, [r7, #28]
 8004b9e:	f002 0203 	and.w	r2, r2, #3
 8004ba2:	0092      	lsls	r2, r2, #2
 8004ba4:	4093      	lsls	r3, r2
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bac:	4935      	ldr	r1, [pc, #212]	@ (8004c84 <HAL_GPIO_Init+0x2ec>)
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	089b      	lsrs	r3, r3, #2
 8004bb2:	3302      	adds	r3, #2
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bba:	4b38      	ldr	r3, [pc, #224]	@ (8004c9c <HAL_GPIO_Init+0x304>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	43db      	mvns	r3, r3
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d003      	beq.n	8004bde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bde:	4a2f      	ldr	r2, [pc, #188]	@ (8004c9c <HAL_GPIO_Init+0x304>)
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004be4:	4b2d      	ldr	r3, [pc, #180]	@ (8004c9c <HAL_GPIO_Init+0x304>)
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	43db      	mvns	r3, r3
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d003      	beq.n	8004c08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c08:	4a24      	ldr	r2, [pc, #144]	@ (8004c9c <HAL_GPIO_Init+0x304>)
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c0e:	4b23      	ldr	r3, [pc, #140]	@ (8004c9c <HAL_GPIO_Init+0x304>)
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	43db      	mvns	r3, r3
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	4013      	ands	r3, r2
 8004c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d003      	beq.n	8004c32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c32:	4a1a      	ldr	r2, [pc, #104]	@ (8004c9c <HAL_GPIO_Init+0x304>)
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c38:	4b18      	ldr	r3, [pc, #96]	@ (8004c9c <HAL_GPIO_Init+0x304>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	43db      	mvns	r3, r3
 8004c42:	69ba      	ldr	r2, [r7, #24]
 8004c44:	4013      	ands	r3, r2
 8004c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d003      	beq.n	8004c5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c5c:	4a0f      	ldr	r2, [pc, #60]	@ (8004c9c <HAL_GPIO_Init+0x304>)
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	3301      	adds	r3, #1
 8004c66:	61fb      	str	r3, [r7, #28]
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	2b0f      	cmp	r3, #15
 8004c6c:	f67f aea2 	bls.w	80049b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c70:	bf00      	nop
 8004c72:	bf00      	nop
 8004c74:	3724      	adds	r7, #36	@ 0x24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	40023800 	.word	0x40023800
 8004c84:	40013800 	.word	0x40013800
 8004c88:	40020000 	.word	0x40020000
 8004c8c:	40020400 	.word	0x40020400
 8004c90:	40020800 	.word	0x40020800
 8004c94:	40020c00 	.word	0x40020c00
 8004c98:	40021000 	.word	0x40021000
 8004c9c:	40013c00 	.word	0x40013c00

08004ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	807b      	strh	r3, [r7, #2]
 8004cac:	4613      	mov	r3, r2
 8004cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cb0:	787b      	ldrb	r3, [r7, #1]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cb6:	887a      	ldrh	r2, [r7, #2]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004cbc:	e003      	b.n	8004cc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004cbe:	887b      	ldrh	r3, [r7, #2]
 8004cc0:	041a      	lsls	r2, r3, #16
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	619a      	str	r2, [r3, #24]
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
	...

08004cd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d101      	bne.n	8004ce6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e12b      	b.n	8004f3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d106      	bne.n	8004d00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7fe f82a 	bl	8002d54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2224      	movs	r2, #36	@ 0x24
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f022 0201 	bic.w	r2, r2, #1
 8004d16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004d26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004d38:	f001 fe4a 	bl	80069d0 <HAL_RCC_GetPCLK1Freq>
 8004d3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	4a81      	ldr	r2, [pc, #516]	@ (8004f48 <HAL_I2C_Init+0x274>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d807      	bhi.n	8004d58 <HAL_I2C_Init+0x84>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4a80      	ldr	r2, [pc, #512]	@ (8004f4c <HAL_I2C_Init+0x278>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	bf94      	ite	ls
 8004d50:	2301      	movls	r3, #1
 8004d52:	2300      	movhi	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	e006      	b.n	8004d66 <HAL_I2C_Init+0x92>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4a7d      	ldr	r2, [pc, #500]	@ (8004f50 <HAL_I2C_Init+0x27c>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	bf94      	ite	ls
 8004d60:	2301      	movls	r3, #1
 8004d62:	2300      	movhi	r3, #0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e0e7      	b.n	8004f3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	4a78      	ldr	r2, [pc, #480]	@ (8004f54 <HAL_I2C_Init+0x280>)
 8004d72:	fba2 2303 	umull	r2, r3, r2, r3
 8004d76:	0c9b      	lsrs	r3, r3, #18
 8004d78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	4a6a      	ldr	r2, [pc, #424]	@ (8004f48 <HAL_I2C_Init+0x274>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d802      	bhi.n	8004da8 <HAL_I2C_Init+0xd4>
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	3301      	adds	r3, #1
 8004da6:	e009      	b.n	8004dbc <HAL_I2C_Init+0xe8>
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004dae:	fb02 f303 	mul.w	r3, r2, r3
 8004db2:	4a69      	ldr	r2, [pc, #420]	@ (8004f58 <HAL_I2C_Init+0x284>)
 8004db4:	fba2 2303 	umull	r2, r3, r2, r3
 8004db8:	099b      	lsrs	r3, r3, #6
 8004dba:	3301      	adds	r3, #1
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6812      	ldr	r2, [r2, #0]
 8004dc0:	430b      	orrs	r3, r1
 8004dc2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004dce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	495c      	ldr	r1, [pc, #368]	@ (8004f48 <HAL_I2C_Init+0x274>)
 8004dd8:	428b      	cmp	r3, r1
 8004dda:	d819      	bhi.n	8004e10 <HAL_I2C_Init+0x13c>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	1e59      	subs	r1, r3, #1
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	005b      	lsls	r3, r3, #1
 8004de6:	fbb1 f3f3 	udiv	r3, r1, r3
 8004dea:	1c59      	adds	r1, r3, #1
 8004dec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004df0:	400b      	ands	r3, r1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <HAL_I2C_Init+0x138>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	1e59      	subs	r1, r3, #1
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e04:	3301      	adds	r3, #1
 8004e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e0a:	e051      	b.n	8004eb0 <HAL_I2C_Init+0x1dc>
 8004e0c:	2304      	movs	r3, #4
 8004e0e:	e04f      	b.n	8004eb0 <HAL_I2C_Init+0x1dc>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d111      	bne.n	8004e3c <HAL_I2C_Init+0x168>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	1e58      	subs	r0, r3, #1
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6859      	ldr	r1, [r3, #4]
 8004e20:	460b      	mov	r3, r1
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	440b      	add	r3, r1
 8004e26:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	bf0c      	ite	eq
 8004e34:	2301      	moveq	r3, #1
 8004e36:	2300      	movne	r3, #0
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	e012      	b.n	8004e62 <HAL_I2C_Init+0x18e>
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	1e58      	subs	r0, r3, #1
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6859      	ldr	r1, [r3, #4]
 8004e44:	460b      	mov	r3, r1
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	440b      	add	r3, r1
 8004e4a:	0099      	lsls	r1, r3, #2
 8004e4c:	440b      	add	r3, r1
 8004e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e52:	3301      	adds	r3, #1
 8004e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	bf0c      	ite	eq
 8004e5c:	2301      	moveq	r3, #1
 8004e5e:	2300      	movne	r3, #0
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <HAL_I2C_Init+0x196>
 8004e66:	2301      	movs	r3, #1
 8004e68:	e022      	b.n	8004eb0 <HAL_I2C_Init+0x1dc>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10e      	bne.n	8004e90 <HAL_I2C_Init+0x1bc>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	1e58      	subs	r0, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6859      	ldr	r1, [r3, #4]
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	440b      	add	r3, r1
 8004e80:	fbb0 f3f3 	udiv	r3, r0, r3
 8004e84:	3301      	adds	r3, #1
 8004e86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004e8e:	e00f      	b.n	8004eb0 <HAL_I2C_Init+0x1dc>
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	1e58      	subs	r0, r3, #1
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6859      	ldr	r1, [r3, #4]
 8004e98:	460b      	mov	r3, r1
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	440b      	add	r3, r1
 8004e9e:	0099      	lsls	r1, r3, #2
 8004ea0:	440b      	add	r3, r1
 8004ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004eb0:	6879      	ldr	r1, [r7, #4]
 8004eb2:	6809      	ldr	r1, [r1, #0]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	69da      	ldr	r2, [r3, #28]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004ede:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	6911      	ldr	r1, [r2, #16]
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	68d2      	ldr	r2, [r2, #12]
 8004eea:	4311      	orrs	r1, r2
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	6812      	ldr	r2, [r2, #0]
 8004ef0:	430b      	orrs	r3, r1
 8004ef2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68db      	ldr	r3, [r3, #12]
 8004efa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	695a      	ldr	r2, [r3, #20]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	431a      	orrs	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f042 0201 	orr.w	r2, r2, #1
 8004f1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2200      	movs	r2, #0
 8004f32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	000186a0 	.word	0x000186a0
 8004f4c:	001e847f 	.word	0x001e847f
 8004f50:	003d08ff 	.word	0x003d08ff
 8004f54:	431bde83 	.word	0x431bde83
 8004f58:	10624dd3 	.word	0x10624dd3

08004f5c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b08c      	sub	sp, #48	@ 0x30
 8004f60:	af02      	add	r7, sp, #8
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	4608      	mov	r0, r1
 8004f66:	4611      	mov	r1, r2
 8004f68:	461a      	mov	r2, r3
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	817b      	strh	r3, [r7, #10]
 8004f6e:	460b      	mov	r3, r1
 8004f70:	813b      	strh	r3, [r7, #8]
 8004f72:	4613      	mov	r3, r2
 8004f74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f76:	f7fe fbc7 	bl	8003708 <HAL_GetTick>
 8004f7a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2b20      	cmp	r3, #32
 8004f86:	f040 8214 	bne.w	80053b2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	2319      	movs	r3, #25
 8004f90:	2201      	movs	r2, #1
 8004f92:	497b      	ldr	r1, [pc, #492]	@ (8005180 <HAL_I2C_Mem_Read+0x224>)
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 fefd 	bl	8005d94 <I2C_WaitOnFlagUntilTimeout>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004fa0:	2302      	movs	r3, #2
 8004fa2:	e207      	b.n	80053b4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d101      	bne.n	8004fb2 <HAL_I2C_Mem_Read+0x56>
 8004fae:	2302      	movs	r3, #2
 8004fb0:	e200      	b.n	80053b4 <HAL_I2C_Mem_Read+0x458>
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d007      	beq.n	8004fd8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f042 0201 	orr.w	r2, r2, #1
 8004fd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004fe6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2222      	movs	r2, #34	@ 0x22
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2240      	movs	r2, #64	@ 0x40
 8004ff4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005002:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005008:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800500e:	b29a      	uxth	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	4a5b      	ldr	r2, [pc, #364]	@ (8005184 <HAL_I2C_Mem_Read+0x228>)
 8005018:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800501a:	88f8      	ldrh	r0, [r7, #6]
 800501c:	893a      	ldrh	r2, [r7, #8]
 800501e:	8979      	ldrh	r1, [r7, #10]
 8005020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005022:	9301      	str	r3, [sp, #4]
 8005024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	4603      	mov	r3, r0
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f000 fcae 	bl	800598c <I2C_RequestMemoryRead>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d001      	beq.n	800503a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e1bc      	b.n	80053b4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800503e:	2b00      	cmp	r3, #0
 8005040:	d113      	bne.n	800506a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005042:	2300      	movs	r3, #0
 8005044:	623b      	str	r3, [r7, #32]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	623b      	str	r3, [r7, #32]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	623b      	str	r3, [r7, #32]
 8005056:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005066:	601a      	str	r2, [r3, #0]
 8005068:	e190      	b.n	800538c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800506e:	2b01      	cmp	r3, #1
 8005070:	d11b      	bne.n	80050aa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005080:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005082:	2300      	movs	r3, #0
 8005084:	61fb      	str	r3, [r7, #28]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	61fb      	str	r3, [r7, #28]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	61fb      	str	r3, [r7, #28]
 8005096:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	e170      	b.n	800538c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d11b      	bne.n	80050ea <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050d2:	2300      	movs	r3, #0
 80050d4:	61bb      	str	r3, [r7, #24]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	61bb      	str	r3, [r7, #24]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	61bb      	str	r3, [r7, #24]
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	e150      	b.n	800538c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050ea:	2300      	movs	r3, #0
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	617b      	str	r3, [r7, #20]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	617b      	str	r3, [r7, #20]
 80050fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005100:	e144      	b.n	800538c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005106:	2b03      	cmp	r3, #3
 8005108:	f200 80f1 	bhi.w	80052ee <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005110:	2b01      	cmp	r3, #1
 8005112:	d123      	bne.n	800515c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005114:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005116:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f000 ff9d 	bl	8006058 <I2C_WaitOnRXNEFlagUntilTimeout>
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e145      	b.n	80053b4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	691a      	ldr	r2, [r3, #16]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005144:	3b01      	subs	r3, #1
 8005146:	b29a      	uxth	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005150:	b29b      	uxth	r3, r3
 8005152:	3b01      	subs	r3, #1
 8005154:	b29a      	uxth	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800515a:	e117      	b.n	800538c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005160:	2b02      	cmp	r3, #2
 8005162:	d14e      	bne.n	8005202 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800516a:	2200      	movs	r2, #0
 800516c:	4906      	ldr	r1, [pc, #24]	@ (8005188 <HAL_I2C_Mem_Read+0x22c>)
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 fe10 	bl	8005d94 <I2C_WaitOnFlagUntilTimeout>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d008      	beq.n	800518c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e11a      	b.n	80053b4 <HAL_I2C_Mem_Read+0x458>
 800517e:	bf00      	nop
 8005180:	00100002 	.word	0x00100002
 8005184:	ffff0000 	.word	0xffff0000
 8005188:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800519a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	691a      	ldr	r2, [r3, #16]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a6:	b2d2      	uxtb	r2, r2
 80051a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051b8:	3b01      	subs	r3, #1
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	3b01      	subs	r3, #1
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	691a      	ldr	r2, [r3, #16]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d8:	b2d2      	uxtb	r2, r2
 80051da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ea:	3b01      	subs	r3, #1
 80051ec:	b29a      	uxth	r2, r3
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051f6:	b29b      	uxth	r3, r3
 80051f8:	3b01      	subs	r3, #1
 80051fa:	b29a      	uxth	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005200:	e0c4      	b.n	800538c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005208:	2200      	movs	r2, #0
 800520a:	496c      	ldr	r1, [pc, #432]	@ (80053bc <HAL_I2C_Mem_Read+0x460>)
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 fdc1 	bl	8005d94 <I2C_WaitOnFlagUntilTimeout>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e0cb      	b.n	80053b4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800522a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	691a      	ldr	r2, [r3, #16]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005248:	3b01      	subs	r3, #1
 800524a:	b29a      	uxth	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005254:	b29b      	uxth	r3, r3
 8005256:	3b01      	subs	r3, #1
 8005258:	b29a      	uxth	r2, r3
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800525e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005264:	2200      	movs	r2, #0
 8005266:	4955      	ldr	r1, [pc, #340]	@ (80053bc <HAL_I2C_Mem_Read+0x460>)
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 fd93 	bl	8005d94 <I2C_WaitOnFlagUntilTimeout>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e09d      	b.n	80053b4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005286:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691a      	ldr	r2, [r3, #16]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529a:	1c5a      	adds	r2, r3, #1
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052a4:	3b01      	subs	r3, #1
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	3b01      	subs	r3, #1
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	691a      	ldr	r2, [r3, #16]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c4:	b2d2      	uxtb	r2, r2
 80052c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052cc:	1c5a      	adds	r2, r3, #1
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b29a      	uxth	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	3b01      	subs	r3, #1
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80052ec:	e04e      	b.n	800538c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052f0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 feb0 	bl	8006058 <I2C_WaitOnRXNEFlagUntilTimeout>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d001      	beq.n	8005302 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e058      	b.n	80053b4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	691a      	ldr	r2, [r3, #16]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530c:	b2d2      	uxtb	r2, r2
 800530e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005314:	1c5a      	adds	r2, r3, #1
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800531e:	3b01      	subs	r3, #1
 8005320:	b29a      	uxth	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	f003 0304 	and.w	r3, r3, #4
 800533e:	2b04      	cmp	r3, #4
 8005340:	d124      	bne.n	800538c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005346:	2b03      	cmp	r3, #3
 8005348:	d107      	bne.n	800535a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005358:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	691a      	ldr	r2, [r3, #16]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005364:	b2d2      	uxtb	r2, r2
 8005366:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005376:	3b01      	subs	r3, #1
 8005378:	b29a      	uxth	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005382:	b29b      	uxth	r3, r3
 8005384:	3b01      	subs	r3, #1
 8005386:	b29a      	uxth	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005390:	2b00      	cmp	r3, #0
 8005392:	f47f aeb6 	bne.w	8005102 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2220      	movs	r2, #32
 800539a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80053ae:	2300      	movs	r3, #0
 80053b0:	e000      	b.n	80053b4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80053b2:	2302      	movs	r3, #2
  }
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3728      	adds	r7, #40	@ 0x28
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	00010004 	.word	0x00010004

080053c0 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b08c      	sub	sp, #48	@ 0x30
 80053c4:	af02      	add	r7, sp, #8
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	4608      	mov	r0, r1
 80053ca:	4611      	mov	r1, r2
 80053cc:	461a      	mov	r2, r3
 80053ce:	4603      	mov	r3, r0
 80053d0:	817b      	strh	r3, [r7, #10]
 80053d2:	460b      	mov	r3, r1
 80053d4:	813b      	strh	r3, [r7, #8]
 80053d6:	4613      	mov	r3, r2
 80053d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053da:	f7fe f995 	bl	8003708 <HAL_GetTick>
 80053de:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	f040 8172 	bne.w	80056d6 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80053f2:	4b93      	ldr	r3, [pc, #588]	@ (8005640 <HAL_I2C_Mem_Read_DMA+0x280>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	08db      	lsrs	r3, r3, #3
 80053f8:	4a92      	ldr	r2, [pc, #584]	@ (8005644 <HAL_I2C_Mem_Read_DMA+0x284>)
 80053fa:	fba2 2303 	umull	r2, r3, r2, r3
 80053fe:	0a1a      	lsrs	r2, r3, #8
 8005400:	4613      	mov	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	009a      	lsls	r2, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	3b01      	subs	r3, #1
 8005410:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d112      	bne.n	800543e <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2200      	movs	r2, #0
 800541c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2220      	movs	r2, #32
 8005422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005432:	f043 0220 	orr.w	r2, r3, #32
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800543a:	2302      	movs	r3, #2
 800543c:	e14c      	b.n	80056d8 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	699b      	ldr	r3, [r3, #24]
 8005444:	f003 0302 	and.w	r3, r3, #2
 8005448:	2b02      	cmp	r3, #2
 800544a:	d0df      	beq.n	800540c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005452:	2b01      	cmp	r3, #1
 8005454:	d101      	bne.n	800545a <HAL_I2C_Mem_Read_DMA+0x9a>
 8005456:	2302      	movs	r3, #2
 8005458:	e13e      	b.n	80056d8 <HAL_I2C_Mem_Read_DMA+0x318>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	2b01      	cmp	r3, #1
 800546e:	d007      	beq.n	8005480 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0201 	orr.w	r2, r2, #1
 800547e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800548e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2222      	movs	r2, #34	@ 0x22
 8005494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2240      	movs	r2, #64	@ 0x40
 800549c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80054b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4a62      	ldr	r2, [pc, #392]	@ (8005648 <HAL_I2C_Mem_Read_DMA+0x288>)
 80054c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80054c2:	897a      	ldrh	r2, [r7, #10]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80054c8:	893a      	ldrh	r2, [r7, #8]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80054ce:	88fa      	ldrh	r2, [r7, #6]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 80cc 	beq.w	800567c <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d02d      	beq.n	8005548 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f0:	4a56      	ldr	r2, [pc, #344]	@ (800564c <HAL_I2C_Mem_Read_DMA+0x28c>)
 80054f2:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f8:	4a55      	ldr	r2, [pc, #340]	@ (8005650 <HAL_I2C_Mem_Read_DMA+0x290>)
 80054fa:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005500:	2200      	movs	r2, #0
 8005502:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005508:	2200      	movs	r2, #0
 800550a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005510:	2200      	movs	r2, #0
 8005512:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005518:	2200      	movs	r2, #0
 800551a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	3310      	adds	r3, #16
 8005526:	4619      	mov	r1, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552c:	461a      	mov	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005532:	f7fe fed1 	bl	80042d8 <HAL_DMA_Start_IT>
 8005536:	4603      	mov	r3, r0
 8005538:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800553c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005540:	2b00      	cmp	r3, #0
 8005542:	f040 8087 	bne.w	8005654 <HAL_I2C_Mem_Read_DMA+0x294>
 8005546:	e013      	b.n	8005570 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2220      	movs	r2, #32
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e0b3      	b.n	80056d8 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005570:	88f8      	ldrh	r0, [r7, #6]
 8005572:	893a      	ldrh	r2, [r7, #8]
 8005574:	8979      	ldrh	r1, [r7, #10]
 8005576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005578:	9301      	str	r3, [sp, #4]
 800557a:	2323      	movs	r3, #35	@ 0x23
 800557c:	9300      	str	r3, [sp, #0]
 800557e:	4603      	mov	r3, r0
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f000 fa03 	bl	800598c <I2C_RequestMemoryRead>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d023      	beq.n	80055d4 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005590:	4618      	mov	r0, r3
 8005592:	f7fe ff69 	bl	8004468 <HAL_DMA_Abort_IT>
 8005596:	4603      	mov	r3, r0
 8005598:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a0:	2200      	movs	r2, #0
 80055a2:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055b2:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 0201 	bic.w	r2, r2, #1
 80055ce:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e081      	b.n	80056d8 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d108      	bne.n	80055ee <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055ea:	601a      	str	r2, [r3, #0]
 80055ec:	e007      	b.n	80055fe <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80055fc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055fe:	2300      	movs	r3, #0
 8005600:	61bb      	str	r3, [r7, #24]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	61bb      	str	r3, [r7, #24]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	61bb      	str	r3, [r7, #24]
 8005612:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800562a:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800563a:	605a      	str	r2, [r3, #4]
 800563c:	e049      	b.n	80056d2 <HAL_I2C_Mem_Read_DMA+0x312>
 800563e:	bf00      	nop
 8005640:	20000084 	.word	0x20000084
 8005644:	14f8b589 	.word	0x14f8b589
 8005648:	ffff0000 	.word	0xffff0000
 800564c:	08005b5d 	.word	0x08005b5d
 8005650:	08005d1b 	.word	0x08005d1b
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2220      	movs	r2, #32
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005668:	f043 0210 	orr.w	r2, r3, #16
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e02d      	b.n	80056d8 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800567c:	88f8      	ldrh	r0, [r7, #6]
 800567e:	893a      	ldrh	r2, [r7, #8]
 8005680:	8979      	ldrh	r1, [r7, #10]
 8005682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005684:	9301      	str	r3, [sp, #4]
 8005686:	2323      	movs	r3, #35	@ 0x23
 8005688:	9300      	str	r3, [sp, #0]
 800568a:	4603      	mov	r3, r0
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 f97d 	bl	800598c <I2C_RequestMemoryRead>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d001      	beq.n	800569c <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e01d      	b.n	80056d8 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800569c:	2300      	movs	r3, #0
 800569e:	617b      	str	r3, [r7, #20]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	617b      	str	r3, [r7, #20]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	699b      	ldr	r3, [r3, #24]
 80056ae:	617b      	str	r3, [r7, #20]
 80056b0:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056c0:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2220      	movs	r2, #32
 80056c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	e000      	b.n	80056d8 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 80056d6:	2302      	movs	r3, #2
  }
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3728      	adds	r7, #40	@ 0x28
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b08a      	sub	sp, #40	@ 0x28
 80056e4:	af02      	add	r7, sp, #8
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	607a      	str	r2, [r7, #4]
 80056ea:	603b      	str	r3, [r7, #0]
 80056ec:	460b      	mov	r3, r1
 80056ee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80056f0:	f7fe f80a 	bl	8003708 <HAL_GetTick>
 80056f4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b20      	cmp	r3, #32
 8005704:	f040 8111 	bne.w	800592a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	2319      	movs	r3, #25
 800570e:	2201      	movs	r2, #1
 8005710:	4988      	ldr	r1, [pc, #544]	@ (8005934 <HAL_I2C_IsDeviceReady+0x254>)
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f000 fb3e 	bl	8005d94 <I2C_WaitOnFlagUntilTimeout>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800571e:	2302      	movs	r3, #2
 8005720:	e104      	b.n	800592c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005728:	2b01      	cmp	r3, #1
 800572a:	d101      	bne.n	8005730 <HAL_I2C_IsDeviceReady+0x50>
 800572c:	2302      	movs	r3, #2
 800572e:	e0fd      	b.n	800592c <HAL_I2C_IsDeviceReady+0x24c>
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0301 	and.w	r3, r3, #1
 8005742:	2b01      	cmp	r3, #1
 8005744:	d007      	beq.n	8005756 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f042 0201 	orr.w	r2, r2, #1
 8005754:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005764:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2224      	movs	r2, #36	@ 0x24
 800576a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2200      	movs	r2, #0
 8005772:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4a70      	ldr	r2, [pc, #448]	@ (8005938 <HAL_I2C_IsDeviceReady+0x258>)
 8005778:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005788:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2200      	movs	r2, #0
 8005792:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f000 fafc 	bl	8005d94 <I2C_WaitOnFlagUntilTimeout>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00d      	beq.n	80057be <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057b0:	d103      	bne.n	80057ba <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057b8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e0b6      	b.n	800592c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057be:	897b      	ldrh	r3, [r7, #10]
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	461a      	mov	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80057cc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80057ce:	f7fd ff9b 	bl	8003708 <HAL_GetTick>
 80057d2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	695b      	ldr	r3, [r3, #20]
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b02      	cmp	r3, #2
 80057e0:	bf0c      	ite	eq
 80057e2:	2301      	moveq	r3, #1
 80057e4:	2300      	movne	r3, #0
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057f8:	bf0c      	ite	eq
 80057fa:	2301      	moveq	r3, #1
 80057fc:	2300      	movne	r3, #0
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005802:	e025      	b.n	8005850 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005804:	f7fd ff80 	bl	8003708 <HAL_GetTick>
 8005808:	4602      	mov	r2, r0
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	429a      	cmp	r2, r3
 8005812:	d302      	bcc.n	800581a <HAL_I2C_IsDeviceReady+0x13a>
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d103      	bne.n	8005822 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	22a0      	movs	r2, #160	@ 0xa0
 800581e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	f003 0302 	and.w	r3, r3, #2
 800582c:	2b02      	cmp	r3, #2
 800582e:	bf0c      	ite	eq
 8005830:	2301      	moveq	r3, #1
 8005832:	2300      	movne	r3, #0
 8005834:	b2db      	uxtb	r3, r3
 8005836:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005842:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005846:	bf0c      	ite	eq
 8005848:	2301      	moveq	r3, #1
 800584a:	2300      	movne	r3, #0
 800584c:	b2db      	uxtb	r3, r3
 800584e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2ba0      	cmp	r3, #160	@ 0xa0
 800585a:	d005      	beq.n	8005868 <HAL_I2C_IsDeviceReady+0x188>
 800585c:	7dfb      	ldrb	r3, [r7, #23]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d102      	bne.n	8005868 <HAL_I2C_IsDeviceReady+0x188>
 8005862:	7dbb      	ldrb	r3, [r7, #22]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d0cd      	beq.n	8005804 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2220      	movs	r2, #32
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	f003 0302 	and.w	r3, r3, #2
 800587a:	2b02      	cmp	r3, #2
 800587c:	d129      	bne.n	80058d2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800588c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800588e:	2300      	movs	r3, #0
 8005890:	613b      	str	r3, [r7, #16]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	613b      	str	r3, [r7, #16]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	613b      	str	r3, [r7, #16]
 80058a2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	2319      	movs	r3, #25
 80058aa:	2201      	movs	r2, #1
 80058ac:	4921      	ldr	r1, [pc, #132]	@ (8005934 <HAL_I2C_IsDeviceReady+0x254>)
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f000 fa70 	bl	8005d94 <I2C_WaitOnFlagUntilTimeout>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e036      	b.n	800592c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80058ce:	2300      	movs	r3, #0
 80058d0:	e02c      	b.n	800592c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058e0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80058ea:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	2319      	movs	r3, #25
 80058f2:	2201      	movs	r2, #1
 80058f4:	490f      	ldr	r1, [pc, #60]	@ (8005934 <HAL_I2C_IsDeviceReady+0x254>)
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f000 fa4c 	bl	8005d94 <I2C_WaitOnFlagUntilTimeout>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d001      	beq.n	8005906 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e012      	b.n	800592c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	3301      	adds	r3, #1
 800590a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	429a      	cmp	r2, r3
 8005912:	f4ff af32 	bcc.w	800577a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2220      	movs	r2, #32
 800591a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e000      	b.n	800592c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800592a:	2302      	movs	r3, #2
  }
}
 800592c:	4618      	mov	r0, r3
 800592e:	3720      	adds	r7, #32
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	00100002 	.word	0x00100002
 8005938:	ffff0000 	.word	0xffff0000

0800593c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr

08005964 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800596c:	bf00      	nop
 800596e:	370c      	adds	r7, #12
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b088      	sub	sp, #32
 8005990:	af02      	add	r7, sp, #8
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	4608      	mov	r0, r1
 8005996:	4611      	mov	r1, r2
 8005998:	461a      	mov	r2, r3
 800599a:	4603      	mov	r3, r0
 800599c:	817b      	strh	r3, [r7, #10]
 800599e:	460b      	mov	r3, r1
 80059a0:	813b      	strh	r3, [r7, #8]
 80059a2:	4613      	mov	r3, r2
 80059a4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80059b4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c8:	9300      	str	r3, [sp, #0]
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80059d2:	68f8      	ldr	r0, [r7, #12]
 80059d4:	f000 f9de 	bl	8005d94 <I2C_WaitOnFlagUntilTimeout>
 80059d8:	4603      	mov	r3, r0
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00d      	beq.n	80059fa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059ec:	d103      	bne.n	80059f6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059f4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e0aa      	b.n	8005b50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059fa:	897b      	ldrh	r3, [r7, #10]
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	461a      	mov	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005a08:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0c:	6a3a      	ldr	r2, [r7, #32]
 8005a0e:	4952      	ldr	r1, [pc, #328]	@ (8005b58 <I2C_RequestMemoryRead+0x1cc>)
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 fa39 	bl	8005e88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e097      	b.n	8005b50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a20:	2300      	movs	r3, #0
 8005a22:	617b      	str	r3, [r7, #20]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	695b      	ldr	r3, [r3, #20]
 8005a2a:	617b      	str	r3, [r7, #20]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	617b      	str	r3, [r7, #20]
 8005a34:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a38:	6a39      	ldr	r1, [r7, #32]
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 fac4 	bl	8005fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00d      	beq.n	8005a62 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4a:	2b04      	cmp	r3, #4
 8005a4c:	d107      	bne.n	8005a5e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a5c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e076      	b.n	8005b50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005a62:	88fb      	ldrh	r3, [r7, #6]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d105      	bne.n	8005a74 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a68:	893b      	ldrh	r3, [r7, #8]
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	611a      	str	r2, [r3, #16]
 8005a72:	e021      	b.n	8005ab8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005a74:	893b      	ldrh	r3, [r7, #8]
 8005a76:	0a1b      	lsrs	r3, r3, #8
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	b2da      	uxtb	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a84:	6a39      	ldr	r1, [r7, #32]
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 fa9e 	bl	8005fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00d      	beq.n	8005aae <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a96:	2b04      	cmp	r3, #4
 8005a98:	d107      	bne.n	8005aaa <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005aa8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e050      	b.n	8005b50 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005aae:	893b      	ldrh	r3, [r7, #8]
 8005ab0:	b2da      	uxtb	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005aba:	6a39      	ldr	r1, [r7, #32]
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 fa83 	bl	8005fc8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00d      	beq.n	8005ae4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	d107      	bne.n	8005ae0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ade:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e035      	b.n	8005b50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005af2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	2200      	movs	r2, #0
 8005afc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 f947 	bl	8005d94 <I2C_WaitOnFlagUntilTimeout>
 8005b06:	4603      	mov	r3, r0
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00d      	beq.n	8005b28 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b1a:	d103      	bne.n	8005b24 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b22:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e013      	b.n	8005b50 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005b28:	897b      	ldrh	r3, [r7, #10]
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	f043 0301 	orr.w	r3, r3, #1
 8005b30:	b2da      	uxtb	r2, r3
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3a:	6a3a      	ldr	r2, [r7, #32]
 8005b3c:	4906      	ldr	r1, [pc, #24]	@ (8005b58 <I2C_RequestMemoryRead+0x1cc>)
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f000 f9a2 	bl	8005e88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b44:	4603      	mov	r3, r0
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d001      	beq.n	8005b4e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e000      	b.n	8005b50 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3718      	adds	r7, #24
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}
 8005b58:	00010002 	.word	0x00010002

08005b5c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b086      	sub	sp, #24
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b68:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b70:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b78:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005b8e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d003      	beq.n	8005bb0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bac:	2200      	movs	r2, #0
 8005bae:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005bb0:	7cfb      	ldrb	r3, [r7, #19]
 8005bb2:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005bb6:	2b21      	cmp	r3, #33	@ 0x21
 8005bb8:	d007      	beq.n	8005bca <I2C_DMAXferCplt+0x6e>
 8005bba:	7cfb      	ldrb	r3, [r7, #19]
 8005bbc:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8005bc0:	2b22      	cmp	r3, #34	@ 0x22
 8005bc2:	d131      	bne.n	8005c28 <I2C_DMAXferCplt+0xcc>
 8005bc4:	7cbb      	ldrb	r3, [r7, #18]
 8005bc6:	2b20      	cmp	r3, #32
 8005bc8:	d12e      	bne.n	8005c28 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005bd8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005be0:	7cfb      	ldrb	r3, [r7, #19]
 8005be2:	2b29      	cmp	r3, #41	@ 0x29
 8005be4:	d10a      	bne.n	8005bfc <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	2221      	movs	r2, #33	@ 0x21
 8005bea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	2228      	movs	r2, #40	@ 0x28
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005bf4:	6978      	ldr	r0, [r7, #20]
 8005bf6:	f7ff feab 	bl	8005950 <HAL_I2C_SlaveTxCpltCallback>
 8005bfa:	e00c      	b.n	8005c16 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005bfc:	7cfb      	ldrb	r3, [r7, #19]
 8005bfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c00:	d109      	bne.n	8005c16 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	2222      	movs	r2, #34	@ 0x22
 8005c06:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	2228      	movs	r2, #40	@ 0x28
 8005c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c10:	6978      	ldr	r0, [r7, #20]
 8005c12:	f7ff fea7 	bl	8005964 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005c24:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005c26:	e074      	b.n	8005d12 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d06e      	beq.n	8005d12 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d107      	bne.n	8005c4e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c4c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	685a      	ldr	r2, [r3, #4]
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005c5c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005c64:	d009      	beq.n	8005c7a <I2C_DMAXferCplt+0x11e>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b08      	cmp	r3, #8
 8005c6a:	d006      	beq.n	8005c7a <I2C_DMAXferCplt+0x11e>
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005c72:	d002      	beq.n	8005c7a <I2C_DMAXferCplt+0x11e>
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2b20      	cmp	r3, #32
 8005c78:	d107      	bne.n	8005c8a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c88:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005c98:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	685a      	ldr	r2, [r3, #4]
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ca8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	2200      	movs	r2, #0
 8005cae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d003      	beq.n	8005cc0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8005cb8:	6978      	ldr	r0, [r7, #20]
 8005cba:	f7ff fe5d 	bl	8005978 <HAL_I2C_ErrorCallback>
}
 8005cbe:	e028      	b.n	8005d12 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b40      	cmp	r3, #64	@ 0x40
 8005cd2:	d10a      	bne.n	8005cea <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005ce2:	6978      	ldr	r0, [r7, #20]
 8005ce4:	f7fc fcec 	bl	80026c0 <HAL_I2C_MemRxCpltCallback>
}
 8005ce8:	e013      	b.n	8005d12 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2b08      	cmp	r3, #8
 8005cf6:	d002      	beq.n	8005cfe <I2C_DMAXferCplt+0x1a2>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2b20      	cmp	r3, #32
 8005cfc:	d103      	bne.n	8005d06 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	2200      	movs	r2, #0
 8005d02:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d04:	e002      	b.n	8005d0c <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	2212      	movs	r2, #18
 8005d0a:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005d0c:	6978      	ldr	r0, [r7, #20]
 8005d0e:	f7ff fe15 	bl	800593c <HAL_I2C_MasterRxCpltCallback>
}
 8005d12:	bf00      	nop
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b084      	sub	sp, #16
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d003      	beq.n	8005d38 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d34:	2200      	movs	r2, #0
 8005d36:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d44:	2200      	movs	r2, #0
 8005d46:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f7fe fd39 	bl	80047c0 <HAL_DMA_GetError>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d01b      	beq.n	8005d8c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d62:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2200      	movs	r2, #0
 8005d68:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d7e:	f043 0210 	orr.w	r2, r3, #16
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f7ff fdf6 	bl	8005978 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d8c:	bf00      	nop
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}

08005d94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b084      	sub	sp, #16
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	603b      	str	r3, [r7, #0]
 8005da0:	4613      	mov	r3, r2
 8005da2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005da4:	e048      	b.n	8005e38 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dac:	d044      	beq.n	8005e38 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dae:	f7fd fcab 	bl	8003708 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d302      	bcc.n	8005dc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d139      	bne.n	8005e38 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	0c1b      	lsrs	r3, r3, #16
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d10d      	bne.n	8005dea <I2C_WaitOnFlagUntilTimeout+0x56>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	43da      	mvns	r2, r3
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	4013      	ands	r3, r2
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	bf0c      	ite	eq
 8005de0:	2301      	moveq	r3, #1
 8005de2:	2300      	movne	r3, #0
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	461a      	mov	r2, r3
 8005de8:	e00c      	b.n	8005e04 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	43da      	mvns	r2, r3
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	4013      	ands	r3, r2
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	bf0c      	ite	eq
 8005dfc:	2301      	moveq	r3, #1
 8005dfe:	2300      	movne	r3, #0
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	461a      	mov	r2, r3
 8005e04:	79fb      	ldrb	r3, [r7, #7]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d116      	bne.n	8005e38 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2220      	movs	r2, #32
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e24:	f043 0220 	orr.w	r2, r3, #32
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	e023      	b.n	8005e80 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	0c1b      	lsrs	r3, r3, #16
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	d10d      	bne.n	8005e5e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	695b      	ldr	r3, [r3, #20]
 8005e48:	43da      	mvns	r2, r3
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	bf0c      	ite	eq
 8005e54:	2301      	moveq	r3, #1
 8005e56:	2300      	movne	r3, #0
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	e00c      	b.n	8005e78 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	43da      	mvns	r2, r3
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	4013      	ands	r3, r2
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	bf0c      	ite	eq
 8005e70:	2301      	moveq	r3, #1
 8005e72:	2300      	movne	r3, #0
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	461a      	mov	r2, r3
 8005e78:	79fb      	ldrb	r3, [r7, #7]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d093      	beq.n	8005da6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
 8005e94:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e96:	e071      	b.n	8005f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ea6:	d123      	bne.n	8005ef0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005eb6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005ec0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2220      	movs	r2, #32
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005edc:	f043 0204 	orr.w	r2, r3, #4
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e067      	b.n	8005fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ef6:	d041      	beq.n	8005f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ef8:	f7fd fc06 	bl	8003708 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d302      	bcc.n	8005f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d136      	bne.n	8005f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	0c1b      	lsrs	r3, r3, #16
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d10c      	bne.n	8005f32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	695b      	ldr	r3, [r3, #20]
 8005f1e:	43da      	mvns	r2, r3
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	4013      	ands	r3, r2
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	bf14      	ite	ne
 8005f2a:	2301      	movne	r3, #1
 8005f2c:	2300      	moveq	r3, #0
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	e00b      	b.n	8005f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	43da      	mvns	r2, r3
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	bf14      	ite	ne
 8005f44:	2301      	movne	r3, #1
 8005f46:	2300      	moveq	r3, #0
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d016      	beq.n	8005f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2220      	movs	r2, #32
 8005f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f68:	f043 0220 	orr.w	r2, r3, #32
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e021      	b.n	8005fc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	0c1b      	lsrs	r3, r3, #16
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d10c      	bne.n	8005fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	43da      	mvns	r2, r3
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	4013      	ands	r3, r2
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	bf14      	ite	ne
 8005f98:	2301      	movne	r3, #1
 8005f9a:	2300      	moveq	r3, #0
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	e00b      	b.n	8005fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	43da      	mvns	r2, r3
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	4013      	ands	r3, r2
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	bf14      	ite	ne
 8005fb2:	2301      	movne	r3, #1
 8005fb4:	2300      	moveq	r3, #0
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f47f af6d 	bne.w	8005e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005fbe:	2300      	movs	r3, #0
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3710      	adds	r7, #16
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fd4:	e034      	b.n	8006040 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f000 f89b 	bl	8006112 <I2C_IsAcknowledgeFailed>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d001      	beq.n	8005fe6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e034      	b.n	8006050 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fec:	d028      	beq.n	8006040 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fee:	f7fd fb8b 	bl	8003708 <HAL_GetTick>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	1ad3      	subs	r3, r2, r3
 8005ff8:	68ba      	ldr	r2, [r7, #8]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d302      	bcc.n	8006004 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d11d      	bne.n	8006040 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800600e:	2b80      	cmp	r3, #128	@ 0x80
 8006010:	d016      	beq.n	8006040 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2220      	movs	r2, #32
 800601c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2200      	movs	r2, #0
 8006024:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800602c:	f043 0220 	orr.w	r2, r3, #32
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	e007      	b.n	8006050 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800604a:	2b80      	cmp	r3, #128	@ 0x80
 800604c:	d1c3      	bne.n	8005fd6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3710      	adds	r7, #16
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006064:	e049      	b.n	80060fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	695b      	ldr	r3, [r3, #20]
 800606c:	f003 0310 	and.w	r3, r3, #16
 8006070:	2b10      	cmp	r3, #16
 8006072:	d119      	bne.n	80060a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f06f 0210 	mvn.w	r2, #16
 800607c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2200      	movs	r2, #0
 8006082:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2220      	movs	r2, #32
 8006088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e030      	b.n	800610a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060a8:	f7fd fb2e 	bl	8003708 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d302      	bcc.n	80060be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d11d      	bne.n	80060fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	695b      	ldr	r3, [r3, #20]
 80060c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060c8:	2b40      	cmp	r3, #64	@ 0x40
 80060ca:	d016      	beq.n	80060fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2220      	movs	r2, #32
 80060d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e6:	f043 0220 	orr.w	r2, r3, #32
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e007      	b.n	800610a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006104:	2b40      	cmp	r3, #64	@ 0x40
 8006106:	d1ae      	bne.n	8006066 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006112:	b480      	push	{r7}
 8006114:	b083      	sub	sp, #12
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006124:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006128:	d11b      	bne.n	8006162 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006132:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2220      	movs	r2, #32
 800613e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614e:	f043 0204 	orr.w	r2, r3, #4
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e000      	b.n	8006164 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d101      	bne.n	8006182 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e267      	b.n	8006652 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b00      	cmp	r3, #0
 800618c:	d075      	beq.n	800627a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800618e:	4b88      	ldr	r3, [pc, #544]	@ (80063b0 <HAL_RCC_OscConfig+0x240>)
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f003 030c 	and.w	r3, r3, #12
 8006196:	2b04      	cmp	r3, #4
 8006198:	d00c      	beq.n	80061b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800619a:	4b85      	ldr	r3, [pc, #532]	@ (80063b0 <HAL_RCC_OscConfig+0x240>)
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80061a2:	2b08      	cmp	r3, #8
 80061a4:	d112      	bne.n	80061cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061a6:	4b82      	ldr	r3, [pc, #520]	@ (80063b0 <HAL_RCC_OscConfig+0x240>)
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80061b2:	d10b      	bne.n	80061cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061b4:	4b7e      	ldr	r3, [pc, #504]	@ (80063b0 <HAL_RCC_OscConfig+0x240>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d05b      	beq.n	8006278 <HAL_RCC_OscConfig+0x108>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d157      	bne.n	8006278 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e242      	b.n	8006652 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061d4:	d106      	bne.n	80061e4 <HAL_RCC_OscConfig+0x74>
 80061d6:	4b76      	ldr	r3, [pc, #472]	@ (80063b0 <HAL_RCC_OscConfig+0x240>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a75      	ldr	r2, [pc, #468]	@ (80063b0 <HAL_RCC_OscConfig+0x240>)
 80061dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061e0:	6013      	str	r3, [r2, #0]
 80061e2:	e01d      	b.n	8006220 <HAL_RCC_OscConfig+0xb0>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80061ec:	d10c      	bne.n	8006208 <HAL_RCC_OscConfig+0x98>
 80061ee:	4b70      	ldr	r3, [pc, #448]	@ (80063b0 <HAL_RCC_OscConfig+0x240>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a6f      	ldr	r2, [pc, #444]	@ (80063b0 <HAL_RCC_OscConfig+0x240>)
 80061f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80061f8:	6013      	str	r3, [r2, #0]
 80061fa:	4b6d      	ldr	r3, [pc, #436]	@ (80063b0 <HAL_RCC_OscConfig+0x240>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a6c      	ldr	r2, [pc, #432]	@ (80063b0 <HAL_RCC_OscConfig+0x240>)
 8006200:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006204:	6013      	str	r3, [r2, #0]
 8006206:	e00b      	b.n	8006220 <HAL_RCC_OscConfig+0xb0>
 8006208:	4b69      	ldr	r3, [pc, #420]	@ (80063b0 <HAL_RCC_OscConfig+0x240>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a68      	ldr	r2, [pc, #416]	@ (80063b0 <HAL_RCC_OscConfig+0x240>)
 800620e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006212:	6013      	str	r3, [r2, #0]
 8006214:	4b66      	ldr	r3, [pc, #408]	@ (80063b0 <HAL_RCC_OscConfig+0x240>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a65      	ldr	r2, [pc, #404]	@ (80063b0 <HAL_RCC_OscConfig+0x240>)
 800621a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800621e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d013      	beq.n	8006250 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006228:	f7fd fa6e 	bl	8003708 <HAL_GetTick>
 800622c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800622e:	e008      	b.n	8006242 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006230:	f7fd fa6a 	bl	8003708 <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	2b64      	cmp	r3, #100	@ 0x64
 800623c:	d901      	bls.n	8006242 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e207      	b.n	8006652 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006242:	4b5b      	ldr	r3, [pc, #364]	@ (80063b0 <HAL_RCC_OscConfig+0x240>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0f0      	beq.n	8006230 <HAL_RCC_OscConfig+0xc0>
 800624e:	e014      	b.n	800627a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006250:	f7fd fa5a 	bl	8003708 <HAL_GetTick>
 8006254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006256:	e008      	b.n	800626a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006258:	f7fd fa56 	bl	8003708 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	2b64      	cmp	r3, #100	@ 0x64
 8006264:	d901      	bls.n	800626a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e1f3      	b.n	8006652 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800626a:	4b51      	ldr	r3, [pc, #324]	@ (80063b0 <HAL_RCC_OscConfig+0x240>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1f0      	bne.n	8006258 <HAL_RCC_OscConfig+0xe8>
 8006276:	e000      	b.n	800627a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0302 	and.w	r3, r3, #2
 8006282:	2b00      	cmp	r3, #0
 8006284:	d063      	beq.n	800634e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006286:	4b4a      	ldr	r3, [pc, #296]	@ (80063b0 <HAL_RCC_OscConfig+0x240>)
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	f003 030c 	and.w	r3, r3, #12
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00b      	beq.n	80062aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006292:	4b47      	ldr	r3, [pc, #284]	@ (80063b0 <HAL_RCC_OscConfig+0x240>)
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800629a:	2b08      	cmp	r3, #8
 800629c:	d11c      	bne.n	80062d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800629e:	4b44      	ldr	r3, [pc, #272]	@ (80063b0 <HAL_RCC_OscConfig+0x240>)
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d116      	bne.n	80062d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062aa:	4b41      	ldr	r3, [pc, #260]	@ (80063b0 <HAL_RCC_OscConfig+0x240>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0302 	and.w	r3, r3, #2
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d005      	beq.n	80062c2 <HAL_RCC_OscConfig+0x152>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d001      	beq.n	80062c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e1c7      	b.n	8006652 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062c2:	4b3b      	ldr	r3, [pc, #236]	@ (80063b0 <HAL_RCC_OscConfig+0x240>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	00db      	lsls	r3, r3, #3
 80062d0:	4937      	ldr	r1, [pc, #220]	@ (80063b0 <HAL_RCC_OscConfig+0x240>)
 80062d2:	4313      	orrs	r3, r2
 80062d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062d6:	e03a      	b.n	800634e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d020      	beq.n	8006322 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062e0:	4b34      	ldr	r3, [pc, #208]	@ (80063b4 <HAL_RCC_OscConfig+0x244>)
 80062e2:	2201      	movs	r2, #1
 80062e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062e6:	f7fd fa0f 	bl	8003708 <HAL_GetTick>
 80062ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062ec:	e008      	b.n	8006300 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80062ee:	f7fd fa0b 	bl	8003708 <HAL_GetTick>
 80062f2:	4602      	mov	r2, r0
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d901      	bls.n	8006300 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e1a8      	b.n	8006652 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006300:	4b2b      	ldr	r3, [pc, #172]	@ (80063b0 <HAL_RCC_OscConfig+0x240>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0302 	and.w	r3, r3, #2
 8006308:	2b00      	cmp	r3, #0
 800630a:	d0f0      	beq.n	80062ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800630c:	4b28      	ldr	r3, [pc, #160]	@ (80063b0 <HAL_RCC_OscConfig+0x240>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	00db      	lsls	r3, r3, #3
 800631a:	4925      	ldr	r1, [pc, #148]	@ (80063b0 <HAL_RCC_OscConfig+0x240>)
 800631c:	4313      	orrs	r3, r2
 800631e:	600b      	str	r3, [r1, #0]
 8006320:	e015      	b.n	800634e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006322:	4b24      	ldr	r3, [pc, #144]	@ (80063b4 <HAL_RCC_OscConfig+0x244>)
 8006324:	2200      	movs	r2, #0
 8006326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006328:	f7fd f9ee 	bl	8003708 <HAL_GetTick>
 800632c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800632e:	e008      	b.n	8006342 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006330:	f7fd f9ea 	bl	8003708 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	2b02      	cmp	r3, #2
 800633c:	d901      	bls.n	8006342 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e187      	b.n	8006652 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006342:	4b1b      	ldr	r3, [pc, #108]	@ (80063b0 <HAL_RCC_OscConfig+0x240>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0302 	and.w	r3, r3, #2
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1f0      	bne.n	8006330 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 0308 	and.w	r3, r3, #8
 8006356:	2b00      	cmp	r3, #0
 8006358:	d036      	beq.n	80063c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d016      	beq.n	8006390 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006362:	4b15      	ldr	r3, [pc, #84]	@ (80063b8 <HAL_RCC_OscConfig+0x248>)
 8006364:	2201      	movs	r2, #1
 8006366:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006368:	f7fd f9ce 	bl	8003708 <HAL_GetTick>
 800636c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800636e:	e008      	b.n	8006382 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006370:	f7fd f9ca 	bl	8003708 <HAL_GetTick>
 8006374:	4602      	mov	r2, r0
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	1ad3      	subs	r3, r2, r3
 800637a:	2b02      	cmp	r3, #2
 800637c:	d901      	bls.n	8006382 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800637e:	2303      	movs	r3, #3
 8006380:	e167      	b.n	8006652 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006382:	4b0b      	ldr	r3, [pc, #44]	@ (80063b0 <HAL_RCC_OscConfig+0x240>)
 8006384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006386:	f003 0302 	and.w	r3, r3, #2
 800638a:	2b00      	cmp	r3, #0
 800638c:	d0f0      	beq.n	8006370 <HAL_RCC_OscConfig+0x200>
 800638e:	e01b      	b.n	80063c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006390:	4b09      	ldr	r3, [pc, #36]	@ (80063b8 <HAL_RCC_OscConfig+0x248>)
 8006392:	2200      	movs	r2, #0
 8006394:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006396:	f7fd f9b7 	bl	8003708 <HAL_GetTick>
 800639a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800639c:	e00e      	b.n	80063bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800639e:	f7fd f9b3 	bl	8003708 <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d907      	bls.n	80063bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e150      	b.n	8006652 <HAL_RCC_OscConfig+0x4e2>
 80063b0:	40023800 	.word	0x40023800
 80063b4:	42470000 	.word	0x42470000
 80063b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063bc:	4b88      	ldr	r3, [pc, #544]	@ (80065e0 <HAL_RCC_OscConfig+0x470>)
 80063be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063c0:	f003 0302 	and.w	r3, r3, #2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d1ea      	bne.n	800639e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0304 	and.w	r3, r3, #4
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	f000 8097 	beq.w	8006504 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063d6:	2300      	movs	r3, #0
 80063d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063da:	4b81      	ldr	r3, [pc, #516]	@ (80065e0 <HAL_RCC_OscConfig+0x470>)
 80063dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d10f      	bne.n	8006406 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063e6:	2300      	movs	r3, #0
 80063e8:	60bb      	str	r3, [r7, #8]
 80063ea:	4b7d      	ldr	r3, [pc, #500]	@ (80065e0 <HAL_RCC_OscConfig+0x470>)
 80063ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ee:	4a7c      	ldr	r2, [pc, #496]	@ (80065e0 <HAL_RCC_OscConfig+0x470>)
 80063f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80063f6:	4b7a      	ldr	r3, [pc, #488]	@ (80065e0 <HAL_RCC_OscConfig+0x470>)
 80063f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80063fe:	60bb      	str	r3, [r7, #8]
 8006400:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006402:	2301      	movs	r3, #1
 8006404:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006406:	4b77      	ldr	r3, [pc, #476]	@ (80065e4 <HAL_RCC_OscConfig+0x474>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800640e:	2b00      	cmp	r3, #0
 8006410:	d118      	bne.n	8006444 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006412:	4b74      	ldr	r3, [pc, #464]	@ (80065e4 <HAL_RCC_OscConfig+0x474>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a73      	ldr	r2, [pc, #460]	@ (80065e4 <HAL_RCC_OscConfig+0x474>)
 8006418:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800641c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800641e:	f7fd f973 	bl	8003708 <HAL_GetTick>
 8006422:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006424:	e008      	b.n	8006438 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006426:	f7fd f96f 	bl	8003708 <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	2b02      	cmp	r3, #2
 8006432:	d901      	bls.n	8006438 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006434:	2303      	movs	r3, #3
 8006436:	e10c      	b.n	8006652 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006438:	4b6a      	ldr	r3, [pc, #424]	@ (80065e4 <HAL_RCC_OscConfig+0x474>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006440:	2b00      	cmp	r3, #0
 8006442:	d0f0      	beq.n	8006426 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	2b01      	cmp	r3, #1
 800644a:	d106      	bne.n	800645a <HAL_RCC_OscConfig+0x2ea>
 800644c:	4b64      	ldr	r3, [pc, #400]	@ (80065e0 <HAL_RCC_OscConfig+0x470>)
 800644e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006450:	4a63      	ldr	r2, [pc, #396]	@ (80065e0 <HAL_RCC_OscConfig+0x470>)
 8006452:	f043 0301 	orr.w	r3, r3, #1
 8006456:	6713      	str	r3, [r2, #112]	@ 0x70
 8006458:	e01c      	b.n	8006494 <HAL_RCC_OscConfig+0x324>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	2b05      	cmp	r3, #5
 8006460:	d10c      	bne.n	800647c <HAL_RCC_OscConfig+0x30c>
 8006462:	4b5f      	ldr	r3, [pc, #380]	@ (80065e0 <HAL_RCC_OscConfig+0x470>)
 8006464:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006466:	4a5e      	ldr	r2, [pc, #376]	@ (80065e0 <HAL_RCC_OscConfig+0x470>)
 8006468:	f043 0304 	orr.w	r3, r3, #4
 800646c:	6713      	str	r3, [r2, #112]	@ 0x70
 800646e:	4b5c      	ldr	r3, [pc, #368]	@ (80065e0 <HAL_RCC_OscConfig+0x470>)
 8006470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006472:	4a5b      	ldr	r2, [pc, #364]	@ (80065e0 <HAL_RCC_OscConfig+0x470>)
 8006474:	f043 0301 	orr.w	r3, r3, #1
 8006478:	6713      	str	r3, [r2, #112]	@ 0x70
 800647a:	e00b      	b.n	8006494 <HAL_RCC_OscConfig+0x324>
 800647c:	4b58      	ldr	r3, [pc, #352]	@ (80065e0 <HAL_RCC_OscConfig+0x470>)
 800647e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006480:	4a57      	ldr	r2, [pc, #348]	@ (80065e0 <HAL_RCC_OscConfig+0x470>)
 8006482:	f023 0301 	bic.w	r3, r3, #1
 8006486:	6713      	str	r3, [r2, #112]	@ 0x70
 8006488:	4b55      	ldr	r3, [pc, #340]	@ (80065e0 <HAL_RCC_OscConfig+0x470>)
 800648a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800648c:	4a54      	ldr	r2, [pc, #336]	@ (80065e0 <HAL_RCC_OscConfig+0x470>)
 800648e:	f023 0304 	bic.w	r3, r3, #4
 8006492:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d015      	beq.n	80064c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800649c:	f7fd f934 	bl	8003708 <HAL_GetTick>
 80064a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064a2:	e00a      	b.n	80064ba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064a4:	f7fd f930 	bl	8003708 <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e0cb      	b.n	8006652 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064ba:	4b49      	ldr	r3, [pc, #292]	@ (80065e0 <HAL_RCC_OscConfig+0x470>)
 80064bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064be:	f003 0302 	and.w	r3, r3, #2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d0ee      	beq.n	80064a4 <HAL_RCC_OscConfig+0x334>
 80064c6:	e014      	b.n	80064f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064c8:	f7fd f91e 	bl	8003708 <HAL_GetTick>
 80064cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064ce:	e00a      	b.n	80064e6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064d0:	f7fd f91a 	bl	8003708 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064de:	4293      	cmp	r3, r2
 80064e0:	d901      	bls.n	80064e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e0b5      	b.n	8006652 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064e6:	4b3e      	ldr	r3, [pc, #248]	@ (80065e0 <HAL_RCC_OscConfig+0x470>)
 80064e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ea:	f003 0302 	and.w	r3, r3, #2
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1ee      	bne.n	80064d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80064f2:	7dfb      	ldrb	r3, [r7, #23]
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d105      	bne.n	8006504 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064f8:	4b39      	ldr	r3, [pc, #228]	@ (80065e0 <HAL_RCC_OscConfig+0x470>)
 80064fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064fc:	4a38      	ldr	r2, [pc, #224]	@ (80065e0 <HAL_RCC_OscConfig+0x470>)
 80064fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006502:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 80a1 	beq.w	8006650 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800650e:	4b34      	ldr	r3, [pc, #208]	@ (80065e0 <HAL_RCC_OscConfig+0x470>)
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f003 030c 	and.w	r3, r3, #12
 8006516:	2b08      	cmp	r3, #8
 8006518:	d05c      	beq.n	80065d4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	699b      	ldr	r3, [r3, #24]
 800651e:	2b02      	cmp	r3, #2
 8006520:	d141      	bne.n	80065a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006522:	4b31      	ldr	r3, [pc, #196]	@ (80065e8 <HAL_RCC_OscConfig+0x478>)
 8006524:	2200      	movs	r2, #0
 8006526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006528:	f7fd f8ee 	bl	8003708 <HAL_GetTick>
 800652c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800652e:	e008      	b.n	8006542 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006530:	f7fd f8ea 	bl	8003708 <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b02      	cmp	r3, #2
 800653c:	d901      	bls.n	8006542 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e087      	b.n	8006652 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006542:	4b27      	ldr	r3, [pc, #156]	@ (80065e0 <HAL_RCC_OscConfig+0x470>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1f0      	bne.n	8006530 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	69da      	ldr	r2, [r3, #28]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	431a      	orrs	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800655c:	019b      	lsls	r3, r3, #6
 800655e:	431a      	orrs	r2, r3
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006564:	085b      	lsrs	r3, r3, #1
 8006566:	3b01      	subs	r3, #1
 8006568:	041b      	lsls	r3, r3, #16
 800656a:	431a      	orrs	r2, r3
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006570:	061b      	lsls	r3, r3, #24
 8006572:	491b      	ldr	r1, [pc, #108]	@ (80065e0 <HAL_RCC_OscConfig+0x470>)
 8006574:	4313      	orrs	r3, r2
 8006576:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006578:	4b1b      	ldr	r3, [pc, #108]	@ (80065e8 <HAL_RCC_OscConfig+0x478>)
 800657a:	2201      	movs	r2, #1
 800657c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800657e:	f7fd f8c3 	bl	8003708 <HAL_GetTick>
 8006582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006584:	e008      	b.n	8006598 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006586:	f7fd f8bf 	bl	8003708 <HAL_GetTick>
 800658a:	4602      	mov	r2, r0
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	1ad3      	subs	r3, r2, r3
 8006590:	2b02      	cmp	r3, #2
 8006592:	d901      	bls.n	8006598 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e05c      	b.n	8006652 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006598:	4b11      	ldr	r3, [pc, #68]	@ (80065e0 <HAL_RCC_OscConfig+0x470>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d0f0      	beq.n	8006586 <HAL_RCC_OscConfig+0x416>
 80065a4:	e054      	b.n	8006650 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065a6:	4b10      	ldr	r3, [pc, #64]	@ (80065e8 <HAL_RCC_OscConfig+0x478>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065ac:	f7fd f8ac 	bl	8003708 <HAL_GetTick>
 80065b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065b2:	e008      	b.n	80065c6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065b4:	f7fd f8a8 	bl	8003708 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d901      	bls.n	80065c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80065c2:	2303      	movs	r3, #3
 80065c4:	e045      	b.n	8006652 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065c6:	4b06      	ldr	r3, [pc, #24]	@ (80065e0 <HAL_RCC_OscConfig+0x470>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1f0      	bne.n	80065b4 <HAL_RCC_OscConfig+0x444>
 80065d2:	e03d      	b.n	8006650 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	699b      	ldr	r3, [r3, #24]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d107      	bne.n	80065ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e038      	b.n	8006652 <HAL_RCC_OscConfig+0x4e2>
 80065e0:	40023800 	.word	0x40023800
 80065e4:	40007000 	.word	0x40007000
 80065e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80065ec:	4b1b      	ldr	r3, [pc, #108]	@ (800665c <HAL_RCC_OscConfig+0x4ec>)
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d028      	beq.n	800664c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006604:	429a      	cmp	r2, r3
 8006606:	d121      	bne.n	800664c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006612:	429a      	cmp	r2, r3
 8006614:	d11a      	bne.n	800664c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800661c:	4013      	ands	r3, r2
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006622:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006624:	4293      	cmp	r3, r2
 8006626:	d111      	bne.n	800664c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006632:	085b      	lsrs	r3, r3, #1
 8006634:	3b01      	subs	r3, #1
 8006636:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006638:	429a      	cmp	r2, r3
 800663a:	d107      	bne.n	800664c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006646:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006648:	429a      	cmp	r2, r3
 800664a:	d001      	beq.n	8006650 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e000      	b.n	8006652 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3718      	adds	r7, #24
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	40023800 	.word	0x40023800

08006660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e0cc      	b.n	800680e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006674:	4b68      	ldr	r3, [pc, #416]	@ (8006818 <HAL_RCC_ClockConfig+0x1b8>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0307 	and.w	r3, r3, #7
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	429a      	cmp	r2, r3
 8006680:	d90c      	bls.n	800669c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006682:	4b65      	ldr	r3, [pc, #404]	@ (8006818 <HAL_RCC_ClockConfig+0x1b8>)
 8006684:	683a      	ldr	r2, [r7, #0]
 8006686:	b2d2      	uxtb	r2, r2
 8006688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800668a:	4b63      	ldr	r3, [pc, #396]	@ (8006818 <HAL_RCC_ClockConfig+0x1b8>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 0307 	and.w	r3, r3, #7
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	429a      	cmp	r2, r3
 8006696:	d001      	beq.n	800669c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e0b8      	b.n	800680e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0302 	and.w	r3, r3, #2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d020      	beq.n	80066ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0304 	and.w	r3, r3, #4
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d005      	beq.n	80066c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066b4:	4b59      	ldr	r3, [pc, #356]	@ (800681c <HAL_RCC_ClockConfig+0x1bc>)
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	4a58      	ldr	r2, [pc, #352]	@ (800681c <HAL_RCC_ClockConfig+0x1bc>)
 80066ba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80066be:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0308 	and.w	r3, r3, #8
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d005      	beq.n	80066d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066cc:	4b53      	ldr	r3, [pc, #332]	@ (800681c <HAL_RCC_ClockConfig+0x1bc>)
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	4a52      	ldr	r2, [pc, #328]	@ (800681c <HAL_RCC_ClockConfig+0x1bc>)
 80066d2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80066d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066d8:	4b50      	ldr	r3, [pc, #320]	@ (800681c <HAL_RCC_ClockConfig+0x1bc>)
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	494d      	ldr	r1, [pc, #308]	@ (800681c <HAL_RCC_ClockConfig+0x1bc>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0301 	and.w	r3, r3, #1
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d044      	beq.n	8006780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d107      	bne.n	800670e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066fe:	4b47      	ldr	r3, [pc, #284]	@ (800681c <HAL_RCC_ClockConfig+0x1bc>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d119      	bne.n	800673e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e07f      	b.n	800680e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	2b02      	cmp	r3, #2
 8006714:	d003      	beq.n	800671e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800671a:	2b03      	cmp	r3, #3
 800671c:	d107      	bne.n	800672e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800671e:	4b3f      	ldr	r3, [pc, #252]	@ (800681c <HAL_RCC_ClockConfig+0x1bc>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006726:	2b00      	cmp	r3, #0
 8006728:	d109      	bne.n	800673e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e06f      	b.n	800680e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800672e:	4b3b      	ldr	r3, [pc, #236]	@ (800681c <HAL_RCC_ClockConfig+0x1bc>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0302 	and.w	r3, r3, #2
 8006736:	2b00      	cmp	r3, #0
 8006738:	d101      	bne.n	800673e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e067      	b.n	800680e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800673e:	4b37      	ldr	r3, [pc, #220]	@ (800681c <HAL_RCC_ClockConfig+0x1bc>)
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f023 0203 	bic.w	r2, r3, #3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	4934      	ldr	r1, [pc, #208]	@ (800681c <HAL_RCC_ClockConfig+0x1bc>)
 800674c:	4313      	orrs	r3, r2
 800674e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006750:	f7fc ffda 	bl	8003708 <HAL_GetTick>
 8006754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006756:	e00a      	b.n	800676e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006758:	f7fc ffd6 	bl	8003708 <HAL_GetTick>
 800675c:	4602      	mov	r2, r0
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006766:	4293      	cmp	r3, r2
 8006768:	d901      	bls.n	800676e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e04f      	b.n	800680e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800676e:	4b2b      	ldr	r3, [pc, #172]	@ (800681c <HAL_RCC_ClockConfig+0x1bc>)
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f003 020c 	and.w	r2, r3, #12
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	429a      	cmp	r2, r3
 800677e:	d1eb      	bne.n	8006758 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006780:	4b25      	ldr	r3, [pc, #148]	@ (8006818 <HAL_RCC_ClockConfig+0x1b8>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 0307 	and.w	r3, r3, #7
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	429a      	cmp	r2, r3
 800678c:	d20c      	bcs.n	80067a8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800678e:	4b22      	ldr	r3, [pc, #136]	@ (8006818 <HAL_RCC_ClockConfig+0x1b8>)
 8006790:	683a      	ldr	r2, [r7, #0]
 8006792:	b2d2      	uxtb	r2, r2
 8006794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006796:	4b20      	ldr	r3, [pc, #128]	@ (8006818 <HAL_RCC_ClockConfig+0x1b8>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0307 	and.w	r3, r3, #7
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d001      	beq.n	80067a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	e032      	b.n	800680e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0304 	and.w	r3, r3, #4
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d008      	beq.n	80067c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067b4:	4b19      	ldr	r3, [pc, #100]	@ (800681c <HAL_RCC_ClockConfig+0x1bc>)
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	4916      	ldr	r1, [pc, #88]	@ (800681c <HAL_RCC_ClockConfig+0x1bc>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0308 	and.w	r3, r3, #8
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d009      	beq.n	80067e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067d2:	4b12      	ldr	r3, [pc, #72]	@ (800681c <HAL_RCC_ClockConfig+0x1bc>)
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	00db      	lsls	r3, r3, #3
 80067e0:	490e      	ldr	r1, [pc, #56]	@ (800681c <HAL_RCC_ClockConfig+0x1bc>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80067e6:	f000 f821 	bl	800682c <HAL_RCC_GetSysClockFreq>
 80067ea:	4602      	mov	r2, r0
 80067ec:	4b0b      	ldr	r3, [pc, #44]	@ (800681c <HAL_RCC_ClockConfig+0x1bc>)
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	091b      	lsrs	r3, r3, #4
 80067f2:	f003 030f 	and.w	r3, r3, #15
 80067f6:	490a      	ldr	r1, [pc, #40]	@ (8006820 <HAL_RCC_ClockConfig+0x1c0>)
 80067f8:	5ccb      	ldrb	r3, [r1, r3]
 80067fa:	fa22 f303 	lsr.w	r3, r2, r3
 80067fe:	4a09      	ldr	r2, [pc, #36]	@ (8006824 <HAL_RCC_ClockConfig+0x1c4>)
 8006800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006802:	4b09      	ldr	r3, [pc, #36]	@ (8006828 <HAL_RCC_ClockConfig+0x1c8>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4618      	mov	r0, r3
 8006808:	f7fc ff3a 	bl	8003680 <HAL_InitTick>

  return HAL_OK;
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	3710      	adds	r7, #16
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	40023c00 	.word	0x40023c00
 800681c:	40023800 	.word	0x40023800
 8006820:	0800d6f4 	.word	0x0800d6f4
 8006824:	20000084 	.word	0x20000084
 8006828:	20000088 	.word	0x20000088

0800682c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800682c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006830:	b090      	sub	sp, #64	@ 0x40
 8006832:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006834:	2300      	movs	r3, #0
 8006836:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800683c:	2300      	movs	r3, #0
 800683e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006840:	2300      	movs	r3, #0
 8006842:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006844:	4b59      	ldr	r3, [pc, #356]	@ (80069ac <HAL_RCC_GetSysClockFreq+0x180>)
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f003 030c 	and.w	r3, r3, #12
 800684c:	2b08      	cmp	r3, #8
 800684e:	d00d      	beq.n	800686c <HAL_RCC_GetSysClockFreq+0x40>
 8006850:	2b08      	cmp	r3, #8
 8006852:	f200 80a1 	bhi.w	8006998 <HAL_RCC_GetSysClockFreq+0x16c>
 8006856:	2b00      	cmp	r3, #0
 8006858:	d002      	beq.n	8006860 <HAL_RCC_GetSysClockFreq+0x34>
 800685a:	2b04      	cmp	r3, #4
 800685c:	d003      	beq.n	8006866 <HAL_RCC_GetSysClockFreq+0x3a>
 800685e:	e09b      	b.n	8006998 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006860:	4b53      	ldr	r3, [pc, #332]	@ (80069b0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006862:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006864:	e09b      	b.n	800699e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006866:	4b53      	ldr	r3, [pc, #332]	@ (80069b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006868:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800686a:	e098      	b.n	800699e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800686c:	4b4f      	ldr	r3, [pc, #316]	@ (80069ac <HAL_RCC_GetSysClockFreq+0x180>)
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006874:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006876:	4b4d      	ldr	r3, [pc, #308]	@ (80069ac <HAL_RCC_GetSysClockFreq+0x180>)
 8006878:	685b      	ldr	r3, [r3, #4]
 800687a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d028      	beq.n	80068d4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006882:	4b4a      	ldr	r3, [pc, #296]	@ (80069ac <HAL_RCC_GetSysClockFreq+0x180>)
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	099b      	lsrs	r3, r3, #6
 8006888:	2200      	movs	r2, #0
 800688a:	623b      	str	r3, [r7, #32]
 800688c:	627a      	str	r2, [r7, #36]	@ 0x24
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006894:	2100      	movs	r1, #0
 8006896:	4b47      	ldr	r3, [pc, #284]	@ (80069b4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006898:	fb03 f201 	mul.w	r2, r3, r1
 800689c:	2300      	movs	r3, #0
 800689e:	fb00 f303 	mul.w	r3, r0, r3
 80068a2:	4413      	add	r3, r2
 80068a4:	4a43      	ldr	r2, [pc, #268]	@ (80069b4 <HAL_RCC_GetSysClockFreq+0x188>)
 80068a6:	fba0 1202 	umull	r1, r2, r0, r2
 80068aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068ac:	460a      	mov	r2, r1
 80068ae:	62ba      	str	r2, [r7, #40]	@ 0x28
 80068b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068b2:	4413      	add	r3, r2
 80068b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068b8:	2200      	movs	r2, #0
 80068ba:	61bb      	str	r3, [r7, #24]
 80068bc:	61fa      	str	r2, [r7, #28]
 80068be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068c2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80068c6:	f7fa f9f7 	bl	8000cb8 <__aeabi_uldivmod>
 80068ca:	4602      	mov	r2, r0
 80068cc:	460b      	mov	r3, r1
 80068ce:	4613      	mov	r3, r2
 80068d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068d2:	e053      	b.n	800697c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068d4:	4b35      	ldr	r3, [pc, #212]	@ (80069ac <HAL_RCC_GetSysClockFreq+0x180>)
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	099b      	lsrs	r3, r3, #6
 80068da:	2200      	movs	r2, #0
 80068dc:	613b      	str	r3, [r7, #16]
 80068de:	617a      	str	r2, [r7, #20]
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80068e6:	f04f 0b00 	mov.w	fp, #0
 80068ea:	4652      	mov	r2, sl
 80068ec:	465b      	mov	r3, fp
 80068ee:	f04f 0000 	mov.w	r0, #0
 80068f2:	f04f 0100 	mov.w	r1, #0
 80068f6:	0159      	lsls	r1, r3, #5
 80068f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068fc:	0150      	lsls	r0, r2, #5
 80068fe:	4602      	mov	r2, r0
 8006900:	460b      	mov	r3, r1
 8006902:	ebb2 080a 	subs.w	r8, r2, sl
 8006906:	eb63 090b 	sbc.w	r9, r3, fp
 800690a:	f04f 0200 	mov.w	r2, #0
 800690e:	f04f 0300 	mov.w	r3, #0
 8006912:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006916:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800691a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800691e:	ebb2 0408 	subs.w	r4, r2, r8
 8006922:	eb63 0509 	sbc.w	r5, r3, r9
 8006926:	f04f 0200 	mov.w	r2, #0
 800692a:	f04f 0300 	mov.w	r3, #0
 800692e:	00eb      	lsls	r3, r5, #3
 8006930:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006934:	00e2      	lsls	r2, r4, #3
 8006936:	4614      	mov	r4, r2
 8006938:	461d      	mov	r5, r3
 800693a:	eb14 030a 	adds.w	r3, r4, sl
 800693e:	603b      	str	r3, [r7, #0]
 8006940:	eb45 030b 	adc.w	r3, r5, fp
 8006944:	607b      	str	r3, [r7, #4]
 8006946:	f04f 0200 	mov.w	r2, #0
 800694a:	f04f 0300 	mov.w	r3, #0
 800694e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006952:	4629      	mov	r1, r5
 8006954:	028b      	lsls	r3, r1, #10
 8006956:	4621      	mov	r1, r4
 8006958:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800695c:	4621      	mov	r1, r4
 800695e:	028a      	lsls	r2, r1, #10
 8006960:	4610      	mov	r0, r2
 8006962:	4619      	mov	r1, r3
 8006964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006966:	2200      	movs	r2, #0
 8006968:	60bb      	str	r3, [r7, #8]
 800696a:	60fa      	str	r2, [r7, #12]
 800696c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006970:	f7fa f9a2 	bl	8000cb8 <__aeabi_uldivmod>
 8006974:	4602      	mov	r2, r0
 8006976:	460b      	mov	r3, r1
 8006978:	4613      	mov	r3, r2
 800697a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800697c:	4b0b      	ldr	r3, [pc, #44]	@ (80069ac <HAL_RCC_GetSysClockFreq+0x180>)
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	0c1b      	lsrs	r3, r3, #16
 8006982:	f003 0303 	and.w	r3, r3, #3
 8006986:	3301      	adds	r3, #1
 8006988:	005b      	lsls	r3, r3, #1
 800698a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800698c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800698e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006990:	fbb2 f3f3 	udiv	r3, r2, r3
 8006994:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006996:	e002      	b.n	800699e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006998:	4b05      	ldr	r3, [pc, #20]	@ (80069b0 <HAL_RCC_GetSysClockFreq+0x184>)
 800699a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800699c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800699e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3740      	adds	r7, #64	@ 0x40
 80069a4:	46bd      	mov	sp, r7
 80069a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069aa:	bf00      	nop
 80069ac:	40023800 	.word	0x40023800
 80069b0:	00f42400 	.word	0x00f42400
 80069b4:	017d7840 	.word	0x017d7840

080069b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069b8:	b480      	push	{r7}
 80069ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069bc:	4b03      	ldr	r3, [pc, #12]	@ (80069cc <HAL_RCC_GetHCLKFreq+0x14>)
 80069be:	681b      	ldr	r3, [r3, #0]
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	20000084 	.word	0x20000084

080069d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80069d4:	f7ff fff0 	bl	80069b8 <HAL_RCC_GetHCLKFreq>
 80069d8:	4602      	mov	r2, r0
 80069da:	4b05      	ldr	r3, [pc, #20]	@ (80069f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	0a9b      	lsrs	r3, r3, #10
 80069e0:	f003 0307 	and.w	r3, r3, #7
 80069e4:	4903      	ldr	r1, [pc, #12]	@ (80069f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069e6:	5ccb      	ldrb	r3, [r1, r3]
 80069e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	40023800 	.word	0x40023800
 80069f4:	0800d704 	.word	0x0800d704

080069f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80069fc:	f7ff ffdc 	bl	80069b8 <HAL_RCC_GetHCLKFreq>
 8006a00:	4602      	mov	r2, r0
 8006a02:	4b05      	ldr	r3, [pc, #20]	@ (8006a18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	0b5b      	lsrs	r3, r3, #13
 8006a08:	f003 0307 	and.w	r3, r3, #7
 8006a0c:	4903      	ldr	r1, [pc, #12]	@ (8006a1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a0e:	5ccb      	ldrb	r3, [r1, r3]
 8006a10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	40023800 	.word	0x40023800
 8006a1c:	0800d704 	.word	0x0800d704

08006a20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d001      	beq.n	8006a38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e044      	b.n	8006ac2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68da      	ldr	r2, [r3, #12]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f042 0201 	orr.w	r2, r2, #1
 8006a4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a1e      	ldr	r2, [pc, #120]	@ (8006ad0 <HAL_TIM_Base_Start_IT+0xb0>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d018      	beq.n	8006a8c <HAL_TIM_Base_Start_IT+0x6c>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a62:	d013      	beq.n	8006a8c <HAL_TIM_Base_Start_IT+0x6c>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a1a      	ldr	r2, [pc, #104]	@ (8006ad4 <HAL_TIM_Base_Start_IT+0xb4>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d00e      	beq.n	8006a8c <HAL_TIM_Base_Start_IT+0x6c>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a19      	ldr	r2, [pc, #100]	@ (8006ad8 <HAL_TIM_Base_Start_IT+0xb8>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d009      	beq.n	8006a8c <HAL_TIM_Base_Start_IT+0x6c>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a17      	ldr	r2, [pc, #92]	@ (8006adc <HAL_TIM_Base_Start_IT+0xbc>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d004      	beq.n	8006a8c <HAL_TIM_Base_Start_IT+0x6c>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a16      	ldr	r2, [pc, #88]	@ (8006ae0 <HAL_TIM_Base_Start_IT+0xc0>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d111      	bne.n	8006ab0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f003 0307 	and.w	r3, r3, #7
 8006a96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2b06      	cmp	r3, #6
 8006a9c:	d010      	beq.n	8006ac0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f042 0201 	orr.w	r2, r2, #1
 8006aac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aae:	e007      	b.n	8006ac0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f042 0201 	orr.w	r2, r2, #1
 8006abe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	40010000 	.word	0x40010000
 8006ad4:	40000400 	.word	0x40000400
 8006ad8:	40000800 	.word	0x40000800
 8006adc:	40000c00 	.word	0x40000c00
 8006ae0:	40014000 	.word	0x40014000

08006ae4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e041      	b.n	8006b7a <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d106      	bne.n	8006b10 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f7fc faae 	bl	800306c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2202      	movs	r2, #2
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	3304      	adds	r3, #4
 8006b20:	4619      	mov	r1, r3
 8006b22:	4610      	mov	r0, r2
 8006b24:	f000 fb62 	bl	80071ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2201      	movs	r2, #1
 8006b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b78:	2300      	movs	r3, #0
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3708      	adds	r7, #8
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}

08006b82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b082      	sub	sp, #8
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e041      	b.n	8006c18 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d106      	bne.n	8006bae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f7fc fa29 	bl	8003000 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2202      	movs	r2, #2
 8006bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	3304      	adds	r3, #4
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	4610      	mov	r0, r2
 8006bc2:	f000 fb13 	bl	80071ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3708      	adds	r7, #8
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d109      	bne.n	8006c44 <HAL_TIM_PWM_Start+0x24>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	bf14      	ite	ne
 8006c3c:	2301      	movne	r3, #1
 8006c3e:	2300      	moveq	r3, #0
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	e022      	b.n	8006c8a <HAL_TIM_PWM_Start+0x6a>
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	2b04      	cmp	r3, #4
 8006c48:	d109      	bne.n	8006c5e <HAL_TIM_PWM_Start+0x3e>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	bf14      	ite	ne
 8006c56:	2301      	movne	r3, #1
 8006c58:	2300      	moveq	r3, #0
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	e015      	b.n	8006c8a <HAL_TIM_PWM_Start+0x6a>
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	2b08      	cmp	r3, #8
 8006c62:	d109      	bne.n	8006c78 <HAL_TIM_PWM_Start+0x58>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	bf14      	ite	ne
 8006c70:	2301      	movne	r3, #1
 8006c72:	2300      	moveq	r3, #0
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	e008      	b.n	8006c8a <HAL_TIM_PWM_Start+0x6a>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	bf14      	ite	ne
 8006c84:	2301      	movne	r3, #1
 8006c86:	2300      	moveq	r3, #0
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e068      	b.n	8006d64 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d104      	bne.n	8006ca2 <HAL_TIM_PWM_Start+0x82>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ca0:	e013      	b.n	8006cca <HAL_TIM_PWM_Start+0xaa>
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	2b04      	cmp	r3, #4
 8006ca6:	d104      	bne.n	8006cb2 <HAL_TIM_PWM_Start+0x92>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2202      	movs	r2, #2
 8006cac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006cb0:	e00b      	b.n	8006cca <HAL_TIM_PWM_Start+0xaa>
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	2b08      	cmp	r3, #8
 8006cb6:	d104      	bne.n	8006cc2 <HAL_TIM_PWM_Start+0xa2>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2202      	movs	r2, #2
 8006cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006cc0:	e003      	b.n	8006cca <HAL_TIM_PWM_Start+0xaa>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	6839      	ldr	r1, [r7, #0]
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f000 fca2 	bl	800761c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a23      	ldr	r2, [pc, #140]	@ (8006d6c <HAL_TIM_PWM_Start+0x14c>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d107      	bne.n	8006cf2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006cf0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a1d      	ldr	r2, [pc, #116]	@ (8006d6c <HAL_TIM_PWM_Start+0x14c>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d018      	beq.n	8006d2e <HAL_TIM_PWM_Start+0x10e>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d04:	d013      	beq.n	8006d2e <HAL_TIM_PWM_Start+0x10e>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a19      	ldr	r2, [pc, #100]	@ (8006d70 <HAL_TIM_PWM_Start+0x150>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d00e      	beq.n	8006d2e <HAL_TIM_PWM_Start+0x10e>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a17      	ldr	r2, [pc, #92]	@ (8006d74 <HAL_TIM_PWM_Start+0x154>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d009      	beq.n	8006d2e <HAL_TIM_PWM_Start+0x10e>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a16      	ldr	r2, [pc, #88]	@ (8006d78 <HAL_TIM_PWM_Start+0x158>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d004      	beq.n	8006d2e <HAL_TIM_PWM_Start+0x10e>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a14      	ldr	r2, [pc, #80]	@ (8006d7c <HAL_TIM_PWM_Start+0x15c>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d111      	bne.n	8006d52 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f003 0307 	and.w	r3, r3, #7
 8006d38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b06      	cmp	r3, #6
 8006d3e:	d010      	beq.n	8006d62 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681a      	ldr	r2, [r3, #0]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f042 0201 	orr.w	r2, r2, #1
 8006d4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d50:	e007      	b.n	8006d62 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f042 0201 	orr.w	r2, r2, #1
 8006d60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	40010000 	.word	0x40010000
 8006d70:	40000400 	.word	0x40000400
 8006d74:	40000800 	.word	0x40000800
 8006d78:	40000c00 	.word	0x40000c00
 8006d7c:	40014000 	.word	0x40014000

08006d80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d020      	beq.n	8006de4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f003 0302 	and.w	r3, r3, #2
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d01b      	beq.n	8006de4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f06f 0202 	mvn.w	r2, #2
 8006db4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2201      	movs	r2, #1
 8006dba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	f003 0303 	and.w	r3, r3, #3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d003      	beq.n	8006dd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 f9f0 	bl	80071b0 <HAL_TIM_IC_CaptureCallback>
 8006dd0:	e005      	b.n	8006dde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f9e2 	bl	800719c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f9f3 	bl	80071c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	f003 0304 	and.w	r3, r3, #4
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d020      	beq.n	8006e30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f003 0304 	and.w	r3, r3, #4
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d01b      	beq.n	8006e30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f06f 0204 	mvn.w	r2, #4
 8006e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2202      	movs	r2, #2
 8006e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	699b      	ldr	r3, [r3, #24]
 8006e0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d003      	beq.n	8006e1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 f9ca 	bl	80071b0 <HAL_TIM_IC_CaptureCallback>
 8006e1c:	e005      	b.n	8006e2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 f9bc 	bl	800719c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f9cd 	bl	80071c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	f003 0308 	and.w	r3, r3, #8
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d020      	beq.n	8006e7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f003 0308 	and.w	r3, r3, #8
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d01b      	beq.n	8006e7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f06f 0208 	mvn.w	r2, #8
 8006e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2204      	movs	r2, #4
 8006e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	f003 0303 	and.w	r3, r3, #3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d003      	beq.n	8006e6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f9a4 	bl	80071b0 <HAL_TIM_IC_CaptureCallback>
 8006e68:	e005      	b.n	8006e76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 f996 	bl	800719c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f9a7 	bl	80071c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	f003 0310 	and.w	r3, r3, #16
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d020      	beq.n	8006ec8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f003 0310 	and.w	r3, r3, #16
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d01b      	beq.n	8006ec8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f06f 0210 	mvn.w	r2, #16
 8006e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2208      	movs	r2, #8
 8006e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d003      	beq.n	8006eb6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f97e 	bl	80071b0 <HAL_TIM_IC_CaptureCallback>
 8006eb4:	e005      	b.n	8006ec2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 f970 	bl	800719c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f981 	bl	80071c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d00c      	beq.n	8006eec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f003 0301 	and.w	r3, r3, #1
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d007      	beq.n	8006eec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f06f 0201 	mvn.w	r2, #1
 8006ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7fb fc14 	bl	8002714 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00c      	beq.n	8006f10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d007      	beq.n	8006f10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fc24 	bl	8007758 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00c      	beq.n	8006f34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d007      	beq.n	8006f34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f952 	bl	80071d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	f003 0320 	and.w	r3, r3, #32
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00c      	beq.n	8006f58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f003 0320 	and.w	r3, r3, #32
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d007      	beq.n	8006f58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f06f 0220 	mvn.w	r2, #32
 8006f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fbf6 	bl	8007744 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006f58:	bf00      	nop
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d101      	bne.n	8006f7e <HAL_TIM_OC_ConfigChannel+0x1e>
 8006f7a:	2302      	movs	r3, #2
 8006f7c:	e048      	b.n	8007010 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	2201      	movs	r2, #1
 8006f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2b0c      	cmp	r3, #12
 8006f8a:	d839      	bhi.n	8007000 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006f8c:	a201      	add	r2, pc, #4	@ (adr r2, 8006f94 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f92:	bf00      	nop
 8006f94:	08006fc9 	.word	0x08006fc9
 8006f98:	08007001 	.word	0x08007001
 8006f9c:	08007001 	.word	0x08007001
 8006fa0:	08007001 	.word	0x08007001
 8006fa4:	08006fd7 	.word	0x08006fd7
 8006fa8:	08007001 	.word	0x08007001
 8006fac:	08007001 	.word	0x08007001
 8006fb0:	08007001 	.word	0x08007001
 8006fb4:	08006fe5 	.word	0x08006fe5
 8006fb8:	08007001 	.word	0x08007001
 8006fbc:	08007001 	.word	0x08007001
 8006fc0:	08007001 	.word	0x08007001
 8006fc4:	08006ff3 	.word	0x08006ff3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68b9      	ldr	r1, [r7, #8]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 f998 	bl	8007304 <TIM_OC1_SetConfig>
      break;
 8006fd4:	e017      	b.n	8007006 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68b9      	ldr	r1, [r7, #8]
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f000 f9f7 	bl	80073d0 <TIM_OC2_SetConfig>
      break;
 8006fe2:	e010      	b.n	8007006 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	68b9      	ldr	r1, [r7, #8]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 fa5c 	bl	80074a8 <TIM_OC3_SetConfig>
      break;
 8006ff0:	e009      	b.n	8007006 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68b9      	ldr	r1, [r7, #8]
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f000 fabf 	bl	800757c <TIM_OC4_SetConfig>
      break;
 8006ffe:	e002      	b.n	8007006 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	75fb      	strb	r3, [r7, #23]
      break;
 8007004:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800700e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007010:	4618      	mov	r0, r3
 8007012:	3718      	adds	r7, #24
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007024:	2300      	movs	r3, #0
 8007026:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800702e:	2b01      	cmp	r3, #1
 8007030:	d101      	bne.n	8007036 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007032:	2302      	movs	r3, #2
 8007034:	e0ae      	b.n	8007194 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2b0c      	cmp	r3, #12
 8007042:	f200 809f 	bhi.w	8007184 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007046:	a201      	add	r2, pc, #4	@ (adr r2, 800704c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704c:	08007081 	.word	0x08007081
 8007050:	08007185 	.word	0x08007185
 8007054:	08007185 	.word	0x08007185
 8007058:	08007185 	.word	0x08007185
 800705c:	080070c1 	.word	0x080070c1
 8007060:	08007185 	.word	0x08007185
 8007064:	08007185 	.word	0x08007185
 8007068:	08007185 	.word	0x08007185
 800706c:	08007103 	.word	0x08007103
 8007070:	08007185 	.word	0x08007185
 8007074:	08007185 	.word	0x08007185
 8007078:	08007185 	.word	0x08007185
 800707c:	08007143 	.word	0x08007143
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68b9      	ldr	r1, [r7, #8]
 8007086:	4618      	mov	r0, r3
 8007088:	f000 f93c 	bl	8007304 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	699a      	ldr	r2, [r3, #24]
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f042 0208 	orr.w	r2, r2, #8
 800709a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	699a      	ldr	r2, [r3, #24]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f022 0204 	bic.w	r2, r2, #4
 80070aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	6999      	ldr	r1, [r3, #24]
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	691a      	ldr	r2, [r3, #16]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	430a      	orrs	r2, r1
 80070bc:	619a      	str	r2, [r3, #24]
      break;
 80070be:	e064      	b.n	800718a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	68b9      	ldr	r1, [r7, #8]
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 f982 	bl	80073d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	699a      	ldr	r2, [r3, #24]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80070da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	699a      	ldr	r2, [r3, #24]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6999      	ldr	r1, [r3, #24]
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	691b      	ldr	r3, [r3, #16]
 80070f6:	021a      	lsls	r2, r3, #8
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	430a      	orrs	r2, r1
 80070fe:	619a      	str	r2, [r3, #24]
      break;
 8007100:	e043      	b.n	800718a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68b9      	ldr	r1, [r7, #8]
 8007108:	4618      	mov	r0, r3
 800710a:	f000 f9cd 	bl	80074a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	69da      	ldr	r2, [r3, #28]
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f042 0208 	orr.w	r2, r2, #8
 800711c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	69da      	ldr	r2, [r3, #28]
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f022 0204 	bic.w	r2, r2, #4
 800712c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	69d9      	ldr	r1, [r3, #28]
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	691a      	ldr	r2, [r3, #16]
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	430a      	orrs	r2, r1
 800713e:	61da      	str	r2, [r3, #28]
      break;
 8007140:	e023      	b.n	800718a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	68b9      	ldr	r1, [r7, #8]
 8007148:	4618      	mov	r0, r3
 800714a:	f000 fa17 	bl	800757c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	69da      	ldr	r2, [r3, #28]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800715c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	69da      	ldr	r2, [r3, #28]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800716c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	69d9      	ldr	r1, [r3, #28]
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	021a      	lsls	r2, r3, #8
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	61da      	str	r2, [r3, #28]
      break;
 8007182:	e002      	b.n	800718a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	75fb      	strb	r3, [r7, #23]
      break;
 8007188:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007192:	7dfb      	ldrb	r3, [r7, #23]
}
 8007194:	4618      	mov	r0, r3
 8007196:	3718      	adds	r7, #24
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80071b8:	bf00      	nop
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	4a3a      	ldr	r2, [pc, #232]	@ (80072e8 <TIM_Base_SetConfig+0xfc>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d00f      	beq.n	8007224 <TIM_Base_SetConfig+0x38>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800720a:	d00b      	beq.n	8007224 <TIM_Base_SetConfig+0x38>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	4a37      	ldr	r2, [pc, #220]	@ (80072ec <TIM_Base_SetConfig+0x100>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d007      	beq.n	8007224 <TIM_Base_SetConfig+0x38>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	4a36      	ldr	r2, [pc, #216]	@ (80072f0 <TIM_Base_SetConfig+0x104>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d003      	beq.n	8007224 <TIM_Base_SetConfig+0x38>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a35      	ldr	r2, [pc, #212]	@ (80072f4 <TIM_Base_SetConfig+0x108>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d108      	bne.n	8007236 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800722a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	4313      	orrs	r3, r2
 8007234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	4a2b      	ldr	r2, [pc, #172]	@ (80072e8 <TIM_Base_SetConfig+0xfc>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d01b      	beq.n	8007276 <TIM_Base_SetConfig+0x8a>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007244:	d017      	beq.n	8007276 <TIM_Base_SetConfig+0x8a>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	4a28      	ldr	r2, [pc, #160]	@ (80072ec <TIM_Base_SetConfig+0x100>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d013      	beq.n	8007276 <TIM_Base_SetConfig+0x8a>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a27      	ldr	r2, [pc, #156]	@ (80072f0 <TIM_Base_SetConfig+0x104>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d00f      	beq.n	8007276 <TIM_Base_SetConfig+0x8a>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a26      	ldr	r2, [pc, #152]	@ (80072f4 <TIM_Base_SetConfig+0x108>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d00b      	beq.n	8007276 <TIM_Base_SetConfig+0x8a>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a25      	ldr	r2, [pc, #148]	@ (80072f8 <TIM_Base_SetConfig+0x10c>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d007      	beq.n	8007276 <TIM_Base_SetConfig+0x8a>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	4a24      	ldr	r2, [pc, #144]	@ (80072fc <TIM_Base_SetConfig+0x110>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d003      	beq.n	8007276 <TIM_Base_SetConfig+0x8a>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	4a23      	ldr	r2, [pc, #140]	@ (8007300 <TIM_Base_SetConfig+0x114>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d108      	bne.n	8007288 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800727c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	4313      	orrs	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	4313      	orrs	r3, r2
 8007294:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	68fa      	ldr	r2, [r7, #12]
 800729a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	689a      	ldr	r2, [r3, #8]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a0e      	ldr	r2, [pc, #56]	@ (80072e8 <TIM_Base_SetConfig+0xfc>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d103      	bne.n	80072bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	691a      	ldr	r2, [r3, #16]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2201      	movs	r2, #1
 80072c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	f003 0301 	and.w	r3, r3, #1
 80072ca:	2b01      	cmp	r3, #1
 80072cc:	d105      	bne.n	80072da <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	f023 0201 	bic.w	r2, r3, #1
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	611a      	str	r2, [r3, #16]
  }
}
 80072da:	bf00      	nop
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	40010000 	.word	0x40010000
 80072ec:	40000400 	.word	0x40000400
 80072f0:	40000800 	.word	0x40000800
 80072f4:	40000c00 	.word	0x40000c00
 80072f8:	40014000 	.word	0x40014000
 80072fc:	40014400 	.word	0x40014400
 8007300:	40014800 	.word	0x40014800

08007304 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007304:	b480      	push	{r7}
 8007306:	b087      	sub	sp, #28
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a1b      	ldr	r3, [r3, #32]
 8007318:	f023 0201 	bic.w	r2, r3, #1
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f023 0303 	bic.w	r3, r3, #3
 800733a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	4313      	orrs	r3, r2
 8007344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	f023 0302 	bic.w	r3, r3, #2
 800734c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	689b      	ldr	r3, [r3, #8]
 8007352:	697a      	ldr	r2, [r7, #20]
 8007354:	4313      	orrs	r3, r2
 8007356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a1c      	ldr	r2, [pc, #112]	@ (80073cc <TIM_OC1_SetConfig+0xc8>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d10c      	bne.n	800737a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	f023 0308 	bic.w	r3, r3, #8
 8007366:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	697a      	ldr	r2, [r7, #20]
 800736e:	4313      	orrs	r3, r2
 8007370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	f023 0304 	bic.w	r3, r3, #4
 8007378:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4a13      	ldr	r2, [pc, #76]	@ (80073cc <TIM_OC1_SetConfig+0xc8>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d111      	bne.n	80073a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007388:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007390:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	695b      	ldr	r3, [r3, #20]
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	4313      	orrs	r3, r2
 800739a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	685a      	ldr	r2, [r3, #4]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	697a      	ldr	r2, [r7, #20]
 80073be:	621a      	str	r2, [r3, #32]
}
 80073c0:	bf00      	nop
 80073c2:	371c      	adds	r7, #28
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	40010000 	.word	0x40010000

080073d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b087      	sub	sp, #28
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a1b      	ldr	r3, [r3, #32]
 80073e4:	f023 0210 	bic.w	r2, r3, #16
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	021b      	lsls	r3, r3, #8
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	4313      	orrs	r3, r2
 8007412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	f023 0320 	bic.w	r3, r3, #32
 800741a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	011b      	lsls	r3, r3, #4
 8007422:	697a      	ldr	r2, [r7, #20]
 8007424:	4313      	orrs	r3, r2
 8007426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	4a1e      	ldr	r2, [pc, #120]	@ (80074a4 <TIM_OC2_SetConfig+0xd4>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d10d      	bne.n	800744c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007436:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	011b      	lsls	r3, r3, #4
 800743e:	697a      	ldr	r2, [r7, #20]
 8007440:	4313      	orrs	r3, r2
 8007442:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800744a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a15      	ldr	r2, [pc, #84]	@ (80074a4 <TIM_OC2_SetConfig+0xd4>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d113      	bne.n	800747c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800745a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007462:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	4313      	orrs	r3, r2
 800746e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	009b      	lsls	r3, r3, #2
 8007476:	693a      	ldr	r2, [r7, #16]
 8007478:	4313      	orrs	r3, r2
 800747a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	685a      	ldr	r2, [r3, #4]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	621a      	str	r2, [r3, #32]
}
 8007496:	bf00      	nop
 8007498:	371c      	adds	r7, #28
 800749a:	46bd      	mov	sp, r7
 800749c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	40010000 	.word	0x40010000

080074a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b087      	sub	sp, #28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6a1b      	ldr	r3, [r3, #32]
 80074bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	69db      	ldr	r3, [r3, #28]
 80074ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f023 0303 	bic.w	r3, r3, #3
 80074de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80074f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	021b      	lsls	r3, r3, #8
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a1d      	ldr	r2, [pc, #116]	@ (8007578 <TIM_OC3_SetConfig+0xd0>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d10d      	bne.n	8007522 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800750c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	021b      	lsls	r3, r3, #8
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	4313      	orrs	r3, r2
 8007518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a14      	ldr	r2, [pc, #80]	@ (8007578 <TIM_OC3_SetConfig+0xd0>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d113      	bne.n	8007552 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007530:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007538:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	011b      	lsls	r3, r3, #4
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	4313      	orrs	r3, r2
 8007544:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	699b      	ldr	r3, [r3, #24]
 800754a:	011b      	lsls	r3, r3, #4
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	4313      	orrs	r3, r2
 8007550:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	693a      	ldr	r2, [r7, #16]
 8007556:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	685a      	ldr	r2, [r3, #4]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	697a      	ldr	r2, [r7, #20]
 800756a:	621a      	str	r2, [r3, #32]
}
 800756c:	bf00      	nop
 800756e:	371c      	adds	r7, #28
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr
 8007578:	40010000 	.word	0x40010000

0800757c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800757c:	b480      	push	{r7}
 800757e:	b087      	sub	sp, #28
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a1b      	ldr	r3, [r3, #32]
 800758a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6a1b      	ldr	r3, [r3, #32]
 8007590:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	69db      	ldr	r3, [r3, #28]
 80075a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	021b      	lsls	r3, r3, #8
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	4313      	orrs	r3, r2
 80075be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80075c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	031b      	lsls	r3, r3, #12
 80075ce:	693a      	ldr	r2, [r7, #16]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a10      	ldr	r2, [pc, #64]	@ (8007618 <TIM_OC4_SetConfig+0x9c>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d109      	bne.n	80075f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80075e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	695b      	ldr	r3, [r3, #20]
 80075e8:	019b      	lsls	r3, r3, #6
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	697a      	ldr	r2, [r7, #20]
 80075f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	621a      	str	r2, [r3, #32]
}
 800760a:	bf00      	nop
 800760c:	371c      	adds	r7, #28
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	40010000 	.word	0x40010000

0800761c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800761c:	b480      	push	{r7}
 800761e:	b087      	sub	sp, #28
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	f003 031f 	and.w	r3, r3, #31
 800762e:	2201      	movs	r2, #1
 8007630:	fa02 f303 	lsl.w	r3, r2, r3
 8007634:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	6a1a      	ldr	r2, [r3, #32]
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	43db      	mvns	r3, r3
 800763e:	401a      	ands	r2, r3
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6a1a      	ldr	r2, [r3, #32]
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	f003 031f 	and.w	r3, r3, #31
 800764e:	6879      	ldr	r1, [r7, #4]
 8007650:	fa01 f303 	lsl.w	r3, r1, r3
 8007654:	431a      	orrs	r2, r3
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	621a      	str	r2, [r3, #32]
}
 800765a:	bf00      	nop
 800765c:	371c      	adds	r7, #28
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr
	...

08007668 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007678:	2b01      	cmp	r3, #1
 800767a:	d101      	bne.n	8007680 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800767c:	2302      	movs	r3, #2
 800767e:	e050      	b.n	8007722 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2201      	movs	r2, #1
 8007684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2202      	movs	r2, #2
 800768c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a1c      	ldr	r2, [pc, #112]	@ (8007730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d018      	beq.n	80076f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076cc:	d013      	beq.n	80076f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a18      	ldr	r2, [pc, #96]	@ (8007734 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d00e      	beq.n	80076f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a16      	ldr	r2, [pc, #88]	@ (8007738 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d009      	beq.n	80076f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a15      	ldr	r2, [pc, #84]	@ (800773c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d004      	beq.n	80076f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a13      	ldr	r2, [pc, #76]	@ (8007740 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d10c      	bne.n	8007710 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80076fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	4313      	orrs	r3, r2
 8007706:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68ba      	ldr	r2, [r7, #8]
 800770e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007720:	2300      	movs	r3, #0
}
 8007722:	4618      	mov	r0, r3
 8007724:	3714      	adds	r7, #20
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	40010000 	.word	0x40010000
 8007734:	40000400 	.word	0x40000400
 8007738:	40000800 	.word	0x40000800
 800773c:	40000c00 	.word	0x40000c00
 8007740:	40014000 	.word	0x40014000

08007744 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800774c:	bf00      	nop
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007760:	bf00      	nop
 8007762:	370c      	adds	r7, #12
 8007764:	46bd      	mov	sp, r7
 8007766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776a:	4770      	bx	lr

0800776c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d101      	bne.n	800777e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e042      	b.n	8007804 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	d106      	bne.n	8007798 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f7fb fd10 	bl	80031b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2224      	movs	r2, #36	@ 0x24
 800779c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	68da      	ldr	r2, [r3, #12]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80077ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f000 ff85 	bl	80086c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	691a      	ldr	r2, [r3, #16]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80077c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	695a      	ldr	r2, [r3, #20]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80077d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68da      	ldr	r2, [r3, #12]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80077e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2220      	movs	r2, #32
 80077f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2220      	movs	r2, #32
 80077f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b08a      	sub	sp, #40	@ 0x28
 8007810:	af02      	add	r7, sp, #8
 8007812:	60f8      	str	r0, [r7, #12]
 8007814:	60b9      	str	r1, [r7, #8]
 8007816:	603b      	str	r3, [r7, #0]
 8007818:	4613      	mov	r3, r2
 800781a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800781c:	2300      	movs	r3, #0
 800781e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007826:	b2db      	uxtb	r3, r3
 8007828:	2b20      	cmp	r3, #32
 800782a:	d175      	bne.n	8007918 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d002      	beq.n	8007838 <HAL_UART_Transmit+0x2c>
 8007832:	88fb      	ldrh	r3, [r7, #6]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d101      	bne.n	800783c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	e06e      	b.n	800791a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2221      	movs	r2, #33	@ 0x21
 8007846:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800784a:	f7fb ff5d 	bl	8003708 <HAL_GetTick>
 800784e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	88fa      	ldrh	r2, [r7, #6]
 8007854:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	88fa      	ldrh	r2, [r7, #6]
 800785a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007864:	d108      	bne.n	8007878 <HAL_UART_Transmit+0x6c>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d104      	bne.n	8007878 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800786e:	2300      	movs	r3, #0
 8007870:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	61bb      	str	r3, [r7, #24]
 8007876:	e003      	b.n	8007880 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800787c:	2300      	movs	r3, #0
 800787e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007880:	e02e      	b.n	80078e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	2200      	movs	r2, #0
 800788a:	2180      	movs	r1, #128	@ 0x80
 800788c:	68f8      	ldr	r0, [r7, #12]
 800788e:	f000 fc5d 	bl	800814c <UART_WaitOnFlagUntilTimeout>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d005      	beq.n	80078a4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2220      	movs	r2, #32
 800789c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80078a0:	2303      	movs	r3, #3
 80078a2:	e03a      	b.n	800791a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10b      	bne.n	80078c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	881b      	ldrh	r3, [r3, #0]
 80078ae:	461a      	mov	r2, r3
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	3302      	adds	r3, #2
 80078be:	61bb      	str	r3, [r7, #24]
 80078c0:	e007      	b.n	80078d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80078c2:	69fb      	ldr	r3, [r7, #28]
 80078c4:	781a      	ldrb	r2, [r3, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80078cc:	69fb      	ldr	r3, [r7, #28]
 80078ce:	3301      	adds	r3, #1
 80078d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	3b01      	subs	r3, #1
 80078da:	b29a      	uxth	r2, r3
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80078e4:	b29b      	uxth	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1cb      	bne.n	8007882 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	9300      	str	r3, [sp, #0]
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	2200      	movs	r2, #0
 80078f2:	2140      	movs	r1, #64	@ 0x40
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f000 fc29 	bl	800814c <UART_WaitOnFlagUntilTimeout>
 80078fa:	4603      	mov	r3, r0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d005      	beq.n	800790c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2220      	movs	r2, #32
 8007904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007908:	2303      	movs	r3, #3
 800790a:	e006      	b.n	800791a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2220      	movs	r2, #32
 8007910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007914:	2300      	movs	r3, #0
 8007916:	e000      	b.n	800791a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007918:	2302      	movs	r3, #2
  }
}
 800791a:	4618      	mov	r0, r3
 800791c:	3720      	adds	r7, #32
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}

08007922 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007922:	b580      	push	{r7, lr}
 8007924:	b08c      	sub	sp, #48	@ 0x30
 8007926:	af00      	add	r7, sp, #0
 8007928:	60f8      	str	r0, [r7, #12]
 800792a:	60b9      	str	r1, [r7, #8]
 800792c:	4613      	mov	r3, r2
 800792e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007936:	b2db      	uxtb	r3, r3
 8007938:	2b20      	cmp	r3, #32
 800793a:	d14a      	bne.n	80079d2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d002      	beq.n	8007948 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8007942:	88fb      	ldrh	r3, [r7, #6]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d101      	bne.n	800794c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e043      	b.n	80079d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2201      	movs	r2, #1
 8007950:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	2200      	movs	r2, #0
 8007956:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007958:	88fb      	ldrh	r3, [r7, #6]
 800795a:	461a      	mov	r2, r3
 800795c:	68b9      	ldr	r1, [r7, #8]
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f000 fc4e 	bl	8008200 <UART_Start_Receive_DMA>
 8007964:	4603      	mov	r3, r0
 8007966:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800796a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800796e:	2b00      	cmp	r3, #0
 8007970:	d12c      	bne.n	80079cc <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007976:	2b01      	cmp	r3, #1
 8007978:	d125      	bne.n	80079c6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800797a:	2300      	movs	r3, #0
 800797c:	613b      	str	r3, [r7, #16]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	613b      	str	r3, [r7, #16]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	613b      	str	r3, [r7, #16]
 800798e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	330c      	adds	r3, #12
 8007996:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	e853 3f00 	ldrex	r3, [r3]
 800799e:	617b      	str	r3, [r7, #20]
   return(result);
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	f043 0310 	orr.w	r3, r3, #16
 80079a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	330c      	adds	r3, #12
 80079ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80079b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b4:	6a39      	ldr	r1, [r7, #32]
 80079b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80079b8:	e841 2300 	strex	r3, r2, [r1]
 80079bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1e5      	bne.n	8007990 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80079c4:	e002      	b.n	80079cc <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80079cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80079d0:	e000      	b.n	80079d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80079d2:	2302      	movs	r3, #2
  }
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3730      	adds	r7, #48	@ 0x30
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b0ba      	sub	sp, #232	@ 0xe8
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007a02:	2300      	movs	r3, #0
 8007a04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a12:	f003 030f 	and.w	r3, r3, #15
 8007a16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007a1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10f      	bne.n	8007a42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a26:	f003 0320 	and.w	r3, r3, #32
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d009      	beq.n	8007a42 <HAL_UART_IRQHandler+0x66>
 8007a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a32:	f003 0320 	and.w	r3, r3, #32
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d003      	beq.n	8007a42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 fd81 	bl	8008542 <UART_Receive_IT>
      return;
 8007a40:	e25b      	b.n	8007efa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007a42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f000 80de 	beq.w	8007c08 <HAL_UART_IRQHandler+0x22c>
 8007a4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a50:	f003 0301 	and.w	r3, r3, #1
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d106      	bne.n	8007a66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a5c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f000 80d1 	beq.w	8007c08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a6a:	f003 0301 	and.w	r3, r3, #1
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00b      	beq.n	8007a8a <HAL_UART_IRQHandler+0xae>
 8007a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d005      	beq.n	8007a8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a82:	f043 0201 	orr.w	r2, r3, #1
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a8e:	f003 0304 	and.w	r3, r3, #4
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d00b      	beq.n	8007aae <HAL_UART_IRQHandler+0xd2>
 8007a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d005      	beq.n	8007aae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aa6:	f043 0202 	orr.w	r2, r3, #2
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00b      	beq.n	8007ad2 <HAL_UART_IRQHandler+0xf6>
 8007aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d005      	beq.n	8007ad2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aca:	f043 0204 	orr.w	r2, r3, #4
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ad6:	f003 0308 	and.w	r3, r3, #8
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d011      	beq.n	8007b02 <HAL_UART_IRQHandler+0x126>
 8007ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ae2:	f003 0320 	and.w	r3, r3, #32
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d105      	bne.n	8007af6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007aee:	f003 0301 	and.w	r3, r3, #1
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d005      	beq.n	8007b02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007afa:	f043 0208 	orr.w	r2, r3, #8
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	f000 81f2 	beq.w	8007ef0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b10:	f003 0320 	and.w	r3, r3, #32
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d008      	beq.n	8007b2a <HAL_UART_IRQHandler+0x14e>
 8007b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b1c:	f003 0320 	and.w	r3, r3, #32
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d002      	beq.n	8007b2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fd0c 	bl	8008542 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b34:	2b40      	cmp	r3, #64	@ 0x40
 8007b36:	bf0c      	ite	eq
 8007b38:	2301      	moveq	r3, #1
 8007b3a:	2300      	movne	r3, #0
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b46:	f003 0308 	and.w	r3, r3, #8
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d103      	bne.n	8007b56 <HAL_UART_IRQHandler+0x17a>
 8007b4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d04f      	beq.n	8007bf6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 fc14 	bl	8008384 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b66:	2b40      	cmp	r3, #64	@ 0x40
 8007b68:	d141      	bne.n	8007bee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	3314      	adds	r3, #20
 8007b70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b78:	e853 3f00 	ldrex	r3, [r3]
 8007b7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007b80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	3314      	adds	r3, #20
 8007b92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007b96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007b9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007ba2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007ba6:	e841 2300 	strex	r3, r2, [r1]
 8007baa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007bae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1d9      	bne.n	8007b6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d013      	beq.n	8007be6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bc2:	4a7e      	ldr	r2, [pc, #504]	@ (8007dbc <HAL_UART_IRQHandler+0x3e0>)
 8007bc4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7fc fc4c 	bl	8004468 <HAL_DMA_Abort_IT>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d016      	beq.n	8007c04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007be0:	4610      	mov	r0, r2
 8007be2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007be4:	e00e      	b.n	8007c04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 f9a8 	bl	8007f3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bec:	e00a      	b.n	8007c04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f9a4 	bl	8007f3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf4:	e006      	b.n	8007c04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f9a0 	bl	8007f3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007c02:	e175      	b.n	8007ef0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c04:	bf00      	nop
    return;
 8007c06:	e173      	b.n	8007ef0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	f040 814f 	bne.w	8007eb0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c16:	f003 0310 	and.w	r3, r3, #16
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	f000 8148 	beq.w	8007eb0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c24:	f003 0310 	and.w	r3, r3, #16
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f000 8141 	beq.w	8007eb0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007c2e:	2300      	movs	r3, #0
 8007c30:	60bb      	str	r3, [r7, #8]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	60bb      	str	r3, [r7, #8]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	60bb      	str	r3, [r7, #8]
 8007c42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c4e:	2b40      	cmp	r3, #64	@ 0x40
 8007c50:	f040 80b6 	bne.w	8007dc0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 8145 	beq.w	8007ef4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007c6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c72:	429a      	cmp	r2, r3
 8007c74:	f080 813e 	bcs.w	8007ef4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c7e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c8a:	f000 8088 	beq.w	8007d9e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	330c      	adds	r3, #12
 8007c94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007c9c:	e853 3f00 	ldrex	r3, [r3]
 8007ca0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007ca4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007ca8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	330c      	adds	r3, #12
 8007cb6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007cba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007cbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007cc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007cca:	e841 2300 	strex	r3, r2, [r1]
 8007cce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007cd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1d9      	bne.n	8007c8e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	3314      	adds	r3, #20
 8007ce0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ce4:	e853 3f00 	ldrex	r3, [r3]
 8007ce8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007cea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007cec:	f023 0301 	bic.w	r3, r3, #1
 8007cf0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	3314      	adds	r3, #20
 8007cfa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007cfe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007d02:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d04:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007d06:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007d0a:	e841 2300 	strex	r3, r2, [r1]
 8007d0e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007d10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1e1      	bne.n	8007cda <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	3314      	adds	r3, #20
 8007d1c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007d20:	e853 3f00 	ldrex	r3, [r3]
 8007d24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007d26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	3314      	adds	r3, #20
 8007d36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007d3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007d3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007d40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007d42:	e841 2300 	strex	r3, r2, [r1]
 8007d46:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007d48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d1e3      	bne.n	8007d16 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2220      	movs	r2, #32
 8007d52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	330c      	adds	r3, #12
 8007d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d66:	e853 3f00 	ldrex	r3, [r3]
 8007d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d6e:	f023 0310 	bic.w	r3, r3, #16
 8007d72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	330c      	adds	r3, #12
 8007d7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007d80:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007d82:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d84:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d86:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d88:	e841 2300 	strex	r3, r2, [r1]
 8007d8c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1e3      	bne.n	8007d5c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d98:	4618      	mov	r0, r3
 8007d9a:	f7fc faf5 	bl	8004388 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2202      	movs	r2, #2
 8007da2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	4619      	mov	r1, r3
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f7fa fd3f 	bl	8002838 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007dba:	e09b      	b.n	8007ef4 <HAL_UART_IRQHandler+0x518>
 8007dbc:	0800844b 	.word	0x0800844b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	1ad3      	subs	r3, r2, r3
 8007dcc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	f000 808e 	beq.w	8007ef8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007ddc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 8089 	beq.w	8007ef8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	330c      	adds	r3, #12
 8007dec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df0:	e853 3f00 	ldrex	r3, [r3]
 8007df4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007df8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007dfc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	330c      	adds	r3, #12
 8007e06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007e0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8007e0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007e10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e12:	e841 2300 	strex	r3, r2, [r1]
 8007e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1e3      	bne.n	8007de6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	3314      	adds	r3, #20
 8007e24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e28:	e853 3f00 	ldrex	r3, [r3]
 8007e2c:	623b      	str	r3, [r7, #32]
   return(result);
 8007e2e:	6a3b      	ldr	r3, [r7, #32]
 8007e30:	f023 0301 	bic.w	r3, r3, #1
 8007e34:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	3314      	adds	r3, #20
 8007e3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007e42:	633a      	str	r2, [r7, #48]	@ 0x30
 8007e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e4a:	e841 2300 	strex	r3, r2, [r1]
 8007e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1e3      	bne.n	8007e1e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2220      	movs	r2, #32
 8007e5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	330c      	adds	r3, #12
 8007e6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	e853 3f00 	ldrex	r3, [r3]
 8007e72:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f023 0310 	bic.w	r3, r3, #16
 8007e7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	330c      	adds	r3, #12
 8007e84:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007e88:	61fa      	str	r2, [r7, #28]
 8007e8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e8c:	69b9      	ldr	r1, [r7, #24]
 8007e8e:	69fa      	ldr	r2, [r7, #28]
 8007e90:	e841 2300 	strex	r3, r2, [r1]
 8007e94:	617b      	str	r3, [r7, #20]
   return(result);
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1e3      	bne.n	8007e64 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ea2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f7fa fcc5 	bl	8002838 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007eae:	e023      	b.n	8007ef8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007eb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d009      	beq.n	8007ed0 <HAL_UART_IRQHandler+0x4f4>
 8007ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d003      	beq.n	8007ed0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 fad2 	bl	8008472 <UART_Transmit_IT>
    return;
 8007ece:	e014      	b.n	8007efa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00e      	beq.n	8007efa <HAL_UART_IRQHandler+0x51e>
 8007edc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d008      	beq.n	8007efa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fb12 	bl	8008512 <UART_EndTransmit_IT>
    return;
 8007eee:	e004      	b.n	8007efa <HAL_UART_IRQHandler+0x51e>
    return;
 8007ef0:	bf00      	nop
 8007ef2:	e002      	b.n	8007efa <HAL_UART_IRQHandler+0x51e>
      return;
 8007ef4:	bf00      	nop
 8007ef6:	e000      	b.n	8007efa <HAL_UART_IRQHandler+0x51e>
      return;
 8007ef8:	bf00      	nop
  }
}
 8007efa:	37e8      	adds	r7, #232	@ 0xe8
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b083      	sub	sp, #12
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007f08:	bf00      	nop
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007f1c:	bf00      	nop
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr

08007f28 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b09c      	sub	sp, #112	@ 0x70
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f5c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d172      	bne.n	8008052 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007f6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f6e:	2200      	movs	r2, #0
 8007f70:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	330c      	adds	r3, #12
 8007f78:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007f7c:	e853 3f00 	ldrex	r3, [r3]
 8007f80:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007f82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007f8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	330c      	adds	r3, #12
 8007f90:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007f92:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007f94:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f96:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007f98:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007f9a:	e841 2300 	strex	r3, r2, [r1]
 8007f9e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007fa0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1e5      	bne.n	8007f72 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	3314      	adds	r3, #20
 8007fac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fb0:	e853 3f00 	ldrex	r3, [r3]
 8007fb4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fb8:	f023 0301 	bic.w	r3, r3, #1
 8007fbc:	667b      	str	r3, [r7, #100]	@ 0x64
 8007fbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	3314      	adds	r3, #20
 8007fc4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007fc6:	647a      	str	r2, [r7, #68]	@ 0x44
 8007fc8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007fcc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007fce:	e841 2300 	strex	r3, r2, [r1]
 8007fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d1e5      	bne.n	8007fa6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	3314      	adds	r3, #20
 8007fe0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe4:	e853 3f00 	ldrex	r3, [r3]
 8007fe8:	623b      	str	r3, [r7, #32]
   return(result);
 8007fea:	6a3b      	ldr	r3, [r7, #32]
 8007fec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ff0:	663b      	str	r3, [r7, #96]	@ 0x60
 8007ff2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	3314      	adds	r3, #20
 8007ff8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007ffa:	633a      	str	r2, [r7, #48]	@ 0x30
 8007ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008000:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008002:	e841 2300 	strex	r3, r2, [r1]
 8008006:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800800a:	2b00      	cmp	r3, #0
 800800c:	d1e5      	bne.n	8007fda <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800800e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008010:	2220      	movs	r2, #32
 8008012:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008016:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800801a:	2b01      	cmp	r3, #1
 800801c:	d119      	bne.n	8008052 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800801e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	330c      	adds	r3, #12
 8008024:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008026:	693b      	ldr	r3, [r7, #16]
 8008028:	e853 3f00 	ldrex	r3, [r3]
 800802c:	60fb      	str	r3, [r7, #12]
   return(result);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f023 0310 	bic.w	r3, r3, #16
 8008034:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008036:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	330c      	adds	r3, #12
 800803c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800803e:	61fa      	str	r2, [r7, #28]
 8008040:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008042:	69b9      	ldr	r1, [r7, #24]
 8008044:	69fa      	ldr	r2, [r7, #28]
 8008046:	e841 2300 	strex	r3, r2, [r1]
 800804a:	617b      	str	r3, [r7, #20]
   return(result);
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1e5      	bne.n	800801e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008052:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008054:	2200      	movs	r2, #0
 8008056:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008058:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800805a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800805c:	2b01      	cmp	r3, #1
 800805e:	d106      	bne.n	800806e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008060:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008062:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008064:	4619      	mov	r1, r3
 8008066:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008068:	f7fa fbe6 	bl	8002838 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800806c:	e002      	b.n	8008074 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800806e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008070:	f7ff ff50 	bl	8007f14 <HAL_UART_RxCpltCallback>
}
 8008074:	bf00      	nop
 8008076:	3770      	adds	r7, #112	@ 0x70
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008088:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2201      	movs	r2, #1
 800808e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008094:	2b01      	cmp	r3, #1
 8008096:	d108      	bne.n	80080aa <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800809c:	085b      	lsrs	r3, r3, #1
 800809e:	b29b      	uxth	r3, r3
 80080a0:	4619      	mov	r1, r3
 80080a2:	68f8      	ldr	r0, [r7, #12]
 80080a4:	f7fa fbc8 	bl	8002838 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80080a8:	e002      	b.n	80080b0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f7ff ff3c 	bl	8007f28 <HAL_UART_RxHalfCpltCallback>
}
 80080b0:	bf00      	nop
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80080c0:	2300      	movs	r3, #0
 80080c2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	695b      	ldr	r3, [r3, #20]
 80080d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080d4:	2b80      	cmp	r3, #128	@ 0x80
 80080d6:	bf0c      	ite	eq
 80080d8:	2301      	moveq	r3, #1
 80080da:	2300      	movne	r3, #0
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080e6:	b2db      	uxtb	r3, r3
 80080e8:	2b21      	cmp	r3, #33	@ 0x21
 80080ea:	d108      	bne.n	80080fe <UART_DMAError+0x46>
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d005      	beq.n	80080fe <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80080f2:	68bb      	ldr	r3, [r7, #8]
 80080f4:	2200      	movs	r2, #0
 80080f6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80080f8:	68b8      	ldr	r0, [r7, #8]
 80080fa:	f000 f91b 	bl	8008334 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	695b      	ldr	r3, [r3, #20]
 8008104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008108:	2b40      	cmp	r3, #64	@ 0x40
 800810a:	bf0c      	ite	eq
 800810c:	2301      	moveq	r3, #1
 800810e:	2300      	movne	r3, #0
 8008110:	b2db      	uxtb	r3, r3
 8008112:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800811a:	b2db      	uxtb	r3, r3
 800811c:	2b22      	cmp	r3, #34	@ 0x22
 800811e:	d108      	bne.n	8008132 <UART_DMAError+0x7a>
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d005      	beq.n	8008132 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	2200      	movs	r2, #0
 800812a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800812c:	68b8      	ldr	r0, [r7, #8]
 800812e:	f000 f929 	bl	8008384 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008136:	f043 0210 	orr.w	r2, r3, #16
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800813e:	68b8      	ldr	r0, [r7, #8]
 8008140:	f7ff fefc 	bl	8007f3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008144:	bf00      	nop
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b086      	sub	sp, #24
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	603b      	str	r3, [r7, #0]
 8008158:	4613      	mov	r3, r2
 800815a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800815c:	e03b      	b.n	80081d6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800815e:	6a3b      	ldr	r3, [r7, #32]
 8008160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008164:	d037      	beq.n	80081d6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008166:	f7fb facf 	bl	8003708 <HAL_GetTick>
 800816a:	4602      	mov	r2, r0
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	1ad3      	subs	r3, r2, r3
 8008170:	6a3a      	ldr	r2, [r7, #32]
 8008172:	429a      	cmp	r2, r3
 8008174:	d302      	bcc.n	800817c <UART_WaitOnFlagUntilTimeout+0x30>
 8008176:	6a3b      	ldr	r3, [r7, #32]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d101      	bne.n	8008180 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800817c:	2303      	movs	r3, #3
 800817e:	e03a      	b.n	80081f6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	f003 0304 	and.w	r3, r3, #4
 800818a:	2b00      	cmp	r3, #0
 800818c:	d023      	beq.n	80081d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	2b80      	cmp	r3, #128	@ 0x80
 8008192:	d020      	beq.n	80081d6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	2b40      	cmp	r3, #64	@ 0x40
 8008198:	d01d      	beq.n	80081d6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f003 0308 	and.w	r3, r3, #8
 80081a4:	2b08      	cmp	r3, #8
 80081a6:	d116      	bne.n	80081d6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80081a8:	2300      	movs	r3, #0
 80081aa:	617b      	str	r3, [r7, #20]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	617b      	str	r3, [r7, #20]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	617b      	str	r3, [r7, #20]
 80081bc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f000 f8e0 	bl	8008384 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2208      	movs	r2, #8
 80081c8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2200      	movs	r2, #0
 80081ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e00f      	b.n	80081f6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	4013      	ands	r3, r2
 80081e0:	68ba      	ldr	r2, [r7, #8]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	bf0c      	ite	eq
 80081e6:	2301      	moveq	r3, #1
 80081e8:	2300      	movne	r3, #0
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	461a      	mov	r2, r3
 80081ee:	79fb      	ldrb	r3, [r7, #7]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d0b4      	beq.n	800815e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3718      	adds	r7, #24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
	...

08008200 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b098      	sub	sp, #96	@ 0x60
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	4613      	mov	r3, r2
 800820c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	88fa      	ldrh	r2, [r7, #6]
 8008218:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2200      	movs	r2, #0
 800821e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2222      	movs	r2, #34	@ 0x22
 8008224:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800822c:	4a3e      	ldr	r2, [pc, #248]	@ (8008328 <UART_Start_Receive_DMA+0x128>)
 800822e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008234:	4a3d      	ldr	r2, [pc, #244]	@ (800832c <UART_Start_Receive_DMA+0x12c>)
 8008236:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800823c:	4a3c      	ldr	r2, [pc, #240]	@ (8008330 <UART_Start_Receive_DMA+0x130>)
 800823e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008244:	2200      	movs	r2, #0
 8008246:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008248:	f107 0308 	add.w	r3, r7, #8
 800824c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3304      	adds	r3, #4
 8008258:	4619      	mov	r1, r3
 800825a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	88fb      	ldrh	r3, [r7, #6]
 8008260:	f7fc f83a 	bl	80042d8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008264:	2300      	movs	r3, #0
 8008266:	613b      	str	r3, [r7, #16]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	613b      	str	r3, [r7, #16]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	613b      	str	r3, [r7, #16]
 8008278:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d019      	beq.n	80082b6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	330c      	adds	r3, #12
 8008288:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800828a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800828c:	e853 3f00 	ldrex	r3, [r3]
 8008290:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008298:	65bb      	str	r3, [r7, #88]	@ 0x58
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	330c      	adds	r3, #12
 80082a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80082a2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80082a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80082a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80082aa:	e841 2300 	strex	r3, r2, [r1]
 80082ae:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80082b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d1e5      	bne.n	8008282 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	3314      	adds	r3, #20
 80082bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082c0:	e853 3f00 	ldrex	r3, [r3]
 80082c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80082c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c8:	f043 0301 	orr.w	r3, r3, #1
 80082cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	3314      	adds	r3, #20
 80082d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80082d6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80082d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082da:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80082dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80082de:	e841 2300 	strex	r3, r2, [r1]
 80082e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80082e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1e5      	bne.n	80082b6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	3314      	adds	r3, #20
 80082f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	e853 3f00 	ldrex	r3, [r3]
 80082f8:	617b      	str	r3, [r7, #20]
   return(result);
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008300:	653b      	str	r3, [r7, #80]	@ 0x50
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	3314      	adds	r3, #20
 8008308:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800830a:	627a      	str	r2, [r7, #36]	@ 0x24
 800830c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800830e:	6a39      	ldr	r1, [r7, #32]
 8008310:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008312:	e841 2300 	strex	r3, r2, [r1]
 8008316:	61fb      	str	r3, [r7, #28]
   return(result);
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1e5      	bne.n	80082ea <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800831e:	2300      	movs	r3, #0
}
 8008320:	4618      	mov	r0, r3
 8008322:	3760      	adds	r7, #96	@ 0x60
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}
 8008328:	08007f51 	.word	0x08007f51
 800832c:	0800807d 	.word	0x0800807d
 8008330:	080080b9 	.word	0x080080b9

08008334 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008334:	b480      	push	{r7}
 8008336:	b089      	sub	sp, #36	@ 0x24
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	330c      	adds	r3, #12
 8008342:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	e853 3f00 	ldrex	r3, [r3]
 800834a:	60bb      	str	r3, [r7, #8]
   return(result);
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008352:	61fb      	str	r3, [r7, #28]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	330c      	adds	r3, #12
 800835a:	69fa      	ldr	r2, [r7, #28]
 800835c:	61ba      	str	r2, [r7, #24]
 800835e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008360:	6979      	ldr	r1, [r7, #20]
 8008362:	69ba      	ldr	r2, [r7, #24]
 8008364:	e841 2300 	strex	r3, r2, [r1]
 8008368:	613b      	str	r3, [r7, #16]
   return(result);
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d1e5      	bne.n	800833c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2220      	movs	r2, #32
 8008374:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8008378:	bf00      	nop
 800837a:	3724      	adds	r7, #36	@ 0x24
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008384:	b480      	push	{r7}
 8008386:	b095      	sub	sp, #84	@ 0x54
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	330c      	adds	r3, #12
 8008392:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008396:	e853 3f00 	ldrex	r3, [r3]
 800839a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800839c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800839e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80083a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	330c      	adds	r3, #12
 80083aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80083ac:	643a      	str	r2, [r7, #64]	@ 0x40
 80083ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80083b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80083b4:	e841 2300 	strex	r3, r2, [r1]
 80083b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80083ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d1e5      	bne.n	800838c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	3314      	adds	r3, #20
 80083c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083c8:	6a3b      	ldr	r3, [r7, #32]
 80083ca:	e853 3f00 	ldrex	r3, [r3]
 80083ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	f023 0301 	bic.w	r3, r3, #1
 80083d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	3314      	adds	r3, #20
 80083de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80083e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80083e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80083e8:	e841 2300 	strex	r3, r2, [r1]
 80083ec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80083ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d1e5      	bne.n	80083c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d119      	bne.n	8008430 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	330c      	adds	r3, #12
 8008402:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	e853 3f00 	ldrex	r3, [r3]
 800840a:	60bb      	str	r3, [r7, #8]
   return(result);
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	f023 0310 	bic.w	r3, r3, #16
 8008412:	647b      	str	r3, [r7, #68]	@ 0x44
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	330c      	adds	r3, #12
 800841a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800841c:	61ba      	str	r2, [r7, #24]
 800841e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008420:	6979      	ldr	r1, [r7, #20]
 8008422:	69ba      	ldr	r2, [r7, #24]
 8008424:	e841 2300 	strex	r3, r2, [r1]
 8008428:	613b      	str	r3, [r7, #16]
   return(result);
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d1e5      	bne.n	80083fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2220      	movs	r2, #32
 8008434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2200      	movs	r2, #0
 800843c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800843e:	bf00      	nop
 8008440:	3754      	adds	r7, #84	@ 0x54
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b084      	sub	sp, #16
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008456:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2200      	movs	r2, #0
 800845c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2200      	movs	r2, #0
 8008462:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f7ff fd69 	bl	8007f3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800846a:	bf00      	nop
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}

08008472 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008472:	b480      	push	{r7}
 8008474:	b085      	sub	sp, #20
 8008476:	af00      	add	r7, sp, #0
 8008478:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008480:	b2db      	uxtb	r3, r3
 8008482:	2b21      	cmp	r3, #33	@ 0x21
 8008484:	d13e      	bne.n	8008504 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800848e:	d114      	bne.n	80084ba <UART_Transmit_IT+0x48>
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	691b      	ldr	r3, [r3, #16]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d110      	bne.n	80084ba <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6a1b      	ldr	r3, [r3, #32]
 800849c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	881b      	ldrh	r3, [r3, #0]
 80084a2:	461a      	mov	r2, r3
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80084ac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a1b      	ldr	r3, [r3, #32]
 80084b2:	1c9a      	adds	r2, r3, #2
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	621a      	str	r2, [r3, #32]
 80084b8:	e008      	b.n	80084cc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6a1b      	ldr	r3, [r3, #32]
 80084be:	1c59      	adds	r1, r3, #1
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	6211      	str	r1, [r2, #32]
 80084c4:	781a      	ldrb	r2, [r3, #0]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	3b01      	subs	r3, #1
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	4619      	mov	r1, r3
 80084da:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d10f      	bne.n	8008500 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68da      	ldr	r2, [r3, #12]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80084ee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	68da      	ldr	r2, [r3, #12]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80084fe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008500:	2300      	movs	r3, #0
 8008502:	e000      	b.n	8008506 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008504:	2302      	movs	r3, #2
  }
}
 8008506:	4618      	mov	r0, r3
 8008508:	3714      	adds	r7, #20
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b082      	sub	sp, #8
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68da      	ldr	r2, [r3, #12]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008528:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2220      	movs	r2, #32
 800852e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7ff fce4 	bl	8007f00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b08c      	sub	sp, #48	@ 0x30
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008550:	b2db      	uxtb	r3, r3
 8008552:	2b22      	cmp	r3, #34	@ 0x22
 8008554:	f040 80ae 	bne.w	80086b4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008560:	d117      	bne.n	8008592 <UART_Receive_IT+0x50>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	691b      	ldr	r3, [r3, #16]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d113      	bne.n	8008592 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800856a:	2300      	movs	r3, #0
 800856c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008572:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	b29b      	uxth	r3, r3
 800857c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008580:	b29a      	uxth	r2, r3
 8008582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008584:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800858a:	1c9a      	adds	r2, r3, #2
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008590:	e026      	b.n	80085e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008596:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8008598:	2300      	movs	r3, #0
 800859a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085a4:	d007      	beq.n	80085b6 <UART_Receive_IT+0x74>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d10a      	bne.n	80085c4 <UART_Receive_IT+0x82>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	691b      	ldr	r3, [r3, #16]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d106      	bne.n	80085c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	b2da      	uxtb	r2, r3
 80085be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085c0:	701a      	strb	r2, [r3, #0]
 80085c2:	e008      	b.n	80085d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085d0:	b2da      	uxtb	r2, r3
 80085d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085da:	1c5a      	adds	r2, r3, #1
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	3b01      	subs	r3, #1
 80085e8:	b29b      	uxth	r3, r3
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	4619      	mov	r1, r3
 80085ee:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d15d      	bne.n	80086b0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	68da      	ldr	r2, [r3, #12]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f022 0220 	bic.w	r2, r2, #32
 8008602:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	68da      	ldr	r2, [r3, #12]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008612:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	695a      	ldr	r2, [r3, #20]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f022 0201 	bic.w	r2, r2, #1
 8008622:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2220      	movs	r2, #32
 8008628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008636:	2b01      	cmp	r3, #1
 8008638:	d135      	bne.n	80086a6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	330c      	adds	r3, #12
 8008646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	e853 3f00 	ldrex	r3, [r3]
 800864e:	613b      	str	r3, [r7, #16]
   return(result);
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	f023 0310 	bic.w	r3, r3, #16
 8008656:	627b      	str	r3, [r7, #36]	@ 0x24
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	330c      	adds	r3, #12
 800865e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008660:	623a      	str	r2, [r7, #32]
 8008662:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008664:	69f9      	ldr	r1, [r7, #28]
 8008666:	6a3a      	ldr	r2, [r7, #32]
 8008668:	e841 2300 	strex	r3, r2, [r1]
 800866c:	61bb      	str	r3, [r7, #24]
   return(result);
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1e5      	bne.n	8008640 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f003 0310 	and.w	r3, r3, #16
 800867e:	2b10      	cmp	r3, #16
 8008680:	d10a      	bne.n	8008698 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008682:	2300      	movs	r3, #0
 8008684:	60fb      	str	r3, [r7, #12]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	60fb      	str	r3, [r7, #12]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	60fb      	str	r3, [r7, #12]
 8008696:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800869c:	4619      	mov	r1, r3
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7fa f8ca 	bl	8002838 <HAL_UARTEx_RxEventCallback>
 80086a4:	e002      	b.n	80086ac <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f7ff fc34 	bl	8007f14 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80086ac:	2300      	movs	r3, #0
 80086ae:	e002      	b.n	80086b6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80086b0:	2300      	movs	r3, #0
 80086b2:	e000      	b.n	80086b6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80086b4:	2302      	movs	r3, #2
  }
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	3730      	adds	r7, #48	@ 0x30
 80086ba:	46bd      	mov	sp, r7
 80086bc:	bd80      	pop	{r7, pc}
	...

080086c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80086c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086c4:	b0c0      	sub	sp, #256	@ 0x100
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	691b      	ldr	r3, [r3, #16]
 80086d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80086d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086dc:	68d9      	ldr	r1, [r3, #12]
 80086de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	ea40 0301 	orr.w	r3, r0, r1
 80086e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80086ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086ee:	689a      	ldr	r2, [r3, #8]
 80086f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086f4:	691b      	ldr	r3, [r3, #16]
 80086f6:	431a      	orrs	r2, r3
 80086f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086fc:	695b      	ldr	r3, [r3, #20]
 80086fe:	431a      	orrs	r2, r3
 8008700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008704:	69db      	ldr	r3, [r3, #28]
 8008706:	4313      	orrs	r3, r2
 8008708:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800870c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	68db      	ldr	r3, [r3, #12]
 8008714:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008718:	f021 010c 	bic.w	r1, r1, #12
 800871c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008726:	430b      	orrs	r3, r1
 8008728:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800872a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	695b      	ldr	r3, [r3, #20]
 8008732:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800873a:	6999      	ldr	r1, [r3, #24]
 800873c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008740:	681a      	ldr	r2, [r3, #0]
 8008742:	ea40 0301 	orr.w	r3, r0, r1
 8008746:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	4b8f      	ldr	r3, [pc, #572]	@ (800898c <UART_SetConfig+0x2cc>)
 8008750:	429a      	cmp	r2, r3
 8008752:	d005      	beq.n	8008760 <UART_SetConfig+0xa0>
 8008754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	4b8d      	ldr	r3, [pc, #564]	@ (8008990 <UART_SetConfig+0x2d0>)
 800875c:	429a      	cmp	r2, r3
 800875e:	d104      	bne.n	800876a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008760:	f7fe f94a 	bl	80069f8 <HAL_RCC_GetPCLK2Freq>
 8008764:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008768:	e003      	b.n	8008772 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800876a:	f7fe f931 	bl	80069d0 <HAL_RCC_GetPCLK1Freq>
 800876e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008776:	69db      	ldr	r3, [r3, #28]
 8008778:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800877c:	f040 810c 	bne.w	8008998 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008780:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008784:	2200      	movs	r2, #0
 8008786:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800878a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800878e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008792:	4622      	mov	r2, r4
 8008794:	462b      	mov	r3, r5
 8008796:	1891      	adds	r1, r2, r2
 8008798:	65b9      	str	r1, [r7, #88]	@ 0x58
 800879a:	415b      	adcs	r3, r3
 800879c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800879e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80087a2:	4621      	mov	r1, r4
 80087a4:	eb12 0801 	adds.w	r8, r2, r1
 80087a8:	4629      	mov	r1, r5
 80087aa:	eb43 0901 	adc.w	r9, r3, r1
 80087ae:	f04f 0200 	mov.w	r2, #0
 80087b2:	f04f 0300 	mov.w	r3, #0
 80087b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80087ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80087be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80087c2:	4690      	mov	r8, r2
 80087c4:	4699      	mov	r9, r3
 80087c6:	4623      	mov	r3, r4
 80087c8:	eb18 0303 	adds.w	r3, r8, r3
 80087cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80087d0:	462b      	mov	r3, r5
 80087d2:	eb49 0303 	adc.w	r3, r9, r3
 80087d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80087da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087de:	685b      	ldr	r3, [r3, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80087e6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80087ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80087ee:	460b      	mov	r3, r1
 80087f0:	18db      	adds	r3, r3, r3
 80087f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80087f4:	4613      	mov	r3, r2
 80087f6:	eb42 0303 	adc.w	r3, r2, r3
 80087fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80087fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008800:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008804:	f7f8 fa58 	bl	8000cb8 <__aeabi_uldivmod>
 8008808:	4602      	mov	r2, r0
 800880a:	460b      	mov	r3, r1
 800880c:	4b61      	ldr	r3, [pc, #388]	@ (8008994 <UART_SetConfig+0x2d4>)
 800880e:	fba3 2302 	umull	r2, r3, r3, r2
 8008812:	095b      	lsrs	r3, r3, #5
 8008814:	011c      	lsls	r4, r3, #4
 8008816:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800881a:	2200      	movs	r2, #0
 800881c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008820:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008824:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008828:	4642      	mov	r2, r8
 800882a:	464b      	mov	r3, r9
 800882c:	1891      	adds	r1, r2, r2
 800882e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008830:	415b      	adcs	r3, r3
 8008832:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008834:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008838:	4641      	mov	r1, r8
 800883a:	eb12 0a01 	adds.w	sl, r2, r1
 800883e:	4649      	mov	r1, r9
 8008840:	eb43 0b01 	adc.w	fp, r3, r1
 8008844:	f04f 0200 	mov.w	r2, #0
 8008848:	f04f 0300 	mov.w	r3, #0
 800884c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008850:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008854:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008858:	4692      	mov	sl, r2
 800885a:	469b      	mov	fp, r3
 800885c:	4643      	mov	r3, r8
 800885e:	eb1a 0303 	adds.w	r3, sl, r3
 8008862:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008866:	464b      	mov	r3, r9
 8008868:	eb4b 0303 	adc.w	r3, fp, r3
 800886c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800887c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008880:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008884:	460b      	mov	r3, r1
 8008886:	18db      	adds	r3, r3, r3
 8008888:	643b      	str	r3, [r7, #64]	@ 0x40
 800888a:	4613      	mov	r3, r2
 800888c:	eb42 0303 	adc.w	r3, r2, r3
 8008890:	647b      	str	r3, [r7, #68]	@ 0x44
 8008892:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008896:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800889a:	f7f8 fa0d 	bl	8000cb8 <__aeabi_uldivmod>
 800889e:	4602      	mov	r2, r0
 80088a0:	460b      	mov	r3, r1
 80088a2:	4611      	mov	r1, r2
 80088a4:	4b3b      	ldr	r3, [pc, #236]	@ (8008994 <UART_SetConfig+0x2d4>)
 80088a6:	fba3 2301 	umull	r2, r3, r3, r1
 80088aa:	095b      	lsrs	r3, r3, #5
 80088ac:	2264      	movs	r2, #100	@ 0x64
 80088ae:	fb02 f303 	mul.w	r3, r2, r3
 80088b2:	1acb      	subs	r3, r1, r3
 80088b4:	00db      	lsls	r3, r3, #3
 80088b6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80088ba:	4b36      	ldr	r3, [pc, #216]	@ (8008994 <UART_SetConfig+0x2d4>)
 80088bc:	fba3 2302 	umull	r2, r3, r3, r2
 80088c0:	095b      	lsrs	r3, r3, #5
 80088c2:	005b      	lsls	r3, r3, #1
 80088c4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80088c8:	441c      	add	r4, r3
 80088ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80088ce:	2200      	movs	r2, #0
 80088d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80088d4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80088d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80088dc:	4642      	mov	r2, r8
 80088de:	464b      	mov	r3, r9
 80088e0:	1891      	adds	r1, r2, r2
 80088e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80088e4:	415b      	adcs	r3, r3
 80088e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80088ec:	4641      	mov	r1, r8
 80088ee:	1851      	adds	r1, r2, r1
 80088f0:	6339      	str	r1, [r7, #48]	@ 0x30
 80088f2:	4649      	mov	r1, r9
 80088f4:	414b      	adcs	r3, r1
 80088f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80088f8:	f04f 0200 	mov.w	r2, #0
 80088fc:	f04f 0300 	mov.w	r3, #0
 8008900:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008904:	4659      	mov	r1, fp
 8008906:	00cb      	lsls	r3, r1, #3
 8008908:	4651      	mov	r1, sl
 800890a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800890e:	4651      	mov	r1, sl
 8008910:	00ca      	lsls	r2, r1, #3
 8008912:	4610      	mov	r0, r2
 8008914:	4619      	mov	r1, r3
 8008916:	4603      	mov	r3, r0
 8008918:	4642      	mov	r2, r8
 800891a:	189b      	adds	r3, r3, r2
 800891c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008920:	464b      	mov	r3, r9
 8008922:	460a      	mov	r2, r1
 8008924:	eb42 0303 	adc.w	r3, r2, r3
 8008928:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800892c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008938:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800893c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008940:	460b      	mov	r3, r1
 8008942:	18db      	adds	r3, r3, r3
 8008944:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008946:	4613      	mov	r3, r2
 8008948:	eb42 0303 	adc.w	r3, r2, r3
 800894c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800894e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008952:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008956:	f7f8 f9af 	bl	8000cb8 <__aeabi_uldivmod>
 800895a:	4602      	mov	r2, r0
 800895c:	460b      	mov	r3, r1
 800895e:	4b0d      	ldr	r3, [pc, #52]	@ (8008994 <UART_SetConfig+0x2d4>)
 8008960:	fba3 1302 	umull	r1, r3, r3, r2
 8008964:	095b      	lsrs	r3, r3, #5
 8008966:	2164      	movs	r1, #100	@ 0x64
 8008968:	fb01 f303 	mul.w	r3, r1, r3
 800896c:	1ad3      	subs	r3, r2, r3
 800896e:	00db      	lsls	r3, r3, #3
 8008970:	3332      	adds	r3, #50	@ 0x32
 8008972:	4a08      	ldr	r2, [pc, #32]	@ (8008994 <UART_SetConfig+0x2d4>)
 8008974:	fba2 2303 	umull	r2, r3, r2, r3
 8008978:	095b      	lsrs	r3, r3, #5
 800897a:	f003 0207 	and.w	r2, r3, #7
 800897e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4422      	add	r2, r4
 8008986:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008988:	e106      	b.n	8008b98 <UART_SetConfig+0x4d8>
 800898a:	bf00      	nop
 800898c:	40011000 	.word	0x40011000
 8008990:	40011400 	.word	0x40011400
 8008994:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008998:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800899c:	2200      	movs	r2, #0
 800899e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80089a2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80089a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80089aa:	4642      	mov	r2, r8
 80089ac:	464b      	mov	r3, r9
 80089ae:	1891      	adds	r1, r2, r2
 80089b0:	6239      	str	r1, [r7, #32]
 80089b2:	415b      	adcs	r3, r3
 80089b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80089b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80089ba:	4641      	mov	r1, r8
 80089bc:	1854      	adds	r4, r2, r1
 80089be:	4649      	mov	r1, r9
 80089c0:	eb43 0501 	adc.w	r5, r3, r1
 80089c4:	f04f 0200 	mov.w	r2, #0
 80089c8:	f04f 0300 	mov.w	r3, #0
 80089cc:	00eb      	lsls	r3, r5, #3
 80089ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80089d2:	00e2      	lsls	r2, r4, #3
 80089d4:	4614      	mov	r4, r2
 80089d6:	461d      	mov	r5, r3
 80089d8:	4643      	mov	r3, r8
 80089da:	18e3      	adds	r3, r4, r3
 80089dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80089e0:	464b      	mov	r3, r9
 80089e2:	eb45 0303 	adc.w	r3, r5, r3
 80089e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80089ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80089f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80089fa:	f04f 0200 	mov.w	r2, #0
 80089fe:	f04f 0300 	mov.w	r3, #0
 8008a02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008a06:	4629      	mov	r1, r5
 8008a08:	008b      	lsls	r3, r1, #2
 8008a0a:	4621      	mov	r1, r4
 8008a0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a10:	4621      	mov	r1, r4
 8008a12:	008a      	lsls	r2, r1, #2
 8008a14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008a18:	f7f8 f94e 	bl	8000cb8 <__aeabi_uldivmod>
 8008a1c:	4602      	mov	r2, r0
 8008a1e:	460b      	mov	r3, r1
 8008a20:	4b60      	ldr	r3, [pc, #384]	@ (8008ba4 <UART_SetConfig+0x4e4>)
 8008a22:	fba3 2302 	umull	r2, r3, r3, r2
 8008a26:	095b      	lsrs	r3, r3, #5
 8008a28:	011c      	lsls	r4, r3, #4
 8008a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008a34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008a38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008a3c:	4642      	mov	r2, r8
 8008a3e:	464b      	mov	r3, r9
 8008a40:	1891      	adds	r1, r2, r2
 8008a42:	61b9      	str	r1, [r7, #24]
 8008a44:	415b      	adcs	r3, r3
 8008a46:	61fb      	str	r3, [r7, #28]
 8008a48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008a4c:	4641      	mov	r1, r8
 8008a4e:	1851      	adds	r1, r2, r1
 8008a50:	6139      	str	r1, [r7, #16]
 8008a52:	4649      	mov	r1, r9
 8008a54:	414b      	adcs	r3, r1
 8008a56:	617b      	str	r3, [r7, #20]
 8008a58:	f04f 0200 	mov.w	r2, #0
 8008a5c:	f04f 0300 	mov.w	r3, #0
 8008a60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008a64:	4659      	mov	r1, fp
 8008a66:	00cb      	lsls	r3, r1, #3
 8008a68:	4651      	mov	r1, sl
 8008a6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a6e:	4651      	mov	r1, sl
 8008a70:	00ca      	lsls	r2, r1, #3
 8008a72:	4610      	mov	r0, r2
 8008a74:	4619      	mov	r1, r3
 8008a76:	4603      	mov	r3, r0
 8008a78:	4642      	mov	r2, r8
 8008a7a:	189b      	adds	r3, r3, r2
 8008a7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008a80:	464b      	mov	r3, r9
 8008a82:	460a      	mov	r2, r1
 8008a84:	eb42 0303 	adc.w	r3, r2, r3
 8008a88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008a96:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008a98:	f04f 0200 	mov.w	r2, #0
 8008a9c:	f04f 0300 	mov.w	r3, #0
 8008aa0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008aa4:	4649      	mov	r1, r9
 8008aa6:	008b      	lsls	r3, r1, #2
 8008aa8:	4641      	mov	r1, r8
 8008aaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008aae:	4641      	mov	r1, r8
 8008ab0:	008a      	lsls	r2, r1, #2
 8008ab2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008ab6:	f7f8 f8ff 	bl	8000cb8 <__aeabi_uldivmod>
 8008aba:	4602      	mov	r2, r0
 8008abc:	460b      	mov	r3, r1
 8008abe:	4611      	mov	r1, r2
 8008ac0:	4b38      	ldr	r3, [pc, #224]	@ (8008ba4 <UART_SetConfig+0x4e4>)
 8008ac2:	fba3 2301 	umull	r2, r3, r3, r1
 8008ac6:	095b      	lsrs	r3, r3, #5
 8008ac8:	2264      	movs	r2, #100	@ 0x64
 8008aca:	fb02 f303 	mul.w	r3, r2, r3
 8008ace:	1acb      	subs	r3, r1, r3
 8008ad0:	011b      	lsls	r3, r3, #4
 8008ad2:	3332      	adds	r3, #50	@ 0x32
 8008ad4:	4a33      	ldr	r2, [pc, #204]	@ (8008ba4 <UART_SetConfig+0x4e4>)
 8008ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8008ada:	095b      	lsrs	r3, r3, #5
 8008adc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ae0:	441c      	add	r4, r3
 8008ae2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	673b      	str	r3, [r7, #112]	@ 0x70
 8008aea:	677a      	str	r2, [r7, #116]	@ 0x74
 8008aec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008af0:	4642      	mov	r2, r8
 8008af2:	464b      	mov	r3, r9
 8008af4:	1891      	adds	r1, r2, r2
 8008af6:	60b9      	str	r1, [r7, #8]
 8008af8:	415b      	adcs	r3, r3
 8008afa:	60fb      	str	r3, [r7, #12]
 8008afc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b00:	4641      	mov	r1, r8
 8008b02:	1851      	adds	r1, r2, r1
 8008b04:	6039      	str	r1, [r7, #0]
 8008b06:	4649      	mov	r1, r9
 8008b08:	414b      	adcs	r3, r1
 8008b0a:	607b      	str	r3, [r7, #4]
 8008b0c:	f04f 0200 	mov.w	r2, #0
 8008b10:	f04f 0300 	mov.w	r3, #0
 8008b14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008b18:	4659      	mov	r1, fp
 8008b1a:	00cb      	lsls	r3, r1, #3
 8008b1c:	4651      	mov	r1, sl
 8008b1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008b22:	4651      	mov	r1, sl
 8008b24:	00ca      	lsls	r2, r1, #3
 8008b26:	4610      	mov	r0, r2
 8008b28:	4619      	mov	r1, r3
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	4642      	mov	r2, r8
 8008b2e:	189b      	adds	r3, r3, r2
 8008b30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b32:	464b      	mov	r3, r9
 8008b34:	460a      	mov	r2, r1
 8008b36:	eb42 0303 	adc.w	r3, r2, r3
 8008b3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	663b      	str	r3, [r7, #96]	@ 0x60
 8008b46:	667a      	str	r2, [r7, #100]	@ 0x64
 8008b48:	f04f 0200 	mov.w	r2, #0
 8008b4c:	f04f 0300 	mov.w	r3, #0
 8008b50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008b54:	4649      	mov	r1, r9
 8008b56:	008b      	lsls	r3, r1, #2
 8008b58:	4641      	mov	r1, r8
 8008b5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b5e:	4641      	mov	r1, r8
 8008b60:	008a      	lsls	r2, r1, #2
 8008b62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008b66:	f7f8 f8a7 	bl	8000cb8 <__aeabi_uldivmod>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8008ba4 <UART_SetConfig+0x4e4>)
 8008b70:	fba3 1302 	umull	r1, r3, r3, r2
 8008b74:	095b      	lsrs	r3, r3, #5
 8008b76:	2164      	movs	r1, #100	@ 0x64
 8008b78:	fb01 f303 	mul.w	r3, r1, r3
 8008b7c:	1ad3      	subs	r3, r2, r3
 8008b7e:	011b      	lsls	r3, r3, #4
 8008b80:	3332      	adds	r3, #50	@ 0x32
 8008b82:	4a08      	ldr	r2, [pc, #32]	@ (8008ba4 <UART_SetConfig+0x4e4>)
 8008b84:	fba2 2303 	umull	r2, r3, r2, r3
 8008b88:	095b      	lsrs	r3, r3, #5
 8008b8a:	f003 020f 	and.w	r2, r3, #15
 8008b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4422      	add	r2, r4
 8008b96:	609a      	str	r2, [r3, #8]
}
 8008b98:	bf00      	nop
 8008b9a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ba4:	51eb851f 	.word	0x51eb851f

08008ba8 <atof>:
 8008ba8:	2100      	movs	r1, #0
 8008baa:	f000 be0b 	b.w	80097c4 <strtod>

08008bae <sulp>:
 8008bae:	b570      	push	{r4, r5, r6, lr}
 8008bb0:	4604      	mov	r4, r0
 8008bb2:	460d      	mov	r5, r1
 8008bb4:	ec45 4b10 	vmov	d0, r4, r5
 8008bb8:	4616      	mov	r6, r2
 8008bba:	f003 fce5 	bl	800c588 <__ulp>
 8008bbe:	ec51 0b10 	vmov	r0, r1, d0
 8008bc2:	b17e      	cbz	r6, 8008be4 <sulp+0x36>
 8008bc4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008bc8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	dd09      	ble.n	8008be4 <sulp+0x36>
 8008bd0:	051b      	lsls	r3, r3, #20
 8008bd2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008bd6:	2400      	movs	r4, #0
 8008bd8:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008bdc:	4622      	mov	r2, r4
 8008bde:	462b      	mov	r3, r5
 8008be0:	f7f7 fd22 	bl	8000628 <__aeabi_dmul>
 8008be4:	ec41 0b10 	vmov	d0, r0, r1
 8008be8:	bd70      	pop	{r4, r5, r6, pc}
 8008bea:	0000      	movs	r0, r0
 8008bec:	0000      	movs	r0, r0
	...

08008bf0 <_strtod_l>:
 8008bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf4:	b09f      	sub	sp, #124	@ 0x7c
 8008bf6:	460c      	mov	r4, r1
 8008bf8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	921a      	str	r2, [sp, #104]	@ 0x68
 8008bfe:	9005      	str	r0, [sp, #20]
 8008c00:	f04f 0a00 	mov.w	sl, #0
 8008c04:	f04f 0b00 	mov.w	fp, #0
 8008c08:	460a      	mov	r2, r1
 8008c0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c0c:	7811      	ldrb	r1, [r2, #0]
 8008c0e:	292b      	cmp	r1, #43	@ 0x2b
 8008c10:	d04a      	beq.n	8008ca8 <_strtod_l+0xb8>
 8008c12:	d838      	bhi.n	8008c86 <_strtod_l+0x96>
 8008c14:	290d      	cmp	r1, #13
 8008c16:	d832      	bhi.n	8008c7e <_strtod_l+0x8e>
 8008c18:	2908      	cmp	r1, #8
 8008c1a:	d832      	bhi.n	8008c82 <_strtod_l+0x92>
 8008c1c:	2900      	cmp	r1, #0
 8008c1e:	d03b      	beq.n	8008c98 <_strtod_l+0xa8>
 8008c20:	2200      	movs	r2, #0
 8008c22:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c24:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008c26:	782a      	ldrb	r2, [r5, #0]
 8008c28:	2a30      	cmp	r2, #48	@ 0x30
 8008c2a:	f040 80b2 	bne.w	8008d92 <_strtod_l+0x1a2>
 8008c2e:	786a      	ldrb	r2, [r5, #1]
 8008c30:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008c34:	2a58      	cmp	r2, #88	@ 0x58
 8008c36:	d16e      	bne.n	8008d16 <_strtod_l+0x126>
 8008c38:	9302      	str	r3, [sp, #8]
 8008c3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c3c:	9301      	str	r3, [sp, #4]
 8008c3e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008c40:	9300      	str	r3, [sp, #0]
 8008c42:	4a8f      	ldr	r2, [pc, #572]	@ (8008e80 <_strtod_l+0x290>)
 8008c44:	9805      	ldr	r0, [sp, #20]
 8008c46:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008c48:	a919      	add	r1, sp, #100	@ 0x64
 8008c4a:	f002 fd97 	bl	800b77c <__gethex>
 8008c4e:	f010 060f 	ands.w	r6, r0, #15
 8008c52:	4604      	mov	r4, r0
 8008c54:	d005      	beq.n	8008c62 <_strtod_l+0x72>
 8008c56:	2e06      	cmp	r6, #6
 8008c58:	d128      	bne.n	8008cac <_strtod_l+0xbc>
 8008c5a:	3501      	adds	r5, #1
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008c60:	930e      	str	r3, [sp, #56]	@ 0x38
 8008c62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	f040 858e 	bne.w	8009786 <_strtod_l+0xb96>
 8008c6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c6c:	b1cb      	cbz	r3, 8008ca2 <_strtod_l+0xb2>
 8008c6e:	4652      	mov	r2, sl
 8008c70:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008c74:	ec43 2b10 	vmov	d0, r2, r3
 8008c78:	b01f      	add	sp, #124	@ 0x7c
 8008c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c7e:	2920      	cmp	r1, #32
 8008c80:	d1ce      	bne.n	8008c20 <_strtod_l+0x30>
 8008c82:	3201      	adds	r2, #1
 8008c84:	e7c1      	b.n	8008c0a <_strtod_l+0x1a>
 8008c86:	292d      	cmp	r1, #45	@ 0x2d
 8008c88:	d1ca      	bne.n	8008c20 <_strtod_l+0x30>
 8008c8a:	2101      	movs	r1, #1
 8008c8c:	910e      	str	r1, [sp, #56]	@ 0x38
 8008c8e:	1c51      	adds	r1, r2, #1
 8008c90:	9119      	str	r1, [sp, #100]	@ 0x64
 8008c92:	7852      	ldrb	r2, [r2, #1]
 8008c94:	2a00      	cmp	r2, #0
 8008c96:	d1c5      	bne.n	8008c24 <_strtod_l+0x34>
 8008c98:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008c9a:	9419      	str	r4, [sp, #100]	@ 0x64
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	f040 8570 	bne.w	8009782 <_strtod_l+0xb92>
 8008ca2:	4652      	mov	r2, sl
 8008ca4:	465b      	mov	r3, fp
 8008ca6:	e7e5      	b.n	8008c74 <_strtod_l+0x84>
 8008ca8:	2100      	movs	r1, #0
 8008caa:	e7ef      	b.n	8008c8c <_strtod_l+0x9c>
 8008cac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008cae:	b13a      	cbz	r2, 8008cc0 <_strtod_l+0xd0>
 8008cb0:	2135      	movs	r1, #53	@ 0x35
 8008cb2:	a81c      	add	r0, sp, #112	@ 0x70
 8008cb4:	f003 fd62 	bl	800c77c <__copybits>
 8008cb8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008cba:	9805      	ldr	r0, [sp, #20]
 8008cbc:	f003 f938 	bl	800bf30 <_Bfree>
 8008cc0:	3e01      	subs	r6, #1
 8008cc2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008cc4:	2e04      	cmp	r6, #4
 8008cc6:	d806      	bhi.n	8008cd6 <_strtod_l+0xe6>
 8008cc8:	e8df f006 	tbb	[pc, r6]
 8008ccc:	201d0314 	.word	0x201d0314
 8008cd0:	14          	.byte	0x14
 8008cd1:	00          	.byte	0x00
 8008cd2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008cd6:	05e1      	lsls	r1, r4, #23
 8008cd8:	bf48      	it	mi
 8008cda:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008cde:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008ce2:	0d1b      	lsrs	r3, r3, #20
 8008ce4:	051b      	lsls	r3, r3, #20
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d1bb      	bne.n	8008c62 <_strtod_l+0x72>
 8008cea:	f001 fdd5 	bl	800a898 <__errno>
 8008cee:	2322      	movs	r3, #34	@ 0x22
 8008cf0:	6003      	str	r3, [r0, #0]
 8008cf2:	e7b6      	b.n	8008c62 <_strtod_l+0x72>
 8008cf4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008cf8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008cfc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008d00:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008d04:	e7e7      	b.n	8008cd6 <_strtod_l+0xe6>
 8008d06:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8008e88 <_strtod_l+0x298>
 8008d0a:	e7e4      	b.n	8008cd6 <_strtod_l+0xe6>
 8008d0c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008d10:	f04f 3aff 	mov.w	sl, #4294967295
 8008d14:	e7df      	b.n	8008cd6 <_strtod_l+0xe6>
 8008d16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d18:	1c5a      	adds	r2, r3, #1
 8008d1a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d1c:	785b      	ldrb	r3, [r3, #1]
 8008d1e:	2b30      	cmp	r3, #48	@ 0x30
 8008d20:	d0f9      	beq.n	8008d16 <_strtod_l+0x126>
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d09d      	beq.n	8008c62 <_strtod_l+0x72>
 8008d26:	2301      	movs	r3, #1
 8008d28:	2700      	movs	r7, #0
 8008d2a:	9308      	str	r3, [sp, #32]
 8008d2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d2e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008d30:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008d32:	46b9      	mov	r9, r7
 8008d34:	220a      	movs	r2, #10
 8008d36:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008d38:	7805      	ldrb	r5, [r0, #0]
 8008d3a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008d3e:	b2d9      	uxtb	r1, r3
 8008d40:	2909      	cmp	r1, #9
 8008d42:	d928      	bls.n	8008d96 <_strtod_l+0x1a6>
 8008d44:	494f      	ldr	r1, [pc, #316]	@ (8008e84 <_strtod_l+0x294>)
 8008d46:	2201      	movs	r2, #1
 8008d48:	f001 fcdb 	bl	800a702 <strncmp>
 8008d4c:	2800      	cmp	r0, #0
 8008d4e:	d032      	beq.n	8008db6 <_strtod_l+0x1c6>
 8008d50:	2000      	movs	r0, #0
 8008d52:	462a      	mov	r2, r5
 8008d54:	900a      	str	r0, [sp, #40]	@ 0x28
 8008d56:	464d      	mov	r5, r9
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2a65      	cmp	r2, #101	@ 0x65
 8008d5c:	d001      	beq.n	8008d62 <_strtod_l+0x172>
 8008d5e:	2a45      	cmp	r2, #69	@ 0x45
 8008d60:	d114      	bne.n	8008d8c <_strtod_l+0x19c>
 8008d62:	b91d      	cbnz	r5, 8008d6c <_strtod_l+0x17c>
 8008d64:	9a08      	ldr	r2, [sp, #32]
 8008d66:	4302      	orrs	r2, r0
 8008d68:	d096      	beq.n	8008c98 <_strtod_l+0xa8>
 8008d6a:	2500      	movs	r5, #0
 8008d6c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008d6e:	1c62      	adds	r2, r4, #1
 8008d70:	9219      	str	r2, [sp, #100]	@ 0x64
 8008d72:	7862      	ldrb	r2, [r4, #1]
 8008d74:	2a2b      	cmp	r2, #43	@ 0x2b
 8008d76:	d07a      	beq.n	8008e6e <_strtod_l+0x27e>
 8008d78:	2a2d      	cmp	r2, #45	@ 0x2d
 8008d7a:	d07e      	beq.n	8008e7a <_strtod_l+0x28a>
 8008d7c:	f04f 0c00 	mov.w	ip, #0
 8008d80:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008d84:	2909      	cmp	r1, #9
 8008d86:	f240 8085 	bls.w	8008e94 <_strtod_l+0x2a4>
 8008d8a:	9419      	str	r4, [sp, #100]	@ 0x64
 8008d8c:	f04f 0800 	mov.w	r8, #0
 8008d90:	e0a5      	b.n	8008ede <_strtod_l+0x2ee>
 8008d92:	2300      	movs	r3, #0
 8008d94:	e7c8      	b.n	8008d28 <_strtod_l+0x138>
 8008d96:	f1b9 0f08 	cmp.w	r9, #8
 8008d9a:	bfd8      	it	le
 8008d9c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008d9e:	f100 0001 	add.w	r0, r0, #1
 8008da2:	bfda      	itte	le
 8008da4:	fb02 3301 	mlale	r3, r2, r1, r3
 8008da8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008daa:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008dae:	f109 0901 	add.w	r9, r9, #1
 8008db2:	9019      	str	r0, [sp, #100]	@ 0x64
 8008db4:	e7bf      	b.n	8008d36 <_strtod_l+0x146>
 8008db6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008db8:	1c5a      	adds	r2, r3, #1
 8008dba:	9219      	str	r2, [sp, #100]	@ 0x64
 8008dbc:	785a      	ldrb	r2, [r3, #1]
 8008dbe:	f1b9 0f00 	cmp.w	r9, #0
 8008dc2:	d03b      	beq.n	8008e3c <_strtod_l+0x24c>
 8008dc4:	900a      	str	r0, [sp, #40]	@ 0x28
 8008dc6:	464d      	mov	r5, r9
 8008dc8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008dcc:	2b09      	cmp	r3, #9
 8008dce:	d912      	bls.n	8008df6 <_strtod_l+0x206>
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e7c2      	b.n	8008d5a <_strtod_l+0x16a>
 8008dd4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008dd6:	1c5a      	adds	r2, r3, #1
 8008dd8:	9219      	str	r2, [sp, #100]	@ 0x64
 8008dda:	785a      	ldrb	r2, [r3, #1]
 8008ddc:	3001      	adds	r0, #1
 8008dde:	2a30      	cmp	r2, #48	@ 0x30
 8008de0:	d0f8      	beq.n	8008dd4 <_strtod_l+0x1e4>
 8008de2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008de6:	2b08      	cmp	r3, #8
 8008de8:	f200 84d2 	bhi.w	8009790 <_strtod_l+0xba0>
 8008dec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008dee:	900a      	str	r0, [sp, #40]	@ 0x28
 8008df0:	2000      	movs	r0, #0
 8008df2:	930c      	str	r3, [sp, #48]	@ 0x30
 8008df4:	4605      	mov	r5, r0
 8008df6:	3a30      	subs	r2, #48	@ 0x30
 8008df8:	f100 0301 	add.w	r3, r0, #1
 8008dfc:	d018      	beq.n	8008e30 <_strtod_l+0x240>
 8008dfe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008e00:	4419      	add	r1, r3
 8008e02:	910a      	str	r1, [sp, #40]	@ 0x28
 8008e04:	462e      	mov	r6, r5
 8008e06:	f04f 0e0a 	mov.w	lr, #10
 8008e0a:	1c71      	adds	r1, r6, #1
 8008e0c:	eba1 0c05 	sub.w	ip, r1, r5
 8008e10:	4563      	cmp	r3, ip
 8008e12:	dc15      	bgt.n	8008e40 <_strtod_l+0x250>
 8008e14:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008e18:	182b      	adds	r3, r5, r0
 8008e1a:	2b08      	cmp	r3, #8
 8008e1c:	f105 0501 	add.w	r5, r5, #1
 8008e20:	4405      	add	r5, r0
 8008e22:	dc1a      	bgt.n	8008e5a <_strtod_l+0x26a>
 8008e24:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008e26:	230a      	movs	r3, #10
 8008e28:	fb03 2301 	mla	r3, r3, r1, r2
 8008e2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008e2e:	2300      	movs	r3, #0
 8008e30:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e32:	1c51      	adds	r1, r2, #1
 8008e34:	9119      	str	r1, [sp, #100]	@ 0x64
 8008e36:	7852      	ldrb	r2, [r2, #1]
 8008e38:	4618      	mov	r0, r3
 8008e3a:	e7c5      	b.n	8008dc8 <_strtod_l+0x1d8>
 8008e3c:	4648      	mov	r0, r9
 8008e3e:	e7ce      	b.n	8008dde <_strtod_l+0x1ee>
 8008e40:	2e08      	cmp	r6, #8
 8008e42:	dc05      	bgt.n	8008e50 <_strtod_l+0x260>
 8008e44:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008e46:	fb0e f606 	mul.w	r6, lr, r6
 8008e4a:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008e4c:	460e      	mov	r6, r1
 8008e4e:	e7dc      	b.n	8008e0a <_strtod_l+0x21a>
 8008e50:	2910      	cmp	r1, #16
 8008e52:	bfd8      	it	le
 8008e54:	fb0e f707 	mulle.w	r7, lr, r7
 8008e58:	e7f8      	b.n	8008e4c <_strtod_l+0x25c>
 8008e5a:	2b0f      	cmp	r3, #15
 8008e5c:	bfdc      	itt	le
 8008e5e:	230a      	movle	r3, #10
 8008e60:	fb03 2707 	mlale	r7, r3, r7, r2
 8008e64:	e7e3      	b.n	8008e2e <_strtod_l+0x23e>
 8008e66:	2300      	movs	r3, #0
 8008e68:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	e77a      	b.n	8008d64 <_strtod_l+0x174>
 8008e6e:	f04f 0c00 	mov.w	ip, #0
 8008e72:	1ca2      	adds	r2, r4, #2
 8008e74:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e76:	78a2      	ldrb	r2, [r4, #2]
 8008e78:	e782      	b.n	8008d80 <_strtod_l+0x190>
 8008e7a:	f04f 0c01 	mov.w	ip, #1
 8008e7e:	e7f8      	b.n	8008e72 <_strtod_l+0x282>
 8008e80:	0800d958 	.word	0x0800d958
 8008e84:	0800d714 	.word	0x0800d714
 8008e88:	7ff00000 	.word	0x7ff00000
 8008e8c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008e8e:	1c51      	adds	r1, r2, #1
 8008e90:	9119      	str	r1, [sp, #100]	@ 0x64
 8008e92:	7852      	ldrb	r2, [r2, #1]
 8008e94:	2a30      	cmp	r2, #48	@ 0x30
 8008e96:	d0f9      	beq.n	8008e8c <_strtod_l+0x29c>
 8008e98:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008e9c:	2908      	cmp	r1, #8
 8008e9e:	f63f af75 	bhi.w	8008d8c <_strtod_l+0x19c>
 8008ea2:	3a30      	subs	r2, #48	@ 0x30
 8008ea4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ea6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008ea8:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008eaa:	f04f 080a 	mov.w	r8, #10
 8008eae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008eb0:	1c56      	adds	r6, r2, #1
 8008eb2:	9619      	str	r6, [sp, #100]	@ 0x64
 8008eb4:	7852      	ldrb	r2, [r2, #1]
 8008eb6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008eba:	f1be 0f09 	cmp.w	lr, #9
 8008ebe:	d939      	bls.n	8008f34 <_strtod_l+0x344>
 8008ec0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008ec2:	1a76      	subs	r6, r6, r1
 8008ec4:	2e08      	cmp	r6, #8
 8008ec6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008eca:	dc03      	bgt.n	8008ed4 <_strtod_l+0x2e4>
 8008ecc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008ece:	4588      	cmp	r8, r1
 8008ed0:	bfa8      	it	ge
 8008ed2:	4688      	movge	r8, r1
 8008ed4:	f1bc 0f00 	cmp.w	ip, #0
 8008ed8:	d001      	beq.n	8008ede <_strtod_l+0x2ee>
 8008eda:	f1c8 0800 	rsb	r8, r8, #0
 8008ede:	2d00      	cmp	r5, #0
 8008ee0:	d14e      	bne.n	8008f80 <_strtod_l+0x390>
 8008ee2:	9908      	ldr	r1, [sp, #32]
 8008ee4:	4308      	orrs	r0, r1
 8008ee6:	f47f aebc 	bne.w	8008c62 <_strtod_l+0x72>
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f47f aed4 	bne.w	8008c98 <_strtod_l+0xa8>
 8008ef0:	2a69      	cmp	r2, #105	@ 0x69
 8008ef2:	d028      	beq.n	8008f46 <_strtod_l+0x356>
 8008ef4:	dc25      	bgt.n	8008f42 <_strtod_l+0x352>
 8008ef6:	2a49      	cmp	r2, #73	@ 0x49
 8008ef8:	d025      	beq.n	8008f46 <_strtod_l+0x356>
 8008efa:	2a4e      	cmp	r2, #78	@ 0x4e
 8008efc:	f47f aecc 	bne.w	8008c98 <_strtod_l+0xa8>
 8008f00:	499a      	ldr	r1, [pc, #616]	@ (800916c <_strtod_l+0x57c>)
 8008f02:	a819      	add	r0, sp, #100	@ 0x64
 8008f04:	f002 fe5c 	bl	800bbc0 <__match>
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	f43f aec5 	beq.w	8008c98 <_strtod_l+0xa8>
 8008f0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	2b28      	cmp	r3, #40	@ 0x28
 8008f14:	d12e      	bne.n	8008f74 <_strtod_l+0x384>
 8008f16:	4996      	ldr	r1, [pc, #600]	@ (8009170 <_strtod_l+0x580>)
 8008f18:	aa1c      	add	r2, sp, #112	@ 0x70
 8008f1a:	a819      	add	r0, sp, #100	@ 0x64
 8008f1c:	f002 fe64 	bl	800bbe8 <__hexnan>
 8008f20:	2805      	cmp	r0, #5
 8008f22:	d127      	bne.n	8008f74 <_strtod_l+0x384>
 8008f24:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008f26:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008f2a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008f2e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008f32:	e696      	b.n	8008c62 <_strtod_l+0x72>
 8008f34:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f36:	fb08 2101 	mla	r1, r8, r1, r2
 8008f3a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008f3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f40:	e7b5      	b.n	8008eae <_strtod_l+0x2be>
 8008f42:	2a6e      	cmp	r2, #110	@ 0x6e
 8008f44:	e7da      	b.n	8008efc <_strtod_l+0x30c>
 8008f46:	498b      	ldr	r1, [pc, #556]	@ (8009174 <_strtod_l+0x584>)
 8008f48:	a819      	add	r0, sp, #100	@ 0x64
 8008f4a:	f002 fe39 	bl	800bbc0 <__match>
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	f43f aea2 	beq.w	8008c98 <_strtod_l+0xa8>
 8008f54:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f56:	4988      	ldr	r1, [pc, #544]	@ (8009178 <_strtod_l+0x588>)
 8008f58:	3b01      	subs	r3, #1
 8008f5a:	a819      	add	r0, sp, #100	@ 0x64
 8008f5c:	9319      	str	r3, [sp, #100]	@ 0x64
 8008f5e:	f002 fe2f 	bl	800bbc0 <__match>
 8008f62:	b910      	cbnz	r0, 8008f6a <_strtod_l+0x37a>
 8008f64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008f66:	3301      	adds	r3, #1
 8008f68:	9319      	str	r3, [sp, #100]	@ 0x64
 8008f6a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8009188 <_strtod_l+0x598>
 8008f6e:	f04f 0a00 	mov.w	sl, #0
 8008f72:	e676      	b.n	8008c62 <_strtod_l+0x72>
 8008f74:	4881      	ldr	r0, [pc, #516]	@ (800917c <_strtod_l+0x58c>)
 8008f76:	f001 fccb 	bl	800a910 <nan>
 8008f7a:	ec5b ab10 	vmov	sl, fp, d0
 8008f7e:	e670      	b.n	8008c62 <_strtod_l+0x72>
 8008f80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f82:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008f84:	eba8 0303 	sub.w	r3, r8, r3
 8008f88:	f1b9 0f00 	cmp.w	r9, #0
 8008f8c:	bf08      	it	eq
 8008f8e:	46a9      	moveq	r9, r5
 8008f90:	2d10      	cmp	r5, #16
 8008f92:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f94:	462c      	mov	r4, r5
 8008f96:	bfa8      	it	ge
 8008f98:	2410      	movge	r4, #16
 8008f9a:	f7f7 facb 	bl	8000534 <__aeabi_ui2d>
 8008f9e:	2d09      	cmp	r5, #9
 8008fa0:	4682      	mov	sl, r0
 8008fa2:	468b      	mov	fp, r1
 8008fa4:	dc13      	bgt.n	8008fce <_strtod_l+0x3de>
 8008fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	f43f ae5a 	beq.w	8008c62 <_strtod_l+0x72>
 8008fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fb0:	dd78      	ble.n	80090a4 <_strtod_l+0x4b4>
 8008fb2:	2b16      	cmp	r3, #22
 8008fb4:	dc5f      	bgt.n	8009076 <_strtod_l+0x486>
 8008fb6:	4972      	ldr	r1, [pc, #456]	@ (8009180 <_strtod_l+0x590>)
 8008fb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008fbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008fc0:	4652      	mov	r2, sl
 8008fc2:	465b      	mov	r3, fp
 8008fc4:	f7f7 fb30 	bl	8000628 <__aeabi_dmul>
 8008fc8:	4682      	mov	sl, r0
 8008fca:	468b      	mov	fp, r1
 8008fcc:	e649      	b.n	8008c62 <_strtod_l+0x72>
 8008fce:	4b6c      	ldr	r3, [pc, #432]	@ (8009180 <_strtod_l+0x590>)
 8008fd0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008fd4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008fd8:	f7f7 fb26 	bl	8000628 <__aeabi_dmul>
 8008fdc:	4682      	mov	sl, r0
 8008fde:	4638      	mov	r0, r7
 8008fe0:	468b      	mov	fp, r1
 8008fe2:	f7f7 faa7 	bl	8000534 <__aeabi_ui2d>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	460b      	mov	r3, r1
 8008fea:	4650      	mov	r0, sl
 8008fec:	4659      	mov	r1, fp
 8008fee:	f7f7 f965 	bl	80002bc <__adddf3>
 8008ff2:	2d0f      	cmp	r5, #15
 8008ff4:	4682      	mov	sl, r0
 8008ff6:	468b      	mov	fp, r1
 8008ff8:	ddd5      	ble.n	8008fa6 <_strtod_l+0x3b6>
 8008ffa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ffc:	1b2c      	subs	r4, r5, r4
 8008ffe:	441c      	add	r4, r3
 8009000:	2c00      	cmp	r4, #0
 8009002:	f340 8093 	ble.w	800912c <_strtod_l+0x53c>
 8009006:	f014 030f 	ands.w	r3, r4, #15
 800900a:	d00a      	beq.n	8009022 <_strtod_l+0x432>
 800900c:	495c      	ldr	r1, [pc, #368]	@ (8009180 <_strtod_l+0x590>)
 800900e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009012:	4652      	mov	r2, sl
 8009014:	465b      	mov	r3, fp
 8009016:	e9d1 0100 	ldrd	r0, r1, [r1]
 800901a:	f7f7 fb05 	bl	8000628 <__aeabi_dmul>
 800901e:	4682      	mov	sl, r0
 8009020:	468b      	mov	fp, r1
 8009022:	f034 040f 	bics.w	r4, r4, #15
 8009026:	d073      	beq.n	8009110 <_strtod_l+0x520>
 8009028:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800902c:	dd49      	ble.n	80090c2 <_strtod_l+0x4d2>
 800902e:	2400      	movs	r4, #0
 8009030:	46a0      	mov	r8, r4
 8009032:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009034:	46a1      	mov	r9, r4
 8009036:	9a05      	ldr	r2, [sp, #20]
 8009038:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8009188 <_strtod_l+0x598>
 800903c:	2322      	movs	r3, #34	@ 0x22
 800903e:	6013      	str	r3, [r2, #0]
 8009040:	f04f 0a00 	mov.w	sl, #0
 8009044:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009046:	2b00      	cmp	r3, #0
 8009048:	f43f ae0b 	beq.w	8008c62 <_strtod_l+0x72>
 800904c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800904e:	9805      	ldr	r0, [sp, #20]
 8009050:	f002 ff6e 	bl	800bf30 <_Bfree>
 8009054:	9805      	ldr	r0, [sp, #20]
 8009056:	4649      	mov	r1, r9
 8009058:	f002 ff6a 	bl	800bf30 <_Bfree>
 800905c:	9805      	ldr	r0, [sp, #20]
 800905e:	4641      	mov	r1, r8
 8009060:	f002 ff66 	bl	800bf30 <_Bfree>
 8009064:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009066:	9805      	ldr	r0, [sp, #20]
 8009068:	f002 ff62 	bl	800bf30 <_Bfree>
 800906c:	9805      	ldr	r0, [sp, #20]
 800906e:	4621      	mov	r1, r4
 8009070:	f002 ff5e 	bl	800bf30 <_Bfree>
 8009074:	e5f5      	b.n	8008c62 <_strtod_l+0x72>
 8009076:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009078:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800907c:	4293      	cmp	r3, r2
 800907e:	dbbc      	blt.n	8008ffa <_strtod_l+0x40a>
 8009080:	4c3f      	ldr	r4, [pc, #252]	@ (8009180 <_strtod_l+0x590>)
 8009082:	f1c5 050f 	rsb	r5, r5, #15
 8009086:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800908a:	4652      	mov	r2, sl
 800908c:	465b      	mov	r3, fp
 800908e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009092:	f7f7 fac9 	bl	8000628 <__aeabi_dmul>
 8009096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009098:	1b5d      	subs	r5, r3, r5
 800909a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800909e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80090a2:	e78f      	b.n	8008fc4 <_strtod_l+0x3d4>
 80090a4:	3316      	adds	r3, #22
 80090a6:	dba8      	blt.n	8008ffa <_strtod_l+0x40a>
 80090a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090aa:	eba3 0808 	sub.w	r8, r3, r8
 80090ae:	4b34      	ldr	r3, [pc, #208]	@ (8009180 <_strtod_l+0x590>)
 80090b0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80090b4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80090b8:	4650      	mov	r0, sl
 80090ba:	4659      	mov	r1, fp
 80090bc:	f7f7 fbde 	bl	800087c <__aeabi_ddiv>
 80090c0:	e782      	b.n	8008fc8 <_strtod_l+0x3d8>
 80090c2:	2300      	movs	r3, #0
 80090c4:	4f2f      	ldr	r7, [pc, #188]	@ (8009184 <_strtod_l+0x594>)
 80090c6:	1124      	asrs	r4, r4, #4
 80090c8:	4650      	mov	r0, sl
 80090ca:	4659      	mov	r1, fp
 80090cc:	461e      	mov	r6, r3
 80090ce:	2c01      	cmp	r4, #1
 80090d0:	dc21      	bgt.n	8009116 <_strtod_l+0x526>
 80090d2:	b10b      	cbz	r3, 80090d8 <_strtod_l+0x4e8>
 80090d4:	4682      	mov	sl, r0
 80090d6:	468b      	mov	fp, r1
 80090d8:	492a      	ldr	r1, [pc, #168]	@ (8009184 <_strtod_l+0x594>)
 80090da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80090de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80090e2:	4652      	mov	r2, sl
 80090e4:	465b      	mov	r3, fp
 80090e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090ea:	f7f7 fa9d 	bl	8000628 <__aeabi_dmul>
 80090ee:	4b26      	ldr	r3, [pc, #152]	@ (8009188 <_strtod_l+0x598>)
 80090f0:	460a      	mov	r2, r1
 80090f2:	400b      	ands	r3, r1
 80090f4:	4925      	ldr	r1, [pc, #148]	@ (800918c <_strtod_l+0x59c>)
 80090f6:	428b      	cmp	r3, r1
 80090f8:	4682      	mov	sl, r0
 80090fa:	d898      	bhi.n	800902e <_strtod_l+0x43e>
 80090fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009100:	428b      	cmp	r3, r1
 8009102:	bf86      	itte	hi
 8009104:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8009190 <_strtod_l+0x5a0>
 8009108:	f04f 3aff 	movhi.w	sl, #4294967295
 800910c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009110:	2300      	movs	r3, #0
 8009112:	9308      	str	r3, [sp, #32]
 8009114:	e076      	b.n	8009204 <_strtod_l+0x614>
 8009116:	07e2      	lsls	r2, r4, #31
 8009118:	d504      	bpl.n	8009124 <_strtod_l+0x534>
 800911a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800911e:	f7f7 fa83 	bl	8000628 <__aeabi_dmul>
 8009122:	2301      	movs	r3, #1
 8009124:	3601      	adds	r6, #1
 8009126:	1064      	asrs	r4, r4, #1
 8009128:	3708      	adds	r7, #8
 800912a:	e7d0      	b.n	80090ce <_strtod_l+0x4de>
 800912c:	d0f0      	beq.n	8009110 <_strtod_l+0x520>
 800912e:	4264      	negs	r4, r4
 8009130:	f014 020f 	ands.w	r2, r4, #15
 8009134:	d00a      	beq.n	800914c <_strtod_l+0x55c>
 8009136:	4b12      	ldr	r3, [pc, #72]	@ (8009180 <_strtod_l+0x590>)
 8009138:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800913c:	4650      	mov	r0, sl
 800913e:	4659      	mov	r1, fp
 8009140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009144:	f7f7 fb9a 	bl	800087c <__aeabi_ddiv>
 8009148:	4682      	mov	sl, r0
 800914a:	468b      	mov	fp, r1
 800914c:	1124      	asrs	r4, r4, #4
 800914e:	d0df      	beq.n	8009110 <_strtod_l+0x520>
 8009150:	2c1f      	cmp	r4, #31
 8009152:	dd1f      	ble.n	8009194 <_strtod_l+0x5a4>
 8009154:	2400      	movs	r4, #0
 8009156:	46a0      	mov	r8, r4
 8009158:	940b      	str	r4, [sp, #44]	@ 0x2c
 800915a:	46a1      	mov	r9, r4
 800915c:	9a05      	ldr	r2, [sp, #20]
 800915e:	2322      	movs	r3, #34	@ 0x22
 8009160:	f04f 0a00 	mov.w	sl, #0
 8009164:	f04f 0b00 	mov.w	fp, #0
 8009168:	6013      	str	r3, [r2, #0]
 800916a:	e76b      	b.n	8009044 <_strtod_l+0x454>
 800916c:	0800d723 	.word	0x0800d723
 8009170:	0800d944 	.word	0x0800d944
 8009174:	0800d71b 	.word	0x0800d71b
 8009178:	0800d807 	.word	0x0800d807
 800917c:	0800d803 	.word	0x0800d803
 8009180:	0800d9d0 	.word	0x0800d9d0
 8009184:	0800d9a8 	.word	0x0800d9a8
 8009188:	7ff00000 	.word	0x7ff00000
 800918c:	7ca00000 	.word	0x7ca00000
 8009190:	7fefffff 	.word	0x7fefffff
 8009194:	f014 0310 	ands.w	r3, r4, #16
 8009198:	bf18      	it	ne
 800919a:	236a      	movne	r3, #106	@ 0x6a
 800919c:	4ea9      	ldr	r6, [pc, #676]	@ (8009444 <_strtod_l+0x854>)
 800919e:	9308      	str	r3, [sp, #32]
 80091a0:	4650      	mov	r0, sl
 80091a2:	4659      	mov	r1, fp
 80091a4:	2300      	movs	r3, #0
 80091a6:	07e7      	lsls	r7, r4, #31
 80091a8:	d504      	bpl.n	80091b4 <_strtod_l+0x5c4>
 80091aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80091ae:	f7f7 fa3b 	bl	8000628 <__aeabi_dmul>
 80091b2:	2301      	movs	r3, #1
 80091b4:	1064      	asrs	r4, r4, #1
 80091b6:	f106 0608 	add.w	r6, r6, #8
 80091ba:	d1f4      	bne.n	80091a6 <_strtod_l+0x5b6>
 80091bc:	b10b      	cbz	r3, 80091c2 <_strtod_l+0x5d2>
 80091be:	4682      	mov	sl, r0
 80091c0:	468b      	mov	fp, r1
 80091c2:	9b08      	ldr	r3, [sp, #32]
 80091c4:	b1b3      	cbz	r3, 80091f4 <_strtod_l+0x604>
 80091c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80091ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	4659      	mov	r1, fp
 80091d2:	dd0f      	ble.n	80091f4 <_strtod_l+0x604>
 80091d4:	2b1f      	cmp	r3, #31
 80091d6:	dd56      	ble.n	8009286 <_strtod_l+0x696>
 80091d8:	2b34      	cmp	r3, #52	@ 0x34
 80091da:	bfde      	ittt	le
 80091dc:	f04f 33ff 	movle.w	r3, #4294967295
 80091e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80091e4:	4093      	lslle	r3, r2
 80091e6:	f04f 0a00 	mov.w	sl, #0
 80091ea:	bfcc      	ite	gt
 80091ec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80091f0:	ea03 0b01 	andle.w	fp, r3, r1
 80091f4:	2200      	movs	r2, #0
 80091f6:	2300      	movs	r3, #0
 80091f8:	4650      	mov	r0, sl
 80091fa:	4659      	mov	r1, fp
 80091fc:	f7f7 fc7c 	bl	8000af8 <__aeabi_dcmpeq>
 8009200:	2800      	cmp	r0, #0
 8009202:	d1a7      	bne.n	8009154 <_strtod_l+0x564>
 8009204:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009206:	9300      	str	r3, [sp, #0]
 8009208:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800920a:	9805      	ldr	r0, [sp, #20]
 800920c:	462b      	mov	r3, r5
 800920e:	464a      	mov	r2, r9
 8009210:	f002 fef6 	bl	800c000 <__s2b>
 8009214:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009216:	2800      	cmp	r0, #0
 8009218:	f43f af09 	beq.w	800902e <_strtod_l+0x43e>
 800921c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800921e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009220:	2a00      	cmp	r2, #0
 8009222:	eba3 0308 	sub.w	r3, r3, r8
 8009226:	bfa8      	it	ge
 8009228:	2300      	movge	r3, #0
 800922a:	9312      	str	r3, [sp, #72]	@ 0x48
 800922c:	2400      	movs	r4, #0
 800922e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009232:	9316      	str	r3, [sp, #88]	@ 0x58
 8009234:	46a0      	mov	r8, r4
 8009236:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009238:	9805      	ldr	r0, [sp, #20]
 800923a:	6859      	ldr	r1, [r3, #4]
 800923c:	f002 fe38 	bl	800beb0 <_Balloc>
 8009240:	4681      	mov	r9, r0
 8009242:	2800      	cmp	r0, #0
 8009244:	f43f aef7 	beq.w	8009036 <_strtod_l+0x446>
 8009248:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800924a:	691a      	ldr	r2, [r3, #16]
 800924c:	3202      	adds	r2, #2
 800924e:	f103 010c 	add.w	r1, r3, #12
 8009252:	0092      	lsls	r2, r2, #2
 8009254:	300c      	adds	r0, #12
 8009256:	f001 fb4c 	bl	800a8f2 <memcpy>
 800925a:	ec4b ab10 	vmov	d0, sl, fp
 800925e:	9805      	ldr	r0, [sp, #20]
 8009260:	aa1c      	add	r2, sp, #112	@ 0x70
 8009262:	a91b      	add	r1, sp, #108	@ 0x6c
 8009264:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009268:	f003 f9fe 	bl	800c668 <__d2b>
 800926c:	901a      	str	r0, [sp, #104]	@ 0x68
 800926e:	2800      	cmp	r0, #0
 8009270:	f43f aee1 	beq.w	8009036 <_strtod_l+0x446>
 8009274:	9805      	ldr	r0, [sp, #20]
 8009276:	2101      	movs	r1, #1
 8009278:	f002 ff58 	bl	800c12c <__i2b>
 800927c:	4680      	mov	r8, r0
 800927e:	b948      	cbnz	r0, 8009294 <_strtod_l+0x6a4>
 8009280:	f04f 0800 	mov.w	r8, #0
 8009284:	e6d7      	b.n	8009036 <_strtod_l+0x446>
 8009286:	f04f 32ff 	mov.w	r2, #4294967295
 800928a:	fa02 f303 	lsl.w	r3, r2, r3
 800928e:	ea03 0a0a 	and.w	sl, r3, sl
 8009292:	e7af      	b.n	80091f4 <_strtod_l+0x604>
 8009294:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009296:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009298:	2d00      	cmp	r5, #0
 800929a:	bfab      	itete	ge
 800929c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800929e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80092a0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80092a2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80092a4:	bfac      	ite	ge
 80092a6:	18ef      	addge	r7, r5, r3
 80092a8:	1b5e      	sublt	r6, r3, r5
 80092aa:	9b08      	ldr	r3, [sp, #32]
 80092ac:	1aed      	subs	r5, r5, r3
 80092ae:	4415      	add	r5, r2
 80092b0:	4b65      	ldr	r3, [pc, #404]	@ (8009448 <_strtod_l+0x858>)
 80092b2:	3d01      	subs	r5, #1
 80092b4:	429d      	cmp	r5, r3
 80092b6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80092ba:	da50      	bge.n	800935e <_strtod_l+0x76e>
 80092bc:	1b5b      	subs	r3, r3, r5
 80092be:	2b1f      	cmp	r3, #31
 80092c0:	eba2 0203 	sub.w	r2, r2, r3
 80092c4:	f04f 0101 	mov.w	r1, #1
 80092c8:	dc3d      	bgt.n	8009346 <_strtod_l+0x756>
 80092ca:	fa01 f303 	lsl.w	r3, r1, r3
 80092ce:	9313      	str	r3, [sp, #76]	@ 0x4c
 80092d0:	2300      	movs	r3, #0
 80092d2:	9310      	str	r3, [sp, #64]	@ 0x40
 80092d4:	18bd      	adds	r5, r7, r2
 80092d6:	9b08      	ldr	r3, [sp, #32]
 80092d8:	42af      	cmp	r7, r5
 80092da:	4416      	add	r6, r2
 80092dc:	441e      	add	r6, r3
 80092de:	463b      	mov	r3, r7
 80092e0:	bfa8      	it	ge
 80092e2:	462b      	movge	r3, r5
 80092e4:	42b3      	cmp	r3, r6
 80092e6:	bfa8      	it	ge
 80092e8:	4633      	movge	r3, r6
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	bfc2      	ittt	gt
 80092ee:	1aed      	subgt	r5, r5, r3
 80092f0:	1af6      	subgt	r6, r6, r3
 80092f2:	1aff      	subgt	r7, r7, r3
 80092f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	dd16      	ble.n	8009328 <_strtod_l+0x738>
 80092fa:	4641      	mov	r1, r8
 80092fc:	9805      	ldr	r0, [sp, #20]
 80092fe:	461a      	mov	r2, r3
 8009300:	f002 ffcc 	bl	800c29c <__pow5mult>
 8009304:	4680      	mov	r8, r0
 8009306:	2800      	cmp	r0, #0
 8009308:	d0ba      	beq.n	8009280 <_strtod_l+0x690>
 800930a:	4601      	mov	r1, r0
 800930c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800930e:	9805      	ldr	r0, [sp, #20]
 8009310:	f002 ff22 	bl	800c158 <__multiply>
 8009314:	900a      	str	r0, [sp, #40]	@ 0x28
 8009316:	2800      	cmp	r0, #0
 8009318:	f43f ae8d 	beq.w	8009036 <_strtod_l+0x446>
 800931c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800931e:	9805      	ldr	r0, [sp, #20]
 8009320:	f002 fe06 	bl	800bf30 <_Bfree>
 8009324:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009326:	931a      	str	r3, [sp, #104]	@ 0x68
 8009328:	2d00      	cmp	r5, #0
 800932a:	dc1d      	bgt.n	8009368 <_strtod_l+0x778>
 800932c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800932e:	2b00      	cmp	r3, #0
 8009330:	dd23      	ble.n	800937a <_strtod_l+0x78a>
 8009332:	4649      	mov	r1, r9
 8009334:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009336:	9805      	ldr	r0, [sp, #20]
 8009338:	f002 ffb0 	bl	800c29c <__pow5mult>
 800933c:	4681      	mov	r9, r0
 800933e:	b9e0      	cbnz	r0, 800937a <_strtod_l+0x78a>
 8009340:	f04f 0900 	mov.w	r9, #0
 8009344:	e677      	b.n	8009036 <_strtod_l+0x446>
 8009346:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800934a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800934e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009352:	35e2      	adds	r5, #226	@ 0xe2
 8009354:	fa01 f305 	lsl.w	r3, r1, r5
 8009358:	9310      	str	r3, [sp, #64]	@ 0x40
 800935a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800935c:	e7ba      	b.n	80092d4 <_strtod_l+0x6e4>
 800935e:	2300      	movs	r3, #0
 8009360:	9310      	str	r3, [sp, #64]	@ 0x40
 8009362:	2301      	movs	r3, #1
 8009364:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009366:	e7b5      	b.n	80092d4 <_strtod_l+0x6e4>
 8009368:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800936a:	9805      	ldr	r0, [sp, #20]
 800936c:	462a      	mov	r2, r5
 800936e:	f002 ffef 	bl	800c350 <__lshift>
 8009372:	901a      	str	r0, [sp, #104]	@ 0x68
 8009374:	2800      	cmp	r0, #0
 8009376:	d1d9      	bne.n	800932c <_strtod_l+0x73c>
 8009378:	e65d      	b.n	8009036 <_strtod_l+0x446>
 800937a:	2e00      	cmp	r6, #0
 800937c:	dd07      	ble.n	800938e <_strtod_l+0x79e>
 800937e:	4649      	mov	r1, r9
 8009380:	9805      	ldr	r0, [sp, #20]
 8009382:	4632      	mov	r2, r6
 8009384:	f002 ffe4 	bl	800c350 <__lshift>
 8009388:	4681      	mov	r9, r0
 800938a:	2800      	cmp	r0, #0
 800938c:	d0d8      	beq.n	8009340 <_strtod_l+0x750>
 800938e:	2f00      	cmp	r7, #0
 8009390:	dd08      	ble.n	80093a4 <_strtod_l+0x7b4>
 8009392:	4641      	mov	r1, r8
 8009394:	9805      	ldr	r0, [sp, #20]
 8009396:	463a      	mov	r2, r7
 8009398:	f002 ffda 	bl	800c350 <__lshift>
 800939c:	4680      	mov	r8, r0
 800939e:	2800      	cmp	r0, #0
 80093a0:	f43f ae49 	beq.w	8009036 <_strtod_l+0x446>
 80093a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80093a6:	9805      	ldr	r0, [sp, #20]
 80093a8:	464a      	mov	r2, r9
 80093aa:	f003 f859 	bl	800c460 <__mdiff>
 80093ae:	4604      	mov	r4, r0
 80093b0:	2800      	cmp	r0, #0
 80093b2:	f43f ae40 	beq.w	8009036 <_strtod_l+0x446>
 80093b6:	68c3      	ldr	r3, [r0, #12]
 80093b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80093ba:	2300      	movs	r3, #0
 80093bc:	60c3      	str	r3, [r0, #12]
 80093be:	4641      	mov	r1, r8
 80093c0:	f003 f832 	bl	800c428 <__mcmp>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	da45      	bge.n	8009454 <_strtod_l+0x864>
 80093c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093ca:	ea53 030a 	orrs.w	r3, r3, sl
 80093ce:	d16b      	bne.n	80094a8 <_strtod_l+0x8b8>
 80093d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d167      	bne.n	80094a8 <_strtod_l+0x8b8>
 80093d8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80093dc:	0d1b      	lsrs	r3, r3, #20
 80093de:	051b      	lsls	r3, r3, #20
 80093e0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80093e4:	d960      	bls.n	80094a8 <_strtod_l+0x8b8>
 80093e6:	6963      	ldr	r3, [r4, #20]
 80093e8:	b913      	cbnz	r3, 80093f0 <_strtod_l+0x800>
 80093ea:	6923      	ldr	r3, [r4, #16]
 80093ec:	2b01      	cmp	r3, #1
 80093ee:	dd5b      	ble.n	80094a8 <_strtod_l+0x8b8>
 80093f0:	4621      	mov	r1, r4
 80093f2:	2201      	movs	r2, #1
 80093f4:	9805      	ldr	r0, [sp, #20]
 80093f6:	f002 ffab 	bl	800c350 <__lshift>
 80093fa:	4641      	mov	r1, r8
 80093fc:	4604      	mov	r4, r0
 80093fe:	f003 f813 	bl	800c428 <__mcmp>
 8009402:	2800      	cmp	r0, #0
 8009404:	dd50      	ble.n	80094a8 <_strtod_l+0x8b8>
 8009406:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800940a:	9a08      	ldr	r2, [sp, #32]
 800940c:	0d1b      	lsrs	r3, r3, #20
 800940e:	051b      	lsls	r3, r3, #20
 8009410:	2a00      	cmp	r2, #0
 8009412:	d06a      	beq.n	80094ea <_strtod_l+0x8fa>
 8009414:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009418:	d867      	bhi.n	80094ea <_strtod_l+0x8fa>
 800941a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800941e:	f67f ae9d 	bls.w	800915c <_strtod_l+0x56c>
 8009422:	4b0a      	ldr	r3, [pc, #40]	@ (800944c <_strtod_l+0x85c>)
 8009424:	4650      	mov	r0, sl
 8009426:	4659      	mov	r1, fp
 8009428:	2200      	movs	r2, #0
 800942a:	f7f7 f8fd 	bl	8000628 <__aeabi_dmul>
 800942e:	4b08      	ldr	r3, [pc, #32]	@ (8009450 <_strtod_l+0x860>)
 8009430:	400b      	ands	r3, r1
 8009432:	4682      	mov	sl, r0
 8009434:	468b      	mov	fp, r1
 8009436:	2b00      	cmp	r3, #0
 8009438:	f47f ae08 	bne.w	800904c <_strtod_l+0x45c>
 800943c:	9a05      	ldr	r2, [sp, #20]
 800943e:	2322      	movs	r3, #34	@ 0x22
 8009440:	6013      	str	r3, [r2, #0]
 8009442:	e603      	b.n	800904c <_strtod_l+0x45c>
 8009444:	0800d970 	.word	0x0800d970
 8009448:	fffffc02 	.word	0xfffffc02
 800944c:	39500000 	.word	0x39500000
 8009450:	7ff00000 	.word	0x7ff00000
 8009454:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009458:	d165      	bne.n	8009526 <_strtod_l+0x936>
 800945a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800945c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009460:	b35a      	cbz	r2, 80094ba <_strtod_l+0x8ca>
 8009462:	4a9f      	ldr	r2, [pc, #636]	@ (80096e0 <_strtod_l+0xaf0>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d12b      	bne.n	80094c0 <_strtod_l+0x8d0>
 8009468:	9b08      	ldr	r3, [sp, #32]
 800946a:	4651      	mov	r1, sl
 800946c:	b303      	cbz	r3, 80094b0 <_strtod_l+0x8c0>
 800946e:	4b9d      	ldr	r3, [pc, #628]	@ (80096e4 <_strtod_l+0xaf4>)
 8009470:	465a      	mov	r2, fp
 8009472:	4013      	ands	r3, r2
 8009474:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009478:	f04f 32ff 	mov.w	r2, #4294967295
 800947c:	d81b      	bhi.n	80094b6 <_strtod_l+0x8c6>
 800947e:	0d1b      	lsrs	r3, r3, #20
 8009480:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009484:	fa02 f303 	lsl.w	r3, r2, r3
 8009488:	4299      	cmp	r1, r3
 800948a:	d119      	bne.n	80094c0 <_strtod_l+0x8d0>
 800948c:	4b96      	ldr	r3, [pc, #600]	@ (80096e8 <_strtod_l+0xaf8>)
 800948e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009490:	429a      	cmp	r2, r3
 8009492:	d102      	bne.n	800949a <_strtod_l+0x8aa>
 8009494:	3101      	adds	r1, #1
 8009496:	f43f adce 	beq.w	8009036 <_strtod_l+0x446>
 800949a:	4b92      	ldr	r3, [pc, #584]	@ (80096e4 <_strtod_l+0xaf4>)
 800949c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800949e:	401a      	ands	r2, r3
 80094a0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80094a4:	f04f 0a00 	mov.w	sl, #0
 80094a8:	9b08      	ldr	r3, [sp, #32]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d1b9      	bne.n	8009422 <_strtod_l+0x832>
 80094ae:	e5cd      	b.n	800904c <_strtod_l+0x45c>
 80094b0:	f04f 33ff 	mov.w	r3, #4294967295
 80094b4:	e7e8      	b.n	8009488 <_strtod_l+0x898>
 80094b6:	4613      	mov	r3, r2
 80094b8:	e7e6      	b.n	8009488 <_strtod_l+0x898>
 80094ba:	ea53 030a 	orrs.w	r3, r3, sl
 80094be:	d0a2      	beq.n	8009406 <_strtod_l+0x816>
 80094c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80094c2:	b1db      	cbz	r3, 80094fc <_strtod_l+0x90c>
 80094c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80094c6:	4213      	tst	r3, r2
 80094c8:	d0ee      	beq.n	80094a8 <_strtod_l+0x8b8>
 80094ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094cc:	9a08      	ldr	r2, [sp, #32]
 80094ce:	4650      	mov	r0, sl
 80094d0:	4659      	mov	r1, fp
 80094d2:	b1bb      	cbz	r3, 8009504 <_strtod_l+0x914>
 80094d4:	f7ff fb6b 	bl	8008bae <sulp>
 80094d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094dc:	ec53 2b10 	vmov	r2, r3, d0
 80094e0:	f7f6 feec 	bl	80002bc <__adddf3>
 80094e4:	4682      	mov	sl, r0
 80094e6:	468b      	mov	fp, r1
 80094e8:	e7de      	b.n	80094a8 <_strtod_l+0x8b8>
 80094ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80094ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80094f2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80094f6:	f04f 3aff 	mov.w	sl, #4294967295
 80094fa:	e7d5      	b.n	80094a8 <_strtod_l+0x8b8>
 80094fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80094fe:	ea13 0f0a 	tst.w	r3, sl
 8009502:	e7e1      	b.n	80094c8 <_strtod_l+0x8d8>
 8009504:	f7ff fb53 	bl	8008bae <sulp>
 8009508:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800950c:	ec53 2b10 	vmov	r2, r3, d0
 8009510:	f7f6 fed2 	bl	80002b8 <__aeabi_dsub>
 8009514:	2200      	movs	r2, #0
 8009516:	2300      	movs	r3, #0
 8009518:	4682      	mov	sl, r0
 800951a:	468b      	mov	fp, r1
 800951c:	f7f7 faec 	bl	8000af8 <__aeabi_dcmpeq>
 8009520:	2800      	cmp	r0, #0
 8009522:	d0c1      	beq.n	80094a8 <_strtod_l+0x8b8>
 8009524:	e61a      	b.n	800915c <_strtod_l+0x56c>
 8009526:	4641      	mov	r1, r8
 8009528:	4620      	mov	r0, r4
 800952a:	f003 f8f5 	bl	800c718 <__ratio>
 800952e:	ec57 6b10 	vmov	r6, r7, d0
 8009532:	2200      	movs	r2, #0
 8009534:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009538:	4630      	mov	r0, r6
 800953a:	4639      	mov	r1, r7
 800953c:	f7f7 faf0 	bl	8000b20 <__aeabi_dcmple>
 8009540:	2800      	cmp	r0, #0
 8009542:	d06f      	beq.n	8009624 <_strtod_l+0xa34>
 8009544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009546:	2b00      	cmp	r3, #0
 8009548:	d17a      	bne.n	8009640 <_strtod_l+0xa50>
 800954a:	f1ba 0f00 	cmp.w	sl, #0
 800954e:	d158      	bne.n	8009602 <_strtod_l+0xa12>
 8009550:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009552:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009556:	2b00      	cmp	r3, #0
 8009558:	d15a      	bne.n	8009610 <_strtod_l+0xa20>
 800955a:	4b64      	ldr	r3, [pc, #400]	@ (80096ec <_strtod_l+0xafc>)
 800955c:	2200      	movs	r2, #0
 800955e:	4630      	mov	r0, r6
 8009560:	4639      	mov	r1, r7
 8009562:	f7f7 fad3 	bl	8000b0c <__aeabi_dcmplt>
 8009566:	2800      	cmp	r0, #0
 8009568:	d159      	bne.n	800961e <_strtod_l+0xa2e>
 800956a:	4630      	mov	r0, r6
 800956c:	4639      	mov	r1, r7
 800956e:	4b60      	ldr	r3, [pc, #384]	@ (80096f0 <_strtod_l+0xb00>)
 8009570:	2200      	movs	r2, #0
 8009572:	f7f7 f859 	bl	8000628 <__aeabi_dmul>
 8009576:	4606      	mov	r6, r0
 8009578:	460f      	mov	r7, r1
 800957a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800957e:	9606      	str	r6, [sp, #24]
 8009580:	9307      	str	r3, [sp, #28]
 8009582:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009586:	4d57      	ldr	r5, [pc, #348]	@ (80096e4 <_strtod_l+0xaf4>)
 8009588:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800958c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800958e:	401d      	ands	r5, r3
 8009590:	4b58      	ldr	r3, [pc, #352]	@ (80096f4 <_strtod_l+0xb04>)
 8009592:	429d      	cmp	r5, r3
 8009594:	f040 80b2 	bne.w	80096fc <_strtod_l+0xb0c>
 8009598:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800959a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800959e:	ec4b ab10 	vmov	d0, sl, fp
 80095a2:	f002 fff1 	bl	800c588 <__ulp>
 80095a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80095aa:	ec51 0b10 	vmov	r0, r1, d0
 80095ae:	f7f7 f83b 	bl	8000628 <__aeabi_dmul>
 80095b2:	4652      	mov	r2, sl
 80095b4:	465b      	mov	r3, fp
 80095b6:	f7f6 fe81 	bl	80002bc <__adddf3>
 80095ba:	460b      	mov	r3, r1
 80095bc:	4949      	ldr	r1, [pc, #292]	@ (80096e4 <_strtod_l+0xaf4>)
 80095be:	4a4e      	ldr	r2, [pc, #312]	@ (80096f8 <_strtod_l+0xb08>)
 80095c0:	4019      	ands	r1, r3
 80095c2:	4291      	cmp	r1, r2
 80095c4:	4682      	mov	sl, r0
 80095c6:	d942      	bls.n	800964e <_strtod_l+0xa5e>
 80095c8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80095ca:	4b47      	ldr	r3, [pc, #284]	@ (80096e8 <_strtod_l+0xaf8>)
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d103      	bne.n	80095d8 <_strtod_l+0x9e8>
 80095d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80095d2:	3301      	adds	r3, #1
 80095d4:	f43f ad2f 	beq.w	8009036 <_strtod_l+0x446>
 80095d8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80096e8 <_strtod_l+0xaf8>
 80095dc:	f04f 3aff 	mov.w	sl, #4294967295
 80095e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80095e2:	9805      	ldr	r0, [sp, #20]
 80095e4:	f002 fca4 	bl	800bf30 <_Bfree>
 80095e8:	9805      	ldr	r0, [sp, #20]
 80095ea:	4649      	mov	r1, r9
 80095ec:	f002 fca0 	bl	800bf30 <_Bfree>
 80095f0:	9805      	ldr	r0, [sp, #20]
 80095f2:	4641      	mov	r1, r8
 80095f4:	f002 fc9c 	bl	800bf30 <_Bfree>
 80095f8:	9805      	ldr	r0, [sp, #20]
 80095fa:	4621      	mov	r1, r4
 80095fc:	f002 fc98 	bl	800bf30 <_Bfree>
 8009600:	e619      	b.n	8009236 <_strtod_l+0x646>
 8009602:	f1ba 0f01 	cmp.w	sl, #1
 8009606:	d103      	bne.n	8009610 <_strtod_l+0xa20>
 8009608:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800960a:	2b00      	cmp	r3, #0
 800960c:	f43f ada6 	beq.w	800915c <_strtod_l+0x56c>
 8009610:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80096c0 <_strtod_l+0xad0>
 8009614:	4f35      	ldr	r7, [pc, #212]	@ (80096ec <_strtod_l+0xafc>)
 8009616:	ed8d 7b06 	vstr	d7, [sp, #24]
 800961a:	2600      	movs	r6, #0
 800961c:	e7b1      	b.n	8009582 <_strtod_l+0x992>
 800961e:	4f34      	ldr	r7, [pc, #208]	@ (80096f0 <_strtod_l+0xb00>)
 8009620:	2600      	movs	r6, #0
 8009622:	e7aa      	b.n	800957a <_strtod_l+0x98a>
 8009624:	4b32      	ldr	r3, [pc, #200]	@ (80096f0 <_strtod_l+0xb00>)
 8009626:	4630      	mov	r0, r6
 8009628:	4639      	mov	r1, r7
 800962a:	2200      	movs	r2, #0
 800962c:	f7f6 fffc 	bl	8000628 <__aeabi_dmul>
 8009630:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009632:	4606      	mov	r6, r0
 8009634:	460f      	mov	r7, r1
 8009636:	2b00      	cmp	r3, #0
 8009638:	d09f      	beq.n	800957a <_strtod_l+0x98a>
 800963a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800963e:	e7a0      	b.n	8009582 <_strtod_l+0x992>
 8009640:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80096c8 <_strtod_l+0xad8>
 8009644:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009648:	ec57 6b17 	vmov	r6, r7, d7
 800964c:	e799      	b.n	8009582 <_strtod_l+0x992>
 800964e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009652:	9b08      	ldr	r3, [sp, #32]
 8009654:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009658:	2b00      	cmp	r3, #0
 800965a:	d1c1      	bne.n	80095e0 <_strtod_l+0x9f0>
 800965c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009660:	0d1b      	lsrs	r3, r3, #20
 8009662:	051b      	lsls	r3, r3, #20
 8009664:	429d      	cmp	r5, r3
 8009666:	d1bb      	bne.n	80095e0 <_strtod_l+0x9f0>
 8009668:	4630      	mov	r0, r6
 800966a:	4639      	mov	r1, r7
 800966c:	f7f7 fb3c 	bl	8000ce8 <__aeabi_d2lz>
 8009670:	f7f6 ffac 	bl	80005cc <__aeabi_l2d>
 8009674:	4602      	mov	r2, r0
 8009676:	460b      	mov	r3, r1
 8009678:	4630      	mov	r0, r6
 800967a:	4639      	mov	r1, r7
 800967c:	f7f6 fe1c 	bl	80002b8 <__aeabi_dsub>
 8009680:	460b      	mov	r3, r1
 8009682:	4602      	mov	r2, r0
 8009684:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009688:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800968c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800968e:	ea46 060a 	orr.w	r6, r6, sl
 8009692:	431e      	orrs	r6, r3
 8009694:	d06f      	beq.n	8009776 <_strtod_l+0xb86>
 8009696:	a30e      	add	r3, pc, #56	@ (adr r3, 80096d0 <_strtod_l+0xae0>)
 8009698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969c:	f7f7 fa36 	bl	8000b0c <__aeabi_dcmplt>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	f47f acd3 	bne.w	800904c <_strtod_l+0x45c>
 80096a6:	a30c      	add	r3, pc, #48	@ (adr r3, 80096d8 <_strtod_l+0xae8>)
 80096a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80096b0:	f7f7 fa4a 	bl	8000b48 <__aeabi_dcmpgt>
 80096b4:	2800      	cmp	r0, #0
 80096b6:	d093      	beq.n	80095e0 <_strtod_l+0x9f0>
 80096b8:	e4c8      	b.n	800904c <_strtod_l+0x45c>
 80096ba:	bf00      	nop
 80096bc:	f3af 8000 	nop.w
 80096c0:	00000000 	.word	0x00000000
 80096c4:	bff00000 	.word	0xbff00000
 80096c8:	00000000 	.word	0x00000000
 80096cc:	3ff00000 	.word	0x3ff00000
 80096d0:	94a03595 	.word	0x94a03595
 80096d4:	3fdfffff 	.word	0x3fdfffff
 80096d8:	35afe535 	.word	0x35afe535
 80096dc:	3fe00000 	.word	0x3fe00000
 80096e0:	000fffff 	.word	0x000fffff
 80096e4:	7ff00000 	.word	0x7ff00000
 80096e8:	7fefffff 	.word	0x7fefffff
 80096ec:	3ff00000 	.word	0x3ff00000
 80096f0:	3fe00000 	.word	0x3fe00000
 80096f4:	7fe00000 	.word	0x7fe00000
 80096f8:	7c9fffff 	.word	0x7c9fffff
 80096fc:	9b08      	ldr	r3, [sp, #32]
 80096fe:	b323      	cbz	r3, 800974a <_strtod_l+0xb5a>
 8009700:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009704:	d821      	bhi.n	800974a <_strtod_l+0xb5a>
 8009706:	a328      	add	r3, pc, #160	@ (adr r3, 80097a8 <_strtod_l+0xbb8>)
 8009708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970c:	4630      	mov	r0, r6
 800970e:	4639      	mov	r1, r7
 8009710:	f7f7 fa06 	bl	8000b20 <__aeabi_dcmple>
 8009714:	b1a0      	cbz	r0, 8009740 <_strtod_l+0xb50>
 8009716:	4639      	mov	r1, r7
 8009718:	4630      	mov	r0, r6
 800971a:	f7f7 fa5d 	bl	8000bd8 <__aeabi_d2uiz>
 800971e:	2801      	cmp	r0, #1
 8009720:	bf38      	it	cc
 8009722:	2001      	movcc	r0, #1
 8009724:	f7f6 ff06 	bl	8000534 <__aeabi_ui2d>
 8009728:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800972a:	4606      	mov	r6, r0
 800972c:	460f      	mov	r7, r1
 800972e:	b9fb      	cbnz	r3, 8009770 <_strtod_l+0xb80>
 8009730:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009734:	9014      	str	r0, [sp, #80]	@ 0x50
 8009736:	9315      	str	r3, [sp, #84]	@ 0x54
 8009738:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800973c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009740:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009742:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009746:	1b5b      	subs	r3, r3, r5
 8009748:	9311      	str	r3, [sp, #68]	@ 0x44
 800974a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800974e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009752:	f002 ff19 	bl	800c588 <__ulp>
 8009756:	4650      	mov	r0, sl
 8009758:	ec53 2b10 	vmov	r2, r3, d0
 800975c:	4659      	mov	r1, fp
 800975e:	f7f6 ff63 	bl	8000628 <__aeabi_dmul>
 8009762:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009766:	f7f6 fda9 	bl	80002bc <__adddf3>
 800976a:	4682      	mov	sl, r0
 800976c:	468b      	mov	fp, r1
 800976e:	e770      	b.n	8009652 <_strtod_l+0xa62>
 8009770:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009774:	e7e0      	b.n	8009738 <_strtod_l+0xb48>
 8009776:	a30e      	add	r3, pc, #56	@ (adr r3, 80097b0 <_strtod_l+0xbc0>)
 8009778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977c:	f7f7 f9c6 	bl	8000b0c <__aeabi_dcmplt>
 8009780:	e798      	b.n	80096b4 <_strtod_l+0xac4>
 8009782:	2300      	movs	r3, #0
 8009784:	930e      	str	r3, [sp, #56]	@ 0x38
 8009786:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009788:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800978a:	6013      	str	r3, [r2, #0]
 800978c:	f7ff ba6d 	b.w	8008c6a <_strtod_l+0x7a>
 8009790:	2a65      	cmp	r2, #101	@ 0x65
 8009792:	f43f ab68 	beq.w	8008e66 <_strtod_l+0x276>
 8009796:	2a45      	cmp	r2, #69	@ 0x45
 8009798:	f43f ab65 	beq.w	8008e66 <_strtod_l+0x276>
 800979c:	2301      	movs	r3, #1
 800979e:	f7ff bba0 	b.w	8008ee2 <_strtod_l+0x2f2>
 80097a2:	bf00      	nop
 80097a4:	f3af 8000 	nop.w
 80097a8:	ffc00000 	.word	0xffc00000
 80097ac:	41dfffff 	.word	0x41dfffff
 80097b0:	94a03595 	.word	0x94a03595
 80097b4:	3fcfffff 	.word	0x3fcfffff

080097b8 <_strtod_r>:
 80097b8:	4b01      	ldr	r3, [pc, #4]	@ (80097c0 <_strtod_r+0x8>)
 80097ba:	f7ff ba19 	b.w	8008bf0 <_strtod_l>
 80097be:	bf00      	nop
 80097c0:	2000009c 	.word	0x2000009c

080097c4 <strtod>:
 80097c4:	460a      	mov	r2, r1
 80097c6:	4601      	mov	r1, r0
 80097c8:	4802      	ldr	r0, [pc, #8]	@ (80097d4 <strtod+0x10>)
 80097ca:	4b03      	ldr	r3, [pc, #12]	@ (80097d8 <strtod+0x14>)
 80097cc:	6800      	ldr	r0, [r0, #0]
 80097ce:	f7ff ba0f 	b.w	8008bf0 <_strtod_l>
 80097d2:	bf00      	nop
 80097d4:	20000208 	.word	0x20000208
 80097d8:	2000009c 	.word	0x2000009c

080097dc <__cvt>:
 80097dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097e0:	ec57 6b10 	vmov	r6, r7, d0
 80097e4:	2f00      	cmp	r7, #0
 80097e6:	460c      	mov	r4, r1
 80097e8:	4619      	mov	r1, r3
 80097ea:	463b      	mov	r3, r7
 80097ec:	bfbb      	ittet	lt
 80097ee:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80097f2:	461f      	movlt	r7, r3
 80097f4:	2300      	movge	r3, #0
 80097f6:	232d      	movlt	r3, #45	@ 0x2d
 80097f8:	700b      	strb	r3, [r1, #0]
 80097fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80097fc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009800:	4691      	mov	r9, r2
 8009802:	f023 0820 	bic.w	r8, r3, #32
 8009806:	bfbc      	itt	lt
 8009808:	4632      	movlt	r2, r6
 800980a:	4616      	movlt	r6, r2
 800980c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009810:	d005      	beq.n	800981e <__cvt+0x42>
 8009812:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009816:	d100      	bne.n	800981a <__cvt+0x3e>
 8009818:	3401      	adds	r4, #1
 800981a:	2102      	movs	r1, #2
 800981c:	e000      	b.n	8009820 <__cvt+0x44>
 800981e:	2103      	movs	r1, #3
 8009820:	ab03      	add	r3, sp, #12
 8009822:	9301      	str	r3, [sp, #4]
 8009824:	ab02      	add	r3, sp, #8
 8009826:	9300      	str	r3, [sp, #0]
 8009828:	ec47 6b10 	vmov	d0, r6, r7
 800982c:	4653      	mov	r3, sl
 800982e:	4622      	mov	r2, r4
 8009830:	f001 f922 	bl	800aa78 <_dtoa_r>
 8009834:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009838:	4605      	mov	r5, r0
 800983a:	d119      	bne.n	8009870 <__cvt+0x94>
 800983c:	f019 0f01 	tst.w	r9, #1
 8009840:	d00e      	beq.n	8009860 <__cvt+0x84>
 8009842:	eb00 0904 	add.w	r9, r0, r4
 8009846:	2200      	movs	r2, #0
 8009848:	2300      	movs	r3, #0
 800984a:	4630      	mov	r0, r6
 800984c:	4639      	mov	r1, r7
 800984e:	f7f7 f953 	bl	8000af8 <__aeabi_dcmpeq>
 8009852:	b108      	cbz	r0, 8009858 <__cvt+0x7c>
 8009854:	f8cd 900c 	str.w	r9, [sp, #12]
 8009858:	2230      	movs	r2, #48	@ 0x30
 800985a:	9b03      	ldr	r3, [sp, #12]
 800985c:	454b      	cmp	r3, r9
 800985e:	d31e      	bcc.n	800989e <__cvt+0xc2>
 8009860:	9b03      	ldr	r3, [sp, #12]
 8009862:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009864:	1b5b      	subs	r3, r3, r5
 8009866:	4628      	mov	r0, r5
 8009868:	6013      	str	r3, [r2, #0]
 800986a:	b004      	add	sp, #16
 800986c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009870:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009874:	eb00 0904 	add.w	r9, r0, r4
 8009878:	d1e5      	bne.n	8009846 <__cvt+0x6a>
 800987a:	7803      	ldrb	r3, [r0, #0]
 800987c:	2b30      	cmp	r3, #48	@ 0x30
 800987e:	d10a      	bne.n	8009896 <__cvt+0xba>
 8009880:	2200      	movs	r2, #0
 8009882:	2300      	movs	r3, #0
 8009884:	4630      	mov	r0, r6
 8009886:	4639      	mov	r1, r7
 8009888:	f7f7 f936 	bl	8000af8 <__aeabi_dcmpeq>
 800988c:	b918      	cbnz	r0, 8009896 <__cvt+0xba>
 800988e:	f1c4 0401 	rsb	r4, r4, #1
 8009892:	f8ca 4000 	str.w	r4, [sl]
 8009896:	f8da 3000 	ldr.w	r3, [sl]
 800989a:	4499      	add	r9, r3
 800989c:	e7d3      	b.n	8009846 <__cvt+0x6a>
 800989e:	1c59      	adds	r1, r3, #1
 80098a0:	9103      	str	r1, [sp, #12]
 80098a2:	701a      	strb	r2, [r3, #0]
 80098a4:	e7d9      	b.n	800985a <__cvt+0x7e>

080098a6 <__exponent>:
 80098a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098a8:	2900      	cmp	r1, #0
 80098aa:	bfba      	itte	lt
 80098ac:	4249      	neglt	r1, r1
 80098ae:	232d      	movlt	r3, #45	@ 0x2d
 80098b0:	232b      	movge	r3, #43	@ 0x2b
 80098b2:	2909      	cmp	r1, #9
 80098b4:	7002      	strb	r2, [r0, #0]
 80098b6:	7043      	strb	r3, [r0, #1]
 80098b8:	dd29      	ble.n	800990e <__exponent+0x68>
 80098ba:	f10d 0307 	add.w	r3, sp, #7
 80098be:	461d      	mov	r5, r3
 80098c0:	270a      	movs	r7, #10
 80098c2:	461a      	mov	r2, r3
 80098c4:	fbb1 f6f7 	udiv	r6, r1, r7
 80098c8:	fb07 1416 	mls	r4, r7, r6, r1
 80098cc:	3430      	adds	r4, #48	@ 0x30
 80098ce:	f802 4c01 	strb.w	r4, [r2, #-1]
 80098d2:	460c      	mov	r4, r1
 80098d4:	2c63      	cmp	r4, #99	@ 0x63
 80098d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80098da:	4631      	mov	r1, r6
 80098dc:	dcf1      	bgt.n	80098c2 <__exponent+0x1c>
 80098de:	3130      	adds	r1, #48	@ 0x30
 80098e0:	1e94      	subs	r4, r2, #2
 80098e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80098e6:	1c41      	adds	r1, r0, #1
 80098e8:	4623      	mov	r3, r4
 80098ea:	42ab      	cmp	r3, r5
 80098ec:	d30a      	bcc.n	8009904 <__exponent+0x5e>
 80098ee:	f10d 0309 	add.w	r3, sp, #9
 80098f2:	1a9b      	subs	r3, r3, r2
 80098f4:	42ac      	cmp	r4, r5
 80098f6:	bf88      	it	hi
 80098f8:	2300      	movhi	r3, #0
 80098fa:	3302      	adds	r3, #2
 80098fc:	4403      	add	r3, r0
 80098fe:	1a18      	subs	r0, r3, r0
 8009900:	b003      	add	sp, #12
 8009902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009904:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009908:	f801 6f01 	strb.w	r6, [r1, #1]!
 800990c:	e7ed      	b.n	80098ea <__exponent+0x44>
 800990e:	2330      	movs	r3, #48	@ 0x30
 8009910:	3130      	adds	r1, #48	@ 0x30
 8009912:	7083      	strb	r3, [r0, #2]
 8009914:	70c1      	strb	r1, [r0, #3]
 8009916:	1d03      	adds	r3, r0, #4
 8009918:	e7f1      	b.n	80098fe <__exponent+0x58>
	...

0800991c <_printf_float>:
 800991c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009920:	b08d      	sub	sp, #52	@ 0x34
 8009922:	460c      	mov	r4, r1
 8009924:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009928:	4616      	mov	r6, r2
 800992a:	461f      	mov	r7, r3
 800992c:	4605      	mov	r5, r0
 800992e:	f000 ff69 	bl	800a804 <_localeconv_r>
 8009932:	6803      	ldr	r3, [r0, #0]
 8009934:	9304      	str	r3, [sp, #16]
 8009936:	4618      	mov	r0, r3
 8009938:	f7f6 fcb2 	bl	80002a0 <strlen>
 800993c:	2300      	movs	r3, #0
 800993e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009940:	f8d8 3000 	ldr.w	r3, [r8]
 8009944:	9005      	str	r0, [sp, #20]
 8009946:	3307      	adds	r3, #7
 8009948:	f023 0307 	bic.w	r3, r3, #7
 800994c:	f103 0208 	add.w	r2, r3, #8
 8009950:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009954:	f8d4 b000 	ldr.w	fp, [r4]
 8009958:	f8c8 2000 	str.w	r2, [r8]
 800995c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009960:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009964:	9307      	str	r3, [sp, #28]
 8009966:	f8cd 8018 	str.w	r8, [sp, #24]
 800996a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800996e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009972:	4b9c      	ldr	r3, [pc, #624]	@ (8009be4 <_printf_float+0x2c8>)
 8009974:	f04f 32ff 	mov.w	r2, #4294967295
 8009978:	f7f7 f8f0 	bl	8000b5c <__aeabi_dcmpun>
 800997c:	bb70      	cbnz	r0, 80099dc <_printf_float+0xc0>
 800997e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009982:	4b98      	ldr	r3, [pc, #608]	@ (8009be4 <_printf_float+0x2c8>)
 8009984:	f04f 32ff 	mov.w	r2, #4294967295
 8009988:	f7f7 f8ca 	bl	8000b20 <__aeabi_dcmple>
 800998c:	bb30      	cbnz	r0, 80099dc <_printf_float+0xc0>
 800998e:	2200      	movs	r2, #0
 8009990:	2300      	movs	r3, #0
 8009992:	4640      	mov	r0, r8
 8009994:	4649      	mov	r1, r9
 8009996:	f7f7 f8b9 	bl	8000b0c <__aeabi_dcmplt>
 800999a:	b110      	cbz	r0, 80099a2 <_printf_float+0x86>
 800999c:	232d      	movs	r3, #45	@ 0x2d
 800999e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80099a2:	4a91      	ldr	r2, [pc, #580]	@ (8009be8 <_printf_float+0x2cc>)
 80099a4:	4b91      	ldr	r3, [pc, #580]	@ (8009bec <_printf_float+0x2d0>)
 80099a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80099aa:	bf8c      	ite	hi
 80099ac:	4690      	movhi	r8, r2
 80099ae:	4698      	movls	r8, r3
 80099b0:	2303      	movs	r3, #3
 80099b2:	6123      	str	r3, [r4, #16]
 80099b4:	f02b 0304 	bic.w	r3, fp, #4
 80099b8:	6023      	str	r3, [r4, #0]
 80099ba:	f04f 0900 	mov.w	r9, #0
 80099be:	9700      	str	r7, [sp, #0]
 80099c0:	4633      	mov	r3, r6
 80099c2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80099c4:	4621      	mov	r1, r4
 80099c6:	4628      	mov	r0, r5
 80099c8:	f000 f9d2 	bl	8009d70 <_printf_common>
 80099cc:	3001      	adds	r0, #1
 80099ce:	f040 808d 	bne.w	8009aec <_printf_float+0x1d0>
 80099d2:	f04f 30ff 	mov.w	r0, #4294967295
 80099d6:	b00d      	add	sp, #52	@ 0x34
 80099d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099dc:	4642      	mov	r2, r8
 80099de:	464b      	mov	r3, r9
 80099e0:	4640      	mov	r0, r8
 80099e2:	4649      	mov	r1, r9
 80099e4:	f7f7 f8ba 	bl	8000b5c <__aeabi_dcmpun>
 80099e8:	b140      	cbz	r0, 80099fc <_printf_float+0xe0>
 80099ea:	464b      	mov	r3, r9
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	bfbc      	itt	lt
 80099f0:	232d      	movlt	r3, #45	@ 0x2d
 80099f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80099f6:	4a7e      	ldr	r2, [pc, #504]	@ (8009bf0 <_printf_float+0x2d4>)
 80099f8:	4b7e      	ldr	r3, [pc, #504]	@ (8009bf4 <_printf_float+0x2d8>)
 80099fa:	e7d4      	b.n	80099a6 <_printf_float+0x8a>
 80099fc:	6863      	ldr	r3, [r4, #4]
 80099fe:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009a02:	9206      	str	r2, [sp, #24]
 8009a04:	1c5a      	adds	r2, r3, #1
 8009a06:	d13b      	bne.n	8009a80 <_printf_float+0x164>
 8009a08:	2306      	movs	r3, #6
 8009a0a:	6063      	str	r3, [r4, #4]
 8009a0c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009a10:	2300      	movs	r3, #0
 8009a12:	6022      	str	r2, [r4, #0]
 8009a14:	9303      	str	r3, [sp, #12]
 8009a16:	ab0a      	add	r3, sp, #40	@ 0x28
 8009a18:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009a1c:	ab09      	add	r3, sp, #36	@ 0x24
 8009a1e:	9300      	str	r3, [sp, #0]
 8009a20:	6861      	ldr	r1, [r4, #4]
 8009a22:	ec49 8b10 	vmov	d0, r8, r9
 8009a26:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	f7ff fed6 	bl	80097dc <__cvt>
 8009a30:	9b06      	ldr	r3, [sp, #24]
 8009a32:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a34:	2b47      	cmp	r3, #71	@ 0x47
 8009a36:	4680      	mov	r8, r0
 8009a38:	d129      	bne.n	8009a8e <_printf_float+0x172>
 8009a3a:	1cc8      	adds	r0, r1, #3
 8009a3c:	db02      	blt.n	8009a44 <_printf_float+0x128>
 8009a3e:	6863      	ldr	r3, [r4, #4]
 8009a40:	4299      	cmp	r1, r3
 8009a42:	dd41      	ble.n	8009ac8 <_printf_float+0x1ac>
 8009a44:	f1aa 0a02 	sub.w	sl, sl, #2
 8009a48:	fa5f fa8a 	uxtb.w	sl, sl
 8009a4c:	3901      	subs	r1, #1
 8009a4e:	4652      	mov	r2, sl
 8009a50:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009a54:	9109      	str	r1, [sp, #36]	@ 0x24
 8009a56:	f7ff ff26 	bl	80098a6 <__exponent>
 8009a5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009a5c:	1813      	adds	r3, r2, r0
 8009a5e:	2a01      	cmp	r2, #1
 8009a60:	4681      	mov	r9, r0
 8009a62:	6123      	str	r3, [r4, #16]
 8009a64:	dc02      	bgt.n	8009a6c <_printf_float+0x150>
 8009a66:	6822      	ldr	r2, [r4, #0]
 8009a68:	07d2      	lsls	r2, r2, #31
 8009a6a:	d501      	bpl.n	8009a70 <_printf_float+0x154>
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	6123      	str	r3, [r4, #16]
 8009a70:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d0a2      	beq.n	80099be <_printf_float+0xa2>
 8009a78:	232d      	movs	r3, #45	@ 0x2d
 8009a7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a7e:	e79e      	b.n	80099be <_printf_float+0xa2>
 8009a80:	9a06      	ldr	r2, [sp, #24]
 8009a82:	2a47      	cmp	r2, #71	@ 0x47
 8009a84:	d1c2      	bne.n	8009a0c <_printf_float+0xf0>
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1c0      	bne.n	8009a0c <_printf_float+0xf0>
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	e7bd      	b.n	8009a0a <_printf_float+0xee>
 8009a8e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009a92:	d9db      	bls.n	8009a4c <_printf_float+0x130>
 8009a94:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009a98:	d118      	bne.n	8009acc <_printf_float+0x1b0>
 8009a9a:	2900      	cmp	r1, #0
 8009a9c:	6863      	ldr	r3, [r4, #4]
 8009a9e:	dd0b      	ble.n	8009ab8 <_printf_float+0x19c>
 8009aa0:	6121      	str	r1, [r4, #16]
 8009aa2:	b913      	cbnz	r3, 8009aaa <_printf_float+0x18e>
 8009aa4:	6822      	ldr	r2, [r4, #0]
 8009aa6:	07d0      	lsls	r0, r2, #31
 8009aa8:	d502      	bpl.n	8009ab0 <_printf_float+0x194>
 8009aaa:	3301      	adds	r3, #1
 8009aac:	440b      	add	r3, r1
 8009aae:	6123      	str	r3, [r4, #16]
 8009ab0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009ab2:	f04f 0900 	mov.w	r9, #0
 8009ab6:	e7db      	b.n	8009a70 <_printf_float+0x154>
 8009ab8:	b913      	cbnz	r3, 8009ac0 <_printf_float+0x1a4>
 8009aba:	6822      	ldr	r2, [r4, #0]
 8009abc:	07d2      	lsls	r2, r2, #31
 8009abe:	d501      	bpl.n	8009ac4 <_printf_float+0x1a8>
 8009ac0:	3302      	adds	r3, #2
 8009ac2:	e7f4      	b.n	8009aae <_printf_float+0x192>
 8009ac4:	2301      	movs	r3, #1
 8009ac6:	e7f2      	b.n	8009aae <_printf_float+0x192>
 8009ac8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009acc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ace:	4299      	cmp	r1, r3
 8009ad0:	db05      	blt.n	8009ade <_printf_float+0x1c2>
 8009ad2:	6823      	ldr	r3, [r4, #0]
 8009ad4:	6121      	str	r1, [r4, #16]
 8009ad6:	07d8      	lsls	r0, r3, #31
 8009ad8:	d5ea      	bpl.n	8009ab0 <_printf_float+0x194>
 8009ada:	1c4b      	adds	r3, r1, #1
 8009adc:	e7e7      	b.n	8009aae <_printf_float+0x192>
 8009ade:	2900      	cmp	r1, #0
 8009ae0:	bfd4      	ite	le
 8009ae2:	f1c1 0202 	rsble	r2, r1, #2
 8009ae6:	2201      	movgt	r2, #1
 8009ae8:	4413      	add	r3, r2
 8009aea:	e7e0      	b.n	8009aae <_printf_float+0x192>
 8009aec:	6823      	ldr	r3, [r4, #0]
 8009aee:	055a      	lsls	r2, r3, #21
 8009af0:	d407      	bmi.n	8009b02 <_printf_float+0x1e6>
 8009af2:	6923      	ldr	r3, [r4, #16]
 8009af4:	4642      	mov	r2, r8
 8009af6:	4631      	mov	r1, r6
 8009af8:	4628      	mov	r0, r5
 8009afa:	47b8      	blx	r7
 8009afc:	3001      	adds	r0, #1
 8009afe:	d12b      	bne.n	8009b58 <_printf_float+0x23c>
 8009b00:	e767      	b.n	80099d2 <_printf_float+0xb6>
 8009b02:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009b06:	f240 80dd 	bls.w	8009cc4 <_printf_float+0x3a8>
 8009b0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009b0e:	2200      	movs	r2, #0
 8009b10:	2300      	movs	r3, #0
 8009b12:	f7f6 fff1 	bl	8000af8 <__aeabi_dcmpeq>
 8009b16:	2800      	cmp	r0, #0
 8009b18:	d033      	beq.n	8009b82 <_printf_float+0x266>
 8009b1a:	4a37      	ldr	r2, [pc, #220]	@ (8009bf8 <_printf_float+0x2dc>)
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	4631      	mov	r1, r6
 8009b20:	4628      	mov	r0, r5
 8009b22:	47b8      	blx	r7
 8009b24:	3001      	adds	r0, #1
 8009b26:	f43f af54 	beq.w	80099d2 <_printf_float+0xb6>
 8009b2a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009b2e:	4543      	cmp	r3, r8
 8009b30:	db02      	blt.n	8009b38 <_printf_float+0x21c>
 8009b32:	6823      	ldr	r3, [r4, #0]
 8009b34:	07d8      	lsls	r0, r3, #31
 8009b36:	d50f      	bpl.n	8009b58 <_printf_float+0x23c>
 8009b38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b3c:	4631      	mov	r1, r6
 8009b3e:	4628      	mov	r0, r5
 8009b40:	47b8      	blx	r7
 8009b42:	3001      	adds	r0, #1
 8009b44:	f43f af45 	beq.w	80099d2 <_printf_float+0xb6>
 8009b48:	f04f 0900 	mov.w	r9, #0
 8009b4c:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b50:	f104 0a1a 	add.w	sl, r4, #26
 8009b54:	45c8      	cmp	r8, r9
 8009b56:	dc09      	bgt.n	8009b6c <_printf_float+0x250>
 8009b58:	6823      	ldr	r3, [r4, #0]
 8009b5a:	079b      	lsls	r3, r3, #30
 8009b5c:	f100 8103 	bmi.w	8009d66 <_printf_float+0x44a>
 8009b60:	68e0      	ldr	r0, [r4, #12]
 8009b62:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b64:	4298      	cmp	r0, r3
 8009b66:	bfb8      	it	lt
 8009b68:	4618      	movlt	r0, r3
 8009b6a:	e734      	b.n	80099d6 <_printf_float+0xba>
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	4652      	mov	r2, sl
 8009b70:	4631      	mov	r1, r6
 8009b72:	4628      	mov	r0, r5
 8009b74:	47b8      	blx	r7
 8009b76:	3001      	adds	r0, #1
 8009b78:	f43f af2b 	beq.w	80099d2 <_printf_float+0xb6>
 8009b7c:	f109 0901 	add.w	r9, r9, #1
 8009b80:	e7e8      	b.n	8009b54 <_printf_float+0x238>
 8009b82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	dc39      	bgt.n	8009bfc <_printf_float+0x2e0>
 8009b88:	4a1b      	ldr	r2, [pc, #108]	@ (8009bf8 <_printf_float+0x2dc>)
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	4631      	mov	r1, r6
 8009b8e:	4628      	mov	r0, r5
 8009b90:	47b8      	blx	r7
 8009b92:	3001      	adds	r0, #1
 8009b94:	f43f af1d 	beq.w	80099d2 <_printf_float+0xb6>
 8009b98:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009b9c:	ea59 0303 	orrs.w	r3, r9, r3
 8009ba0:	d102      	bne.n	8009ba8 <_printf_float+0x28c>
 8009ba2:	6823      	ldr	r3, [r4, #0]
 8009ba4:	07d9      	lsls	r1, r3, #31
 8009ba6:	d5d7      	bpl.n	8009b58 <_printf_float+0x23c>
 8009ba8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009bac:	4631      	mov	r1, r6
 8009bae:	4628      	mov	r0, r5
 8009bb0:	47b8      	blx	r7
 8009bb2:	3001      	adds	r0, #1
 8009bb4:	f43f af0d 	beq.w	80099d2 <_printf_float+0xb6>
 8009bb8:	f04f 0a00 	mov.w	sl, #0
 8009bbc:	f104 0b1a 	add.w	fp, r4, #26
 8009bc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bc2:	425b      	negs	r3, r3
 8009bc4:	4553      	cmp	r3, sl
 8009bc6:	dc01      	bgt.n	8009bcc <_printf_float+0x2b0>
 8009bc8:	464b      	mov	r3, r9
 8009bca:	e793      	b.n	8009af4 <_printf_float+0x1d8>
 8009bcc:	2301      	movs	r3, #1
 8009bce:	465a      	mov	r2, fp
 8009bd0:	4631      	mov	r1, r6
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	47b8      	blx	r7
 8009bd6:	3001      	adds	r0, #1
 8009bd8:	f43f aefb 	beq.w	80099d2 <_printf_float+0xb6>
 8009bdc:	f10a 0a01 	add.w	sl, sl, #1
 8009be0:	e7ee      	b.n	8009bc0 <_printf_float+0x2a4>
 8009be2:	bf00      	nop
 8009be4:	7fefffff 	.word	0x7fefffff
 8009be8:	0800d71a 	.word	0x0800d71a
 8009bec:	0800d716 	.word	0x0800d716
 8009bf0:	0800d722 	.word	0x0800d722
 8009bf4:	0800d71e 	.word	0x0800d71e
 8009bf8:	0800d726 	.word	0x0800d726
 8009bfc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009bfe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009c02:	4553      	cmp	r3, sl
 8009c04:	bfa8      	it	ge
 8009c06:	4653      	movge	r3, sl
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	4699      	mov	r9, r3
 8009c0c:	dc36      	bgt.n	8009c7c <_printf_float+0x360>
 8009c0e:	f04f 0b00 	mov.w	fp, #0
 8009c12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c16:	f104 021a 	add.w	r2, r4, #26
 8009c1a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009c1c:	9306      	str	r3, [sp, #24]
 8009c1e:	eba3 0309 	sub.w	r3, r3, r9
 8009c22:	455b      	cmp	r3, fp
 8009c24:	dc31      	bgt.n	8009c8a <_printf_float+0x36e>
 8009c26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c28:	459a      	cmp	sl, r3
 8009c2a:	dc3a      	bgt.n	8009ca2 <_printf_float+0x386>
 8009c2c:	6823      	ldr	r3, [r4, #0]
 8009c2e:	07da      	lsls	r2, r3, #31
 8009c30:	d437      	bmi.n	8009ca2 <_printf_float+0x386>
 8009c32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c34:	ebaa 0903 	sub.w	r9, sl, r3
 8009c38:	9b06      	ldr	r3, [sp, #24]
 8009c3a:	ebaa 0303 	sub.w	r3, sl, r3
 8009c3e:	4599      	cmp	r9, r3
 8009c40:	bfa8      	it	ge
 8009c42:	4699      	movge	r9, r3
 8009c44:	f1b9 0f00 	cmp.w	r9, #0
 8009c48:	dc33      	bgt.n	8009cb2 <_printf_float+0x396>
 8009c4a:	f04f 0800 	mov.w	r8, #0
 8009c4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c52:	f104 0b1a 	add.w	fp, r4, #26
 8009c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c58:	ebaa 0303 	sub.w	r3, sl, r3
 8009c5c:	eba3 0309 	sub.w	r3, r3, r9
 8009c60:	4543      	cmp	r3, r8
 8009c62:	f77f af79 	ble.w	8009b58 <_printf_float+0x23c>
 8009c66:	2301      	movs	r3, #1
 8009c68:	465a      	mov	r2, fp
 8009c6a:	4631      	mov	r1, r6
 8009c6c:	4628      	mov	r0, r5
 8009c6e:	47b8      	blx	r7
 8009c70:	3001      	adds	r0, #1
 8009c72:	f43f aeae 	beq.w	80099d2 <_printf_float+0xb6>
 8009c76:	f108 0801 	add.w	r8, r8, #1
 8009c7a:	e7ec      	b.n	8009c56 <_printf_float+0x33a>
 8009c7c:	4642      	mov	r2, r8
 8009c7e:	4631      	mov	r1, r6
 8009c80:	4628      	mov	r0, r5
 8009c82:	47b8      	blx	r7
 8009c84:	3001      	adds	r0, #1
 8009c86:	d1c2      	bne.n	8009c0e <_printf_float+0x2f2>
 8009c88:	e6a3      	b.n	80099d2 <_printf_float+0xb6>
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	4631      	mov	r1, r6
 8009c8e:	4628      	mov	r0, r5
 8009c90:	9206      	str	r2, [sp, #24]
 8009c92:	47b8      	blx	r7
 8009c94:	3001      	adds	r0, #1
 8009c96:	f43f ae9c 	beq.w	80099d2 <_printf_float+0xb6>
 8009c9a:	9a06      	ldr	r2, [sp, #24]
 8009c9c:	f10b 0b01 	add.w	fp, fp, #1
 8009ca0:	e7bb      	b.n	8009c1a <_printf_float+0x2fe>
 8009ca2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ca6:	4631      	mov	r1, r6
 8009ca8:	4628      	mov	r0, r5
 8009caa:	47b8      	blx	r7
 8009cac:	3001      	adds	r0, #1
 8009cae:	d1c0      	bne.n	8009c32 <_printf_float+0x316>
 8009cb0:	e68f      	b.n	80099d2 <_printf_float+0xb6>
 8009cb2:	9a06      	ldr	r2, [sp, #24]
 8009cb4:	464b      	mov	r3, r9
 8009cb6:	4442      	add	r2, r8
 8009cb8:	4631      	mov	r1, r6
 8009cba:	4628      	mov	r0, r5
 8009cbc:	47b8      	blx	r7
 8009cbe:	3001      	adds	r0, #1
 8009cc0:	d1c3      	bne.n	8009c4a <_printf_float+0x32e>
 8009cc2:	e686      	b.n	80099d2 <_printf_float+0xb6>
 8009cc4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009cc8:	f1ba 0f01 	cmp.w	sl, #1
 8009ccc:	dc01      	bgt.n	8009cd2 <_printf_float+0x3b6>
 8009cce:	07db      	lsls	r3, r3, #31
 8009cd0:	d536      	bpl.n	8009d40 <_printf_float+0x424>
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	4642      	mov	r2, r8
 8009cd6:	4631      	mov	r1, r6
 8009cd8:	4628      	mov	r0, r5
 8009cda:	47b8      	blx	r7
 8009cdc:	3001      	adds	r0, #1
 8009cde:	f43f ae78 	beq.w	80099d2 <_printf_float+0xb6>
 8009ce2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ce6:	4631      	mov	r1, r6
 8009ce8:	4628      	mov	r0, r5
 8009cea:	47b8      	blx	r7
 8009cec:	3001      	adds	r0, #1
 8009cee:	f43f ae70 	beq.w	80099d2 <_printf_float+0xb6>
 8009cf2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009cfe:	f7f6 fefb 	bl	8000af8 <__aeabi_dcmpeq>
 8009d02:	b9c0      	cbnz	r0, 8009d36 <_printf_float+0x41a>
 8009d04:	4653      	mov	r3, sl
 8009d06:	f108 0201 	add.w	r2, r8, #1
 8009d0a:	4631      	mov	r1, r6
 8009d0c:	4628      	mov	r0, r5
 8009d0e:	47b8      	blx	r7
 8009d10:	3001      	adds	r0, #1
 8009d12:	d10c      	bne.n	8009d2e <_printf_float+0x412>
 8009d14:	e65d      	b.n	80099d2 <_printf_float+0xb6>
 8009d16:	2301      	movs	r3, #1
 8009d18:	465a      	mov	r2, fp
 8009d1a:	4631      	mov	r1, r6
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	47b8      	blx	r7
 8009d20:	3001      	adds	r0, #1
 8009d22:	f43f ae56 	beq.w	80099d2 <_printf_float+0xb6>
 8009d26:	f108 0801 	add.w	r8, r8, #1
 8009d2a:	45d0      	cmp	r8, sl
 8009d2c:	dbf3      	blt.n	8009d16 <_printf_float+0x3fa>
 8009d2e:	464b      	mov	r3, r9
 8009d30:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009d34:	e6df      	b.n	8009af6 <_printf_float+0x1da>
 8009d36:	f04f 0800 	mov.w	r8, #0
 8009d3a:	f104 0b1a 	add.w	fp, r4, #26
 8009d3e:	e7f4      	b.n	8009d2a <_printf_float+0x40e>
 8009d40:	2301      	movs	r3, #1
 8009d42:	4642      	mov	r2, r8
 8009d44:	e7e1      	b.n	8009d0a <_printf_float+0x3ee>
 8009d46:	2301      	movs	r3, #1
 8009d48:	464a      	mov	r2, r9
 8009d4a:	4631      	mov	r1, r6
 8009d4c:	4628      	mov	r0, r5
 8009d4e:	47b8      	blx	r7
 8009d50:	3001      	adds	r0, #1
 8009d52:	f43f ae3e 	beq.w	80099d2 <_printf_float+0xb6>
 8009d56:	f108 0801 	add.w	r8, r8, #1
 8009d5a:	68e3      	ldr	r3, [r4, #12]
 8009d5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009d5e:	1a5b      	subs	r3, r3, r1
 8009d60:	4543      	cmp	r3, r8
 8009d62:	dcf0      	bgt.n	8009d46 <_printf_float+0x42a>
 8009d64:	e6fc      	b.n	8009b60 <_printf_float+0x244>
 8009d66:	f04f 0800 	mov.w	r8, #0
 8009d6a:	f104 0919 	add.w	r9, r4, #25
 8009d6e:	e7f4      	b.n	8009d5a <_printf_float+0x43e>

08009d70 <_printf_common>:
 8009d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d74:	4616      	mov	r6, r2
 8009d76:	4698      	mov	r8, r3
 8009d78:	688a      	ldr	r2, [r1, #8]
 8009d7a:	690b      	ldr	r3, [r1, #16]
 8009d7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009d80:	4293      	cmp	r3, r2
 8009d82:	bfb8      	it	lt
 8009d84:	4613      	movlt	r3, r2
 8009d86:	6033      	str	r3, [r6, #0]
 8009d88:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009d8c:	4607      	mov	r7, r0
 8009d8e:	460c      	mov	r4, r1
 8009d90:	b10a      	cbz	r2, 8009d96 <_printf_common+0x26>
 8009d92:	3301      	adds	r3, #1
 8009d94:	6033      	str	r3, [r6, #0]
 8009d96:	6823      	ldr	r3, [r4, #0]
 8009d98:	0699      	lsls	r1, r3, #26
 8009d9a:	bf42      	ittt	mi
 8009d9c:	6833      	ldrmi	r3, [r6, #0]
 8009d9e:	3302      	addmi	r3, #2
 8009da0:	6033      	strmi	r3, [r6, #0]
 8009da2:	6825      	ldr	r5, [r4, #0]
 8009da4:	f015 0506 	ands.w	r5, r5, #6
 8009da8:	d106      	bne.n	8009db8 <_printf_common+0x48>
 8009daa:	f104 0a19 	add.w	sl, r4, #25
 8009dae:	68e3      	ldr	r3, [r4, #12]
 8009db0:	6832      	ldr	r2, [r6, #0]
 8009db2:	1a9b      	subs	r3, r3, r2
 8009db4:	42ab      	cmp	r3, r5
 8009db6:	dc26      	bgt.n	8009e06 <_printf_common+0x96>
 8009db8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009dbc:	6822      	ldr	r2, [r4, #0]
 8009dbe:	3b00      	subs	r3, #0
 8009dc0:	bf18      	it	ne
 8009dc2:	2301      	movne	r3, #1
 8009dc4:	0692      	lsls	r2, r2, #26
 8009dc6:	d42b      	bmi.n	8009e20 <_printf_common+0xb0>
 8009dc8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009dcc:	4641      	mov	r1, r8
 8009dce:	4638      	mov	r0, r7
 8009dd0:	47c8      	blx	r9
 8009dd2:	3001      	adds	r0, #1
 8009dd4:	d01e      	beq.n	8009e14 <_printf_common+0xa4>
 8009dd6:	6823      	ldr	r3, [r4, #0]
 8009dd8:	6922      	ldr	r2, [r4, #16]
 8009dda:	f003 0306 	and.w	r3, r3, #6
 8009dde:	2b04      	cmp	r3, #4
 8009de0:	bf02      	ittt	eq
 8009de2:	68e5      	ldreq	r5, [r4, #12]
 8009de4:	6833      	ldreq	r3, [r6, #0]
 8009de6:	1aed      	subeq	r5, r5, r3
 8009de8:	68a3      	ldr	r3, [r4, #8]
 8009dea:	bf0c      	ite	eq
 8009dec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009df0:	2500      	movne	r5, #0
 8009df2:	4293      	cmp	r3, r2
 8009df4:	bfc4      	itt	gt
 8009df6:	1a9b      	subgt	r3, r3, r2
 8009df8:	18ed      	addgt	r5, r5, r3
 8009dfa:	2600      	movs	r6, #0
 8009dfc:	341a      	adds	r4, #26
 8009dfe:	42b5      	cmp	r5, r6
 8009e00:	d11a      	bne.n	8009e38 <_printf_common+0xc8>
 8009e02:	2000      	movs	r0, #0
 8009e04:	e008      	b.n	8009e18 <_printf_common+0xa8>
 8009e06:	2301      	movs	r3, #1
 8009e08:	4652      	mov	r2, sl
 8009e0a:	4641      	mov	r1, r8
 8009e0c:	4638      	mov	r0, r7
 8009e0e:	47c8      	blx	r9
 8009e10:	3001      	adds	r0, #1
 8009e12:	d103      	bne.n	8009e1c <_printf_common+0xac>
 8009e14:	f04f 30ff 	mov.w	r0, #4294967295
 8009e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e1c:	3501      	adds	r5, #1
 8009e1e:	e7c6      	b.n	8009dae <_printf_common+0x3e>
 8009e20:	18e1      	adds	r1, r4, r3
 8009e22:	1c5a      	adds	r2, r3, #1
 8009e24:	2030      	movs	r0, #48	@ 0x30
 8009e26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009e2a:	4422      	add	r2, r4
 8009e2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009e30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009e34:	3302      	adds	r3, #2
 8009e36:	e7c7      	b.n	8009dc8 <_printf_common+0x58>
 8009e38:	2301      	movs	r3, #1
 8009e3a:	4622      	mov	r2, r4
 8009e3c:	4641      	mov	r1, r8
 8009e3e:	4638      	mov	r0, r7
 8009e40:	47c8      	blx	r9
 8009e42:	3001      	adds	r0, #1
 8009e44:	d0e6      	beq.n	8009e14 <_printf_common+0xa4>
 8009e46:	3601      	adds	r6, #1
 8009e48:	e7d9      	b.n	8009dfe <_printf_common+0x8e>
	...

08009e4c <_printf_i>:
 8009e4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e50:	7e0f      	ldrb	r7, [r1, #24]
 8009e52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009e54:	2f78      	cmp	r7, #120	@ 0x78
 8009e56:	4691      	mov	r9, r2
 8009e58:	4680      	mov	r8, r0
 8009e5a:	460c      	mov	r4, r1
 8009e5c:	469a      	mov	sl, r3
 8009e5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009e62:	d807      	bhi.n	8009e74 <_printf_i+0x28>
 8009e64:	2f62      	cmp	r7, #98	@ 0x62
 8009e66:	d80a      	bhi.n	8009e7e <_printf_i+0x32>
 8009e68:	2f00      	cmp	r7, #0
 8009e6a:	f000 80d1 	beq.w	800a010 <_printf_i+0x1c4>
 8009e6e:	2f58      	cmp	r7, #88	@ 0x58
 8009e70:	f000 80b8 	beq.w	8009fe4 <_printf_i+0x198>
 8009e74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009e78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009e7c:	e03a      	b.n	8009ef4 <_printf_i+0xa8>
 8009e7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009e82:	2b15      	cmp	r3, #21
 8009e84:	d8f6      	bhi.n	8009e74 <_printf_i+0x28>
 8009e86:	a101      	add	r1, pc, #4	@ (adr r1, 8009e8c <_printf_i+0x40>)
 8009e88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e8c:	08009ee5 	.word	0x08009ee5
 8009e90:	08009ef9 	.word	0x08009ef9
 8009e94:	08009e75 	.word	0x08009e75
 8009e98:	08009e75 	.word	0x08009e75
 8009e9c:	08009e75 	.word	0x08009e75
 8009ea0:	08009e75 	.word	0x08009e75
 8009ea4:	08009ef9 	.word	0x08009ef9
 8009ea8:	08009e75 	.word	0x08009e75
 8009eac:	08009e75 	.word	0x08009e75
 8009eb0:	08009e75 	.word	0x08009e75
 8009eb4:	08009e75 	.word	0x08009e75
 8009eb8:	08009ff7 	.word	0x08009ff7
 8009ebc:	08009f23 	.word	0x08009f23
 8009ec0:	08009fb1 	.word	0x08009fb1
 8009ec4:	08009e75 	.word	0x08009e75
 8009ec8:	08009e75 	.word	0x08009e75
 8009ecc:	0800a019 	.word	0x0800a019
 8009ed0:	08009e75 	.word	0x08009e75
 8009ed4:	08009f23 	.word	0x08009f23
 8009ed8:	08009e75 	.word	0x08009e75
 8009edc:	08009e75 	.word	0x08009e75
 8009ee0:	08009fb9 	.word	0x08009fb9
 8009ee4:	6833      	ldr	r3, [r6, #0]
 8009ee6:	1d1a      	adds	r2, r3, #4
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	6032      	str	r2, [r6, #0]
 8009eec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ef0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e09c      	b.n	800a032 <_printf_i+0x1e6>
 8009ef8:	6833      	ldr	r3, [r6, #0]
 8009efa:	6820      	ldr	r0, [r4, #0]
 8009efc:	1d19      	adds	r1, r3, #4
 8009efe:	6031      	str	r1, [r6, #0]
 8009f00:	0606      	lsls	r6, r0, #24
 8009f02:	d501      	bpl.n	8009f08 <_printf_i+0xbc>
 8009f04:	681d      	ldr	r5, [r3, #0]
 8009f06:	e003      	b.n	8009f10 <_printf_i+0xc4>
 8009f08:	0645      	lsls	r5, r0, #25
 8009f0a:	d5fb      	bpl.n	8009f04 <_printf_i+0xb8>
 8009f0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009f10:	2d00      	cmp	r5, #0
 8009f12:	da03      	bge.n	8009f1c <_printf_i+0xd0>
 8009f14:	232d      	movs	r3, #45	@ 0x2d
 8009f16:	426d      	negs	r5, r5
 8009f18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f1c:	4858      	ldr	r0, [pc, #352]	@ (800a080 <_printf_i+0x234>)
 8009f1e:	230a      	movs	r3, #10
 8009f20:	e011      	b.n	8009f46 <_printf_i+0xfa>
 8009f22:	6821      	ldr	r1, [r4, #0]
 8009f24:	6833      	ldr	r3, [r6, #0]
 8009f26:	0608      	lsls	r0, r1, #24
 8009f28:	f853 5b04 	ldr.w	r5, [r3], #4
 8009f2c:	d402      	bmi.n	8009f34 <_printf_i+0xe8>
 8009f2e:	0649      	lsls	r1, r1, #25
 8009f30:	bf48      	it	mi
 8009f32:	b2ad      	uxthmi	r5, r5
 8009f34:	2f6f      	cmp	r7, #111	@ 0x6f
 8009f36:	4852      	ldr	r0, [pc, #328]	@ (800a080 <_printf_i+0x234>)
 8009f38:	6033      	str	r3, [r6, #0]
 8009f3a:	bf14      	ite	ne
 8009f3c:	230a      	movne	r3, #10
 8009f3e:	2308      	moveq	r3, #8
 8009f40:	2100      	movs	r1, #0
 8009f42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009f46:	6866      	ldr	r6, [r4, #4]
 8009f48:	60a6      	str	r6, [r4, #8]
 8009f4a:	2e00      	cmp	r6, #0
 8009f4c:	db05      	blt.n	8009f5a <_printf_i+0x10e>
 8009f4e:	6821      	ldr	r1, [r4, #0]
 8009f50:	432e      	orrs	r6, r5
 8009f52:	f021 0104 	bic.w	r1, r1, #4
 8009f56:	6021      	str	r1, [r4, #0]
 8009f58:	d04b      	beq.n	8009ff2 <_printf_i+0x1a6>
 8009f5a:	4616      	mov	r6, r2
 8009f5c:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f60:	fb03 5711 	mls	r7, r3, r1, r5
 8009f64:	5dc7      	ldrb	r7, [r0, r7]
 8009f66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f6a:	462f      	mov	r7, r5
 8009f6c:	42bb      	cmp	r3, r7
 8009f6e:	460d      	mov	r5, r1
 8009f70:	d9f4      	bls.n	8009f5c <_printf_i+0x110>
 8009f72:	2b08      	cmp	r3, #8
 8009f74:	d10b      	bne.n	8009f8e <_printf_i+0x142>
 8009f76:	6823      	ldr	r3, [r4, #0]
 8009f78:	07df      	lsls	r7, r3, #31
 8009f7a:	d508      	bpl.n	8009f8e <_printf_i+0x142>
 8009f7c:	6923      	ldr	r3, [r4, #16]
 8009f7e:	6861      	ldr	r1, [r4, #4]
 8009f80:	4299      	cmp	r1, r3
 8009f82:	bfde      	ittt	le
 8009f84:	2330      	movle	r3, #48	@ 0x30
 8009f86:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009f8a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009f8e:	1b92      	subs	r2, r2, r6
 8009f90:	6122      	str	r2, [r4, #16]
 8009f92:	f8cd a000 	str.w	sl, [sp]
 8009f96:	464b      	mov	r3, r9
 8009f98:	aa03      	add	r2, sp, #12
 8009f9a:	4621      	mov	r1, r4
 8009f9c:	4640      	mov	r0, r8
 8009f9e:	f7ff fee7 	bl	8009d70 <_printf_common>
 8009fa2:	3001      	adds	r0, #1
 8009fa4:	d14a      	bne.n	800a03c <_printf_i+0x1f0>
 8009fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8009faa:	b004      	add	sp, #16
 8009fac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fb0:	6823      	ldr	r3, [r4, #0]
 8009fb2:	f043 0320 	orr.w	r3, r3, #32
 8009fb6:	6023      	str	r3, [r4, #0]
 8009fb8:	4832      	ldr	r0, [pc, #200]	@ (800a084 <_printf_i+0x238>)
 8009fba:	2778      	movs	r7, #120	@ 0x78
 8009fbc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009fc0:	6823      	ldr	r3, [r4, #0]
 8009fc2:	6831      	ldr	r1, [r6, #0]
 8009fc4:	061f      	lsls	r7, r3, #24
 8009fc6:	f851 5b04 	ldr.w	r5, [r1], #4
 8009fca:	d402      	bmi.n	8009fd2 <_printf_i+0x186>
 8009fcc:	065f      	lsls	r7, r3, #25
 8009fce:	bf48      	it	mi
 8009fd0:	b2ad      	uxthmi	r5, r5
 8009fd2:	6031      	str	r1, [r6, #0]
 8009fd4:	07d9      	lsls	r1, r3, #31
 8009fd6:	bf44      	itt	mi
 8009fd8:	f043 0320 	orrmi.w	r3, r3, #32
 8009fdc:	6023      	strmi	r3, [r4, #0]
 8009fde:	b11d      	cbz	r5, 8009fe8 <_printf_i+0x19c>
 8009fe0:	2310      	movs	r3, #16
 8009fe2:	e7ad      	b.n	8009f40 <_printf_i+0xf4>
 8009fe4:	4826      	ldr	r0, [pc, #152]	@ (800a080 <_printf_i+0x234>)
 8009fe6:	e7e9      	b.n	8009fbc <_printf_i+0x170>
 8009fe8:	6823      	ldr	r3, [r4, #0]
 8009fea:	f023 0320 	bic.w	r3, r3, #32
 8009fee:	6023      	str	r3, [r4, #0]
 8009ff0:	e7f6      	b.n	8009fe0 <_printf_i+0x194>
 8009ff2:	4616      	mov	r6, r2
 8009ff4:	e7bd      	b.n	8009f72 <_printf_i+0x126>
 8009ff6:	6833      	ldr	r3, [r6, #0]
 8009ff8:	6825      	ldr	r5, [r4, #0]
 8009ffa:	6961      	ldr	r1, [r4, #20]
 8009ffc:	1d18      	adds	r0, r3, #4
 8009ffe:	6030      	str	r0, [r6, #0]
 800a000:	062e      	lsls	r6, r5, #24
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	d501      	bpl.n	800a00a <_printf_i+0x1be>
 800a006:	6019      	str	r1, [r3, #0]
 800a008:	e002      	b.n	800a010 <_printf_i+0x1c4>
 800a00a:	0668      	lsls	r0, r5, #25
 800a00c:	d5fb      	bpl.n	800a006 <_printf_i+0x1ba>
 800a00e:	8019      	strh	r1, [r3, #0]
 800a010:	2300      	movs	r3, #0
 800a012:	6123      	str	r3, [r4, #16]
 800a014:	4616      	mov	r6, r2
 800a016:	e7bc      	b.n	8009f92 <_printf_i+0x146>
 800a018:	6833      	ldr	r3, [r6, #0]
 800a01a:	1d1a      	adds	r2, r3, #4
 800a01c:	6032      	str	r2, [r6, #0]
 800a01e:	681e      	ldr	r6, [r3, #0]
 800a020:	6862      	ldr	r2, [r4, #4]
 800a022:	2100      	movs	r1, #0
 800a024:	4630      	mov	r0, r6
 800a026:	f7f6 f8eb 	bl	8000200 <memchr>
 800a02a:	b108      	cbz	r0, 800a030 <_printf_i+0x1e4>
 800a02c:	1b80      	subs	r0, r0, r6
 800a02e:	6060      	str	r0, [r4, #4]
 800a030:	6863      	ldr	r3, [r4, #4]
 800a032:	6123      	str	r3, [r4, #16]
 800a034:	2300      	movs	r3, #0
 800a036:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a03a:	e7aa      	b.n	8009f92 <_printf_i+0x146>
 800a03c:	6923      	ldr	r3, [r4, #16]
 800a03e:	4632      	mov	r2, r6
 800a040:	4649      	mov	r1, r9
 800a042:	4640      	mov	r0, r8
 800a044:	47d0      	blx	sl
 800a046:	3001      	adds	r0, #1
 800a048:	d0ad      	beq.n	8009fa6 <_printf_i+0x15a>
 800a04a:	6823      	ldr	r3, [r4, #0]
 800a04c:	079b      	lsls	r3, r3, #30
 800a04e:	d413      	bmi.n	800a078 <_printf_i+0x22c>
 800a050:	68e0      	ldr	r0, [r4, #12]
 800a052:	9b03      	ldr	r3, [sp, #12]
 800a054:	4298      	cmp	r0, r3
 800a056:	bfb8      	it	lt
 800a058:	4618      	movlt	r0, r3
 800a05a:	e7a6      	b.n	8009faa <_printf_i+0x15e>
 800a05c:	2301      	movs	r3, #1
 800a05e:	4632      	mov	r2, r6
 800a060:	4649      	mov	r1, r9
 800a062:	4640      	mov	r0, r8
 800a064:	47d0      	blx	sl
 800a066:	3001      	adds	r0, #1
 800a068:	d09d      	beq.n	8009fa6 <_printf_i+0x15a>
 800a06a:	3501      	adds	r5, #1
 800a06c:	68e3      	ldr	r3, [r4, #12]
 800a06e:	9903      	ldr	r1, [sp, #12]
 800a070:	1a5b      	subs	r3, r3, r1
 800a072:	42ab      	cmp	r3, r5
 800a074:	dcf2      	bgt.n	800a05c <_printf_i+0x210>
 800a076:	e7eb      	b.n	800a050 <_printf_i+0x204>
 800a078:	2500      	movs	r5, #0
 800a07a:	f104 0619 	add.w	r6, r4, #25
 800a07e:	e7f5      	b.n	800a06c <_printf_i+0x220>
 800a080:	0800d728 	.word	0x0800d728
 800a084:	0800d739 	.word	0x0800d739

0800a088 <_scanf_float>:
 800a088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08c:	b087      	sub	sp, #28
 800a08e:	4691      	mov	r9, r2
 800a090:	9303      	str	r3, [sp, #12]
 800a092:	688b      	ldr	r3, [r1, #8]
 800a094:	1e5a      	subs	r2, r3, #1
 800a096:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a09a:	bf81      	itttt	hi
 800a09c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a0a0:	eb03 0b05 	addhi.w	fp, r3, r5
 800a0a4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a0a8:	608b      	strhi	r3, [r1, #8]
 800a0aa:	680b      	ldr	r3, [r1, #0]
 800a0ac:	460a      	mov	r2, r1
 800a0ae:	f04f 0500 	mov.w	r5, #0
 800a0b2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a0b6:	f842 3b1c 	str.w	r3, [r2], #28
 800a0ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a0be:	4680      	mov	r8, r0
 800a0c0:	460c      	mov	r4, r1
 800a0c2:	bf98      	it	ls
 800a0c4:	f04f 0b00 	movls.w	fp, #0
 800a0c8:	9201      	str	r2, [sp, #4]
 800a0ca:	4616      	mov	r6, r2
 800a0cc:	46aa      	mov	sl, r5
 800a0ce:	462f      	mov	r7, r5
 800a0d0:	9502      	str	r5, [sp, #8]
 800a0d2:	68a2      	ldr	r2, [r4, #8]
 800a0d4:	b15a      	cbz	r2, 800a0ee <_scanf_float+0x66>
 800a0d6:	f8d9 3000 	ldr.w	r3, [r9]
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	2b4e      	cmp	r3, #78	@ 0x4e
 800a0de:	d863      	bhi.n	800a1a8 <_scanf_float+0x120>
 800a0e0:	2b40      	cmp	r3, #64	@ 0x40
 800a0e2:	d83b      	bhi.n	800a15c <_scanf_float+0xd4>
 800a0e4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a0e8:	b2c8      	uxtb	r0, r1
 800a0ea:	280e      	cmp	r0, #14
 800a0ec:	d939      	bls.n	800a162 <_scanf_float+0xda>
 800a0ee:	b11f      	cbz	r7, 800a0f8 <_scanf_float+0x70>
 800a0f0:	6823      	ldr	r3, [r4, #0]
 800a0f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a0f6:	6023      	str	r3, [r4, #0]
 800a0f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a0fc:	f1ba 0f01 	cmp.w	sl, #1
 800a100:	f200 8114 	bhi.w	800a32c <_scanf_float+0x2a4>
 800a104:	9b01      	ldr	r3, [sp, #4]
 800a106:	429e      	cmp	r6, r3
 800a108:	f200 8105 	bhi.w	800a316 <_scanf_float+0x28e>
 800a10c:	2001      	movs	r0, #1
 800a10e:	b007      	add	sp, #28
 800a110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a114:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a118:	2a0d      	cmp	r2, #13
 800a11a:	d8e8      	bhi.n	800a0ee <_scanf_float+0x66>
 800a11c:	a101      	add	r1, pc, #4	@ (adr r1, 800a124 <_scanf_float+0x9c>)
 800a11e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a122:	bf00      	nop
 800a124:	0800a26d 	.word	0x0800a26d
 800a128:	0800a0ef 	.word	0x0800a0ef
 800a12c:	0800a0ef 	.word	0x0800a0ef
 800a130:	0800a0ef 	.word	0x0800a0ef
 800a134:	0800a2c9 	.word	0x0800a2c9
 800a138:	0800a2a3 	.word	0x0800a2a3
 800a13c:	0800a0ef 	.word	0x0800a0ef
 800a140:	0800a0ef 	.word	0x0800a0ef
 800a144:	0800a27b 	.word	0x0800a27b
 800a148:	0800a0ef 	.word	0x0800a0ef
 800a14c:	0800a0ef 	.word	0x0800a0ef
 800a150:	0800a0ef 	.word	0x0800a0ef
 800a154:	0800a0ef 	.word	0x0800a0ef
 800a158:	0800a237 	.word	0x0800a237
 800a15c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a160:	e7da      	b.n	800a118 <_scanf_float+0x90>
 800a162:	290e      	cmp	r1, #14
 800a164:	d8c3      	bhi.n	800a0ee <_scanf_float+0x66>
 800a166:	a001      	add	r0, pc, #4	@ (adr r0, 800a16c <_scanf_float+0xe4>)
 800a168:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a16c:	0800a227 	.word	0x0800a227
 800a170:	0800a0ef 	.word	0x0800a0ef
 800a174:	0800a227 	.word	0x0800a227
 800a178:	0800a2b7 	.word	0x0800a2b7
 800a17c:	0800a0ef 	.word	0x0800a0ef
 800a180:	0800a1c9 	.word	0x0800a1c9
 800a184:	0800a20d 	.word	0x0800a20d
 800a188:	0800a20d 	.word	0x0800a20d
 800a18c:	0800a20d 	.word	0x0800a20d
 800a190:	0800a20d 	.word	0x0800a20d
 800a194:	0800a20d 	.word	0x0800a20d
 800a198:	0800a20d 	.word	0x0800a20d
 800a19c:	0800a20d 	.word	0x0800a20d
 800a1a0:	0800a20d 	.word	0x0800a20d
 800a1a4:	0800a20d 	.word	0x0800a20d
 800a1a8:	2b6e      	cmp	r3, #110	@ 0x6e
 800a1aa:	d809      	bhi.n	800a1c0 <_scanf_float+0x138>
 800a1ac:	2b60      	cmp	r3, #96	@ 0x60
 800a1ae:	d8b1      	bhi.n	800a114 <_scanf_float+0x8c>
 800a1b0:	2b54      	cmp	r3, #84	@ 0x54
 800a1b2:	d07b      	beq.n	800a2ac <_scanf_float+0x224>
 800a1b4:	2b59      	cmp	r3, #89	@ 0x59
 800a1b6:	d19a      	bne.n	800a0ee <_scanf_float+0x66>
 800a1b8:	2d07      	cmp	r5, #7
 800a1ba:	d198      	bne.n	800a0ee <_scanf_float+0x66>
 800a1bc:	2508      	movs	r5, #8
 800a1be:	e02f      	b.n	800a220 <_scanf_float+0x198>
 800a1c0:	2b74      	cmp	r3, #116	@ 0x74
 800a1c2:	d073      	beq.n	800a2ac <_scanf_float+0x224>
 800a1c4:	2b79      	cmp	r3, #121	@ 0x79
 800a1c6:	e7f6      	b.n	800a1b6 <_scanf_float+0x12e>
 800a1c8:	6821      	ldr	r1, [r4, #0]
 800a1ca:	05c8      	lsls	r0, r1, #23
 800a1cc:	d51e      	bpl.n	800a20c <_scanf_float+0x184>
 800a1ce:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a1d2:	6021      	str	r1, [r4, #0]
 800a1d4:	3701      	adds	r7, #1
 800a1d6:	f1bb 0f00 	cmp.w	fp, #0
 800a1da:	d003      	beq.n	800a1e4 <_scanf_float+0x15c>
 800a1dc:	3201      	adds	r2, #1
 800a1de:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a1e2:	60a2      	str	r2, [r4, #8]
 800a1e4:	68a3      	ldr	r3, [r4, #8]
 800a1e6:	3b01      	subs	r3, #1
 800a1e8:	60a3      	str	r3, [r4, #8]
 800a1ea:	6923      	ldr	r3, [r4, #16]
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	6123      	str	r3, [r4, #16]
 800a1f0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a1f4:	3b01      	subs	r3, #1
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	f8c9 3004 	str.w	r3, [r9, #4]
 800a1fc:	f340 8082 	ble.w	800a304 <_scanf_float+0x27c>
 800a200:	f8d9 3000 	ldr.w	r3, [r9]
 800a204:	3301      	adds	r3, #1
 800a206:	f8c9 3000 	str.w	r3, [r9]
 800a20a:	e762      	b.n	800a0d2 <_scanf_float+0x4a>
 800a20c:	eb1a 0105 	adds.w	r1, sl, r5
 800a210:	f47f af6d 	bne.w	800a0ee <_scanf_float+0x66>
 800a214:	6822      	ldr	r2, [r4, #0]
 800a216:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a21a:	6022      	str	r2, [r4, #0]
 800a21c:	460d      	mov	r5, r1
 800a21e:	468a      	mov	sl, r1
 800a220:	f806 3b01 	strb.w	r3, [r6], #1
 800a224:	e7de      	b.n	800a1e4 <_scanf_float+0x15c>
 800a226:	6822      	ldr	r2, [r4, #0]
 800a228:	0610      	lsls	r0, r2, #24
 800a22a:	f57f af60 	bpl.w	800a0ee <_scanf_float+0x66>
 800a22e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a232:	6022      	str	r2, [r4, #0]
 800a234:	e7f4      	b.n	800a220 <_scanf_float+0x198>
 800a236:	f1ba 0f00 	cmp.w	sl, #0
 800a23a:	d10c      	bne.n	800a256 <_scanf_float+0x1ce>
 800a23c:	b977      	cbnz	r7, 800a25c <_scanf_float+0x1d4>
 800a23e:	6822      	ldr	r2, [r4, #0]
 800a240:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a244:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a248:	d108      	bne.n	800a25c <_scanf_float+0x1d4>
 800a24a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a24e:	6022      	str	r2, [r4, #0]
 800a250:	f04f 0a01 	mov.w	sl, #1
 800a254:	e7e4      	b.n	800a220 <_scanf_float+0x198>
 800a256:	f1ba 0f02 	cmp.w	sl, #2
 800a25a:	d050      	beq.n	800a2fe <_scanf_float+0x276>
 800a25c:	2d01      	cmp	r5, #1
 800a25e:	d002      	beq.n	800a266 <_scanf_float+0x1de>
 800a260:	2d04      	cmp	r5, #4
 800a262:	f47f af44 	bne.w	800a0ee <_scanf_float+0x66>
 800a266:	3501      	adds	r5, #1
 800a268:	b2ed      	uxtb	r5, r5
 800a26a:	e7d9      	b.n	800a220 <_scanf_float+0x198>
 800a26c:	f1ba 0f01 	cmp.w	sl, #1
 800a270:	f47f af3d 	bne.w	800a0ee <_scanf_float+0x66>
 800a274:	f04f 0a02 	mov.w	sl, #2
 800a278:	e7d2      	b.n	800a220 <_scanf_float+0x198>
 800a27a:	b975      	cbnz	r5, 800a29a <_scanf_float+0x212>
 800a27c:	2f00      	cmp	r7, #0
 800a27e:	f47f af37 	bne.w	800a0f0 <_scanf_float+0x68>
 800a282:	6822      	ldr	r2, [r4, #0]
 800a284:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a288:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a28c:	f040 8103 	bne.w	800a496 <_scanf_float+0x40e>
 800a290:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a294:	6022      	str	r2, [r4, #0]
 800a296:	2501      	movs	r5, #1
 800a298:	e7c2      	b.n	800a220 <_scanf_float+0x198>
 800a29a:	2d03      	cmp	r5, #3
 800a29c:	d0e3      	beq.n	800a266 <_scanf_float+0x1de>
 800a29e:	2d05      	cmp	r5, #5
 800a2a0:	e7df      	b.n	800a262 <_scanf_float+0x1da>
 800a2a2:	2d02      	cmp	r5, #2
 800a2a4:	f47f af23 	bne.w	800a0ee <_scanf_float+0x66>
 800a2a8:	2503      	movs	r5, #3
 800a2aa:	e7b9      	b.n	800a220 <_scanf_float+0x198>
 800a2ac:	2d06      	cmp	r5, #6
 800a2ae:	f47f af1e 	bne.w	800a0ee <_scanf_float+0x66>
 800a2b2:	2507      	movs	r5, #7
 800a2b4:	e7b4      	b.n	800a220 <_scanf_float+0x198>
 800a2b6:	6822      	ldr	r2, [r4, #0]
 800a2b8:	0591      	lsls	r1, r2, #22
 800a2ba:	f57f af18 	bpl.w	800a0ee <_scanf_float+0x66>
 800a2be:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a2c2:	6022      	str	r2, [r4, #0]
 800a2c4:	9702      	str	r7, [sp, #8]
 800a2c6:	e7ab      	b.n	800a220 <_scanf_float+0x198>
 800a2c8:	6822      	ldr	r2, [r4, #0]
 800a2ca:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a2ce:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a2d2:	d005      	beq.n	800a2e0 <_scanf_float+0x258>
 800a2d4:	0550      	lsls	r0, r2, #21
 800a2d6:	f57f af0a 	bpl.w	800a0ee <_scanf_float+0x66>
 800a2da:	2f00      	cmp	r7, #0
 800a2dc:	f000 80db 	beq.w	800a496 <_scanf_float+0x40e>
 800a2e0:	0591      	lsls	r1, r2, #22
 800a2e2:	bf58      	it	pl
 800a2e4:	9902      	ldrpl	r1, [sp, #8]
 800a2e6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a2ea:	bf58      	it	pl
 800a2ec:	1a79      	subpl	r1, r7, r1
 800a2ee:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800a2f2:	bf58      	it	pl
 800a2f4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a2f8:	6022      	str	r2, [r4, #0]
 800a2fa:	2700      	movs	r7, #0
 800a2fc:	e790      	b.n	800a220 <_scanf_float+0x198>
 800a2fe:	f04f 0a03 	mov.w	sl, #3
 800a302:	e78d      	b.n	800a220 <_scanf_float+0x198>
 800a304:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a308:	4649      	mov	r1, r9
 800a30a:	4640      	mov	r0, r8
 800a30c:	4798      	blx	r3
 800a30e:	2800      	cmp	r0, #0
 800a310:	f43f aedf 	beq.w	800a0d2 <_scanf_float+0x4a>
 800a314:	e6eb      	b.n	800a0ee <_scanf_float+0x66>
 800a316:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a31a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a31e:	464a      	mov	r2, r9
 800a320:	4640      	mov	r0, r8
 800a322:	4798      	blx	r3
 800a324:	6923      	ldr	r3, [r4, #16]
 800a326:	3b01      	subs	r3, #1
 800a328:	6123      	str	r3, [r4, #16]
 800a32a:	e6eb      	b.n	800a104 <_scanf_float+0x7c>
 800a32c:	1e6b      	subs	r3, r5, #1
 800a32e:	2b06      	cmp	r3, #6
 800a330:	d824      	bhi.n	800a37c <_scanf_float+0x2f4>
 800a332:	2d02      	cmp	r5, #2
 800a334:	d836      	bhi.n	800a3a4 <_scanf_float+0x31c>
 800a336:	9b01      	ldr	r3, [sp, #4]
 800a338:	429e      	cmp	r6, r3
 800a33a:	f67f aee7 	bls.w	800a10c <_scanf_float+0x84>
 800a33e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a342:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a346:	464a      	mov	r2, r9
 800a348:	4640      	mov	r0, r8
 800a34a:	4798      	blx	r3
 800a34c:	6923      	ldr	r3, [r4, #16]
 800a34e:	3b01      	subs	r3, #1
 800a350:	6123      	str	r3, [r4, #16]
 800a352:	e7f0      	b.n	800a336 <_scanf_float+0x2ae>
 800a354:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a358:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800a35c:	464a      	mov	r2, r9
 800a35e:	4640      	mov	r0, r8
 800a360:	4798      	blx	r3
 800a362:	6923      	ldr	r3, [r4, #16]
 800a364:	3b01      	subs	r3, #1
 800a366:	6123      	str	r3, [r4, #16]
 800a368:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a36c:	fa5f fa8a 	uxtb.w	sl, sl
 800a370:	f1ba 0f02 	cmp.w	sl, #2
 800a374:	d1ee      	bne.n	800a354 <_scanf_float+0x2cc>
 800a376:	3d03      	subs	r5, #3
 800a378:	b2ed      	uxtb	r5, r5
 800a37a:	1b76      	subs	r6, r6, r5
 800a37c:	6823      	ldr	r3, [r4, #0]
 800a37e:	05da      	lsls	r2, r3, #23
 800a380:	d530      	bpl.n	800a3e4 <_scanf_float+0x35c>
 800a382:	055b      	lsls	r3, r3, #21
 800a384:	d511      	bpl.n	800a3aa <_scanf_float+0x322>
 800a386:	9b01      	ldr	r3, [sp, #4]
 800a388:	429e      	cmp	r6, r3
 800a38a:	f67f aebf 	bls.w	800a10c <_scanf_float+0x84>
 800a38e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a392:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a396:	464a      	mov	r2, r9
 800a398:	4640      	mov	r0, r8
 800a39a:	4798      	blx	r3
 800a39c:	6923      	ldr	r3, [r4, #16]
 800a39e:	3b01      	subs	r3, #1
 800a3a0:	6123      	str	r3, [r4, #16]
 800a3a2:	e7f0      	b.n	800a386 <_scanf_float+0x2fe>
 800a3a4:	46aa      	mov	sl, r5
 800a3a6:	46b3      	mov	fp, r6
 800a3a8:	e7de      	b.n	800a368 <_scanf_float+0x2e0>
 800a3aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a3ae:	6923      	ldr	r3, [r4, #16]
 800a3b0:	2965      	cmp	r1, #101	@ 0x65
 800a3b2:	f103 33ff 	add.w	r3, r3, #4294967295
 800a3b6:	f106 35ff 	add.w	r5, r6, #4294967295
 800a3ba:	6123      	str	r3, [r4, #16]
 800a3bc:	d00c      	beq.n	800a3d8 <_scanf_float+0x350>
 800a3be:	2945      	cmp	r1, #69	@ 0x45
 800a3c0:	d00a      	beq.n	800a3d8 <_scanf_float+0x350>
 800a3c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a3c6:	464a      	mov	r2, r9
 800a3c8:	4640      	mov	r0, r8
 800a3ca:	4798      	blx	r3
 800a3cc:	6923      	ldr	r3, [r4, #16]
 800a3ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a3d2:	3b01      	subs	r3, #1
 800a3d4:	1eb5      	subs	r5, r6, #2
 800a3d6:	6123      	str	r3, [r4, #16]
 800a3d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a3dc:	464a      	mov	r2, r9
 800a3de:	4640      	mov	r0, r8
 800a3e0:	4798      	blx	r3
 800a3e2:	462e      	mov	r6, r5
 800a3e4:	6822      	ldr	r2, [r4, #0]
 800a3e6:	f012 0210 	ands.w	r2, r2, #16
 800a3ea:	d001      	beq.n	800a3f0 <_scanf_float+0x368>
 800a3ec:	2000      	movs	r0, #0
 800a3ee:	e68e      	b.n	800a10e <_scanf_float+0x86>
 800a3f0:	7032      	strb	r2, [r6, #0]
 800a3f2:	6823      	ldr	r3, [r4, #0]
 800a3f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800a3f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3fc:	d125      	bne.n	800a44a <_scanf_float+0x3c2>
 800a3fe:	9b02      	ldr	r3, [sp, #8]
 800a400:	429f      	cmp	r7, r3
 800a402:	d00a      	beq.n	800a41a <_scanf_float+0x392>
 800a404:	1bda      	subs	r2, r3, r7
 800a406:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800a40a:	429e      	cmp	r6, r3
 800a40c:	bf28      	it	cs
 800a40e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800a412:	4922      	ldr	r1, [pc, #136]	@ (800a49c <_scanf_float+0x414>)
 800a414:	4630      	mov	r0, r6
 800a416:	f000 f907 	bl	800a628 <siprintf>
 800a41a:	9901      	ldr	r1, [sp, #4]
 800a41c:	2200      	movs	r2, #0
 800a41e:	4640      	mov	r0, r8
 800a420:	f7ff f9ca 	bl	80097b8 <_strtod_r>
 800a424:	9b03      	ldr	r3, [sp, #12]
 800a426:	6821      	ldr	r1, [r4, #0]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f011 0f02 	tst.w	r1, #2
 800a42e:	ec57 6b10 	vmov	r6, r7, d0
 800a432:	f103 0204 	add.w	r2, r3, #4
 800a436:	d015      	beq.n	800a464 <_scanf_float+0x3dc>
 800a438:	9903      	ldr	r1, [sp, #12]
 800a43a:	600a      	str	r2, [r1, #0]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	e9c3 6700 	strd	r6, r7, [r3]
 800a442:	68e3      	ldr	r3, [r4, #12]
 800a444:	3301      	adds	r3, #1
 800a446:	60e3      	str	r3, [r4, #12]
 800a448:	e7d0      	b.n	800a3ec <_scanf_float+0x364>
 800a44a:	9b04      	ldr	r3, [sp, #16]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d0e4      	beq.n	800a41a <_scanf_float+0x392>
 800a450:	9905      	ldr	r1, [sp, #20]
 800a452:	230a      	movs	r3, #10
 800a454:	3101      	adds	r1, #1
 800a456:	4640      	mov	r0, r8
 800a458:	f002 fa4e 	bl	800c8f8 <_strtol_r>
 800a45c:	9b04      	ldr	r3, [sp, #16]
 800a45e:	9e05      	ldr	r6, [sp, #20]
 800a460:	1ac2      	subs	r2, r0, r3
 800a462:	e7d0      	b.n	800a406 <_scanf_float+0x37e>
 800a464:	f011 0f04 	tst.w	r1, #4
 800a468:	9903      	ldr	r1, [sp, #12]
 800a46a:	600a      	str	r2, [r1, #0]
 800a46c:	d1e6      	bne.n	800a43c <_scanf_float+0x3b4>
 800a46e:	681d      	ldr	r5, [r3, #0]
 800a470:	4632      	mov	r2, r6
 800a472:	463b      	mov	r3, r7
 800a474:	4630      	mov	r0, r6
 800a476:	4639      	mov	r1, r7
 800a478:	f7f6 fb70 	bl	8000b5c <__aeabi_dcmpun>
 800a47c:	b128      	cbz	r0, 800a48a <_scanf_float+0x402>
 800a47e:	4808      	ldr	r0, [pc, #32]	@ (800a4a0 <_scanf_float+0x418>)
 800a480:	f000 fa4e 	bl	800a920 <nanf>
 800a484:	ed85 0a00 	vstr	s0, [r5]
 800a488:	e7db      	b.n	800a442 <_scanf_float+0x3ba>
 800a48a:	4630      	mov	r0, r6
 800a48c:	4639      	mov	r1, r7
 800a48e:	f7f6 fbc3 	bl	8000c18 <__aeabi_d2f>
 800a492:	6028      	str	r0, [r5, #0]
 800a494:	e7d5      	b.n	800a442 <_scanf_float+0x3ba>
 800a496:	2700      	movs	r7, #0
 800a498:	e62e      	b.n	800a0f8 <_scanf_float+0x70>
 800a49a:	bf00      	nop
 800a49c:	0800d74a 	.word	0x0800d74a
 800a4a0:	0800d803 	.word	0x0800d803

0800a4a4 <std>:
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	b510      	push	{r4, lr}
 800a4a8:	4604      	mov	r4, r0
 800a4aa:	e9c0 3300 	strd	r3, r3, [r0]
 800a4ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a4b2:	6083      	str	r3, [r0, #8]
 800a4b4:	8181      	strh	r1, [r0, #12]
 800a4b6:	6643      	str	r3, [r0, #100]	@ 0x64
 800a4b8:	81c2      	strh	r2, [r0, #14]
 800a4ba:	6183      	str	r3, [r0, #24]
 800a4bc:	4619      	mov	r1, r3
 800a4be:	2208      	movs	r2, #8
 800a4c0:	305c      	adds	r0, #92	@ 0x5c
 800a4c2:	f000 f916 	bl	800a6f2 <memset>
 800a4c6:	4b0d      	ldr	r3, [pc, #52]	@ (800a4fc <std+0x58>)
 800a4c8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a4ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a500 <std+0x5c>)
 800a4cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a4ce:	4b0d      	ldr	r3, [pc, #52]	@ (800a504 <std+0x60>)
 800a4d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a4d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a508 <std+0x64>)
 800a4d4:	6323      	str	r3, [r4, #48]	@ 0x30
 800a4d6:	4b0d      	ldr	r3, [pc, #52]	@ (800a50c <std+0x68>)
 800a4d8:	6224      	str	r4, [r4, #32]
 800a4da:	429c      	cmp	r4, r3
 800a4dc:	d006      	beq.n	800a4ec <std+0x48>
 800a4de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a4e2:	4294      	cmp	r4, r2
 800a4e4:	d002      	beq.n	800a4ec <std+0x48>
 800a4e6:	33d0      	adds	r3, #208	@ 0xd0
 800a4e8:	429c      	cmp	r4, r3
 800a4ea:	d105      	bne.n	800a4f8 <std+0x54>
 800a4ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a4f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a4f4:	f000 b9fa 	b.w	800a8ec <__retarget_lock_init_recursive>
 800a4f8:	bd10      	pop	{r4, pc}
 800a4fa:	bf00      	nop
 800a4fc:	0800a66d 	.word	0x0800a66d
 800a500:	0800a68f 	.word	0x0800a68f
 800a504:	0800a6c7 	.word	0x0800a6c7
 800a508:	0800a6eb 	.word	0x0800a6eb
 800a50c:	20000790 	.word	0x20000790

0800a510 <stdio_exit_handler>:
 800a510:	4a02      	ldr	r2, [pc, #8]	@ (800a51c <stdio_exit_handler+0xc>)
 800a512:	4903      	ldr	r1, [pc, #12]	@ (800a520 <stdio_exit_handler+0x10>)
 800a514:	4803      	ldr	r0, [pc, #12]	@ (800a524 <stdio_exit_handler+0x14>)
 800a516:	f000 b869 	b.w	800a5ec <_fwalk_sglue>
 800a51a:	bf00      	nop
 800a51c:	20000090 	.word	0x20000090
 800a520:	0800cccd 	.word	0x0800cccd
 800a524:	2000020c 	.word	0x2000020c

0800a528 <cleanup_stdio>:
 800a528:	6841      	ldr	r1, [r0, #4]
 800a52a:	4b0c      	ldr	r3, [pc, #48]	@ (800a55c <cleanup_stdio+0x34>)
 800a52c:	4299      	cmp	r1, r3
 800a52e:	b510      	push	{r4, lr}
 800a530:	4604      	mov	r4, r0
 800a532:	d001      	beq.n	800a538 <cleanup_stdio+0x10>
 800a534:	f002 fbca 	bl	800cccc <_fflush_r>
 800a538:	68a1      	ldr	r1, [r4, #8]
 800a53a:	4b09      	ldr	r3, [pc, #36]	@ (800a560 <cleanup_stdio+0x38>)
 800a53c:	4299      	cmp	r1, r3
 800a53e:	d002      	beq.n	800a546 <cleanup_stdio+0x1e>
 800a540:	4620      	mov	r0, r4
 800a542:	f002 fbc3 	bl	800cccc <_fflush_r>
 800a546:	68e1      	ldr	r1, [r4, #12]
 800a548:	4b06      	ldr	r3, [pc, #24]	@ (800a564 <cleanup_stdio+0x3c>)
 800a54a:	4299      	cmp	r1, r3
 800a54c:	d004      	beq.n	800a558 <cleanup_stdio+0x30>
 800a54e:	4620      	mov	r0, r4
 800a550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a554:	f002 bbba 	b.w	800cccc <_fflush_r>
 800a558:	bd10      	pop	{r4, pc}
 800a55a:	bf00      	nop
 800a55c:	20000790 	.word	0x20000790
 800a560:	200007f8 	.word	0x200007f8
 800a564:	20000860 	.word	0x20000860

0800a568 <global_stdio_init.part.0>:
 800a568:	b510      	push	{r4, lr}
 800a56a:	4b0b      	ldr	r3, [pc, #44]	@ (800a598 <global_stdio_init.part.0+0x30>)
 800a56c:	4c0b      	ldr	r4, [pc, #44]	@ (800a59c <global_stdio_init.part.0+0x34>)
 800a56e:	4a0c      	ldr	r2, [pc, #48]	@ (800a5a0 <global_stdio_init.part.0+0x38>)
 800a570:	601a      	str	r2, [r3, #0]
 800a572:	4620      	mov	r0, r4
 800a574:	2200      	movs	r2, #0
 800a576:	2104      	movs	r1, #4
 800a578:	f7ff ff94 	bl	800a4a4 <std>
 800a57c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a580:	2201      	movs	r2, #1
 800a582:	2109      	movs	r1, #9
 800a584:	f7ff ff8e 	bl	800a4a4 <std>
 800a588:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a58c:	2202      	movs	r2, #2
 800a58e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a592:	2112      	movs	r1, #18
 800a594:	f7ff bf86 	b.w	800a4a4 <std>
 800a598:	200008c8 	.word	0x200008c8
 800a59c:	20000790 	.word	0x20000790
 800a5a0:	0800a511 	.word	0x0800a511

0800a5a4 <__sfp_lock_acquire>:
 800a5a4:	4801      	ldr	r0, [pc, #4]	@ (800a5ac <__sfp_lock_acquire+0x8>)
 800a5a6:	f000 b9a2 	b.w	800a8ee <__retarget_lock_acquire_recursive>
 800a5aa:	bf00      	nop
 800a5ac:	200008d1 	.word	0x200008d1

0800a5b0 <__sfp_lock_release>:
 800a5b0:	4801      	ldr	r0, [pc, #4]	@ (800a5b8 <__sfp_lock_release+0x8>)
 800a5b2:	f000 b99d 	b.w	800a8f0 <__retarget_lock_release_recursive>
 800a5b6:	bf00      	nop
 800a5b8:	200008d1 	.word	0x200008d1

0800a5bc <__sinit>:
 800a5bc:	b510      	push	{r4, lr}
 800a5be:	4604      	mov	r4, r0
 800a5c0:	f7ff fff0 	bl	800a5a4 <__sfp_lock_acquire>
 800a5c4:	6a23      	ldr	r3, [r4, #32]
 800a5c6:	b11b      	cbz	r3, 800a5d0 <__sinit+0x14>
 800a5c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5cc:	f7ff bff0 	b.w	800a5b0 <__sfp_lock_release>
 800a5d0:	4b04      	ldr	r3, [pc, #16]	@ (800a5e4 <__sinit+0x28>)
 800a5d2:	6223      	str	r3, [r4, #32]
 800a5d4:	4b04      	ldr	r3, [pc, #16]	@ (800a5e8 <__sinit+0x2c>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d1f5      	bne.n	800a5c8 <__sinit+0xc>
 800a5dc:	f7ff ffc4 	bl	800a568 <global_stdio_init.part.0>
 800a5e0:	e7f2      	b.n	800a5c8 <__sinit+0xc>
 800a5e2:	bf00      	nop
 800a5e4:	0800a529 	.word	0x0800a529
 800a5e8:	200008c8 	.word	0x200008c8

0800a5ec <_fwalk_sglue>:
 800a5ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5f0:	4607      	mov	r7, r0
 800a5f2:	4688      	mov	r8, r1
 800a5f4:	4614      	mov	r4, r2
 800a5f6:	2600      	movs	r6, #0
 800a5f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a5fc:	f1b9 0901 	subs.w	r9, r9, #1
 800a600:	d505      	bpl.n	800a60e <_fwalk_sglue+0x22>
 800a602:	6824      	ldr	r4, [r4, #0]
 800a604:	2c00      	cmp	r4, #0
 800a606:	d1f7      	bne.n	800a5f8 <_fwalk_sglue+0xc>
 800a608:	4630      	mov	r0, r6
 800a60a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a60e:	89ab      	ldrh	r3, [r5, #12]
 800a610:	2b01      	cmp	r3, #1
 800a612:	d907      	bls.n	800a624 <_fwalk_sglue+0x38>
 800a614:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a618:	3301      	adds	r3, #1
 800a61a:	d003      	beq.n	800a624 <_fwalk_sglue+0x38>
 800a61c:	4629      	mov	r1, r5
 800a61e:	4638      	mov	r0, r7
 800a620:	47c0      	blx	r8
 800a622:	4306      	orrs	r6, r0
 800a624:	3568      	adds	r5, #104	@ 0x68
 800a626:	e7e9      	b.n	800a5fc <_fwalk_sglue+0x10>

0800a628 <siprintf>:
 800a628:	b40e      	push	{r1, r2, r3}
 800a62a:	b510      	push	{r4, lr}
 800a62c:	b09d      	sub	sp, #116	@ 0x74
 800a62e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a630:	9002      	str	r0, [sp, #8]
 800a632:	9006      	str	r0, [sp, #24]
 800a634:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a638:	480a      	ldr	r0, [pc, #40]	@ (800a664 <siprintf+0x3c>)
 800a63a:	9107      	str	r1, [sp, #28]
 800a63c:	9104      	str	r1, [sp, #16]
 800a63e:	490a      	ldr	r1, [pc, #40]	@ (800a668 <siprintf+0x40>)
 800a640:	f853 2b04 	ldr.w	r2, [r3], #4
 800a644:	9105      	str	r1, [sp, #20]
 800a646:	2400      	movs	r4, #0
 800a648:	a902      	add	r1, sp, #8
 800a64a:	6800      	ldr	r0, [r0, #0]
 800a64c:	9301      	str	r3, [sp, #4]
 800a64e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a650:	f002 f9bc 	bl	800c9cc <_svfiprintf_r>
 800a654:	9b02      	ldr	r3, [sp, #8]
 800a656:	701c      	strb	r4, [r3, #0]
 800a658:	b01d      	add	sp, #116	@ 0x74
 800a65a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a65e:	b003      	add	sp, #12
 800a660:	4770      	bx	lr
 800a662:	bf00      	nop
 800a664:	20000208 	.word	0x20000208
 800a668:	ffff0208 	.word	0xffff0208

0800a66c <__sread>:
 800a66c:	b510      	push	{r4, lr}
 800a66e:	460c      	mov	r4, r1
 800a670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a674:	f000 f8ec 	bl	800a850 <_read_r>
 800a678:	2800      	cmp	r0, #0
 800a67a:	bfab      	itete	ge
 800a67c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a67e:	89a3      	ldrhlt	r3, [r4, #12]
 800a680:	181b      	addge	r3, r3, r0
 800a682:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a686:	bfac      	ite	ge
 800a688:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a68a:	81a3      	strhlt	r3, [r4, #12]
 800a68c:	bd10      	pop	{r4, pc}

0800a68e <__swrite>:
 800a68e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a692:	461f      	mov	r7, r3
 800a694:	898b      	ldrh	r3, [r1, #12]
 800a696:	05db      	lsls	r3, r3, #23
 800a698:	4605      	mov	r5, r0
 800a69a:	460c      	mov	r4, r1
 800a69c:	4616      	mov	r6, r2
 800a69e:	d505      	bpl.n	800a6ac <__swrite+0x1e>
 800a6a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6a4:	2302      	movs	r3, #2
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f000 f8c0 	bl	800a82c <_lseek_r>
 800a6ac:	89a3      	ldrh	r3, [r4, #12]
 800a6ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a6b6:	81a3      	strh	r3, [r4, #12]
 800a6b8:	4632      	mov	r2, r6
 800a6ba:	463b      	mov	r3, r7
 800a6bc:	4628      	mov	r0, r5
 800a6be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6c2:	f000 b8d7 	b.w	800a874 <_write_r>

0800a6c6 <__sseek>:
 800a6c6:	b510      	push	{r4, lr}
 800a6c8:	460c      	mov	r4, r1
 800a6ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6ce:	f000 f8ad 	bl	800a82c <_lseek_r>
 800a6d2:	1c43      	adds	r3, r0, #1
 800a6d4:	89a3      	ldrh	r3, [r4, #12]
 800a6d6:	bf15      	itete	ne
 800a6d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a6da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a6de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a6e2:	81a3      	strheq	r3, [r4, #12]
 800a6e4:	bf18      	it	ne
 800a6e6:	81a3      	strhne	r3, [r4, #12]
 800a6e8:	bd10      	pop	{r4, pc}

0800a6ea <__sclose>:
 800a6ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6ee:	f000 b88d 	b.w	800a80c <_close_r>

0800a6f2 <memset>:
 800a6f2:	4402      	add	r2, r0
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	4293      	cmp	r3, r2
 800a6f8:	d100      	bne.n	800a6fc <memset+0xa>
 800a6fa:	4770      	bx	lr
 800a6fc:	f803 1b01 	strb.w	r1, [r3], #1
 800a700:	e7f9      	b.n	800a6f6 <memset+0x4>

0800a702 <strncmp>:
 800a702:	b510      	push	{r4, lr}
 800a704:	b16a      	cbz	r2, 800a722 <strncmp+0x20>
 800a706:	3901      	subs	r1, #1
 800a708:	1884      	adds	r4, r0, r2
 800a70a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a70e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a712:	429a      	cmp	r2, r3
 800a714:	d103      	bne.n	800a71e <strncmp+0x1c>
 800a716:	42a0      	cmp	r0, r4
 800a718:	d001      	beq.n	800a71e <strncmp+0x1c>
 800a71a:	2a00      	cmp	r2, #0
 800a71c:	d1f5      	bne.n	800a70a <strncmp+0x8>
 800a71e:	1ad0      	subs	r0, r2, r3
 800a720:	bd10      	pop	{r4, pc}
 800a722:	4610      	mov	r0, r2
 800a724:	e7fc      	b.n	800a720 <strncmp+0x1e>

0800a726 <strncpy>:
 800a726:	b510      	push	{r4, lr}
 800a728:	3901      	subs	r1, #1
 800a72a:	4603      	mov	r3, r0
 800a72c:	b132      	cbz	r2, 800a73c <strncpy+0x16>
 800a72e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a732:	f803 4b01 	strb.w	r4, [r3], #1
 800a736:	3a01      	subs	r2, #1
 800a738:	2c00      	cmp	r4, #0
 800a73a:	d1f7      	bne.n	800a72c <strncpy+0x6>
 800a73c:	441a      	add	r2, r3
 800a73e:	2100      	movs	r1, #0
 800a740:	4293      	cmp	r3, r2
 800a742:	d100      	bne.n	800a746 <strncpy+0x20>
 800a744:	bd10      	pop	{r4, pc}
 800a746:	f803 1b01 	strb.w	r1, [r3], #1
 800a74a:	e7f9      	b.n	800a740 <strncpy+0x1a>

0800a74c <strtok>:
 800a74c:	4b16      	ldr	r3, [pc, #88]	@ (800a7a8 <strtok+0x5c>)
 800a74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a752:	681f      	ldr	r7, [r3, #0]
 800a754:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800a756:	4605      	mov	r5, r0
 800a758:	460e      	mov	r6, r1
 800a75a:	b9ec      	cbnz	r4, 800a798 <strtok+0x4c>
 800a75c:	2050      	movs	r0, #80	@ 0x50
 800a75e:	f001 fadf 	bl	800bd20 <malloc>
 800a762:	4602      	mov	r2, r0
 800a764:	6478      	str	r0, [r7, #68]	@ 0x44
 800a766:	b920      	cbnz	r0, 800a772 <strtok+0x26>
 800a768:	4b10      	ldr	r3, [pc, #64]	@ (800a7ac <strtok+0x60>)
 800a76a:	4811      	ldr	r0, [pc, #68]	@ (800a7b0 <strtok+0x64>)
 800a76c:	215b      	movs	r1, #91	@ 0x5b
 800a76e:	f000 f8dd 	bl	800a92c <__assert_func>
 800a772:	e9c0 4400 	strd	r4, r4, [r0]
 800a776:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a77a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a77e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800a782:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800a786:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800a78a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800a78e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800a792:	6184      	str	r4, [r0, #24]
 800a794:	7704      	strb	r4, [r0, #28]
 800a796:	6244      	str	r4, [r0, #36]	@ 0x24
 800a798:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a79a:	4631      	mov	r1, r6
 800a79c:	4628      	mov	r0, r5
 800a79e:	2301      	movs	r3, #1
 800a7a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7a4:	f000 b806 	b.w	800a7b4 <__strtok_r>
 800a7a8:	20000208 	.word	0x20000208
 800a7ac:	0800d74f 	.word	0x0800d74f
 800a7b0:	0800d766 	.word	0x0800d766

0800a7b4 <__strtok_r>:
 800a7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7b6:	4604      	mov	r4, r0
 800a7b8:	b908      	cbnz	r0, 800a7be <__strtok_r+0xa>
 800a7ba:	6814      	ldr	r4, [r2, #0]
 800a7bc:	b144      	cbz	r4, 800a7d0 <__strtok_r+0x1c>
 800a7be:	4620      	mov	r0, r4
 800a7c0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a7c4:	460f      	mov	r7, r1
 800a7c6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a7ca:	b91e      	cbnz	r6, 800a7d4 <__strtok_r+0x20>
 800a7cc:	b965      	cbnz	r5, 800a7e8 <__strtok_r+0x34>
 800a7ce:	6015      	str	r5, [r2, #0]
 800a7d0:	2000      	movs	r0, #0
 800a7d2:	e005      	b.n	800a7e0 <__strtok_r+0x2c>
 800a7d4:	42b5      	cmp	r5, r6
 800a7d6:	d1f6      	bne.n	800a7c6 <__strtok_r+0x12>
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d1f0      	bne.n	800a7be <__strtok_r+0xa>
 800a7dc:	6014      	str	r4, [r2, #0]
 800a7de:	7003      	strb	r3, [r0, #0]
 800a7e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7e2:	461c      	mov	r4, r3
 800a7e4:	e00c      	b.n	800a800 <__strtok_r+0x4c>
 800a7e6:	b91d      	cbnz	r5, 800a7f0 <__strtok_r+0x3c>
 800a7e8:	4627      	mov	r7, r4
 800a7ea:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a7ee:	460e      	mov	r6, r1
 800a7f0:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a7f4:	42ab      	cmp	r3, r5
 800a7f6:	d1f6      	bne.n	800a7e6 <__strtok_r+0x32>
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d0f2      	beq.n	800a7e2 <__strtok_r+0x2e>
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	703b      	strb	r3, [r7, #0]
 800a800:	6014      	str	r4, [r2, #0]
 800a802:	e7ed      	b.n	800a7e0 <__strtok_r+0x2c>

0800a804 <_localeconv_r>:
 800a804:	4800      	ldr	r0, [pc, #0]	@ (800a808 <_localeconv_r+0x4>)
 800a806:	4770      	bx	lr
 800a808:	2000018c 	.word	0x2000018c

0800a80c <_close_r>:
 800a80c:	b538      	push	{r3, r4, r5, lr}
 800a80e:	4d06      	ldr	r5, [pc, #24]	@ (800a828 <_close_r+0x1c>)
 800a810:	2300      	movs	r3, #0
 800a812:	4604      	mov	r4, r0
 800a814:	4608      	mov	r0, r1
 800a816:	602b      	str	r3, [r5, #0]
 800a818:	f7f8 fe6a 	bl	80034f0 <_close>
 800a81c:	1c43      	adds	r3, r0, #1
 800a81e:	d102      	bne.n	800a826 <_close_r+0x1a>
 800a820:	682b      	ldr	r3, [r5, #0]
 800a822:	b103      	cbz	r3, 800a826 <_close_r+0x1a>
 800a824:	6023      	str	r3, [r4, #0]
 800a826:	bd38      	pop	{r3, r4, r5, pc}
 800a828:	200008cc 	.word	0x200008cc

0800a82c <_lseek_r>:
 800a82c:	b538      	push	{r3, r4, r5, lr}
 800a82e:	4d07      	ldr	r5, [pc, #28]	@ (800a84c <_lseek_r+0x20>)
 800a830:	4604      	mov	r4, r0
 800a832:	4608      	mov	r0, r1
 800a834:	4611      	mov	r1, r2
 800a836:	2200      	movs	r2, #0
 800a838:	602a      	str	r2, [r5, #0]
 800a83a:	461a      	mov	r2, r3
 800a83c:	f7f8 fe7f 	bl	800353e <_lseek>
 800a840:	1c43      	adds	r3, r0, #1
 800a842:	d102      	bne.n	800a84a <_lseek_r+0x1e>
 800a844:	682b      	ldr	r3, [r5, #0]
 800a846:	b103      	cbz	r3, 800a84a <_lseek_r+0x1e>
 800a848:	6023      	str	r3, [r4, #0]
 800a84a:	bd38      	pop	{r3, r4, r5, pc}
 800a84c:	200008cc 	.word	0x200008cc

0800a850 <_read_r>:
 800a850:	b538      	push	{r3, r4, r5, lr}
 800a852:	4d07      	ldr	r5, [pc, #28]	@ (800a870 <_read_r+0x20>)
 800a854:	4604      	mov	r4, r0
 800a856:	4608      	mov	r0, r1
 800a858:	4611      	mov	r1, r2
 800a85a:	2200      	movs	r2, #0
 800a85c:	602a      	str	r2, [r5, #0]
 800a85e:	461a      	mov	r2, r3
 800a860:	f7f8 fe0d 	bl	800347e <_read>
 800a864:	1c43      	adds	r3, r0, #1
 800a866:	d102      	bne.n	800a86e <_read_r+0x1e>
 800a868:	682b      	ldr	r3, [r5, #0]
 800a86a:	b103      	cbz	r3, 800a86e <_read_r+0x1e>
 800a86c:	6023      	str	r3, [r4, #0]
 800a86e:	bd38      	pop	{r3, r4, r5, pc}
 800a870:	200008cc 	.word	0x200008cc

0800a874 <_write_r>:
 800a874:	b538      	push	{r3, r4, r5, lr}
 800a876:	4d07      	ldr	r5, [pc, #28]	@ (800a894 <_write_r+0x20>)
 800a878:	4604      	mov	r4, r0
 800a87a:	4608      	mov	r0, r1
 800a87c:	4611      	mov	r1, r2
 800a87e:	2200      	movs	r2, #0
 800a880:	602a      	str	r2, [r5, #0]
 800a882:	461a      	mov	r2, r3
 800a884:	f7f8 fe18 	bl	80034b8 <_write>
 800a888:	1c43      	adds	r3, r0, #1
 800a88a:	d102      	bne.n	800a892 <_write_r+0x1e>
 800a88c:	682b      	ldr	r3, [r5, #0]
 800a88e:	b103      	cbz	r3, 800a892 <_write_r+0x1e>
 800a890:	6023      	str	r3, [r4, #0]
 800a892:	bd38      	pop	{r3, r4, r5, pc}
 800a894:	200008cc 	.word	0x200008cc

0800a898 <__errno>:
 800a898:	4b01      	ldr	r3, [pc, #4]	@ (800a8a0 <__errno+0x8>)
 800a89a:	6818      	ldr	r0, [r3, #0]
 800a89c:	4770      	bx	lr
 800a89e:	bf00      	nop
 800a8a0:	20000208 	.word	0x20000208

0800a8a4 <__libc_init_array>:
 800a8a4:	b570      	push	{r4, r5, r6, lr}
 800a8a6:	4d0d      	ldr	r5, [pc, #52]	@ (800a8dc <__libc_init_array+0x38>)
 800a8a8:	4c0d      	ldr	r4, [pc, #52]	@ (800a8e0 <__libc_init_array+0x3c>)
 800a8aa:	1b64      	subs	r4, r4, r5
 800a8ac:	10a4      	asrs	r4, r4, #2
 800a8ae:	2600      	movs	r6, #0
 800a8b0:	42a6      	cmp	r6, r4
 800a8b2:	d109      	bne.n	800a8c8 <__libc_init_array+0x24>
 800a8b4:	4d0b      	ldr	r5, [pc, #44]	@ (800a8e4 <__libc_init_array+0x40>)
 800a8b6:	4c0c      	ldr	r4, [pc, #48]	@ (800a8e8 <__libc_init_array+0x44>)
 800a8b8:	f002 fe90 	bl	800d5dc <_init>
 800a8bc:	1b64      	subs	r4, r4, r5
 800a8be:	10a4      	asrs	r4, r4, #2
 800a8c0:	2600      	movs	r6, #0
 800a8c2:	42a6      	cmp	r6, r4
 800a8c4:	d105      	bne.n	800a8d2 <__libc_init_array+0x2e>
 800a8c6:	bd70      	pop	{r4, r5, r6, pc}
 800a8c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8cc:	4798      	blx	r3
 800a8ce:	3601      	adds	r6, #1
 800a8d0:	e7ee      	b.n	800a8b0 <__libc_init_array+0xc>
 800a8d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8d6:	4798      	blx	r3
 800a8d8:	3601      	adds	r6, #1
 800a8da:	e7f2      	b.n	800a8c2 <__libc_init_array+0x1e>
 800a8dc:	0800dbb8 	.word	0x0800dbb8
 800a8e0:	0800dbb8 	.word	0x0800dbb8
 800a8e4:	0800dbb8 	.word	0x0800dbb8
 800a8e8:	0800dbbc 	.word	0x0800dbbc

0800a8ec <__retarget_lock_init_recursive>:
 800a8ec:	4770      	bx	lr

0800a8ee <__retarget_lock_acquire_recursive>:
 800a8ee:	4770      	bx	lr

0800a8f0 <__retarget_lock_release_recursive>:
 800a8f0:	4770      	bx	lr

0800a8f2 <memcpy>:
 800a8f2:	440a      	add	r2, r1
 800a8f4:	4291      	cmp	r1, r2
 800a8f6:	f100 33ff 	add.w	r3, r0, #4294967295
 800a8fa:	d100      	bne.n	800a8fe <memcpy+0xc>
 800a8fc:	4770      	bx	lr
 800a8fe:	b510      	push	{r4, lr}
 800a900:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a904:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a908:	4291      	cmp	r1, r2
 800a90a:	d1f9      	bne.n	800a900 <memcpy+0xe>
 800a90c:	bd10      	pop	{r4, pc}
	...

0800a910 <nan>:
 800a910:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a918 <nan+0x8>
 800a914:	4770      	bx	lr
 800a916:	bf00      	nop
 800a918:	00000000 	.word	0x00000000
 800a91c:	7ff80000 	.word	0x7ff80000

0800a920 <nanf>:
 800a920:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a928 <nanf+0x8>
 800a924:	4770      	bx	lr
 800a926:	bf00      	nop
 800a928:	7fc00000 	.word	0x7fc00000

0800a92c <__assert_func>:
 800a92c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a92e:	4614      	mov	r4, r2
 800a930:	461a      	mov	r2, r3
 800a932:	4b09      	ldr	r3, [pc, #36]	@ (800a958 <__assert_func+0x2c>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	4605      	mov	r5, r0
 800a938:	68d8      	ldr	r0, [r3, #12]
 800a93a:	b14c      	cbz	r4, 800a950 <__assert_func+0x24>
 800a93c:	4b07      	ldr	r3, [pc, #28]	@ (800a95c <__assert_func+0x30>)
 800a93e:	9100      	str	r1, [sp, #0]
 800a940:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a944:	4906      	ldr	r1, [pc, #24]	@ (800a960 <__assert_func+0x34>)
 800a946:	462b      	mov	r3, r5
 800a948:	f002 f9e8 	bl	800cd1c <fiprintf>
 800a94c:	f002 fa22 	bl	800cd94 <abort>
 800a950:	4b04      	ldr	r3, [pc, #16]	@ (800a964 <__assert_func+0x38>)
 800a952:	461c      	mov	r4, r3
 800a954:	e7f3      	b.n	800a93e <__assert_func+0x12>
 800a956:	bf00      	nop
 800a958:	20000208 	.word	0x20000208
 800a95c:	0800d7c8 	.word	0x0800d7c8
 800a960:	0800d7d5 	.word	0x0800d7d5
 800a964:	0800d803 	.word	0x0800d803

0800a968 <quorem>:
 800a968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a96c:	6903      	ldr	r3, [r0, #16]
 800a96e:	690c      	ldr	r4, [r1, #16]
 800a970:	42a3      	cmp	r3, r4
 800a972:	4607      	mov	r7, r0
 800a974:	db7e      	blt.n	800aa74 <quorem+0x10c>
 800a976:	3c01      	subs	r4, #1
 800a978:	f101 0814 	add.w	r8, r1, #20
 800a97c:	00a3      	lsls	r3, r4, #2
 800a97e:	f100 0514 	add.w	r5, r0, #20
 800a982:	9300      	str	r3, [sp, #0]
 800a984:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a988:	9301      	str	r3, [sp, #4]
 800a98a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a98e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a992:	3301      	adds	r3, #1
 800a994:	429a      	cmp	r2, r3
 800a996:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a99a:	fbb2 f6f3 	udiv	r6, r2, r3
 800a99e:	d32e      	bcc.n	800a9fe <quorem+0x96>
 800a9a0:	f04f 0a00 	mov.w	sl, #0
 800a9a4:	46c4      	mov	ip, r8
 800a9a6:	46ae      	mov	lr, r5
 800a9a8:	46d3      	mov	fp, sl
 800a9aa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a9ae:	b298      	uxth	r0, r3
 800a9b0:	fb06 a000 	mla	r0, r6, r0, sl
 800a9b4:	0c02      	lsrs	r2, r0, #16
 800a9b6:	0c1b      	lsrs	r3, r3, #16
 800a9b8:	fb06 2303 	mla	r3, r6, r3, r2
 800a9bc:	f8de 2000 	ldr.w	r2, [lr]
 800a9c0:	b280      	uxth	r0, r0
 800a9c2:	b292      	uxth	r2, r2
 800a9c4:	1a12      	subs	r2, r2, r0
 800a9c6:	445a      	add	r2, fp
 800a9c8:	f8de 0000 	ldr.w	r0, [lr]
 800a9cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a9d6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a9da:	b292      	uxth	r2, r2
 800a9dc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a9e0:	45e1      	cmp	r9, ip
 800a9e2:	f84e 2b04 	str.w	r2, [lr], #4
 800a9e6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a9ea:	d2de      	bcs.n	800a9aa <quorem+0x42>
 800a9ec:	9b00      	ldr	r3, [sp, #0]
 800a9ee:	58eb      	ldr	r3, [r5, r3]
 800a9f0:	b92b      	cbnz	r3, 800a9fe <quorem+0x96>
 800a9f2:	9b01      	ldr	r3, [sp, #4]
 800a9f4:	3b04      	subs	r3, #4
 800a9f6:	429d      	cmp	r5, r3
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	d32f      	bcc.n	800aa5c <quorem+0xf4>
 800a9fc:	613c      	str	r4, [r7, #16]
 800a9fe:	4638      	mov	r0, r7
 800aa00:	f001 fd12 	bl	800c428 <__mcmp>
 800aa04:	2800      	cmp	r0, #0
 800aa06:	db25      	blt.n	800aa54 <quorem+0xec>
 800aa08:	4629      	mov	r1, r5
 800aa0a:	2000      	movs	r0, #0
 800aa0c:	f858 2b04 	ldr.w	r2, [r8], #4
 800aa10:	f8d1 c000 	ldr.w	ip, [r1]
 800aa14:	fa1f fe82 	uxth.w	lr, r2
 800aa18:	fa1f f38c 	uxth.w	r3, ip
 800aa1c:	eba3 030e 	sub.w	r3, r3, lr
 800aa20:	4403      	add	r3, r0
 800aa22:	0c12      	lsrs	r2, r2, #16
 800aa24:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800aa28:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800aa2c:	b29b      	uxth	r3, r3
 800aa2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa32:	45c1      	cmp	r9, r8
 800aa34:	f841 3b04 	str.w	r3, [r1], #4
 800aa38:	ea4f 4022 	mov.w	r0, r2, asr #16
 800aa3c:	d2e6      	bcs.n	800aa0c <quorem+0xa4>
 800aa3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aa42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aa46:	b922      	cbnz	r2, 800aa52 <quorem+0xea>
 800aa48:	3b04      	subs	r3, #4
 800aa4a:	429d      	cmp	r5, r3
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	d30b      	bcc.n	800aa68 <quorem+0x100>
 800aa50:	613c      	str	r4, [r7, #16]
 800aa52:	3601      	adds	r6, #1
 800aa54:	4630      	mov	r0, r6
 800aa56:	b003      	add	sp, #12
 800aa58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa5c:	6812      	ldr	r2, [r2, #0]
 800aa5e:	3b04      	subs	r3, #4
 800aa60:	2a00      	cmp	r2, #0
 800aa62:	d1cb      	bne.n	800a9fc <quorem+0x94>
 800aa64:	3c01      	subs	r4, #1
 800aa66:	e7c6      	b.n	800a9f6 <quorem+0x8e>
 800aa68:	6812      	ldr	r2, [r2, #0]
 800aa6a:	3b04      	subs	r3, #4
 800aa6c:	2a00      	cmp	r2, #0
 800aa6e:	d1ef      	bne.n	800aa50 <quorem+0xe8>
 800aa70:	3c01      	subs	r4, #1
 800aa72:	e7ea      	b.n	800aa4a <quorem+0xe2>
 800aa74:	2000      	movs	r0, #0
 800aa76:	e7ee      	b.n	800aa56 <quorem+0xee>

0800aa78 <_dtoa_r>:
 800aa78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa7c:	69c7      	ldr	r7, [r0, #28]
 800aa7e:	b097      	sub	sp, #92	@ 0x5c
 800aa80:	ed8d 0b04 	vstr	d0, [sp, #16]
 800aa84:	ec55 4b10 	vmov	r4, r5, d0
 800aa88:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800aa8a:	9107      	str	r1, [sp, #28]
 800aa8c:	4681      	mov	r9, r0
 800aa8e:	920c      	str	r2, [sp, #48]	@ 0x30
 800aa90:	9311      	str	r3, [sp, #68]	@ 0x44
 800aa92:	b97f      	cbnz	r7, 800aab4 <_dtoa_r+0x3c>
 800aa94:	2010      	movs	r0, #16
 800aa96:	f001 f943 	bl	800bd20 <malloc>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	f8c9 001c 	str.w	r0, [r9, #28]
 800aaa0:	b920      	cbnz	r0, 800aaac <_dtoa_r+0x34>
 800aaa2:	4ba9      	ldr	r3, [pc, #676]	@ (800ad48 <_dtoa_r+0x2d0>)
 800aaa4:	21ef      	movs	r1, #239	@ 0xef
 800aaa6:	48a9      	ldr	r0, [pc, #676]	@ (800ad4c <_dtoa_r+0x2d4>)
 800aaa8:	f7ff ff40 	bl	800a92c <__assert_func>
 800aaac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800aab0:	6007      	str	r7, [r0, #0]
 800aab2:	60c7      	str	r7, [r0, #12]
 800aab4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aab8:	6819      	ldr	r1, [r3, #0]
 800aaba:	b159      	cbz	r1, 800aad4 <_dtoa_r+0x5c>
 800aabc:	685a      	ldr	r2, [r3, #4]
 800aabe:	604a      	str	r2, [r1, #4]
 800aac0:	2301      	movs	r3, #1
 800aac2:	4093      	lsls	r3, r2
 800aac4:	608b      	str	r3, [r1, #8]
 800aac6:	4648      	mov	r0, r9
 800aac8:	f001 fa32 	bl	800bf30 <_Bfree>
 800aacc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aad0:	2200      	movs	r2, #0
 800aad2:	601a      	str	r2, [r3, #0]
 800aad4:	1e2b      	subs	r3, r5, #0
 800aad6:	bfb9      	ittee	lt
 800aad8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800aadc:	9305      	strlt	r3, [sp, #20]
 800aade:	2300      	movge	r3, #0
 800aae0:	6033      	strge	r3, [r6, #0]
 800aae2:	9f05      	ldr	r7, [sp, #20]
 800aae4:	4b9a      	ldr	r3, [pc, #616]	@ (800ad50 <_dtoa_r+0x2d8>)
 800aae6:	bfbc      	itt	lt
 800aae8:	2201      	movlt	r2, #1
 800aaea:	6032      	strlt	r2, [r6, #0]
 800aaec:	43bb      	bics	r3, r7
 800aaee:	d112      	bne.n	800ab16 <_dtoa_r+0x9e>
 800aaf0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800aaf2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aaf6:	6013      	str	r3, [r2, #0]
 800aaf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aafc:	4323      	orrs	r3, r4
 800aafe:	f000 855a 	beq.w	800b5b6 <_dtoa_r+0xb3e>
 800ab02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ab04:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800ad64 <_dtoa_r+0x2ec>
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	f000 855c 	beq.w	800b5c6 <_dtoa_r+0xb4e>
 800ab0e:	f10a 0303 	add.w	r3, sl, #3
 800ab12:	f000 bd56 	b.w	800b5c2 <_dtoa_r+0xb4a>
 800ab16:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	ec51 0b17 	vmov	r0, r1, d7
 800ab20:	2300      	movs	r3, #0
 800ab22:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ab26:	f7f5 ffe7 	bl	8000af8 <__aeabi_dcmpeq>
 800ab2a:	4680      	mov	r8, r0
 800ab2c:	b158      	cbz	r0, 800ab46 <_dtoa_r+0xce>
 800ab2e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ab30:	2301      	movs	r3, #1
 800ab32:	6013      	str	r3, [r2, #0]
 800ab34:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ab36:	b113      	cbz	r3, 800ab3e <_dtoa_r+0xc6>
 800ab38:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ab3a:	4b86      	ldr	r3, [pc, #536]	@ (800ad54 <_dtoa_r+0x2dc>)
 800ab3c:	6013      	str	r3, [r2, #0]
 800ab3e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800ad68 <_dtoa_r+0x2f0>
 800ab42:	f000 bd40 	b.w	800b5c6 <_dtoa_r+0xb4e>
 800ab46:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800ab4a:	aa14      	add	r2, sp, #80	@ 0x50
 800ab4c:	a915      	add	r1, sp, #84	@ 0x54
 800ab4e:	4648      	mov	r0, r9
 800ab50:	f001 fd8a 	bl	800c668 <__d2b>
 800ab54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ab58:	9002      	str	r0, [sp, #8]
 800ab5a:	2e00      	cmp	r6, #0
 800ab5c:	d078      	beq.n	800ac50 <_dtoa_r+0x1d8>
 800ab5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab60:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ab64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ab6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ab70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ab74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ab78:	4619      	mov	r1, r3
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	4b76      	ldr	r3, [pc, #472]	@ (800ad58 <_dtoa_r+0x2e0>)
 800ab7e:	f7f5 fb9b 	bl	80002b8 <__aeabi_dsub>
 800ab82:	a36b      	add	r3, pc, #428	@ (adr r3, 800ad30 <_dtoa_r+0x2b8>)
 800ab84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab88:	f7f5 fd4e 	bl	8000628 <__aeabi_dmul>
 800ab8c:	a36a      	add	r3, pc, #424	@ (adr r3, 800ad38 <_dtoa_r+0x2c0>)
 800ab8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab92:	f7f5 fb93 	bl	80002bc <__adddf3>
 800ab96:	4604      	mov	r4, r0
 800ab98:	4630      	mov	r0, r6
 800ab9a:	460d      	mov	r5, r1
 800ab9c:	f7f5 fcda 	bl	8000554 <__aeabi_i2d>
 800aba0:	a367      	add	r3, pc, #412	@ (adr r3, 800ad40 <_dtoa_r+0x2c8>)
 800aba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba6:	f7f5 fd3f 	bl	8000628 <__aeabi_dmul>
 800abaa:	4602      	mov	r2, r0
 800abac:	460b      	mov	r3, r1
 800abae:	4620      	mov	r0, r4
 800abb0:	4629      	mov	r1, r5
 800abb2:	f7f5 fb83 	bl	80002bc <__adddf3>
 800abb6:	4604      	mov	r4, r0
 800abb8:	460d      	mov	r5, r1
 800abba:	f7f5 ffe5 	bl	8000b88 <__aeabi_d2iz>
 800abbe:	2200      	movs	r2, #0
 800abc0:	4607      	mov	r7, r0
 800abc2:	2300      	movs	r3, #0
 800abc4:	4620      	mov	r0, r4
 800abc6:	4629      	mov	r1, r5
 800abc8:	f7f5 ffa0 	bl	8000b0c <__aeabi_dcmplt>
 800abcc:	b140      	cbz	r0, 800abe0 <_dtoa_r+0x168>
 800abce:	4638      	mov	r0, r7
 800abd0:	f7f5 fcc0 	bl	8000554 <__aeabi_i2d>
 800abd4:	4622      	mov	r2, r4
 800abd6:	462b      	mov	r3, r5
 800abd8:	f7f5 ff8e 	bl	8000af8 <__aeabi_dcmpeq>
 800abdc:	b900      	cbnz	r0, 800abe0 <_dtoa_r+0x168>
 800abde:	3f01      	subs	r7, #1
 800abe0:	2f16      	cmp	r7, #22
 800abe2:	d852      	bhi.n	800ac8a <_dtoa_r+0x212>
 800abe4:	4b5d      	ldr	r3, [pc, #372]	@ (800ad5c <_dtoa_r+0x2e4>)
 800abe6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800abea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800abf2:	f7f5 ff8b 	bl	8000b0c <__aeabi_dcmplt>
 800abf6:	2800      	cmp	r0, #0
 800abf8:	d049      	beq.n	800ac8e <_dtoa_r+0x216>
 800abfa:	3f01      	subs	r7, #1
 800abfc:	2300      	movs	r3, #0
 800abfe:	9310      	str	r3, [sp, #64]	@ 0x40
 800ac00:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ac02:	1b9b      	subs	r3, r3, r6
 800ac04:	1e5a      	subs	r2, r3, #1
 800ac06:	bf45      	ittet	mi
 800ac08:	f1c3 0301 	rsbmi	r3, r3, #1
 800ac0c:	9300      	strmi	r3, [sp, #0]
 800ac0e:	2300      	movpl	r3, #0
 800ac10:	2300      	movmi	r3, #0
 800ac12:	9206      	str	r2, [sp, #24]
 800ac14:	bf54      	ite	pl
 800ac16:	9300      	strpl	r3, [sp, #0]
 800ac18:	9306      	strmi	r3, [sp, #24]
 800ac1a:	2f00      	cmp	r7, #0
 800ac1c:	db39      	blt.n	800ac92 <_dtoa_r+0x21a>
 800ac1e:	9b06      	ldr	r3, [sp, #24]
 800ac20:	970d      	str	r7, [sp, #52]	@ 0x34
 800ac22:	443b      	add	r3, r7
 800ac24:	9306      	str	r3, [sp, #24]
 800ac26:	2300      	movs	r3, #0
 800ac28:	9308      	str	r3, [sp, #32]
 800ac2a:	9b07      	ldr	r3, [sp, #28]
 800ac2c:	2b09      	cmp	r3, #9
 800ac2e:	d863      	bhi.n	800acf8 <_dtoa_r+0x280>
 800ac30:	2b05      	cmp	r3, #5
 800ac32:	bfc4      	itt	gt
 800ac34:	3b04      	subgt	r3, #4
 800ac36:	9307      	strgt	r3, [sp, #28]
 800ac38:	9b07      	ldr	r3, [sp, #28]
 800ac3a:	f1a3 0302 	sub.w	r3, r3, #2
 800ac3e:	bfcc      	ite	gt
 800ac40:	2400      	movgt	r4, #0
 800ac42:	2401      	movle	r4, #1
 800ac44:	2b03      	cmp	r3, #3
 800ac46:	d863      	bhi.n	800ad10 <_dtoa_r+0x298>
 800ac48:	e8df f003 	tbb	[pc, r3]
 800ac4c:	2b375452 	.word	0x2b375452
 800ac50:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ac54:	441e      	add	r6, r3
 800ac56:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ac5a:	2b20      	cmp	r3, #32
 800ac5c:	bfc1      	itttt	gt
 800ac5e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ac62:	409f      	lslgt	r7, r3
 800ac64:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ac68:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ac6c:	bfd6      	itet	le
 800ac6e:	f1c3 0320 	rsble	r3, r3, #32
 800ac72:	ea47 0003 	orrgt.w	r0, r7, r3
 800ac76:	fa04 f003 	lslle.w	r0, r4, r3
 800ac7a:	f7f5 fc5b 	bl	8000534 <__aeabi_ui2d>
 800ac7e:	2201      	movs	r2, #1
 800ac80:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ac84:	3e01      	subs	r6, #1
 800ac86:	9212      	str	r2, [sp, #72]	@ 0x48
 800ac88:	e776      	b.n	800ab78 <_dtoa_r+0x100>
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	e7b7      	b.n	800abfe <_dtoa_r+0x186>
 800ac8e:	9010      	str	r0, [sp, #64]	@ 0x40
 800ac90:	e7b6      	b.n	800ac00 <_dtoa_r+0x188>
 800ac92:	9b00      	ldr	r3, [sp, #0]
 800ac94:	1bdb      	subs	r3, r3, r7
 800ac96:	9300      	str	r3, [sp, #0]
 800ac98:	427b      	negs	r3, r7
 800ac9a:	9308      	str	r3, [sp, #32]
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	930d      	str	r3, [sp, #52]	@ 0x34
 800aca0:	e7c3      	b.n	800ac2a <_dtoa_r+0x1b2>
 800aca2:	2301      	movs	r3, #1
 800aca4:	9309      	str	r3, [sp, #36]	@ 0x24
 800aca6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aca8:	eb07 0b03 	add.w	fp, r7, r3
 800acac:	f10b 0301 	add.w	r3, fp, #1
 800acb0:	2b01      	cmp	r3, #1
 800acb2:	9303      	str	r3, [sp, #12]
 800acb4:	bfb8      	it	lt
 800acb6:	2301      	movlt	r3, #1
 800acb8:	e006      	b.n	800acc8 <_dtoa_r+0x250>
 800acba:	2301      	movs	r3, #1
 800acbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800acbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	dd28      	ble.n	800ad16 <_dtoa_r+0x29e>
 800acc4:	469b      	mov	fp, r3
 800acc6:	9303      	str	r3, [sp, #12]
 800acc8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800accc:	2100      	movs	r1, #0
 800acce:	2204      	movs	r2, #4
 800acd0:	f102 0514 	add.w	r5, r2, #20
 800acd4:	429d      	cmp	r5, r3
 800acd6:	d926      	bls.n	800ad26 <_dtoa_r+0x2ae>
 800acd8:	6041      	str	r1, [r0, #4]
 800acda:	4648      	mov	r0, r9
 800acdc:	f001 f8e8 	bl	800beb0 <_Balloc>
 800ace0:	4682      	mov	sl, r0
 800ace2:	2800      	cmp	r0, #0
 800ace4:	d142      	bne.n	800ad6c <_dtoa_r+0x2f4>
 800ace6:	4b1e      	ldr	r3, [pc, #120]	@ (800ad60 <_dtoa_r+0x2e8>)
 800ace8:	4602      	mov	r2, r0
 800acea:	f240 11af 	movw	r1, #431	@ 0x1af
 800acee:	e6da      	b.n	800aaa6 <_dtoa_r+0x2e>
 800acf0:	2300      	movs	r3, #0
 800acf2:	e7e3      	b.n	800acbc <_dtoa_r+0x244>
 800acf4:	2300      	movs	r3, #0
 800acf6:	e7d5      	b.n	800aca4 <_dtoa_r+0x22c>
 800acf8:	2401      	movs	r4, #1
 800acfa:	2300      	movs	r3, #0
 800acfc:	9307      	str	r3, [sp, #28]
 800acfe:	9409      	str	r4, [sp, #36]	@ 0x24
 800ad00:	f04f 3bff 	mov.w	fp, #4294967295
 800ad04:	2200      	movs	r2, #0
 800ad06:	f8cd b00c 	str.w	fp, [sp, #12]
 800ad0a:	2312      	movs	r3, #18
 800ad0c:	920c      	str	r2, [sp, #48]	@ 0x30
 800ad0e:	e7db      	b.n	800acc8 <_dtoa_r+0x250>
 800ad10:	2301      	movs	r3, #1
 800ad12:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad14:	e7f4      	b.n	800ad00 <_dtoa_r+0x288>
 800ad16:	f04f 0b01 	mov.w	fp, #1
 800ad1a:	f8cd b00c 	str.w	fp, [sp, #12]
 800ad1e:	465b      	mov	r3, fp
 800ad20:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800ad24:	e7d0      	b.n	800acc8 <_dtoa_r+0x250>
 800ad26:	3101      	adds	r1, #1
 800ad28:	0052      	lsls	r2, r2, #1
 800ad2a:	e7d1      	b.n	800acd0 <_dtoa_r+0x258>
 800ad2c:	f3af 8000 	nop.w
 800ad30:	636f4361 	.word	0x636f4361
 800ad34:	3fd287a7 	.word	0x3fd287a7
 800ad38:	8b60c8b3 	.word	0x8b60c8b3
 800ad3c:	3fc68a28 	.word	0x3fc68a28
 800ad40:	509f79fb 	.word	0x509f79fb
 800ad44:	3fd34413 	.word	0x3fd34413
 800ad48:	0800d74f 	.word	0x0800d74f
 800ad4c:	0800d811 	.word	0x0800d811
 800ad50:	7ff00000 	.word	0x7ff00000
 800ad54:	0800d727 	.word	0x0800d727
 800ad58:	3ff80000 	.word	0x3ff80000
 800ad5c:	0800d9d0 	.word	0x0800d9d0
 800ad60:	0800d869 	.word	0x0800d869
 800ad64:	0800d80d 	.word	0x0800d80d
 800ad68:	0800d726 	.word	0x0800d726
 800ad6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ad70:	6018      	str	r0, [r3, #0]
 800ad72:	9b03      	ldr	r3, [sp, #12]
 800ad74:	2b0e      	cmp	r3, #14
 800ad76:	f200 80a1 	bhi.w	800aebc <_dtoa_r+0x444>
 800ad7a:	2c00      	cmp	r4, #0
 800ad7c:	f000 809e 	beq.w	800aebc <_dtoa_r+0x444>
 800ad80:	2f00      	cmp	r7, #0
 800ad82:	dd33      	ble.n	800adec <_dtoa_r+0x374>
 800ad84:	4b9c      	ldr	r3, [pc, #624]	@ (800aff8 <_dtoa_r+0x580>)
 800ad86:	f007 020f 	and.w	r2, r7, #15
 800ad8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad8e:	ed93 7b00 	vldr	d7, [r3]
 800ad92:	05f8      	lsls	r0, r7, #23
 800ad94:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ad98:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ad9c:	d516      	bpl.n	800adcc <_dtoa_r+0x354>
 800ad9e:	4b97      	ldr	r3, [pc, #604]	@ (800affc <_dtoa_r+0x584>)
 800ada0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ada4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ada8:	f7f5 fd68 	bl	800087c <__aeabi_ddiv>
 800adac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800adb0:	f004 040f 	and.w	r4, r4, #15
 800adb4:	2603      	movs	r6, #3
 800adb6:	4d91      	ldr	r5, [pc, #580]	@ (800affc <_dtoa_r+0x584>)
 800adb8:	b954      	cbnz	r4, 800add0 <_dtoa_r+0x358>
 800adba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800adbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800adc2:	f7f5 fd5b 	bl	800087c <__aeabi_ddiv>
 800adc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800adca:	e028      	b.n	800ae1e <_dtoa_r+0x3a6>
 800adcc:	2602      	movs	r6, #2
 800adce:	e7f2      	b.n	800adb6 <_dtoa_r+0x33e>
 800add0:	07e1      	lsls	r1, r4, #31
 800add2:	d508      	bpl.n	800ade6 <_dtoa_r+0x36e>
 800add4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800add8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800addc:	f7f5 fc24 	bl	8000628 <__aeabi_dmul>
 800ade0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ade4:	3601      	adds	r6, #1
 800ade6:	1064      	asrs	r4, r4, #1
 800ade8:	3508      	adds	r5, #8
 800adea:	e7e5      	b.n	800adb8 <_dtoa_r+0x340>
 800adec:	f000 80af 	beq.w	800af4e <_dtoa_r+0x4d6>
 800adf0:	427c      	negs	r4, r7
 800adf2:	4b81      	ldr	r3, [pc, #516]	@ (800aff8 <_dtoa_r+0x580>)
 800adf4:	4d81      	ldr	r5, [pc, #516]	@ (800affc <_dtoa_r+0x584>)
 800adf6:	f004 020f 	and.w	r2, r4, #15
 800adfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800adfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ae06:	f7f5 fc0f 	bl	8000628 <__aeabi_dmul>
 800ae0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae0e:	1124      	asrs	r4, r4, #4
 800ae10:	2300      	movs	r3, #0
 800ae12:	2602      	movs	r6, #2
 800ae14:	2c00      	cmp	r4, #0
 800ae16:	f040 808f 	bne.w	800af38 <_dtoa_r+0x4c0>
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d1d3      	bne.n	800adc6 <_dtoa_r+0x34e>
 800ae1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ae20:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	f000 8094 	beq.w	800af52 <_dtoa_r+0x4da>
 800ae2a:	4b75      	ldr	r3, [pc, #468]	@ (800b000 <_dtoa_r+0x588>)
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	4620      	mov	r0, r4
 800ae30:	4629      	mov	r1, r5
 800ae32:	f7f5 fe6b 	bl	8000b0c <__aeabi_dcmplt>
 800ae36:	2800      	cmp	r0, #0
 800ae38:	f000 808b 	beq.w	800af52 <_dtoa_r+0x4da>
 800ae3c:	9b03      	ldr	r3, [sp, #12]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f000 8087 	beq.w	800af52 <_dtoa_r+0x4da>
 800ae44:	f1bb 0f00 	cmp.w	fp, #0
 800ae48:	dd34      	ble.n	800aeb4 <_dtoa_r+0x43c>
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	4b6d      	ldr	r3, [pc, #436]	@ (800b004 <_dtoa_r+0x58c>)
 800ae4e:	2200      	movs	r2, #0
 800ae50:	4629      	mov	r1, r5
 800ae52:	f7f5 fbe9 	bl	8000628 <__aeabi_dmul>
 800ae56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae5a:	f107 38ff 	add.w	r8, r7, #4294967295
 800ae5e:	3601      	adds	r6, #1
 800ae60:	465c      	mov	r4, fp
 800ae62:	4630      	mov	r0, r6
 800ae64:	f7f5 fb76 	bl	8000554 <__aeabi_i2d>
 800ae68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae6c:	f7f5 fbdc 	bl	8000628 <__aeabi_dmul>
 800ae70:	4b65      	ldr	r3, [pc, #404]	@ (800b008 <_dtoa_r+0x590>)
 800ae72:	2200      	movs	r2, #0
 800ae74:	f7f5 fa22 	bl	80002bc <__adddf3>
 800ae78:	4605      	mov	r5, r0
 800ae7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ae7e:	2c00      	cmp	r4, #0
 800ae80:	d16a      	bne.n	800af58 <_dtoa_r+0x4e0>
 800ae82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae86:	4b61      	ldr	r3, [pc, #388]	@ (800b00c <_dtoa_r+0x594>)
 800ae88:	2200      	movs	r2, #0
 800ae8a:	f7f5 fa15 	bl	80002b8 <__aeabi_dsub>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	460b      	mov	r3, r1
 800ae92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ae96:	462a      	mov	r2, r5
 800ae98:	4633      	mov	r3, r6
 800ae9a:	f7f5 fe55 	bl	8000b48 <__aeabi_dcmpgt>
 800ae9e:	2800      	cmp	r0, #0
 800aea0:	f040 8298 	bne.w	800b3d4 <_dtoa_r+0x95c>
 800aea4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aea8:	462a      	mov	r2, r5
 800aeaa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800aeae:	f7f5 fe2d 	bl	8000b0c <__aeabi_dcmplt>
 800aeb2:	bb38      	cbnz	r0, 800af04 <_dtoa_r+0x48c>
 800aeb4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800aeb8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800aebc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	f2c0 8157 	blt.w	800b172 <_dtoa_r+0x6fa>
 800aec4:	2f0e      	cmp	r7, #14
 800aec6:	f300 8154 	bgt.w	800b172 <_dtoa_r+0x6fa>
 800aeca:	4b4b      	ldr	r3, [pc, #300]	@ (800aff8 <_dtoa_r+0x580>)
 800aecc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aed0:	ed93 7b00 	vldr	d7, [r3]
 800aed4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	ed8d 7b00 	vstr	d7, [sp]
 800aedc:	f280 80e5 	bge.w	800b0aa <_dtoa_r+0x632>
 800aee0:	9b03      	ldr	r3, [sp, #12]
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	f300 80e1 	bgt.w	800b0aa <_dtoa_r+0x632>
 800aee8:	d10c      	bne.n	800af04 <_dtoa_r+0x48c>
 800aeea:	4b48      	ldr	r3, [pc, #288]	@ (800b00c <_dtoa_r+0x594>)
 800aeec:	2200      	movs	r2, #0
 800aeee:	ec51 0b17 	vmov	r0, r1, d7
 800aef2:	f7f5 fb99 	bl	8000628 <__aeabi_dmul>
 800aef6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aefa:	f7f5 fe1b 	bl	8000b34 <__aeabi_dcmpge>
 800aefe:	2800      	cmp	r0, #0
 800af00:	f000 8266 	beq.w	800b3d0 <_dtoa_r+0x958>
 800af04:	2400      	movs	r4, #0
 800af06:	4625      	mov	r5, r4
 800af08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800af0a:	4656      	mov	r6, sl
 800af0c:	ea6f 0803 	mvn.w	r8, r3
 800af10:	2700      	movs	r7, #0
 800af12:	4621      	mov	r1, r4
 800af14:	4648      	mov	r0, r9
 800af16:	f001 f80b 	bl	800bf30 <_Bfree>
 800af1a:	2d00      	cmp	r5, #0
 800af1c:	f000 80bd 	beq.w	800b09a <_dtoa_r+0x622>
 800af20:	b12f      	cbz	r7, 800af2e <_dtoa_r+0x4b6>
 800af22:	42af      	cmp	r7, r5
 800af24:	d003      	beq.n	800af2e <_dtoa_r+0x4b6>
 800af26:	4639      	mov	r1, r7
 800af28:	4648      	mov	r0, r9
 800af2a:	f001 f801 	bl	800bf30 <_Bfree>
 800af2e:	4629      	mov	r1, r5
 800af30:	4648      	mov	r0, r9
 800af32:	f000 fffd 	bl	800bf30 <_Bfree>
 800af36:	e0b0      	b.n	800b09a <_dtoa_r+0x622>
 800af38:	07e2      	lsls	r2, r4, #31
 800af3a:	d505      	bpl.n	800af48 <_dtoa_r+0x4d0>
 800af3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800af40:	f7f5 fb72 	bl	8000628 <__aeabi_dmul>
 800af44:	3601      	adds	r6, #1
 800af46:	2301      	movs	r3, #1
 800af48:	1064      	asrs	r4, r4, #1
 800af4a:	3508      	adds	r5, #8
 800af4c:	e762      	b.n	800ae14 <_dtoa_r+0x39c>
 800af4e:	2602      	movs	r6, #2
 800af50:	e765      	b.n	800ae1e <_dtoa_r+0x3a6>
 800af52:	9c03      	ldr	r4, [sp, #12]
 800af54:	46b8      	mov	r8, r7
 800af56:	e784      	b.n	800ae62 <_dtoa_r+0x3ea>
 800af58:	4b27      	ldr	r3, [pc, #156]	@ (800aff8 <_dtoa_r+0x580>)
 800af5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800af64:	4454      	add	r4, sl
 800af66:	2900      	cmp	r1, #0
 800af68:	d054      	beq.n	800b014 <_dtoa_r+0x59c>
 800af6a:	4929      	ldr	r1, [pc, #164]	@ (800b010 <_dtoa_r+0x598>)
 800af6c:	2000      	movs	r0, #0
 800af6e:	f7f5 fc85 	bl	800087c <__aeabi_ddiv>
 800af72:	4633      	mov	r3, r6
 800af74:	462a      	mov	r2, r5
 800af76:	f7f5 f99f 	bl	80002b8 <__aeabi_dsub>
 800af7a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800af7e:	4656      	mov	r6, sl
 800af80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af84:	f7f5 fe00 	bl	8000b88 <__aeabi_d2iz>
 800af88:	4605      	mov	r5, r0
 800af8a:	f7f5 fae3 	bl	8000554 <__aeabi_i2d>
 800af8e:	4602      	mov	r2, r0
 800af90:	460b      	mov	r3, r1
 800af92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af96:	f7f5 f98f 	bl	80002b8 <__aeabi_dsub>
 800af9a:	3530      	adds	r5, #48	@ 0x30
 800af9c:	4602      	mov	r2, r0
 800af9e:	460b      	mov	r3, r1
 800afa0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800afa4:	f806 5b01 	strb.w	r5, [r6], #1
 800afa8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800afac:	f7f5 fdae 	bl	8000b0c <__aeabi_dcmplt>
 800afb0:	2800      	cmp	r0, #0
 800afb2:	d172      	bne.n	800b09a <_dtoa_r+0x622>
 800afb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800afb8:	4911      	ldr	r1, [pc, #68]	@ (800b000 <_dtoa_r+0x588>)
 800afba:	2000      	movs	r0, #0
 800afbc:	f7f5 f97c 	bl	80002b8 <__aeabi_dsub>
 800afc0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800afc4:	f7f5 fda2 	bl	8000b0c <__aeabi_dcmplt>
 800afc8:	2800      	cmp	r0, #0
 800afca:	f040 80b4 	bne.w	800b136 <_dtoa_r+0x6be>
 800afce:	42a6      	cmp	r6, r4
 800afd0:	f43f af70 	beq.w	800aeb4 <_dtoa_r+0x43c>
 800afd4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800afd8:	4b0a      	ldr	r3, [pc, #40]	@ (800b004 <_dtoa_r+0x58c>)
 800afda:	2200      	movs	r2, #0
 800afdc:	f7f5 fb24 	bl	8000628 <__aeabi_dmul>
 800afe0:	4b08      	ldr	r3, [pc, #32]	@ (800b004 <_dtoa_r+0x58c>)
 800afe2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800afe6:	2200      	movs	r2, #0
 800afe8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afec:	f7f5 fb1c 	bl	8000628 <__aeabi_dmul>
 800aff0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aff4:	e7c4      	b.n	800af80 <_dtoa_r+0x508>
 800aff6:	bf00      	nop
 800aff8:	0800d9d0 	.word	0x0800d9d0
 800affc:	0800d9a8 	.word	0x0800d9a8
 800b000:	3ff00000 	.word	0x3ff00000
 800b004:	40240000 	.word	0x40240000
 800b008:	401c0000 	.word	0x401c0000
 800b00c:	40140000 	.word	0x40140000
 800b010:	3fe00000 	.word	0x3fe00000
 800b014:	4631      	mov	r1, r6
 800b016:	4628      	mov	r0, r5
 800b018:	f7f5 fb06 	bl	8000628 <__aeabi_dmul>
 800b01c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800b020:	9413      	str	r4, [sp, #76]	@ 0x4c
 800b022:	4656      	mov	r6, sl
 800b024:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b028:	f7f5 fdae 	bl	8000b88 <__aeabi_d2iz>
 800b02c:	4605      	mov	r5, r0
 800b02e:	f7f5 fa91 	bl	8000554 <__aeabi_i2d>
 800b032:	4602      	mov	r2, r0
 800b034:	460b      	mov	r3, r1
 800b036:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b03a:	f7f5 f93d 	bl	80002b8 <__aeabi_dsub>
 800b03e:	3530      	adds	r5, #48	@ 0x30
 800b040:	f806 5b01 	strb.w	r5, [r6], #1
 800b044:	4602      	mov	r2, r0
 800b046:	460b      	mov	r3, r1
 800b048:	42a6      	cmp	r6, r4
 800b04a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b04e:	f04f 0200 	mov.w	r2, #0
 800b052:	d124      	bne.n	800b09e <_dtoa_r+0x626>
 800b054:	4baf      	ldr	r3, [pc, #700]	@ (800b314 <_dtoa_r+0x89c>)
 800b056:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b05a:	f7f5 f92f 	bl	80002bc <__adddf3>
 800b05e:	4602      	mov	r2, r0
 800b060:	460b      	mov	r3, r1
 800b062:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b066:	f7f5 fd6f 	bl	8000b48 <__aeabi_dcmpgt>
 800b06a:	2800      	cmp	r0, #0
 800b06c:	d163      	bne.n	800b136 <_dtoa_r+0x6be>
 800b06e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b072:	49a8      	ldr	r1, [pc, #672]	@ (800b314 <_dtoa_r+0x89c>)
 800b074:	2000      	movs	r0, #0
 800b076:	f7f5 f91f 	bl	80002b8 <__aeabi_dsub>
 800b07a:	4602      	mov	r2, r0
 800b07c:	460b      	mov	r3, r1
 800b07e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b082:	f7f5 fd43 	bl	8000b0c <__aeabi_dcmplt>
 800b086:	2800      	cmp	r0, #0
 800b088:	f43f af14 	beq.w	800aeb4 <_dtoa_r+0x43c>
 800b08c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b08e:	1e73      	subs	r3, r6, #1
 800b090:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b092:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b096:	2b30      	cmp	r3, #48	@ 0x30
 800b098:	d0f8      	beq.n	800b08c <_dtoa_r+0x614>
 800b09a:	4647      	mov	r7, r8
 800b09c:	e03b      	b.n	800b116 <_dtoa_r+0x69e>
 800b09e:	4b9e      	ldr	r3, [pc, #632]	@ (800b318 <_dtoa_r+0x8a0>)
 800b0a0:	f7f5 fac2 	bl	8000628 <__aeabi_dmul>
 800b0a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b0a8:	e7bc      	b.n	800b024 <_dtoa_r+0x5ac>
 800b0aa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b0ae:	4656      	mov	r6, sl
 800b0b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	4629      	mov	r1, r5
 800b0b8:	f7f5 fbe0 	bl	800087c <__aeabi_ddiv>
 800b0bc:	f7f5 fd64 	bl	8000b88 <__aeabi_d2iz>
 800b0c0:	4680      	mov	r8, r0
 800b0c2:	f7f5 fa47 	bl	8000554 <__aeabi_i2d>
 800b0c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0ca:	f7f5 faad 	bl	8000628 <__aeabi_dmul>
 800b0ce:	4602      	mov	r2, r0
 800b0d0:	460b      	mov	r3, r1
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	4629      	mov	r1, r5
 800b0d6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b0da:	f7f5 f8ed 	bl	80002b8 <__aeabi_dsub>
 800b0de:	f806 4b01 	strb.w	r4, [r6], #1
 800b0e2:	9d03      	ldr	r5, [sp, #12]
 800b0e4:	eba6 040a 	sub.w	r4, r6, sl
 800b0e8:	42a5      	cmp	r5, r4
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	460b      	mov	r3, r1
 800b0ee:	d133      	bne.n	800b158 <_dtoa_r+0x6e0>
 800b0f0:	f7f5 f8e4 	bl	80002bc <__adddf3>
 800b0f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0f8:	4604      	mov	r4, r0
 800b0fa:	460d      	mov	r5, r1
 800b0fc:	f7f5 fd24 	bl	8000b48 <__aeabi_dcmpgt>
 800b100:	b9c0      	cbnz	r0, 800b134 <_dtoa_r+0x6bc>
 800b102:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b106:	4620      	mov	r0, r4
 800b108:	4629      	mov	r1, r5
 800b10a:	f7f5 fcf5 	bl	8000af8 <__aeabi_dcmpeq>
 800b10e:	b110      	cbz	r0, 800b116 <_dtoa_r+0x69e>
 800b110:	f018 0f01 	tst.w	r8, #1
 800b114:	d10e      	bne.n	800b134 <_dtoa_r+0x6bc>
 800b116:	9902      	ldr	r1, [sp, #8]
 800b118:	4648      	mov	r0, r9
 800b11a:	f000 ff09 	bl	800bf30 <_Bfree>
 800b11e:	2300      	movs	r3, #0
 800b120:	7033      	strb	r3, [r6, #0]
 800b122:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b124:	3701      	adds	r7, #1
 800b126:	601f      	str	r7, [r3, #0]
 800b128:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	f000 824b 	beq.w	800b5c6 <_dtoa_r+0xb4e>
 800b130:	601e      	str	r6, [r3, #0]
 800b132:	e248      	b.n	800b5c6 <_dtoa_r+0xb4e>
 800b134:	46b8      	mov	r8, r7
 800b136:	4633      	mov	r3, r6
 800b138:	461e      	mov	r6, r3
 800b13a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b13e:	2a39      	cmp	r2, #57	@ 0x39
 800b140:	d106      	bne.n	800b150 <_dtoa_r+0x6d8>
 800b142:	459a      	cmp	sl, r3
 800b144:	d1f8      	bne.n	800b138 <_dtoa_r+0x6c0>
 800b146:	2230      	movs	r2, #48	@ 0x30
 800b148:	f108 0801 	add.w	r8, r8, #1
 800b14c:	f88a 2000 	strb.w	r2, [sl]
 800b150:	781a      	ldrb	r2, [r3, #0]
 800b152:	3201      	adds	r2, #1
 800b154:	701a      	strb	r2, [r3, #0]
 800b156:	e7a0      	b.n	800b09a <_dtoa_r+0x622>
 800b158:	4b6f      	ldr	r3, [pc, #444]	@ (800b318 <_dtoa_r+0x8a0>)
 800b15a:	2200      	movs	r2, #0
 800b15c:	f7f5 fa64 	bl	8000628 <__aeabi_dmul>
 800b160:	2200      	movs	r2, #0
 800b162:	2300      	movs	r3, #0
 800b164:	4604      	mov	r4, r0
 800b166:	460d      	mov	r5, r1
 800b168:	f7f5 fcc6 	bl	8000af8 <__aeabi_dcmpeq>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	d09f      	beq.n	800b0b0 <_dtoa_r+0x638>
 800b170:	e7d1      	b.n	800b116 <_dtoa_r+0x69e>
 800b172:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b174:	2a00      	cmp	r2, #0
 800b176:	f000 80ea 	beq.w	800b34e <_dtoa_r+0x8d6>
 800b17a:	9a07      	ldr	r2, [sp, #28]
 800b17c:	2a01      	cmp	r2, #1
 800b17e:	f300 80cd 	bgt.w	800b31c <_dtoa_r+0x8a4>
 800b182:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b184:	2a00      	cmp	r2, #0
 800b186:	f000 80c1 	beq.w	800b30c <_dtoa_r+0x894>
 800b18a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b18e:	9c08      	ldr	r4, [sp, #32]
 800b190:	9e00      	ldr	r6, [sp, #0]
 800b192:	9a00      	ldr	r2, [sp, #0]
 800b194:	441a      	add	r2, r3
 800b196:	9200      	str	r2, [sp, #0]
 800b198:	9a06      	ldr	r2, [sp, #24]
 800b19a:	2101      	movs	r1, #1
 800b19c:	441a      	add	r2, r3
 800b19e:	4648      	mov	r0, r9
 800b1a0:	9206      	str	r2, [sp, #24]
 800b1a2:	f000 ffc3 	bl	800c12c <__i2b>
 800b1a6:	4605      	mov	r5, r0
 800b1a8:	b166      	cbz	r6, 800b1c4 <_dtoa_r+0x74c>
 800b1aa:	9b06      	ldr	r3, [sp, #24]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	dd09      	ble.n	800b1c4 <_dtoa_r+0x74c>
 800b1b0:	42b3      	cmp	r3, r6
 800b1b2:	9a00      	ldr	r2, [sp, #0]
 800b1b4:	bfa8      	it	ge
 800b1b6:	4633      	movge	r3, r6
 800b1b8:	1ad2      	subs	r2, r2, r3
 800b1ba:	9200      	str	r2, [sp, #0]
 800b1bc:	9a06      	ldr	r2, [sp, #24]
 800b1be:	1af6      	subs	r6, r6, r3
 800b1c0:	1ad3      	subs	r3, r2, r3
 800b1c2:	9306      	str	r3, [sp, #24]
 800b1c4:	9b08      	ldr	r3, [sp, #32]
 800b1c6:	b30b      	cbz	r3, 800b20c <_dtoa_r+0x794>
 800b1c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	f000 80c6 	beq.w	800b35c <_dtoa_r+0x8e4>
 800b1d0:	2c00      	cmp	r4, #0
 800b1d2:	f000 80c0 	beq.w	800b356 <_dtoa_r+0x8de>
 800b1d6:	4629      	mov	r1, r5
 800b1d8:	4622      	mov	r2, r4
 800b1da:	4648      	mov	r0, r9
 800b1dc:	f001 f85e 	bl	800c29c <__pow5mult>
 800b1e0:	9a02      	ldr	r2, [sp, #8]
 800b1e2:	4601      	mov	r1, r0
 800b1e4:	4605      	mov	r5, r0
 800b1e6:	4648      	mov	r0, r9
 800b1e8:	f000 ffb6 	bl	800c158 <__multiply>
 800b1ec:	9902      	ldr	r1, [sp, #8]
 800b1ee:	4680      	mov	r8, r0
 800b1f0:	4648      	mov	r0, r9
 800b1f2:	f000 fe9d 	bl	800bf30 <_Bfree>
 800b1f6:	9b08      	ldr	r3, [sp, #32]
 800b1f8:	1b1b      	subs	r3, r3, r4
 800b1fa:	9308      	str	r3, [sp, #32]
 800b1fc:	f000 80b1 	beq.w	800b362 <_dtoa_r+0x8ea>
 800b200:	9a08      	ldr	r2, [sp, #32]
 800b202:	4641      	mov	r1, r8
 800b204:	4648      	mov	r0, r9
 800b206:	f001 f849 	bl	800c29c <__pow5mult>
 800b20a:	9002      	str	r0, [sp, #8]
 800b20c:	2101      	movs	r1, #1
 800b20e:	4648      	mov	r0, r9
 800b210:	f000 ff8c 	bl	800c12c <__i2b>
 800b214:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b216:	4604      	mov	r4, r0
 800b218:	2b00      	cmp	r3, #0
 800b21a:	f000 81d8 	beq.w	800b5ce <_dtoa_r+0xb56>
 800b21e:	461a      	mov	r2, r3
 800b220:	4601      	mov	r1, r0
 800b222:	4648      	mov	r0, r9
 800b224:	f001 f83a 	bl	800c29c <__pow5mult>
 800b228:	9b07      	ldr	r3, [sp, #28]
 800b22a:	2b01      	cmp	r3, #1
 800b22c:	4604      	mov	r4, r0
 800b22e:	f300 809f 	bgt.w	800b370 <_dtoa_r+0x8f8>
 800b232:	9b04      	ldr	r3, [sp, #16]
 800b234:	2b00      	cmp	r3, #0
 800b236:	f040 8097 	bne.w	800b368 <_dtoa_r+0x8f0>
 800b23a:	9b05      	ldr	r3, [sp, #20]
 800b23c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b240:	2b00      	cmp	r3, #0
 800b242:	f040 8093 	bne.w	800b36c <_dtoa_r+0x8f4>
 800b246:	9b05      	ldr	r3, [sp, #20]
 800b248:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b24c:	0d1b      	lsrs	r3, r3, #20
 800b24e:	051b      	lsls	r3, r3, #20
 800b250:	b133      	cbz	r3, 800b260 <_dtoa_r+0x7e8>
 800b252:	9b00      	ldr	r3, [sp, #0]
 800b254:	3301      	adds	r3, #1
 800b256:	9300      	str	r3, [sp, #0]
 800b258:	9b06      	ldr	r3, [sp, #24]
 800b25a:	3301      	adds	r3, #1
 800b25c:	9306      	str	r3, [sp, #24]
 800b25e:	2301      	movs	r3, #1
 800b260:	9308      	str	r3, [sp, #32]
 800b262:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b264:	2b00      	cmp	r3, #0
 800b266:	f000 81b8 	beq.w	800b5da <_dtoa_r+0xb62>
 800b26a:	6923      	ldr	r3, [r4, #16]
 800b26c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b270:	6918      	ldr	r0, [r3, #16]
 800b272:	f000 ff0f 	bl	800c094 <__hi0bits>
 800b276:	f1c0 0020 	rsb	r0, r0, #32
 800b27a:	9b06      	ldr	r3, [sp, #24]
 800b27c:	4418      	add	r0, r3
 800b27e:	f010 001f 	ands.w	r0, r0, #31
 800b282:	f000 8082 	beq.w	800b38a <_dtoa_r+0x912>
 800b286:	f1c0 0320 	rsb	r3, r0, #32
 800b28a:	2b04      	cmp	r3, #4
 800b28c:	dd73      	ble.n	800b376 <_dtoa_r+0x8fe>
 800b28e:	9b00      	ldr	r3, [sp, #0]
 800b290:	f1c0 001c 	rsb	r0, r0, #28
 800b294:	4403      	add	r3, r0
 800b296:	9300      	str	r3, [sp, #0]
 800b298:	9b06      	ldr	r3, [sp, #24]
 800b29a:	4403      	add	r3, r0
 800b29c:	4406      	add	r6, r0
 800b29e:	9306      	str	r3, [sp, #24]
 800b2a0:	9b00      	ldr	r3, [sp, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	dd05      	ble.n	800b2b2 <_dtoa_r+0x83a>
 800b2a6:	9902      	ldr	r1, [sp, #8]
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	4648      	mov	r0, r9
 800b2ac:	f001 f850 	bl	800c350 <__lshift>
 800b2b0:	9002      	str	r0, [sp, #8]
 800b2b2:	9b06      	ldr	r3, [sp, #24]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	dd05      	ble.n	800b2c4 <_dtoa_r+0x84c>
 800b2b8:	4621      	mov	r1, r4
 800b2ba:	461a      	mov	r2, r3
 800b2bc:	4648      	mov	r0, r9
 800b2be:	f001 f847 	bl	800c350 <__lshift>
 800b2c2:	4604      	mov	r4, r0
 800b2c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d061      	beq.n	800b38e <_dtoa_r+0x916>
 800b2ca:	9802      	ldr	r0, [sp, #8]
 800b2cc:	4621      	mov	r1, r4
 800b2ce:	f001 f8ab 	bl	800c428 <__mcmp>
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	da5b      	bge.n	800b38e <_dtoa_r+0x916>
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	9902      	ldr	r1, [sp, #8]
 800b2da:	220a      	movs	r2, #10
 800b2dc:	4648      	mov	r0, r9
 800b2de:	f000 fe49 	bl	800bf74 <__multadd>
 800b2e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2e4:	9002      	str	r0, [sp, #8]
 800b2e6:	f107 38ff 	add.w	r8, r7, #4294967295
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	f000 8177 	beq.w	800b5de <_dtoa_r+0xb66>
 800b2f0:	4629      	mov	r1, r5
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	220a      	movs	r2, #10
 800b2f6:	4648      	mov	r0, r9
 800b2f8:	f000 fe3c 	bl	800bf74 <__multadd>
 800b2fc:	f1bb 0f00 	cmp.w	fp, #0
 800b300:	4605      	mov	r5, r0
 800b302:	dc6f      	bgt.n	800b3e4 <_dtoa_r+0x96c>
 800b304:	9b07      	ldr	r3, [sp, #28]
 800b306:	2b02      	cmp	r3, #2
 800b308:	dc49      	bgt.n	800b39e <_dtoa_r+0x926>
 800b30a:	e06b      	b.n	800b3e4 <_dtoa_r+0x96c>
 800b30c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b30e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b312:	e73c      	b.n	800b18e <_dtoa_r+0x716>
 800b314:	3fe00000 	.word	0x3fe00000
 800b318:	40240000 	.word	0x40240000
 800b31c:	9b03      	ldr	r3, [sp, #12]
 800b31e:	1e5c      	subs	r4, r3, #1
 800b320:	9b08      	ldr	r3, [sp, #32]
 800b322:	42a3      	cmp	r3, r4
 800b324:	db09      	blt.n	800b33a <_dtoa_r+0x8c2>
 800b326:	1b1c      	subs	r4, r3, r4
 800b328:	9b03      	ldr	r3, [sp, #12]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f6bf af30 	bge.w	800b190 <_dtoa_r+0x718>
 800b330:	9b00      	ldr	r3, [sp, #0]
 800b332:	9a03      	ldr	r2, [sp, #12]
 800b334:	1a9e      	subs	r6, r3, r2
 800b336:	2300      	movs	r3, #0
 800b338:	e72b      	b.n	800b192 <_dtoa_r+0x71a>
 800b33a:	9b08      	ldr	r3, [sp, #32]
 800b33c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b33e:	9408      	str	r4, [sp, #32]
 800b340:	1ae3      	subs	r3, r4, r3
 800b342:	441a      	add	r2, r3
 800b344:	9e00      	ldr	r6, [sp, #0]
 800b346:	9b03      	ldr	r3, [sp, #12]
 800b348:	920d      	str	r2, [sp, #52]	@ 0x34
 800b34a:	2400      	movs	r4, #0
 800b34c:	e721      	b.n	800b192 <_dtoa_r+0x71a>
 800b34e:	9c08      	ldr	r4, [sp, #32]
 800b350:	9e00      	ldr	r6, [sp, #0]
 800b352:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b354:	e728      	b.n	800b1a8 <_dtoa_r+0x730>
 800b356:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b35a:	e751      	b.n	800b200 <_dtoa_r+0x788>
 800b35c:	9a08      	ldr	r2, [sp, #32]
 800b35e:	9902      	ldr	r1, [sp, #8]
 800b360:	e750      	b.n	800b204 <_dtoa_r+0x78c>
 800b362:	f8cd 8008 	str.w	r8, [sp, #8]
 800b366:	e751      	b.n	800b20c <_dtoa_r+0x794>
 800b368:	2300      	movs	r3, #0
 800b36a:	e779      	b.n	800b260 <_dtoa_r+0x7e8>
 800b36c:	9b04      	ldr	r3, [sp, #16]
 800b36e:	e777      	b.n	800b260 <_dtoa_r+0x7e8>
 800b370:	2300      	movs	r3, #0
 800b372:	9308      	str	r3, [sp, #32]
 800b374:	e779      	b.n	800b26a <_dtoa_r+0x7f2>
 800b376:	d093      	beq.n	800b2a0 <_dtoa_r+0x828>
 800b378:	9a00      	ldr	r2, [sp, #0]
 800b37a:	331c      	adds	r3, #28
 800b37c:	441a      	add	r2, r3
 800b37e:	9200      	str	r2, [sp, #0]
 800b380:	9a06      	ldr	r2, [sp, #24]
 800b382:	441a      	add	r2, r3
 800b384:	441e      	add	r6, r3
 800b386:	9206      	str	r2, [sp, #24]
 800b388:	e78a      	b.n	800b2a0 <_dtoa_r+0x828>
 800b38a:	4603      	mov	r3, r0
 800b38c:	e7f4      	b.n	800b378 <_dtoa_r+0x900>
 800b38e:	9b03      	ldr	r3, [sp, #12]
 800b390:	2b00      	cmp	r3, #0
 800b392:	46b8      	mov	r8, r7
 800b394:	dc20      	bgt.n	800b3d8 <_dtoa_r+0x960>
 800b396:	469b      	mov	fp, r3
 800b398:	9b07      	ldr	r3, [sp, #28]
 800b39a:	2b02      	cmp	r3, #2
 800b39c:	dd1e      	ble.n	800b3dc <_dtoa_r+0x964>
 800b39e:	f1bb 0f00 	cmp.w	fp, #0
 800b3a2:	f47f adb1 	bne.w	800af08 <_dtoa_r+0x490>
 800b3a6:	4621      	mov	r1, r4
 800b3a8:	465b      	mov	r3, fp
 800b3aa:	2205      	movs	r2, #5
 800b3ac:	4648      	mov	r0, r9
 800b3ae:	f000 fde1 	bl	800bf74 <__multadd>
 800b3b2:	4601      	mov	r1, r0
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	9802      	ldr	r0, [sp, #8]
 800b3b8:	f001 f836 	bl	800c428 <__mcmp>
 800b3bc:	2800      	cmp	r0, #0
 800b3be:	f77f ada3 	ble.w	800af08 <_dtoa_r+0x490>
 800b3c2:	4656      	mov	r6, sl
 800b3c4:	2331      	movs	r3, #49	@ 0x31
 800b3c6:	f806 3b01 	strb.w	r3, [r6], #1
 800b3ca:	f108 0801 	add.w	r8, r8, #1
 800b3ce:	e59f      	b.n	800af10 <_dtoa_r+0x498>
 800b3d0:	9c03      	ldr	r4, [sp, #12]
 800b3d2:	46b8      	mov	r8, r7
 800b3d4:	4625      	mov	r5, r4
 800b3d6:	e7f4      	b.n	800b3c2 <_dtoa_r+0x94a>
 800b3d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b3dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	f000 8101 	beq.w	800b5e6 <_dtoa_r+0xb6e>
 800b3e4:	2e00      	cmp	r6, #0
 800b3e6:	dd05      	ble.n	800b3f4 <_dtoa_r+0x97c>
 800b3e8:	4629      	mov	r1, r5
 800b3ea:	4632      	mov	r2, r6
 800b3ec:	4648      	mov	r0, r9
 800b3ee:	f000 ffaf 	bl	800c350 <__lshift>
 800b3f2:	4605      	mov	r5, r0
 800b3f4:	9b08      	ldr	r3, [sp, #32]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d05c      	beq.n	800b4b4 <_dtoa_r+0xa3c>
 800b3fa:	6869      	ldr	r1, [r5, #4]
 800b3fc:	4648      	mov	r0, r9
 800b3fe:	f000 fd57 	bl	800beb0 <_Balloc>
 800b402:	4606      	mov	r6, r0
 800b404:	b928      	cbnz	r0, 800b412 <_dtoa_r+0x99a>
 800b406:	4b82      	ldr	r3, [pc, #520]	@ (800b610 <_dtoa_r+0xb98>)
 800b408:	4602      	mov	r2, r0
 800b40a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b40e:	f7ff bb4a 	b.w	800aaa6 <_dtoa_r+0x2e>
 800b412:	692a      	ldr	r2, [r5, #16]
 800b414:	3202      	adds	r2, #2
 800b416:	0092      	lsls	r2, r2, #2
 800b418:	f105 010c 	add.w	r1, r5, #12
 800b41c:	300c      	adds	r0, #12
 800b41e:	f7ff fa68 	bl	800a8f2 <memcpy>
 800b422:	2201      	movs	r2, #1
 800b424:	4631      	mov	r1, r6
 800b426:	4648      	mov	r0, r9
 800b428:	f000 ff92 	bl	800c350 <__lshift>
 800b42c:	f10a 0301 	add.w	r3, sl, #1
 800b430:	9300      	str	r3, [sp, #0]
 800b432:	eb0a 030b 	add.w	r3, sl, fp
 800b436:	9308      	str	r3, [sp, #32]
 800b438:	9b04      	ldr	r3, [sp, #16]
 800b43a:	f003 0301 	and.w	r3, r3, #1
 800b43e:	462f      	mov	r7, r5
 800b440:	9306      	str	r3, [sp, #24]
 800b442:	4605      	mov	r5, r0
 800b444:	9b00      	ldr	r3, [sp, #0]
 800b446:	9802      	ldr	r0, [sp, #8]
 800b448:	4621      	mov	r1, r4
 800b44a:	f103 3bff 	add.w	fp, r3, #4294967295
 800b44e:	f7ff fa8b 	bl	800a968 <quorem>
 800b452:	4603      	mov	r3, r0
 800b454:	3330      	adds	r3, #48	@ 0x30
 800b456:	9003      	str	r0, [sp, #12]
 800b458:	4639      	mov	r1, r7
 800b45a:	9802      	ldr	r0, [sp, #8]
 800b45c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b45e:	f000 ffe3 	bl	800c428 <__mcmp>
 800b462:	462a      	mov	r2, r5
 800b464:	9004      	str	r0, [sp, #16]
 800b466:	4621      	mov	r1, r4
 800b468:	4648      	mov	r0, r9
 800b46a:	f000 fff9 	bl	800c460 <__mdiff>
 800b46e:	68c2      	ldr	r2, [r0, #12]
 800b470:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b472:	4606      	mov	r6, r0
 800b474:	bb02      	cbnz	r2, 800b4b8 <_dtoa_r+0xa40>
 800b476:	4601      	mov	r1, r0
 800b478:	9802      	ldr	r0, [sp, #8]
 800b47a:	f000 ffd5 	bl	800c428 <__mcmp>
 800b47e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b480:	4602      	mov	r2, r0
 800b482:	4631      	mov	r1, r6
 800b484:	4648      	mov	r0, r9
 800b486:	920c      	str	r2, [sp, #48]	@ 0x30
 800b488:	9309      	str	r3, [sp, #36]	@ 0x24
 800b48a:	f000 fd51 	bl	800bf30 <_Bfree>
 800b48e:	9b07      	ldr	r3, [sp, #28]
 800b490:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b492:	9e00      	ldr	r6, [sp, #0]
 800b494:	ea42 0103 	orr.w	r1, r2, r3
 800b498:	9b06      	ldr	r3, [sp, #24]
 800b49a:	4319      	orrs	r1, r3
 800b49c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b49e:	d10d      	bne.n	800b4bc <_dtoa_r+0xa44>
 800b4a0:	2b39      	cmp	r3, #57	@ 0x39
 800b4a2:	d027      	beq.n	800b4f4 <_dtoa_r+0xa7c>
 800b4a4:	9a04      	ldr	r2, [sp, #16]
 800b4a6:	2a00      	cmp	r2, #0
 800b4a8:	dd01      	ble.n	800b4ae <_dtoa_r+0xa36>
 800b4aa:	9b03      	ldr	r3, [sp, #12]
 800b4ac:	3331      	adds	r3, #49	@ 0x31
 800b4ae:	f88b 3000 	strb.w	r3, [fp]
 800b4b2:	e52e      	b.n	800af12 <_dtoa_r+0x49a>
 800b4b4:	4628      	mov	r0, r5
 800b4b6:	e7b9      	b.n	800b42c <_dtoa_r+0x9b4>
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	e7e2      	b.n	800b482 <_dtoa_r+0xa0a>
 800b4bc:	9904      	ldr	r1, [sp, #16]
 800b4be:	2900      	cmp	r1, #0
 800b4c0:	db04      	blt.n	800b4cc <_dtoa_r+0xa54>
 800b4c2:	9807      	ldr	r0, [sp, #28]
 800b4c4:	4301      	orrs	r1, r0
 800b4c6:	9806      	ldr	r0, [sp, #24]
 800b4c8:	4301      	orrs	r1, r0
 800b4ca:	d120      	bne.n	800b50e <_dtoa_r+0xa96>
 800b4cc:	2a00      	cmp	r2, #0
 800b4ce:	ddee      	ble.n	800b4ae <_dtoa_r+0xa36>
 800b4d0:	9902      	ldr	r1, [sp, #8]
 800b4d2:	9300      	str	r3, [sp, #0]
 800b4d4:	2201      	movs	r2, #1
 800b4d6:	4648      	mov	r0, r9
 800b4d8:	f000 ff3a 	bl	800c350 <__lshift>
 800b4dc:	4621      	mov	r1, r4
 800b4de:	9002      	str	r0, [sp, #8]
 800b4e0:	f000 ffa2 	bl	800c428 <__mcmp>
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	9b00      	ldr	r3, [sp, #0]
 800b4e8:	dc02      	bgt.n	800b4f0 <_dtoa_r+0xa78>
 800b4ea:	d1e0      	bne.n	800b4ae <_dtoa_r+0xa36>
 800b4ec:	07da      	lsls	r2, r3, #31
 800b4ee:	d5de      	bpl.n	800b4ae <_dtoa_r+0xa36>
 800b4f0:	2b39      	cmp	r3, #57	@ 0x39
 800b4f2:	d1da      	bne.n	800b4aa <_dtoa_r+0xa32>
 800b4f4:	2339      	movs	r3, #57	@ 0x39
 800b4f6:	f88b 3000 	strb.w	r3, [fp]
 800b4fa:	4633      	mov	r3, r6
 800b4fc:	461e      	mov	r6, r3
 800b4fe:	3b01      	subs	r3, #1
 800b500:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b504:	2a39      	cmp	r2, #57	@ 0x39
 800b506:	d04e      	beq.n	800b5a6 <_dtoa_r+0xb2e>
 800b508:	3201      	adds	r2, #1
 800b50a:	701a      	strb	r2, [r3, #0]
 800b50c:	e501      	b.n	800af12 <_dtoa_r+0x49a>
 800b50e:	2a00      	cmp	r2, #0
 800b510:	dd03      	ble.n	800b51a <_dtoa_r+0xaa2>
 800b512:	2b39      	cmp	r3, #57	@ 0x39
 800b514:	d0ee      	beq.n	800b4f4 <_dtoa_r+0xa7c>
 800b516:	3301      	adds	r3, #1
 800b518:	e7c9      	b.n	800b4ae <_dtoa_r+0xa36>
 800b51a:	9a00      	ldr	r2, [sp, #0]
 800b51c:	9908      	ldr	r1, [sp, #32]
 800b51e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b522:	428a      	cmp	r2, r1
 800b524:	d028      	beq.n	800b578 <_dtoa_r+0xb00>
 800b526:	9902      	ldr	r1, [sp, #8]
 800b528:	2300      	movs	r3, #0
 800b52a:	220a      	movs	r2, #10
 800b52c:	4648      	mov	r0, r9
 800b52e:	f000 fd21 	bl	800bf74 <__multadd>
 800b532:	42af      	cmp	r7, r5
 800b534:	9002      	str	r0, [sp, #8]
 800b536:	f04f 0300 	mov.w	r3, #0
 800b53a:	f04f 020a 	mov.w	r2, #10
 800b53e:	4639      	mov	r1, r7
 800b540:	4648      	mov	r0, r9
 800b542:	d107      	bne.n	800b554 <_dtoa_r+0xadc>
 800b544:	f000 fd16 	bl	800bf74 <__multadd>
 800b548:	4607      	mov	r7, r0
 800b54a:	4605      	mov	r5, r0
 800b54c:	9b00      	ldr	r3, [sp, #0]
 800b54e:	3301      	adds	r3, #1
 800b550:	9300      	str	r3, [sp, #0]
 800b552:	e777      	b.n	800b444 <_dtoa_r+0x9cc>
 800b554:	f000 fd0e 	bl	800bf74 <__multadd>
 800b558:	4629      	mov	r1, r5
 800b55a:	4607      	mov	r7, r0
 800b55c:	2300      	movs	r3, #0
 800b55e:	220a      	movs	r2, #10
 800b560:	4648      	mov	r0, r9
 800b562:	f000 fd07 	bl	800bf74 <__multadd>
 800b566:	4605      	mov	r5, r0
 800b568:	e7f0      	b.n	800b54c <_dtoa_r+0xad4>
 800b56a:	f1bb 0f00 	cmp.w	fp, #0
 800b56e:	bfcc      	ite	gt
 800b570:	465e      	movgt	r6, fp
 800b572:	2601      	movle	r6, #1
 800b574:	4456      	add	r6, sl
 800b576:	2700      	movs	r7, #0
 800b578:	9902      	ldr	r1, [sp, #8]
 800b57a:	9300      	str	r3, [sp, #0]
 800b57c:	2201      	movs	r2, #1
 800b57e:	4648      	mov	r0, r9
 800b580:	f000 fee6 	bl	800c350 <__lshift>
 800b584:	4621      	mov	r1, r4
 800b586:	9002      	str	r0, [sp, #8]
 800b588:	f000 ff4e 	bl	800c428 <__mcmp>
 800b58c:	2800      	cmp	r0, #0
 800b58e:	dcb4      	bgt.n	800b4fa <_dtoa_r+0xa82>
 800b590:	d102      	bne.n	800b598 <_dtoa_r+0xb20>
 800b592:	9b00      	ldr	r3, [sp, #0]
 800b594:	07db      	lsls	r3, r3, #31
 800b596:	d4b0      	bmi.n	800b4fa <_dtoa_r+0xa82>
 800b598:	4633      	mov	r3, r6
 800b59a:	461e      	mov	r6, r3
 800b59c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5a0:	2a30      	cmp	r2, #48	@ 0x30
 800b5a2:	d0fa      	beq.n	800b59a <_dtoa_r+0xb22>
 800b5a4:	e4b5      	b.n	800af12 <_dtoa_r+0x49a>
 800b5a6:	459a      	cmp	sl, r3
 800b5a8:	d1a8      	bne.n	800b4fc <_dtoa_r+0xa84>
 800b5aa:	2331      	movs	r3, #49	@ 0x31
 800b5ac:	f108 0801 	add.w	r8, r8, #1
 800b5b0:	f88a 3000 	strb.w	r3, [sl]
 800b5b4:	e4ad      	b.n	800af12 <_dtoa_r+0x49a>
 800b5b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b5b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b614 <_dtoa_r+0xb9c>
 800b5bc:	b11b      	cbz	r3, 800b5c6 <_dtoa_r+0xb4e>
 800b5be:	f10a 0308 	add.w	r3, sl, #8
 800b5c2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b5c4:	6013      	str	r3, [r2, #0]
 800b5c6:	4650      	mov	r0, sl
 800b5c8:	b017      	add	sp, #92	@ 0x5c
 800b5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ce:	9b07      	ldr	r3, [sp, #28]
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	f77f ae2e 	ble.w	800b232 <_dtoa_r+0x7ba>
 800b5d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b5d8:	9308      	str	r3, [sp, #32]
 800b5da:	2001      	movs	r0, #1
 800b5dc:	e64d      	b.n	800b27a <_dtoa_r+0x802>
 800b5de:	f1bb 0f00 	cmp.w	fp, #0
 800b5e2:	f77f aed9 	ble.w	800b398 <_dtoa_r+0x920>
 800b5e6:	4656      	mov	r6, sl
 800b5e8:	9802      	ldr	r0, [sp, #8]
 800b5ea:	4621      	mov	r1, r4
 800b5ec:	f7ff f9bc 	bl	800a968 <quorem>
 800b5f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b5f4:	f806 3b01 	strb.w	r3, [r6], #1
 800b5f8:	eba6 020a 	sub.w	r2, r6, sl
 800b5fc:	4593      	cmp	fp, r2
 800b5fe:	ddb4      	ble.n	800b56a <_dtoa_r+0xaf2>
 800b600:	9902      	ldr	r1, [sp, #8]
 800b602:	2300      	movs	r3, #0
 800b604:	220a      	movs	r2, #10
 800b606:	4648      	mov	r0, r9
 800b608:	f000 fcb4 	bl	800bf74 <__multadd>
 800b60c:	9002      	str	r0, [sp, #8]
 800b60e:	e7eb      	b.n	800b5e8 <_dtoa_r+0xb70>
 800b610:	0800d869 	.word	0x0800d869
 800b614:	0800d804 	.word	0x0800d804

0800b618 <_free_r>:
 800b618:	b538      	push	{r3, r4, r5, lr}
 800b61a:	4605      	mov	r5, r0
 800b61c:	2900      	cmp	r1, #0
 800b61e:	d041      	beq.n	800b6a4 <_free_r+0x8c>
 800b620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b624:	1f0c      	subs	r4, r1, #4
 800b626:	2b00      	cmp	r3, #0
 800b628:	bfb8      	it	lt
 800b62a:	18e4      	addlt	r4, r4, r3
 800b62c:	f000 fc34 	bl	800be98 <__malloc_lock>
 800b630:	4a1d      	ldr	r2, [pc, #116]	@ (800b6a8 <_free_r+0x90>)
 800b632:	6813      	ldr	r3, [r2, #0]
 800b634:	b933      	cbnz	r3, 800b644 <_free_r+0x2c>
 800b636:	6063      	str	r3, [r4, #4]
 800b638:	6014      	str	r4, [r2, #0]
 800b63a:	4628      	mov	r0, r5
 800b63c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b640:	f000 bc30 	b.w	800bea4 <__malloc_unlock>
 800b644:	42a3      	cmp	r3, r4
 800b646:	d908      	bls.n	800b65a <_free_r+0x42>
 800b648:	6820      	ldr	r0, [r4, #0]
 800b64a:	1821      	adds	r1, r4, r0
 800b64c:	428b      	cmp	r3, r1
 800b64e:	bf01      	itttt	eq
 800b650:	6819      	ldreq	r1, [r3, #0]
 800b652:	685b      	ldreq	r3, [r3, #4]
 800b654:	1809      	addeq	r1, r1, r0
 800b656:	6021      	streq	r1, [r4, #0]
 800b658:	e7ed      	b.n	800b636 <_free_r+0x1e>
 800b65a:	461a      	mov	r2, r3
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	b10b      	cbz	r3, 800b664 <_free_r+0x4c>
 800b660:	42a3      	cmp	r3, r4
 800b662:	d9fa      	bls.n	800b65a <_free_r+0x42>
 800b664:	6811      	ldr	r1, [r2, #0]
 800b666:	1850      	adds	r0, r2, r1
 800b668:	42a0      	cmp	r0, r4
 800b66a:	d10b      	bne.n	800b684 <_free_r+0x6c>
 800b66c:	6820      	ldr	r0, [r4, #0]
 800b66e:	4401      	add	r1, r0
 800b670:	1850      	adds	r0, r2, r1
 800b672:	4283      	cmp	r3, r0
 800b674:	6011      	str	r1, [r2, #0]
 800b676:	d1e0      	bne.n	800b63a <_free_r+0x22>
 800b678:	6818      	ldr	r0, [r3, #0]
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	6053      	str	r3, [r2, #4]
 800b67e:	4408      	add	r0, r1
 800b680:	6010      	str	r0, [r2, #0]
 800b682:	e7da      	b.n	800b63a <_free_r+0x22>
 800b684:	d902      	bls.n	800b68c <_free_r+0x74>
 800b686:	230c      	movs	r3, #12
 800b688:	602b      	str	r3, [r5, #0]
 800b68a:	e7d6      	b.n	800b63a <_free_r+0x22>
 800b68c:	6820      	ldr	r0, [r4, #0]
 800b68e:	1821      	adds	r1, r4, r0
 800b690:	428b      	cmp	r3, r1
 800b692:	bf04      	itt	eq
 800b694:	6819      	ldreq	r1, [r3, #0]
 800b696:	685b      	ldreq	r3, [r3, #4]
 800b698:	6063      	str	r3, [r4, #4]
 800b69a:	bf04      	itt	eq
 800b69c:	1809      	addeq	r1, r1, r0
 800b69e:	6021      	streq	r1, [r4, #0]
 800b6a0:	6054      	str	r4, [r2, #4]
 800b6a2:	e7ca      	b.n	800b63a <_free_r+0x22>
 800b6a4:	bd38      	pop	{r3, r4, r5, pc}
 800b6a6:	bf00      	nop
 800b6a8:	200008d8 	.word	0x200008d8

0800b6ac <rshift>:
 800b6ac:	6903      	ldr	r3, [r0, #16]
 800b6ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b6b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b6b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b6ba:	f100 0414 	add.w	r4, r0, #20
 800b6be:	dd45      	ble.n	800b74c <rshift+0xa0>
 800b6c0:	f011 011f 	ands.w	r1, r1, #31
 800b6c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b6c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b6cc:	d10c      	bne.n	800b6e8 <rshift+0x3c>
 800b6ce:	f100 0710 	add.w	r7, r0, #16
 800b6d2:	4629      	mov	r1, r5
 800b6d4:	42b1      	cmp	r1, r6
 800b6d6:	d334      	bcc.n	800b742 <rshift+0x96>
 800b6d8:	1a9b      	subs	r3, r3, r2
 800b6da:	009b      	lsls	r3, r3, #2
 800b6dc:	1eea      	subs	r2, r5, #3
 800b6de:	4296      	cmp	r6, r2
 800b6e0:	bf38      	it	cc
 800b6e2:	2300      	movcc	r3, #0
 800b6e4:	4423      	add	r3, r4
 800b6e6:	e015      	b.n	800b714 <rshift+0x68>
 800b6e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b6ec:	f1c1 0820 	rsb	r8, r1, #32
 800b6f0:	40cf      	lsrs	r7, r1
 800b6f2:	f105 0e04 	add.w	lr, r5, #4
 800b6f6:	46a1      	mov	r9, r4
 800b6f8:	4576      	cmp	r6, lr
 800b6fa:	46f4      	mov	ip, lr
 800b6fc:	d815      	bhi.n	800b72a <rshift+0x7e>
 800b6fe:	1a9a      	subs	r2, r3, r2
 800b700:	0092      	lsls	r2, r2, #2
 800b702:	3a04      	subs	r2, #4
 800b704:	3501      	adds	r5, #1
 800b706:	42ae      	cmp	r6, r5
 800b708:	bf38      	it	cc
 800b70a:	2200      	movcc	r2, #0
 800b70c:	18a3      	adds	r3, r4, r2
 800b70e:	50a7      	str	r7, [r4, r2]
 800b710:	b107      	cbz	r7, 800b714 <rshift+0x68>
 800b712:	3304      	adds	r3, #4
 800b714:	1b1a      	subs	r2, r3, r4
 800b716:	42a3      	cmp	r3, r4
 800b718:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b71c:	bf08      	it	eq
 800b71e:	2300      	moveq	r3, #0
 800b720:	6102      	str	r2, [r0, #16]
 800b722:	bf08      	it	eq
 800b724:	6143      	streq	r3, [r0, #20]
 800b726:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b72a:	f8dc c000 	ldr.w	ip, [ip]
 800b72e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b732:	ea4c 0707 	orr.w	r7, ip, r7
 800b736:	f849 7b04 	str.w	r7, [r9], #4
 800b73a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b73e:	40cf      	lsrs	r7, r1
 800b740:	e7da      	b.n	800b6f8 <rshift+0x4c>
 800b742:	f851 cb04 	ldr.w	ip, [r1], #4
 800b746:	f847 cf04 	str.w	ip, [r7, #4]!
 800b74a:	e7c3      	b.n	800b6d4 <rshift+0x28>
 800b74c:	4623      	mov	r3, r4
 800b74e:	e7e1      	b.n	800b714 <rshift+0x68>

0800b750 <__hexdig_fun>:
 800b750:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b754:	2b09      	cmp	r3, #9
 800b756:	d802      	bhi.n	800b75e <__hexdig_fun+0xe>
 800b758:	3820      	subs	r0, #32
 800b75a:	b2c0      	uxtb	r0, r0
 800b75c:	4770      	bx	lr
 800b75e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b762:	2b05      	cmp	r3, #5
 800b764:	d801      	bhi.n	800b76a <__hexdig_fun+0x1a>
 800b766:	3847      	subs	r0, #71	@ 0x47
 800b768:	e7f7      	b.n	800b75a <__hexdig_fun+0xa>
 800b76a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b76e:	2b05      	cmp	r3, #5
 800b770:	d801      	bhi.n	800b776 <__hexdig_fun+0x26>
 800b772:	3827      	subs	r0, #39	@ 0x27
 800b774:	e7f1      	b.n	800b75a <__hexdig_fun+0xa>
 800b776:	2000      	movs	r0, #0
 800b778:	4770      	bx	lr
	...

0800b77c <__gethex>:
 800b77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b780:	b085      	sub	sp, #20
 800b782:	468a      	mov	sl, r1
 800b784:	9302      	str	r3, [sp, #8]
 800b786:	680b      	ldr	r3, [r1, #0]
 800b788:	9001      	str	r0, [sp, #4]
 800b78a:	4690      	mov	r8, r2
 800b78c:	1c9c      	adds	r4, r3, #2
 800b78e:	46a1      	mov	r9, r4
 800b790:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b794:	2830      	cmp	r0, #48	@ 0x30
 800b796:	d0fa      	beq.n	800b78e <__gethex+0x12>
 800b798:	eba9 0303 	sub.w	r3, r9, r3
 800b79c:	f1a3 0b02 	sub.w	fp, r3, #2
 800b7a0:	f7ff ffd6 	bl	800b750 <__hexdig_fun>
 800b7a4:	4605      	mov	r5, r0
 800b7a6:	2800      	cmp	r0, #0
 800b7a8:	d168      	bne.n	800b87c <__gethex+0x100>
 800b7aa:	49a0      	ldr	r1, [pc, #640]	@ (800ba2c <__gethex+0x2b0>)
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	4648      	mov	r0, r9
 800b7b0:	f7fe ffa7 	bl	800a702 <strncmp>
 800b7b4:	4607      	mov	r7, r0
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	d167      	bne.n	800b88a <__gethex+0x10e>
 800b7ba:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b7be:	4626      	mov	r6, r4
 800b7c0:	f7ff ffc6 	bl	800b750 <__hexdig_fun>
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	d062      	beq.n	800b88e <__gethex+0x112>
 800b7c8:	4623      	mov	r3, r4
 800b7ca:	7818      	ldrb	r0, [r3, #0]
 800b7cc:	2830      	cmp	r0, #48	@ 0x30
 800b7ce:	4699      	mov	r9, r3
 800b7d0:	f103 0301 	add.w	r3, r3, #1
 800b7d4:	d0f9      	beq.n	800b7ca <__gethex+0x4e>
 800b7d6:	f7ff ffbb 	bl	800b750 <__hexdig_fun>
 800b7da:	fab0 f580 	clz	r5, r0
 800b7de:	096d      	lsrs	r5, r5, #5
 800b7e0:	f04f 0b01 	mov.w	fp, #1
 800b7e4:	464a      	mov	r2, r9
 800b7e6:	4616      	mov	r6, r2
 800b7e8:	3201      	adds	r2, #1
 800b7ea:	7830      	ldrb	r0, [r6, #0]
 800b7ec:	f7ff ffb0 	bl	800b750 <__hexdig_fun>
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	d1f8      	bne.n	800b7e6 <__gethex+0x6a>
 800b7f4:	498d      	ldr	r1, [pc, #564]	@ (800ba2c <__gethex+0x2b0>)
 800b7f6:	2201      	movs	r2, #1
 800b7f8:	4630      	mov	r0, r6
 800b7fa:	f7fe ff82 	bl	800a702 <strncmp>
 800b7fe:	2800      	cmp	r0, #0
 800b800:	d13f      	bne.n	800b882 <__gethex+0x106>
 800b802:	b944      	cbnz	r4, 800b816 <__gethex+0x9a>
 800b804:	1c74      	adds	r4, r6, #1
 800b806:	4622      	mov	r2, r4
 800b808:	4616      	mov	r6, r2
 800b80a:	3201      	adds	r2, #1
 800b80c:	7830      	ldrb	r0, [r6, #0]
 800b80e:	f7ff ff9f 	bl	800b750 <__hexdig_fun>
 800b812:	2800      	cmp	r0, #0
 800b814:	d1f8      	bne.n	800b808 <__gethex+0x8c>
 800b816:	1ba4      	subs	r4, r4, r6
 800b818:	00a7      	lsls	r7, r4, #2
 800b81a:	7833      	ldrb	r3, [r6, #0]
 800b81c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b820:	2b50      	cmp	r3, #80	@ 0x50
 800b822:	d13e      	bne.n	800b8a2 <__gethex+0x126>
 800b824:	7873      	ldrb	r3, [r6, #1]
 800b826:	2b2b      	cmp	r3, #43	@ 0x2b
 800b828:	d033      	beq.n	800b892 <__gethex+0x116>
 800b82a:	2b2d      	cmp	r3, #45	@ 0x2d
 800b82c:	d034      	beq.n	800b898 <__gethex+0x11c>
 800b82e:	1c71      	adds	r1, r6, #1
 800b830:	2400      	movs	r4, #0
 800b832:	7808      	ldrb	r0, [r1, #0]
 800b834:	f7ff ff8c 	bl	800b750 <__hexdig_fun>
 800b838:	1e43      	subs	r3, r0, #1
 800b83a:	b2db      	uxtb	r3, r3
 800b83c:	2b18      	cmp	r3, #24
 800b83e:	d830      	bhi.n	800b8a2 <__gethex+0x126>
 800b840:	f1a0 0210 	sub.w	r2, r0, #16
 800b844:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b848:	f7ff ff82 	bl	800b750 <__hexdig_fun>
 800b84c:	f100 3cff 	add.w	ip, r0, #4294967295
 800b850:	fa5f fc8c 	uxtb.w	ip, ip
 800b854:	f1bc 0f18 	cmp.w	ip, #24
 800b858:	f04f 030a 	mov.w	r3, #10
 800b85c:	d91e      	bls.n	800b89c <__gethex+0x120>
 800b85e:	b104      	cbz	r4, 800b862 <__gethex+0xe6>
 800b860:	4252      	negs	r2, r2
 800b862:	4417      	add	r7, r2
 800b864:	f8ca 1000 	str.w	r1, [sl]
 800b868:	b1ed      	cbz	r5, 800b8a6 <__gethex+0x12a>
 800b86a:	f1bb 0f00 	cmp.w	fp, #0
 800b86e:	bf0c      	ite	eq
 800b870:	2506      	moveq	r5, #6
 800b872:	2500      	movne	r5, #0
 800b874:	4628      	mov	r0, r5
 800b876:	b005      	add	sp, #20
 800b878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b87c:	2500      	movs	r5, #0
 800b87e:	462c      	mov	r4, r5
 800b880:	e7b0      	b.n	800b7e4 <__gethex+0x68>
 800b882:	2c00      	cmp	r4, #0
 800b884:	d1c7      	bne.n	800b816 <__gethex+0x9a>
 800b886:	4627      	mov	r7, r4
 800b888:	e7c7      	b.n	800b81a <__gethex+0x9e>
 800b88a:	464e      	mov	r6, r9
 800b88c:	462f      	mov	r7, r5
 800b88e:	2501      	movs	r5, #1
 800b890:	e7c3      	b.n	800b81a <__gethex+0x9e>
 800b892:	2400      	movs	r4, #0
 800b894:	1cb1      	adds	r1, r6, #2
 800b896:	e7cc      	b.n	800b832 <__gethex+0xb6>
 800b898:	2401      	movs	r4, #1
 800b89a:	e7fb      	b.n	800b894 <__gethex+0x118>
 800b89c:	fb03 0002 	mla	r0, r3, r2, r0
 800b8a0:	e7ce      	b.n	800b840 <__gethex+0xc4>
 800b8a2:	4631      	mov	r1, r6
 800b8a4:	e7de      	b.n	800b864 <__gethex+0xe8>
 800b8a6:	eba6 0309 	sub.w	r3, r6, r9
 800b8aa:	3b01      	subs	r3, #1
 800b8ac:	4629      	mov	r1, r5
 800b8ae:	2b07      	cmp	r3, #7
 800b8b0:	dc0a      	bgt.n	800b8c8 <__gethex+0x14c>
 800b8b2:	9801      	ldr	r0, [sp, #4]
 800b8b4:	f000 fafc 	bl	800beb0 <_Balloc>
 800b8b8:	4604      	mov	r4, r0
 800b8ba:	b940      	cbnz	r0, 800b8ce <__gethex+0x152>
 800b8bc:	4b5c      	ldr	r3, [pc, #368]	@ (800ba30 <__gethex+0x2b4>)
 800b8be:	4602      	mov	r2, r0
 800b8c0:	21e4      	movs	r1, #228	@ 0xe4
 800b8c2:	485c      	ldr	r0, [pc, #368]	@ (800ba34 <__gethex+0x2b8>)
 800b8c4:	f7ff f832 	bl	800a92c <__assert_func>
 800b8c8:	3101      	adds	r1, #1
 800b8ca:	105b      	asrs	r3, r3, #1
 800b8cc:	e7ef      	b.n	800b8ae <__gethex+0x132>
 800b8ce:	f100 0a14 	add.w	sl, r0, #20
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	4655      	mov	r5, sl
 800b8d6:	469b      	mov	fp, r3
 800b8d8:	45b1      	cmp	r9, r6
 800b8da:	d337      	bcc.n	800b94c <__gethex+0x1d0>
 800b8dc:	f845 bb04 	str.w	fp, [r5], #4
 800b8e0:	eba5 050a 	sub.w	r5, r5, sl
 800b8e4:	10ad      	asrs	r5, r5, #2
 800b8e6:	6125      	str	r5, [r4, #16]
 800b8e8:	4658      	mov	r0, fp
 800b8ea:	f000 fbd3 	bl	800c094 <__hi0bits>
 800b8ee:	016d      	lsls	r5, r5, #5
 800b8f0:	f8d8 6000 	ldr.w	r6, [r8]
 800b8f4:	1a2d      	subs	r5, r5, r0
 800b8f6:	42b5      	cmp	r5, r6
 800b8f8:	dd54      	ble.n	800b9a4 <__gethex+0x228>
 800b8fa:	1bad      	subs	r5, r5, r6
 800b8fc:	4629      	mov	r1, r5
 800b8fe:	4620      	mov	r0, r4
 800b900:	f000 ff5f 	bl	800c7c2 <__any_on>
 800b904:	4681      	mov	r9, r0
 800b906:	b178      	cbz	r0, 800b928 <__gethex+0x1ac>
 800b908:	1e6b      	subs	r3, r5, #1
 800b90a:	1159      	asrs	r1, r3, #5
 800b90c:	f003 021f 	and.w	r2, r3, #31
 800b910:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b914:	f04f 0901 	mov.w	r9, #1
 800b918:	fa09 f202 	lsl.w	r2, r9, r2
 800b91c:	420a      	tst	r2, r1
 800b91e:	d003      	beq.n	800b928 <__gethex+0x1ac>
 800b920:	454b      	cmp	r3, r9
 800b922:	dc36      	bgt.n	800b992 <__gethex+0x216>
 800b924:	f04f 0902 	mov.w	r9, #2
 800b928:	4629      	mov	r1, r5
 800b92a:	4620      	mov	r0, r4
 800b92c:	f7ff febe 	bl	800b6ac <rshift>
 800b930:	442f      	add	r7, r5
 800b932:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b936:	42bb      	cmp	r3, r7
 800b938:	da42      	bge.n	800b9c0 <__gethex+0x244>
 800b93a:	9801      	ldr	r0, [sp, #4]
 800b93c:	4621      	mov	r1, r4
 800b93e:	f000 faf7 	bl	800bf30 <_Bfree>
 800b942:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b944:	2300      	movs	r3, #0
 800b946:	6013      	str	r3, [r2, #0]
 800b948:	25a3      	movs	r5, #163	@ 0xa3
 800b94a:	e793      	b.n	800b874 <__gethex+0xf8>
 800b94c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b950:	2a2e      	cmp	r2, #46	@ 0x2e
 800b952:	d012      	beq.n	800b97a <__gethex+0x1fe>
 800b954:	2b20      	cmp	r3, #32
 800b956:	d104      	bne.n	800b962 <__gethex+0x1e6>
 800b958:	f845 bb04 	str.w	fp, [r5], #4
 800b95c:	f04f 0b00 	mov.w	fp, #0
 800b960:	465b      	mov	r3, fp
 800b962:	7830      	ldrb	r0, [r6, #0]
 800b964:	9303      	str	r3, [sp, #12]
 800b966:	f7ff fef3 	bl	800b750 <__hexdig_fun>
 800b96a:	9b03      	ldr	r3, [sp, #12]
 800b96c:	f000 000f 	and.w	r0, r0, #15
 800b970:	4098      	lsls	r0, r3
 800b972:	ea4b 0b00 	orr.w	fp, fp, r0
 800b976:	3304      	adds	r3, #4
 800b978:	e7ae      	b.n	800b8d8 <__gethex+0x15c>
 800b97a:	45b1      	cmp	r9, r6
 800b97c:	d8ea      	bhi.n	800b954 <__gethex+0x1d8>
 800b97e:	492b      	ldr	r1, [pc, #172]	@ (800ba2c <__gethex+0x2b0>)
 800b980:	9303      	str	r3, [sp, #12]
 800b982:	2201      	movs	r2, #1
 800b984:	4630      	mov	r0, r6
 800b986:	f7fe febc 	bl	800a702 <strncmp>
 800b98a:	9b03      	ldr	r3, [sp, #12]
 800b98c:	2800      	cmp	r0, #0
 800b98e:	d1e1      	bne.n	800b954 <__gethex+0x1d8>
 800b990:	e7a2      	b.n	800b8d8 <__gethex+0x15c>
 800b992:	1ea9      	subs	r1, r5, #2
 800b994:	4620      	mov	r0, r4
 800b996:	f000 ff14 	bl	800c7c2 <__any_on>
 800b99a:	2800      	cmp	r0, #0
 800b99c:	d0c2      	beq.n	800b924 <__gethex+0x1a8>
 800b99e:	f04f 0903 	mov.w	r9, #3
 800b9a2:	e7c1      	b.n	800b928 <__gethex+0x1ac>
 800b9a4:	da09      	bge.n	800b9ba <__gethex+0x23e>
 800b9a6:	1b75      	subs	r5, r6, r5
 800b9a8:	4621      	mov	r1, r4
 800b9aa:	9801      	ldr	r0, [sp, #4]
 800b9ac:	462a      	mov	r2, r5
 800b9ae:	f000 fccf 	bl	800c350 <__lshift>
 800b9b2:	1b7f      	subs	r7, r7, r5
 800b9b4:	4604      	mov	r4, r0
 800b9b6:	f100 0a14 	add.w	sl, r0, #20
 800b9ba:	f04f 0900 	mov.w	r9, #0
 800b9be:	e7b8      	b.n	800b932 <__gethex+0x1b6>
 800b9c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b9c4:	42bd      	cmp	r5, r7
 800b9c6:	dd6f      	ble.n	800baa8 <__gethex+0x32c>
 800b9c8:	1bed      	subs	r5, r5, r7
 800b9ca:	42ae      	cmp	r6, r5
 800b9cc:	dc34      	bgt.n	800ba38 <__gethex+0x2bc>
 800b9ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b9d2:	2b02      	cmp	r3, #2
 800b9d4:	d022      	beq.n	800ba1c <__gethex+0x2a0>
 800b9d6:	2b03      	cmp	r3, #3
 800b9d8:	d024      	beq.n	800ba24 <__gethex+0x2a8>
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d115      	bne.n	800ba0a <__gethex+0x28e>
 800b9de:	42ae      	cmp	r6, r5
 800b9e0:	d113      	bne.n	800ba0a <__gethex+0x28e>
 800b9e2:	2e01      	cmp	r6, #1
 800b9e4:	d10b      	bne.n	800b9fe <__gethex+0x282>
 800b9e6:	9a02      	ldr	r2, [sp, #8]
 800b9e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b9ec:	6013      	str	r3, [r2, #0]
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	6123      	str	r3, [r4, #16]
 800b9f2:	f8ca 3000 	str.w	r3, [sl]
 800b9f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b9f8:	2562      	movs	r5, #98	@ 0x62
 800b9fa:	601c      	str	r4, [r3, #0]
 800b9fc:	e73a      	b.n	800b874 <__gethex+0xf8>
 800b9fe:	1e71      	subs	r1, r6, #1
 800ba00:	4620      	mov	r0, r4
 800ba02:	f000 fede 	bl	800c7c2 <__any_on>
 800ba06:	2800      	cmp	r0, #0
 800ba08:	d1ed      	bne.n	800b9e6 <__gethex+0x26a>
 800ba0a:	9801      	ldr	r0, [sp, #4]
 800ba0c:	4621      	mov	r1, r4
 800ba0e:	f000 fa8f 	bl	800bf30 <_Bfree>
 800ba12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba14:	2300      	movs	r3, #0
 800ba16:	6013      	str	r3, [r2, #0]
 800ba18:	2550      	movs	r5, #80	@ 0x50
 800ba1a:	e72b      	b.n	800b874 <__gethex+0xf8>
 800ba1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d1f3      	bne.n	800ba0a <__gethex+0x28e>
 800ba22:	e7e0      	b.n	800b9e6 <__gethex+0x26a>
 800ba24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d1dd      	bne.n	800b9e6 <__gethex+0x26a>
 800ba2a:	e7ee      	b.n	800ba0a <__gethex+0x28e>
 800ba2c:	0800d714 	.word	0x0800d714
 800ba30:	0800d869 	.word	0x0800d869
 800ba34:	0800d87a 	.word	0x0800d87a
 800ba38:	1e6f      	subs	r7, r5, #1
 800ba3a:	f1b9 0f00 	cmp.w	r9, #0
 800ba3e:	d130      	bne.n	800baa2 <__gethex+0x326>
 800ba40:	b127      	cbz	r7, 800ba4c <__gethex+0x2d0>
 800ba42:	4639      	mov	r1, r7
 800ba44:	4620      	mov	r0, r4
 800ba46:	f000 febc 	bl	800c7c2 <__any_on>
 800ba4a:	4681      	mov	r9, r0
 800ba4c:	117a      	asrs	r2, r7, #5
 800ba4e:	2301      	movs	r3, #1
 800ba50:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ba54:	f007 071f 	and.w	r7, r7, #31
 800ba58:	40bb      	lsls	r3, r7
 800ba5a:	4213      	tst	r3, r2
 800ba5c:	4629      	mov	r1, r5
 800ba5e:	4620      	mov	r0, r4
 800ba60:	bf18      	it	ne
 800ba62:	f049 0902 	orrne.w	r9, r9, #2
 800ba66:	f7ff fe21 	bl	800b6ac <rshift>
 800ba6a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800ba6e:	1b76      	subs	r6, r6, r5
 800ba70:	2502      	movs	r5, #2
 800ba72:	f1b9 0f00 	cmp.w	r9, #0
 800ba76:	d047      	beq.n	800bb08 <__gethex+0x38c>
 800ba78:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ba7c:	2b02      	cmp	r3, #2
 800ba7e:	d015      	beq.n	800baac <__gethex+0x330>
 800ba80:	2b03      	cmp	r3, #3
 800ba82:	d017      	beq.n	800bab4 <__gethex+0x338>
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d109      	bne.n	800ba9c <__gethex+0x320>
 800ba88:	f019 0f02 	tst.w	r9, #2
 800ba8c:	d006      	beq.n	800ba9c <__gethex+0x320>
 800ba8e:	f8da 3000 	ldr.w	r3, [sl]
 800ba92:	ea49 0903 	orr.w	r9, r9, r3
 800ba96:	f019 0f01 	tst.w	r9, #1
 800ba9a:	d10e      	bne.n	800baba <__gethex+0x33e>
 800ba9c:	f045 0510 	orr.w	r5, r5, #16
 800baa0:	e032      	b.n	800bb08 <__gethex+0x38c>
 800baa2:	f04f 0901 	mov.w	r9, #1
 800baa6:	e7d1      	b.n	800ba4c <__gethex+0x2d0>
 800baa8:	2501      	movs	r5, #1
 800baaa:	e7e2      	b.n	800ba72 <__gethex+0x2f6>
 800baac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800baae:	f1c3 0301 	rsb	r3, r3, #1
 800bab2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d0f0      	beq.n	800ba9c <__gethex+0x320>
 800baba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800babe:	f104 0314 	add.w	r3, r4, #20
 800bac2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bac6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800baca:	f04f 0c00 	mov.w	ip, #0
 800bace:	4618      	mov	r0, r3
 800bad0:	f853 2b04 	ldr.w	r2, [r3], #4
 800bad4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bad8:	d01b      	beq.n	800bb12 <__gethex+0x396>
 800bada:	3201      	adds	r2, #1
 800badc:	6002      	str	r2, [r0, #0]
 800bade:	2d02      	cmp	r5, #2
 800bae0:	f104 0314 	add.w	r3, r4, #20
 800bae4:	d13c      	bne.n	800bb60 <__gethex+0x3e4>
 800bae6:	f8d8 2000 	ldr.w	r2, [r8]
 800baea:	3a01      	subs	r2, #1
 800baec:	42b2      	cmp	r2, r6
 800baee:	d109      	bne.n	800bb04 <__gethex+0x388>
 800baf0:	1171      	asrs	r1, r6, #5
 800baf2:	2201      	movs	r2, #1
 800baf4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800baf8:	f006 061f 	and.w	r6, r6, #31
 800bafc:	fa02 f606 	lsl.w	r6, r2, r6
 800bb00:	421e      	tst	r6, r3
 800bb02:	d13a      	bne.n	800bb7a <__gethex+0x3fe>
 800bb04:	f045 0520 	orr.w	r5, r5, #32
 800bb08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bb0a:	601c      	str	r4, [r3, #0]
 800bb0c:	9b02      	ldr	r3, [sp, #8]
 800bb0e:	601f      	str	r7, [r3, #0]
 800bb10:	e6b0      	b.n	800b874 <__gethex+0xf8>
 800bb12:	4299      	cmp	r1, r3
 800bb14:	f843 cc04 	str.w	ip, [r3, #-4]
 800bb18:	d8d9      	bhi.n	800bace <__gethex+0x352>
 800bb1a:	68a3      	ldr	r3, [r4, #8]
 800bb1c:	459b      	cmp	fp, r3
 800bb1e:	db17      	blt.n	800bb50 <__gethex+0x3d4>
 800bb20:	6861      	ldr	r1, [r4, #4]
 800bb22:	9801      	ldr	r0, [sp, #4]
 800bb24:	3101      	adds	r1, #1
 800bb26:	f000 f9c3 	bl	800beb0 <_Balloc>
 800bb2a:	4681      	mov	r9, r0
 800bb2c:	b918      	cbnz	r0, 800bb36 <__gethex+0x3ba>
 800bb2e:	4b1a      	ldr	r3, [pc, #104]	@ (800bb98 <__gethex+0x41c>)
 800bb30:	4602      	mov	r2, r0
 800bb32:	2184      	movs	r1, #132	@ 0x84
 800bb34:	e6c5      	b.n	800b8c2 <__gethex+0x146>
 800bb36:	6922      	ldr	r2, [r4, #16]
 800bb38:	3202      	adds	r2, #2
 800bb3a:	f104 010c 	add.w	r1, r4, #12
 800bb3e:	0092      	lsls	r2, r2, #2
 800bb40:	300c      	adds	r0, #12
 800bb42:	f7fe fed6 	bl	800a8f2 <memcpy>
 800bb46:	4621      	mov	r1, r4
 800bb48:	9801      	ldr	r0, [sp, #4]
 800bb4a:	f000 f9f1 	bl	800bf30 <_Bfree>
 800bb4e:	464c      	mov	r4, r9
 800bb50:	6923      	ldr	r3, [r4, #16]
 800bb52:	1c5a      	adds	r2, r3, #1
 800bb54:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bb58:	6122      	str	r2, [r4, #16]
 800bb5a:	2201      	movs	r2, #1
 800bb5c:	615a      	str	r2, [r3, #20]
 800bb5e:	e7be      	b.n	800bade <__gethex+0x362>
 800bb60:	6922      	ldr	r2, [r4, #16]
 800bb62:	455a      	cmp	r2, fp
 800bb64:	dd0b      	ble.n	800bb7e <__gethex+0x402>
 800bb66:	2101      	movs	r1, #1
 800bb68:	4620      	mov	r0, r4
 800bb6a:	f7ff fd9f 	bl	800b6ac <rshift>
 800bb6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bb72:	3701      	adds	r7, #1
 800bb74:	42bb      	cmp	r3, r7
 800bb76:	f6ff aee0 	blt.w	800b93a <__gethex+0x1be>
 800bb7a:	2501      	movs	r5, #1
 800bb7c:	e7c2      	b.n	800bb04 <__gethex+0x388>
 800bb7e:	f016 061f 	ands.w	r6, r6, #31
 800bb82:	d0fa      	beq.n	800bb7a <__gethex+0x3fe>
 800bb84:	4453      	add	r3, sl
 800bb86:	f1c6 0620 	rsb	r6, r6, #32
 800bb8a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bb8e:	f000 fa81 	bl	800c094 <__hi0bits>
 800bb92:	42b0      	cmp	r0, r6
 800bb94:	dbe7      	blt.n	800bb66 <__gethex+0x3ea>
 800bb96:	e7f0      	b.n	800bb7a <__gethex+0x3fe>
 800bb98:	0800d869 	.word	0x0800d869

0800bb9c <L_shift>:
 800bb9c:	f1c2 0208 	rsb	r2, r2, #8
 800bba0:	0092      	lsls	r2, r2, #2
 800bba2:	b570      	push	{r4, r5, r6, lr}
 800bba4:	f1c2 0620 	rsb	r6, r2, #32
 800bba8:	6843      	ldr	r3, [r0, #4]
 800bbaa:	6804      	ldr	r4, [r0, #0]
 800bbac:	fa03 f506 	lsl.w	r5, r3, r6
 800bbb0:	432c      	orrs	r4, r5
 800bbb2:	40d3      	lsrs	r3, r2
 800bbb4:	6004      	str	r4, [r0, #0]
 800bbb6:	f840 3f04 	str.w	r3, [r0, #4]!
 800bbba:	4288      	cmp	r0, r1
 800bbbc:	d3f4      	bcc.n	800bba8 <L_shift+0xc>
 800bbbe:	bd70      	pop	{r4, r5, r6, pc}

0800bbc0 <__match>:
 800bbc0:	b530      	push	{r4, r5, lr}
 800bbc2:	6803      	ldr	r3, [r0, #0]
 800bbc4:	3301      	adds	r3, #1
 800bbc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbca:	b914      	cbnz	r4, 800bbd2 <__match+0x12>
 800bbcc:	6003      	str	r3, [r0, #0]
 800bbce:	2001      	movs	r0, #1
 800bbd0:	bd30      	pop	{r4, r5, pc}
 800bbd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbd6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bbda:	2d19      	cmp	r5, #25
 800bbdc:	bf98      	it	ls
 800bbde:	3220      	addls	r2, #32
 800bbe0:	42a2      	cmp	r2, r4
 800bbe2:	d0f0      	beq.n	800bbc6 <__match+0x6>
 800bbe4:	2000      	movs	r0, #0
 800bbe6:	e7f3      	b.n	800bbd0 <__match+0x10>

0800bbe8 <__hexnan>:
 800bbe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbec:	680b      	ldr	r3, [r1, #0]
 800bbee:	6801      	ldr	r1, [r0, #0]
 800bbf0:	115e      	asrs	r6, r3, #5
 800bbf2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bbf6:	f013 031f 	ands.w	r3, r3, #31
 800bbfa:	b087      	sub	sp, #28
 800bbfc:	bf18      	it	ne
 800bbfe:	3604      	addne	r6, #4
 800bc00:	2500      	movs	r5, #0
 800bc02:	1f37      	subs	r7, r6, #4
 800bc04:	4682      	mov	sl, r0
 800bc06:	4690      	mov	r8, r2
 800bc08:	9301      	str	r3, [sp, #4]
 800bc0a:	f846 5c04 	str.w	r5, [r6, #-4]
 800bc0e:	46b9      	mov	r9, r7
 800bc10:	463c      	mov	r4, r7
 800bc12:	9502      	str	r5, [sp, #8]
 800bc14:	46ab      	mov	fp, r5
 800bc16:	784a      	ldrb	r2, [r1, #1]
 800bc18:	1c4b      	adds	r3, r1, #1
 800bc1a:	9303      	str	r3, [sp, #12]
 800bc1c:	b342      	cbz	r2, 800bc70 <__hexnan+0x88>
 800bc1e:	4610      	mov	r0, r2
 800bc20:	9105      	str	r1, [sp, #20]
 800bc22:	9204      	str	r2, [sp, #16]
 800bc24:	f7ff fd94 	bl	800b750 <__hexdig_fun>
 800bc28:	2800      	cmp	r0, #0
 800bc2a:	d151      	bne.n	800bcd0 <__hexnan+0xe8>
 800bc2c:	9a04      	ldr	r2, [sp, #16]
 800bc2e:	9905      	ldr	r1, [sp, #20]
 800bc30:	2a20      	cmp	r2, #32
 800bc32:	d818      	bhi.n	800bc66 <__hexnan+0x7e>
 800bc34:	9b02      	ldr	r3, [sp, #8]
 800bc36:	459b      	cmp	fp, r3
 800bc38:	dd13      	ble.n	800bc62 <__hexnan+0x7a>
 800bc3a:	454c      	cmp	r4, r9
 800bc3c:	d206      	bcs.n	800bc4c <__hexnan+0x64>
 800bc3e:	2d07      	cmp	r5, #7
 800bc40:	dc04      	bgt.n	800bc4c <__hexnan+0x64>
 800bc42:	462a      	mov	r2, r5
 800bc44:	4649      	mov	r1, r9
 800bc46:	4620      	mov	r0, r4
 800bc48:	f7ff ffa8 	bl	800bb9c <L_shift>
 800bc4c:	4544      	cmp	r4, r8
 800bc4e:	d952      	bls.n	800bcf6 <__hexnan+0x10e>
 800bc50:	2300      	movs	r3, #0
 800bc52:	f1a4 0904 	sub.w	r9, r4, #4
 800bc56:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc5a:	f8cd b008 	str.w	fp, [sp, #8]
 800bc5e:	464c      	mov	r4, r9
 800bc60:	461d      	mov	r5, r3
 800bc62:	9903      	ldr	r1, [sp, #12]
 800bc64:	e7d7      	b.n	800bc16 <__hexnan+0x2e>
 800bc66:	2a29      	cmp	r2, #41	@ 0x29
 800bc68:	d157      	bne.n	800bd1a <__hexnan+0x132>
 800bc6a:	3102      	adds	r1, #2
 800bc6c:	f8ca 1000 	str.w	r1, [sl]
 800bc70:	f1bb 0f00 	cmp.w	fp, #0
 800bc74:	d051      	beq.n	800bd1a <__hexnan+0x132>
 800bc76:	454c      	cmp	r4, r9
 800bc78:	d206      	bcs.n	800bc88 <__hexnan+0xa0>
 800bc7a:	2d07      	cmp	r5, #7
 800bc7c:	dc04      	bgt.n	800bc88 <__hexnan+0xa0>
 800bc7e:	462a      	mov	r2, r5
 800bc80:	4649      	mov	r1, r9
 800bc82:	4620      	mov	r0, r4
 800bc84:	f7ff ff8a 	bl	800bb9c <L_shift>
 800bc88:	4544      	cmp	r4, r8
 800bc8a:	d936      	bls.n	800bcfa <__hexnan+0x112>
 800bc8c:	f1a8 0204 	sub.w	r2, r8, #4
 800bc90:	4623      	mov	r3, r4
 800bc92:	f853 1b04 	ldr.w	r1, [r3], #4
 800bc96:	f842 1f04 	str.w	r1, [r2, #4]!
 800bc9a:	429f      	cmp	r7, r3
 800bc9c:	d2f9      	bcs.n	800bc92 <__hexnan+0xaa>
 800bc9e:	1b3b      	subs	r3, r7, r4
 800bca0:	f023 0303 	bic.w	r3, r3, #3
 800bca4:	3304      	adds	r3, #4
 800bca6:	3401      	adds	r4, #1
 800bca8:	3e03      	subs	r6, #3
 800bcaa:	42b4      	cmp	r4, r6
 800bcac:	bf88      	it	hi
 800bcae:	2304      	movhi	r3, #4
 800bcb0:	4443      	add	r3, r8
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	f843 2b04 	str.w	r2, [r3], #4
 800bcb8:	429f      	cmp	r7, r3
 800bcba:	d2fb      	bcs.n	800bcb4 <__hexnan+0xcc>
 800bcbc:	683b      	ldr	r3, [r7, #0]
 800bcbe:	b91b      	cbnz	r3, 800bcc8 <__hexnan+0xe0>
 800bcc0:	4547      	cmp	r7, r8
 800bcc2:	d128      	bne.n	800bd16 <__hexnan+0x12e>
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	603b      	str	r3, [r7, #0]
 800bcc8:	2005      	movs	r0, #5
 800bcca:	b007      	add	sp, #28
 800bccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcd0:	3501      	adds	r5, #1
 800bcd2:	2d08      	cmp	r5, #8
 800bcd4:	f10b 0b01 	add.w	fp, fp, #1
 800bcd8:	dd06      	ble.n	800bce8 <__hexnan+0x100>
 800bcda:	4544      	cmp	r4, r8
 800bcdc:	d9c1      	bls.n	800bc62 <__hexnan+0x7a>
 800bcde:	2300      	movs	r3, #0
 800bce0:	f844 3c04 	str.w	r3, [r4, #-4]
 800bce4:	2501      	movs	r5, #1
 800bce6:	3c04      	subs	r4, #4
 800bce8:	6822      	ldr	r2, [r4, #0]
 800bcea:	f000 000f 	and.w	r0, r0, #15
 800bcee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bcf2:	6020      	str	r0, [r4, #0]
 800bcf4:	e7b5      	b.n	800bc62 <__hexnan+0x7a>
 800bcf6:	2508      	movs	r5, #8
 800bcf8:	e7b3      	b.n	800bc62 <__hexnan+0x7a>
 800bcfa:	9b01      	ldr	r3, [sp, #4]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d0dd      	beq.n	800bcbc <__hexnan+0xd4>
 800bd00:	f1c3 0320 	rsb	r3, r3, #32
 800bd04:	f04f 32ff 	mov.w	r2, #4294967295
 800bd08:	40da      	lsrs	r2, r3
 800bd0a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bd0e:	4013      	ands	r3, r2
 800bd10:	f846 3c04 	str.w	r3, [r6, #-4]
 800bd14:	e7d2      	b.n	800bcbc <__hexnan+0xd4>
 800bd16:	3f04      	subs	r7, #4
 800bd18:	e7d0      	b.n	800bcbc <__hexnan+0xd4>
 800bd1a:	2004      	movs	r0, #4
 800bd1c:	e7d5      	b.n	800bcca <__hexnan+0xe2>
	...

0800bd20 <malloc>:
 800bd20:	4b02      	ldr	r3, [pc, #8]	@ (800bd2c <malloc+0xc>)
 800bd22:	4601      	mov	r1, r0
 800bd24:	6818      	ldr	r0, [r3, #0]
 800bd26:	f000 b825 	b.w	800bd74 <_malloc_r>
 800bd2a:	bf00      	nop
 800bd2c:	20000208 	.word	0x20000208

0800bd30 <sbrk_aligned>:
 800bd30:	b570      	push	{r4, r5, r6, lr}
 800bd32:	4e0f      	ldr	r6, [pc, #60]	@ (800bd70 <sbrk_aligned+0x40>)
 800bd34:	460c      	mov	r4, r1
 800bd36:	6831      	ldr	r1, [r6, #0]
 800bd38:	4605      	mov	r5, r0
 800bd3a:	b911      	cbnz	r1, 800bd42 <sbrk_aligned+0x12>
 800bd3c:	f001 f81a 	bl	800cd74 <_sbrk_r>
 800bd40:	6030      	str	r0, [r6, #0]
 800bd42:	4621      	mov	r1, r4
 800bd44:	4628      	mov	r0, r5
 800bd46:	f001 f815 	bl	800cd74 <_sbrk_r>
 800bd4a:	1c43      	adds	r3, r0, #1
 800bd4c:	d103      	bne.n	800bd56 <sbrk_aligned+0x26>
 800bd4e:	f04f 34ff 	mov.w	r4, #4294967295
 800bd52:	4620      	mov	r0, r4
 800bd54:	bd70      	pop	{r4, r5, r6, pc}
 800bd56:	1cc4      	adds	r4, r0, #3
 800bd58:	f024 0403 	bic.w	r4, r4, #3
 800bd5c:	42a0      	cmp	r0, r4
 800bd5e:	d0f8      	beq.n	800bd52 <sbrk_aligned+0x22>
 800bd60:	1a21      	subs	r1, r4, r0
 800bd62:	4628      	mov	r0, r5
 800bd64:	f001 f806 	bl	800cd74 <_sbrk_r>
 800bd68:	3001      	adds	r0, #1
 800bd6a:	d1f2      	bne.n	800bd52 <sbrk_aligned+0x22>
 800bd6c:	e7ef      	b.n	800bd4e <sbrk_aligned+0x1e>
 800bd6e:	bf00      	nop
 800bd70:	200008d4 	.word	0x200008d4

0800bd74 <_malloc_r>:
 800bd74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd78:	1ccd      	adds	r5, r1, #3
 800bd7a:	f025 0503 	bic.w	r5, r5, #3
 800bd7e:	3508      	adds	r5, #8
 800bd80:	2d0c      	cmp	r5, #12
 800bd82:	bf38      	it	cc
 800bd84:	250c      	movcc	r5, #12
 800bd86:	2d00      	cmp	r5, #0
 800bd88:	4606      	mov	r6, r0
 800bd8a:	db01      	blt.n	800bd90 <_malloc_r+0x1c>
 800bd8c:	42a9      	cmp	r1, r5
 800bd8e:	d904      	bls.n	800bd9a <_malloc_r+0x26>
 800bd90:	230c      	movs	r3, #12
 800bd92:	6033      	str	r3, [r6, #0]
 800bd94:	2000      	movs	r0, #0
 800bd96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800be70 <_malloc_r+0xfc>
 800bd9e:	f000 f87b 	bl	800be98 <__malloc_lock>
 800bda2:	f8d8 3000 	ldr.w	r3, [r8]
 800bda6:	461c      	mov	r4, r3
 800bda8:	bb44      	cbnz	r4, 800bdfc <_malloc_r+0x88>
 800bdaa:	4629      	mov	r1, r5
 800bdac:	4630      	mov	r0, r6
 800bdae:	f7ff ffbf 	bl	800bd30 <sbrk_aligned>
 800bdb2:	1c43      	adds	r3, r0, #1
 800bdb4:	4604      	mov	r4, r0
 800bdb6:	d158      	bne.n	800be6a <_malloc_r+0xf6>
 800bdb8:	f8d8 4000 	ldr.w	r4, [r8]
 800bdbc:	4627      	mov	r7, r4
 800bdbe:	2f00      	cmp	r7, #0
 800bdc0:	d143      	bne.n	800be4a <_malloc_r+0xd6>
 800bdc2:	2c00      	cmp	r4, #0
 800bdc4:	d04b      	beq.n	800be5e <_malloc_r+0xea>
 800bdc6:	6823      	ldr	r3, [r4, #0]
 800bdc8:	4639      	mov	r1, r7
 800bdca:	4630      	mov	r0, r6
 800bdcc:	eb04 0903 	add.w	r9, r4, r3
 800bdd0:	f000 ffd0 	bl	800cd74 <_sbrk_r>
 800bdd4:	4581      	cmp	r9, r0
 800bdd6:	d142      	bne.n	800be5e <_malloc_r+0xea>
 800bdd8:	6821      	ldr	r1, [r4, #0]
 800bdda:	1a6d      	subs	r5, r5, r1
 800bddc:	4629      	mov	r1, r5
 800bdde:	4630      	mov	r0, r6
 800bde0:	f7ff ffa6 	bl	800bd30 <sbrk_aligned>
 800bde4:	3001      	adds	r0, #1
 800bde6:	d03a      	beq.n	800be5e <_malloc_r+0xea>
 800bde8:	6823      	ldr	r3, [r4, #0]
 800bdea:	442b      	add	r3, r5
 800bdec:	6023      	str	r3, [r4, #0]
 800bdee:	f8d8 3000 	ldr.w	r3, [r8]
 800bdf2:	685a      	ldr	r2, [r3, #4]
 800bdf4:	bb62      	cbnz	r2, 800be50 <_malloc_r+0xdc>
 800bdf6:	f8c8 7000 	str.w	r7, [r8]
 800bdfa:	e00f      	b.n	800be1c <_malloc_r+0xa8>
 800bdfc:	6822      	ldr	r2, [r4, #0]
 800bdfe:	1b52      	subs	r2, r2, r5
 800be00:	d420      	bmi.n	800be44 <_malloc_r+0xd0>
 800be02:	2a0b      	cmp	r2, #11
 800be04:	d917      	bls.n	800be36 <_malloc_r+0xc2>
 800be06:	1961      	adds	r1, r4, r5
 800be08:	42a3      	cmp	r3, r4
 800be0a:	6025      	str	r5, [r4, #0]
 800be0c:	bf18      	it	ne
 800be0e:	6059      	strne	r1, [r3, #4]
 800be10:	6863      	ldr	r3, [r4, #4]
 800be12:	bf08      	it	eq
 800be14:	f8c8 1000 	streq.w	r1, [r8]
 800be18:	5162      	str	r2, [r4, r5]
 800be1a:	604b      	str	r3, [r1, #4]
 800be1c:	4630      	mov	r0, r6
 800be1e:	f000 f841 	bl	800bea4 <__malloc_unlock>
 800be22:	f104 000b 	add.w	r0, r4, #11
 800be26:	1d23      	adds	r3, r4, #4
 800be28:	f020 0007 	bic.w	r0, r0, #7
 800be2c:	1ac2      	subs	r2, r0, r3
 800be2e:	bf1c      	itt	ne
 800be30:	1a1b      	subne	r3, r3, r0
 800be32:	50a3      	strne	r3, [r4, r2]
 800be34:	e7af      	b.n	800bd96 <_malloc_r+0x22>
 800be36:	6862      	ldr	r2, [r4, #4]
 800be38:	42a3      	cmp	r3, r4
 800be3a:	bf0c      	ite	eq
 800be3c:	f8c8 2000 	streq.w	r2, [r8]
 800be40:	605a      	strne	r2, [r3, #4]
 800be42:	e7eb      	b.n	800be1c <_malloc_r+0xa8>
 800be44:	4623      	mov	r3, r4
 800be46:	6864      	ldr	r4, [r4, #4]
 800be48:	e7ae      	b.n	800bda8 <_malloc_r+0x34>
 800be4a:	463c      	mov	r4, r7
 800be4c:	687f      	ldr	r7, [r7, #4]
 800be4e:	e7b6      	b.n	800bdbe <_malloc_r+0x4a>
 800be50:	461a      	mov	r2, r3
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	42a3      	cmp	r3, r4
 800be56:	d1fb      	bne.n	800be50 <_malloc_r+0xdc>
 800be58:	2300      	movs	r3, #0
 800be5a:	6053      	str	r3, [r2, #4]
 800be5c:	e7de      	b.n	800be1c <_malloc_r+0xa8>
 800be5e:	230c      	movs	r3, #12
 800be60:	6033      	str	r3, [r6, #0]
 800be62:	4630      	mov	r0, r6
 800be64:	f000 f81e 	bl	800bea4 <__malloc_unlock>
 800be68:	e794      	b.n	800bd94 <_malloc_r+0x20>
 800be6a:	6005      	str	r5, [r0, #0]
 800be6c:	e7d6      	b.n	800be1c <_malloc_r+0xa8>
 800be6e:	bf00      	nop
 800be70:	200008d8 	.word	0x200008d8

0800be74 <__ascii_mbtowc>:
 800be74:	b082      	sub	sp, #8
 800be76:	b901      	cbnz	r1, 800be7a <__ascii_mbtowc+0x6>
 800be78:	a901      	add	r1, sp, #4
 800be7a:	b142      	cbz	r2, 800be8e <__ascii_mbtowc+0x1a>
 800be7c:	b14b      	cbz	r3, 800be92 <__ascii_mbtowc+0x1e>
 800be7e:	7813      	ldrb	r3, [r2, #0]
 800be80:	600b      	str	r3, [r1, #0]
 800be82:	7812      	ldrb	r2, [r2, #0]
 800be84:	1e10      	subs	r0, r2, #0
 800be86:	bf18      	it	ne
 800be88:	2001      	movne	r0, #1
 800be8a:	b002      	add	sp, #8
 800be8c:	4770      	bx	lr
 800be8e:	4610      	mov	r0, r2
 800be90:	e7fb      	b.n	800be8a <__ascii_mbtowc+0x16>
 800be92:	f06f 0001 	mvn.w	r0, #1
 800be96:	e7f8      	b.n	800be8a <__ascii_mbtowc+0x16>

0800be98 <__malloc_lock>:
 800be98:	4801      	ldr	r0, [pc, #4]	@ (800bea0 <__malloc_lock+0x8>)
 800be9a:	f7fe bd28 	b.w	800a8ee <__retarget_lock_acquire_recursive>
 800be9e:	bf00      	nop
 800bea0:	200008d0 	.word	0x200008d0

0800bea4 <__malloc_unlock>:
 800bea4:	4801      	ldr	r0, [pc, #4]	@ (800beac <__malloc_unlock+0x8>)
 800bea6:	f7fe bd23 	b.w	800a8f0 <__retarget_lock_release_recursive>
 800beaa:	bf00      	nop
 800beac:	200008d0 	.word	0x200008d0

0800beb0 <_Balloc>:
 800beb0:	b570      	push	{r4, r5, r6, lr}
 800beb2:	69c6      	ldr	r6, [r0, #28]
 800beb4:	4604      	mov	r4, r0
 800beb6:	460d      	mov	r5, r1
 800beb8:	b976      	cbnz	r6, 800bed8 <_Balloc+0x28>
 800beba:	2010      	movs	r0, #16
 800bebc:	f7ff ff30 	bl	800bd20 <malloc>
 800bec0:	4602      	mov	r2, r0
 800bec2:	61e0      	str	r0, [r4, #28]
 800bec4:	b920      	cbnz	r0, 800bed0 <_Balloc+0x20>
 800bec6:	4b18      	ldr	r3, [pc, #96]	@ (800bf28 <_Balloc+0x78>)
 800bec8:	4818      	ldr	r0, [pc, #96]	@ (800bf2c <_Balloc+0x7c>)
 800beca:	216b      	movs	r1, #107	@ 0x6b
 800becc:	f7fe fd2e 	bl	800a92c <__assert_func>
 800bed0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bed4:	6006      	str	r6, [r0, #0]
 800bed6:	60c6      	str	r6, [r0, #12]
 800bed8:	69e6      	ldr	r6, [r4, #28]
 800beda:	68f3      	ldr	r3, [r6, #12]
 800bedc:	b183      	cbz	r3, 800bf00 <_Balloc+0x50>
 800bede:	69e3      	ldr	r3, [r4, #28]
 800bee0:	68db      	ldr	r3, [r3, #12]
 800bee2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bee6:	b9b8      	cbnz	r0, 800bf18 <_Balloc+0x68>
 800bee8:	2101      	movs	r1, #1
 800beea:	fa01 f605 	lsl.w	r6, r1, r5
 800beee:	1d72      	adds	r2, r6, #5
 800bef0:	0092      	lsls	r2, r2, #2
 800bef2:	4620      	mov	r0, r4
 800bef4:	f000 ff55 	bl	800cda2 <_calloc_r>
 800bef8:	b160      	cbz	r0, 800bf14 <_Balloc+0x64>
 800befa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800befe:	e00e      	b.n	800bf1e <_Balloc+0x6e>
 800bf00:	2221      	movs	r2, #33	@ 0x21
 800bf02:	2104      	movs	r1, #4
 800bf04:	4620      	mov	r0, r4
 800bf06:	f000 ff4c 	bl	800cda2 <_calloc_r>
 800bf0a:	69e3      	ldr	r3, [r4, #28]
 800bf0c:	60f0      	str	r0, [r6, #12]
 800bf0e:	68db      	ldr	r3, [r3, #12]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d1e4      	bne.n	800bede <_Balloc+0x2e>
 800bf14:	2000      	movs	r0, #0
 800bf16:	bd70      	pop	{r4, r5, r6, pc}
 800bf18:	6802      	ldr	r2, [r0, #0]
 800bf1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf1e:	2300      	movs	r3, #0
 800bf20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf24:	e7f7      	b.n	800bf16 <_Balloc+0x66>
 800bf26:	bf00      	nop
 800bf28:	0800d74f 	.word	0x0800d74f
 800bf2c:	0800d8da 	.word	0x0800d8da

0800bf30 <_Bfree>:
 800bf30:	b570      	push	{r4, r5, r6, lr}
 800bf32:	69c6      	ldr	r6, [r0, #28]
 800bf34:	4605      	mov	r5, r0
 800bf36:	460c      	mov	r4, r1
 800bf38:	b976      	cbnz	r6, 800bf58 <_Bfree+0x28>
 800bf3a:	2010      	movs	r0, #16
 800bf3c:	f7ff fef0 	bl	800bd20 <malloc>
 800bf40:	4602      	mov	r2, r0
 800bf42:	61e8      	str	r0, [r5, #28]
 800bf44:	b920      	cbnz	r0, 800bf50 <_Bfree+0x20>
 800bf46:	4b09      	ldr	r3, [pc, #36]	@ (800bf6c <_Bfree+0x3c>)
 800bf48:	4809      	ldr	r0, [pc, #36]	@ (800bf70 <_Bfree+0x40>)
 800bf4a:	218f      	movs	r1, #143	@ 0x8f
 800bf4c:	f7fe fcee 	bl	800a92c <__assert_func>
 800bf50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf54:	6006      	str	r6, [r0, #0]
 800bf56:	60c6      	str	r6, [r0, #12]
 800bf58:	b13c      	cbz	r4, 800bf6a <_Bfree+0x3a>
 800bf5a:	69eb      	ldr	r3, [r5, #28]
 800bf5c:	6862      	ldr	r2, [r4, #4]
 800bf5e:	68db      	ldr	r3, [r3, #12]
 800bf60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf64:	6021      	str	r1, [r4, #0]
 800bf66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf6a:	bd70      	pop	{r4, r5, r6, pc}
 800bf6c:	0800d74f 	.word	0x0800d74f
 800bf70:	0800d8da 	.word	0x0800d8da

0800bf74 <__multadd>:
 800bf74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf78:	690d      	ldr	r5, [r1, #16]
 800bf7a:	4607      	mov	r7, r0
 800bf7c:	460c      	mov	r4, r1
 800bf7e:	461e      	mov	r6, r3
 800bf80:	f101 0c14 	add.w	ip, r1, #20
 800bf84:	2000      	movs	r0, #0
 800bf86:	f8dc 3000 	ldr.w	r3, [ip]
 800bf8a:	b299      	uxth	r1, r3
 800bf8c:	fb02 6101 	mla	r1, r2, r1, r6
 800bf90:	0c1e      	lsrs	r6, r3, #16
 800bf92:	0c0b      	lsrs	r3, r1, #16
 800bf94:	fb02 3306 	mla	r3, r2, r6, r3
 800bf98:	b289      	uxth	r1, r1
 800bf9a:	3001      	adds	r0, #1
 800bf9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bfa0:	4285      	cmp	r5, r0
 800bfa2:	f84c 1b04 	str.w	r1, [ip], #4
 800bfa6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bfaa:	dcec      	bgt.n	800bf86 <__multadd+0x12>
 800bfac:	b30e      	cbz	r6, 800bff2 <__multadd+0x7e>
 800bfae:	68a3      	ldr	r3, [r4, #8]
 800bfb0:	42ab      	cmp	r3, r5
 800bfb2:	dc19      	bgt.n	800bfe8 <__multadd+0x74>
 800bfb4:	6861      	ldr	r1, [r4, #4]
 800bfb6:	4638      	mov	r0, r7
 800bfb8:	3101      	adds	r1, #1
 800bfba:	f7ff ff79 	bl	800beb0 <_Balloc>
 800bfbe:	4680      	mov	r8, r0
 800bfc0:	b928      	cbnz	r0, 800bfce <__multadd+0x5a>
 800bfc2:	4602      	mov	r2, r0
 800bfc4:	4b0c      	ldr	r3, [pc, #48]	@ (800bff8 <__multadd+0x84>)
 800bfc6:	480d      	ldr	r0, [pc, #52]	@ (800bffc <__multadd+0x88>)
 800bfc8:	21ba      	movs	r1, #186	@ 0xba
 800bfca:	f7fe fcaf 	bl	800a92c <__assert_func>
 800bfce:	6922      	ldr	r2, [r4, #16]
 800bfd0:	3202      	adds	r2, #2
 800bfd2:	f104 010c 	add.w	r1, r4, #12
 800bfd6:	0092      	lsls	r2, r2, #2
 800bfd8:	300c      	adds	r0, #12
 800bfda:	f7fe fc8a 	bl	800a8f2 <memcpy>
 800bfde:	4621      	mov	r1, r4
 800bfe0:	4638      	mov	r0, r7
 800bfe2:	f7ff ffa5 	bl	800bf30 <_Bfree>
 800bfe6:	4644      	mov	r4, r8
 800bfe8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bfec:	3501      	adds	r5, #1
 800bfee:	615e      	str	r6, [r3, #20]
 800bff0:	6125      	str	r5, [r4, #16]
 800bff2:	4620      	mov	r0, r4
 800bff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bff8:	0800d869 	.word	0x0800d869
 800bffc:	0800d8da 	.word	0x0800d8da

0800c000 <__s2b>:
 800c000:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c004:	460c      	mov	r4, r1
 800c006:	4615      	mov	r5, r2
 800c008:	461f      	mov	r7, r3
 800c00a:	2209      	movs	r2, #9
 800c00c:	3308      	adds	r3, #8
 800c00e:	4606      	mov	r6, r0
 800c010:	fb93 f3f2 	sdiv	r3, r3, r2
 800c014:	2100      	movs	r1, #0
 800c016:	2201      	movs	r2, #1
 800c018:	429a      	cmp	r2, r3
 800c01a:	db09      	blt.n	800c030 <__s2b+0x30>
 800c01c:	4630      	mov	r0, r6
 800c01e:	f7ff ff47 	bl	800beb0 <_Balloc>
 800c022:	b940      	cbnz	r0, 800c036 <__s2b+0x36>
 800c024:	4602      	mov	r2, r0
 800c026:	4b19      	ldr	r3, [pc, #100]	@ (800c08c <__s2b+0x8c>)
 800c028:	4819      	ldr	r0, [pc, #100]	@ (800c090 <__s2b+0x90>)
 800c02a:	21d3      	movs	r1, #211	@ 0xd3
 800c02c:	f7fe fc7e 	bl	800a92c <__assert_func>
 800c030:	0052      	lsls	r2, r2, #1
 800c032:	3101      	adds	r1, #1
 800c034:	e7f0      	b.n	800c018 <__s2b+0x18>
 800c036:	9b08      	ldr	r3, [sp, #32]
 800c038:	6143      	str	r3, [r0, #20]
 800c03a:	2d09      	cmp	r5, #9
 800c03c:	f04f 0301 	mov.w	r3, #1
 800c040:	6103      	str	r3, [r0, #16]
 800c042:	dd16      	ble.n	800c072 <__s2b+0x72>
 800c044:	f104 0909 	add.w	r9, r4, #9
 800c048:	46c8      	mov	r8, r9
 800c04a:	442c      	add	r4, r5
 800c04c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c050:	4601      	mov	r1, r0
 800c052:	3b30      	subs	r3, #48	@ 0x30
 800c054:	220a      	movs	r2, #10
 800c056:	4630      	mov	r0, r6
 800c058:	f7ff ff8c 	bl	800bf74 <__multadd>
 800c05c:	45a0      	cmp	r8, r4
 800c05e:	d1f5      	bne.n	800c04c <__s2b+0x4c>
 800c060:	f1a5 0408 	sub.w	r4, r5, #8
 800c064:	444c      	add	r4, r9
 800c066:	1b2d      	subs	r5, r5, r4
 800c068:	1963      	adds	r3, r4, r5
 800c06a:	42bb      	cmp	r3, r7
 800c06c:	db04      	blt.n	800c078 <__s2b+0x78>
 800c06e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c072:	340a      	adds	r4, #10
 800c074:	2509      	movs	r5, #9
 800c076:	e7f6      	b.n	800c066 <__s2b+0x66>
 800c078:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c07c:	4601      	mov	r1, r0
 800c07e:	3b30      	subs	r3, #48	@ 0x30
 800c080:	220a      	movs	r2, #10
 800c082:	4630      	mov	r0, r6
 800c084:	f7ff ff76 	bl	800bf74 <__multadd>
 800c088:	e7ee      	b.n	800c068 <__s2b+0x68>
 800c08a:	bf00      	nop
 800c08c:	0800d869 	.word	0x0800d869
 800c090:	0800d8da 	.word	0x0800d8da

0800c094 <__hi0bits>:
 800c094:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c098:	4603      	mov	r3, r0
 800c09a:	bf36      	itet	cc
 800c09c:	0403      	lslcc	r3, r0, #16
 800c09e:	2000      	movcs	r0, #0
 800c0a0:	2010      	movcc	r0, #16
 800c0a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c0a6:	bf3c      	itt	cc
 800c0a8:	021b      	lslcc	r3, r3, #8
 800c0aa:	3008      	addcc	r0, #8
 800c0ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c0b0:	bf3c      	itt	cc
 800c0b2:	011b      	lslcc	r3, r3, #4
 800c0b4:	3004      	addcc	r0, #4
 800c0b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0ba:	bf3c      	itt	cc
 800c0bc:	009b      	lslcc	r3, r3, #2
 800c0be:	3002      	addcc	r0, #2
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	db05      	blt.n	800c0d0 <__hi0bits+0x3c>
 800c0c4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c0c8:	f100 0001 	add.w	r0, r0, #1
 800c0cc:	bf08      	it	eq
 800c0ce:	2020      	moveq	r0, #32
 800c0d0:	4770      	bx	lr

0800c0d2 <__lo0bits>:
 800c0d2:	6803      	ldr	r3, [r0, #0]
 800c0d4:	4602      	mov	r2, r0
 800c0d6:	f013 0007 	ands.w	r0, r3, #7
 800c0da:	d00b      	beq.n	800c0f4 <__lo0bits+0x22>
 800c0dc:	07d9      	lsls	r1, r3, #31
 800c0de:	d421      	bmi.n	800c124 <__lo0bits+0x52>
 800c0e0:	0798      	lsls	r0, r3, #30
 800c0e2:	bf49      	itett	mi
 800c0e4:	085b      	lsrmi	r3, r3, #1
 800c0e6:	089b      	lsrpl	r3, r3, #2
 800c0e8:	2001      	movmi	r0, #1
 800c0ea:	6013      	strmi	r3, [r2, #0]
 800c0ec:	bf5c      	itt	pl
 800c0ee:	6013      	strpl	r3, [r2, #0]
 800c0f0:	2002      	movpl	r0, #2
 800c0f2:	4770      	bx	lr
 800c0f4:	b299      	uxth	r1, r3
 800c0f6:	b909      	cbnz	r1, 800c0fc <__lo0bits+0x2a>
 800c0f8:	0c1b      	lsrs	r3, r3, #16
 800c0fa:	2010      	movs	r0, #16
 800c0fc:	b2d9      	uxtb	r1, r3
 800c0fe:	b909      	cbnz	r1, 800c104 <__lo0bits+0x32>
 800c100:	3008      	adds	r0, #8
 800c102:	0a1b      	lsrs	r3, r3, #8
 800c104:	0719      	lsls	r1, r3, #28
 800c106:	bf04      	itt	eq
 800c108:	091b      	lsreq	r3, r3, #4
 800c10a:	3004      	addeq	r0, #4
 800c10c:	0799      	lsls	r1, r3, #30
 800c10e:	bf04      	itt	eq
 800c110:	089b      	lsreq	r3, r3, #2
 800c112:	3002      	addeq	r0, #2
 800c114:	07d9      	lsls	r1, r3, #31
 800c116:	d403      	bmi.n	800c120 <__lo0bits+0x4e>
 800c118:	085b      	lsrs	r3, r3, #1
 800c11a:	f100 0001 	add.w	r0, r0, #1
 800c11e:	d003      	beq.n	800c128 <__lo0bits+0x56>
 800c120:	6013      	str	r3, [r2, #0]
 800c122:	4770      	bx	lr
 800c124:	2000      	movs	r0, #0
 800c126:	4770      	bx	lr
 800c128:	2020      	movs	r0, #32
 800c12a:	4770      	bx	lr

0800c12c <__i2b>:
 800c12c:	b510      	push	{r4, lr}
 800c12e:	460c      	mov	r4, r1
 800c130:	2101      	movs	r1, #1
 800c132:	f7ff febd 	bl	800beb0 <_Balloc>
 800c136:	4602      	mov	r2, r0
 800c138:	b928      	cbnz	r0, 800c146 <__i2b+0x1a>
 800c13a:	4b05      	ldr	r3, [pc, #20]	@ (800c150 <__i2b+0x24>)
 800c13c:	4805      	ldr	r0, [pc, #20]	@ (800c154 <__i2b+0x28>)
 800c13e:	f240 1145 	movw	r1, #325	@ 0x145
 800c142:	f7fe fbf3 	bl	800a92c <__assert_func>
 800c146:	2301      	movs	r3, #1
 800c148:	6144      	str	r4, [r0, #20]
 800c14a:	6103      	str	r3, [r0, #16]
 800c14c:	bd10      	pop	{r4, pc}
 800c14e:	bf00      	nop
 800c150:	0800d869 	.word	0x0800d869
 800c154:	0800d8da 	.word	0x0800d8da

0800c158 <__multiply>:
 800c158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c15c:	4617      	mov	r7, r2
 800c15e:	690a      	ldr	r2, [r1, #16]
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	429a      	cmp	r2, r3
 800c164:	bfa8      	it	ge
 800c166:	463b      	movge	r3, r7
 800c168:	4689      	mov	r9, r1
 800c16a:	bfa4      	itt	ge
 800c16c:	460f      	movge	r7, r1
 800c16e:	4699      	movge	r9, r3
 800c170:	693d      	ldr	r5, [r7, #16]
 800c172:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	6879      	ldr	r1, [r7, #4]
 800c17a:	eb05 060a 	add.w	r6, r5, sl
 800c17e:	42b3      	cmp	r3, r6
 800c180:	b085      	sub	sp, #20
 800c182:	bfb8      	it	lt
 800c184:	3101      	addlt	r1, #1
 800c186:	f7ff fe93 	bl	800beb0 <_Balloc>
 800c18a:	b930      	cbnz	r0, 800c19a <__multiply+0x42>
 800c18c:	4602      	mov	r2, r0
 800c18e:	4b41      	ldr	r3, [pc, #260]	@ (800c294 <__multiply+0x13c>)
 800c190:	4841      	ldr	r0, [pc, #260]	@ (800c298 <__multiply+0x140>)
 800c192:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c196:	f7fe fbc9 	bl	800a92c <__assert_func>
 800c19a:	f100 0414 	add.w	r4, r0, #20
 800c19e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800c1a2:	4623      	mov	r3, r4
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	4573      	cmp	r3, lr
 800c1a8:	d320      	bcc.n	800c1ec <__multiply+0x94>
 800c1aa:	f107 0814 	add.w	r8, r7, #20
 800c1ae:	f109 0114 	add.w	r1, r9, #20
 800c1b2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800c1b6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800c1ba:	9302      	str	r3, [sp, #8]
 800c1bc:	1beb      	subs	r3, r5, r7
 800c1be:	3b15      	subs	r3, #21
 800c1c0:	f023 0303 	bic.w	r3, r3, #3
 800c1c4:	3304      	adds	r3, #4
 800c1c6:	3715      	adds	r7, #21
 800c1c8:	42bd      	cmp	r5, r7
 800c1ca:	bf38      	it	cc
 800c1cc:	2304      	movcc	r3, #4
 800c1ce:	9301      	str	r3, [sp, #4]
 800c1d0:	9b02      	ldr	r3, [sp, #8]
 800c1d2:	9103      	str	r1, [sp, #12]
 800c1d4:	428b      	cmp	r3, r1
 800c1d6:	d80c      	bhi.n	800c1f2 <__multiply+0x9a>
 800c1d8:	2e00      	cmp	r6, #0
 800c1da:	dd03      	ble.n	800c1e4 <__multiply+0x8c>
 800c1dc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d055      	beq.n	800c290 <__multiply+0x138>
 800c1e4:	6106      	str	r6, [r0, #16]
 800c1e6:	b005      	add	sp, #20
 800c1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1ec:	f843 2b04 	str.w	r2, [r3], #4
 800c1f0:	e7d9      	b.n	800c1a6 <__multiply+0x4e>
 800c1f2:	f8b1 a000 	ldrh.w	sl, [r1]
 800c1f6:	f1ba 0f00 	cmp.w	sl, #0
 800c1fa:	d01f      	beq.n	800c23c <__multiply+0xe4>
 800c1fc:	46c4      	mov	ip, r8
 800c1fe:	46a1      	mov	r9, r4
 800c200:	2700      	movs	r7, #0
 800c202:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c206:	f8d9 3000 	ldr.w	r3, [r9]
 800c20a:	fa1f fb82 	uxth.w	fp, r2
 800c20e:	b29b      	uxth	r3, r3
 800c210:	fb0a 330b 	mla	r3, sl, fp, r3
 800c214:	443b      	add	r3, r7
 800c216:	f8d9 7000 	ldr.w	r7, [r9]
 800c21a:	0c12      	lsrs	r2, r2, #16
 800c21c:	0c3f      	lsrs	r7, r7, #16
 800c21e:	fb0a 7202 	mla	r2, sl, r2, r7
 800c222:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800c226:	b29b      	uxth	r3, r3
 800c228:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c22c:	4565      	cmp	r5, ip
 800c22e:	f849 3b04 	str.w	r3, [r9], #4
 800c232:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800c236:	d8e4      	bhi.n	800c202 <__multiply+0xaa>
 800c238:	9b01      	ldr	r3, [sp, #4]
 800c23a:	50e7      	str	r7, [r4, r3]
 800c23c:	9b03      	ldr	r3, [sp, #12]
 800c23e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c242:	3104      	adds	r1, #4
 800c244:	f1b9 0f00 	cmp.w	r9, #0
 800c248:	d020      	beq.n	800c28c <__multiply+0x134>
 800c24a:	6823      	ldr	r3, [r4, #0]
 800c24c:	4647      	mov	r7, r8
 800c24e:	46a4      	mov	ip, r4
 800c250:	f04f 0a00 	mov.w	sl, #0
 800c254:	f8b7 b000 	ldrh.w	fp, [r7]
 800c258:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800c25c:	fb09 220b 	mla	r2, r9, fp, r2
 800c260:	4452      	add	r2, sl
 800c262:	b29b      	uxth	r3, r3
 800c264:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c268:	f84c 3b04 	str.w	r3, [ip], #4
 800c26c:	f857 3b04 	ldr.w	r3, [r7], #4
 800c270:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c274:	f8bc 3000 	ldrh.w	r3, [ip]
 800c278:	fb09 330a 	mla	r3, r9, sl, r3
 800c27c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800c280:	42bd      	cmp	r5, r7
 800c282:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c286:	d8e5      	bhi.n	800c254 <__multiply+0xfc>
 800c288:	9a01      	ldr	r2, [sp, #4]
 800c28a:	50a3      	str	r3, [r4, r2]
 800c28c:	3404      	adds	r4, #4
 800c28e:	e79f      	b.n	800c1d0 <__multiply+0x78>
 800c290:	3e01      	subs	r6, #1
 800c292:	e7a1      	b.n	800c1d8 <__multiply+0x80>
 800c294:	0800d869 	.word	0x0800d869
 800c298:	0800d8da 	.word	0x0800d8da

0800c29c <__pow5mult>:
 800c29c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2a0:	4615      	mov	r5, r2
 800c2a2:	f012 0203 	ands.w	r2, r2, #3
 800c2a6:	4607      	mov	r7, r0
 800c2a8:	460e      	mov	r6, r1
 800c2aa:	d007      	beq.n	800c2bc <__pow5mult+0x20>
 800c2ac:	4c25      	ldr	r4, [pc, #148]	@ (800c344 <__pow5mult+0xa8>)
 800c2ae:	3a01      	subs	r2, #1
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c2b6:	f7ff fe5d 	bl	800bf74 <__multadd>
 800c2ba:	4606      	mov	r6, r0
 800c2bc:	10ad      	asrs	r5, r5, #2
 800c2be:	d03d      	beq.n	800c33c <__pow5mult+0xa0>
 800c2c0:	69fc      	ldr	r4, [r7, #28]
 800c2c2:	b97c      	cbnz	r4, 800c2e4 <__pow5mult+0x48>
 800c2c4:	2010      	movs	r0, #16
 800c2c6:	f7ff fd2b 	bl	800bd20 <malloc>
 800c2ca:	4602      	mov	r2, r0
 800c2cc:	61f8      	str	r0, [r7, #28]
 800c2ce:	b928      	cbnz	r0, 800c2dc <__pow5mult+0x40>
 800c2d0:	4b1d      	ldr	r3, [pc, #116]	@ (800c348 <__pow5mult+0xac>)
 800c2d2:	481e      	ldr	r0, [pc, #120]	@ (800c34c <__pow5mult+0xb0>)
 800c2d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c2d8:	f7fe fb28 	bl	800a92c <__assert_func>
 800c2dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c2e0:	6004      	str	r4, [r0, #0]
 800c2e2:	60c4      	str	r4, [r0, #12]
 800c2e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c2e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c2ec:	b94c      	cbnz	r4, 800c302 <__pow5mult+0x66>
 800c2ee:	f240 2171 	movw	r1, #625	@ 0x271
 800c2f2:	4638      	mov	r0, r7
 800c2f4:	f7ff ff1a 	bl	800c12c <__i2b>
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	f8c8 0008 	str.w	r0, [r8, #8]
 800c2fe:	4604      	mov	r4, r0
 800c300:	6003      	str	r3, [r0, #0]
 800c302:	f04f 0900 	mov.w	r9, #0
 800c306:	07eb      	lsls	r3, r5, #31
 800c308:	d50a      	bpl.n	800c320 <__pow5mult+0x84>
 800c30a:	4631      	mov	r1, r6
 800c30c:	4622      	mov	r2, r4
 800c30e:	4638      	mov	r0, r7
 800c310:	f7ff ff22 	bl	800c158 <__multiply>
 800c314:	4631      	mov	r1, r6
 800c316:	4680      	mov	r8, r0
 800c318:	4638      	mov	r0, r7
 800c31a:	f7ff fe09 	bl	800bf30 <_Bfree>
 800c31e:	4646      	mov	r6, r8
 800c320:	106d      	asrs	r5, r5, #1
 800c322:	d00b      	beq.n	800c33c <__pow5mult+0xa0>
 800c324:	6820      	ldr	r0, [r4, #0]
 800c326:	b938      	cbnz	r0, 800c338 <__pow5mult+0x9c>
 800c328:	4622      	mov	r2, r4
 800c32a:	4621      	mov	r1, r4
 800c32c:	4638      	mov	r0, r7
 800c32e:	f7ff ff13 	bl	800c158 <__multiply>
 800c332:	6020      	str	r0, [r4, #0]
 800c334:	f8c0 9000 	str.w	r9, [r0]
 800c338:	4604      	mov	r4, r0
 800c33a:	e7e4      	b.n	800c306 <__pow5mult+0x6a>
 800c33c:	4630      	mov	r0, r6
 800c33e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c342:	bf00      	nop
 800c344:	0800d998 	.word	0x0800d998
 800c348:	0800d74f 	.word	0x0800d74f
 800c34c:	0800d8da 	.word	0x0800d8da

0800c350 <__lshift>:
 800c350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c354:	460c      	mov	r4, r1
 800c356:	6849      	ldr	r1, [r1, #4]
 800c358:	6923      	ldr	r3, [r4, #16]
 800c35a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c35e:	68a3      	ldr	r3, [r4, #8]
 800c360:	4607      	mov	r7, r0
 800c362:	4691      	mov	r9, r2
 800c364:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c368:	f108 0601 	add.w	r6, r8, #1
 800c36c:	42b3      	cmp	r3, r6
 800c36e:	db0b      	blt.n	800c388 <__lshift+0x38>
 800c370:	4638      	mov	r0, r7
 800c372:	f7ff fd9d 	bl	800beb0 <_Balloc>
 800c376:	4605      	mov	r5, r0
 800c378:	b948      	cbnz	r0, 800c38e <__lshift+0x3e>
 800c37a:	4602      	mov	r2, r0
 800c37c:	4b28      	ldr	r3, [pc, #160]	@ (800c420 <__lshift+0xd0>)
 800c37e:	4829      	ldr	r0, [pc, #164]	@ (800c424 <__lshift+0xd4>)
 800c380:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c384:	f7fe fad2 	bl	800a92c <__assert_func>
 800c388:	3101      	adds	r1, #1
 800c38a:	005b      	lsls	r3, r3, #1
 800c38c:	e7ee      	b.n	800c36c <__lshift+0x1c>
 800c38e:	2300      	movs	r3, #0
 800c390:	f100 0114 	add.w	r1, r0, #20
 800c394:	f100 0210 	add.w	r2, r0, #16
 800c398:	4618      	mov	r0, r3
 800c39a:	4553      	cmp	r3, sl
 800c39c:	db33      	blt.n	800c406 <__lshift+0xb6>
 800c39e:	6920      	ldr	r0, [r4, #16]
 800c3a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c3a4:	f104 0314 	add.w	r3, r4, #20
 800c3a8:	f019 091f 	ands.w	r9, r9, #31
 800c3ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c3b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c3b4:	d02b      	beq.n	800c40e <__lshift+0xbe>
 800c3b6:	f1c9 0e20 	rsb	lr, r9, #32
 800c3ba:	468a      	mov	sl, r1
 800c3bc:	2200      	movs	r2, #0
 800c3be:	6818      	ldr	r0, [r3, #0]
 800c3c0:	fa00 f009 	lsl.w	r0, r0, r9
 800c3c4:	4310      	orrs	r0, r2
 800c3c6:	f84a 0b04 	str.w	r0, [sl], #4
 800c3ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3ce:	459c      	cmp	ip, r3
 800c3d0:	fa22 f20e 	lsr.w	r2, r2, lr
 800c3d4:	d8f3      	bhi.n	800c3be <__lshift+0x6e>
 800c3d6:	ebac 0304 	sub.w	r3, ip, r4
 800c3da:	3b15      	subs	r3, #21
 800c3dc:	f023 0303 	bic.w	r3, r3, #3
 800c3e0:	3304      	adds	r3, #4
 800c3e2:	f104 0015 	add.w	r0, r4, #21
 800c3e6:	4560      	cmp	r0, ip
 800c3e8:	bf88      	it	hi
 800c3ea:	2304      	movhi	r3, #4
 800c3ec:	50ca      	str	r2, [r1, r3]
 800c3ee:	b10a      	cbz	r2, 800c3f4 <__lshift+0xa4>
 800c3f0:	f108 0602 	add.w	r6, r8, #2
 800c3f4:	3e01      	subs	r6, #1
 800c3f6:	4638      	mov	r0, r7
 800c3f8:	612e      	str	r6, [r5, #16]
 800c3fa:	4621      	mov	r1, r4
 800c3fc:	f7ff fd98 	bl	800bf30 <_Bfree>
 800c400:	4628      	mov	r0, r5
 800c402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c406:	f842 0f04 	str.w	r0, [r2, #4]!
 800c40a:	3301      	adds	r3, #1
 800c40c:	e7c5      	b.n	800c39a <__lshift+0x4a>
 800c40e:	3904      	subs	r1, #4
 800c410:	f853 2b04 	ldr.w	r2, [r3], #4
 800c414:	f841 2f04 	str.w	r2, [r1, #4]!
 800c418:	459c      	cmp	ip, r3
 800c41a:	d8f9      	bhi.n	800c410 <__lshift+0xc0>
 800c41c:	e7ea      	b.n	800c3f4 <__lshift+0xa4>
 800c41e:	bf00      	nop
 800c420:	0800d869 	.word	0x0800d869
 800c424:	0800d8da 	.word	0x0800d8da

0800c428 <__mcmp>:
 800c428:	690a      	ldr	r2, [r1, #16]
 800c42a:	4603      	mov	r3, r0
 800c42c:	6900      	ldr	r0, [r0, #16]
 800c42e:	1a80      	subs	r0, r0, r2
 800c430:	b530      	push	{r4, r5, lr}
 800c432:	d10e      	bne.n	800c452 <__mcmp+0x2a>
 800c434:	3314      	adds	r3, #20
 800c436:	3114      	adds	r1, #20
 800c438:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c43c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c440:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c444:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c448:	4295      	cmp	r5, r2
 800c44a:	d003      	beq.n	800c454 <__mcmp+0x2c>
 800c44c:	d205      	bcs.n	800c45a <__mcmp+0x32>
 800c44e:	f04f 30ff 	mov.w	r0, #4294967295
 800c452:	bd30      	pop	{r4, r5, pc}
 800c454:	42a3      	cmp	r3, r4
 800c456:	d3f3      	bcc.n	800c440 <__mcmp+0x18>
 800c458:	e7fb      	b.n	800c452 <__mcmp+0x2a>
 800c45a:	2001      	movs	r0, #1
 800c45c:	e7f9      	b.n	800c452 <__mcmp+0x2a>
	...

0800c460 <__mdiff>:
 800c460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c464:	4689      	mov	r9, r1
 800c466:	4606      	mov	r6, r0
 800c468:	4611      	mov	r1, r2
 800c46a:	4648      	mov	r0, r9
 800c46c:	4614      	mov	r4, r2
 800c46e:	f7ff ffdb 	bl	800c428 <__mcmp>
 800c472:	1e05      	subs	r5, r0, #0
 800c474:	d112      	bne.n	800c49c <__mdiff+0x3c>
 800c476:	4629      	mov	r1, r5
 800c478:	4630      	mov	r0, r6
 800c47a:	f7ff fd19 	bl	800beb0 <_Balloc>
 800c47e:	4602      	mov	r2, r0
 800c480:	b928      	cbnz	r0, 800c48e <__mdiff+0x2e>
 800c482:	4b3f      	ldr	r3, [pc, #252]	@ (800c580 <__mdiff+0x120>)
 800c484:	f240 2137 	movw	r1, #567	@ 0x237
 800c488:	483e      	ldr	r0, [pc, #248]	@ (800c584 <__mdiff+0x124>)
 800c48a:	f7fe fa4f 	bl	800a92c <__assert_func>
 800c48e:	2301      	movs	r3, #1
 800c490:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c494:	4610      	mov	r0, r2
 800c496:	b003      	add	sp, #12
 800c498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c49c:	bfbc      	itt	lt
 800c49e:	464b      	movlt	r3, r9
 800c4a0:	46a1      	movlt	r9, r4
 800c4a2:	4630      	mov	r0, r6
 800c4a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c4a8:	bfba      	itte	lt
 800c4aa:	461c      	movlt	r4, r3
 800c4ac:	2501      	movlt	r5, #1
 800c4ae:	2500      	movge	r5, #0
 800c4b0:	f7ff fcfe 	bl	800beb0 <_Balloc>
 800c4b4:	4602      	mov	r2, r0
 800c4b6:	b918      	cbnz	r0, 800c4c0 <__mdiff+0x60>
 800c4b8:	4b31      	ldr	r3, [pc, #196]	@ (800c580 <__mdiff+0x120>)
 800c4ba:	f240 2145 	movw	r1, #581	@ 0x245
 800c4be:	e7e3      	b.n	800c488 <__mdiff+0x28>
 800c4c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c4c4:	6926      	ldr	r6, [r4, #16]
 800c4c6:	60c5      	str	r5, [r0, #12]
 800c4c8:	f109 0310 	add.w	r3, r9, #16
 800c4cc:	f109 0514 	add.w	r5, r9, #20
 800c4d0:	f104 0e14 	add.w	lr, r4, #20
 800c4d4:	f100 0b14 	add.w	fp, r0, #20
 800c4d8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c4dc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c4e0:	9301      	str	r3, [sp, #4]
 800c4e2:	46d9      	mov	r9, fp
 800c4e4:	f04f 0c00 	mov.w	ip, #0
 800c4e8:	9b01      	ldr	r3, [sp, #4]
 800c4ea:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c4ee:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c4f2:	9301      	str	r3, [sp, #4]
 800c4f4:	fa1f f38a 	uxth.w	r3, sl
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	b283      	uxth	r3, r0
 800c4fc:	1acb      	subs	r3, r1, r3
 800c4fe:	0c00      	lsrs	r0, r0, #16
 800c500:	4463      	add	r3, ip
 800c502:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c506:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c50a:	b29b      	uxth	r3, r3
 800c50c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c510:	4576      	cmp	r6, lr
 800c512:	f849 3b04 	str.w	r3, [r9], #4
 800c516:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c51a:	d8e5      	bhi.n	800c4e8 <__mdiff+0x88>
 800c51c:	1b33      	subs	r3, r6, r4
 800c51e:	3b15      	subs	r3, #21
 800c520:	f023 0303 	bic.w	r3, r3, #3
 800c524:	3415      	adds	r4, #21
 800c526:	3304      	adds	r3, #4
 800c528:	42a6      	cmp	r6, r4
 800c52a:	bf38      	it	cc
 800c52c:	2304      	movcc	r3, #4
 800c52e:	441d      	add	r5, r3
 800c530:	445b      	add	r3, fp
 800c532:	461e      	mov	r6, r3
 800c534:	462c      	mov	r4, r5
 800c536:	4544      	cmp	r4, r8
 800c538:	d30e      	bcc.n	800c558 <__mdiff+0xf8>
 800c53a:	f108 0103 	add.w	r1, r8, #3
 800c53e:	1b49      	subs	r1, r1, r5
 800c540:	f021 0103 	bic.w	r1, r1, #3
 800c544:	3d03      	subs	r5, #3
 800c546:	45a8      	cmp	r8, r5
 800c548:	bf38      	it	cc
 800c54a:	2100      	movcc	r1, #0
 800c54c:	440b      	add	r3, r1
 800c54e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c552:	b191      	cbz	r1, 800c57a <__mdiff+0x11a>
 800c554:	6117      	str	r7, [r2, #16]
 800c556:	e79d      	b.n	800c494 <__mdiff+0x34>
 800c558:	f854 1b04 	ldr.w	r1, [r4], #4
 800c55c:	46e6      	mov	lr, ip
 800c55e:	0c08      	lsrs	r0, r1, #16
 800c560:	fa1c fc81 	uxtah	ip, ip, r1
 800c564:	4471      	add	r1, lr
 800c566:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c56a:	b289      	uxth	r1, r1
 800c56c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c570:	f846 1b04 	str.w	r1, [r6], #4
 800c574:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c578:	e7dd      	b.n	800c536 <__mdiff+0xd6>
 800c57a:	3f01      	subs	r7, #1
 800c57c:	e7e7      	b.n	800c54e <__mdiff+0xee>
 800c57e:	bf00      	nop
 800c580:	0800d869 	.word	0x0800d869
 800c584:	0800d8da 	.word	0x0800d8da

0800c588 <__ulp>:
 800c588:	b082      	sub	sp, #8
 800c58a:	ed8d 0b00 	vstr	d0, [sp]
 800c58e:	9a01      	ldr	r2, [sp, #4]
 800c590:	4b0f      	ldr	r3, [pc, #60]	@ (800c5d0 <__ulp+0x48>)
 800c592:	4013      	ands	r3, r2
 800c594:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c598:	2b00      	cmp	r3, #0
 800c59a:	dc08      	bgt.n	800c5ae <__ulp+0x26>
 800c59c:	425b      	negs	r3, r3
 800c59e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c5a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c5a6:	da04      	bge.n	800c5b2 <__ulp+0x2a>
 800c5a8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c5ac:	4113      	asrs	r3, r2
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	e008      	b.n	800c5c4 <__ulp+0x3c>
 800c5b2:	f1a2 0314 	sub.w	r3, r2, #20
 800c5b6:	2b1e      	cmp	r3, #30
 800c5b8:	bfda      	itte	le
 800c5ba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c5be:	40da      	lsrle	r2, r3
 800c5c0:	2201      	movgt	r2, #1
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	4619      	mov	r1, r3
 800c5c6:	4610      	mov	r0, r2
 800c5c8:	ec41 0b10 	vmov	d0, r0, r1
 800c5cc:	b002      	add	sp, #8
 800c5ce:	4770      	bx	lr
 800c5d0:	7ff00000 	.word	0x7ff00000

0800c5d4 <__b2d>:
 800c5d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5d8:	6906      	ldr	r6, [r0, #16]
 800c5da:	f100 0814 	add.w	r8, r0, #20
 800c5de:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c5e2:	1f37      	subs	r7, r6, #4
 800c5e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c5e8:	4610      	mov	r0, r2
 800c5ea:	f7ff fd53 	bl	800c094 <__hi0bits>
 800c5ee:	f1c0 0320 	rsb	r3, r0, #32
 800c5f2:	280a      	cmp	r0, #10
 800c5f4:	600b      	str	r3, [r1, #0]
 800c5f6:	491b      	ldr	r1, [pc, #108]	@ (800c664 <__b2d+0x90>)
 800c5f8:	dc15      	bgt.n	800c626 <__b2d+0x52>
 800c5fa:	f1c0 0c0b 	rsb	ip, r0, #11
 800c5fe:	fa22 f30c 	lsr.w	r3, r2, ip
 800c602:	45b8      	cmp	r8, r7
 800c604:	ea43 0501 	orr.w	r5, r3, r1
 800c608:	bf34      	ite	cc
 800c60a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c60e:	2300      	movcs	r3, #0
 800c610:	3015      	adds	r0, #21
 800c612:	fa02 f000 	lsl.w	r0, r2, r0
 800c616:	fa23 f30c 	lsr.w	r3, r3, ip
 800c61a:	4303      	orrs	r3, r0
 800c61c:	461c      	mov	r4, r3
 800c61e:	ec45 4b10 	vmov	d0, r4, r5
 800c622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c626:	45b8      	cmp	r8, r7
 800c628:	bf3a      	itte	cc
 800c62a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c62e:	f1a6 0708 	subcc.w	r7, r6, #8
 800c632:	2300      	movcs	r3, #0
 800c634:	380b      	subs	r0, #11
 800c636:	d012      	beq.n	800c65e <__b2d+0x8a>
 800c638:	f1c0 0120 	rsb	r1, r0, #32
 800c63c:	fa23 f401 	lsr.w	r4, r3, r1
 800c640:	4082      	lsls	r2, r0
 800c642:	4322      	orrs	r2, r4
 800c644:	4547      	cmp	r7, r8
 800c646:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c64a:	bf8c      	ite	hi
 800c64c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c650:	2200      	movls	r2, #0
 800c652:	4083      	lsls	r3, r0
 800c654:	40ca      	lsrs	r2, r1
 800c656:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c65a:	4313      	orrs	r3, r2
 800c65c:	e7de      	b.n	800c61c <__b2d+0x48>
 800c65e:	ea42 0501 	orr.w	r5, r2, r1
 800c662:	e7db      	b.n	800c61c <__b2d+0x48>
 800c664:	3ff00000 	.word	0x3ff00000

0800c668 <__d2b>:
 800c668:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c66c:	460f      	mov	r7, r1
 800c66e:	2101      	movs	r1, #1
 800c670:	ec59 8b10 	vmov	r8, r9, d0
 800c674:	4616      	mov	r6, r2
 800c676:	f7ff fc1b 	bl	800beb0 <_Balloc>
 800c67a:	4604      	mov	r4, r0
 800c67c:	b930      	cbnz	r0, 800c68c <__d2b+0x24>
 800c67e:	4602      	mov	r2, r0
 800c680:	4b23      	ldr	r3, [pc, #140]	@ (800c710 <__d2b+0xa8>)
 800c682:	4824      	ldr	r0, [pc, #144]	@ (800c714 <__d2b+0xac>)
 800c684:	f240 310f 	movw	r1, #783	@ 0x30f
 800c688:	f7fe f950 	bl	800a92c <__assert_func>
 800c68c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c690:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c694:	b10d      	cbz	r5, 800c69a <__d2b+0x32>
 800c696:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c69a:	9301      	str	r3, [sp, #4]
 800c69c:	f1b8 0300 	subs.w	r3, r8, #0
 800c6a0:	d023      	beq.n	800c6ea <__d2b+0x82>
 800c6a2:	4668      	mov	r0, sp
 800c6a4:	9300      	str	r3, [sp, #0]
 800c6a6:	f7ff fd14 	bl	800c0d2 <__lo0bits>
 800c6aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c6ae:	b1d0      	cbz	r0, 800c6e6 <__d2b+0x7e>
 800c6b0:	f1c0 0320 	rsb	r3, r0, #32
 800c6b4:	fa02 f303 	lsl.w	r3, r2, r3
 800c6b8:	430b      	orrs	r3, r1
 800c6ba:	40c2      	lsrs	r2, r0
 800c6bc:	6163      	str	r3, [r4, #20]
 800c6be:	9201      	str	r2, [sp, #4]
 800c6c0:	9b01      	ldr	r3, [sp, #4]
 800c6c2:	61a3      	str	r3, [r4, #24]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	bf0c      	ite	eq
 800c6c8:	2201      	moveq	r2, #1
 800c6ca:	2202      	movne	r2, #2
 800c6cc:	6122      	str	r2, [r4, #16]
 800c6ce:	b1a5      	cbz	r5, 800c6fa <__d2b+0x92>
 800c6d0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c6d4:	4405      	add	r5, r0
 800c6d6:	603d      	str	r5, [r7, #0]
 800c6d8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c6dc:	6030      	str	r0, [r6, #0]
 800c6de:	4620      	mov	r0, r4
 800c6e0:	b003      	add	sp, #12
 800c6e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6e6:	6161      	str	r1, [r4, #20]
 800c6e8:	e7ea      	b.n	800c6c0 <__d2b+0x58>
 800c6ea:	a801      	add	r0, sp, #4
 800c6ec:	f7ff fcf1 	bl	800c0d2 <__lo0bits>
 800c6f0:	9b01      	ldr	r3, [sp, #4]
 800c6f2:	6163      	str	r3, [r4, #20]
 800c6f4:	3020      	adds	r0, #32
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	e7e8      	b.n	800c6cc <__d2b+0x64>
 800c6fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c6fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c702:	6038      	str	r0, [r7, #0]
 800c704:	6918      	ldr	r0, [r3, #16]
 800c706:	f7ff fcc5 	bl	800c094 <__hi0bits>
 800c70a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c70e:	e7e5      	b.n	800c6dc <__d2b+0x74>
 800c710:	0800d869 	.word	0x0800d869
 800c714:	0800d8da 	.word	0x0800d8da

0800c718 <__ratio>:
 800c718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c71c:	b085      	sub	sp, #20
 800c71e:	e9cd 1000 	strd	r1, r0, [sp]
 800c722:	a902      	add	r1, sp, #8
 800c724:	f7ff ff56 	bl	800c5d4 <__b2d>
 800c728:	9800      	ldr	r0, [sp, #0]
 800c72a:	a903      	add	r1, sp, #12
 800c72c:	ec55 4b10 	vmov	r4, r5, d0
 800c730:	f7ff ff50 	bl	800c5d4 <__b2d>
 800c734:	9b01      	ldr	r3, [sp, #4]
 800c736:	6919      	ldr	r1, [r3, #16]
 800c738:	9b00      	ldr	r3, [sp, #0]
 800c73a:	691b      	ldr	r3, [r3, #16]
 800c73c:	1ac9      	subs	r1, r1, r3
 800c73e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c742:	1a9b      	subs	r3, r3, r2
 800c744:	ec5b ab10 	vmov	sl, fp, d0
 800c748:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	bfce      	itee	gt
 800c750:	462a      	movgt	r2, r5
 800c752:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c756:	465a      	movle	r2, fp
 800c758:	462f      	mov	r7, r5
 800c75a:	46d9      	mov	r9, fp
 800c75c:	bfcc      	ite	gt
 800c75e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c762:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c766:	464b      	mov	r3, r9
 800c768:	4652      	mov	r2, sl
 800c76a:	4620      	mov	r0, r4
 800c76c:	4639      	mov	r1, r7
 800c76e:	f7f4 f885 	bl	800087c <__aeabi_ddiv>
 800c772:	ec41 0b10 	vmov	d0, r0, r1
 800c776:	b005      	add	sp, #20
 800c778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c77c <__copybits>:
 800c77c:	3901      	subs	r1, #1
 800c77e:	b570      	push	{r4, r5, r6, lr}
 800c780:	1149      	asrs	r1, r1, #5
 800c782:	6914      	ldr	r4, [r2, #16]
 800c784:	3101      	adds	r1, #1
 800c786:	f102 0314 	add.w	r3, r2, #20
 800c78a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c78e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c792:	1f05      	subs	r5, r0, #4
 800c794:	42a3      	cmp	r3, r4
 800c796:	d30c      	bcc.n	800c7b2 <__copybits+0x36>
 800c798:	1aa3      	subs	r3, r4, r2
 800c79a:	3b11      	subs	r3, #17
 800c79c:	f023 0303 	bic.w	r3, r3, #3
 800c7a0:	3211      	adds	r2, #17
 800c7a2:	42a2      	cmp	r2, r4
 800c7a4:	bf88      	it	hi
 800c7a6:	2300      	movhi	r3, #0
 800c7a8:	4418      	add	r0, r3
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	4288      	cmp	r0, r1
 800c7ae:	d305      	bcc.n	800c7bc <__copybits+0x40>
 800c7b0:	bd70      	pop	{r4, r5, r6, pc}
 800c7b2:	f853 6b04 	ldr.w	r6, [r3], #4
 800c7b6:	f845 6f04 	str.w	r6, [r5, #4]!
 800c7ba:	e7eb      	b.n	800c794 <__copybits+0x18>
 800c7bc:	f840 3b04 	str.w	r3, [r0], #4
 800c7c0:	e7f4      	b.n	800c7ac <__copybits+0x30>

0800c7c2 <__any_on>:
 800c7c2:	f100 0214 	add.w	r2, r0, #20
 800c7c6:	6900      	ldr	r0, [r0, #16]
 800c7c8:	114b      	asrs	r3, r1, #5
 800c7ca:	4298      	cmp	r0, r3
 800c7cc:	b510      	push	{r4, lr}
 800c7ce:	db11      	blt.n	800c7f4 <__any_on+0x32>
 800c7d0:	dd0a      	ble.n	800c7e8 <__any_on+0x26>
 800c7d2:	f011 011f 	ands.w	r1, r1, #31
 800c7d6:	d007      	beq.n	800c7e8 <__any_on+0x26>
 800c7d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c7dc:	fa24 f001 	lsr.w	r0, r4, r1
 800c7e0:	fa00 f101 	lsl.w	r1, r0, r1
 800c7e4:	428c      	cmp	r4, r1
 800c7e6:	d10b      	bne.n	800c800 <__any_on+0x3e>
 800c7e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d803      	bhi.n	800c7f8 <__any_on+0x36>
 800c7f0:	2000      	movs	r0, #0
 800c7f2:	bd10      	pop	{r4, pc}
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	e7f7      	b.n	800c7e8 <__any_on+0x26>
 800c7f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c7fc:	2900      	cmp	r1, #0
 800c7fe:	d0f5      	beq.n	800c7ec <__any_on+0x2a>
 800c800:	2001      	movs	r0, #1
 800c802:	e7f6      	b.n	800c7f2 <__any_on+0x30>

0800c804 <_strtol_l.isra.0>:
 800c804:	2b24      	cmp	r3, #36	@ 0x24
 800c806:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c80a:	4686      	mov	lr, r0
 800c80c:	4690      	mov	r8, r2
 800c80e:	d801      	bhi.n	800c814 <_strtol_l.isra.0+0x10>
 800c810:	2b01      	cmp	r3, #1
 800c812:	d106      	bne.n	800c822 <_strtol_l.isra.0+0x1e>
 800c814:	f7fe f840 	bl	800a898 <__errno>
 800c818:	2316      	movs	r3, #22
 800c81a:	6003      	str	r3, [r0, #0]
 800c81c:	2000      	movs	r0, #0
 800c81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c822:	4834      	ldr	r0, [pc, #208]	@ (800c8f4 <_strtol_l.isra.0+0xf0>)
 800c824:	460d      	mov	r5, r1
 800c826:	462a      	mov	r2, r5
 800c828:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c82c:	5d06      	ldrb	r6, [r0, r4]
 800c82e:	f016 0608 	ands.w	r6, r6, #8
 800c832:	d1f8      	bne.n	800c826 <_strtol_l.isra.0+0x22>
 800c834:	2c2d      	cmp	r4, #45	@ 0x2d
 800c836:	d110      	bne.n	800c85a <_strtol_l.isra.0+0x56>
 800c838:	782c      	ldrb	r4, [r5, #0]
 800c83a:	2601      	movs	r6, #1
 800c83c:	1c95      	adds	r5, r2, #2
 800c83e:	f033 0210 	bics.w	r2, r3, #16
 800c842:	d115      	bne.n	800c870 <_strtol_l.isra.0+0x6c>
 800c844:	2c30      	cmp	r4, #48	@ 0x30
 800c846:	d10d      	bne.n	800c864 <_strtol_l.isra.0+0x60>
 800c848:	782a      	ldrb	r2, [r5, #0]
 800c84a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c84e:	2a58      	cmp	r2, #88	@ 0x58
 800c850:	d108      	bne.n	800c864 <_strtol_l.isra.0+0x60>
 800c852:	786c      	ldrb	r4, [r5, #1]
 800c854:	3502      	adds	r5, #2
 800c856:	2310      	movs	r3, #16
 800c858:	e00a      	b.n	800c870 <_strtol_l.isra.0+0x6c>
 800c85a:	2c2b      	cmp	r4, #43	@ 0x2b
 800c85c:	bf04      	itt	eq
 800c85e:	782c      	ldrbeq	r4, [r5, #0]
 800c860:	1c95      	addeq	r5, r2, #2
 800c862:	e7ec      	b.n	800c83e <_strtol_l.isra.0+0x3a>
 800c864:	2b00      	cmp	r3, #0
 800c866:	d1f6      	bne.n	800c856 <_strtol_l.isra.0+0x52>
 800c868:	2c30      	cmp	r4, #48	@ 0x30
 800c86a:	bf14      	ite	ne
 800c86c:	230a      	movne	r3, #10
 800c86e:	2308      	moveq	r3, #8
 800c870:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c874:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c878:	2200      	movs	r2, #0
 800c87a:	fbbc f9f3 	udiv	r9, ip, r3
 800c87e:	4610      	mov	r0, r2
 800c880:	fb03 ca19 	mls	sl, r3, r9, ip
 800c884:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c888:	2f09      	cmp	r7, #9
 800c88a:	d80f      	bhi.n	800c8ac <_strtol_l.isra.0+0xa8>
 800c88c:	463c      	mov	r4, r7
 800c88e:	42a3      	cmp	r3, r4
 800c890:	dd1b      	ble.n	800c8ca <_strtol_l.isra.0+0xc6>
 800c892:	1c57      	adds	r7, r2, #1
 800c894:	d007      	beq.n	800c8a6 <_strtol_l.isra.0+0xa2>
 800c896:	4581      	cmp	r9, r0
 800c898:	d314      	bcc.n	800c8c4 <_strtol_l.isra.0+0xc0>
 800c89a:	d101      	bne.n	800c8a0 <_strtol_l.isra.0+0x9c>
 800c89c:	45a2      	cmp	sl, r4
 800c89e:	db11      	blt.n	800c8c4 <_strtol_l.isra.0+0xc0>
 800c8a0:	fb00 4003 	mla	r0, r0, r3, r4
 800c8a4:	2201      	movs	r2, #1
 800c8a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c8aa:	e7eb      	b.n	800c884 <_strtol_l.isra.0+0x80>
 800c8ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c8b0:	2f19      	cmp	r7, #25
 800c8b2:	d801      	bhi.n	800c8b8 <_strtol_l.isra.0+0xb4>
 800c8b4:	3c37      	subs	r4, #55	@ 0x37
 800c8b6:	e7ea      	b.n	800c88e <_strtol_l.isra.0+0x8a>
 800c8b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c8bc:	2f19      	cmp	r7, #25
 800c8be:	d804      	bhi.n	800c8ca <_strtol_l.isra.0+0xc6>
 800c8c0:	3c57      	subs	r4, #87	@ 0x57
 800c8c2:	e7e4      	b.n	800c88e <_strtol_l.isra.0+0x8a>
 800c8c4:	f04f 32ff 	mov.w	r2, #4294967295
 800c8c8:	e7ed      	b.n	800c8a6 <_strtol_l.isra.0+0xa2>
 800c8ca:	1c53      	adds	r3, r2, #1
 800c8cc:	d108      	bne.n	800c8e0 <_strtol_l.isra.0+0xdc>
 800c8ce:	2322      	movs	r3, #34	@ 0x22
 800c8d0:	f8ce 3000 	str.w	r3, [lr]
 800c8d4:	4660      	mov	r0, ip
 800c8d6:	f1b8 0f00 	cmp.w	r8, #0
 800c8da:	d0a0      	beq.n	800c81e <_strtol_l.isra.0+0x1a>
 800c8dc:	1e69      	subs	r1, r5, #1
 800c8de:	e006      	b.n	800c8ee <_strtol_l.isra.0+0xea>
 800c8e0:	b106      	cbz	r6, 800c8e4 <_strtol_l.isra.0+0xe0>
 800c8e2:	4240      	negs	r0, r0
 800c8e4:	f1b8 0f00 	cmp.w	r8, #0
 800c8e8:	d099      	beq.n	800c81e <_strtol_l.isra.0+0x1a>
 800c8ea:	2a00      	cmp	r2, #0
 800c8ec:	d1f6      	bne.n	800c8dc <_strtol_l.isra.0+0xd8>
 800c8ee:	f8c8 1000 	str.w	r1, [r8]
 800c8f2:	e794      	b.n	800c81e <_strtol_l.isra.0+0x1a>
 800c8f4:	0800da99 	.word	0x0800da99

0800c8f8 <_strtol_r>:
 800c8f8:	f7ff bf84 	b.w	800c804 <_strtol_l.isra.0>

0800c8fc <__ascii_wctomb>:
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	4608      	mov	r0, r1
 800c900:	b141      	cbz	r1, 800c914 <__ascii_wctomb+0x18>
 800c902:	2aff      	cmp	r2, #255	@ 0xff
 800c904:	d904      	bls.n	800c910 <__ascii_wctomb+0x14>
 800c906:	228a      	movs	r2, #138	@ 0x8a
 800c908:	601a      	str	r2, [r3, #0]
 800c90a:	f04f 30ff 	mov.w	r0, #4294967295
 800c90e:	4770      	bx	lr
 800c910:	700a      	strb	r2, [r1, #0]
 800c912:	2001      	movs	r0, #1
 800c914:	4770      	bx	lr

0800c916 <__ssputs_r>:
 800c916:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c91a:	688e      	ldr	r6, [r1, #8]
 800c91c:	461f      	mov	r7, r3
 800c91e:	42be      	cmp	r6, r7
 800c920:	680b      	ldr	r3, [r1, #0]
 800c922:	4682      	mov	sl, r0
 800c924:	460c      	mov	r4, r1
 800c926:	4690      	mov	r8, r2
 800c928:	d82d      	bhi.n	800c986 <__ssputs_r+0x70>
 800c92a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c92e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c932:	d026      	beq.n	800c982 <__ssputs_r+0x6c>
 800c934:	6965      	ldr	r5, [r4, #20]
 800c936:	6909      	ldr	r1, [r1, #16]
 800c938:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c93c:	eba3 0901 	sub.w	r9, r3, r1
 800c940:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c944:	1c7b      	adds	r3, r7, #1
 800c946:	444b      	add	r3, r9
 800c948:	106d      	asrs	r5, r5, #1
 800c94a:	429d      	cmp	r5, r3
 800c94c:	bf38      	it	cc
 800c94e:	461d      	movcc	r5, r3
 800c950:	0553      	lsls	r3, r2, #21
 800c952:	d527      	bpl.n	800c9a4 <__ssputs_r+0x8e>
 800c954:	4629      	mov	r1, r5
 800c956:	f7ff fa0d 	bl	800bd74 <_malloc_r>
 800c95a:	4606      	mov	r6, r0
 800c95c:	b360      	cbz	r0, 800c9b8 <__ssputs_r+0xa2>
 800c95e:	6921      	ldr	r1, [r4, #16]
 800c960:	464a      	mov	r2, r9
 800c962:	f7fd ffc6 	bl	800a8f2 <memcpy>
 800c966:	89a3      	ldrh	r3, [r4, #12]
 800c968:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c96c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c970:	81a3      	strh	r3, [r4, #12]
 800c972:	6126      	str	r6, [r4, #16]
 800c974:	6165      	str	r5, [r4, #20]
 800c976:	444e      	add	r6, r9
 800c978:	eba5 0509 	sub.w	r5, r5, r9
 800c97c:	6026      	str	r6, [r4, #0]
 800c97e:	60a5      	str	r5, [r4, #8]
 800c980:	463e      	mov	r6, r7
 800c982:	42be      	cmp	r6, r7
 800c984:	d900      	bls.n	800c988 <__ssputs_r+0x72>
 800c986:	463e      	mov	r6, r7
 800c988:	6820      	ldr	r0, [r4, #0]
 800c98a:	4632      	mov	r2, r6
 800c98c:	4641      	mov	r1, r8
 800c98e:	f000 f9d7 	bl	800cd40 <memmove>
 800c992:	68a3      	ldr	r3, [r4, #8]
 800c994:	1b9b      	subs	r3, r3, r6
 800c996:	60a3      	str	r3, [r4, #8]
 800c998:	6823      	ldr	r3, [r4, #0]
 800c99a:	4433      	add	r3, r6
 800c99c:	6023      	str	r3, [r4, #0]
 800c99e:	2000      	movs	r0, #0
 800c9a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9a4:	462a      	mov	r2, r5
 800c9a6:	f000 fa10 	bl	800cdca <_realloc_r>
 800c9aa:	4606      	mov	r6, r0
 800c9ac:	2800      	cmp	r0, #0
 800c9ae:	d1e0      	bne.n	800c972 <__ssputs_r+0x5c>
 800c9b0:	6921      	ldr	r1, [r4, #16]
 800c9b2:	4650      	mov	r0, sl
 800c9b4:	f7fe fe30 	bl	800b618 <_free_r>
 800c9b8:	230c      	movs	r3, #12
 800c9ba:	f8ca 3000 	str.w	r3, [sl]
 800c9be:	89a3      	ldrh	r3, [r4, #12]
 800c9c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9c4:	81a3      	strh	r3, [r4, #12]
 800c9c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c9ca:	e7e9      	b.n	800c9a0 <__ssputs_r+0x8a>

0800c9cc <_svfiprintf_r>:
 800c9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9d0:	4698      	mov	r8, r3
 800c9d2:	898b      	ldrh	r3, [r1, #12]
 800c9d4:	061b      	lsls	r3, r3, #24
 800c9d6:	b09d      	sub	sp, #116	@ 0x74
 800c9d8:	4607      	mov	r7, r0
 800c9da:	460d      	mov	r5, r1
 800c9dc:	4614      	mov	r4, r2
 800c9de:	d510      	bpl.n	800ca02 <_svfiprintf_r+0x36>
 800c9e0:	690b      	ldr	r3, [r1, #16]
 800c9e2:	b973      	cbnz	r3, 800ca02 <_svfiprintf_r+0x36>
 800c9e4:	2140      	movs	r1, #64	@ 0x40
 800c9e6:	f7ff f9c5 	bl	800bd74 <_malloc_r>
 800c9ea:	6028      	str	r0, [r5, #0]
 800c9ec:	6128      	str	r0, [r5, #16]
 800c9ee:	b930      	cbnz	r0, 800c9fe <_svfiprintf_r+0x32>
 800c9f0:	230c      	movs	r3, #12
 800c9f2:	603b      	str	r3, [r7, #0]
 800c9f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9f8:	b01d      	add	sp, #116	@ 0x74
 800c9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9fe:	2340      	movs	r3, #64	@ 0x40
 800ca00:	616b      	str	r3, [r5, #20]
 800ca02:	2300      	movs	r3, #0
 800ca04:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca06:	2320      	movs	r3, #32
 800ca08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ca0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca10:	2330      	movs	r3, #48	@ 0x30
 800ca12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cbb0 <_svfiprintf_r+0x1e4>
 800ca16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca1a:	f04f 0901 	mov.w	r9, #1
 800ca1e:	4623      	mov	r3, r4
 800ca20:	469a      	mov	sl, r3
 800ca22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca26:	b10a      	cbz	r2, 800ca2c <_svfiprintf_r+0x60>
 800ca28:	2a25      	cmp	r2, #37	@ 0x25
 800ca2a:	d1f9      	bne.n	800ca20 <_svfiprintf_r+0x54>
 800ca2c:	ebba 0b04 	subs.w	fp, sl, r4
 800ca30:	d00b      	beq.n	800ca4a <_svfiprintf_r+0x7e>
 800ca32:	465b      	mov	r3, fp
 800ca34:	4622      	mov	r2, r4
 800ca36:	4629      	mov	r1, r5
 800ca38:	4638      	mov	r0, r7
 800ca3a:	f7ff ff6c 	bl	800c916 <__ssputs_r>
 800ca3e:	3001      	adds	r0, #1
 800ca40:	f000 80a7 	beq.w	800cb92 <_svfiprintf_r+0x1c6>
 800ca44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca46:	445a      	add	r2, fp
 800ca48:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca4a:	f89a 3000 	ldrb.w	r3, [sl]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	f000 809f 	beq.w	800cb92 <_svfiprintf_r+0x1c6>
 800ca54:	2300      	movs	r3, #0
 800ca56:	f04f 32ff 	mov.w	r2, #4294967295
 800ca5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca5e:	f10a 0a01 	add.w	sl, sl, #1
 800ca62:	9304      	str	r3, [sp, #16]
 800ca64:	9307      	str	r3, [sp, #28]
 800ca66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca6a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca6c:	4654      	mov	r4, sl
 800ca6e:	2205      	movs	r2, #5
 800ca70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca74:	484e      	ldr	r0, [pc, #312]	@ (800cbb0 <_svfiprintf_r+0x1e4>)
 800ca76:	f7f3 fbc3 	bl	8000200 <memchr>
 800ca7a:	9a04      	ldr	r2, [sp, #16]
 800ca7c:	b9d8      	cbnz	r0, 800cab6 <_svfiprintf_r+0xea>
 800ca7e:	06d0      	lsls	r0, r2, #27
 800ca80:	bf44      	itt	mi
 800ca82:	2320      	movmi	r3, #32
 800ca84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca88:	0711      	lsls	r1, r2, #28
 800ca8a:	bf44      	itt	mi
 800ca8c:	232b      	movmi	r3, #43	@ 0x2b
 800ca8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca92:	f89a 3000 	ldrb.w	r3, [sl]
 800ca96:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca98:	d015      	beq.n	800cac6 <_svfiprintf_r+0xfa>
 800ca9a:	9a07      	ldr	r2, [sp, #28]
 800ca9c:	4654      	mov	r4, sl
 800ca9e:	2000      	movs	r0, #0
 800caa0:	f04f 0c0a 	mov.w	ip, #10
 800caa4:	4621      	mov	r1, r4
 800caa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800caaa:	3b30      	subs	r3, #48	@ 0x30
 800caac:	2b09      	cmp	r3, #9
 800caae:	d94b      	bls.n	800cb48 <_svfiprintf_r+0x17c>
 800cab0:	b1b0      	cbz	r0, 800cae0 <_svfiprintf_r+0x114>
 800cab2:	9207      	str	r2, [sp, #28]
 800cab4:	e014      	b.n	800cae0 <_svfiprintf_r+0x114>
 800cab6:	eba0 0308 	sub.w	r3, r0, r8
 800caba:	fa09 f303 	lsl.w	r3, r9, r3
 800cabe:	4313      	orrs	r3, r2
 800cac0:	9304      	str	r3, [sp, #16]
 800cac2:	46a2      	mov	sl, r4
 800cac4:	e7d2      	b.n	800ca6c <_svfiprintf_r+0xa0>
 800cac6:	9b03      	ldr	r3, [sp, #12]
 800cac8:	1d19      	adds	r1, r3, #4
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	9103      	str	r1, [sp, #12]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	bfbb      	ittet	lt
 800cad2:	425b      	neglt	r3, r3
 800cad4:	f042 0202 	orrlt.w	r2, r2, #2
 800cad8:	9307      	strge	r3, [sp, #28]
 800cada:	9307      	strlt	r3, [sp, #28]
 800cadc:	bfb8      	it	lt
 800cade:	9204      	strlt	r2, [sp, #16]
 800cae0:	7823      	ldrb	r3, [r4, #0]
 800cae2:	2b2e      	cmp	r3, #46	@ 0x2e
 800cae4:	d10a      	bne.n	800cafc <_svfiprintf_r+0x130>
 800cae6:	7863      	ldrb	r3, [r4, #1]
 800cae8:	2b2a      	cmp	r3, #42	@ 0x2a
 800caea:	d132      	bne.n	800cb52 <_svfiprintf_r+0x186>
 800caec:	9b03      	ldr	r3, [sp, #12]
 800caee:	1d1a      	adds	r2, r3, #4
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	9203      	str	r2, [sp, #12]
 800caf4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800caf8:	3402      	adds	r4, #2
 800cafa:	9305      	str	r3, [sp, #20]
 800cafc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cbc0 <_svfiprintf_r+0x1f4>
 800cb00:	7821      	ldrb	r1, [r4, #0]
 800cb02:	2203      	movs	r2, #3
 800cb04:	4650      	mov	r0, sl
 800cb06:	f7f3 fb7b 	bl	8000200 <memchr>
 800cb0a:	b138      	cbz	r0, 800cb1c <_svfiprintf_r+0x150>
 800cb0c:	9b04      	ldr	r3, [sp, #16]
 800cb0e:	eba0 000a 	sub.w	r0, r0, sl
 800cb12:	2240      	movs	r2, #64	@ 0x40
 800cb14:	4082      	lsls	r2, r0
 800cb16:	4313      	orrs	r3, r2
 800cb18:	3401      	adds	r4, #1
 800cb1a:	9304      	str	r3, [sp, #16]
 800cb1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb20:	4824      	ldr	r0, [pc, #144]	@ (800cbb4 <_svfiprintf_r+0x1e8>)
 800cb22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb26:	2206      	movs	r2, #6
 800cb28:	f7f3 fb6a 	bl	8000200 <memchr>
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	d036      	beq.n	800cb9e <_svfiprintf_r+0x1d2>
 800cb30:	4b21      	ldr	r3, [pc, #132]	@ (800cbb8 <_svfiprintf_r+0x1ec>)
 800cb32:	bb1b      	cbnz	r3, 800cb7c <_svfiprintf_r+0x1b0>
 800cb34:	9b03      	ldr	r3, [sp, #12]
 800cb36:	3307      	adds	r3, #7
 800cb38:	f023 0307 	bic.w	r3, r3, #7
 800cb3c:	3308      	adds	r3, #8
 800cb3e:	9303      	str	r3, [sp, #12]
 800cb40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb42:	4433      	add	r3, r6
 800cb44:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb46:	e76a      	b.n	800ca1e <_svfiprintf_r+0x52>
 800cb48:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb4c:	460c      	mov	r4, r1
 800cb4e:	2001      	movs	r0, #1
 800cb50:	e7a8      	b.n	800caa4 <_svfiprintf_r+0xd8>
 800cb52:	2300      	movs	r3, #0
 800cb54:	3401      	adds	r4, #1
 800cb56:	9305      	str	r3, [sp, #20]
 800cb58:	4619      	mov	r1, r3
 800cb5a:	f04f 0c0a 	mov.w	ip, #10
 800cb5e:	4620      	mov	r0, r4
 800cb60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb64:	3a30      	subs	r2, #48	@ 0x30
 800cb66:	2a09      	cmp	r2, #9
 800cb68:	d903      	bls.n	800cb72 <_svfiprintf_r+0x1a6>
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d0c6      	beq.n	800cafc <_svfiprintf_r+0x130>
 800cb6e:	9105      	str	r1, [sp, #20]
 800cb70:	e7c4      	b.n	800cafc <_svfiprintf_r+0x130>
 800cb72:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb76:	4604      	mov	r4, r0
 800cb78:	2301      	movs	r3, #1
 800cb7a:	e7f0      	b.n	800cb5e <_svfiprintf_r+0x192>
 800cb7c:	ab03      	add	r3, sp, #12
 800cb7e:	9300      	str	r3, [sp, #0]
 800cb80:	462a      	mov	r2, r5
 800cb82:	4b0e      	ldr	r3, [pc, #56]	@ (800cbbc <_svfiprintf_r+0x1f0>)
 800cb84:	a904      	add	r1, sp, #16
 800cb86:	4638      	mov	r0, r7
 800cb88:	f7fc fec8 	bl	800991c <_printf_float>
 800cb8c:	1c42      	adds	r2, r0, #1
 800cb8e:	4606      	mov	r6, r0
 800cb90:	d1d6      	bne.n	800cb40 <_svfiprintf_r+0x174>
 800cb92:	89ab      	ldrh	r3, [r5, #12]
 800cb94:	065b      	lsls	r3, r3, #25
 800cb96:	f53f af2d 	bmi.w	800c9f4 <_svfiprintf_r+0x28>
 800cb9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb9c:	e72c      	b.n	800c9f8 <_svfiprintf_r+0x2c>
 800cb9e:	ab03      	add	r3, sp, #12
 800cba0:	9300      	str	r3, [sp, #0]
 800cba2:	462a      	mov	r2, r5
 800cba4:	4b05      	ldr	r3, [pc, #20]	@ (800cbbc <_svfiprintf_r+0x1f0>)
 800cba6:	a904      	add	r1, sp, #16
 800cba8:	4638      	mov	r0, r7
 800cbaa:	f7fd f94f 	bl	8009e4c <_printf_i>
 800cbae:	e7ed      	b.n	800cb8c <_svfiprintf_r+0x1c0>
 800cbb0:	0800d933 	.word	0x0800d933
 800cbb4:	0800d93d 	.word	0x0800d93d
 800cbb8:	0800991d 	.word	0x0800991d
 800cbbc:	0800c917 	.word	0x0800c917
 800cbc0:	0800d939 	.word	0x0800d939

0800cbc4 <__sflush_r>:
 800cbc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cbc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbcc:	0716      	lsls	r6, r2, #28
 800cbce:	4605      	mov	r5, r0
 800cbd0:	460c      	mov	r4, r1
 800cbd2:	d454      	bmi.n	800cc7e <__sflush_r+0xba>
 800cbd4:	684b      	ldr	r3, [r1, #4]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	dc02      	bgt.n	800cbe0 <__sflush_r+0x1c>
 800cbda:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	dd48      	ble.n	800cc72 <__sflush_r+0xae>
 800cbe0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cbe2:	2e00      	cmp	r6, #0
 800cbe4:	d045      	beq.n	800cc72 <__sflush_r+0xae>
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cbec:	682f      	ldr	r7, [r5, #0]
 800cbee:	6a21      	ldr	r1, [r4, #32]
 800cbf0:	602b      	str	r3, [r5, #0]
 800cbf2:	d030      	beq.n	800cc56 <__sflush_r+0x92>
 800cbf4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cbf6:	89a3      	ldrh	r3, [r4, #12]
 800cbf8:	0759      	lsls	r1, r3, #29
 800cbfa:	d505      	bpl.n	800cc08 <__sflush_r+0x44>
 800cbfc:	6863      	ldr	r3, [r4, #4]
 800cbfe:	1ad2      	subs	r2, r2, r3
 800cc00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cc02:	b10b      	cbz	r3, 800cc08 <__sflush_r+0x44>
 800cc04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cc06:	1ad2      	subs	r2, r2, r3
 800cc08:	2300      	movs	r3, #0
 800cc0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cc0c:	6a21      	ldr	r1, [r4, #32]
 800cc0e:	4628      	mov	r0, r5
 800cc10:	47b0      	blx	r6
 800cc12:	1c43      	adds	r3, r0, #1
 800cc14:	89a3      	ldrh	r3, [r4, #12]
 800cc16:	d106      	bne.n	800cc26 <__sflush_r+0x62>
 800cc18:	6829      	ldr	r1, [r5, #0]
 800cc1a:	291d      	cmp	r1, #29
 800cc1c:	d82b      	bhi.n	800cc76 <__sflush_r+0xb2>
 800cc1e:	4a2a      	ldr	r2, [pc, #168]	@ (800ccc8 <__sflush_r+0x104>)
 800cc20:	40ca      	lsrs	r2, r1
 800cc22:	07d6      	lsls	r6, r2, #31
 800cc24:	d527      	bpl.n	800cc76 <__sflush_r+0xb2>
 800cc26:	2200      	movs	r2, #0
 800cc28:	6062      	str	r2, [r4, #4]
 800cc2a:	04d9      	lsls	r1, r3, #19
 800cc2c:	6922      	ldr	r2, [r4, #16]
 800cc2e:	6022      	str	r2, [r4, #0]
 800cc30:	d504      	bpl.n	800cc3c <__sflush_r+0x78>
 800cc32:	1c42      	adds	r2, r0, #1
 800cc34:	d101      	bne.n	800cc3a <__sflush_r+0x76>
 800cc36:	682b      	ldr	r3, [r5, #0]
 800cc38:	b903      	cbnz	r3, 800cc3c <__sflush_r+0x78>
 800cc3a:	6560      	str	r0, [r4, #84]	@ 0x54
 800cc3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cc3e:	602f      	str	r7, [r5, #0]
 800cc40:	b1b9      	cbz	r1, 800cc72 <__sflush_r+0xae>
 800cc42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cc46:	4299      	cmp	r1, r3
 800cc48:	d002      	beq.n	800cc50 <__sflush_r+0x8c>
 800cc4a:	4628      	mov	r0, r5
 800cc4c:	f7fe fce4 	bl	800b618 <_free_r>
 800cc50:	2300      	movs	r3, #0
 800cc52:	6363      	str	r3, [r4, #52]	@ 0x34
 800cc54:	e00d      	b.n	800cc72 <__sflush_r+0xae>
 800cc56:	2301      	movs	r3, #1
 800cc58:	4628      	mov	r0, r5
 800cc5a:	47b0      	blx	r6
 800cc5c:	4602      	mov	r2, r0
 800cc5e:	1c50      	adds	r0, r2, #1
 800cc60:	d1c9      	bne.n	800cbf6 <__sflush_r+0x32>
 800cc62:	682b      	ldr	r3, [r5, #0]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d0c6      	beq.n	800cbf6 <__sflush_r+0x32>
 800cc68:	2b1d      	cmp	r3, #29
 800cc6a:	d001      	beq.n	800cc70 <__sflush_r+0xac>
 800cc6c:	2b16      	cmp	r3, #22
 800cc6e:	d11e      	bne.n	800ccae <__sflush_r+0xea>
 800cc70:	602f      	str	r7, [r5, #0]
 800cc72:	2000      	movs	r0, #0
 800cc74:	e022      	b.n	800ccbc <__sflush_r+0xf8>
 800cc76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc7a:	b21b      	sxth	r3, r3
 800cc7c:	e01b      	b.n	800ccb6 <__sflush_r+0xf2>
 800cc7e:	690f      	ldr	r7, [r1, #16]
 800cc80:	2f00      	cmp	r7, #0
 800cc82:	d0f6      	beq.n	800cc72 <__sflush_r+0xae>
 800cc84:	0793      	lsls	r3, r2, #30
 800cc86:	680e      	ldr	r6, [r1, #0]
 800cc88:	bf08      	it	eq
 800cc8a:	694b      	ldreq	r3, [r1, #20]
 800cc8c:	600f      	str	r7, [r1, #0]
 800cc8e:	bf18      	it	ne
 800cc90:	2300      	movne	r3, #0
 800cc92:	eba6 0807 	sub.w	r8, r6, r7
 800cc96:	608b      	str	r3, [r1, #8]
 800cc98:	f1b8 0f00 	cmp.w	r8, #0
 800cc9c:	dde9      	ble.n	800cc72 <__sflush_r+0xae>
 800cc9e:	6a21      	ldr	r1, [r4, #32]
 800cca0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800cca2:	4643      	mov	r3, r8
 800cca4:	463a      	mov	r2, r7
 800cca6:	4628      	mov	r0, r5
 800cca8:	47b0      	blx	r6
 800ccaa:	2800      	cmp	r0, #0
 800ccac:	dc08      	bgt.n	800ccc0 <__sflush_r+0xfc>
 800ccae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccb6:	81a3      	strh	r3, [r4, #12]
 800ccb8:	f04f 30ff 	mov.w	r0, #4294967295
 800ccbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccc0:	4407      	add	r7, r0
 800ccc2:	eba8 0800 	sub.w	r8, r8, r0
 800ccc6:	e7e7      	b.n	800cc98 <__sflush_r+0xd4>
 800ccc8:	20400001 	.word	0x20400001

0800cccc <_fflush_r>:
 800cccc:	b538      	push	{r3, r4, r5, lr}
 800ccce:	690b      	ldr	r3, [r1, #16]
 800ccd0:	4605      	mov	r5, r0
 800ccd2:	460c      	mov	r4, r1
 800ccd4:	b913      	cbnz	r3, 800ccdc <_fflush_r+0x10>
 800ccd6:	2500      	movs	r5, #0
 800ccd8:	4628      	mov	r0, r5
 800ccda:	bd38      	pop	{r3, r4, r5, pc}
 800ccdc:	b118      	cbz	r0, 800cce6 <_fflush_r+0x1a>
 800ccde:	6a03      	ldr	r3, [r0, #32]
 800cce0:	b90b      	cbnz	r3, 800cce6 <_fflush_r+0x1a>
 800cce2:	f7fd fc6b 	bl	800a5bc <__sinit>
 800cce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d0f3      	beq.n	800ccd6 <_fflush_r+0xa>
 800ccee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ccf0:	07d0      	lsls	r0, r2, #31
 800ccf2:	d404      	bmi.n	800ccfe <_fflush_r+0x32>
 800ccf4:	0599      	lsls	r1, r3, #22
 800ccf6:	d402      	bmi.n	800ccfe <_fflush_r+0x32>
 800ccf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ccfa:	f7fd fdf8 	bl	800a8ee <__retarget_lock_acquire_recursive>
 800ccfe:	4628      	mov	r0, r5
 800cd00:	4621      	mov	r1, r4
 800cd02:	f7ff ff5f 	bl	800cbc4 <__sflush_r>
 800cd06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cd08:	07da      	lsls	r2, r3, #31
 800cd0a:	4605      	mov	r5, r0
 800cd0c:	d4e4      	bmi.n	800ccd8 <_fflush_r+0xc>
 800cd0e:	89a3      	ldrh	r3, [r4, #12]
 800cd10:	059b      	lsls	r3, r3, #22
 800cd12:	d4e1      	bmi.n	800ccd8 <_fflush_r+0xc>
 800cd14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cd16:	f7fd fdeb 	bl	800a8f0 <__retarget_lock_release_recursive>
 800cd1a:	e7dd      	b.n	800ccd8 <_fflush_r+0xc>

0800cd1c <fiprintf>:
 800cd1c:	b40e      	push	{r1, r2, r3}
 800cd1e:	b503      	push	{r0, r1, lr}
 800cd20:	4601      	mov	r1, r0
 800cd22:	ab03      	add	r3, sp, #12
 800cd24:	4805      	ldr	r0, [pc, #20]	@ (800cd3c <fiprintf+0x20>)
 800cd26:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd2a:	6800      	ldr	r0, [r0, #0]
 800cd2c:	9301      	str	r3, [sp, #4]
 800cd2e:	f000 f8a3 	bl	800ce78 <_vfiprintf_r>
 800cd32:	b002      	add	sp, #8
 800cd34:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd38:	b003      	add	sp, #12
 800cd3a:	4770      	bx	lr
 800cd3c:	20000208 	.word	0x20000208

0800cd40 <memmove>:
 800cd40:	4288      	cmp	r0, r1
 800cd42:	b510      	push	{r4, lr}
 800cd44:	eb01 0402 	add.w	r4, r1, r2
 800cd48:	d902      	bls.n	800cd50 <memmove+0x10>
 800cd4a:	4284      	cmp	r4, r0
 800cd4c:	4623      	mov	r3, r4
 800cd4e:	d807      	bhi.n	800cd60 <memmove+0x20>
 800cd50:	1e43      	subs	r3, r0, #1
 800cd52:	42a1      	cmp	r1, r4
 800cd54:	d008      	beq.n	800cd68 <memmove+0x28>
 800cd56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd5e:	e7f8      	b.n	800cd52 <memmove+0x12>
 800cd60:	4402      	add	r2, r0
 800cd62:	4601      	mov	r1, r0
 800cd64:	428a      	cmp	r2, r1
 800cd66:	d100      	bne.n	800cd6a <memmove+0x2a>
 800cd68:	bd10      	pop	{r4, pc}
 800cd6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cd6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cd72:	e7f7      	b.n	800cd64 <memmove+0x24>

0800cd74 <_sbrk_r>:
 800cd74:	b538      	push	{r3, r4, r5, lr}
 800cd76:	4d06      	ldr	r5, [pc, #24]	@ (800cd90 <_sbrk_r+0x1c>)
 800cd78:	2300      	movs	r3, #0
 800cd7a:	4604      	mov	r4, r0
 800cd7c:	4608      	mov	r0, r1
 800cd7e:	602b      	str	r3, [r5, #0]
 800cd80:	f7f6 fbea 	bl	8003558 <_sbrk>
 800cd84:	1c43      	adds	r3, r0, #1
 800cd86:	d102      	bne.n	800cd8e <_sbrk_r+0x1a>
 800cd88:	682b      	ldr	r3, [r5, #0]
 800cd8a:	b103      	cbz	r3, 800cd8e <_sbrk_r+0x1a>
 800cd8c:	6023      	str	r3, [r4, #0]
 800cd8e:	bd38      	pop	{r3, r4, r5, pc}
 800cd90:	200008cc 	.word	0x200008cc

0800cd94 <abort>:
 800cd94:	b508      	push	{r3, lr}
 800cd96:	2006      	movs	r0, #6
 800cd98:	f000 fa42 	bl	800d220 <raise>
 800cd9c:	2001      	movs	r0, #1
 800cd9e:	f7f6 fb63 	bl	8003468 <_exit>

0800cda2 <_calloc_r>:
 800cda2:	b570      	push	{r4, r5, r6, lr}
 800cda4:	fba1 5402 	umull	r5, r4, r1, r2
 800cda8:	b934      	cbnz	r4, 800cdb8 <_calloc_r+0x16>
 800cdaa:	4629      	mov	r1, r5
 800cdac:	f7fe ffe2 	bl	800bd74 <_malloc_r>
 800cdb0:	4606      	mov	r6, r0
 800cdb2:	b928      	cbnz	r0, 800cdc0 <_calloc_r+0x1e>
 800cdb4:	4630      	mov	r0, r6
 800cdb6:	bd70      	pop	{r4, r5, r6, pc}
 800cdb8:	220c      	movs	r2, #12
 800cdba:	6002      	str	r2, [r0, #0]
 800cdbc:	2600      	movs	r6, #0
 800cdbe:	e7f9      	b.n	800cdb4 <_calloc_r+0x12>
 800cdc0:	462a      	mov	r2, r5
 800cdc2:	4621      	mov	r1, r4
 800cdc4:	f7fd fc95 	bl	800a6f2 <memset>
 800cdc8:	e7f4      	b.n	800cdb4 <_calloc_r+0x12>

0800cdca <_realloc_r>:
 800cdca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cdce:	4607      	mov	r7, r0
 800cdd0:	4614      	mov	r4, r2
 800cdd2:	460d      	mov	r5, r1
 800cdd4:	b921      	cbnz	r1, 800cde0 <_realloc_r+0x16>
 800cdd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cdda:	4611      	mov	r1, r2
 800cddc:	f7fe bfca 	b.w	800bd74 <_malloc_r>
 800cde0:	b92a      	cbnz	r2, 800cdee <_realloc_r+0x24>
 800cde2:	f7fe fc19 	bl	800b618 <_free_r>
 800cde6:	4625      	mov	r5, r4
 800cde8:	4628      	mov	r0, r5
 800cdea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdee:	f000 fa33 	bl	800d258 <_malloc_usable_size_r>
 800cdf2:	4284      	cmp	r4, r0
 800cdf4:	4606      	mov	r6, r0
 800cdf6:	d802      	bhi.n	800cdfe <_realloc_r+0x34>
 800cdf8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cdfc:	d8f4      	bhi.n	800cde8 <_realloc_r+0x1e>
 800cdfe:	4621      	mov	r1, r4
 800ce00:	4638      	mov	r0, r7
 800ce02:	f7fe ffb7 	bl	800bd74 <_malloc_r>
 800ce06:	4680      	mov	r8, r0
 800ce08:	b908      	cbnz	r0, 800ce0e <_realloc_r+0x44>
 800ce0a:	4645      	mov	r5, r8
 800ce0c:	e7ec      	b.n	800cde8 <_realloc_r+0x1e>
 800ce0e:	42b4      	cmp	r4, r6
 800ce10:	4622      	mov	r2, r4
 800ce12:	4629      	mov	r1, r5
 800ce14:	bf28      	it	cs
 800ce16:	4632      	movcs	r2, r6
 800ce18:	f7fd fd6b 	bl	800a8f2 <memcpy>
 800ce1c:	4629      	mov	r1, r5
 800ce1e:	4638      	mov	r0, r7
 800ce20:	f7fe fbfa 	bl	800b618 <_free_r>
 800ce24:	e7f1      	b.n	800ce0a <_realloc_r+0x40>

0800ce26 <__sfputc_r>:
 800ce26:	6893      	ldr	r3, [r2, #8]
 800ce28:	3b01      	subs	r3, #1
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	b410      	push	{r4}
 800ce2e:	6093      	str	r3, [r2, #8]
 800ce30:	da08      	bge.n	800ce44 <__sfputc_r+0x1e>
 800ce32:	6994      	ldr	r4, [r2, #24]
 800ce34:	42a3      	cmp	r3, r4
 800ce36:	db01      	blt.n	800ce3c <__sfputc_r+0x16>
 800ce38:	290a      	cmp	r1, #10
 800ce3a:	d103      	bne.n	800ce44 <__sfputc_r+0x1e>
 800ce3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce40:	f000 b932 	b.w	800d0a8 <__swbuf_r>
 800ce44:	6813      	ldr	r3, [r2, #0]
 800ce46:	1c58      	adds	r0, r3, #1
 800ce48:	6010      	str	r0, [r2, #0]
 800ce4a:	7019      	strb	r1, [r3, #0]
 800ce4c:	4608      	mov	r0, r1
 800ce4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce52:	4770      	bx	lr

0800ce54 <__sfputs_r>:
 800ce54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce56:	4606      	mov	r6, r0
 800ce58:	460f      	mov	r7, r1
 800ce5a:	4614      	mov	r4, r2
 800ce5c:	18d5      	adds	r5, r2, r3
 800ce5e:	42ac      	cmp	r4, r5
 800ce60:	d101      	bne.n	800ce66 <__sfputs_r+0x12>
 800ce62:	2000      	movs	r0, #0
 800ce64:	e007      	b.n	800ce76 <__sfputs_r+0x22>
 800ce66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce6a:	463a      	mov	r2, r7
 800ce6c:	4630      	mov	r0, r6
 800ce6e:	f7ff ffda 	bl	800ce26 <__sfputc_r>
 800ce72:	1c43      	adds	r3, r0, #1
 800ce74:	d1f3      	bne.n	800ce5e <__sfputs_r+0xa>
 800ce76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ce78 <_vfiprintf_r>:
 800ce78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce7c:	460d      	mov	r5, r1
 800ce7e:	b09d      	sub	sp, #116	@ 0x74
 800ce80:	4614      	mov	r4, r2
 800ce82:	4698      	mov	r8, r3
 800ce84:	4606      	mov	r6, r0
 800ce86:	b118      	cbz	r0, 800ce90 <_vfiprintf_r+0x18>
 800ce88:	6a03      	ldr	r3, [r0, #32]
 800ce8a:	b90b      	cbnz	r3, 800ce90 <_vfiprintf_r+0x18>
 800ce8c:	f7fd fb96 	bl	800a5bc <__sinit>
 800ce90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ce92:	07d9      	lsls	r1, r3, #31
 800ce94:	d405      	bmi.n	800cea2 <_vfiprintf_r+0x2a>
 800ce96:	89ab      	ldrh	r3, [r5, #12]
 800ce98:	059a      	lsls	r2, r3, #22
 800ce9a:	d402      	bmi.n	800cea2 <_vfiprintf_r+0x2a>
 800ce9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce9e:	f7fd fd26 	bl	800a8ee <__retarget_lock_acquire_recursive>
 800cea2:	89ab      	ldrh	r3, [r5, #12]
 800cea4:	071b      	lsls	r3, r3, #28
 800cea6:	d501      	bpl.n	800ceac <_vfiprintf_r+0x34>
 800cea8:	692b      	ldr	r3, [r5, #16]
 800ceaa:	b99b      	cbnz	r3, 800ced4 <_vfiprintf_r+0x5c>
 800ceac:	4629      	mov	r1, r5
 800ceae:	4630      	mov	r0, r6
 800ceb0:	f000 f938 	bl	800d124 <__swsetup_r>
 800ceb4:	b170      	cbz	r0, 800ced4 <_vfiprintf_r+0x5c>
 800ceb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ceb8:	07dc      	lsls	r4, r3, #31
 800ceba:	d504      	bpl.n	800cec6 <_vfiprintf_r+0x4e>
 800cebc:	f04f 30ff 	mov.w	r0, #4294967295
 800cec0:	b01d      	add	sp, #116	@ 0x74
 800cec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cec6:	89ab      	ldrh	r3, [r5, #12]
 800cec8:	0598      	lsls	r0, r3, #22
 800ceca:	d4f7      	bmi.n	800cebc <_vfiprintf_r+0x44>
 800cecc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cece:	f7fd fd0f 	bl	800a8f0 <__retarget_lock_release_recursive>
 800ced2:	e7f3      	b.n	800cebc <_vfiprintf_r+0x44>
 800ced4:	2300      	movs	r3, #0
 800ced6:	9309      	str	r3, [sp, #36]	@ 0x24
 800ced8:	2320      	movs	r3, #32
 800ceda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cede:	f8cd 800c 	str.w	r8, [sp, #12]
 800cee2:	2330      	movs	r3, #48	@ 0x30
 800cee4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d094 <_vfiprintf_r+0x21c>
 800cee8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ceec:	f04f 0901 	mov.w	r9, #1
 800cef0:	4623      	mov	r3, r4
 800cef2:	469a      	mov	sl, r3
 800cef4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cef8:	b10a      	cbz	r2, 800cefe <_vfiprintf_r+0x86>
 800cefa:	2a25      	cmp	r2, #37	@ 0x25
 800cefc:	d1f9      	bne.n	800cef2 <_vfiprintf_r+0x7a>
 800cefe:	ebba 0b04 	subs.w	fp, sl, r4
 800cf02:	d00b      	beq.n	800cf1c <_vfiprintf_r+0xa4>
 800cf04:	465b      	mov	r3, fp
 800cf06:	4622      	mov	r2, r4
 800cf08:	4629      	mov	r1, r5
 800cf0a:	4630      	mov	r0, r6
 800cf0c:	f7ff ffa2 	bl	800ce54 <__sfputs_r>
 800cf10:	3001      	adds	r0, #1
 800cf12:	f000 80a7 	beq.w	800d064 <_vfiprintf_r+0x1ec>
 800cf16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf18:	445a      	add	r2, fp
 800cf1a:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf1c:	f89a 3000 	ldrb.w	r3, [sl]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	f000 809f 	beq.w	800d064 <_vfiprintf_r+0x1ec>
 800cf26:	2300      	movs	r3, #0
 800cf28:	f04f 32ff 	mov.w	r2, #4294967295
 800cf2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf30:	f10a 0a01 	add.w	sl, sl, #1
 800cf34:	9304      	str	r3, [sp, #16]
 800cf36:	9307      	str	r3, [sp, #28]
 800cf38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cf3c:	931a      	str	r3, [sp, #104]	@ 0x68
 800cf3e:	4654      	mov	r4, sl
 800cf40:	2205      	movs	r2, #5
 800cf42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf46:	4853      	ldr	r0, [pc, #332]	@ (800d094 <_vfiprintf_r+0x21c>)
 800cf48:	f7f3 f95a 	bl	8000200 <memchr>
 800cf4c:	9a04      	ldr	r2, [sp, #16]
 800cf4e:	b9d8      	cbnz	r0, 800cf88 <_vfiprintf_r+0x110>
 800cf50:	06d1      	lsls	r1, r2, #27
 800cf52:	bf44      	itt	mi
 800cf54:	2320      	movmi	r3, #32
 800cf56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf5a:	0713      	lsls	r3, r2, #28
 800cf5c:	bf44      	itt	mi
 800cf5e:	232b      	movmi	r3, #43	@ 0x2b
 800cf60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cf64:	f89a 3000 	ldrb.w	r3, [sl]
 800cf68:	2b2a      	cmp	r3, #42	@ 0x2a
 800cf6a:	d015      	beq.n	800cf98 <_vfiprintf_r+0x120>
 800cf6c:	9a07      	ldr	r2, [sp, #28]
 800cf6e:	4654      	mov	r4, sl
 800cf70:	2000      	movs	r0, #0
 800cf72:	f04f 0c0a 	mov.w	ip, #10
 800cf76:	4621      	mov	r1, r4
 800cf78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf7c:	3b30      	subs	r3, #48	@ 0x30
 800cf7e:	2b09      	cmp	r3, #9
 800cf80:	d94b      	bls.n	800d01a <_vfiprintf_r+0x1a2>
 800cf82:	b1b0      	cbz	r0, 800cfb2 <_vfiprintf_r+0x13a>
 800cf84:	9207      	str	r2, [sp, #28]
 800cf86:	e014      	b.n	800cfb2 <_vfiprintf_r+0x13a>
 800cf88:	eba0 0308 	sub.w	r3, r0, r8
 800cf8c:	fa09 f303 	lsl.w	r3, r9, r3
 800cf90:	4313      	orrs	r3, r2
 800cf92:	9304      	str	r3, [sp, #16]
 800cf94:	46a2      	mov	sl, r4
 800cf96:	e7d2      	b.n	800cf3e <_vfiprintf_r+0xc6>
 800cf98:	9b03      	ldr	r3, [sp, #12]
 800cf9a:	1d19      	adds	r1, r3, #4
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	9103      	str	r1, [sp, #12]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	bfbb      	ittet	lt
 800cfa4:	425b      	neglt	r3, r3
 800cfa6:	f042 0202 	orrlt.w	r2, r2, #2
 800cfaa:	9307      	strge	r3, [sp, #28]
 800cfac:	9307      	strlt	r3, [sp, #28]
 800cfae:	bfb8      	it	lt
 800cfb0:	9204      	strlt	r2, [sp, #16]
 800cfb2:	7823      	ldrb	r3, [r4, #0]
 800cfb4:	2b2e      	cmp	r3, #46	@ 0x2e
 800cfb6:	d10a      	bne.n	800cfce <_vfiprintf_r+0x156>
 800cfb8:	7863      	ldrb	r3, [r4, #1]
 800cfba:	2b2a      	cmp	r3, #42	@ 0x2a
 800cfbc:	d132      	bne.n	800d024 <_vfiprintf_r+0x1ac>
 800cfbe:	9b03      	ldr	r3, [sp, #12]
 800cfc0:	1d1a      	adds	r2, r3, #4
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	9203      	str	r2, [sp, #12]
 800cfc6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cfca:	3402      	adds	r4, #2
 800cfcc:	9305      	str	r3, [sp, #20]
 800cfce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d0a4 <_vfiprintf_r+0x22c>
 800cfd2:	7821      	ldrb	r1, [r4, #0]
 800cfd4:	2203      	movs	r2, #3
 800cfd6:	4650      	mov	r0, sl
 800cfd8:	f7f3 f912 	bl	8000200 <memchr>
 800cfdc:	b138      	cbz	r0, 800cfee <_vfiprintf_r+0x176>
 800cfde:	9b04      	ldr	r3, [sp, #16]
 800cfe0:	eba0 000a 	sub.w	r0, r0, sl
 800cfe4:	2240      	movs	r2, #64	@ 0x40
 800cfe6:	4082      	lsls	r2, r0
 800cfe8:	4313      	orrs	r3, r2
 800cfea:	3401      	adds	r4, #1
 800cfec:	9304      	str	r3, [sp, #16]
 800cfee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cff2:	4829      	ldr	r0, [pc, #164]	@ (800d098 <_vfiprintf_r+0x220>)
 800cff4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cff8:	2206      	movs	r2, #6
 800cffa:	f7f3 f901 	bl	8000200 <memchr>
 800cffe:	2800      	cmp	r0, #0
 800d000:	d03f      	beq.n	800d082 <_vfiprintf_r+0x20a>
 800d002:	4b26      	ldr	r3, [pc, #152]	@ (800d09c <_vfiprintf_r+0x224>)
 800d004:	bb1b      	cbnz	r3, 800d04e <_vfiprintf_r+0x1d6>
 800d006:	9b03      	ldr	r3, [sp, #12]
 800d008:	3307      	adds	r3, #7
 800d00a:	f023 0307 	bic.w	r3, r3, #7
 800d00e:	3308      	adds	r3, #8
 800d010:	9303      	str	r3, [sp, #12]
 800d012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d014:	443b      	add	r3, r7
 800d016:	9309      	str	r3, [sp, #36]	@ 0x24
 800d018:	e76a      	b.n	800cef0 <_vfiprintf_r+0x78>
 800d01a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d01e:	460c      	mov	r4, r1
 800d020:	2001      	movs	r0, #1
 800d022:	e7a8      	b.n	800cf76 <_vfiprintf_r+0xfe>
 800d024:	2300      	movs	r3, #0
 800d026:	3401      	adds	r4, #1
 800d028:	9305      	str	r3, [sp, #20]
 800d02a:	4619      	mov	r1, r3
 800d02c:	f04f 0c0a 	mov.w	ip, #10
 800d030:	4620      	mov	r0, r4
 800d032:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d036:	3a30      	subs	r2, #48	@ 0x30
 800d038:	2a09      	cmp	r2, #9
 800d03a:	d903      	bls.n	800d044 <_vfiprintf_r+0x1cc>
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d0c6      	beq.n	800cfce <_vfiprintf_r+0x156>
 800d040:	9105      	str	r1, [sp, #20]
 800d042:	e7c4      	b.n	800cfce <_vfiprintf_r+0x156>
 800d044:	fb0c 2101 	mla	r1, ip, r1, r2
 800d048:	4604      	mov	r4, r0
 800d04a:	2301      	movs	r3, #1
 800d04c:	e7f0      	b.n	800d030 <_vfiprintf_r+0x1b8>
 800d04e:	ab03      	add	r3, sp, #12
 800d050:	9300      	str	r3, [sp, #0]
 800d052:	462a      	mov	r2, r5
 800d054:	4b12      	ldr	r3, [pc, #72]	@ (800d0a0 <_vfiprintf_r+0x228>)
 800d056:	a904      	add	r1, sp, #16
 800d058:	4630      	mov	r0, r6
 800d05a:	f7fc fc5f 	bl	800991c <_printf_float>
 800d05e:	4607      	mov	r7, r0
 800d060:	1c78      	adds	r0, r7, #1
 800d062:	d1d6      	bne.n	800d012 <_vfiprintf_r+0x19a>
 800d064:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d066:	07d9      	lsls	r1, r3, #31
 800d068:	d405      	bmi.n	800d076 <_vfiprintf_r+0x1fe>
 800d06a:	89ab      	ldrh	r3, [r5, #12]
 800d06c:	059a      	lsls	r2, r3, #22
 800d06e:	d402      	bmi.n	800d076 <_vfiprintf_r+0x1fe>
 800d070:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d072:	f7fd fc3d 	bl	800a8f0 <__retarget_lock_release_recursive>
 800d076:	89ab      	ldrh	r3, [r5, #12]
 800d078:	065b      	lsls	r3, r3, #25
 800d07a:	f53f af1f 	bmi.w	800cebc <_vfiprintf_r+0x44>
 800d07e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d080:	e71e      	b.n	800cec0 <_vfiprintf_r+0x48>
 800d082:	ab03      	add	r3, sp, #12
 800d084:	9300      	str	r3, [sp, #0]
 800d086:	462a      	mov	r2, r5
 800d088:	4b05      	ldr	r3, [pc, #20]	@ (800d0a0 <_vfiprintf_r+0x228>)
 800d08a:	a904      	add	r1, sp, #16
 800d08c:	4630      	mov	r0, r6
 800d08e:	f7fc fedd 	bl	8009e4c <_printf_i>
 800d092:	e7e4      	b.n	800d05e <_vfiprintf_r+0x1e6>
 800d094:	0800d933 	.word	0x0800d933
 800d098:	0800d93d 	.word	0x0800d93d
 800d09c:	0800991d 	.word	0x0800991d
 800d0a0:	0800ce55 	.word	0x0800ce55
 800d0a4:	0800d939 	.word	0x0800d939

0800d0a8 <__swbuf_r>:
 800d0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0aa:	460e      	mov	r6, r1
 800d0ac:	4614      	mov	r4, r2
 800d0ae:	4605      	mov	r5, r0
 800d0b0:	b118      	cbz	r0, 800d0ba <__swbuf_r+0x12>
 800d0b2:	6a03      	ldr	r3, [r0, #32]
 800d0b4:	b90b      	cbnz	r3, 800d0ba <__swbuf_r+0x12>
 800d0b6:	f7fd fa81 	bl	800a5bc <__sinit>
 800d0ba:	69a3      	ldr	r3, [r4, #24]
 800d0bc:	60a3      	str	r3, [r4, #8]
 800d0be:	89a3      	ldrh	r3, [r4, #12]
 800d0c0:	071a      	lsls	r2, r3, #28
 800d0c2:	d501      	bpl.n	800d0c8 <__swbuf_r+0x20>
 800d0c4:	6923      	ldr	r3, [r4, #16]
 800d0c6:	b943      	cbnz	r3, 800d0da <__swbuf_r+0x32>
 800d0c8:	4621      	mov	r1, r4
 800d0ca:	4628      	mov	r0, r5
 800d0cc:	f000 f82a 	bl	800d124 <__swsetup_r>
 800d0d0:	b118      	cbz	r0, 800d0da <__swbuf_r+0x32>
 800d0d2:	f04f 37ff 	mov.w	r7, #4294967295
 800d0d6:	4638      	mov	r0, r7
 800d0d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d0da:	6823      	ldr	r3, [r4, #0]
 800d0dc:	6922      	ldr	r2, [r4, #16]
 800d0de:	1a98      	subs	r0, r3, r2
 800d0e0:	6963      	ldr	r3, [r4, #20]
 800d0e2:	b2f6      	uxtb	r6, r6
 800d0e4:	4283      	cmp	r3, r0
 800d0e6:	4637      	mov	r7, r6
 800d0e8:	dc05      	bgt.n	800d0f6 <__swbuf_r+0x4e>
 800d0ea:	4621      	mov	r1, r4
 800d0ec:	4628      	mov	r0, r5
 800d0ee:	f7ff fded 	bl	800cccc <_fflush_r>
 800d0f2:	2800      	cmp	r0, #0
 800d0f4:	d1ed      	bne.n	800d0d2 <__swbuf_r+0x2a>
 800d0f6:	68a3      	ldr	r3, [r4, #8]
 800d0f8:	3b01      	subs	r3, #1
 800d0fa:	60a3      	str	r3, [r4, #8]
 800d0fc:	6823      	ldr	r3, [r4, #0]
 800d0fe:	1c5a      	adds	r2, r3, #1
 800d100:	6022      	str	r2, [r4, #0]
 800d102:	701e      	strb	r6, [r3, #0]
 800d104:	6962      	ldr	r2, [r4, #20]
 800d106:	1c43      	adds	r3, r0, #1
 800d108:	429a      	cmp	r2, r3
 800d10a:	d004      	beq.n	800d116 <__swbuf_r+0x6e>
 800d10c:	89a3      	ldrh	r3, [r4, #12]
 800d10e:	07db      	lsls	r3, r3, #31
 800d110:	d5e1      	bpl.n	800d0d6 <__swbuf_r+0x2e>
 800d112:	2e0a      	cmp	r6, #10
 800d114:	d1df      	bne.n	800d0d6 <__swbuf_r+0x2e>
 800d116:	4621      	mov	r1, r4
 800d118:	4628      	mov	r0, r5
 800d11a:	f7ff fdd7 	bl	800cccc <_fflush_r>
 800d11e:	2800      	cmp	r0, #0
 800d120:	d0d9      	beq.n	800d0d6 <__swbuf_r+0x2e>
 800d122:	e7d6      	b.n	800d0d2 <__swbuf_r+0x2a>

0800d124 <__swsetup_r>:
 800d124:	b538      	push	{r3, r4, r5, lr}
 800d126:	4b29      	ldr	r3, [pc, #164]	@ (800d1cc <__swsetup_r+0xa8>)
 800d128:	4605      	mov	r5, r0
 800d12a:	6818      	ldr	r0, [r3, #0]
 800d12c:	460c      	mov	r4, r1
 800d12e:	b118      	cbz	r0, 800d138 <__swsetup_r+0x14>
 800d130:	6a03      	ldr	r3, [r0, #32]
 800d132:	b90b      	cbnz	r3, 800d138 <__swsetup_r+0x14>
 800d134:	f7fd fa42 	bl	800a5bc <__sinit>
 800d138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d13c:	0719      	lsls	r1, r3, #28
 800d13e:	d422      	bmi.n	800d186 <__swsetup_r+0x62>
 800d140:	06da      	lsls	r2, r3, #27
 800d142:	d407      	bmi.n	800d154 <__swsetup_r+0x30>
 800d144:	2209      	movs	r2, #9
 800d146:	602a      	str	r2, [r5, #0]
 800d148:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d14c:	81a3      	strh	r3, [r4, #12]
 800d14e:	f04f 30ff 	mov.w	r0, #4294967295
 800d152:	e033      	b.n	800d1bc <__swsetup_r+0x98>
 800d154:	0758      	lsls	r0, r3, #29
 800d156:	d512      	bpl.n	800d17e <__swsetup_r+0x5a>
 800d158:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d15a:	b141      	cbz	r1, 800d16e <__swsetup_r+0x4a>
 800d15c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d160:	4299      	cmp	r1, r3
 800d162:	d002      	beq.n	800d16a <__swsetup_r+0x46>
 800d164:	4628      	mov	r0, r5
 800d166:	f7fe fa57 	bl	800b618 <_free_r>
 800d16a:	2300      	movs	r3, #0
 800d16c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d16e:	89a3      	ldrh	r3, [r4, #12]
 800d170:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d174:	81a3      	strh	r3, [r4, #12]
 800d176:	2300      	movs	r3, #0
 800d178:	6063      	str	r3, [r4, #4]
 800d17a:	6923      	ldr	r3, [r4, #16]
 800d17c:	6023      	str	r3, [r4, #0]
 800d17e:	89a3      	ldrh	r3, [r4, #12]
 800d180:	f043 0308 	orr.w	r3, r3, #8
 800d184:	81a3      	strh	r3, [r4, #12]
 800d186:	6923      	ldr	r3, [r4, #16]
 800d188:	b94b      	cbnz	r3, 800d19e <__swsetup_r+0x7a>
 800d18a:	89a3      	ldrh	r3, [r4, #12]
 800d18c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d190:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d194:	d003      	beq.n	800d19e <__swsetup_r+0x7a>
 800d196:	4621      	mov	r1, r4
 800d198:	4628      	mov	r0, r5
 800d19a:	f000 f88b 	bl	800d2b4 <__smakebuf_r>
 800d19e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1a2:	f013 0201 	ands.w	r2, r3, #1
 800d1a6:	d00a      	beq.n	800d1be <__swsetup_r+0x9a>
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	60a2      	str	r2, [r4, #8]
 800d1ac:	6962      	ldr	r2, [r4, #20]
 800d1ae:	4252      	negs	r2, r2
 800d1b0:	61a2      	str	r2, [r4, #24]
 800d1b2:	6922      	ldr	r2, [r4, #16]
 800d1b4:	b942      	cbnz	r2, 800d1c8 <__swsetup_r+0xa4>
 800d1b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d1ba:	d1c5      	bne.n	800d148 <__swsetup_r+0x24>
 800d1bc:	bd38      	pop	{r3, r4, r5, pc}
 800d1be:	0799      	lsls	r1, r3, #30
 800d1c0:	bf58      	it	pl
 800d1c2:	6962      	ldrpl	r2, [r4, #20]
 800d1c4:	60a2      	str	r2, [r4, #8]
 800d1c6:	e7f4      	b.n	800d1b2 <__swsetup_r+0x8e>
 800d1c8:	2000      	movs	r0, #0
 800d1ca:	e7f7      	b.n	800d1bc <__swsetup_r+0x98>
 800d1cc:	20000208 	.word	0x20000208

0800d1d0 <_raise_r>:
 800d1d0:	291f      	cmp	r1, #31
 800d1d2:	b538      	push	{r3, r4, r5, lr}
 800d1d4:	4605      	mov	r5, r0
 800d1d6:	460c      	mov	r4, r1
 800d1d8:	d904      	bls.n	800d1e4 <_raise_r+0x14>
 800d1da:	2316      	movs	r3, #22
 800d1dc:	6003      	str	r3, [r0, #0]
 800d1de:	f04f 30ff 	mov.w	r0, #4294967295
 800d1e2:	bd38      	pop	{r3, r4, r5, pc}
 800d1e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d1e6:	b112      	cbz	r2, 800d1ee <_raise_r+0x1e>
 800d1e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1ec:	b94b      	cbnz	r3, 800d202 <_raise_r+0x32>
 800d1ee:	4628      	mov	r0, r5
 800d1f0:	f000 f830 	bl	800d254 <_getpid_r>
 800d1f4:	4622      	mov	r2, r4
 800d1f6:	4601      	mov	r1, r0
 800d1f8:	4628      	mov	r0, r5
 800d1fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1fe:	f000 b817 	b.w	800d230 <_kill_r>
 800d202:	2b01      	cmp	r3, #1
 800d204:	d00a      	beq.n	800d21c <_raise_r+0x4c>
 800d206:	1c59      	adds	r1, r3, #1
 800d208:	d103      	bne.n	800d212 <_raise_r+0x42>
 800d20a:	2316      	movs	r3, #22
 800d20c:	6003      	str	r3, [r0, #0]
 800d20e:	2001      	movs	r0, #1
 800d210:	e7e7      	b.n	800d1e2 <_raise_r+0x12>
 800d212:	2100      	movs	r1, #0
 800d214:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d218:	4620      	mov	r0, r4
 800d21a:	4798      	blx	r3
 800d21c:	2000      	movs	r0, #0
 800d21e:	e7e0      	b.n	800d1e2 <_raise_r+0x12>

0800d220 <raise>:
 800d220:	4b02      	ldr	r3, [pc, #8]	@ (800d22c <raise+0xc>)
 800d222:	4601      	mov	r1, r0
 800d224:	6818      	ldr	r0, [r3, #0]
 800d226:	f7ff bfd3 	b.w	800d1d0 <_raise_r>
 800d22a:	bf00      	nop
 800d22c:	20000208 	.word	0x20000208

0800d230 <_kill_r>:
 800d230:	b538      	push	{r3, r4, r5, lr}
 800d232:	4d07      	ldr	r5, [pc, #28]	@ (800d250 <_kill_r+0x20>)
 800d234:	2300      	movs	r3, #0
 800d236:	4604      	mov	r4, r0
 800d238:	4608      	mov	r0, r1
 800d23a:	4611      	mov	r1, r2
 800d23c:	602b      	str	r3, [r5, #0]
 800d23e:	f7f6 f903 	bl	8003448 <_kill>
 800d242:	1c43      	adds	r3, r0, #1
 800d244:	d102      	bne.n	800d24c <_kill_r+0x1c>
 800d246:	682b      	ldr	r3, [r5, #0]
 800d248:	b103      	cbz	r3, 800d24c <_kill_r+0x1c>
 800d24a:	6023      	str	r3, [r4, #0]
 800d24c:	bd38      	pop	{r3, r4, r5, pc}
 800d24e:	bf00      	nop
 800d250:	200008cc 	.word	0x200008cc

0800d254 <_getpid_r>:
 800d254:	f7f6 b8f0 	b.w	8003438 <_getpid>

0800d258 <_malloc_usable_size_r>:
 800d258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d25c:	1f18      	subs	r0, r3, #4
 800d25e:	2b00      	cmp	r3, #0
 800d260:	bfbc      	itt	lt
 800d262:	580b      	ldrlt	r3, [r1, r0]
 800d264:	18c0      	addlt	r0, r0, r3
 800d266:	4770      	bx	lr

0800d268 <__swhatbuf_r>:
 800d268:	b570      	push	{r4, r5, r6, lr}
 800d26a:	460c      	mov	r4, r1
 800d26c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d270:	2900      	cmp	r1, #0
 800d272:	b096      	sub	sp, #88	@ 0x58
 800d274:	4615      	mov	r5, r2
 800d276:	461e      	mov	r6, r3
 800d278:	da0d      	bge.n	800d296 <__swhatbuf_r+0x2e>
 800d27a:	89a3      	ldrh	r3, [r4, #12]
 800d27c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d280:	f04f 0100 	mov.w	r1, #0
 800d284:	bf14      	ite	ne
 800d286:	2340      	movne	r3, #64	@ 0x40
 800d288:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d28c:	2000      	movs	r0, #0
 800d28e:	6031      	str	r1, [r6, #0]
 800d290:	602b      	str	r3, [r5, #0]
 800d292:	b016      	add	sp, #88	@ 0x58
 800d294:	bd70      	pop	{r4, r5, r6, pc}
 800d296:	466a      	mov	r2, sp
 800d298:	f000 f848 	bl	800d32c <_fstat_r>
 800d29c:	2800      	cmp	r0, #0
 800d29e:	dbec      	blt.n	800d27a <__swhatbuf_r+0x12>
 800d2a0:	9901      	ldr	r1, [sp, #4]
 800d2a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d2a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d2aa:	4259      	negs	r1, r3
 800d2ac:	4159      	adcs	r1, r3
 800d2ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d2b2:	e7eb      	b.n	800d28c <__swhatbuf_r+0x24>

0800d2b4 <__smakebuf_r>:
 800d2b4:	898b      	ldrh	r3, [r1, #12]
 800d2b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d2b8:	079d      	lsls	r5, r3, #30
 800d2ba:	4606      	mov	r6, r0
 800d2bc:	460c      	mov	r4, r1
 800d2be:	d507      	bpl.n	800d2d0 <__smakebuf_r+0x1c>
 800d2c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d2c4:	6023      	str	r3, [r4, #0]
 800d2c6:	6123      	str	r3, [r4, #16]
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	6163      	str	r3, [r4, #20]
 800d2cc:	b003      	add	sp, #12
 800d2ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2d0:	ab01      	add	r3, sp, #4
 800d2d2:	466a      	mov	r2, sp
 800d2d4:	f7ff ffc8 	bl	800d268 <__swhatbuf_r>
 800d2d8:	9f00      	ldr	r7, [sp, #0]
 800d2da:	4605      	mov	r5, r0
 800d2dc:	4639      	mov	r1, r7
 800d2de:	4630      	mov	r0, r6
 800d2e0:	f7fe fd48 	bl	800bd74 <_malloc_r>
 800d2e4:	b948      	cbnz	r0, 800d2fa <__smakebuf_r+0x46>
 800d2e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d2ea:	059a      	lsls	r2, r3, #22
 800d2ec:	d4ee      	bmi.n	800d2cc <__smakebuf_r+0x18>
 800d2ee:	f023 0303 	bic.w	r3, r3, #3
 800d2f2:	f043 0302 	orr.w	r3, r3, #2
 800d2f6:	81a3      	strh	r3, [r4, #12]
 800d2f8:	e7e2      	b.n	800d2c0 <__smakebuf_r+0xc>
 800d2fa:	89a3      	ldrh	r3, [r4, #12]
 800d2fc:	6020      	str	r0, [r4, #0]
 800d2fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d302:	81a3      	strh	r3, [r4, #12]
 800d304:	9b01      	ldr	r3, [sp, #4]
 800d306:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d30a:	b15b      	cbz	r3, 800d324 <__smakebuf_r+0x70>
 800d30c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d310:	4630      	mov	r0, r6
 800d312:	f000 f81d 	bl	800d350 <_isatty_r>
 800d316:	b128      	cbz	r0, 800d324 <__smakebuf_r+0x70>
 800d318:	89a3      	ldrh	r3, [r4, #12]
 800d31a:	f023 0303 	bic.w	r3, r3, #3
 800d31e:	f043 0301 	orr.w	r3, r3, #1
 800d322:	81a3      	strh	r3, [r4, #12]
 800d324:	89a3      	ldrh	r3, [r4, #12]
 800d326:	431d      	orrs	r5, r3
 800d328:	81a5      	strh	r5, [r4, #12]
 800d32a:	e7cf      	b.n	800d2cc <__smakebuf_r+0x18>

0800d32c <_fstat_r>:
 800d32c:	b538      	push	{r3, r4, r5, lr}
 800d32e:	4d07      	ldr	r5, [pc, #28]	@ (800d34c <_fstat_r+0x20>)
 800d330:	2300      	movs	r3, #0
 800d332:	4604      	mov	r4, r0
 800d334:	4608      	mov	r0, r1
 800d336:	4611      	mov	r1, r2
 800d338:	602b      	str	r3, [r5, #0]
 800d33a:	f7f6 f8e5 	bl	8003508 <_fstat>
 800d33e:	1c43      	adds	r3, r0, #1
 800d340:	d102      	bne.n	800d348 <_fstat_r+0x1c>
 800d342:	682b      	ldr	r3, [r5, #0]
 800d344:	b103      	cbz	r3, 800d348 <_fstat_r+0x1c>
 800d346:	6023      	str	r3, [r4, #0]
 800d348:	bd38      	pop	{r3, r4, r5, pc}
 800d34a:	bf00      	nop
 800d34c:	200008cc 	.word	0x200008cc

0800d350 <_isatty_r>:
 800d350:	b538      	push	{r3, r4, r5, lr}
 800d352:	4d06      	ldr	r5, [pc, #24]	@ (800d36c <_isatty_r+0x1c>)
 800d354:	2300      	movs	r3, #0
 800d356:	4604      	mov	r4, r0
 800d358:	4608      	mov	r0, r1
 800d35a:	602b      	str	r3, [r5, #0]
 800d35c:	f7f6 f8e4 	bl	8003528 <_isatty>
 800d360:	1c43      	adds	r3, r0, #1
 800d362:	d102      	bne.n	800d36a <_isatty_r+0x1a>
 800d364:	682b      	ldr	r3, [r5, #0]
 800d366:	b103      	cbz	r3, 800d36a <_isatty_r+0x1a>
 800d368:	6023      	str	r3, [r4, #0]
 800d36a:	bd38      	pop	{r3, r4, r5, pc}
 800d36c:	200008cc 	.word	0x200008cc

0800d370 <fmod>:
 800d370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d372:	ed2d 8b02 	vpush	{d8}
 800d376:	ec57 6b10 	vmov	r6, r7, d0
 800d37a:	ec55 4b11 	vmov	r4, r5, d1
 800d37e:	f000 f825 	bl	800d3cc <__ieee754_fmod>
 800d382:	4622      	mov	r2, r4
 800d384:	462b      	mov	r3, r5
 800d386:	4630      	mov	r0, r6
 800d388:	4639      	mov	r1, r7
 800d38a:	eeb0 8a40 	vmov.f32	s16, s0
 800d38e:	eef0 8a60 	vmov.f32	s17, s1
 800d392:	f7f3 fbe3 	bl	8000b5c <__aeabi_dcmpun>
 800d396:	b990      	cbnz	r0, 800d3be <fmod+0x4e>
 800d398:	2200      	movs	r2, #0
 800d39a:	2300      	movs	r3, #0
 800d39c:	4620      	mov	r0, r4
 800d39e:	4629      	mov	r1, r5
 800d3a0:	f7f3 fbaa 	bl	8000af8 <__aeabi_dcmpeq>
 800d3a4:	b158      	cbz	r0, 800d3be <fmod+0x4e>
 800d3a6:	f7fd fa77 	bl	800a898 <__errno>
 800d3aa:	2321      	movs	r3, #33	@ 0x21
 800d3ac:	6003      	str	r3, [r0, #0]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	4610      	mov	r0, r2
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	f7f3 fa61 	bl	800087c <__aeabi_ddiv>
 800d3ba:	ec41 0b18 	vmov	d8, r0, r1
 800d3be:	eeb0 0a48 	vmov.f32	s0, s16
 800d3c2:	eef0 0a68 	vmov.f32	s1, s17
 800d3c6:	ecbd 8b02 	vpop	{d8}
 800d3ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d3cc <__ieee754_fmod>:
 800d3cc:	ec53 2b11 	vmov	r2, r3, d1
 800d3d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3d4:	f023 4800 	bic.w	r8, r3, #2147483648	@ 0x80000000
 800d3d8:	ea52 0408 	orrs.w	r4, r2, r8
 800d3dc:	ec51 0b10 	vmov	r0, r1, d0
 800d3e0:	461e      	mov	r6, r3
 800d3e2:	4696      	mov	lr, r2
 800d3e4:	4694      	mov	ip, r2
 800d3e6:	d00c      	beq.n	800d402 <__ieee754_fmod+0x36>
 800d3e8:	4d76      	ldr	r5, [pc, #472]	@ (800d5c4 <__ieee754_fmod+0x1f8>)
 800d3ea:	f021 4900 	bic.w	r9, r1, #2147483648	@ 0x80000000
 800d3ee:	45a9      	cmp	r9, r5
 800d3f0:	460c      	mov	r4, r1
 800d3f2:	d806      	bhi.n	800d402 <__ieee754_fmod+0x36>
 800d3f4:	4255      	negs	r5, r2
 800d3f6:	4f74      	ldr	r7, [pc, #464]	@ (800d5c8 <__ieee754_fmod+0x1fc>)
 800d3f8:	4315      	orrs	r5, r2
 800d3fa:	ea48 75d5 	orr.w	r5, r8, r5, lsr #31
 800d3fe:	42bd      	cmp	r5, r7
 800d400:	d909      	bls.n	800d416 <__ieee754_fmod+0x4a>
 800d402:	f7f3 f911 	bl	8000628 <__aeabi_dmul>
 800d406:	4602      	mov	r2, r0
 800d408:	460b      	mov	r3, r1
 800d40a:	f7f3 fa37 	bl	800087c <__aeabi_ddiv>
 800d40e:	ec41 0b10 	vmov	d0, r0, r1
 800d412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d416:	45c1      	cmp	r9, r8
 800d418:	4682      	mov	sl, r0
 800d41a:	4607      	mov	r7, r0
 800d41c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800d420:	dc09      	bgt.n	800d436 <__ieee754_fmod+0x6a>
 800d422:	dbf4      	blt.n	800d40e <__ieee754_fmod+0x42>
 800d424:	4282      	cmp	r2, r0
 800d426:	d8f2      	bhi.n	800d40e <__ieee754_fmod+0x42>
 800d428:	d105      	bne.n	800d436 <__ieee754_fmod+0x6a>
 800d42a:	4b68      	ldr	r3, [pc, #416]	@ (800d5cc <__ieee754_fmod+0x200>)
 800d42c:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800d430:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d434:	e7eb      	b.n	800d40e <__ieee754_fmod+0x42>
 800d436:	4964      	ldr	r1, [pc, #400]	@ (800d5c8 <__ieee754_fmod+0x1fc>)
 800d438:	420c      	tst	r4, r1
 800d43a:	d148      	bne.n	800d4ce <__ieee754_fmod+0x102>
 800d43c:	f1b9 0f00 	cmp.w	r9, #0
 800d440:	d13d      	bne.n	800d4be <__ieee754_fmod+0xf2>
 800d442:	4a63      	ldr	r2, [pc, #396]	@ (800d5d0 <__ieee754_fmod+0x204>)
 800d444:	4653      	mov	r3, sl
 800d446:	2b00      	cmp	r3, #0
 800d448:	dc36      	bgt.n	800d4b8 <__ieee754_fmod+0xec>
 800d44a:	420e      	tst	r6, r1
 800d44c:	d14f      	bne.n	800d4ee <__ieee754_fmod+0x122>
 800d44e:	f1b8 0f00 	cmp.w	r8, #0
 800d452:	d144      	bne.n	800d4de <__ieee754_fmod+0x112>
 800d454:	4b5e      	ldr	r3, [pc, #376]	@ (800d5d0 <__ieee754_fmod+0x204>)
 800d456:	4671      	mov	r1, lr
 800d458:	2900      	cmp	r1, #0
 800d45a:	dc3d      	bgt.n	800d4d8 <__ieee754_fmod+0x10c>
 800d45c:	485d      	ldr	r0, [pc, #372]	@ (800d5d4 <__ieee754_fmod+0x208>)
 800d45e:	4282      	cmp	r2, r0
 800d460:	db4a      	blt.n	800d4f8 <__ieee754_fmod+0x12c>
 800d462:	f3c4 0113 	ubfx	r1, r4, #0, #20
 800d466:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800d46a:	485a      	ldr	r0, [pc, #360]	@ (800d5d4 <__ieee754_fmod+0x208>)
 800d46c:	4283      	cmp	r3, r0
 800d46e:	db57      	blt.n	800d520 <__ieee754_fmod+0x154>
 800d470:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800d474:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800d478:	1ad0      	subs	r0, r2, r3
 800d47a:	1b8a      	subs	r2, r1, r6
 800d47c:	eba7 040c 	sub.w	r4, r7, ip
 800d480:	2800      	cmp	r0, #0
 800d482:	d162      	bne.n	800d54a <__ieee754_fmod+0x17e>
 800d484:	4567      	cmp	r7, ip
 800d486:	bf38      	it	cc
 800d488:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800d48c:	2a00      	cmp	r2, #0
 800d48e:	bfbc      	itt	lt
 800d490:	463c      	movlt	r4, r7
 800d492:	460a      	movlt	r2, r1
 800d494:	ea52 0104 	orrs.w	r1, r2, r4
 800d498:	d0c7      	beq.n	800d42a <__ieee754_fmod+0x5e>
 800d49a:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 800d49e:	db69      	blt.n	800d574 <__ieee754_fmod+0x1a8>
 800d4a0:	494c      	ldr	r1, [pc, #304]	@ (800d5d4 <__ieee754_fmod+0x208>)
 800d4a2:	428b      	cmp	r3, r1
 800d4a4:	db6c      	blt.n	800d580 <__ieee754_fmod+0x1b4>
 800d4a6:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 800d4aa:	432a      	orrs	r2, r5
 800d4ac:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800d4b0:	ea42 5103 	orr.w	r1, r2, r3, lsl #20
 800d4b4:	4620      	mov	r0, r4
 800d4b6:	e7aa      	b.n	800d40e <__ieee754_fmod+0x42>
 800d4b8:	3a01      	subs	r2, #1
 800d4ba:	005b      	lsls	r3, r3, #1
 800d4bc:	e7c3      	b.n	800d446 <__ieee754_fmod+0x7a>
 800d4be:	4a45      	ldr	r2, [pc, #276]	@ (800d5d4 <__ieee754_fmod+0x208>)
 800d4c0:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	ddc0      	ble.n	800d44a <__ieee754_fmod+0x7e>
 800d4c8:	3a01      	subs	r2, #1
 800d4ca:	005b      	lsls	r3, r3, #1
 800d4cc:	e7fa      	b.n	800d4c4 <__ieee754_fmod+0xf8>
 800d4ce:	ea4f 5229 	mov.w	r2, r9, asr #20
 800d4d2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800d4d6:	e7b8      	b.n	800d44a <__ieee754_fmod+0x7e>
 800d4d8:	3b01      	subs	r3, #1
 800d4da:	0049      	lsls	r1, r1, #1
 800d4dc:	e7bc      	b.n	800d458 <__ieee754_fmod+0x8c>
 800d4de:	4b3d      	ldr	r3, [pc, #244]	@ (800d5d4 <__ieee754_fmod+0x208>)
 800d4e0:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 800d4e4:	2900      	cmp	r1, #0
 800d4e6:	ddb9      	ble.n	800d45c <__ieee754_fmod+0x90>
 800d4e8:	3b01      	subs	r3, #1
 800d4ea:	0049      	lsls	r1, r1, #1
 800d4ec:	e7fa      	b.n	800d4e4 <__ieee754_fmod+0x118>
 800d4ee:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d4f2:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800d4f6:	e7b1      	b.n	800d45c <__ieee754_fmod+0x90>
 800d4f8:	1a80      	subs	r0, r0, r2
 800d4fa:	281f      	cmp	r0, #31
 800d4fc:	dc0a      	bgt.n	800d514 <__ieee754_fmod+0x148>
 800d4fe:	f202 411e 	addw	r1, r2, #1054	@ 0x41e
 800d502:	fa09 f900 	lsl.w	r9, r9, r0
 800d506:	fa2a f101 	lsr.w	r1, sl, r1
 800d50a:	ea41 0109 	orr.w	r1, r1, r9
 800d50e:	fa0a f700 	lsl.w	r7, sl, r0
 800d512:	e7aa      	b.n	800d46a <__ieee754_fmod+0x9e>
 800d514:	4930      	ldr	r1, [pc, #192]	@ (800d5d8 <__ieee754_fmod+0x20c>)
 800d516:	1a89      	subs	r1, r1, r2
 800d518:	fa0a f101 	lsl.w	r1, sl, r1
 800d51c:	2700      	movs	r7, #0
 800d51e:	e7a4      	b.n	800d46a <__ieee754_fmod+0x9e>
 800d520:	1ac0      	subs	r0, r0, r3
 800d522:	281f      	cmp	r0, #31
 800d524:	dc0a      	bgt.n	800d53c <__ieee754_fmod+0x170>
 800d526:	f203 461e 	addw	r6, r3, #1054	@ 0x41e
 800d52a:	fa08 f800 	lsl.w	r8, r8, r0
 800d52e:	fa2e f606 	lsr.w	r6, lr, r6
 800d532:	ea46 0608 	orr.w	r6, r6, r8
 800d536:	fa0e fc00 	lsl.w	ip, lr, r0
 800d53a:	e79d      	b.n	800d478 <__ieee754_fmod+0xac>
 800d53c:	4e26      	ldr	r6, [pc, #152]	@ (800d5d8 <__ieee754_fmod+0x20c>)
 800d53e:	1af6      	subs	r6, r6, r3
 800d540:	fa0e f606 	lsl.w	r6, lr, r6
 800d544:	f04f 0c00 	mov.w	ip, #0
 800d548:	e796      	b.n	800d478 <__ieee754_fmod+0xac>
 800d54a:	4567      	cmp	r7, ip
 800d54c:	bf38      	it	cc
 800d54e:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800d552:	2a00      	cmp	r2, #0
 800d554:	da05      	bge.n	800d562 <__ieee754_fmod+0x196>
 800d556:	0ffa      	lsrs	r2, r7, #31
 800d558:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d55c:	007f      	lsls	r7, r7, #1
 800d55e:	3801      	subs	r0, #1
 800d560:	e78b      	b.n	800d47a <__ieee754_fmod+0xae>
 800d562:	ea52 0104 	orrs.w	r1, r2, r4
 800d566:	f43f af60 	beq.w	800d42a <__ieee754_fmod+0x5e>
 800d56a:	0fe1      	lsrs	r1, r4, #31
 800d56c:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800d570:	0067      	lsls	r7, r4, #1
 800d572:	e7f4      	b.n	800d55e <__ieee754_fmod+0x192>
 800d574:	0fe1      	lsrs	r1, r4, #31
 800d576:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800d57a:	0064      	lsls	r4, r4, #1
 800d57c:	3b01      	subs	r3, #1
 800d57e:	e78c      	b.n	800d49a <__ieee754_fmod+0xce>
 800d580:	1ac9      	subs	r1, r1, r3
 800d582:	2914      	cmp	r1, #20
 800d584:	dc0a      	bgt.n	800d59c <__ieee754_fmod+0x1d0>
 800d586:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 800d58a:	fa02 f303 	lsl.w	r3, r2, r3
 800d58e:	40cc      	lsrs	r4, r1
 800d590:	4323      	orrs	r3, r4
 800d592:	410a      	asrs	r2, r1
 800d594:	ea42 0105 	orr.w	r1, r2, r5
 800d598:	4618      	mov	r0, r3
 800d59a:	e738      	b.n	800d40e <__ieee754_fmod+0x42>
 800d59c:	291f      	cmp	r1, #31
 800d59e:	dc07      	bgt.n	800d5b0 <__ieee754_fmod+0x1e4>
 800d5a0:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 800d5a4:	40cc      	lsrs	r4, r1
 800d5a6:	fa02 f303 	lsl.w	r3, r2, r3
 800d5aa:	4323      	orrs	r3, r4
 800d5ac:	462a      	mov	r2, r5
 800d5ae:	e7f1      	b.n	800d594 <__ieee754_fmod+0x1c8>
 800d5b0:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 800d5b4:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 800d5b8:	f503 437b 	add.w	r3, r3, #64256	@ 0xfb00
 800d5bc:	33e2      	adds	r3, #226	@ 0xe2
 800d5be:	fa42 f303 	asr.w	r3, r2, r3
 800d5c2:	e7f3      	b.n	800d5ac <__ieee754_fmod+0x1e0>
 800d5c4:	7fefffff 	.word	0x7fefffff
 800d5c8:	7ff00000 	.word	0x7ff00000
 800d5cc:	0800dba0 	.word	0x0800dba0
 800d5d0:	fffffbed 	.word	0xfffffbed
 800d5d4:	fffffc02 	.word	0xfffffc02
 800d5d8:	fffffbe2 	.word	0xfffffbe2

0800d5dc <_init>:
 800d5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5de:	bf00      	nop
 800d5e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5e2:	bc08      	pop	{r3}
 800d5e4:	469e      	mov	lr, r3
 800d5e6:	4770      	bx	lr

0800d5e8 <_fini>:
 800d5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ea:	bf00      	nop
 800d5ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5ee:	bc08      	pop	{r3}
 800d5f0:	469e      	mov	lr, r3
 800d5f2:	4770      	bx	lr
