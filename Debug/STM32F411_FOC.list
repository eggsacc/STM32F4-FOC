
STM32F411_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057b8  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08005950  08005950  00006950  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059a0  080059a0  000070e0  2**0
                  CONTENTS
  4 .ARM          00000008  080059a0  080059a0  000069a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059a8  080059a8  000070e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059a8  080059a8  000069a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059ac  080059ac  000069ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e0  20000000  080059b0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  200000e0  08005a90  000070e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  08005a90  00007404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000070e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b28  00000000  00000000  00007110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000294d  00000000  00000000  00019c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  0001c588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ccf  00000000  00000000  0001d5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178b6  00000000  00000000  0001e29f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001500e  00000000  00000000  00035b55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090eb0  00000000  00000000  0004ab63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dba13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004894  00000000  00000000  000dba58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e02ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000e0 	.word	0x200000e0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005938 	.word	0x08005938

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000e4 	.word	0x200000e4
 80001d4:	08005938 	.word	0x08005938

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b96a 	b.w	8000e7c <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	460c      	mov	r4, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14e      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bcc:	4694      	mov	ip, r2
 8000bce:	458c      	cmp	ip, r1
 8000bd0:	4686      	mov	lr, r0
 8000bd2:	fab2 f282 	clz	r2, r2
 8000bd6:	d962      	bls.n	8000c9e <__udivmoddi4+0xde>
 8000bd8:	b14a      	cbz	r2, 8000bee <__udivmoddi4+0x2e>
 8000bda:	f1c2 0320 	rsb	r3, r2, #32
 8000bde:	4091      	lsls	r1, r2
 8000be0:	fa20 f303 	lsr.w	r3, r0, r3
 8000be4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be8:	4319      	orrs	r1, r3
 8000bea:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bf2:	fa1f f68c 	uxth.w	r6, ip
 8000bf6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bfa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bfe:	fb07 1114 	mls	r1, r7, r4, r1
 8000c02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c06:	fb04 f106 	mul.w	r1, r4, r6
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c16:	f080 8112 	bcs.w	8000e3e <__udivmoddi4+0x27e>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 810f 	bls.w	8000e3e <__udivmoddi4+0x27e>
 8000c20:	3c02      	subs	r4, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a59      	subs	r1, r3, r1
 8000c26:	fa1f f38e 	uxth.w	r3, lr
 8000c2a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c2e:	fb07 1110 	mls	r1, r7, r0, r1
 8000c32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c36:	fb00 f606 	mul.w	r6, r0, r6
 8000c3a:	429e      	cmp	r6, r3
 8000c3c:	d90a      	bls.n	8000c54 <__udivmoddi4+0x94>
 8000c3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c42:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c46:	f080 80fc 	bcs.w	8000e42 <__udivmoddi4+0x282>
 8000c4a:	429e      	cmp	r6, r3
 8000c4c:	f240 80f9 	bls.w	8000e42 <__udivmoddi4+0x282>
 8000c50:	4463      	add	r3, ip
 8000c52:	3802      	subs	r0, #2
 8000c54:	1b9b      	subs	r3, r3, r6
 8000c56:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	b11d      	cbz	r5, 8000c66 <__udivmoddi4+0xa6>
 8000c5e:	40d3      	lsrs	r3, r2
 8000c60:	2200      	movs	r2, #0
 8000c62:	e9c5 3200 	strd	r3, r2, [r5]
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d905      	bls.n	8000c7a <__udivmoddi4+0xba>
 8000c6e:	b10d      	cbz	r5, 8000c74 <__udivmoddi4+0xb4>
 8000c70:	e9c5 0100 	strd	r0, r1, [r5]
 8000c74:	2100      	movs	r1, #0
 8000c76:	4608      	mov	r0, r1
 8000c78:	e7f5      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000c7a:	fab3 f183 	clz	r1, r3
 8000c7e:	2900      	cmp	r1, #0
 8000c80:	d146      	bne.n	8000d10 <__udivmoddi4+0x150>
 8000c82:	42a3      	cmp	r3, r4
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0xcc>
 8000c86:	4290      	cmp	r0, r2
 8000c88:	f0c0 80f0 	bcc.w	8000e6c <__udivmoddi4+0x2ac>
 8000c8c:	1a86      	subs	r6, r0, r2
 8000c8e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	2d00      	cmp	r5, #0
 8000c96:	d0e6      	beq.n	8000c66 <__udivmoddi4+0xa6>
 8000c98:	e9c5 6300 	strd	r6, r3, [r5]
 8000c9c:	e7e3      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000c9e:	2a00      	cmp	r2, #0
 8000ca0:	f040 8090 	bne.w	8000dc4 <__udivmoddi4+0x204>
 8000ca4:	eba1 040c 	sub.w	r4, r1, ip
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	fa1f f78c 	uxth.w	r7, ip
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cb6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cba:	fb08 4416 	mls	r4, r8, r6, r4
 8000cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc2:	fb07 f006 	mul.w	r0, r7, r6
 8000cc6:	4298      	cmp	r0, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x11c>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x11a>
 8000cd4:	4298      	cmp	r0, r3
 8000cd6:	f200 80cd 	bhi.w	8000e74 <__udivmoddi4+0x2b4>
 8000cda:	4626      	mov	r6, r4
 8000cdc:	1a1c      	subs	r4, r3, r0
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ce6:	fb08 4410 	mls	r4, r8, r0, r4
 8000cea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cee:	fb00 f707 	mul.w	r7, r0, r7
 8000cf2:	429f      	cmp	r7, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x148>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x146>
 8000d00:	429f      	cmp	r7, r3
 8000d02:	f200 80b0 	bhi.w	8000e66 <__udivmoddi4+0x2a6>
 8000d06:	4620      	mov	r0, r4
 8000d08:	1bdb      	subs	r3, r3, r7
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	e7a5      	b.n	8000c5c <__udivmoddi4+0x9c>
 8000d10:	f1c1 0620 	rsb	r6, r1, #32
 8000d14:	408b      	lsls	r3, r1
 8000d16:	fa22 f706 	lsr.w	r7, r2, r6
 8000d1a:	431f      	orrs	r7, r3
 8000d1c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d20:	fa04 f301 	lsl.w	r3, r4, r1
 8000d24:	ea43 030c 	orr.w	r3, r3, ip
 8000d28:	40f4      	lsrs	r4, r6
 8000d2a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d2e:	0c38      	lsrs	r0, r7, #16
 8000d30:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d34:	fbb4 fef0 	udiv	lr, r4, r0
 8000d38:	fa1f fc87 	uxth.w	ip, r7
 8000d3c:	fb00 441e 	mls	r4, r0, lr, r4
 8000d40:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d44:	fb0e f90c 	mul.w	r9, lr, ip
 8000d48:	45a1      	cmp	r9, r4
 8000d4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4e:	d90a      	bls.n	8000d66 <__udivmoddi4+0x1a6>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d56:	f080 8084 	bcs.w	8000e62 <__udivmoddi4+0x2a2>
 8000d5a:	45a1      	cmp	r9, r4
 8000d5c:	f240 8081 	bls.w	8000e62 <__udivmoddi4+0x2a2>
 8000d60:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d64:	443c      	add	r4, r7
 8000d66:	eba4 0409 	sub.w	r4, r4, r9
 8000d6a:	fa1f f983 	uxth.w	r9, r3
 8000d6e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d72:	fb00 4413 	mls	r4, r0, r3, r4
 8000d76:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d7a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d7e:	45a4      	cmp	ip, r4
 8000d80:	d907      	bls.n	8000d92 <__udivmoddi4+0x1d2>
 8000d82:	193c      	adds	r4, r7, r4
 8000d84:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d88:	d267      	bcs.n	8000e5a <__udivmoddi4+0x29a>
 8000d8a:	45a4      	cmp	ip, r4
 8000d8c:	d965      	bls.n	8000e5a <__udivmoddi4+0x29a>
 8000d8e:	3b02      	subs	r3, #2
 8000d90:	443c      	add	r4, r7
 8000d92:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d96:	fba0 9302 	umull	r9, r3, r0, r2
 8000d9a:	eba4 040c 	sub.w	r4, r4, ip
 8000d9e:	429c      	cmp	r4, r3
 8000da0:	46ce      	mov	lr, r9
 8000da2:	469c      	mov	ip, r3
 8000da4:	d351      	bcc.n	8000e4a <__udivmoddi4+0x28a>
 8000da6:	d04e      	beq.n	8000e46 <__udivmoddi4+0x286>
 8000da8:	b155      	cbz	r5, 8000dc0 <__udivmoddi4+0x200>
 8000daa:	ebb8 030e 	subs.w	r3, r8, lr
 8000dae:	eb64 040c 	sbc.w	r4, r4, ip
 8000db2:	fa04 f606 	lsl.w	r6, r4, r6
 8000db6:	40cb      	lsrs	r3, r1
 8000db8:	431e      	orrs	r6, r3
 8000dba:	40cc      	lsrs	r4, r1
 8000dbc:	e9c5 6400 	strd	r6, r4, [r5]
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	e750      	b.n	8000c66 <__udivmoddi4+0xa6>
 8000dc4:	f1c2 0320 	rsb	r3, r2, #32
 8000dc8:	fa20 f103 	lsr.w	r1, r0, r3
 8000dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd0:	fa24 f303 	lsr.w	r3, r4, r3
 8000dd4:	4094      	lsls	r4, r2
 8000dd6:	430c      	orrs	r4, r1
 8000dd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ddc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000de0:	fa1f f78c 	uxth.w	r7, ip
 8000de4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de8:	fb08 3110 	mls	r1, r8, r0, r3
 8000dec:	0c23      	lsrs	r3, r4, #16
 8000dee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df2:	fb00 f107 	mul.w	r1, r0, r7
 8000df6:	4299      	cmp	r1, r3
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x24c>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e02:	d22c      	bcs.n	8000e5e <__udivmoddi4+0x29e>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	d92a      	bls.n	8000e5e <__udivmoddi4+0x29e>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1a5b      	subs	r3, r3, r1
 8000e0e:	b2a4      	uxth	r4, r4
 8000e10:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e14:	fb08 3311 	mls	r3, r8, r1, r3
 8000e18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e1c:	fb01 f307 	mul.w	r3, r1, r7
 8000e20:	42a3      	cmp	r3, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x276>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e2c:	d213      	bcs.n	8000e56 <__udivmoddi4+0x296>
 8000e2e:	42a3      	cmp	r3, r4
 8000e30:	d911      	bls.n	8000e56 <__udivmoddi4+0x296>
 8000e32:	3902      	subs	r1, #2
 8000e34:	4464      	add	r4, ip
 8000e36:	1ae4      	subs	r4, r4, r3
 8000e38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e3c:	e739      	b.n	8000cb2 <__udivmoddi4+0xf2>
 8000e3e:	4604      	mov	r4, r0
 8000e40:	e6f0      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e42:	4608      	mov	r0, r1
 8000e44:	e706      	b.n	8000c54 <__udivmoddi4+0x94>
 8000e46:	45c8      	cmp	r8, r9
 8000e48:	d2ae      	bcs.n	8000da8 <__udivmoddi4+0x1e8>
 8000e4a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e4e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e52:	3801      	subs	r0, #1
 8000e54:	e7a8      	b.n	8000da8 <__udivmoddi4+0x1e8>
 8000e56:	4631      	mov	r1, r6
 8000e58:	e7ed      	b.n	8000e36 <__udivmoddi4+0x276>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	e799      	b.n	8000d92 <__udivmoddi4+0x1d2>
 8000e5e:	4630      	mov	r0, r6
 8000e60:	e7d4      	b.n	8000e0c <__udivmoddi4+0x24c>
 8000e62:	46d6      	mov	lr, sl
 8000e64:	e77f      	b.n	8000d66 <__udivmoddi4+0x1a6>
 8000e66:	4463      	add	r3, ip
 8000e68:	3802      	subs	r0, #2
 8000e6a:	e74d      	b.n	8000d08 <__udivmoddi4+0x148>
 8000e6c:	4606      	mov	r6, r0
 8000e6e:	4623      	mov	r3, r4
 8000e70:	4608      	mov	r0, r1
 8000e72:	e70f      	b.n	8000c94 <__udivmoddi4+0xd4>
 8000e74:	3e02      	subs	r6, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	e730      	b.n	8000cdc <__udivmoddi4+0x11c>
 8000e7a:	bf00      	nop

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <micros>:
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

__STATIC_INLINE uint32_t micros(void){
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8000e84:	4b07      	ldr	r3, [pc, #28]	@ (8000ea4 <micros+0x24>)
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	4b07      	ldr	r3, [pc, #28]	@ (8000ea8 <micros+0x28>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4907      	ldr	r1, [pc, #28]	@ (8000eac <micros+0x2c>)
 8000e8e:	fba1 1303 	umull	r1, r3, r1, r3
 8000e92:	0c9b      	lsrs	r3, r3, #18
 8000e94:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e0001000 	.word	0xe0001000
 8000ea8:	20000084 	.word	0x20000084
 8000eac:	431bde83 	.word	0x431bde83

08000eb0 <AS5600_ReadRegister>:

/*
 * Static low level functions to read/write to registers
 */
static HAL_StatusTypeDef AS5600_ReadRegister(AS5600 *dev, uint8_t reg, uint8_t *data)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b088      	sub	sp, #32
 8000eb4:	af04      	add	r7, sp, #16
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	460b      	mov	r3, r1
 8000eba:	607a      	str	r2, [r7, #4]
 8000ebc:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(dev->i2cHandle, AS5600_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	6818      	ldr	r0, [r3, #0]
 8000ec2:	7afb      	ldrb	r3, [r7, #11]
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	9302      	str	r3, [sp, #8]
 8000ecc:	2301      	movs	r3, #1
 8000ece:	9301      	str	r3, [sp, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	216c      	movs	r1, #108	@ 0x6c
 8000ed8:	f002 f918 	bl	800310c <HAL_I2C_Mem_Read>
 8000edc:	4603      	mov	r3, r0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <AS5600_ReadRegisters>:

static HAL_StatusTypeDef AS5600_ReadRegisters(AS5600 *dev, uint8_t reg, uint8_t *data, uint8_t length)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b088      	sub	sp, #32
 8000eea:	af04      	add	r7, sp, #16
 8000eec:	60f8      	str	r0, [r7, #12]
 8000eee:	607a      	str	r2, [r7, #4]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	72fb      	strb	r3, [r7, #11]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(dev->i2cHandle, AS5600_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	6818      	ldr	r0, [r3, #0]
 8000efe:	7afb      	ldrb	r3, [r7, #11]
 8000f00:	b29a      	uxth	r2, r3
 8000f02:	7abb      	ldrb	r3, [r7, #10]
 8000f04:	b29b      	uxth	r3, r3
 8000f06:	f04f 31ff 	mov.w	r1, #4294967295
 8000f0a:	9102      	str	r1, [sp, #8]
 8000f0c:	9301      	str	r3, [sp, #4]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2301      	movs	r3, #1
 8000f14:	216c      	movs	r1, #108	@ 0x6c
 8000f16:	f002 f8f9 	bl	800310c <HAL_I2C_Mem_Read>
 8000f1a:	4603      	mov	r3, r0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <AS5600_ZeroAngle>:
/*
 * @brief Zeroes the sensor value.
 * @param[in] AS5600* sensor
 */
void AS5600_ZeroAngle(AS5600* dev)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	dev->total_angle_rad = 0;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f04f 0200 	mov.w	r2, #0
 8000f32:	609a      	str	r2, [r3, #8]
	dev->prev_raw_angle = AS5600_ReadRawAngle(dev);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f000 f90b 	bl	8001150 <AS5600_ReadRawAngle>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	809a      	strh	r2, [r3, #4]
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	0000      	movs	r0, r0
 8000f4c:	0000      	movs	r0, r0
	...

08000f50 <AS5600_Init>:
/*
 * Initialization
 * Pass the struct to each function as pointer
 */
uint8_t AS5600_Init(AS5600* dev, I2C_HandleTypeDef* i2c_handle, uint8_t zero)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	71fb      	strb	r3, [r7, #7]
	/* Set struct params */
	dev->i2cHandle = i2c_handle;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	68ba      	ldr	r2, [r7, #8]
 8000f62:	601a      	str	r2, [r3, #0]
	dev->total_angle_rad = 0;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f04f 0200 	mov.w	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
	dev->prev_time_us = 0;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2200      	movs	r2, #0
 8000f70:	60da      	str	r2, [r3, #12]

	uint8_t err_num = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	77fb      	strb	r3, [r7, #31]

	/*
	 * Check magnet strength
	 */
	HAL_StatusTypeDef magnet_status;
	uint8_t regdata = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	767b      	strb	r3, [r7, #25]

	magnet_status = AS5600_ReadRegister(dev, MAGNET_STATUS_REG, &regdata);
 8000f7a:	f107 0319 	add.w	r3, r7, #25
 8000f7e:	461a      	mov	r2, r3
 8000f80:	210b      	movs	r1, #11
 8000f82:	68f8      	ldr	r0, [r7, #12]
 8000f84:	f7ff ff94 	bl	8000eb0 <AS5600_ReadRegister>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	77bb      	strb	r3, [r7, #30]
	err_num += (magnet_status != HAL_OK);
 8000f8c:	7fbb      	ldrb	r3, [r7, #30]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	bf14      	ite	ne
 8000f92:	2301      	movne	r3, #1
 8000f94:	2300      	moveq	r3, #0
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	461a      	mov	r2, r3
 8000f9a:	7ffb      	ldrb	r3, [r7, #31]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	77fb      	strb	r3, [r7, #31]

	/* bit[5] indicates magnet present if set */
	if(!(regdata & (1 << 5))){
 8000fa0:	7e7b      	ldrb	r3, [r7, #25]
 8000fa2:	f003 0320 	and.w	r3, r3, #32
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d101      	bne.n	8000fae <AS5600_Init+0x5e>

		return 255;
 8000faa:	23ff      	movs	r3, #255	@ 0xff
 8000fac:	e038      	b.n	8001020 <AS5600_Init+0xd0>
	}

	/* initialize starting angle */
	uint8_t regdata_angle[2] = {0, 0};
 8000fae:	2300      	movs	r3, #0
 8000fb0:	82bb      	strh	r3, [r7, #20]
	HAL_StatusTypeDef status = AS5600_ReadRegisters(dev, RAW_ANGLE_MSB_REG, regdata_angle, 2);
 8000fb2:	f107 0214 	add.w	r2, r7, #20
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	210c      	movs	r1, #12
 8000fba:	68f8      	ldr	r0, [r7, #12]
 8000fbc:	f7ff ff93 	bl	8000ee6 <AS5600_ReadRegisters>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	777b      	strb	r3, [r7, #29]

	/* Mask & shift 4 MSB left by 8 and concatenate with 8 LSBs */
	uint16_t raw_angle = (((regdata_angle[0] & 0x0F) << 8) | regdata_angle[1]);
 8000fc4:	7d3b      	ldrb	r3, [r7, #20]
 8000fc6:	021b      	lsls	r3, r3, #8
 8000fc8:	b21b      	sxth	r3, r3
 8000fca:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000fce:	b21a      	sxth	r2, r3
 8000fd0:	7d7b      	ldrb	r3, [r7, #21]
 8000fd2:	b21b      	sxth	r3, r3
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	837b      	strh	r3, [r7, #26]

	err_num += (status != HAL_OK);
 8000fda:	7f7b      	ldrb	r3, [r7, #29]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	bf14      	ite	ne
 8000fe0:	2301      	movne	r3, #1
 8000fe2:	2300      	moveq	r3, #0
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	7ffb      	ldrb	r3, [r7, #31]
 8000fea:	4413      	add	r3, r2
 8000fec:	77fb      	strb	r3, [r7, #31]

	dev->prev_raw_angle = raw_angle;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	8b7a      	ldrh	r2, [r7, #26]
 8000ff2:	809a      	strh	r2, [r3, #4]

	if(!zero)
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d111      	bne.n	800101e <AS5600_Init+0xce>
	{
		dev->total_angle_rad = raw_angle * BIT_TO_RAD;
 8000ffa:	8b7b      	ldrh	r3, [r7, #26]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fa3d 	bl	800047c <__aeabi_i2d>
 8001002:	a309      	add	r3, pc, #36	@ (adr r3, 8001028 <AS5600_Init+0xd8>)
 8001004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001008:	f7ff faa2 	bl	8000550 <__aeabi_dmul>
 800100c:	4602      	mov	r2, r0
 800100e:	460b      	mov	r3, r1
 8001010:	4610      	mov	r0, r2
 8001012:	4619      	mov	r1, r3
 8001014:	f7ff fd6c 	bl	8000af0 <__aeabi_d2f>
 8001018:	4602      	mov	r2, r0
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	609a      	str	r2, [r3, #8]
	}

	return err_num;
 800101e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3720      	adds	r7, #32
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	8b5cd7aa 	.word	0x8b5cd7aa
 800102c:	3f59238d 	.word	0x3f59238d

08001030 <AS5600_ReadAngle>:

/*
 * Read sensor value
 */
float AS5600_ReadAngle(AS5600 *dev)
{
 8001030:	b5b0      	push	{r4, r5, r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	int16_t raw_angle = AS5600_ReadRawAngle(dev);
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f000 f889 	bl	8001150 <AS5600_ReadRawAngle>
 800103e:	4603      	mov	r3, r0
 8001040:	81fb      	strh	r3, [r7, #14]
	int16_t delta = raw_angle - dev->prev_raw_angle;
 8001042:	89fa      	ldrh	r2, [r7, #14]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	889b      	ldrh	r3, [r3, #4]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	b29b      	uxth	r3, r3
 800104c:	81bb      	strh	r3, [r7, #12]

	/*
	 * Positive large delta -> negative overflow
	 * Negative large delta -> positive overflow
	 */
	if(delta > HALF_MAX_RESOLUTION)
 800104e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001052:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001056:	db23      	blt.n	80010a0 <AS5600_ReadAngle+0x70>
	{
		dev->total_angle_rad -= (MAX_RESOLUTION - delta) * BIT_TO_RAD;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fa1f 	bl	80004a0 <__aeabi_f2d>
 8001062:	4604      	mov	r4, r0
 8001064:	460d      	mov	r5, r1
 8001066:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800106a:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 800106e:	330f      	adds	r3, #15
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff fa03 	bl	800047c <__aeabi_i2d>
 8001076:	a334      	add	r3, pc, #208	@ (adr r3, 8001148 <AS5600_ReadAngle+0x118>)
 8001078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800107c:	f7ff fa68 	bl	8000550 <__aeabi_dmul>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4620      	mov	r0, r4
 8001086:	4629      	mov	r1, r5
 8001088:	f7ff f8aa 	bl	80001e0 <__aeabi_dsub>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff fd2c 	bl	8000af0 <__aeabi_d2f>
 8001098:	4602      	mov	r2, r0
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	e047      	b.n	8001130 <AS5600_ReadAngle+0x100>
	}
	else if(delta < -HALF_MAX_RESOLUTION)
 80010a0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010a4:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 80010a8:	dc22      	bgt.n	80010f0 <AS5600_ReadAngle+0xc0>
	{
		dev->total_angle_rad += (MAX_RESOLUTION + delta) * BIT_TO_RAD;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff f9f6 	bl	80004a0 <__aeabi_f2d>
 80010b4:	4604      	mov	r4, r0
 80010b6:	460d      	mov	r5, r1
 80010b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010bc:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff f9db 	bl	800047c <__aeabi_i2d>
 80010c6:	a320      	add	r3, pc, #128	@ (adr r3, 8001148 <AS5600_ReadAngle+0x118>)
 80010c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010cc:	f7ff fa40 	bl	8000550 <__aeabi_dmul>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	4620      	mov	r0, r4
 80010d6:	4629      	mov	r1, r5
 80010d8:	f7ff f884 	bl	80001e4 <__adddf3>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	f7ff fd04 	bl	8000af0 <__aeabi_d2f>
 80010e8:	4602      	mov	r2, r0
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	e01f      	b.n	8001130 <AS5600_ReadAngle+0x100>
	}
	else
	{
		dev->total_angle_rad += delta * BIT_TO_RAD;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff f9d3 	bl	80004a0 <__aeabi_f2d>
 80010fa:	4604      	mov	r4, r0
 80010fc:	460d      	mov	r5, r1
 80010fe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff f9ba 	bl	800047c <__aeabi_i2d>
 8001108:	a30f      	add	r3, pc, #60	@ (adr r3, 8001148 <AS5600_ReadAngle+0x118>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	f7ff fa1f 	bl	8000550 <__aeabi_dmul>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4620      	mov	r0, r4
 8001118:	4629      	mov	r1, r5
 800111a:	f7ff f863 	bl	80001e4 <__adddf3>
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	4610      	mov	r0, r2
 8001124:	4619      	mov	r1, r3
 8001126:	f7ff fce3 	bl	8000af0 <__aeabi_d2f>
 800112a:	4602      	mov	r2, r0
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	609a      	str	r2, [r3, #8]
	}

	dev->prev_raw_angle = raw_angle;
 8001130:	89fa      	ldrh	r2, [r7, #14]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	809a      	strh	r2, [r3, #4]

	return dev->total_angle_rad;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	689b      	ldr	r3, [r3, #8]
 800113a:	ee07 3a90 	vmov	s15, r3
}
 800113e:	eeb0 0a67 	vmov.f32	s0, s15
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bdb0      	pop	{r4, r5, r7, pc}
 8001148:	8b5cd7aa 	.word	0x8b5cd7aa
 800114c:	3f59238d 	.word	0x3f59238d

08001150 <AS5600_ReadRawAngle>:

uint16_t AS5600_ReadRawAngle(AS5600 *dev)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	uint8_t regdata[2] = {0, 0};
 8001158:	2300      	movs	r3, #0
 800115a:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef status = AS5600_ReadRegisters(dev, RAW_ANGLE_MSB_REG, regdata, 2);
 800115c:	f107 0208 	add.w	r2, r7, #8
 8001160:	2302      	movs	r3, #2
 8001162:	210c      	movs	r1, #12
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff febe 	bl	8000ee6 <AS5600_ReadRegisters>
 800116a:	4603      	mov	r3, r0
 800116c:	73fb      	strb	r3, [r7, #15]

	/* Return early if register read fails */
	if(status != HAL_OK)
 800116e:	7bfb      	ldrb	r3, [r7, #15]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <AS5600_ReadRawAngle+0x28>
	{
		return 0;;
 8001174:	2300      	movs	r3, #0
 8001176:	e00b      	b.n	8001190 <AS5600_ReadRawAngle+0x40>
	}

	/* Mask & shift 4 MSB left by 8 and concatenate with 8 LSBs */
	uint16_t raw_angle = (((regdata[0] & 0x0F) << 8) | regdata[1]);
 8001178:	7a3b      	ldrb	r3, [r7, #8]
 800117a:	021b      	lsls	r3, r3, #8
 800117c:	b21b      	sxth	r3, r3
 800117e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001182:	b21a      	sxth	r2, r3
 8001184:	7a7b      	ldrb	r3, [r7, #9]
 8001186:	b21b      	sxth	r3, r3
 8001188:	4313      	orrs	r3, r2
 800118a:	b21b      	sxth	r3, r3
 800118c:	81bb      	strh	r3, [r7, #12]
	return raw_angle;
 800118e:	89bb      	ldrh	r3, [r7, #12]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3710      	adds	r7, #16
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <AS5600_GetVelocity>:

/* @brief Returns the rate of change of sensor angle (velocity)
 * @param[in] AS5600* sensor
 */
float AS5600_GetVelocity(AS5600* dev)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	uint32_t now_us = micros();
 80011a0:	f7ff fe6e 	bl	8000e80 <micros>
 80011a4:	6178      	str	r0, [r7, #20]

	/* Save previous angle */
	float prev_angle = dev->total_angle_rad;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	613b      	str	r3, [r7, #16]

	/* Calculate time delta */
	float time_delta_s = (now_us - dev->prev_time_us) * 0.000001f;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	ee07 3a90 	vmov	s15, r3
 80011b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011bc:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001228 <AS5600_GetVelocity+0x90>
 80011c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011c4:	edc7 7a03 	vstr	s15, [r7, #12]
	time_delta_s = (time_delta_s > 0.1) ? 0.0001f : time_delta_s;
 80011c8:	68f8      	ldr	r0, [r7, #12]
 80011ca:	f7ff f969 	bl	80004a0 <__aeabi_f2d>
 80011ce:	a314      	add	r3, pc, #80	@ (adr r3, 8001220 <AS5600_GetVelocity+0x88>)
 80011d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d4:	f7ff fc4c 	bl	8000a70 <__aeabi_dcmpgt>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <AS5600_GetVelocity+0x4a>
 80011de:	4b13      	ldr	r3, [pc, #76]	@ (800122c <AS5600_GetVelocity+0x94>)
 80011e0:	e000      	b.n	80011e4 <AS5600_GetVelocity+0x4c>
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	60fb      	str	r3, [r7, #12]

	/* Calculate angle delta */
	float angle_delta = AS5600_ReadAngle(dev) - prev_angle;
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ff22 	bl	8001030 <AS5600_ReadAngle>
 80011ec:	eeb0 7a40 	vmov.f32	s14, s0
 80011f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80011f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011f8:	edc7 7a02 	vstr	s15, [r7, #8]

	/* Update sensor timestamp */
	dev->prev_time_us = now_us;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	60da      	str	r2, [r3, #12]

	return angle_delta / time_delta_s;
 8001202:	ed97 7a02 	vldr	s14, [r7, #8]
 8001206:	edd7 7a03 	vldr	s15, [r7, #12]
 800120a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800120e:	eef0 7a66 	vmov.f32	s15, s13
}
 8001212:	eeb0 0a67 	vmov.f32	s0, s15
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	f3af 8000 	nop.w
 8001220:	9999999a 	.word	0x9999999a
 8001224:	3fb99999 	.word	0x3fb99999
 8001228:	358637bd 	.word	0x358637bd
 800122c:	38d1b717 	.word	0x38d1b717

08001230 <CLVelocityControl>:
	motor->dq->Uq = PID_Compute(motor->pid, target_pos, motor->sensor_dir * motor->vars->shaft_angle);
	SetTorque(motor);
}

void CLVelocityControl(BLDCMotor* motor, float target_velocity)
{
 8001230:	b5b0      	push	{r4, r5, r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	ed87 0a00 	vstr	s0, [r7]
	/* Check if sensor is attached */
	if(motor->sensor == NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	699b      	ldr	r3, [r3, #24]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d038      	beq.n	80012b6 <CLVelocityControl+0x86>
	{
		return;
	}

	if(motor->pid->mode != 1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800124c:	2b01      	cmp	r3, #1
 800124e:	d004      	beq.n	800125a <CLVelocityControl+0x2a>
	{
		motor->pid->mode = 1;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a1b      	ldr	r3, [r3, #32]
 8001254:	2201      	movs	r2, #1
 8001256:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	}

	motor->dq->Uq = PID_Compute(motor->pid, target_velocity, LPF_Filter(motor->lpf, AS5600_GetVelocity(motor->sensor)));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a1d      	ldr	r5, [r3, #32]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ff96 	bl	8001198 <AS5600_GetVelocity>
 800126c:	eef0 7a40 	vmov.f32	s15, s0
 8001270:	eeb0 0a67 	vmov.f32	s0, s15
 8001274:	4620      	mov	r0, r4
 8001276:	f000 fbdb 	bl	8001a30 <LPF_Filter>
 800127a:	eef0 7a40 	vmov.f32	s15, s0
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	691c      	ldr	r4, [r3, #16]
 8001282:	eef0 0a67 	vmov.f32	s1, s15
 8001286:	ed97 0a00 	vldr	s0, [r7]
 800128a:	4628      	mov	r0, r5
 800128c:	f000 ff6c 	bl	8002168 <PID_Compute>
 8001290:	eef0 7a40 	vmov.f32	s15, s0
 8001294:	edc4 7a00 	vstr	s15, [r4]
	motor->vars->shaft_angle = AS5600_ReadAngle(motor->sensor);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	699a      	ldr	r2, [r3, #24]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68dc      	ldr	r4, [r3, #12]
 80012a0:	4610      	mov	r0, r2
 80012a2:	f7ff fec5 	bl	8001030 <AS5600_ReadAngle>
 80012a6:	eef0 7a40 	vmov.f32	s15, s0
 80012aa:	edc4 7a00 	vstr	s15, [r4]
	SetTorque(motor);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 fa2e 	bl	8001710 <SetTorque>
 80012b4:	e000      	b.n	80012b8 <CLVelocityControl+0x88>
		return;
 80012b6:	bf00      	nop
}
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bdb0      	pop	{r4, r5, r7, pc}
	...

080012c0 <_cos>:
/*
 * @brief Cosine approximation
 * @param[in] angle(radians)
 * @return cos(angle)
 */
__STATIC_INLINE float _cos(float angle) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	ed87 0a01 	vstr	s0, [r7, #4]
  float _angle = angle + _PI_2;
 80012ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ce:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001318 <_cos+0x58>
 80012d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012d6:	edc7 7a03 	vstr	s15, [r7, #12]
  _angle = _angle > _2PI ? _angle - _2PI : _angle;
 80012da:	edd7 7a03 	vldr	s15, [r7, #12]
 80012de:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800131c <_cos+0x5c>
 80012e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	dd06      	ble.n	80012fa <_cos+0x3a>
 80012ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80012f0:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800131c <_cos+0x5c>
 80012f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012f8:	e001      	b.n	80012fe <_cos+0x3e>
 80012fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80012fe:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(_angle);
 8001302:	ed97 0a03 	vldr	s0, [r7, #12]
 8001306:	f000 fafb 	bl	8001900 <_sin>
 800130a:	eef0 7a40 	vmov.f32	s15, s0
}
 800130e:	eeb0 0a67 	vmov.f32	s0, s15
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	3fc90fdb 	.word	0x3fc90fdb
 800131c:	40c90fdb 	.word	0x40c90fdb

08001320 <_normalizeAngle>:
/*
 * @brief Normalize angle to [0, 2pi]
 * @param[in] angle(radians)
 * @return normalized_angle
 */
__STATIC_INLINE float _normalizeAngle(float angle){
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);       // fmod(x,y) returns remainder of x/y
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff f8b8 	bl	80004a0 <__aeabi_f2d>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 8001380 <_normalizeAngle+0x60>
 8001338:	ec43 2b10 	vmov	d0, r2, r3
 800133c:	f004 f9c4 	bl	80056c8 <fmod>
 8001340:	ec53 2b10 	vmov	r2, r3, d0
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fbd2 	bl	8000af0 <__aeabi_d2f>
 800134c:	4603      	mov	r3, r0
 800134e:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + _2PI);    // add 2pi to negative angles to make positive
 8001350:	edd7 7a03 	vldr	s15, [r7, #12]
 8001354:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800135c:	db02      	blt.n	8001364 <_normalizeAngle+0x44>
 800135e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001362:	e005      	b.n	8001370 <_normalizeAngle+0x50>
 8001364:	edd7 7a03 	vldr	s15, [r7, #12]
 8001368:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001388 <_normalizeAngle+0x68>
 800136c:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001370:	eeb0 0a67 	vmov.f32	s0, s15
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	f3af 8000 	nop.w
 8001380:	60000000 	.word	0x60000000
 8001384:	401921fb 	.word	0x401921fb
 8001388:	40c90fdb 	.word	0x40c90fdb

0800138c <_electricalAngle>:
 * @brief Calculates electrical angle from rotor angle
 * @param[in] shaft_angle(radians)
 * @param[in] pole_pairs
 * @return electrical angle
 */
__STATIC_INLINE float _electricalAngle(float shaft_angle, uint8_t pole_pairs){
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	ed87 0a01 	vstr	s0, [r7, #4]
 8001396:	4603      	mov	r3, r0
 8001398:	70fb      	strb	r3, [r7, #3]
  return (shaft_angle * pole_pairs);
 800139a:	78fb      	ldrb	r3, [r7, #3]
 800139c:	ee07 3a90 	vmov	s15, r3
 80013a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80013a8:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80013ac:	eeb0 0a67 	vmov.f32	s0, s15
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <PWM_Start_3_Channel>:
/*
 * @brief Starts PWM channels 1, 2, 3 of specified timer.
 * @param[in] TIM_HandleTypeDef timer
 */
void PWM_Start_3_Channel(TIM_HandleTypeDef* timer)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(timer, TIM_CHANNEL_1);
 80013c2:	2100      	movs	r1, #0
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f003 f93f 	bl	8004648 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer, TIM_CHANNEL_2);
 80013ca:	2104      	movs	r1, #4
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f003 f93b 	bl	8004648 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer, TIM_CHANNEL_3);
 80013d2:	2108      	movs	r1, #8
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f003 f937 	bl	8004648 <HAL_TIM_PWM_Start>
}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <SetPWM>:
 * @scope static
 * @brief Set pwm duty cycle of timer channels
 * @param[in] BLDCMotor* motor
 */
__STATIC_INLINE void SetPWM(BLDCMotor* motor)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
	uint16_t ARR = motor->timer->Instance->ARR;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013f4:	81fb      	strh	r3, [r7, #14]
	motor->timer->Instance->CCR1 = _constrain(motor->pv->Ua / motor->supply_voltage, 0.0f, 1.0f) * ARR;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	695b      	ldr	r3, [r3, #20]
 80013fa:	edd3 6a00 	vldr	s13, [r3]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	ed93 7a02 	vldr	s14, [r3, #8]
 8001404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001408:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800140c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001410:	d502      	bpl.n	8001418 <SetPWM+0x34>
 8001412:	eddf 7a56 	vldr	s15, [pc, #344]	@ 800156c <SetPWM+0x188>
 8001416:	e01b      	b.n	8001450 <SetPWM+0x6c>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	edd3 6a00 	vldr	s13, [r3]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	ed93 7a02 	vldr	s14, [r3, #8]
 8001426:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800142a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800142e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001436:	dd02      	ble.n	800143e <SetPWM+0x5a>
 8001438:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800143c:	e008      	b.n	8001450 <SetPWM+0x6c>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	edd3 6a00 	vldr	s13, [r3]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	ed93 7a02 	vldr	s14, [r3, #8]
 800144c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001450:	89fb      	ldrh	r3, [r7, #14]
 8001452:	ee07 3a10 	vmov	s14, r3
 8001456:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800145a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001468:	ee17 2a90 	vmov	r2, s15
 800146c:	635a      	str	r2, [r3, #52]	@ 0x34
	motor->timer->Instance->CCR2 = _constrain(motor->pv->Ub / motor->supply_voltage, 0.0f, 1.0f) * ARR;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	edd3 6a01 	vldr	s13, [r3, #4]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	ed93 7a02 	vldr	s14, [r3, #8]
 800147c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001480:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001488:	d502      	bpl.n	8001490 <SetPWM+0xac>
 800148a:	eddf 7a38 	vldr	s15, [pc, #224]	@ 800156c <SetPWM+0x188>
 800148e:	e01b      	b.n	80014c8 <SetPWM+0xe4>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	695b      	ldr	r3, [r3, #20]
 8001494:	edd3 6a01 	vldr	s13, [r3, #4]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	ed93 7a02 	vldr	s14, [r3, #8]
 800149e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80014a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ae:	dd02      	ble.n	80014b6 <SetPWM+0xd2>
 80014b0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80014b4:	e008      	b.n	80014c8 <SetPWM+0xe4>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	edd3 6a01 	vldr	s13, [r3, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	ed93 7a02 	vldr	s14, [r3, #8]
 80014c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014c8:	89fb      	ldrh	r3, [r7, #14]
 80014ca:	ee07 3a10 	vmov	s14, r3
 80014ce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80014d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014e0:	ee17 2a90 	vmov	r2, s15
 80014e4:	639a      	str	r2, [r3, #56]	@ 0x38
	motor->timer->Instance->CCR3 = _constrain(motor->pv->Uc / motor->supply_voltage, 0.0f, 1.0f) * ARR;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	edd3 6a02 	vldr	s13, [r3, #8]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	ed93 7a02 	vldr	s14, [r3, #8]
 80014f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001500:	d502      	bpl.n	8001508 <SetPWM+0x124>
 8001502:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800156c <SetPWM+0x188>
 8001506:	e01b      	b.n	8001540 <SetPWM+0x15c>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	ed93 7a02 	vldr	s14, [r3, #8]
 8001516:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800151a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800151e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001526:	dd02      	ble.n	800152e <SetPWM+0x14a>
 8001528:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800152c:	e008      	b.n	8001540 <SetPWM+0x15c>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	695b      	ldr	r3, [r3, #20]
 8001532:	edd3 6a02 	vldr	s13, [r3, #8]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	ed93 7a02 	vldr	s14, [r3, #8]
 800153c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001540:	89fb      	ldrh	r3, [r7, #14]
 8001542:	ee07 3a10 	vmov	s14, r3
 8001546:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800154a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001558:	ee17 2a90 	vmov	r2, s15
 800155c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800155e:	bf00      	nop
 8001560:	3714      	adds	r7, #20
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	00000000 	.word	0x00000000

08001570 <Var_t_Init>:
 * @scope Static
 * @brief Initializers for motor sub-structs
 * @retval Struct_t struct
 */
static Var_t Var_t_Init()
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
	Var_t vars = {
 8001578:	f04f 0300 	mov.w	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
		.shaft_angle = 0,
		.prev_us = 0
	};

	return vars;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	461a      	mov	r2, r3
 8001586:	f107 0308 	add.w	r3, r7, #8
 800158a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800158e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <DQ_t_Init>:

static DQ_t DQ_t_Init()
{
 800159e:	b480      	push	{r7}
 80015a0:	b087      	sub	sp, #28
 80015a2:	af00      	add	r7, sp, #0
	DQ_t dq = {
 80015a4:	f04f 0300 	mov.w	r3, #0
 80015a8:	60bb      	str	r3, [r7, #8]
 80015aa:	f04f 0300 	mov.w	r3, #0
 80015ae:	60fb      	str	r3, [r7, #12]
		.Ud = 0,
		.Uq = 0
	};

	return dq;
 80015b0:	f107 0310 	add.w	r3, r7, #16
 80015b4:	f107 0208 	add.w	r2, r7, #8
 80015b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80015c0:	693a      	ldr	r2, [r7, #16]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	ee07 2a10 	vmov	s14, r2
 80015c8:	ee07 3a90 	vmov	s15, r3
}
 80015cc:	eeb0 0a47 	vmov.f32	s0, s14
 80015d0:	eef0 0a67 	vmov.f32	s1, s15
 80015d4:	371c      	adds	r7, #28
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <PV_t_Init>:

static PV_t PV_t_Init()
{
 80015de:	b480      	push	{r7}
 80015e0:	b08b      	sub	sp, #44	@ 0x2c
 80015e2:	af00      	add	r7, sp, #0
	PV_t pv = {
 80015e4:	f04f 0300 	mov.w	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	f04f 0300 	mov.w	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
 80015f0:	f04f 0300 	mov.w	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
		.Ua = 0,
		.Ub = 0,
		.Uc = 0
	};

	return pv;
 80015f6:	f107 031c 	add.w	r3, r7, #28
 80015fa:	f107 0210 	add.w	r2, r7, #16
 80015fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001600:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001604:	69f9      	ldr	r1, [r7, #28]
 8001606:	6a3a      	ldr	r2, [r7, #32]
 8001608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160a:	ee06 1a90 	vmov	s13, r1
 800160e:	ee07 2a10 	vmov	s14, r2
 8001612:	ee07 3a90 	vmov	s15, r3
}
 8001616:	eeb0 0a66 	vmov.f32	s0, s13
 800161a:	eef0 0a47 	vmov.f32	s1, s14
 800161e:	eeb0 1a67 	vmov.f32	s2, s15
 8001622:	372c      	adds	r7, #44	@ 0x2c
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <BLDCMotor_Init>:
 * - Voltage limit is 3V by default.
 *
 * @retval BLDCMotor motor
 */
void BLDCMotor_Init(BLDCMotor* motor, Var_t* var, DQ_t* dq, PV_t* pv, PID_t* pid, LPF_t* lpf, TIM_HandleTypeDef* timer, uint8_t pole_pairs)
{
 800162c:	b5b0      	push	{r4, r5, r7, lr}
 800162e:	b090      	sub	sp, #64	@ 0x40
 8001630:	af00      	add	r7, sp, #0
 8001632:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001634:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001636:	637a      	str	r2, [r7, #52]	@ 0x34
 8001638:	633b      	str	r3, [r7, #48]	@ 0x30
	/* De-reference & initialize sub-structs */
	*var = Var_t_Init();
 800163a:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 800163c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff95 	bl	8001570 <Var_t_Init>
 8001646:	4622      	mov	r2, r4
 8001648:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800164c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001650:	e882 0003 	stmia.w	r2, {r0, r1}
	*dq = DQ_t_Init();
 8001654:	f7ff ffa3 	bl	800159e <DQ_t_Init>
 8001658:	eeb0 7a40 	vmov.f32	s14, s0
 800165c:	eef0 7a60 	vmov.f32	s15, s1
 8001660:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001662:	ed83 7a00 	vstr	s14, [r3]
 8001666:	edc3 7a01 	vstr	s15, [r3, #4]
	*pv = PV_t_Init();
 800166a:	f7ff ffb8 	bl	80015de <PV_t_Init>
 800166e:	eef0 6a40 	vmov.f32	s13, s0
 8001672:	eeb0 7a60 	vmov.f32	s14, s1
 8001676:	eef0 7a41 	vmov.f32	s15, s2
 800167a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800167c:	edc3 6a00 	vstr	s13, [r3]
 8001680:	ed83 7a01 	vstr	s14, [r3, #4]
 8001684:	edc3 7a02 	vstr	s15, [r3, #8]
	*pid = PID_Init();
 8001688:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 800168a:	463b      	mov	r3, r7
 800168c:	4618      	mov	r0, r3
 800168e:	f000 fd47 	bl	8002120 <PID_Init>
 8001692:	4625      	mov	r5, r4
 8001694:	463c      	mov	r4, r7
 8001696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800169a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800169c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800169e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016a2:	e885 0003 	stmia.w	r5, {r0, r1}
	*lpf = LPF_Init();
 80016a6:	6d7c      	ldr	r4, [r7, #84]	@ 0x54
 80016a8:	463b      	mov	r3, r7
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 fa30 	bl	8001b10 <LPF_Init>
 80016b0:	463b      	mov	r3, r7
 80016b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	/* BLDCMotor struct initialization */
	motor->vars = var;
 80016ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80016be:	60da      	str	r2, [r3, #12]
	motor->dq = dq;
 80016c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80016c4:	611a      	str	r2, [r3, #16]
	motor->pv = pv;
 80016c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80016ca:	615a      	str	r2, [r3, #20]
	motor->sensor = NULL;
 80016cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016ce:	2200      	movs	r2, #0
 80016d0:	619a      	str	r2, [r3, #24]
	motor->timer = timer;
 80016d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80016d6:	61da      	str	r2, [r3, #28]
	motor->pid = pid;
 80016d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80016dc:	621a      	str	r2, [r3, #32]
	motor->lpf = lpf;
 80016de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80016e2:	625a      	str	r2, [r3, #36]	@ 0x24
	motor->sensor_dir = 1;
 80016e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016e6:	2201      	movs	r2, #1
 80016e8:	701a      	strb	r2, [r3, #0]
	motor->pole_pairs = pole_pairs;
 80016ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016ec:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 80016f0:	705a      	strb	r2, [r3, #1]
	motor->supply_voltage = 12;
 80016f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016f4:	4a04      	ldr	r2, [pc, #16]	@ (8001708 <BLDCMotor_Init+0xdc>)
 80016f6:	609a      	str	r2, [r3, #8]
	motor->voltage_limit = 3;
 80016f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80016fa:	4a04      	ldr	r2, [pc, #16]	@ (800170c <BLDCMotor_Init+0xe0>)
 80016fc:	605a      	str	r2, [r3, #4]
}
 80016fe:	bf00      	nop
 8001700:	3740      	adds	r7, #64	@ 0x40
 8001702:	46bd      	mov	sp, r7
 8001704:	bdb0      	pop	{r4, r5, r7, pc}
 8001706:	bf00      	nop
 8001708:	41400000 	.word	0x41400000
 800170c:	40400000 	.word	0x40400000

08001710 <SetTorque>:
/*
 * @brief Inverse Clarke & Park transformations to calculate phase voltages
 * @param[in] BLDCMotor* motor
 * @note Calls setpwm()
 */
void SetTorque(BLDCMotor* motor) {
 8001710:	b580      	push	{r7, lr}
 8001712:	ed2d 8b02 	vpush	{d8}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	/* Constrain Uq to within voltage range */
	motor->dq->Uq = _constrain(motor->dq->Uq, -motor->voltage_limit, motor->voltage_limit);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	ed93 7a00 	vldr	s14, [r3]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	edd3 7a01 	vldr	s15, [r3, #4]
 800172a:	eef1 7a67 	vneg.f32	s15, s15
 800172e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001732:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001736:	d505      	bpl.n	8001744 <SetTorque+0x34>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	edd3 7a01 	vldr	s15, [r3, #4]
 800173e:	eef1 7a67 	vneg.f32	s15, s15
 8001742:	e013      	b.n	800176c <SetTorque+0x5c>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	ed93 7a00 	vldr	s14, [r3]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001752:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175a:	dd03      	ble.n	8001764 <SetTorque+0x54>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001762:	e003      	b.n	800176c <SetTorque+0x5c>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	edd3 7a00 	vldr	s15, [r3]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	edc3 7a00 	vstr	s15, [r3]
    /* Normalize electric angle */
    float el_angle = _normalizeAngle(_electricalAngle(motor->vars->shaft_angle, motor->pole_pairs));
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	edd3 7a00 	vldr	s15, [r3]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	785b      	ldrb	r3, [r3, #1]
 8001780:	4618      	mov	r0, r3
 8001782:	eeb0 0a67 	vmov.f32	s0, s15
 8001786:	f7ff fe01 	bl	800138c <_electricalAngle>
 800178a:	eef0 7a40 	vmov.f32	s15, s0
 800178e:	eeb0 0a67 	vmov.f32	s0, s15
 8001792:	f7ff fdc5 	bl	8001320 <_normalizeAngle>
 8001796:	ed87 0a05 	vstr	s0, [r7, #20]

	/* Inverse park transform */
	float Ualpha = -(motor->dq->Uq) * _sin(el_angle);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691b      	ldr	r3, [r3, #16]
 800179e:	edd3 7a00 	vldr	s15, [r3]
 80017a2:	eeb1 8a67 	vneg.f32	s16, s15
 80017a6:	ed97 0a05 	vldr	s0, [r7, #20]
 80017aa:	f000 f8a9 	bl	8001900 <_sin>
 80017ae:	eef0 7a40 	vmov.f32	s15, s0
 80017b2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80017b6:	edc7 7a04 	vstr	s15, [r7, #16]
	float Ubeta = motor->dq->Uq * _cos(el_angle);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	ed93 8a00 	vldr	s16, [r3]
 80017c2:	ed97 0a05 	vldr	s0, [r7, #20]
 80017c6:	f7ff fd7b 	bl	80012c0 <_cos>
 80017ca:	eef0 7a40 	vmov.f32	s15, s0
 80017ce:	ee68 7a27 	vmul.f32	s15, s16, s15
 80017d2:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Inverse Clarke transform */
	motor->pv->Ua = Ualpha + motor->supply_voltage / 2.0f;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80017dc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80017e0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80017ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f0:	edc3 7a00 	vstr	s15, [r3]
	motor->pv->Ub = (_SQRT3 * Ubeta - Ualpha) / 2.0f + motor->supply_voltage / 2.0f;
 80017f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80017f8:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001878 <SetTorque+0x168>
 80017fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001800:	edd7 7a04 	vldr	s15, [r7, #16]
 8001804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001808:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800180c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	edd3 6a02 	vldr	s13, [r3, #8]
 8001816:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800181a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001826:	edc3 7a01 	vstr	s15, [r3, #4]
	motor->pv->Uc = (- Ualpha - _SQRT3 * Ubeta) / 2.0f + motor->supply_voltage / 2.0f;
 800182a:	edd7 7a04 	vldr	s15, [r7, #16]
 800182e:	eeb1 7a67 	vneg.f32	s14, s15
 8001832:	edd7 7a03 	vldr	s15, [r7, #12]
 8001836:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8001878 <SetTorque+0x168>
 800183a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800183e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001842:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001846:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001850:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001854:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001860:	edc3 7a02 	vstr	s15, [r3, #8]

	SetPWM(motor);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f7ff fdbd 	bl	80013e4 <SetPWM>
}
 800186a:	bf00      	nop
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	ecbd 8b02 	vpop	{d8}
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	3fddb3d7 	.word	0x3fddb3d7

0800187c <LinkSensor>:
 * @param[in] BLDCMotor* motor
 * @param[in] AS5600* sensor
 * @param[in] I2C_HandleTypeDef *i2c_handle
 */
void LinkSensor(BLDCMotor* motor, AS5600* sensor, I2C_HandleTypeDef *i2c_handle)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
	uint8_t init_stat = AS5600_Init(sensor, i2c_handle, 1);
 8001888:	2201      	movs	r2, #1
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	68b8      	ldr	r0, [r7, #8]
 800188e:	f7ff fb5f 	bl	8000f50 <AS5600_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	75fb      	strb	r3, [r7, #23]

	/* Check if sensor link successful */
	if(init_stat != 0)
 8001896:	7dfb      	ldrb	r3, [r7, #23]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <LinkSensor+0x28>
	{
		motor->sensor = NULL;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2200      	movs	r2, #0
 80018a0:	619a      	str	r2, [r3, #24]
		return;
 80018a2:	e028      	b.n	80018f6 <LinkSensor+0x7a>
	}

	motor->sensor = sensor;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	68ba      	ldr	r2, [r7, #8]
 80018a8:	619a      	str	r2, [r3, #24]

	motor->dq->Uq = motor->voltage_limit / 2;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	ed93 7a01 	vldr	s14, [r3, #4]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	691b      	ldr	r3, [r3, #16]
 80018b4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80018b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018bc:	edc3 7a00 	vstr	s15, [r3]
	motor->vars->shaft_angle = _PI_2;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	4a0d      	ldr	r2, [pc, #52]	@ (80018fc <LinkSensor+0x80>)
 80018c6:	601a      	str	r2, [r3, #0]
	SetTorque(motor);
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f7ff ff21 	bl	8001710 <SetTorque>
	HAL_Delay(1500);
 80018ce:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80018d2:	f001 f833 	bl	800293c <HAL_Delay>
	AS5600_ZeroAngle(sensor);
 80018d6:	68b8      	ldr	r0, [r7, #8]
 80018d8:	f7ff fb24 	bl	8000f24 <AS5600_ZeroAngle>
	motor->dq->Uq = 0;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
	motor->vars->shaft_angle = 0;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
	SetTorque(motor);
 80018f0:	68f8      	ldr	r0, [r7, #12]
 80018f2:	f7ff ff0d 	bl	8001710 <SetTorque>
}
 80018f6:	3718      	adds	r7, #24
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	3fc90fdb 	.word	0x3fc90fdb

08001900 <_sin>:
/*
 * @brief Sine approximation using look-up table
 * @param[in] angle(radians)
 * @return sin(angle)
 */
float _sin(float angle){
 8001900:	b480      	push	{r7}
 8001902:	b087      	sub	sp, #28
 8001904:	af00      	add	r7, sp, #0
 8001906:	ed87 0a01 	vstr	s0, [r7, #4]

  int32_t first, second;
  uint16_t index = (uint16_t)(angle / _2PI * 65536.0f);
 800190a:	ed97 7a01 	vldr	s14, [r7, #4]
 800190e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80019f0 <_sin+0xf0>
 8001912:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001916:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80019f4 <_sin+0xf4>
 800191a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800191e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001922:	ee17 3a90 	vmov	r3, s15
 8001926:	81fb      	strh	r3, [r7, #14]
  int frac = index & 0xff;
 8001928:	89fb      	ldrh	r3, [r7, #14]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	60bb      	str	r3, [r7, #8]
  index = (index >> 8) & 0xff;
 800192e:	89fb      	ldrh	r3, [r7, #14]
 8001930:	0a1b      	lsrs	r3, r3, #8
 8001932:	81fb      	strh	r3, [r7, #14]

  if (index < 64){
 8001934:	89fb      	ldrh	r3, [r7, #14]
 8001936:	2b3f      	cmp	r3, #63	@ 0x3f
 8001938:	d80b      	bhi.n	8001952 <_sin+0x52>
    first = (int32_t)sineLUT[index];
 800193a:	89fb      	ldrh	r3, [r7, #14]
 800193c:	4a2e      	ldr	r2, [pc, #184]	@ (80019f8 <_sin+0xf8>)
 800193e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001942:	617b      	str	r3, [r7, #20]
    second = (int32_t)sineLUT[index + 1];
 8001944:	89fb      	ldrh	r3, [r7, #14]
 8001946:	3301      	adds	r3, #1
 8001948:	4a2b      	ldr	r2, [pc, #172]	@ (80019f8 <_sin+0xf8>)
 800194a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	e033      	b.n	80019ba <_sin+0xba>
  }
  else if (index < 128){
 8001952:	89fb      	ldrh	r3, [r7, #14]
 8001954:	2b7f      	cmp	r3, #127	@ 0x7f
 8001956:	d80e      	bhi.n	8001976 <_sin+0x76>
    first = (int32_t)sineLUT[128 - index];
 8001958:	89fb      	ldrh	r3, [r7, #14]
 800195a:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800195e:	4a26      	ldr	r2, [pc, #152]	@ (80019f8 <_sin+0xf8>)
 8001960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001964:	617b      	str	r3, [r7, #20]
    second = (int32_t)sineLUT[127 - index];
 8001966:	89fb      	ldrh	r3, [r7, #14]
 8001968:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800196c:	4a22      	ldr	r2, [pc, #136]	@ (80019f8 <_sin+0xf8>)
 800196e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	e021      	b.n	80019ba <_sin+0xba>
  }
  else if (index < 192){
 8001976:	89fb      	ldrh	r3, [r7, #14]
 8001978:	2bbf      	cmp	r3, #191	@ 0xbf
 800197a:	d80e      	bhi.n	800199a <_sin+0x9a>
    first = -(int32_t)sineLUT[index - 128];
 800197c:	89fb      	ldrh	r3, [r7, #14]
 800197e:	3b80      	subs	r3, #128	@ 0x80
 8001980:	4a1d      	ldr	r2, [pc, #116]	@ (80019f8 <_sin+0xf8>)
 8001982:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001986:	425b      	negs	r3, r3
 8001988:	617b      	str	r3, [r7, #20]
    second = -(int32_t)sineLUT[index - 127];
 800198a:	89fb      	ldrh	r3, [r7, #14]
 800198c:	3b7f      	subs	r3, #127	@ 0x7f
 800198e:	4a1a      	ldr	r2, [pc, #104]	@ (80019f8 <_sin+0xf8>)
 8001990:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001994:	425b      	negs	r3, r3
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	e00f      	b.n	80019ba <_sin+0xba>
  }
  else {
    first = -(int32_t)sineLUT[256 - index];
 800199a:	89fb      	ldrh	r3, [r7, #14]
 800199c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80019a0:	4a15      	ldr	r2, [pc, #84]	@ (80019f8 <_sin+0xf8>)
 80019a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019a6:	425b      	negs	r3, r3
 80019a8:	617b      	str	r3, [r7, #20]
    second = -(int32_t)sineLUT[255 - index];
 80019aa:	89fb      	ldrh	r3, [r7, #14]
 80019ac:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80019b0:	4a11      	ldr	r2, [pc, #68]	@ (80019f8 <_sin+0xf8>)
 80019b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019b6:	425b      	negs	r3, r3
 80019b8:	613b      	str	r3, [r7, #16]
  }

  return (first + (((second - first) * frac) >> 8)) / 32768.0f;
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	68ba      	ldr	r2, [r7, #8]
 80019c2:	fb02 f303 	mul.w	r3, r2, r3
 80019c6:	121a      	asrs	r2, r3, #8
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	4413      	add	r3, r2
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019d4:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80019fc <_sin+0xfc>
 80019d8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80019dc:	eef0 7a66 	vmov.f32	s15, s13
}
 80019e0:	eeb0 0a67 	vmov.f32	s0, s15
 80019e4:	371c      	adds	r7, #28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40c90fdb 	.word	0x40c90fdb
 80019f4:	47800000 	.word	0x47800000
 80019f8:	20000000 	.word	0x20000000
 80019fc:	47000000 	.word	0x47000000

08001a00 <micros>:
__STATIC_INLINE uint32_t micros(void){
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8001a04:	4b07      	ldr	r3, [pc, #28]	@ (8001a24 <micros+0x24>)
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	4b07      	ldr	r3, [pc, #28]	@ (8001a28 <micros+0x28>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4907      	ldr	r1, [pc, #28]	@ (8001a2c <micros+0x2c>)
 8001a0e:	fba1 1303 	umull	r1, r3, r1, r3
 8001a12:	0c9b      	lsrs	r3, r3, #18
 8001a14:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e0001000 	.word	0xe0001000
 8001a28:	20000084 	.word	0x20000084
 8001a2c:	431bde83 	.word	0x431bde83

08001a30 <LPF_Filter>:
 * @param[in] LPF_t lpf
 * @param[in] float data
 * @retval float filtered_data
 */
float LPF_Filter(LPF_t* lpf_dev, float x)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	ed87 0a00 	vstr	s0, [r7]
	/* Get current time & calculate time difference */
	uint32_t now_us = micros();
 8001a3c:	f7ff ffe0 	bl	8001a00 <micros>
 8001a40:	6138      	str	r0, [r7, #16]
	float dt = (now_us - lpf_dev->prev_us) * 0.000001f;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	ee07 3a90 	vmov	s15, r3
 8001a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a52:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8001b08 <LPF_Filter+0xd8>
 8001a56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a5a:	edc7 7a05 	vstr	s15, [r7, #20]

	/* Check if dt is reasonable; if not, discard value & return original x */
	if(dt < 0)
 8001a5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a6a:	d502      	bpl.n	8001a72 <LPF_Filter+0x42>
	{
		dt = 0.0001;
 8001a6c:	4b27      	ldr	r3, [pc, #156]	@ (8001b0c <LPF_Filter+0xdc>)
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	e012      	b.n	8001a98 <LPF_Filter+0x68>
	}
	else if(dt > 0.2)
 8001a72:	6978      	ldr	r0, [r7, #20]
 8001a74:	f7fe fd14 	bl	80004a0 <__aeabi_f2d>
 8001a78:	a321      	add	r3, pc, #132	@ (adr r3, 8001b00 <LPF_Filter+0xd0>)
 8001a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7e:	f7fe fff7 	bl	8000a70 <__aeabi_dcmpgt>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d007      	beq.n	8001a98 <LPF_Filter+0x68>
	{
		lpf_dev->prev_data = x;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	605a      	str	r2, [r3, #4]
		lpf_dev->prev_us = now_us;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	609a      	str	r2, [r3, #8]
		return x;
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	e029      	b.n	8001aec <LPF_Filter+0xbc>
	}

	/* Calculate alpha value & filtered datapoint */
	float alpha = lpf_dev->time_const / (lpf_dev->time_const + dt);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	edd3 6a00 	vldr	s13, [r3]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	ed93 7a00 	vldr	s14, [r3]
 8001aa4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001aa8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ab0:	edc7 7a03 	vstr	s15, [r7, #12]
	float y = alpha * lpf_dev->prev_data + (1.0f - alpha) * x;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	ed93 7a01 	vldr	s14, [r3, #4]
 8001aba:	edd7 7a03 	vldr	s15, [r7, #12]
 8001abe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ac2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ac6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001aca:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001ace:	edd7 7a00 	vldr	s15, [r7]
 8001ad2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ada:	edc7 7a02 	vstr	s15, [r7, #8]

	/* Update timestamps & previous data */
	lpf_dev->prev_data = y;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68ba      	ldr	r2, [r7, #8]
 8001ae2:	605a      	str	r2, [r3, #4]
	lpf_dev->prev_us = now_us;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	609a      	str	r2, [r3, #8]

	return y;
 8001aea:	68bb      	ldr	r3, [r7, #8]
}
 8001aec:	ee07 3a90 	vmov	s15, r3
 8001af0:	eeb0 0a67 	vmov.f32	s0, s15
 8001af4:	3718      	adds	r7, #24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	f3af 8000 	nop.w
 8001b00:	9999999a 	.word	0x9999999a
 8001b04:	3fc99999 	.word	0x3fc99999
 8001b08:	358637bd 	.word	0x358637bd
 8001b0c:	38d1b717 	.word	0x38d1b717

08001b10 <LPF_Init>:

/*
 * @brief LPF struct initialization function
 */
LPF_t LPF_Init()
{
 8001b10:	b490      	push	{r4, r7}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
	LPF_t lpf_dev = {
 8001b18:	4b09      	ldr	r3, [pc, #36]	@ (8001b40 <LPF_Init+0x30>)
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
			.prev_data = 0,
			.prev_us = 0,
			.time_const = 0.1
	};

	return lpf_dev;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	461c      	mov	r4, r3
 8001b2a:	f107 030c 	add.w	r3, r7, #12
 8001b2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001b32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc90      	pop	{r4, r7}
 8001b3e:	4770      	bx	lr
 8001b40:	3dcccccd 	.word	0x3dcccccd

08001b44 <DWT_Init>:
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8001b48:	4b08      	ldr	r3, [pc, #32]	@ (8001b6c <DWT_Init+0x28>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	4a07      	ldr	r2, [pc, #28]	@ (8001b6c <DWT_Init+0x28>)
 8001b4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b52:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8001b54:	4b06      	ldr	r3, [pc, #24]	@ (8001b70 <DWT_Init+0x2c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a05      	ldr	r2, [pc, #20]	@ (8001b70 <DWT_Init+0x2c>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000edf0 	.word	0xe000edf0
 8001b70:	e0001000 	.word	0xe0001000

08001b74 <micros>:
__STATIC_INLINE uint32_t micros(void){
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8001b78:	4b07      	ldr	r3, [pc, #28]	@ (8001b98 <micros+0x24>)
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	4b07      	ldr	r3, [pc, #28]	@ (8001b9c <micros+0x28>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4907      	ldr	r1, [pc, #28]	@ (8001ba0 <micros+0x2c>)
 8001b82:	fba1 1303 	umull	r1, r3, r1, r3
 8001b86:	0c9b      	lsrs	r3, r3, #18
 8001b88:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e0001000 	.word	0xe0001000
 8001b9c:	20000084 	.word	0x20000084
 8001ba0:	431bde83 	.word	0x431bde83

08001ba4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ba4:	b590      	push	{r4, r7, lr}
 8001ba6:	b0a9      	sub	sp, #164	@ 0xa4
 8001ba8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001baa:	f000 fe85 	bl	80028b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bae:	f000 f85d 	bl	8001c6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bb2:	f000 fa25 	bl	8002000 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001bb6:	f000 f8c1 	bl	8001d3c <MX_I2C1_Init>
  MX_TIM2_Init();
 8001bba:	f000 f91b 	bl	8001df4 <MX_TIM2_Init>
  MX_I2C2_Init();
 8001bbe:	f000 f8eb 	bl	8001d98 <MX_I2C2_Init>
  MX_TIM3_Init();
 8001bc2:	f000 f985 	bl	8001ed0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001bc6:	f000 f9f1 	bl	8001fac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  /* Start PWM channels */
  PWM_Start_3_Channel(&htim2);
 8001bca:	4824      	ldr	r0, [pc, #144]	@ (8001c5c <main+0xb8>)
 8001bcc:	f7ff fbf5 	bl	80013ba <PWM_Start_3_Channel>

  DWT_Init();
 8001bd0:	f7ff ffb8 	bl	8001b44 <DWT_Init>
  /* Create sensor & motor object */
  AS5600 s1;
  BLDCMotor m1;

  /* Init motor object */
  BLDC_Init(m1, htim2, 7);
 8001bd4:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8001bd8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001bdc:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001be0:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8001be4:	2307      	movs	r3, #7
 8001be6:	9303      	str	r3, [sp, #12]
 8001be8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c5c <main+0xb8>)
 8001bea:	9302      	str	r3, [sp, #8]
 8001bec:	463b      	mov	r3, r7
 8001bee:	9301      	str	r3, [sp, #4]
 8001bf0:	f107 030c 	add.w	r3, r7, #12
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	4623      	mov	r3, r4
 8001bf8:	f7ff fd18 	bl	800162c <BLDCMotor_Init>

  /* Attach sensor to motor object & initialize */
  LinkSensor(&m1, &s1, &hi2c1);
 8001bfc:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001c00:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001c04:	4a16      	ldr	r2, [pc, #88]	@ (8001c60 <main+0xbc>)
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fe38 	bl	800187c <LinkSensor>

  /* USB tx buffer */
  //uint8_t tx_buff[128];
  uint32_t prev_us = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //CLPositionControl(&m1, 2.0);
	  //OLVelocityControl(&m1, 10);
	  uint32_t now_us = micros();
 8001c12:	f7ff ffaf 	bl	8001b74 <micros>
 8001c16:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	  CLVelocityControl(&m1, 6);
 8001c1a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001c1e:	eeb1 0a08 	vmov.f32	s0, #24	@ 0x40c00000  6.0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fb04 	bl	8001230 <CLVelocityControl>
	  freq = 1 / ((now_us - prev_us) * 0.000001f);
 8001c28:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001c2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	ee07 3a90 	vmov	s15, r3
 8001c36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c3a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001c64 <main+0xc0>
 8001c3e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001c46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c4a:	4b07      	ldr	r3, [pc, #28]	@ (8001c68 <main+0xc4>)
 8001c4c:	edc3 7a00 	vstr	s15, [r3]
	  prev_us = now_us;
 8001c50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001c54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  {
 8001c58:	bf00      	nop
 8001c5a:	e7da      	b.n	8001c12 <main+0x6e>
 8001c5c:	200001a4 	.word	0x200001a4
 8001c60:	200000fc 	.word	0x200000fc
 8001c64:	358637bd 	.word	0x358637bd
 8001c68:	2000027c 	.word	0x2000027c

08001c6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b094      	sub	sp, #80	@ 0x50
 8001c70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c72:	f107 0320 	add.w	r3, r7, #32
 8001c76:	2230      	movs	r2, #48	@ 0x30
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f003 fcf2 	bl	8005664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c80:	f107 030c 	add.w	r3, r7, #12
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c90:	2300      	movs	r3, #0
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	4b27      	ldr	r3, [pc, #156]	@ (8001d34 <SystemClock_Config+0xc8>)
 8001c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c98:	4a26      	ldr	r2, [pc, #152]	@ (8001d34 <SystemClock_Config+0xc8>)
 8001c9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ca0:	4b24      	ldr	r3, [pc, #144]	@ (8001d34 <SystemClock_Config+0xc8>)
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cac:	2300      	movs	r3, #0
 8001cae:	607b      	str	r3, [r7, #4]
 8001cb0:	4b21      	ldr	r3, [pc, #132]	@ (8001d38 <SystemClock_Config+0xcc>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a20      	ldr	r2, [pc, #128]	@ (8001d38 <SystemClock_Config+0xcc>)
 8001cb6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d38 <SystemClock_Config+0xcc>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ccc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cd6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001cdc:	2319      	movs	r3, #25
 8001cde:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001ce0:	23c0      	movs	r3, #192	@ 0xc0
 8001ce2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ce8:	2304      	movs	r3, #4
 8001cea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cec:	f107 0320 	add.w	r3, r7, #32
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f001 ff13 	bl	8003b1c <HAL_RCC_OscConfig>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cfc:	f000 f9f2 	bl	80020e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d00:	230f      	movs	r3, #15
 8001d02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d04:	2302      	movs	r3, #2
 8001d06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001d16:	f107 030c 	add.w	r3, r7, #12
 8001d1a:	2103      	movs	r1, #3
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f002 f975 	bl	800400c <HAL_RCC_ClockConfig>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d28:	f000 f9dc 	bl	80020e4 <Error_Handler>
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	3750      	adds	r7, #80	@ 0x50
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40007000 	.word	0x40007000

08001d3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d40:	4b12      	ldr	r3, [pc, #72]	@ (8001d8c <MX_I2C1_Init+0x50>)
 8001d42:	4a13      	ldr	r2, [pc, #76]	@ (8001d90 <MX_I2C1_Init+0x54>)
 8001d44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d46:	4b11      	ldr	r3, [pc, #68]	@ (8001d8c <MX_I2C1_Init+0x50>)
 8001d48:	4a12      	ldr	r2, [pc, #72]	@ (8001d94 <MX_I2C1_Init+0x58>)
 8001d4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d8c <MX_I2C1_Init+0x50>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	@ (8001d8c <MX_I2C1_Init+0x50>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d58:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <MX_I2C1_Init+0x50>)
 8001d5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d60:	4b0a      	ldr	r3, [pc, #40]	@ (8001d8c <MX_I2C1_Init+0x50>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d66:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <MX_I2C1_Init+0x50>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d6c:	4b07      	ldr	r3, [pc, #28]	@ (8001d8c <MX_I2C1_Init+0x50>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d72:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <MX_I2C1_Init+0x50>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001d78:	4804      	ldr	r0, [pc, #16]	@ (8001d8c <MX_I2C1_Init+0x50>)
 8001d7a:	f001 f883 	bl	8002e84 <HAL_I2C_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001d84:	f000 f9ae 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001d88:	bf00      	nop
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	200000fc 	.word	0x200000fc
 8001d90:	40005400 	.word	0x40005400
 8001d94:	000186a0 	.word	0x000186a0

08001d98 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d9c:	4b12      	ldr	r3, [pc, #72]	@ (8001de8 <MX_I2C2_Init+0x50>)
 8001d9e:	4a13      	ldr	r2, [pc, #76]	@ (8001dec <MX_I2C2_Init+0x54>)
 8001da0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001da2:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <MX_I2C2_Init+0x50>)
 8001da4:	4a12      	ldr	r2, [pc, #72]	@ (8001df0 <MX_I2C2_Init+0x58>)
 8001da6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001da8:	4b0f      	ldr	r3, [pc, #60]	@ (8001de8 <MX_I2C2_Init+0x50>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001dae:	4b0e      	ldr	r3, [pc, #56]	@ (8001de8 <MX_I2C2_Init+0x50>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001db4:	4b0c      	ldr	r3, [pc, #48]	@ (8001de8 <MX_I2C2_Init+0x50>)
 8001db6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001de8 <MX_I2C2_Init+0x50>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001dc2:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <MX_I2C2_Init+0x50>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001dc8:	4b07      	ldr	r3, [pc, #28]	@ (8001de8 <MX_I2C2_Init+0x50>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001dce:	4b06      	ldr	r3, [pc, #24]	@ (8001de8 <MX_I2C2_Init+0x50>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001dd4:	4804      	ldr	r0, [pc, #16]	@ (8001de8 <MX_I2C2_Init+0x50>)
 8001dd6:	f001 f855 	bl	8002e84 <HAL_I2C_Init>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001de0:	f000 f980 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000150 	.word	0x20000150
 8001dec:	40005800 	.word	0x40005800
 8001df0:	000186a0 	.word	0x000186a0

08001df4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b08a      	sub	sp, #40	@ 0x28
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dfa:	f107 0320 	add.w	r3, r7, #32
 8001dfe:	2200      	movs	r2, #0
 8001e00:	601a      	str	r2, [r3, #0]
 8001e02:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e04:	1d3b      	adds	r3, r7, #4
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	60da      	str	r2, [r3, #12]
 8001e10:	611a      	str	r2, [r3, #16]
 8001e12:	615a      	str	r2, [r3, #20]
 8001e14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e16:	4b2d      	ldr	r3, [pc, #180]	@ (8001ecc <MX_TIM2_Init+0xd8>)
 8001e18:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001e1c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8001e1e:	4b2b      	ldr	r3, [pc, #172]	@ (8001ecc <MX_TIM2_Init+0xd8>)
 8001e20:	220a      	movs	r2, #10
 8001e22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e24:	4b29      	ldr	r3, [pc, #164]	@ (8001ecc <MX_TIM2_Init+0xd8>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001e2a:	4b28      	ldr	r3, [pc, #160]	@ (8001ecc <MX_TIM2_Init+0xd8>)
 8001e2c:	22ff      	movs	r2, #255	@ 0xff
 8001e2e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e30:	4b26      	ldr	r3, [pc, #152]	@ (8001ecc <MX_TIM2_Init+0xd8>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001e36:	4b25      	ldr	r3, [pc, #148]	@ (8001ecc <MX_TIM2_Init+0xd8>)
 8001e38:	2280      	movs	r2, #128	@ 0x80
 8001e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001e3c:	4823      	ldr	r0, [pc, #140]	@ (8001ecc <MX_TIM2_Init+0xd8>)
 8001e3e:	f002 fbb3 	bl	80045a8 <HAL_TIM_PWM_Init>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001e48:	f000 f94c 	bl	80020e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e50:	2300      	movs	r3, #0
 8001e52:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e54:	f107 0320 	add.w	r3, r7, #32
 8001e58:	4619      	mov	r1, r3
 8001e5a:	481c      	ldr	r0, [pc, #112]	@ (8001ecc <MX_TIM2_Init+0xd8>)
 8001e5c:	f003 f8bc 	bl	8004fd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001e66:	f000 f93d 	bl	80020e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e6a:	2360      	movs	r3, #96	@ 0x60
 8001e6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4812      	ldr	r0, [pc, #72]	@ (8001ecc <MX_TIM2_Init+0xd8>)
 8001e82:	f002 fd81 	bl	8004988 <HAL_TIM_PWM_ConfigChannel>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001e8c:	f000 f92a 	bl	80020e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e90:	1d3b      	adds	r3, r7, #4
 8001e92:	2204      	movs	r2, #4
 8001e94:	4619      	mov	r1, r3
 8001e96:	480d      	ldr	r0, [pc, #52]	@ (8001ecc <MX_TIM2_Init+0xd8>)
 8001e98:	f002 fd76 	bl	8004988 <HAL_TIM_PWM_ConfigChannel>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001ea2:	f000 f91f 	bl	80020e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ea6:	1d3b      	adds	r3, r7, #4
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4807      	ldr	r0, [pc, #28]	@ (8001ecc <MX_TIM2_Init+0xd8>)
 8001eae:	f002 fd6b 	bl	8004988 <HAL_TIM_PWM_ConfigChannel>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8001eb8:	f000 f914 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ebc:	4803      	ldr	r0, [pc, #12]	@ (8001ecc <MX_TIM2_Init+0xd8>)
 8001ebe:	f000 fb4d 	bl	800255c <HAL_TIM_MspPostInit>

}
 8001ec2:	bf00      	nop
 8001ec4:	3728      	adds	r7, #40	@ 0x28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	200001a4 	.word	0x200001a4

08001ed0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08a      	sub	sp, #40	@ 0x28
 8001ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed6:	f107 0320 	add.w	r3, r7, #32
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
 8001eec:	611a      	str	r2, [r3, #16]
 8001eee:	615a      	str	r2, [r3, #20]
 8001ef0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ef2:	4b2c      	ldr	r3, [pc, #176]	@ (8001fa4 <MX_TIM3_Init+0xd4>)
 8001ef4:	4a2c      	ldr	r2, [pc, #176]	@ (8001fa8 <MX_TIM3_Init+0xd8>)
 8001ef6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10;
 8001ef8:	4b2a      	ldr	r3, [pc, #168]	@ (8001fa4 <MX_TIM3_Init+0xd4>)
 8001efa:	220a      	movs	r2, #10
 8001efc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efe:	4b29      	ldr	r3, [pc, #164]	@ (8001fa4 <MX_TIM3_Init+0xd4>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8001f04:	4b27      	ldr	r3, [pc, #156]	@ (8001fa4 <MX_TIM3_Init+0xd4>)
 8001f06:	22ff      	movs	r2, #255	@ 0xff
 8001f08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0a:	4b26      	ldr	r3, [pc, #152]	@ (8001fa4 <MX_TIM3_Init+0xd4>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f10:	4b24      	ldr	r3, [pc, #144]	@ (8001fa4 <MX_TIM3_Init+0xd4>)
 8001f12:	2280      	movs	r2, #128	@ 0x80
 8001f14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001f16:	4823      	ldr	r0, [pc, #140]	@ (8001fa4 <MX_TIM3_Init+0xd4>)
 8001f18:	f002 fb46 	bl	80045a8 <HAL_TIM_PWM_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001f22:	f000 f8df 	bl	80020e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f26:	2300      	movs	r3, #0
 8001f28:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f2e:	f107 0320 	add.w	r3, r7, #32
 8001f32:	4619      	mov	r1, r3
 8001f34:	481b      	ldr	r0, [pc, #108]	@ (8001fa4 <MX_TIM3_Init+0xd4>)
 8001f36:	f003 f84f 	bl	8004fd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001f40:	f000 f8d0 	bl	80020e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f44:	2360      	movs	r3, #96	@ 0x60
 8001f46:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f54:	1d3b      	adds	r3, r7, #4
 8001f56:	2200      	movs	r2, #0
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4812      	ldr	r0, [pc, #72]	@ (8001fa4 <MX_TIM3_Init+0xd4>)
 8001f5c:	f002 fd14 	bl	8004988 <HAL_TIM_PWM_ConfigChannel>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001f66:	f000 f8bd 	bl	80020e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f6a:	1d3b      	adds	r3, r7, #4
 8001f6c:	2204      	movs	r2, #4
 8001f6e:	4619      	mov	r1, r3
 8001f70:	480c      	ldr	r0, [pc, #48]	@ (8001fa4 <MX_TIM3_Init+0xd4>)
 8001f72:	f002 fd09 	bl	8004988 <HAL_TIM_PWM_ConfigChannel>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001f7c:	f000 f8b2 	bl	80020e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f80:	1d3b      	adds	r3, r7, #4
 8001f82:	2208      	movs	r2, #8
 8001f84:	4619      	mov	r1, r3
 8001f86:	4807      	ldr	r0, [pc, #28]	@ (8001fa4 <MX_TIM3_Init+0xd4>)
 8001f88:	f002 fcfe 	bl	8004988 <HAL_TIM_PWM_ConfigChannel>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8001f92:	f000 f8a7 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001f96:	4803      	ldr	r0, [pc, #12]	@ (8001fa4 <MX_TIM3_Init+0xd4>)
 8001f98:	f000 fae0 	bl	800255c <HAL_TIM_MspPostInit>

}
 8001f9c:	bf00      	nop
 8001f9e:	3728      	adds	r7, #40	@ 0x28
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	200001ec 	.word	0x200001ec
 8001fa8:	40000400 	.word	0x40000400

08001fac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fb0:	4b11      	ldr	r3, [pc, #68]	@ (8001ff8 <MX_USART1_UART_Init+0x4c>)
 8001fb2:	4a12      	ldr	r2, [pc, #72]	@ (8001ffc <MX_USART1_UART_Init+0x50>)
 8001fb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fb6:	4b10      	ldr	r3, [pc, #64]	@ (8001ff8 <MX_USART1_UART_Init+0x4c>)
 8001fb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff8 <MX_USART1_UART_Init+0x4c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff8 <MX_USART1_UART_Init+0x4c>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fca:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff8 <MX_USART1_UART_Init+0x4c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fd0:	4b09      	ldr	r3, [pc, #36]	@ (8001ff8 <MX_USART1_UART_Init+0x4c>)
 8001fd2:	220c      	movs	r2, #12
 8001fd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fd6:	4b08      	ldr	r3, [pc, #32]	@ (8001ff8 <MX_USART1_UART_Init+0x4c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <MX_USART1_UART_Init+0x4c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fe2:	4805      	ldr	r0, [pc, #20]	@ (8001ff8 <MX_USART1_UART_Init+0x4c>)
 8001fe4:	f003 f87a 	bl	80050dc <HAL_UART_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001fee:	f000 f879 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000234 	.word	0x20000234
 8001ffc:	40011000 	.word	0x40011000

08002000 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08a      	sub	sp, #40	@ 0x28
 8002004:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002006:	f107 0314 	add.w	r3, r7, #20
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	605a      	str	r2, [r3, #4]
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	60da      	str	r2, [r3, #12]
 8002014:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	4b27      	ldr	r3, [pc, #156]	@ (80020b8 <MX_GPIO_Init+0xb8>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201e:	4a26      	ldr	r2, [pc, #152]	@ (80020b8 <MX_GPIO_Init+0xb8>)
 8002020:	f043 0304 	orr.w	r3, r3, #4
 8002024:	6313      	str	r3, [r2, #48]	@ 0x30
 8002026:	4b24      	ldr	r3, [pc, #144]	@ (80020b8 <MX_GPIO_Init+0xb8>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	613b      	str	r3, [r7, #16]
 8002030:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	4b20      	ldr	r3, [pc, #128]	@ (80020b8 <MX_GPIO_Init+0xb8>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203a:	4a1f      	ldr	r2, [pc, #124]	@ (80020b8 <MX_GPIO_Init+0xb8>)
 800203c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002040:	6313      	str	r3, [r2, #48]	@ 0x30
 8002042:	4b1d      	ldr	r3, [pc, #116]	@ (80020b8 <MX_GPIO_Init+0xb8>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60bb      	str	r3, [r7, #8]
 8002052:	4b19      	ldr	r3, [pc, #100]	@ (80020b8 <MX_GPIO_Init+0xb8>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	4a18      	ldr	r2, [pc, #96]	@ (80020b8 <MX_GPIO_Init+0xb8>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6313      	str	r3, [r2, #48]	@ 0x30
 800205e:	4b16      	ldr	r3, [pc, #88]	@ (80020b8 <MX_GPIO_Init+0xb8>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	60bb      	str	r3, [r7, #8]
 8002068:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	607b      	str	r3, [r7, #4]
 800206e:	4b12      	ldr	r3, [pc, #72]	@ (80020b8 <MX_GPIO_Init+0xb8>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002072:	4a11      	ldr	r2, [pc, #68]	@ (80020b8 <MX_GPIO_Init+0xb8>)
 8002074:	f043 0302 	orr.w	r3, r3, #2
 8002078:	6313      	str	r3, [r2, #48]	@ 0x30
 800207a:	4b0f      	ldr	r3, [pc, #60]	@ (80020b8 <MX_GPIO_Init+0xb8>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002086:	2200      	movs	r2, #0
 8002088:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800208c:	480b      	ldr	r0, [pc, #44]	@ (80020bc <MX_GPIO_Init+0xbc>)
 800208e:	f000 fedf 	bl	8002e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002092:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002096:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002098:	2301      	movs	r3, #1
 800209a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a0:	2300      	movs	r3, #0
 80020a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	4619      	mov	r1, r3
 80020aa:	4804      	ldr	r0, [pc, #16]	@ (80020bc <MX_GPIO_Init+0xbc>)
 80020ac:	f000 fd4c 	bl	8002b48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020b0:	bf00      	nop
 80020b2:	3728      	adds	r7, #40	@ 0x28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40020800 	.word	0x40020800

080020c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a04      	ldr	r2, [pc, #16]	@ (80020e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d101      	bne.n	80020d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020d2:	f000 fc13 	bl	80028fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40010000 	.word	0x40010000

080020e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020e8:	b672      	cpsid	i
}
 80020ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020ec:	bf00      	nop
 80020ee:	e7fd      	b.n	80020ec <Error_Handler+0x8>

080020f0 <micros>:
__STATIC_INLINE uint32_t micros(void){
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 80020f4:	4b07      	ldr	r3, [pc, #28]	@ (8002114 <micros+0x24>)
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	4b07      	ldr	r3, [pc, #28]	@ (8002118 <micros+0x28>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4907      	ldr	r1, [pc, #28]	@ (800211c <micros+0x2c>)
 80020fe:	fba1 1303 	umull	r1, r3, r1, r3
 8002102:	0c9b      	lsrs	r3, r3, #18
 8002104:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e0001000 	.word	0xe0001000
 8002118:	20000084 	.word	0x20000084
 800211c:	431bde83 	.word	0x431bde83

08002120 <PID_Init>:
 * @params[in] float ki
 * @params[in] float kd
 * @retval PID structure
 */
PID_t PID_Init()
{
 8002120:	b4b0      	push	{r4, r5, r7}
 8002122:	b08d      	sub	sp, #52	@ 0x34
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
	PID_t PID_dev =
 8002128:	4b0e      	ldr	r3, [pc, #56]	@ (8002164 <PID_Init+0x44>)
 800212a:	f107 0408 	add.w	r4, r7, #8
 800212e:	461d      	mov	r5, r3
 8002130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002134:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002138:	e895 0003 	ldmia.w	r5, {r0, r1}
 800213c:	e884 0003 	stmia.w	r4, {r0, r1}
		.upper_bound = 10,
		.timestamp_us = 0,
		.mode = 2
	};

	return PID_dev;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	461d      	mov	r5, r3
 8002144:	f107 0408 	add.w	r4, r7, #8
 8002148:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800214a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800214c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800214e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002150:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002154:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	3734      	adds	r7, #52	@ 0x34
 800215c:	46bd      	mov	sp, r7
 800215e:	bcb0      	pop	{r4, r5, r7}
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	08005950 	.word	0x08005950

08002168 <PID_Compute>:
 * @param[in] float setpoint
 * @param[in] float input value
 * @retval float PID output
 */
float PID_Compute(PID_t* PID_dev, float setpoint, float input)
{
 8002168:	b5b0      	push	{r4, r5, r7, lr}
 800216a:	b08c      	sub	sp, #48	@ 0x30
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	ed87 0a02 	vstr	s0, [r7, #8]
 8002174:	edc7 0a01 	vstr	s1, [r7, #4]
	uint32_t now_us = micros();
 8002178:	f7ff ffba 	bl	80020f0 <micros>
 800217c:	6238      	str	r0, [r7, #32]

	float error = setpoint - input;
 800217e:	ed97 7a02 	vldr	s14, [r7, #8]
 8002182:	edd7 7a01 	vldr	s15, [r7, #4]
 8002186:	ee77 7a67 	vsub.f32	s15, s14, s15
 800218a:	edc7 7a07 	vstr	s15, [r7, #28]

	/* Save time delta as uint32_t first to handle overflows naturally */
	uint32_t dt_us = (now_us - PID_dev->timestamp_us) * 0.000001;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	6a3a      	ldr	r2, [r7, #32]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe f960 	bl	800045c <__aeabi_ui2d>
 800219c:	a376      	add	r3, pc, #472	@ (adr r3, 8002378 <PID_Compute+0x210>)
 800219e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a2:	f7fe f9d5 	bl	8000550 <__aeabi_dmul>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	4610      	mov	r0, r2
 80021ac:	4619      	mov	r1, r3
 80021ae:	f7fe fc7f 	bl	8000ab0 <__aeabi_d2uiz>
 80021b2:	4603      	mov	r3, r0
 80021b4:	61bb      	str	r3, [r7, #24]
	float dt = dt_us * 0.000001;
 80021b6:	69b8      	ldr	r0, [r7, #24]
 80021b8:	f7fe f950 	bl	800045c <__aeabi_ui2d>
 80021bc:	a36e      	add	r3, pc, #440	@ (adr r3, 8002378 <PID_Compute+0x210>)
 80021be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c2:	f7fe f9c5 	bl	8000550 <__aeabi_dmul>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4610      	mov	r0, r2
 80021cc:	4619      	mov	r1, r3
 80021ce:	f7fe fc8f 	bl	8000af0 <__aeabi_d2f>
 80021d2:	4603      	mov	r3, r0
 80021d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Proportional term calculation */
	float p_term = PID_dev->kp * error;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	edd3 7a00 	vldr	s15, [r3]
 80021dc:	ed97 7a07 	vldr	s14, [r7, #28]
 80021e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021e4:	edc7 7a05 	vstr	s15, [r7, #20]

	/* If time delta is unreasonable, only return proportional term since it is not time-based */
	if(dt <= 0 || dt > 0.2)
 80021e8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80021ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021f4:	d90a      	bls.n	800220c <PID_Compute+0xa4>
 80021f6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80021f8:	f7fe f952 	bl	80004a0 <__aeabi_f2d>
 80021fc:	a360      	add	r3, pc, #384	@ (adr r3, 8002380 <PID_Compute+0x218>)
 80021fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002202:	f7fe fc35 	bl	8000a70 <__aeabi_dcmpgt>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <PID_Compute+0xb0>
	{
		PID_dev->timestamp_us = now_us;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6a3a      	ldr	r2, [r7, #32]
 8002210:	621a      	str	r2, [r3, #32]
		return p_term;
 8002212:	edd7 7a05 	vldr	s15, [r7, #20]
 8002216:	e09d      	b.n	8002354 <PID_Compute+0x1ec>
	}

	/* Integral term calculation */
	float i_term = 0;
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	62bb      	str	r3, [r7, #40]	@ 0x28

	if(PID_dev->mode == 1)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002224:	2b01      	cmp	r3, #1
 8002226:	d13e      	bne.n	80022a6 <PID_Compute+0x13e>
	{
		/* Accumulate integral value using Riemann midpoint rule */
		PID_dev->integral += PID_dev->ki * dt * 0.5f * (error + PID_dev->last_error);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	ed93 7a03 	vldr	s14, [r3, #12]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	edd3 6a01 	vldr	s13, [r3, #4]
 8002234:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002238:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800223c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8002240:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	ed93 6a04 	vldr	s12, [r3, #16]
 800224a:	edd7 7a07 	vldr	s15, [r7, #28]
 800224e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002252:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	edc3 7a03 	vstr	s15, [r3, #12]
		PID_dev->integral = _constrain(PID_dev->integral, PID_dev->lower_bound, PID_dev->upper_bound);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	ed93 7a03 	vldr	s14, [r3, #12]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	edd3 7a06 	vldr	s15, [r3, #24]
 800226c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002274:	d502      	bpl.n	800227c <PID_Compute+0x114>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	e00f      	b.n	800229c <PID_Compute+0x134>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	edd3 7a07 	vldr	s15, [r3, #28]
 8002288:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800228c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002290:	dd02      	ble.n	8002298 <PID_Compute+0x130>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	e001      	b.n	800229c <PID_Compute+0x134>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	60d3      	str	r3, [r2, #12]
		i_term = PID_dev->integral;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	62bb      	str	r3, [r7, #40]	@ 0x28
	}

	/* Derivative term calculation */
	float d_term = 0;
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	627b      	str	r3, [r7, #36]	@ 0x24

	if(PID_dev->mode == 2)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d13e      	bne.n	8002334 <PID_Compute+0x1cc>
	{
		/* If dt is too small, set to a reasonable value to avoid division by extremely small numbers */
		if(dt < 0.00001f)
 80022b6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80022ba:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8002370 <PID_Compute+0x208>
 80022be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022c6:	d501      	bpl.n	80022cc <PID_Compute+0x164>
		{
			dt = 0.00001f;
 80022c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002374 <PID_Compute+0x20c>)
 80022ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}

		/* Check error difference & apply simple LPF */
		d_term = (error - PID_dev->last_error) / dt;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	edd3 7a04 	vldr	s15, [r3, #16]
 80022d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80022d6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80022da:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80022de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022e2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		d_term = PID_LPF_ALPHA * d_term + (1 - PID_LPF_ALPHA) * PID_dev->last_derivative;
 80022e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80022e8:	f7fe f8da 	bl	80004a0 <__aeabi_f2d>
 80022ec:	a31c      	add	r3, pc, #112	@ (adr r3, 8002360 <PID_Compute+0x1f8>)
 80022ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f2:	f7fe f92d 	bl	8000550 <__aeabi_dmul>
 80022f6:	4602      	mov	r2, r0
 80022f8:	460b      	mov	r3, r1
 80022fa:	4614      	mov	r4, r2
 80022fc:	461d      	mov	r5, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe f8cc 	bl	80004a0 <__aeabi_f2d>
 8002308:	a317      	add	r3, pc, #92	@ (adr r3, 8002368 <PID_Compute+0x200>)
 800230a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230e:	f7fe f91f 	bl	8000550 <__aeabi_dmul>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4620      	mov	r0, r4
 8002318:	4629      	mov	r1, r5
 800231a:	f7fd ff63 	bl	80001e4 <__adddf3>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	4610      	mov	r0, r2
 8002324:	4619      	mov	r1, r3
 8002326:	f7fe fbe3 	bl	8000af0 <__aeabi_d2f>
 800232a:	4603      	mov	r3, r0
 800232c:	627b      	str	r3, [r7, #36]	@ 0x24
		PID_dev->last_derivative = d_term;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002332:	615a      	str	r2, [r3, #20]
	}

	PID_dev->last_error = error;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	69fa      	ldr	r2, [r7, #28]
 8002338:	611a      	str	r2, [r3, #16]
	PID_dev->timestamp_us = now_us;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a3a      	ldr	r2, [r7, #32]
 800233e:	621a      	str	r2, [r3, #32]

	return p_term + i_term + d_term;
 8002340:	ed97 7a05 	vldr	s14, [r7, #20]
 8002344:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8002348:	ee37 7a27 	vadd.f32	s14, s14, s15
 800234c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002350:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002354:	eeb0 0a67 	vmov.f32	s0, s15
 8002358:	3730      	adds	r7, #48	@ 0x30
 800235a:	46bd      	mov	sp, r7
 800235c:	bdb0      	pop	{r4, r5, r7, pc}
 800235e:	bf00      	nop
 8002360:	9999999a 	.word	0x9999999a
 8002364:	3fb99999 	.word	0x3fb99999
 8002368:	cccccccd 	.word	0xcccccccd
 800236c:	3feccccc 	.word	0x3feccccc
 8002370:	3727c5ac 	.word	0x3727c5ac
 8002374:	3727c5ac 	.word	0x3727c5ac
 8002378:	a0b5ed8d 	.word	0xa0b5ed8d
 800237c:	3eb0c6f7 	.word	0x3eb0c6f7
 8002380:	9999999a 	.word	0x9999999a
 8002384:	3fc99999 	.word	0x3fc99999

08002388 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	607b      	str	r3, [r7, #4]
 8002392:	4b10      	ldr	r3, [pc, #64]	@ (80023d4 <HAL_MspInit+0x4c>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002396:	4a0f      	ldr	r2, [pc, #60]	@ (80023d4 <HAL_MspInit+0x4c>)
 8002398:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800239c:	6453      	str	r3, [r2, #68]	@ 0x44
 800239e:	4b0d      	ldr	r3, [pc, #52]	@ (80023d4 <HAL_MspInit+0x4c>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023a6:	607b      	str	r3, [r7, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	603b      	str	r3, [r7, #0]
 80023ae:	4b09      	ldr	r3, [pc, #36]	@ (80023d4 <HAL_MspInit+0x4c>)
 80023b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b2:	4a08      	ldr	r2, [pc, #32]	@ (80023d4 <HAL_MspInit+0x4c>)
 80023b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ba:	4b06      	ldr	r3, [pc, #24]	@ (80023d4 <HAL_MspInit+0x4c>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40023800 	.word	0x40023800

080023d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08c      	sub	sp, #48	@ 0x30
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	f107 031c 	add.w	r3, r7, #28
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a3a      	ldr	r2, [pc, #232]	@ (80024e0 <HAL_I2C_MspInit+0x108>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d12c      	bne.n	8002454 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	61bb      	str	r3, [r7, #24]
 80023fe:	4b39      	ldr	r3, [pc, #228]	@ (80024e4 <HAL_I2C_MspInit+0x10c>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002402:	4a38      	ldr	r2, [pc, #224]	@ (80024e4 <HAL_I2C_MspInit+0x10c>)
 8002404:	f043 0302 	orr.w	r3, r3, #2
 8002408:	6313      	str	r3, [r2, #48]	@ 0x30
 800240a:	4b36      	ldr	r3, [pc, #216]	@ (80024e4 <HAL_I2C_MspInit+0x10c>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	61bb      	str	r3, [r7, #24]
 8002414:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002416:	23c0      	movs	r3, #192	@ 0xc0
 8002418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800241a:	2312      	movs	r3, #18
 800241c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002422:	2303      	movs	r3, #3
 8002424:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002426:	2304      	movs	r3, #4
 8002428:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242a:	f107 031c 	add.w	r3, r7, #28
 800242e:	4619      	mov	r1, r3
 8002430:	482d      	ldr	r0, [pc, #180]	@ (80024e8 <HAL_I2C_MspInit+0x110>)
 8002432:	f000 fb89 	bl	8002b48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	4b2a      	ldr	r3, [pc, #168]	@ (80024e4 <HAL_I2C_MspInit+0x10c>)
 800243c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243e:	4a29      	ldr	r2, [pc, #164]	@ (80024e4 <HAL_I2C_MspInit+0x10c>)
 8002440:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002444:	6413      	str	r3, [r2, #64]	@ 0x40
 8002446:	4b27      	ldr	r3, [pc, #156]	@ (80024e4 <HAL_I2C_MspInit+0x10c>)
 8002448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002452:	e041      	b.n	80024d8 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a24      	ldr	r2, [pc, #144]	@ (80024ec <HAL_I2C_MspInit+0x114>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d13c      	bne.n	80024d8 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800245e:	2300      	movs	r3, #0
 8002460:	613b      	str	r3, [r7, #16]
 8002462:	4b20      	ldr	r3, [pc, #128]	@ (80024e4 <HAL_I2C_MspInit+0x10c>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002466:	4a1f      	ldr	r2, [pc, #124]	@ (80024e4 <HAL_I2C_MspInit+0x10c>)
 8002468:	f043 0302 	orr.w	r3, r3, #2
 800246c:	6313      	str	r3, [r2, #48]	@ 0x30
 800246e:	4b1d      	ldr	r3, [pc, #116]	@ (80024e4 <HAL_I2C_MspInit+0x10c>)
 8002470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	613b      	str	r3, [r7, #16]
 8002478:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800247a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800247e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002480:	2312      	movs	r3, #18
 8002482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002488:	2303      	movs	r3, #3
 800248a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800248c:	2304      	movs	r3, #4
 800248e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002490:	f107 031c 	add.w	r3, r7, #28
 8002494:	4619      	mov	r1, r3
 8002496:	4814      	ldr	r0, [pc, #80]	@ (80024e8 <HAL_I2C_MspInit+0x110>)
 8002498:	f000 fb56 	bl	8002b48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800249c:	2308      	movs	r3, #8
 800249e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024a0:	2312      	movs	r3, #18
 80024a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a4:	2300      	movs	r3, #0
 80024a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024a8:	2303      	movs	r3, #3
 80024aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80024ac:	2309      	movs	r3, #9
 80024ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b0:	f107 031c 	add.w	r3, r7, #28
 80024b4:	4619      	mov	r1, r3
 80024b6:	480c      	ldr	r0, [pc, #48]	@ (80024e8 <HAL_I2C_MspInit+0x110>)
 80024b8:	f000 fb46 	bl	8002b48 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	4b08      	ldr	r3, [pc, #32]	@ (80024e4 <HAL_I2C_MspInit+0x10c>)
 80024c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024c4:	4a07      	ldr	r2, [pc, #28]	@ (80024e4 <HAL_I2C_MspInit+0x10c>)
 80024c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80024ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80024cc:	4b05      	ldr	r3, [pc, #20]	@ (80024e4 <HAL_I2C_MspInit+0x10c>)
 80024ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	68fb      	ldr	r3, [r7, #12]
}
 80024d8:	bf00      	nop
 80024da:	3730      	adds	r7, #48	@ 0x30
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40005400 	.word	0x40005400
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40020400 	.word	0x40020400
 80024ec:	40005800 	.word	0x40005800

080024f0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002500:	d10e      	bne.n	8002520 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	4b13      	ldr	r3, [pc, #76]	@ (8002554 <HAL_TIM_PWM_MspInit+0x64>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250a:	4a12      	ldr	r2, [pc, #72]	@ (8002554 <HAL_TIM_PWM_MspInit+0x64>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	6413      	str	r3, [r2, #64]	@ 0x40
 8002512:	4b10      	ldr	r3, [pc, #64]	@ (8002554 <HAL_TIM_PWM_MspInit+0x64>)
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800251e:	e012      	b.n	8002546 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0c      	ldr	r2, [pc, #48]	@ (8002558 <HAL_TIM_PWM_MspInit+0x68>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d10d      	bne.n	8002546 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800252a:	2300      	movs	r3, #0
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	4b09      	ldr	r3, [pc, #36]	@ (8002554 <HAL_TIM_PWM_MspInit+0x64>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002532:	4a08      	ldr	r2, [pc, #32]	@ (8002554 <HAL_TIM_PWM_MspInit+0x64>)
 8002534:	f043 0302 	orr.w	r3, r3, #2
 8002538:	6413      	str	r3, [r2, #64]	@ 0x40
 800253a:	4b06      	ldr	r3, [pc, #24]	@ (8002554 <HAL_TIM_PWM_MspInit+0x64>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	60bb      	str	r3, [r7, #8]
 8002544:	68bb      	ldr	r3, [r7, #8]
}
 8002546:	bf00      	nop
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800
 8002558:	40000400 	.word	0x40000400

0800255c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08a      	sub	sp, #40	@ 0x28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002564:	f107 0314 	add.w	r3, r7, #20
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800257c:	d11e      	bne.n	80025bc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	4b31      	ldr	r3, [pc, #196]	@ (8002648 <HAL_TIM_MspPostInit+0xec>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	4a30      	ldr	r2, [pc, #192]	@ (8002648 <HAL_TIM_MspPostInit+0xec>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	6313      	str	r3, [r2, #48]	@ 0x30
 800258e:	4b2e      	ldr	r3, [pc, #184]	@ (8002648 <HAL_TIM_MspPostInit+0xec>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800259a:	2307      	movs	r3, #7
 800259c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259e:	2302      	movs	r3, #2
 80025a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a6:	2300      	movs	r3, #0
 80025a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025aa:	2301      	movs	r3, #1
 80025ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ae:	f107 0314 	add.w	r3, r7, #20
 80025b2:	4619      	mov	r1, r3
 80025b4:	4825      	ldr	r0, [pc, #148]	@ (800264c <HAL_TIM_MspPostInit+0xf0>)
 80025b6:	f000 fac7 	bl	8002b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80025ba:	e040      	b.n	800263e <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a23      	ldr	r2, [pc, #140]	@ (8002650 <HAL_TIM_MspPostInit+0xf4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d13b      	bne.n	800263e <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002648 <HAL_TIM_MspPostInit+0xec>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ce:	4a1e      	ldr	r2, [pc, #120]	@ (8002648 <HAL_TIM_MspPostInit+0xec>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002648 <HAL_TIM_MspPostInit+0xec>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	60fb      	str	r3, [r7, #12]
 80025e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e2:	2300      	movs	r3, #0
 80025e4:	60bb      	str	r3, [r7, #8]
 80025e6:	4b18      	ldr	r3, [pc, #96]	@ (8002648 <HAL_TIM_MspPostInit+0xec>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ea:	4a17      	ldr	r2, [pc, #92]	@ (8002648 <HAL_TIM_MspPostInit+0xec>)
 80025ec:	f043 0302 	orr.w	r3, r3, #2
 80025f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025f2:	4b15      	ldr	r3, [pc, #84]	@ (8002648 <HAL_TIM_MspPostInit+0xec>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	60bb      	str	r3, [r7, #8]
 80025fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025fe:	23c0      	movs	r3, #192	@ 0xc0
 8002600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002602:	2302      	movs	r3, #2
 8002604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260a:	2300      	movs	r3, #0
 800260c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800260e:	2302      	movs	r3, #2
 8002610:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002612:	f107 0314 	add.w	r3, r7, #20
 8002616:	4619      	mov	r1, r3
 8002618:	480c      	ldr	r0, [pc, #48]	@ (800264c <HAL_TIM_MspPostInit+0xf0>)
 800261a:	f000 fa95 	bl	8002b48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800261e:	2301      	movs	r3, #1
 8002620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002622:	2302      	movs	r3, #2
 8002624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262a:	2300      	movs	r3, #0
 800262c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800262e:	2302      	movs	r3, #2
 8002630:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002632:	f107 0314 	add.w	r3, r7, #20
 8002636:	4619      	mov	r1, r3
 8002638:	4806      	ldr	r0, [pc, #24]	@ (8002654 <HAL_TIM_MspPostInit+0xf8>)
 800263a:	f000 fa85 	bl	8002b48 <HAL_GPIO_Init>
}
 800263e:	bf00      	nop
 8002640:	3728      	adds	r7, #40	@ 0x28
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40023800 	.word	0x40023800
 800264c:	40020000 	.word	0x40020000
 8002650:	40000400 	.word	0x40000400
 8002654:	40020400 	.word	0x40020400

08002658 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08a      	sub	sp, #40	@ 0x28
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	f107 0314 	add.w	r3, r7, #20
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a19      	ldr	r2, [pc, #100]	@ (80026dc <HAL_UART_MspInit+0x84>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d12c      	bne.n	80026d4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	4b18      	ldr	r3, [pc, #96]	@ (80026e0 <HAL_UART_MspInit+0x88>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002682:	4a17      	ldr	r2, [pc, #92]	@ (80026e0 <HAL_UART_MspInit+0x88>)
 8002684:	f043 0310 	orr.w	r3, r3, #16
 8002688:	6453      	str	r3, [r2, #68]	@ 0x44
 800268a:	4b15      	ldr	r3, [pc, #84]	@ (80026e0 <HAL_UART_MspInit+0x88>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268e:	f003 0310 	and.w	r3, r3, #16
 8002692:	613b      	str	r3, [r7, #16]
 8002694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	4b11      	ldr	r3, [pc, #68]	@ (80026e0 <HAL_UART_MspInit+0x88>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269e:	4a10      	ldr	r2, [pc, #64]	@ (80026e0 <HAL_UART_MspInit+0x88>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026a6:	4b0e      	ldr	r3, [pc, #56]	@ (80026e0 <HAL_UART_MspInit+0x88>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026b2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80026b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b8:	2302      	movs	r3, #2
 80026ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c0:	2303      	movs	r3, #3
 80026c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026c4:	2307      	movs	r3, #7
 80026c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	4619      	mov	r1, r3
 80026ce:	4805      	ldr	r0, [pc, #20]	@ (80026e4 <HAL_UART_MspInit+0x8c>)
 80026d0:	f000 fa3a 	bl	8002b48 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80026d4:	bf00      	nop
 80026d6:	3728      	adds	r7, #40	@ 0x28
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40011000 	.word	0x40011000
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40020000 	.word	0x40020000

080026e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b08c      	sub	sp, #48	@ 0x30
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80026f8:	2300      	movs	r3, #0
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	4b2e      	ldr	r3, [pc, #184]	@ (80027b8 <HAL_InitTick+0xd0>)
 80026fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002700:	4a2d      	ldr	r2, [pc, #180]	@ (80027b8 <HAL_InitTick+0xd0>)
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	6453      	str	r3, [r2, #68]	@ 0x44
 8002708:	4b2b      	ldr	r3, [pc, #172]	@ (80027b8 <HAL_InitTick+0xd0>)
 800270a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002714:	f107 020c 	add.w	r2, r7, #12
 8002718:	f107 0310 	add.w	r3, r7, #16
 800271c:	4611      	mov	r1, r2
 800271e:	4618      	mov	r0, r3
 8002720:	f001 fe54 	bl	80043cc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002724:	f001 fe3e 	bl	80043a4 <HAL_RCC_GetPCLK2Freq>
 8002728:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800272a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800272c:	4a23      	ldr	r2, [pc, #140]	@ (80027bc <HAL_InitTick+0xd4>)
 800272e:	fba2 2303 	umull	r2, r3, r2, r3
 8002732:	0c9b      	lsrs	r3, r3, #18
 8002734:	3b01      	subs	r3, #1
 8002736:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002738:	4b21      	ldr	r3, [pc, #132]	@ (80027c0 <HAL_InitTick+0xd8>)
 800273a:	4a22      	ldr	r2, [pc, #136]	@ (80027c4 <HAL_InitTick+0xdc>)
 800273c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800273e:	4b20      	ldr	r3, [pc, #128]	@ (80027c0 <HAL_InitTick+0xd8>)
 8002740:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002744:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002746:	4a1e      	ldr	r2, [pc, #120]	@ (80027c0 <HAL_InitTick+0xd8>)
 8002748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800274c:	4b1c      	ldr	r3, [pc, #112]	@ (80027c0 <HAL_InitTick+0xd8>)
 800274e:	2200      	movs	r2, #0
 8002750:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002752:	4b1b      	ldr	r3, [pc, #108]	@ (80027c0 <HAL_InitTick+0xd8>)
 8002754:	2200      	movs	r2, #0
 8002756:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002758:	4b19      	ldr	r3, [pc, #100]	@ (80027c0 <HAL_InitTick+0xd8>)
 800275a:	2200      	movs	r2, #0
 800275c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800275e:	4818      	ldr	r0, [pc, #96]	@ (80027c0 <HAL_InitTick+0xd8>)
 8002760:	f001 fe66 	bl	8004430 <HAL_TIM_Base_Init>
 8002764:	4603      	mov	r3, r0
 8002766:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800276a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800276e:	2b00      	cmp	r3, #0
 8002770:	d11b      	bne.n	80027aa <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002772:	4813      	ldr	r0, [pc, #76]	@ (80027c0 <HAL_InitTick+0xd8>)
 8002774:	f001 feb6 	bl	80044e4 <HAL_TIM_Base_Start_IT>
 8002778:	4603      	mov	r3, r0
 800277a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800277e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002782:	2b00      	cmp	r3, #0
 8002784:	d111      	bne.n	80027aa <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002786:	2019      	movs	r0, #25
 8002788:	f000 f9d0 	bl	8002b2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b0f      	cmp	r3, #15
 8002790:	d808      	bhi.n	80027a4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002792:	2200      	movs	r2, #0
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	2019      	movs	r0, #25
 8002798:	f000 f9ac 	bl	8002af4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800279c:	4a0a      	ldr	r2, [pc, #40]	@ (80027c8 <HAL_InitTick+0xe0>)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6013      	str	r3, [r2, #0]
 80027a2:	e002      	b.n	80027aa <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80027aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3730      	adds	r7, #48	@ 0x30
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	40023800 	.word	0x40023800
 80027bc:	431bde83 	.word	0x431bde83
 80027c0:	20000280 	.word	0x20000280
 80027c4:	40010000 	.word	0x40010000
 80027c8:	20000088 	.word	0x20000088

080027cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027d0:	bf00      	nop
 80027d2:	e7fd      	b.n	80027d0 <NMI_Handler+0x4>

080027d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027d8:	bf00      	nop
 80027da:	e7fd      	b.n	80027d8 <HardFault_Handler+0x4>

080027dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027e0:	bf00      	nop
 80027e2:	e7fd      	b.n	80027e0 <MemManage_Handler+0x4>

080027e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027e8:	bf00      	nop
 80027ea:	e7fd      	b.n	80027e8 <BusFault_Handler+0x4>

080027ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f0:	bf00      	nop
 80027f2:	e7fd      	b.n	80027f0 <UsageFault_Handler+0x4>

080027f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027f8:	bf00      	nop
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002802:	b480      	push	{r7}
 8002804:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002830:	4802      	ldr	r0, [pc, #8]	@ (800283c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002832:	f001 ffb9 	bl	80047a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20000280 	.word	0x20000280

08002840 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002844:	4b06      	ldr	r3, [pc, #24]	@ (8002860 <SystemInit+0x20>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284a:	4a05      	ldr	r2, [pc, #20]	@ (8002860 <SystemInit+0x20>)
 800284c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002850:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002854:	bf00      	nop
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	e000ed00 	.word	0xe000ed00

08002864 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002864:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800289c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002868:	f7ff ffea 	bl	8002840 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800286c:	480c      	ldr	r0, [pc, #48]	@ (80028a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800286e:	490d      	ldr	r1, [pc, #52]	@ (80028a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002870:	4a0d      	ldr	r2, [pc, #52]	@ (80028a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002874:	e002      	b.n	800287c <LoopCopyDataInit>

08002876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800287a:	3304      	adds	r3, #4

0800287c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800287c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800287e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002880:	d3f9      	bcc.n	8002876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002882:	4a0a      	ldr	r2, [pc, #40]	@ (80028ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002884:	4c0a      	ldr	r4, [pc, #40]	@ (80028b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002888:	e001      	b.n	800288e <LoopFillZerobss>

0800288a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800288a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800288c:	3204      	adds	r2, #4

0800288e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800288e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002890:	d3fb      	bcc.n	800288a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002892:	f002 fef5 	bl	8005680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002896:	f7ff f985 	bl	8001ba4 <main>
  bx  lr    
 800289a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800289c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028a4:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 80028a8:	080059b0 	.word	0x080059b0
  ldr r2, =_sbss
 80028ac:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 80028b0:	20000404 	.word	0x20000404

080028b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028b4:	e7fe      	b.n	80028b4 <ADC_IRQHandler>
	...

080028b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028bc:	4b0e      	ldr	r3, [pc, #56]	@ (80028f8 <HAL_Init+0x40>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a0d      	ldr	r2, [pc, #52]	@ (80028f8 <HAL_Init+0x40>)
 80028c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028c8:	4b0b      	ldr	r3, [pc, #44]	@ (80028f8 <HAL_Init+0x40>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a0a      	ldr	r2, [pc, #40]	@ (80028f8 <HAL_Init+0x40>)
 80028ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028d4:	4b08      	ldr	r3, [pc, #32]	@ (80028f8 <HAL_Init+0x40>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a07      	ldr	r2, [pc, #28]	@ (80028f8 <HAL_Init+0x40>)
 80028da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028e0:	2003      	movs	r0, #3
 80028e2:	f000 f8fc 	bl	8002ade <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028e6:	200f      	movs	r0, #15
 80028e8:	f7ff fefe 	bl	80026e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028ec:	f7ff fd4c 	bl	8002388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40023c00 	.word	0x40023c00

080028fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002900:	4b06      	ldr	r3, [pc, #24]	@ (800291c <HAL_IncTick+0x20>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	4b06      	ldr	r3, [pc, #24]	@ (8002920 <HAL_IncTick+0x24>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4413      	add	r3, r2
 800290c:	4a04      	ldr	r2, [pc, #16]	@ (8002920 <HAL_IncTick+0x24>)
 800290e:	6013      	str	r3, [r2, #0]
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	2000008c 	.word	0x2000008c
 8002920:	200002c8 	.word	0x200002c8

08002924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  return uwTick;
 8002928:	4b03      	ldr	r3, [pc, #12]	@ (8002938 <HAL_GetTick+0x14>)
 800292a:	681b      	ldr	r3, [r3, #0]
}
 800292c:	4618      	mov	r0, r3
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	200002c8 	.word	0x200002c8

0800293c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002944:	f7ff ffee 	bl	8002924 <HAL_GetTick>
 8002948:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002954:	d005      	beq.n	8002962 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002956:	4b0a      	ldr	r3, [pc, #40]	@ (8002980 <HAL_Delay+0x44>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4413      	add	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002962:	bf00      	nop
 8002964:	f7ff ffde 	bl	8002924 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	68fa      	ldr	r2, [r7, #12]
 8002970:	429a      	cmp	r2, r3
 8002972:	d8f7      	bhi.n	8002964 <HAL_Delay+0x28>
  {
  }
}
 8002974:	bf00      	nop
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	2000008c 	.word	0x2000008c

08002984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002994:	4b0c      	ldr	r3, [pc, #48]	@ (80029c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029a0:	4013      	ands	r3, r2
 80029a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029b6:	4a04      	ldr	r2, [pc, #16]	@ (80029c8 <__NVIC_SetPriorityGrouping+0x44>)
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	60d3      	str	r3, [r2, #12]
}
 80029bc:	bf00      	nop
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	e000ed00 	.word	0xe000ed00

080029cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029d0:	4b04      	ldr	r3, [pc, #16]	@ (80029e4 <__NVIC_GetPriorityGrouping+0x18>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	0a1b      	lsrs	r3, r3, #8
 80029d6:	f003 0307 	and.w	r3, r3, #7
}
 80029da:	4618      	mov	r0, r3
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	db0b      	blt.n	8002a12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029fa:	79fb      	ldrb	r3, [r7, #7]
 80029fc:	f003 021f 	and.w	r2, r3, #31
 8002a00:	4907      	ldr	r1, [pc, #28]	@ (8002a20 <__NVIC_EnableIRQ+0x38>)
 8002a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a06:	095b      	lsrs	r3, r3, #5
 8002a08:	2001      	movs	r0, #1
 8002a0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	e000e100 	.word	0xe000e100

08002a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	6039      	str	r1, [r7, #0]
 8002a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	db0a      	blt.n	8002a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	490c      	ldr	r1, [pc, #48]	@ (8002a70 <__NVIC_SetPriority+0x4c>)
 8002a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a42:	0112      	lsls	r2, r2, #4
 8002a44:	b2d2      	uxtb	r2, r2
 8002a46:	440b      	add	r3, r1
 8002a48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a4c:	e00a      	b.n	8002a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	b2da      	uxtb	r2, r3
 8002a52:	4908      	ldr	r1, [pc, #32]	@ (8002a74 <__NVIC_SetPriority+0x50>)
 8002a54:	79fb      	ldrb	r3, [r7, #7]
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	3b04      	subs	r3, #4
 8002a5c:	0112      	lsls	r2, r2, #4
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	440b      	add	r3, r1
 8002a62:	761a      	strb	r2, [r3, #24]
}
 8002a64:	bf00      	nop
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	e000e100 	.word	0xe000e100
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b089      	sub	sp, #36	@ 0x24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a8c:	69fb      	ldr	r3, [r7, #28]
 8002a8e:	f1c3 0307 	rsb	r3, r3, #7
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	bf28      	it	cs
 8002a96:	2304      	movcs	r3, #4
 8002a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	2b06      	cmp	r3, #6
 8002aa0:	d902      	bls.n	8002aa8 <NVIC_EncodePriority+0x30>
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	3b03      	subs	r3, #3
 8002aa6:	e000      	b.n	8002aaa <NVIC_EncodePriority+0x32>
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aac:	f04f 32ff 	mov.w	r2, #4294967295
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43da      	mvns	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	401a      	ands	r2, r3
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8002aca:	43d9      	mvns	r1, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad0:	4313      	orrs	r3, r2
         );
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3724      	adds	r7, #36	@ 0x24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7ff ff4c 	bl	8002984 <__NVIC_SetPriorityGrouping>
}
 8002aec:	bf00      	nop
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
 8002b00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b06:	f7ff ff61 	bl	80029cc <__NVIC_GetPriorityGrouping>
 8002b0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	68b9      	ldr	r1, [r7, #8]
 8002b10:	6978      	ldr	r0, [r7, #20]
 8002b12:	f7ff ffb1 	bl	8002a78 <NVIC_EncodePriority>
 8002b16:	4602      	mov	r2, r0
 8002b18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b1c:	4611      	mov	r1, r2
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff ff80 	bl	8002a24 <__NVIC_SetPriority>
}
 8002b24:	bf00      	nop
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f7ff ff54 	bl	80029e8 <__NVIC_EnableIRQ>
}
 8002b40:	bf00      	nop
 8002b42:	3708      	adds	r7, #8
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}

08002b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b089      	sub	sp, #36	@ 0x24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	e159      	b.n	8002e18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b64:	2201      	movs	r2, #1
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4013      	ands	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	f040 8148 	bne.w	8002e12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d005      	beq.n	8002b9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d130      	bne.n	8002bfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43db      	mvns	r3, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	091b      	lsrs	r3, r3, #4
 8002be6:	f003 0201 	and.w	r2, r3, #1
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	2b03      	cmp	r3, #3
 8002c06:	d017      	beq.n	8002c38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	2203      	movs	r2, #3
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	689a      	ldr	r2, [r3, #8]
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d123      	bne.n	8002c8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	08da      	lsrs	r2, r3, #3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3208      	adds	r2, #8
 8002c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	220f      	movs	r2, #15
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	08da      	lsrs	r2, r3, #3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	3208      	adds	r2, #8
 8002c86:	69b9      	ldr	r1, [r7, #24]
 8002c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	2203      	movs	r2, #3
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 0203 	and.w	r2, r3, #3
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 80a2 	beq.w	8002e12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	4b57      	ldr	r3, [pc, #348]	@ (8002e30 <HAL_GPIO_Init+0x2e8>)
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cd6:	4a56      	ldr	r2, [pc, #344]	@ (8002e30 <HAL_GPIO_Init+0x2e8>)
 8002cd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002cdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cde:	4b54      	ldr	r3, [pc, #336]	@ (8002e30 <HAL_GPIO_Init+0x2e8>)
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cea:	4a52      	ldr	r2, [pc, #328]	@ (8002e34 <HAL_GPIO_Init+0x2ec>)
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	089b      	lsrs	r3, r3, #2
 8002cf0:	3302      	adds	r3, #2
 8002cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	220f      	movs	r2, #15
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43db      	mvns	r3, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a49      	ldr	r2, [pc, #292]	@ (8002e38 <HAL_GPIO_Init+0x2f0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d019      	beq.n	8002d4a <HAL_GPIO_Init+0x202>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a48      	ldr	r2, [pc, #288]	@ (8002e3c <HAL_GPIO_Init+0x2f4>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d013      	beq.n	8002d46 <HAL_GPIO_Init+0x1fe>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a47      	ldr	r2, [pc, #284]	@ (8002e40 <HAL_GPIO_Init+0x2f8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00d      	beq.n	8002d42 <HAL_GPIO_Init+0x1fa>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a46      	ldr	r2, [pc, #280]	@ (8002e44 <HAL_GPIO_Init+0x2fc>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d007      	beq.n	8002d3e <HAL_GPIO_Init+0x1f6>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a45      	ldr	r2, [pc, #276]	@ (8002e48 <HAL_GPIO_Init+0x300>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d101      	bne.n	8002d3a <HAL_GPIO_Init+0x1f2>
 8002d36:	2304      	movs	r3, #4
 8002d38:	e008      	b.n	8002d4c <HAL_GPIO_Init+0x204>
 8002d3a:	2307      	movs	r3, #7
 8002d3c:	e006      	b.n	8002d4c <HAL_GPIO_Init+0x204>
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e004      	b.n	8002d4c <HAL_GPIO_Init+0x204>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e002      	b.n	8002d4c <HAL_GPIO_Init+0x204>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <HAL_GPIO_Init+0x204>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	69fa      	ldr	r2, [r7, #28]
 8002d4e:	f002 0203 	and.w	r2, r2, #3
 8002d52:	0092      	lsls	r2, r2, #2
 8002d54:	4093      	lsls	r3, r2
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d5c:	4935      	ldr	r1, [pc, #212]	@ (8002e34 <HAL_GPIO_Init+0x2ec>)
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	089b      	lsrs	r3, r3, #2
 8002d62:	3302      	adds	r3, #2
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d6a:	4b38      	ldr	r3, [pc, #224]	@ (8002e4c <HAL_GPIO_Init+0x304>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	43db      	mvns	r3, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4013      	ands	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d8e:	4a2f      	ldr	r2, [pc, #188]	@ (8002e4c <HAL_GPIO_Init+0x304>)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d94:	4b2d      	ldr	r3, [pc, #180]	@ (8002e4c <HAL_GPIO_Init+0x304>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002db8:	4a24      	ldr	r2, [pc, #144]	@ (8002e4c <HAL_GPIO_Init+0x304>)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002dbe:	4b23      	ldr	r3, [pc, #140]	@ (8002e4c <HAL_GPIO_Init+0x304>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002de2:	4a1a      	ldr	r2, [pc, #104]	@ (8002e4c <HAL_GPIO_Init+0x304>)
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002de8:	4b18      	ldr	r3, [pc, #96]	@ (8002e4c <HAL_GPIO_Init+0x304>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	43db      	mvns	r3, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4013      	ands	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e0c:	4a0f      	ldr	r2, [pc, #60]	@ (8002e4c <HAL_GPIO_Init+0x304>)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3301      	adds	r3, #1
 8002e16:	61fb      	str	r3, [r7, #28]
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	2b0f      	cmp	r3, #15
 8002e1c:	f67f aea2 	bls.w	8002b64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e20:	bf00      	nop
 8002e22:	bf00      	nop
 8002e24:	3724      	adds	r7, #36	@ 0x24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40023800 	.word	0x40023800
 8002e34:	40013800 	.word	0x40013800
 8002e38:	40020000 	.word	0x40020000
 8002e3c:	40020400 	.word	0x40020400
 8002e40:	40020800 	.word	0x40020800
 8002e44:	40020c00 	.word	0x40020c00
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40013c00 	.word	0x40013c00

08002e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	807b      	strh	r3, [r7, #2]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e60:	787b      	ldrb	r3, [r7, #1]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d003      	beq.n	8002e6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e66:	887a      	ldrh	r2, [r7, #2]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e6c:	e003      	b.n	8002e76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e6e:	887b      	ldrh	r3, [r7, #2]
 8002e70:	041a      	lsls	r2, r3, #16
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	619a      	str	r2, [r3, #24]
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e80:	4770      	bx	lr
	...

08002e84 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e12b      	b.n	80030ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d106      	bne.n	8002eb0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7ff fa94 	bl	80023d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2224      	movs	r2, #36	@ 0x24
 8002eb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0201 	bic.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ed6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ee6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ee8:	f001 fa48 	bl	800437c <HAL_RCC_GetPCLK1Freq>
 8002eec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	4a81      	ldr	r2, [pc, #516]	@ (80030f8 <HAL_I2C_Init+0x274>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d807      	bhi.n	8002f08 <HAL_I2C_Init+0x84>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4a80      	ldr	r2, [pc, #512]	@ (80030fc <HAL_I2C_Init+0x278>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	bf94      	ite	ls
 8002f00:	2301      	movls	r3, #1
 8002f02:	2300      	movhi	r3, #0
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	e006      	b.n	8002f16 <HAL_I2C_Init+0x92>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4a7d      	ldr	r2, [pc, #500]	@ (8003100 <HAL_I2C_Init+0x27c>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	bf94      	ite	ls
 8002f10:	2301      	movls	r3, #1
 8002f12:	2300      	movhi	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e0e7      	b.n	80030ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4a78      	ldr	r2, [pc, #480]	@ (8003104 <HAL_I2C_Init+0x280>)
 8002f22:	fba2 2303 	umull	r2, r3, r2, r3
 8002f26:	0c9b      	lsrs	r3, r3, #18
 8002f28:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6a1b      	ldr	r3, [r3, #32]
 8002f44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	4a6a      	ldr	r2, [pc, #424]	@ (80030f8 <HAL_I2C_Init+0x274>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d802      	bhi.n	8002f58 <HAL_I2C_Init+0xd4>
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	3301      	adds	r3, #1
 8002f56:	e009      	b.n	8002f6c <HAL_I2C_Init+0xe8>
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f5e:	fb02 f303 	mul.w	r3, r2, r3
 8002f62:	4a69      	ldr	r2, [pc, #420]	@ (8003108 <HAL_I2C_Init+0x284>)
 8002f64:	fba2 2303 	umull	r2, r3, r2, r3
 8002f68:	099b      	lsrs	r3, r3, #6
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	430b      	orrs	r3, r1
 8002f72:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	69db      	ldr	r3, [r3, #28]
 8002f7a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f7e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	495c      	ldr	r1, [pc, #368]	@ (80030f8 <HAL_I2C_Init+0x274>)
 8002f88:	428b      	cmp	r3, r1
 8002f8a:	d819      	bhi.n	8002fc0 <HAL_I2C_Init+0x13c>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	1e59      	subs	r1, r3, #1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f9a:	1c59      	adds	r1, r3, #1
 8002f9c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002fa0:	400b      	ands	r3, r1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <HAL_I2C_Init+0x138>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	1e59      	subs	r1, r3, #1
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fba:	e051      	b.n	8003060 <HAL_I2C_Init+0x1dc>
 8002fbc:	2304      	movs	r3, #4
 8002fbe:	e04f      	b.n	8003060 <HAL_I2C_Init+0x1dc>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d111      	bne.n	8002fec <HAL_I2C_Init+0x168>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	1e58      	subs	r0, r3, #1
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6859      	ldr	r1, [r3, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	440b      	add	r3, r1
 8002fd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fda:	3301      	adds	r3, #1
 8002fdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	bf0c      	ite	eq
 8002fe4:	2301      	moveq	r3, #1
 8002fe6:	2300      	movne	r3, #0
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	e012      	b.n	8003012 <HAL_I2C_Init+0x18e>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	1e58      	subs	r0, r3, #1
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6859      	ldr	r1, [r3, #4]
 8002ff4:	460b      	mov	r3, r1
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	0099      	lsls	r1, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003002:	3301      	adds	r3, #1
 8003004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003008:	2b00      	cmp	r3, #0
 800300a:	bf0c      	ite	eq
 800300c:	2301      	moveq	r3, #1
 800300e:	2300      	movne	r3, #0
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <HAL_I2C_Init+0x196>
 8003016:	2301      	movs	r3, #1
 8003018:	e022      	b.n	8003060 <HAL_I2C_Init+0x1dc>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10e      	bne.n	8003040 <HAL_I2C_Init+0x1bc>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1e58      	subs	r0, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6859      	ldr	r1, [r3, #4]
 800302a:	460b      	mov	r3, r1
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	440b      	add	r3, r1
 8003030:	fbb0 f3f3 	udiv	r3, r0, r3
 8003034:	3301      	adds	r3, #1
 8003036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800303a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800303e:	e00f      	b.n	8003060 <HAL_I2C_Init+0x1dc>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	1e58      	subs	r0, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6859      	ldr	r1, [r3, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	0099      	lsls	r1, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	fbb0 f3f3 	udiv	r3, r0, r3
 8003056:	3301      	adds	r3, #1
 8003058:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800305c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	6809      	ldr	r1, [r1, #0]
 8003064:	4313      	orrs	r3, r2
 8003066:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69da      	ldr	r2, [r3, #28]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800308e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6911      	ldr	r1, [r2, #16]
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68d2      	ldr	r2, [r2, #12]
 800309a:	4311      	orrs	r1, r2
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	430b      	orrs	r3, r1
 80030a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	695a      	ldr	r2, [r3, #20]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0201 	orr.w	r2, r2, #1
 80030ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	000186a0 	.word	0x000186a0
 80030fc:	001e847f 	.word	0x001e847f
 8003100:	003d08ff 	.word	0x003d08ff
 8003104:	431bde83 	.word	0x431bde83
 8003108:	10624dd3 	.word	0x10624dd3

0800310c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08c      	sub	sp, #48	@ 0x30
 8003110:	af02      	add	r7, sp, #8
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	4608      	mov	r0, r1
 8003116:	4611      	mov	r1, r2
 8003118:	461a      	mov	r2, r3
 800311a:	4603      	mov	r3, r0
 800311c:	817b      	strh	r3, [r7, #10]
 800311e:	460b      	mov	r3, r1
 8003120:	813b      	strh	r3, [r7, #8]
 8003122:	4613      	mov	r3, r2
 8003124:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003126:	f7ff fbfd 	bl	8002924 <HAL_GetTick>
 800312a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b20      	cmp	r3, #32
 8003136:	f040 8214 	bne.w	8003562 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800313a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	2319      	movs	r3, #25
 8003140:	2201      	movs	r2, #1
 8003142:	497b      	ldr	r1, [pc, #492]	@ (8003330 <HAL_I2C_Mem_Read+0x224>)
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 fafb 	bl	8003740 <I2C_WaitOnFlagUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003150:	2302      	movs	r3, #2
 8003152:	e207      	b.n	8003564 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800315a:	2b01      	cmp	r3, #1
 800315c:	d101      	bne.n	8003162 <HAL_I2C_Mem_Read+0x56>
 800315e:	2302      	movs	r3, #2
 8003160:	e200      	b.n	8003564 <HAL_I2C_Mem_Read+0x458>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b01      	cmp	r3, #1
 8003176:	d007      	beq.n	8003188 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003196:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2222      	movs	r2, #34	@ 0x22
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2240      	movs	r2, #64	@ 0x40
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80031b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4a5b      	ldr	r2, [pc, #364]	@ (8003334 <HAL_I2C_Mem_Read+0x228>)
 80031c8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031ca:	88f8      	ldrh	r0, [r7, #6]
 80031cc:	893a      	ldrh	r2, [r7, #8]
 80031ce:	8979      	ldrh	r1, [r7, #10]
 80031d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d2:	9301      	str	r3, [sp, #4]
 80031d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	4603      	mov	r3, r0
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f000 f9c8 	bl	8003570 <I2C_RequestMemoryRead>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e1bc      	b.n	8003564 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d113      	bne.n	800321a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f2:	2300      	movs	r3, #0
 80031f4:	623b      	str	r3, [r7, #32]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	623b      	str	r3, [r7, #32]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	623b      	str	r3, [r7, #32]
 8003206:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	e190      	b.n	800353c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800321e:	2b01      	cmp	r3, #1
 8003220:	d11b      	bne.n	800325a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003230:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003232:	2300      	movs	r3, #0
 8003234:	61fb      	str	r3, [r7, #28]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	61fb      	str	r3, [r7, #28]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	61fb      	str	r3, [r7, #28]
 8003246:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003256:	601a      	str	r2, [r3, #0]
 8003258:	e170      	b.n	800353c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800325e:	2b02      	cmp	r3, #2
 8003260:	d11b      	bne.n	800329a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003270:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003280:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003282:	2300      	movs	r3, #0
 8003284:	61bb      	str	r3, [r7, #24]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	61bb      	str	r3, [r7, #24]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	e150      	b.n	800353c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800329a:	2300      	movs	r3, #0
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	617b      	str	r3, [r7, #20]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	617b      	str	r3, [r7, #20]
 80032ae:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80032b0:	e144      	b.n	800353c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b6:	2b03      	cmp	r3, #3
 80032b8:	f200 80f1 	bhi.w	800349e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d123      	bne.n	800330c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032c6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f000 fb9b 	bl	8003a04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d001      	beq.n	80032d8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e145      	b.n	8003564 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691a      	ldr	r2, [r3, #16]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003300:	b29b      	uxth	r3, r3
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800330a:	e117      	b.n	800353c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003310:	2b02      	cmp	r3, #2
 8003312:	d14e      	bne.n	80033b2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800331a:	2200      	movs	r2, #0
 800331c:	4906      	ldr	r1, [pc, #24]	@ (8003338 <HAL_I2C_Mem_Read+0x22c>)
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 fa0e 	bl	8003740 <I2C_WaitOnFlagUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d008      	beq.n	800333c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e11a      	b.n	8003564 <HAL_I2C_Mem_Read+0x458>
 800332e:	bf00      	nop
 8003330:	00100002 	.word	0x00100002
 8003334:	ffff0000 	.word	0xffff0000
 8003338:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800334a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	691a      	ldr	r2, [r3, #16]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335e:	1c5a      	adds	r2, r3, #1
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003374:	b29b      	uxth	r3, r3
 8003376:	3b01      	subs	r3, #1
 8003378:	b29a      	uxth	r2, r3
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003388:	b2d2      	uxtb	r2, r2
 800338a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800339a:	3b01      	subs	r3, #1
 800339c:	b29a      	uxth	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80033b0:	e0c4      	b.n	800353c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b4:	9300      	str	r3, [sp, #0]
 80033b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033b8:	2200      	movs	r2, #0
 80033ba:	496c      	ldr	r1, [pc, #432]	@ (800356c <HAL_I2C_Mem_Read+0x460>)
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 f9bf 	bl	8003740 <I2C_WaitOnFlagUntilTimeout>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e0cb      	b.n	8003564 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691a      	ldr	r2, [r3, #16]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ee:	1c5a      	adds	r2, r3, #1
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003404:	b29b      	uxth	r3, r3
 8003406:	3b01      	subs	r3, #1
 8003408:	b29a      	uxth	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800340e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003414:	2200      	movs	r2, #0
 8003416:	4955      	ldr	r1, [pc, #340]	@ (800356c <HAL_I2C_Mem_Read+0x460>)
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 f991 	bl	8003740 <I2C_WaitOnFlagUntilTimeout>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e09d      	b.n	8003564 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003436:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	691a      	ldr	r2, [r3, #16]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344a:	1c5a      	adds	r2, r3, #1
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003454:	3b01      	subs	r3, #1
 8003456:	b29a      	uxth	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003460:	b29b      	uxth	r3, r3
 8003462:	3b01      	subs	r3, #1
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	691a      	ldr	r2, [r3, #16]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003474:	b2d2      	uxtb	r2, r2
 8003476:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003486:	3b01      	subs	r3, #1
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003492:	b29b      	uxth	r3, r3
 8003494:	3b01      	subs	r3, #1
 8003496:	b29a      	uxth	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800349c:	e04e      	b.n	800353c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800349e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034a0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 faae 	bl	8003a04 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e058      	b.n	8003564 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	691a      	ldr	r2, [r3, #16]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034bc:	b2d2      	uxtb	r2, r2
 80034be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ce:	3b01      	subs	r3, #1
 80034d0:	b29a      	uxth	r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	f003 0304 	and.w	r3, r3, #4
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d124      	bne.n	800353c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f6:	2b03      	cmp	r3, #3
 80034f8:	d107      	bne.n	800350a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003508:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	691a      	ldr	r2, [r3, #16]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003514:	b2d2      	uxtb	r2, r2
 8003516:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003526:	3b01      	subs	r3, #1
 8003528:	b29a      	uxth	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003532:	b29b      	uxth	r3, r3
 8003534:	3b01      	subs	r3, #1
 8003536:	b29a      	uxth	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003540:	2b00      	cmp	r3, #0
 8003542:	f47f aeb6 	bne.w	80032b2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2220      	movs	r2, #32
 800354a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	e000      	b.n	8003564 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003562:	2302      	movs	r3, #2
  }
}
 8003564:	4618      	mov	r0, r3
 8003566:	3728      	adds	r7, #40	@ 0x28
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	00010004 	.word	0x00010004

08003570 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	4608      	mov	r0, r1
 800357a:	4611      	mov	r1, r2
 800357c:	461a      	mov	r2, r3
 800357e:	4603      	mov	r3, r0
 8003580:	817b      	strh	r3, [r7, #10]
 8003582:	460b      	mov	r3, r1
 8003584:	813b      	strh	r3, [r7, #8]
 8003586:	4613      	mov	r3, r2
 8003588:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003598:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80035aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ac:	9300      	str	r3, [sp, #0]
 80035ae:	6a3b      	ldr	r3, [r7, #32]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 f8c2 	bl	8003740 <I2C_WaitOnFlagUntilTimeout>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00d      	beq.n	80035de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035d0:	d103      	bne.n	80035da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e0aa      	b.n	8003734 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035de:	897b      	ldrh	r3, [r7, #10]
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	461a      	mov	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80035ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f0:	6a3a      	ldr	r2, [r7, #32]
 80035f2:	4952      	ldr	r1, [pc, #328]	@ (800373c <I2C_RequestMemoryRead+0x1cc>)
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 f91d 	bl	8003834 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e097      	b.n	8003734 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003604:	2300      	movs	r3, #0
 8003606:	617b      	str	r3, [r7, #20]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	617b      	str	r3, [r7, #20]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800361a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800361c:	6a39      	ldr	r1, [r7, #32]
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f000 f9a8 	bl	8003974 <I2C_WaitOnTXEFlagUntilTimeout>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00d      	beq.n	8003646 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362e:	2b04      	cmp	r3, #4
 8003630:	d107      	bne.n	8003642 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003640:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e076      	b.n	8003734 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003646:	88fb      	ldrh	r3, [r7, #6]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d105      	bne.n	8003658 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800364c:	893b      	ldrh	r3, [r7, #8]
 800364e:	b2da      	uxtb	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	611a      	str	r2, [r3, #16]
 8003656:	e021      	b.n	800369c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003658:	893b      	ldrh	r3, [r7, #8]
 800365a:	0a1b      	lsrs	r3, r3, #8
 800365c:	b29b      	uxth	r3, r3
 800365e:	b2da      	uxtb	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003666:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003668:	6a39      	ldr	r1, [r7, #32]
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 f982 	bl	8003974 <I2C_WaitOnTXEFlagUntilTimeout>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00d      	beq.n	8003692 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367a:	2b04      	cmp	r3, #4
 800367c:	d107      	bne.n	800368e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800368c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e050      	b.n	8003734 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003692:	893b      	ldrh	r3, [r7, #8]
 8003694:	b2da      	uxtb	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800369c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800369e:	6a39      	ldr	r1, [r7, #32]
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 f967 	bl	8003974 <I2C_WaitOnTXEFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00d      	beq.n	80036c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d107      	bne.n	80036c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e035      	b.n	8003734 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80036d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	2200      	movs	r2, #0
 80036e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 f82b 	bl	8003740 <I2C_WaitOnFlagUntilTimeout>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00d      	beq.n	800370c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036fe:	d103      	bne.n	8003708 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003706:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e013      	b.n	8003734 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800370c:	897b      	ldrh	r3, [r7, #10]
 800370e:	b2db      	uxtb	r3, r3
 8003710:	f043 0301 	orr.w	r3, r3, #1
 8003714:	b2da      	uxtb	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800371c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371e:	6a3a      	ldr	r2, [r7, #32]
 8003720:	4906      	ldr	r1, [pc, #24]	@ (800373c <I2C_RequestMemoryRead+0x1cc>)
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 f886 	bl	8003834 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e000      	b.n	8003734 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3718      	adds	r7, #24
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}
 800373c:	00010002 	.word	0x00010002

08003740 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	603b      	str	r3, [r7, #0]
 800374c:	4613      	mov	r3, r2
 800374e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003750:	e048      	b.n	80037e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003758:	d044      	beq.n	80037e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800375a:	f7ff f8e3 	bl	8002924 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	429a      	cmp	r2, r3
 8003768:	d302      	bcc.n	8003770 <I2C_WaitOnFlagUntilTimeout+0x30>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d139      	bne.n	80037e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	0c1b      	lsrs	r3, r3, #16
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b01      	cmp	r3, #1
 8003778:	d10d      	bne.n	8003796 <I2C_WaitOnFlagUntilTimeout+0x56>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	43da      	mvns	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	4013      	ands	r3, r2
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	bf0c      	ite	eq
 800378c:	2301      	moveq	r3, #1
 800378e:	2300      	movne	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	461a      	mov	r2, r3
 8003794:	e00c      	b.n	80037b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	43da      	mvns	r2, r3
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	4013      	ands	r3, r2
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	bf0c      	ite	eq
 80037a8:	2301      	moveq	r3, #1
 80037aa:	2300      	movne	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	461a      	mov	r2, r3
 80037b0:	79fb      	ldrb	r3, [r7, #7]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d116      	bne.n	80037e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d0:	f043 0220 	orr.w	r2, r3, #32
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e023      	b.n	800382c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	0c1b      	lsrs	r3, r3, #16
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d10d      	bne.n	800380a <I2C_WaitOnFlagUntilTimeout+0xca>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	43da      	mvns	r2, r3
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	4013      	ands	r3, r2
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	bf0c      	ite	eq
 8003800:	2301      	moveq	r3, #1
 8003802:	2300      	movne	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	461a      	mov	r2, r3
 8003808:	e00c      	b.n	8003824 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	43da      	mvns	r2, r3
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	4013      	ands	r3, r2
 8003816:	b29b      	uxth	r3, r3
 8003818:	2b00      	cmp	r3, #0
 800381a:	bf0c      	ite	eq
 800381c:	2301      	moveq	r3, #1
 800381e:	2300      	movne	r3, #0
 8003820:	b2db      	uxtb	r3, r3
 8003822:	461a      	mov	r2, r3
 8003824:	79fb      	ldrb	r3, [r7, #7]
 8003826:	429a      	cmp	r2, r3
 8003828:	d093      	beq.n	8003752 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	4618      	mov	r0, r3
 800382e:	3710      	adds	r7, #16
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
 8003840:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003842:	e071      	b.n	8003928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800384e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003852:	d123      	bne.n	800389c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003862:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800386c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2220      	movs	r2, #32
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003888:	f043 0204 	orr.w	r2, r3, #4
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e067      	b.n	800396c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038a2:	d041      	beq.n	8003928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038a4:	f7ff f83e 	bl	8002924 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d302      	bcc.n	80038ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d136      	bne.n	8003928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	0c1b      	lsrs	r3, r3, #16
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d10c      	bne.n	80038de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	43da      	mvns	r2, r3
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	4013      	ands	r3, r2
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	bf14      	ite	ne
 80038d6:	2301      	movne	r3, #1
 80038d8:	2300      	moveq	r3, #0
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	e00b      	b.n	80038f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	43da      	mvns	r2, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	4013      	ands	r3, r2
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	bf14      	ite	ne
 80038f0:	2301      	movne	r3, #1
 80038f2:	2300      	moveq	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d016      	beq.n	8003928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2220      	movs	r2, #32
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003914:	f043 0220 	orr.w	r2, r3, #32
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e021      	b.n	800396c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	0c1b      	lsrs	r3, r3, #16
 800392c:	b2db      	uxtb	r3, r3
 800392e:	2b01      	cmp	r3, #1
 8003930:	d10c      	bne.n	800394c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	695b      	ldr	r3, [r3, #20]
 8003938:	43da      	mvns	r2, r3
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	4013      	ands	r3, r2
 800393e:	b29b      	uxth	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	bf14      	ite	ne
 8003944:	2301      	movne	r3, #1
 8003946:	2300      	moveq	r3, #0
 8003948:	b2db      	uxtb	r3, r3
 800394a:	e00b      	b.n	8003964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	43da      	mvns	r2, r3
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	4013      	ands	r3, r2
 8003958:	b29b      	uxth	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	bf14      	ite	ne
 800395e:	2301      	movne	r3, #1
 8003960:	2300      	moveq	r3, #0
 8003962:	b2db      	uxtb	r3, r3
 8003964:	2b00      	cmp	r3, #0
 8003966:	f47f af6d 	bne.w	8003844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}

08003974 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003980:	e034      	b.n	80039ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 f89b 	bl	8003abe <I2C_IsAcknowledgeFailed>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e034      	b.n	80039fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003998:	d028      	beq.n	80039ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800399a:	f7fe ffc3 	bl	8002924 <HAL_GetTick>
 800399e:	4602      	mov	r2, r0
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d302      	bcc.n	80039b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d11d      	bne.n	80039ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039ba:	2b80      	cmp	r3, #128	@ 0x80
 80039bc:	d016      	beq.n	80039ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d8:	f043 0220 	orr.w	r2, r3, #32
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e007      	b.n	80039fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039f6:	2b80      	cmp	r3, #128	@ 0x80
 80039f8:	d1c3      	bne.n	8003982 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a10:	e049      	b.n	8003aa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	f003 0310 	and.w	r3, r3, #16
 8003a1c:	2b10      	cmp	r3, #16
 8003a1e:	d119      	bne.n	8003a54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f06f 0210 	mvn.w	r2, #16
 8003a28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2220      	movs	r2, #32
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e030      	b.n	8003ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a54:	f7fe ff66 	bl	8002924 <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d302      	bcc.n	8003a6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d11d      	bne.n	8003aa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a74:	2b40      	cmp	r3, #64	@ 0x40
 8003a76:	d016      	beq.n	8003aa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2220      	movs	r2, #32
 8003a82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a92:	f043 0220 	orr.w	r2, r3, #32
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e007      	b.n	8003ab6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab0:	2b40      	cmp	r3, #64	@ 0x40
 8003ab2:	d1ae      	bne.n	8003a12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	695b      	ldr	r3, [r3, #20]
 8003acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ad0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ad4:	d11b      	bne.n	8003b0e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ade:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2220      	movs	r2, #32
 8003aea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afa:	f043 0204 	orr.w	r2, r3, #4
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e000      	b.n	8003b10 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e267      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d075      	beq.n	8003c26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b3a:	4b88      	ldr	r3, [pc, #544]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 030c 	and.w	r3, r3, #12
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d00c      	beq.n	8003b60 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b46:	4b85      	ldr	r3, [pc, #532]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d112      	bne.n	8003b78 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b52:	4b82      	ldr	r3, [pc, #520]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b5e:	d10b      	bne.n	8003b78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b60:	4b7e      	ldr	r3, [pc, #504]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d05b      	beq.n	8003c24 <HAL_RCC_OscConfig+0x108>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d157      	bne.n	8003c24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e242      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b80:	d106      	bne.n	8003b90 <HAL_RCC_OscConfig+0x74>
 8003b82:	4b76      	ldr	r3, [pc, #472]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a75      	ldr	r2, [pc, #468]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003b88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	e01d      	b.n	8003bcc <HAL_RCC_OscConfig+0xb0>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b98:	d10c      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x98>
 8003b9a:	4b70      	ldr	r3, [pc, #448]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a6f      	ldr	r2, [pc, #444]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003ba0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	4b6d      	ldr	r3, [pc, #436]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a6c      	ldr	r2, [pc, #432]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003bac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	e00b      	b.n	8003bcc <HAL_RCC_OscConfig+0xb0>
 8003bb4:	4b69      	ldr	r3, [pc, #420]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a68      	ldr	r2, [pc, #416]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003bba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bbe:	6013      	str	r3, [r2, #0]
 8003bc0:	4b66      	ldr	r3, [pc, #408]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a65      	ldr	r2, [pc, #404]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003bc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d013      	beq.n	8003bfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd4:	f7fe fea6 	bl	8002924 <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bdc:	f7fe fea2 	bl	8002924 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b64      	cmp	r3, #100	@ 0x64
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e207      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bee:	4b5b      	ldr	r3, [pc, #364]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0f0      	beq.n	8003bdc <HAL_RCC_OscConfig+0xc0>
 8003bfa:	e014      	b.n	8003c26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfc:	f7fe fe92 	bl	8002924 <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c04:	f7fe fe8e 	bl	8002924 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b64      	cmp	r3, #100	@ 0x64
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e1f3      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c16:	4b51      	ldr	r3, [pc, #324]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f0      	bne.n	8003c04 <HAL_RCC_OscConfig+0xe8>
 8003c22:	e000      	b.n	8003c26 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d063      	beq.n	8003cfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c32:	4b4a      	ldr	r3, [pc, #296]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 030c 	and.w	r3, r3, #12
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00b      	beq.n	8003c56 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c3e:	4b47      	ldr	r3, [pc, #284]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003c46:	2b08      	cmp	r3, #8
 8003c48:	d11c      	bne.n	8003c84 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c4a:	4b44      	ldr	r3, [pc, #272]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d116      	bne.n	8003c84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c56:	4b41      	ldr	r3, [pc, #260]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d005      	beq.n	8003c6e <HAL_RCC_OscConfig+0x152>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d001      	beq.n	8003c6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e1c7      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6e:	4b3b      	ldr	r3, [pc, #236]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4937      	ldr	r1, [pc, #220]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c82:	e03a      	b.n	8003cfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d020      	beq.n	8003cce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c8c:	4b34      	ldr	r3, [pc, #208]	@ (8003d60 <HAL_RCC_OscConfig+0x244>)
 8003c8e:	2201      	movs	r2, #1
 8003c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c92:	f7fe fe47 	bl	8002924 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c9a:	f7fe fe43 	bl	8002924 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e1a8      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cac:	4b2b      	ldr	r3, [pc, #172]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0f0      	beq.n	8003c9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb8:	4b28      	ldr	r3, [pc, #160]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	4925      	ldr	r1, [pc, #148]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	600b      	str	r3, [r1, #0]
 8003ccc:	e015      	b.n	8003cfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cce:	4b24      	ldr	r3, [pc, #144]	@ (8003d60 <HAL_RCC_OscConfig+0x244>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd4:	f7fe fe26 	bl	8002924 <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cdc:	f7fe fe22 	bl	8002924 <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e187      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cee:	4b1b      	ldr	r3, [pc, #108]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d036      	beq.n	8003d74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d016      	beq.n	8003d3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d0e:	4b15      	ldr	r3, [pc, #84]	@ (8003d64 <HAL_RCC_OscConfig+0x248>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d14:	f7fe fe06 	bl	8002924 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d1c:	f7fe fe02 	bl	8002924 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e167      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d5c <HAL_RCC_OscConfig+0x240>)
 8003d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCC_OscConfig+0x200>
 8003d3a:	e01b      	b.n	8003d74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d3c:	4b09      	ldr	r3, [pc, #36]	@ (8003d64 <HAL_RCC_OscConfig+0x248>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d42:	f7fe fdef 	bl	8002924 <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d48:	e00e      	b.n	8003d68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d4a:	f7fe fdeb 	bl	8002924 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d907      	bls.n	8003d68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e150      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	42470000 	.word	0x42470000
 8003d64:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d68:	4b88      	ldr	r3, [pc, #544]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003d6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1ea      	bne.n	8003d4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 8097 	beq.w	8003eb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d82:	2300      	movs	r3, #0
 8003d84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d86:	4b81      	ldr	r3, [pc, #516]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10f      	bne.n	8003db2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d92:	2300      	movs	r3, #0
 8003d94:	60bb      	str	r3, [r7, #8]
 8003d96:	4b7d      	ldr	r3, [pc, #500]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9a:	4a7c      	ldr	r2, [pc, #496]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003d9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003da0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003da2:	4b7a      	ldr	r3, [pc, #488]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003daa:	60bb      	str	r3, [r7, #8]
 8003dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dae:	2301      	movs	r3, #1
 8003db0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db2:	4b77      	ldr	r3, [pc, #476]	@ (8003f90 <HAL_RCC_OscConfig+0x474>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d118      	bne.n	8003df0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dbe:	4b74      	ldr	r3, [pc, #464]	@ (8003f90 <HAL_RCC_OscConfig+0x474>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a73      	ldr	r2, [pc, #460]	@ (8003f90 <HAL_RCC_OscConfig+0x474>)
 8003dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dca:	f7fe fdab 	bl	8002924 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd2:	f7fe fda7 	bl	8002924 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b02      	cmp	r3, #2
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e10c      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de4:	4b6a      	ldr	r3, [pc, #424]	@ (8003f90 <HAL_RCC_OscConfig+0x474>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d0f0      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d106      	bne.n	8003e06 <HAL_RCC_OscConfig+0x2ea>
 8003df8:	4b64      	ldr	r3, [pc, #400]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfc:	4a63      	ldr	r2, [pc, #396]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003dfe:	f043 0301 	orr.w	r3, r3, #1
 8003e02:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e04:	e01c      	b.n	8003e40 <HAL_RCC_OscConfig+0x324>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	2b05      	cmp	r3, #5
 8003e0c:	d10c      	bne.n	8003e28 <HAL_RCC_OscConfig+0x30c>
 8003e0e:	4b5f      	ldr	r3, [pc, #380]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e12:	4a5e      	ldr	r2, [pc, #376]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003e14:	f043 0304 	orr.w	r3, r3, #4
 8003e18:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e1a:	4b5c      	ldr	r3, [pc, #368]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e1e:	4a5b      	ldr	r2, [pc, #364]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003e20:	f043 0301 	orr.w	r3, r3, #1
 8003e24:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e26:	e00b      	b.n	8003e40 <HAL_RCC_OscConfig+0x324>
 8003e28:	4b58      	ldr	r3, [pc, #352]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e2c:	4a57      	ldr	r2, [pc, #348]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003e2e:	f023 0301 	bic.w	r3, r3, #1
 8003e32:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e34:	4b55      	ldr	r3, [pc, #340]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e38:	4a54      	ldr	r2, [pc, #336]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003e3a:	f023 0304 	bic.w	r3, r3, #4
 8003e3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d015      	beq.n	8003e74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e48:	f7fe fd6c 	bl	8002924 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e4e:	e00a      	b.n	8003e66 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e50:	f7fe fd68 	bl	8002924 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e0cb      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e66:	4b49      	ldr	r3, [pc, #292]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d0ee      	beq.n	8003e50 <HAL_RCC_OscConfig+0x334>
 8003e72:	e014      	b.n	8003e9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e74:	f7fe fd56 	bl	8002924 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e7a:	e00a      	b.n	8003e92 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e7c:	f7fe fd52 	bl	8002924 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e0b5      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e92:	4b3e      	ldr	r3, [pc, #248]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e96:	f003 0302 	and.w	r3, r3, #2
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1ee      	bne.n	8003e7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e9e:	7dfb      	ldrb	r3, [r7, #23]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d105      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea4:	4b39      	ldr	r3, [pc, #228]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea8:	4a38      	ldr	r2, [pc, #224]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003eaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003eae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 80a1 	beq.w	8003ffc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003eba:	4b34      	ldr	r3, [pc, #208]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 030c 	and.w	r3, r3, #12
 8003ec2:	2b08      	cmp	r3, #8
 8003ec4:	d05c      	beq.n	8003f80 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d141      	bne.n	8003f52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ece:	4b31      	ldr	r3, [pc, #196]	@ (8003f94 <HAL_RCC_OscConfig+0x478>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed4:	f7fe fd26 	bl	8002924 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003edc:	f7fe fd22 	bl	8002924 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e087      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eee:	4b27      	ldr	r3, [pc, #156]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f0      	bne.n	8003edc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69da      	ldr	r2, [r3, #28]
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f08:	019b      	lsls	r3, r3, #6
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f10:	085b      	lsrs	r3, r3, #1
 8003f12:	3b01      	subs	r3, #1
 8003f14:	041b      	lsls	r3, r3, #16
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1c:	061b      	lsls	r3, r3, #24
 8003f1e:	491b      	ldr	r1, [pc, #108]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f24:	4b1b      	ldr	r3, [pc, #108]	@ (8003f94 <HAL_RCC_OscConfig+0x478>)
 8003f26:	2201      	movs	r2, #1
 8003f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2a:	f7fe fcfb 	bl	8002924 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f32:	f7fe fcf7 	bl	8002924 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e05c      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f44:	4b11      	ldr	r3, [pc, #68]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0f0      	beq.n	8003f32 <HAL_RCC_OscConfig+0x416>
 8003f50:	e054      	b.n	8003ffc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f52:	4b10      	ldr	r3, [pc, #64]	@ (8003f94 <HAL_RCC_OscConfig+0x478>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f58:	f7fe fce4 	bl	8002924 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f60:	f7fe fce0 	bl	8002924 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e045      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f72:	4b06      	ldr	r3, [pc, #24]	@ (8003f8c <HAL_RCC_OscConfig+0x470>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f0      	bne.n	8003f60 <HAL_RCC_OscConfig+0x444>
 8003f7e:	e03d      	b.n	8003ffc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d107      	bne.n	8003f98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e038      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	40007000 	.word	0x40007000
 8003f94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f98:	4b1b      	ldr	r3, [pc, #108]	@ (8004008 <HAL_RCC_OscConfig+0x4ec>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d028      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d121      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d11a      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003fc8:	4013      	ands	r3, r2
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003fce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d111      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fde:	085b      	lsrs	r3, r3, #1
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d107      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d001      	beq.n	8003ffc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e000      	b.n	8003ffe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40023800 	.word	0x40023800

0800400c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e0cc      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004020:	4b68      	ldr	r3, [pc, #416]	@ (80041c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0307 	and.w	r3, r3, #7
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	429a      	cmp	r2, r3
 800402c:	d90c      	bls.n	8004048 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800402e:	4b65      	ldr	r3, [pc, #404]	@ (80041c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004030:	683a      	ldr	r2, [r7, #0]
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004036:	4b63      	ldr	r3, [pc, #396]	@ (80041c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	429a      	cmp	r2, r3
 8004042:	d001      	beq.n	8004048 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e0b8      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d020      	beq.n	8004096 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	2b00      	cmp	r3, #0
 800405e:	d005      	beq.n	800406c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004060:	4b59      	ldr	r3, [pc, #356]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	4a58      	ldr	r2, [pc, #352]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004066:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800406a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0308 	and.w	r3, r3, #8
 8004074:	2b00      	cmp	r3, #0
 8004076:	d005      	beq.n	8004084 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004078:	4b53      	ldr	r3, [pc, #332]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	4a52      	ldr	r2, [pc, #328]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 800407e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004082:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004084:	4b50      	ldr	r3, [pc, #320]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	494d      	ldr	r1, [pc, #308]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004092:	4313      	orrs	r3, r2
 8004094:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d044      	beq.n	800412c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d107      	bne.n	80040ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040aa:	4b47      	ldr	r3, [pc, #284]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d119      	bne.n	80040ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e07f      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d003      	beq.n	80040ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040c6:	2b03      	cmp	r3, #3
 80040c8:	d107      	bne.n	80040da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ca:	4b3f      	ldr	r3, [pc, #252]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d109      	bne.n	80040ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e06f      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040da:	4b3b      	ldr	r3, [pc, #236]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e067      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ea:	4b37      	ldr	r3, [pc, #220]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f023 0203 	bic.w	r2, r3, #3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	4934      	ldr	r1, [pc, #208]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040fc:	f7fe fc12 	bl	8002924 <HAL_GetTick>
 8004100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004102:	e00a      	b.n	800411a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004104:	f7fe fc0e 	bl	8002924 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004112:	4293      	cmp	r3, r2
 8004114:	d901      	bls.n	800411a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e04f      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800411a:	4b2b      	ldr	r3, [pc, #172]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 020c 	and.w	r2, r3, #12
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	429a      	cmp	r2, r3
 800412a:	d1eb      	bne.n	8004104 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800412c:	4b25      	ldr	r3, [pc, #148]	@ (80041c4 <HAL_RCC_ClockConfig+0x1b8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	683a      	ldr	r2, [r7, #0]
 8004136:	429a      	cmp	r2, r3
 8004138:	d20c      	bcs.n	8004154 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413a:	4b22      	ldr	r3, [pc, #136]	@ (80041c4 <HAL_RCC_ClockConfig+0x1b8>)
 800413c:	683a      	ldr	r2, [r7, #0]
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004142:	4b20      	ldr	r3, [pc, #128]	@ (80041c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	429a      	cmp	r2, r3
 800414e:	d001      	beq.n	8004154 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e032      	b.n	80041ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	d008      	beq.n	8004172 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004160:	4b19      	ldr	r3, [pc, #100]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	4916      	ldr	r1, [pc, #88]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 800416e:	4313      	orrs	r3, r2
 8004170:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0308 	and.w	r3, r3, #8
 800417a:	2b00      	cmp	r3, #0
 800417c:	d009      	beq.n	8004192 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800417e:	4b12      	ldr	r3, [pc, #72]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	490e      	ldr	r1, [pc, #56]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	4313      	orrs	r3, r2
 8004190:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004192:	f000 f821 	bl	80041d8 <HAL_RCC_GetSysClockFreq>
 8004196:	4602      	mov	r2, r0
 8004198:	4b0b      	ldr	r3, [pc, #44]	@ (80041c8 <HAL_RCC_ClockConfig+0x1bc>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	091b      	lsrs	r3, r3, #4
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	490a      	ldr	r1, [pc, #40]	@ (80041cc <HAL_RCC_ClockConfig+0x1c0>)
 80041a4:	5ccb      	ldrb	r3, [r1, r3]
 80041a6:	fa22 f303 	lsr.w	r3, r2, r3
 80041aa:	4a09      	ldr	r2, [pc, #36]	@ (80041d0 <HAL_RCC_ClockConfig+0x1c4>)
 80041ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80041ae:	4b09      	ldr	r3, [pc, #36]	@ (80041d4 <HAL_RCC_ClockConfig+0x1c8>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fe fa98 	bl	80026e8 <HAL_InitTick>

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	40023c00 	.word	0x40023c00
 80041c8:	40023800 	.word	0x40023800
 80041cc:	08005978 	.word	0x08005978
 80041d0:	20000084 	.word	0x20000084
 80041d4:	20000088 	.word	0x20000088

080041d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041dc:	b090      	sub	sp, #64	@ 0x40
 80041de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80041e0:	2300      	movs	r3, #0
 80041e2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80041e8:	2300      	movs	r3, #0
 80041ea:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80041ec:	2300      	movs	r3, #0
 80041ee:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041f0:	4b59      	ldr	r3, [pc, #356]	@ (8004358 <HAL_RCC_GetSysClockFreq+0x180>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f003 030c 	and.w	r3, r3, #12
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d00d      	beq.n	8004218 <HAL_RCC_GetSysClockFreq+0x40>
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	f200 80a1 	bhi.w	8004344 <HAL_RCC_GetSysClockFreq+0x16c>
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <HAL_RCC_GetSysClockFreq+0x34>
 8004206:	2b04      	cmp	r3, #4
 8004208:	d003      	beq.n	8004212 <HAL_RCC_GetSysClockFreq+0x3a>
 800420a:	e09b      	b.n	8004344 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800420c:	4b53      	ldr	r3, [pc, #332]	@ (800435c <HAL_RCC_GetSysClockFreq+0x184>)
 800420e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004210:	e09b      	b.n	800434a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004212:	4b53      	ldr	r3, [pc, #332]	@ (8004360 <HAL_RCC_GetSysClockFreq+0x188>)
 8004214:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004216:	e098      	b.n	800434a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004218:	4b4f      	ldr	r3, [pc, #316]	@ (8004358 <HAL_RCC_GetSysClockFreq+0x180>)
 800421a:	685b      	ldr	r3, [r3, #4]
 800421c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004220:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004222:	4b4d      	ldr	r3, [pc, #308]	@ (8004358 <HAL_RCC_GetSysClockFreq+0x180>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d028      	beq.n	8004280 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800422e:	4b4a      	ldr	r3, [pc, #296]	@ (8004358 <HAL_RCC_GetSysClockFreq+0x180>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	099b      	lsrs	r3, r3, #6
 8004234:	2200      	movs	r2, #0
 8004236:	623b      	str	r3, [r7, #32]
 8004238:	627a      	str	r2, [r7, #36]	@ 0x24
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004240:	2100      	movs	r1, #0
 8004242:	4b47      	ldr	r3, [pc, #284]	@ (8004360 <HAL_RCC_GetSysClockFreq+0x188>)
 8004244:	fb03 f201 	mul.w	r2, r3, r1
 8004248:	2300      	movs	r3, #0
 800424a:	fb00 f303 	mul.w	r3, r0, r3
 800424e:	4413      	add	r3, r2
 8004250:	4a43      	ldr	r2, [pc, #268]	@ (8004360 <HAL_RCC_GetSysClockFreq+0x188>)
 8004252:	fba0 1202 	umull	r1, r2, r0, r2
 8004256:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004258:	460a      	mov	r2, r1
 800425a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800425c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800425e:	4413      	add	r3, r2
 8004260:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004264:	2200      	movs	r2, #0
 8004266:	61bb      	str	r3, [r7, #24]
 8004268:	61fa      	str	r2, [r7, #28]
 800426a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800426e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004272:	f7fc fc8d 	bl	8000b90 <__aeabi_uldivmod>
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	4613      	mov	r3, r2
 800427c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800427e:	e053      	b.n	8004328 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004280:	4b35      	ldr	r3, [pc, #212]	@ (8004358 <HAL_RCC_GetSysClockFreq+0x180>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	099b      	lsrs	r3, r3, #6
 8004286:	2200      	movs	r2, #0
 8004288:	613b      	str	r3, [r7, #16]
 800428a:	617a      	str	r2, [r7, #20]
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004292:	f04f 0b00 	mov.w	fp, #0
 8004296:	4652      	mov	r2, sl
 8004298:	465b      	mov	r3, fp
 800429a:	f04f 0000 	mov.w	r0, #0
 800429e:	f04f 0100 	mov.w	r1, #0
 80042a2:	0159      	lsls	r1, r3, #5
 80042a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042a8:	0150      	lsls	r0, r2, #5
 80042aa:	4602      	mov	r2, r0
 80042ac:	460b      	mov	r3, r1
 80042ae:	ebb2 080a 	subs.w	r8, r2, sl
 80042b2:	eb63 090b 	sbc.w	r9, r3, fp
 80042b6:	f04f 0200 	mov.w	r2, #0
 80042ba:	f04f 0300 	mov.w	r3, #0
 80042be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80042c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80042c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80042ca:	ebb2 0408 	subs.w	r4, r2, r8
 80042ce:	eb63 0509 	sbc.w	r5, r3, r9
 80042d2:	f04f 0200 	mov.w	r2, #0
 80042d6:	f04f 0300 	mov.w	r3, #0
 80042da:	00eb      	lsls	r3, r5, #3
 80042dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042e0:	00e2      	lsls	r2, r4, #3
 80042e2:	4614      	mov	r4, r2
 80042e4:	461d      	mov	r5, r3
 80042e6:	eb14 030a 	adds.w	r3, r4, sl
 80042ea:	603b      	str	r3, [r7, #0]
 80042ec:	eb45 030b 	adc.w	r3, r5, fp
 80042f0:	607b      	str	r3, [r7, #4]
 80042f2:	f04f 0200 	mov.w	r2, #0
 80042f6:	f04f 0300 	mov.w	r3, #0
 80042fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042fe:	4629      	mov	r1, r5
 8004300:	028b      	lsls	r3, r1, #10
 8004302:	4621      	mov	r1, r4
 8004304:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004308:	4621      	mov	r1, r4
 800430a:	028a      	lsls	r2, r1, #10
 800430c:	4610      	mov	r0, r2
 800430e:	4619      	mov	r1, r3
 8004310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004312:	2200      	movs	r2, #0
 8004314:	60bb      	str	r3, [r7, #8]
 8004316:	60fa      	str	r2, [r7, #12]
 8004318:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800431c:	f7fc fc38 	bl	8000b90 <__aeabi_uldivmod>
 8004320:	4602      	mov	r2, r0
 8004322:	460b      	mov	r3, r1
 8004324:	4613      	mov	r3, r2
 8004326:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004328:	4b0b      	ldr	r3, [pc, #44]	@ (8004358 <HAL_RCC_GetSysClockFreq+0x180>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	0c1b      	lsrs	r3, r3, #16
 800432e:	f003 0303 	and.w	r3, r3, #3
 8004332:	3301      	adds	r3, #1
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004338:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800433a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004340:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004342:	e002      	b.n	800434a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004344:	4b05      	ldr	r3, [pc, #20]	@ (800435c <HAL_RCC_GetSysClockFreq+0x184>)
 8004346:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004348:	bf00      	nop
    }
  }
  return sysclockfreq;
 800434a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800434c:	4618      	mov	r0, r3
 800434e:	3740      	adds	r7, #64	@ 0x40
 8004350:	46bd      	mov	sp, r7
 8004352:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004356:	bf00      	nop
 8004358:	40023800 	.word	0x40023800
 800435c:	00f42400 	.word	0x00f42400
 8004360:	017d7840 	.word	0x017d7840

08004364 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004364:	b480      	push	{r7}
 8004366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004368:	4b03      	ldr	r3, [pc, #12]	@ (8004378 <HAL_RCC_GetHCLKFreq+0x14>)
 800436a:	681b      	ldr	r3, [r3, #0]
}
 800436c:	4618      	mov	r0, r3
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	20000084 	.word	0x20000084

0800437c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004380:	f7ff fff0 	bl	8004364 <HAL_RCC_GetHCLKFreq>
 8004384:	4602      	mov	r2, r0
 8004386:	4b05      	ldr	r3, [pc, #20]	@ (800439c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	0a9b      	lsrs	r3, r3, #10
 800438c:	f003 0307 	and.w	r3, r3, #7
 8004390:	4903      	ldr	r1, [pc, #12]	@ (80043a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004392:	5ccb      	ldrb	r3, [r1, r3]
 8004394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004398:	4618      	mov	r0, r3
 800439a:	bd80      	pop	{r7, pc}
 800439c:	40023800 	.word	0x40023800
 80043a0:	08005988 	.word	0x08005988

080043a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043a8:	f7ff ffdc 	bl	8004364 <HAL_RCC_GetHCLKFreq>
 80043ac:	4602      	mov	r2, r0
 80043ae:	4b05      	ldr	r3, [pc, #20]	@ (80043c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	0b5b      	lsrs	r3, r3, #13
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	4903      	ldr	r1, [pc, #12]	@ (80043c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043ba:	5ccb      	ldrb	r3, [r1, r3]
 80043bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	40023800 	.word	0x40023800
 80043c8:	08005988 	.word	0x08005988

080043cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	220f      	movs	r2, #15
 80043da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80043dc:	4b12      	ldr	r3, [pc, #72]	@ (8004428 <HAL_RCC_GetClockConfig+0x5c>)
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f003 0203 	and.w	r2, r3, #3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80043e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004428 <HAL_RCC_GetClockConfig+0x5c>)
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80043f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004428 <HAL_RCC_GetClockConfig+0x5c>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004400:	4b09      	ldr	r3, [pc, #36]	@ (8004428 <HAL_RCC_GetClockConfig+0x5c>)
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	08db      	lsrs	r3, r3, #3
 8004406:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800440e:	4b07      	ldr	r3, [pc, #28]	@ (800442c <HAL_RCC_GetClockConfig+0x60>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0207 	and.w	r2, r3, #7
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	601a      	str	r2, [r3, #0]
}
 800441a:	bf00      	nop
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr
 8004426:	bf00      	nop
 8004428:	40023800 	.word	0x40023800
 800442c:	40023c00 	.word	0x40023c00

08004430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e041      	b.n	80044c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d106      	bne.n	800445c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f839 	bl	80044ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3304      	adds	r3, #4
 800446c:	4619      	mov	r1, r3
 800446e:	4610      	mov	r0, r2
 8004470:	f000 fb74 	bl	8004b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2201      	movs	r2, #1
 8004478:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3708      	adds	r7, #8
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80044ce:	b480      	push	{r7}
 80044d0:	b083      	sub	sp, #12
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
	...

080044e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d001      	beq.n	80044fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e044      	b.n	8004586 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2202      	movs	r2, #2
 8004500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68da      	ldr	r2, [r3, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0201 	orr.w	r2, r2, #1
 8004512:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a1e      	ldr	r2, [pc, #120]	@ (8004594 <HAL_TIM_Base_Start_IT+0xb0>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d018      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0x6c>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004526:	d013      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0x6c>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a1a      	ldr	r2, [pc, #104]	@ (8004598 <HAL_TIM_Base_Start_IT+0xb4>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d00e      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0x6c>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a19      	ldr	r2, [pc, #100]	@ (800459c <HAL_TIM_Base_Start_IT+0xb8>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d009      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0x6c>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a17      	ldr	r2, [pc, #92]	@ (80045a0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d004      	beq.n	8004550 <HAL_TIM_Base_Start_IT+0x6c>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a16      	ldr	r2, [pc, #88]	@ (80045a4 <HAL_TIM_Base_Start_IT+0xc0>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d111      	bne.n	8004574 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 0307 	and.w	r3, r3, #7
 800455a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2b06      	cmp	r3, #6
 8004560:	d010      	beq.n	8004584 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f042 0201 	orr.w	r2, r2, #1
 8004570:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004572:	e007      	b.n	8004584 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0201 	orr.w	r2, r2, #1
 8004582:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	40010000 	.word	0x40010000
 8004598:	40000400 	.word	0x40000400
 800459c:	40000800 	.word	0x40000800
 80045a0:	40000c00 	.word	0x40000c00
 80045a4:	40014000 	.word	0x40014000

080045a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e041      	b.n	800463e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d106      	bne.n	80045d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7fd ff8e 	bl	80024f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	3304      	adds	r3, #4
 80045e4:	4619      	mov	r1, r3
 80045e6:	4610      	mov	r0, r2
 80045e8:	f000 fab8 	bl	8004b5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d109      	bne.n	800466c <HAL_TIM_PWM_Start+0x24>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b01      	cmp	r3, #1
 8004662:	bf14      	ite	ne
 8004664:	2301      	movne	r3, #1
 8004666:	2300      	moveq	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	e022      	b.n	80046b2 <HAL_TIM_PWM_Start+0x6a>
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2b04      	cmp	r3, #4
 8004670:	d109      	bne.n	8004686 <HAL_TIM_PWM_Start+0x3e>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b01      	cmp	r3, #1
 800467c:	bf14      	ite	ne
 800467e:	2301      	movne	r3, #1
 8004680:	2300      	moveq	r3, #0
 8004682:	b2db      	uxtb	r3, r3
 8004684:	e015      	b.n	80046b2 <HAL_TIM_PWM_Start+0x6a>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b08      	cmp	r3, #8
 800468a:	d109      	bne.n	80046a0 <HAL_TIM_PWM_Start+0x58>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b01      	cmp	r3, #1
 8004696:	bf14      	ite	ne
 8004698:	2301      	movne	r3, #1
 800469a:	2300      	moveq	r3, #0
 800469c:	b2db      	uxtb	r3, r3
 800469e:	e008      	b.n	80046b2 <HAL_TIM_PWM_Start+0x6a>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	bf14      	ite	ne
 80046ac:	2301      	movne	r3, #1
 80046ae:	2300      	moveq	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e068      	b.n	800478c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d104      	bne.n	80046ca <HAL_TIM_PWM_Start+0x82>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2202      	movs	r2, #2
 80046c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046c8:	e013      	b.n	80046f2 <HAL_TIM_PWM_Start+0xaa>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b04      	cmp	r3, #4
 80046ce:	d104      	bne.n	80046da <HAL_TIM_PWM_Start+0x92>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046d8:	e00b      	b.n	80046f2 <HAL_TIM_PWM_Start+0xaa>
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	2b08      	cmp	r3, #8
 80046de:	d104      	bne.n	80046ea <HAL_TIM_PWM_Start+0xa2>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046e8:	e003      	b.n	80046f2 <HAL_TIM_PWM_Start+0xaa>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2202      	movs	r2, #2
 80046ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2201      	movs	r2, #1
 80046f8:	6839      	ldr	r1, [r7, #0]
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 fc46 	bl	8004f8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a23      	ldr	r2, [pc, #140]	@ (8004794 <HAL_TIM_PWM_Start+0x14c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d107      	bne.n	800471a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004718:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a1d      	ldr	r2, [pc, #116]	@ (8004794 <HAL_TIM_PWM_Start+0x14c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d018      	beq.n	8004756 <HAL_TIM_PWM_Start+0x10e>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800472c:	d013      	beq.n	8004756 <HAL_TIM_PWM_Start+0x10e>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a19      	ldr	r2, [pc, #100]	@ (8004798 <HAL_TIM_PWM_Start+0x150>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d00e      	beq.n	8004756 <HAL_TIM_PWM_Start+0x10e>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a17      	ldr	r2, [pc, #92]	@ (800479c <HAL_TIM_PWM_Start+0x154>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d009      	beq.n	8004756 <HAL_TIM_PWM_Start+0x10e>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a16      	ldr	r2, [pc, #88]	@ (80047a0 <HAL_TIM_PWM_Start+0x158>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d004      	beq.n	8004756 <HAL_TIM_PWM_Start+0x10e>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a14      	ldr	r2, [pc, #80]	@ (80047a4 <HAL_TIM_PWM_Start+0x15c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d111      	bne.n	800477a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2b06      	cmp	r3, #6
 8004766:	d010      	beq.n	800478a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f042 0201 	orr.w	r2, r2, #1
 8004776:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004778:	e007      	b.n	800478a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f042 0201 	orr.w	r2, r2, #1
 8004788:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3710      	adds	r7, #16
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	40010000 	.word	0x40010000
 8004798:	40000400 	.word	0x40000400
 800479c:	40000800 	.word	0x40000800
 80047a0:	40000c00 	.word	0x40000c00
 80047a4:	40014000 	.word	0x40014000

080047a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d020      	beq.n	800480c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d01b      	beq.n	800480c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f06f 0202 	mvn.w	r2, #2
 80047dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2201      	movs	r2, #1
 80047e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f994 	bl	8004b20 <HAL_TIM_IC_CaptureCallback>
 80047f8:	e005      	b.n	8004806 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 f986 	bl	8004b0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f997 	bl	8004b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	f003 0304 	and.w	r3, r3, #4
 8004812:	2b00      	cmp	r3, #0
 8004814:	d020      	beq.n	8004858 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b00      	cmp	r3, #0
 800481e:	d01b      	beq.n	8004858 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f06f 0204 	mvn.w	r2, #4
 8004828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2202      	movs	r2, #2
 800482e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800483a:	2b00      	cmp	r3, #0
 800483c:	d003      	beq.n	8004846 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f000 f96e 	bl	8004b20 <HAL_TIM_IC_CaptureCallback>
 8004844:	e005      	b.n	8004852 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f960 	bl	8004b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 f971 	bl	8004b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f003 0308 	and.w	r3, r3, #8
 800485e:	2b00      	cmp	r3, #0
 8004860:	d020      	beq.n	80048a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f003 0308 	and.w	r3, r3, #8
 8004868:	2b00      	cmp	r3, #0
 800486a:	d01b      	beq.n	80048a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f06f 0208 	mvn.w	r2, #8
 8004874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2204      	movs	r2, #4
 800487a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f948 	bl	8004b20 <HAL_TIM_IC_CaptureCallback>
 8004890:	e005      	b.n	800489e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f93a 	bl	8004b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 f94b 	bl	8004b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f003 0310 	and.w	r3, r3, #16
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d020      	beq.n	80048f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f003 0310 	and.w	r3, r3, #16
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d01b      	beq.n	80048f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f06f 0210 	mvn.w	r2, #16
 80048c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2208      	movs	r2, #8
 80048c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d003      	beq.n	80048de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f922 	bl	8004b20 <HAL_TIM_IC_CaptureCallback>
 80048dc:	e005      	b.n	80048ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f914 	bl	8004b0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f925 	bl	8004b34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f003 0301 	and.w	r3, r3, #1
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00c      	beq.n	8004914 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b00      	cmp	r3, #0
 8004902:	d007      	beq.n	8004914 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0201 	mvn.w	r2, #1
 800490c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fd fbd6 	bl	80020c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00c      	beq.n	8004938 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004924:	2b00      	cmp	r3, #0
 8004926:	d007      	beq.n	8004938 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 fbc8 	bl	80050c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00c      	beq.n	800495c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004948:	2b00      	cmp	r3, #0
 800494a:	d007      	beq.n	800495c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f8f6 	bl	8004b48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	f003 0320 	and.w	r3, r3, #32
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00c      	beq.n	8004980 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f003 0320 	and.w	r3, r3, #32
 800496c:	2b00      	cmp	r3, #0
 800496e:	d007      	beq.n	8004980 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f06f 0220 	mvn.w	r2, #32
 8004978:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fb9a 	bl	80050b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004980:	bf00      	nop
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004994:	2300      	movs	r3, #0
 8004996:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d101      	bne.n	80049a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049a2:	2302      	movs	r3, #2
 80049a4:	e0ae      	b.n	8004b04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2b0c      	cmp	r3, #12
 80049b2:	f200 809f 	bhi.w	8004af4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80049b6:	a201      	add	r2, pc, #4	@ (adr r2, 80049bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049bc:	080049f1 	.word	0x080049f1
 80049c0:	08004af5 	.word	0x08004af5
 80049c4:	08004af5 	.word	0x08004af5
 80049c8:	08004af5 	.word	0x08004af5
 80049cc:	08004a31 	.word	0x08004a31
 80049d0:	08004af5 	.word	0x08004af5
 80049d4:	08004af5 	.word	0x08004af5
 80049d8:	08004af5 	.word	0x08004af5
 80049dc:	08004a73 	.word	0x08004a73
 80049e0:	08004af5 	.word	0x08004af5
 80049e4:	08004af5 	.word	0x08004af5
 80049e8:	08004af5 	.word	0x08004af5
 80049ec:	08004ab3 	.word	0x08004ab3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68b9      	ldr	r1, [r7, #8]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 f93c 	bl	8004c74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699a      	ldr	r2, [r3, #24]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f042 0208 	orr.w	r2, r2, #8
 8004a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	699a      	ldr	r2, [r3, #24]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f022 0204 	bic.w	r2, r2, #4
 8004a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6999      	ldr	r1, [r3, #24]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	691a      	ldr	r2, [r3, #16]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	619a      	str	r2, [r3, #24]
      break;
 8004a2e:	e064      	b.n	8004afa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68b9      	ldr	r1, [r7, #8]
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 f982 	bl	8004d40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699a      	ldr	r2, [r3, #24]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	699a      	ldr	r2, [r3, #24]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	6999      	ldr	r1, [r3, #24]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	021a      	lsls	r2, r3, #8
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	619a      	str	r2, [r3, #24]
      break;
 8004a70:	e043      	b.n	8004afa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68b9      	ldr	r1, [r7, #8]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 f9cd 	bl	8004e18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69da      	ldr	r2, [r3, #28]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f042 0208 	orr.w	r2, r2, #8
 8004a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	69da      	ldr	r2, [r3, #28]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0204 	bic.w	r2, r2, #4
 8004a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	69d9      	ldr	r1, [r3, #28]
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	691a      	ldr	r2, [r3, #16]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	430a      	orrs	r2, r1
 8004aae:	61da      	str	r2, [r3, #28]
      break;
 8004ab0:	e023      	b.n	8004afa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	68b9      	ldr	r1, [r7, #8]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f000 fa17 	bl	8004eec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	69da      	ldr	r2, [r3, #28]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69da      	ldr	r2, [r3, #28]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	69d9      	ldr	r1, [r3, #28]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	021a      	lsls	r2, r3, #8
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	61da      	str	r2, [r3, #28]
      break;
 8004af2:	e002      	b.n	8004afa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	75fb      	strb	r3, [r7, #23]
      break;
 8004af8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3718      	adds	r7, #24
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr

08004b34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b3c:	bf00      	nop
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr

08004b48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b50:	bf00      	nop
 8004b52:	370c      	adds	r7, #12
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a3a      	ldr	r2, [pc, #232]	@ (8004c58 <TIM_Base_SetConfig+0xfc>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d00f      	beq.n	8004b94 <TIM_Base_SetConfig+0x38>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b7a:	d00b      	beq.n	8004b94 <TIM_Base_SetConfig+0x38>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a37      	ldr	r2, [pc, #220]	@ (8004c5c <TIM_Base_SetConfig+0x100>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d007      	beq.n	8004b94 <TIM_Base_SetConfig+0x38>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a36      	ldr	r2, [pc, #216]	@ (8004c60 <TIM_Base_SetConfig+0x104>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d003      	beq.n	8004b94 <TIM_Base_SetConfig+0x38>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	4a35      	ldr	r2, [pc, #212]	@ (8004c64 <TIM_Base_SetConfig+0x108>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d108      	bne.n	8004ba6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a2b      	ldr	r2, [pc, #172]	@ (8004c58 <TIM_Base_SetConfig+0xfc>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d01b      	beq.n	8004be6 <TIM_Base_SetConfig+0x8a>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bb4:	d017      	beq.n	8004be6 <TIM_Base_SetConfig+0x8a>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a28      	ldr	r2, [pc, #160]	@ (8004c5c <TIM_Base_SetConfig+0x100>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d013      	beq.n	8004be6 <TIM_Base_SetConfig+0x8a>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a27      	ldr	r2, [pc, #156]	@ (8004c60 <TIM_Base_SetConfig+0x104>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d00f      	beq.n	8004be6 <TIM_Base_SetConfig+0x8a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a26      	ldr	r2, [pc, #152]	@ (8004c64 <TIM_Base_SetConfig+0x108>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d00b      	beq.n	8004be6 <TIM_Base_SetConfig+0x8a>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a25      	ldr	r2, [pc, #148]	@ (8004c68 <TIM_Base_SetConfig+0x10c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d007      	beq.n	8004be6 <TIM_Base_SetConfig+0x8a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a24      	ldr	r2, [pc, #144]	@ (8004c6c <TIM_Base_SetConfig+0x110>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d003      	beq.n	8004be6 <TIM_Base_SetConfig+0x8a>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a23      	ldr	r2, [pc, #140]	@ (8004c70 <TIM_Base_SetConfig+0x114>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d108      	bne.n	8004bf8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	689a      	ldr	r2, [r3, #8]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a0e      	ldr	r2, [pc, #56]	@ (8004c58 <TIM_Base_SetConfig+0xfc>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d103      	bne.n	8004c2c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	691a      	ldr	r2, [r3, #16]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d105      	bne.n	8004c4a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	f023 0201 	bic.w	r2, r3, #1
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	611a      	str	r2, [r3, #16]
  }
}
 8004c4a:	bf00      	nop
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	40010000 	.word	0x40010000
 8004c5c:	40000400 	.word	0x40000400
 8004c60:	40000800 	.word	0x40000800
 8004c64:	40000c00 	.word	0x40000c00
 8004c68:	40014000 	.word	0x40014000
 8004c6c:	40014400 	.word	0x40014400
 8004c70:	40014800 	.word	0x40014800

08004c74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	f023 0201 	bic.w	r2, r3, #1
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f023 0303 	bic.w	r3, r3, #3
 8004caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f023 0302 	bic.w	r3, r3, #2
 8004cbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a1c      	ldr	r2, [pc, #112]	@ (8004d3c <TIM_OC1_SetConfig+0xc8>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d10c      	bne.n	8004cea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	f023 0308 	bic.w	r3, r3, #8
 8004cd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	f023 0304 	bic.w	r3, r3, #4
 8004ce8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a13      	ldr	r2, [pc, #76]	@ (8004d3c <TIM_OC1_SetConfig+0xc8>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d111      	bne.n	8004d16 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	697a      	ldr	r2, [r7, #20]
 8004d2e:	621a      	str	r2, [r3, #32]
}
 8004d30:	bf00      	nop
 8004d32:	371c      	adds	r7, #28
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	40010000 	.word	0x40010000

08004d40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b087      	sub	sp, #28
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
 8004d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	f023 0210 	bic.w	r2, r3, #16
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	021b      	lsls	r3, r3, #8
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	f023 0320 	bic.w	r3, r3, #32
 8004d8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a1e      	ldr	r2, [pc, #120]	@ (8004e14 <TIM_OC2_SetConfig+0xd4>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d10d      	bne.n	8004dbc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004da6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	011b      	lsls	r3, r3, #4
 8004dae:	697a      	ldr	r2, [r7, #20]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a15      	ldr	r2, [pc, #84]	@ (8004e14 <TIM_OC2_SetConfig+0xd4>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d113      	bne.n	8004dec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004dca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004dd2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	621a      	str	r2, [r3, #32]
}
 8004e06:	bf00      	nop
 8004e08:	371c      	adds	r7, #28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40010000 	.word	0x40010000

08004e18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b087      	sub	sp, #28
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f023 0303 	bic.w	r3, r3, #3
 8004e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	021b      	lsls	r3, r3, #8
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a1d      	ldr	r2, [pc, #116]	@ (8004ee8 <TIM_OC3_SetConfig+0xd0>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d10d      	bne.n	8004e92 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	021b      	lsls	r3, r3, #8
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	4a14      	ldr	r2, [pc, #80]	@ (8004ee8 <TIM_OC3_SetConfig+0xd0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d113      	bne.n	8004ec2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ea0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ea8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	693a      	ldr	r2, [r7, #16]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	693a      	ldr	r2, [r7, #16]
 8004ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	685a      	ldr	r2, [r3, #4]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	621a      	str	r2, [r3, #32]
}
 8004edc:	bf00      	nop
 8004ede:	371c      	adds	r7, #28
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr
 8004ee8:	40010000 	.word	0x40010000

08004eec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	69db      	ldr	r3, [r3, #28]
 8004f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	021b      	lsls	r3, r3, #8
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	031b      	lsls	r3, r3, #12
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a10      	ldr	r2, [pc, #64]	@ (8004f88 <TIM_OC4_SetConfig+0x9c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d109      	bne.n	8004f60 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	019b      	lsls	r3, r3, #6
 8004f5a:	697a      	ldr	r2, [r7, #20]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	621a      	str	r2, [r3, #32]
}
 8004f7a:	bf00      	nop
 8004f7c:	371c      	adds	r7, #28
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	40010000 	.word	0x40010000

08004f8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b087      	sub	sp, #28
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	f003 031f 	and.w	r3, r3, #31
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6a1a      	ldr	r2, [r3, #32]
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	43db      	mvns	r3, r3
 8004fae:	401a      	ands	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6a1a      	ldr	r2, [r3, #32]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	f003 031f 	and.w	r3, r3, #31
 8004fbe:	6879      	ldr	r1, [r7, #4]
 8004fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc4:	431a      	orrs	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	621a      	str	r2, [r3, #32]
}
 8004fca:	bf00      	nop
 8004fcc:	371c      	adds	r7, #28
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
	...

08004fd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d101      	bne.n	8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e050      	b.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005016:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a1c      	ldr	r2, [pc, #112]	@ (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d018      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800503c:	d013      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a18      	ldr	r2, [pc, #96]	@ (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d00e      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a16      	ldr	r2, [pc, #88]	@ (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d009      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a15      	ldr	r2, [pc, #84]	@ (80050ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d004      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a13      	ldr	r2, [pc, #76]	@ (80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d10c      	bne.n	8005080 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800506c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	4313      	orrs	r3, r2
 8005076:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	40010000 	.word	0x40010000
 80050a4:	40000400 	.word	0x40000400
 80050a8:	40000800 	.word	0x40000800
 80050ac:	40000c00 	.word	0x40000c00
 80050b0:	40014000 	.word	0x40014000

080050b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e042      	b.n	8005174 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d106      	bne.n	8005108 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7fd faa8 	bl	8002658 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2224      	movs	r2, #36	@ 0x24
 800510c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800511e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f82b 	bl	800517c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	691a      	ldr	r2, [r3, #16]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005134:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	695a      	ldr	r2, [r3, #20]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005144:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68da      	ldr	r2, [r3, #12]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005154:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2220      	movs	r2, #32
 8005160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2220      	movs	r2, #32
 8005168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800517c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005180:	b0c0      	sub	sp, #256	@ 0x100
 8005182:	af00      	add	r7, sp, #0
 8005184:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	691b      	ldr	r3, [r3, #16]
 8005190:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005198:	68d9      	ldr	r1, [r3, #12]
 800519a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	ea40 0301 	orr.w	r3, r0, r1
 80051a4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	431a      	orrs	r2, r3
 80051b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	431a      	orrs	r2, r3
 80051bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80051d4:	f021 010c 	bic.w	r1, r1, #12
 80051d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80051e2:	430b      	orrs	r3, r1
 80051e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80051f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f6:	6999      	ldr	r1, [r3, #24]
 80051f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	ea40 0301 	orr.w	r3, r0, r1
 8005202:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	4b8f      	ldr	r3, [pc, #572]	@ (8005448 <UART_SetConfig+0x2cc>)
 800520c:	429a      	cmp	r2, r3
 800520e:	d005      	beq.n	800521c <UART_SetConfig+0xa0>
 8005210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	4b8d      	ldr	r3, [pc, #564]	@ (800544c <UART_SetConfig+0x2d0>)
 8005218:	429a      	cmp	r2, r3
 800521a:	d104      	bne.n	8005226 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800521c:	f7ff f8c2 	bl	80043a4 <HAL_RCC_GetPCLK2Freq>
 8005220:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005224:	e003      	b.n	800522e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005226:	f7ff f8a9 	bl	800437c <HAL_RCC_GetPCLK1Freq>
 800522a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800522e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005232:	69db      	ldr	r3, [r3, #28]
 8005234:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005238:	f040 810c 	bne.w	8005454 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800523c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005240:	2200      	movs	r2, #0
 8005242:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005246:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800524a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800524e:	4622      	mov	r2, r4
 8005250:	462b      	mov	r3, r5
 8005252:	1891      	adds	r1, r2, r2
 8005254:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005256:	415b      	adcs	r3, r3
 8005258:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800525a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800525e:	4621      	mov	r1, r4
 8005260:	eb12 0801 	adds.w	r8, r2, r1
 8005264:	4629      	mov	r1, r5
 8005266:	eb43 0901 	adc.w	r9, r3, r1
 800526a:	f04f 0200 	mov.w	r2, #0
 800526e:	f04f 0300 	mov.w	r3, #0
 8005272:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005276:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800527a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800527e:	4690      	mov	r8, r2
 8005280:	4699      	mov	r9, r3
 8005282:	4623      	mov	r3, r4
 8005284:	eb18 0303 	adds.w	r3, r8, r3
 8005288:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800528c:	462b      	mov	r3, r5
 800528e:	eb49 0303 	adc.w	r3, r9, r3
 8005292:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80052a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80052a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80052aa:	460b      	mov	r3, r1
 80052ac:	18db      	adds	r3, r3, r3
 80052ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80052b0:	4613      	mov	r3, r2
 80052b2:	eb42 0303 	adc.w	r3, r2, r3
 80052b6:	657b      	str	r3, [r7, #84]	@ 0x54
 80052b8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80052bc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80052c0:	f7fb fc66 	bl	8000b90 <__aeabi_uldivmod>
 80052c4:	4602      	mov	r2, r0
 80052c6:	460b      	mov	r3, r1
 80052c8:	4b61      	ldr	r3, [pc, #388]	@ (8005450 <UART_SetConfig+0x2d4>)
 80052ca:	fba3 2302 	umull	r2, r3, r3, r2
 80052ce:	095b      	lsrs	r3, r3, #5
 80052d0:	011c      	lsls	r4, r3, #4
 80052d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052d6:	2200      	movs	r2, #0
 80052d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052dc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80052e0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80052e4:	4642      	mov	r2, r8
 80052e6:	464b      	mov	r3, r9
 80052e8:	1891      	adds	r1, r2, r2
 80052ea:	64b9      	str	r1, [r7, #72]	@ 0x48
 80052ec:	415b      	adcs	r3, r3
 80052ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80052f4:	4641      	mov	r1, r8
 80052f6:	eb12 0a01 	adds.w	sl, r2, r1
 80052fa:	4649      	mov	r1, r9
 80052fc:	eb43 0b01 	adc.w	fp, r3, r1
 8005300:	f04f 0200 	mov.w	r2, #0
 8005304:	f04f 0300 	mov.w	r3, #0
 8005308:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800530c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005310:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005314:	4692      	mov	sl, r2
 8005316:	469b      	mov	fp, r3
 8005318:	4643      	mov	r3, r8
 800531a:	eb1a 0303 	adds.w	r3, sl, r3
 800531e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005322:	464b      	mov	r3, r9
 8005324:	eb4b 0303 	adc.w	r3, fp, r3
 8005328:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800532c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005338:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800533c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005340:	460b      	mov	r3, r1
 8005342:	18db      	adds	r3, r3, r3
 8005344:	643b      	str	r3, [r7, #64]	@ 0x40
 8005346:	4613      	mov	r3, r2
 8005348:	eb42 0303 	adc.w	r3, r2, r3
 800534c:	647b      	str	r3, [r7, #68]	@ 0x44
 800534e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005352:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005356:	f7fb fc1b 	bl	8000b90 <__aeabi_uldivmod>
 800535a:	4602      	mov	r2, r0
 800535c:	460b      	mov	r3, r1
 800535e:	4611      	mov	r1, r2
 8005360:	4b3b      	ldr	r3, [pc, #236]	@ (8005450 <UART_SetConfig+0x2d4>)
 8005362:	fba3 2301 	umull	r2, r3, r3, r1
 8005366:	095b      	lsrs	r3, r3, #5
 8005368:	2264      	movs	r2, #100	@ 0x64
 800536a:	fb02 f303 	mul.w	r3, r2, r3
 800536e:	1acb      	subs	r3, r1, r3
 8005370:	00db      	lsls	r3, r3, #3
 8005372:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005376:	4b36      	ldr	r3, [pc, #216]	@ (8005450 <UART_SetConfig+0x2d4>)
 8005378:	fba3 2302 	umull	r2, r3, r3, r2
 800537c:	095b      	lsrs	r3, r3, #5
 800537e:	005b      	lsls	r3, r3, #1
 8005380:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005384:	441c      	add	r4, r3
 8005386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800538a:	2200      	movs	r2, #0
 800538c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005390:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005394:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005398:	4642      	mov	r2, r8
 800539a:	464b      	mov	r3, r9
 800539c:	1891      	adds	r1, r2, r2
 800539e:	63b9      	str	r1, [r7, #56]	@ 0x38
 80053a0:	415b      	adcs	r3, r3
 80053a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053a4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80053a8:	4641      	mov	r1, r8
 80053aa:	1851      	adds	r1, r2, r1
 80053ac:	6339      	str	r1, [r7, #48]	@ 0x30
 80053ae:	4649      	mov	r1, r9
 80053b0:	414b      	adcs	r3, r1
 80053b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80053b4:	f04f 0200 	mov.w	r2, #0
 80053b8:	f04f 0300 	mov.w	r3, #0
 80053bc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80053c0:	4659      	mov	r1, fp
 80053c2:	00cb      	lsls	r3, r1, #3
 80053c4:	4651      	mov	r1, sl
 80053c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053ca:	4651      	mov	r1, sl
 80053cc:	00ca      	lsls	r2, r1, #3
 80053ce:	4610      	mov	r0, r2
 80053d0:	4619      	mov	r1, r3
 80053d2:	4603      	mov	r3, r0
 80053d4:	4642      	mov	r2, r8
 80053d6:	189b      	adds	r3, r3, r2
 80053d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053dc:	464b      	mov	r3, r9
 80053de:	460a      	mov	r2, r1
 80053e0:	eb42 0303 	adc.w	r3, r2, r3
 80053e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80053f4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80053f8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80053fc:	460b      	mov	r3, r1
 80053fe:	18db      	adds	r3, r3, r3
 8005400:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005402:	4613      	mov	r3, r2
 8005404:	eb42 0303 	adc.w	r3, r2, r3
 8005408:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800540a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800540e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005412:	f7fb fbbd 	bl	8000b90 <__aeabi_uldivmod>
 8005416:	4602      	mov	r2, r0
 8005418:	460b      	mov	r3, r1
 800541a:	4b0d      	ldr	r3, [pc, #52]	@ (8005450 <UART_SetConfig+0x2d4>)
 800541c:	fba3 1302 	umull	r1, r3, r3, r2
 8005420:	095b      	lsrs	r3, r3, #5
 8005422:	2164      	movs	r1, #100	@ 0x64
 8005424:	fb01 f303 	mul.w	r3, r1, r3
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	00db      	lsls	r3, r3, #3
 800542c:	3332      	adds	r3, #50	@ 0x32
 800542e:	4a08      	ldr	r2, [pc, #32]	@ (8005450 <UART_SetConfig+0x2d4>)
 8005430:	fba2 2303 	umull	r2, r3, r2, r3
 8005434:	095b      	lsrs	r3, r3, #5
 8005436:	f003 0207 	and.w	r2, r3, #7
 800543a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4422      	add	r2, r4
 8005442:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005444:	e106      	b.n	8005654 <UART_SetConfig+0x4d8>
 8005446:	bf00      	nop
 8005448:	40011000 	.word	0x40011000
 800544c:	40011400 	.word	0x40011400
 8005450:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005454:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005458:	2200      	movs	r2, #0
 800545a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800545e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005462:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005466:	4642      	mov	r2, r8
 8005468:	464b      	mov	r3, r9
 800546a:	1891      	adds	r1, r2, r2
 800546c:	6239      	str	r1, [r7, #32]
 800546e:	415b      	adcs	r3, r3
 8005470:	627b      	str	r3, [r7, #36]	@ 0x24
 8005472:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005476:	4641      	mov	r1, r8
 8005478:	1854      	adds	r4, r2, r1
 800547a:	4649      	mov	r1, r9
 800547c:	eb43 0501 	adc.w	r5, r3, r1
 8005480:	f04f 0200 	mov.w	r2, #0
 8005484:	f04f 0300 	mov.w	r3, #0
 8005488:	00eb      	lsls	r3, r5, #3
 800548a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800548e:	00e2      	lsls	r2, r4, #3
 8005490:	4614      	mov	r4, r2
 8005492:	461d      	mov	r5, r3
 8005494:	4643      	mov	r3, r8
 8005496:	18e3      	adds	r3, r4, r3
 8005498:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800549c:	464b      	mov	r3, r9
 800549e:	eb45 0303 	adc.w	r3, r5, r3
 80054a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80054a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80054b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	f04f 0300 	mov.w	r3, #0
 80054be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80054c2:	4629      	mov	r1, r5
 80054c4:	008b      	lsls	r3, r1, #2
 80054c6:	4621      	mov	r1, r4
 80054c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054cc:	4621      	mov	r1, r4
 80054ce:	008a      	lsls	r2, r1, #2
 80054d0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80054d4:	f7fb fb5c 	bl	8000b90 <__aeabi_uldivmod>
 80054d8:	4602      	mov	r2, r0
 80054da:	460b      	mov	r3, r1
 80054dc:	4b60      	ldr	r3, [pc, #384]	@ (8005660 <UART_SetConfig+0x4e4>)
 80054de:	fba3 2302 	umull	r2, r3, r3, r2
 80054e2:	095b      	lsrs	r3, r3, #5
 80054e4:	011c      	lsls	r4, r3, #4
 80054e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054ea:	2200      	movs	r2, #0
 80054ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80054f4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80054f8:	4642      	mov	r2, r8
 80054fa:	464b      	mov	r3, r9
 80054fc:	1891      	adds	r1, r2, r2
 80054fe:	61b9      	str	r1, [r7, #24]
 8005500:	415b      	adcs	r3, r3
 8005502:	61fb      	str	r3, [r7, #28]
 8005504:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005508:	4641      	mov	r1, r8
 800550a:	1851      	adds	r1, r2, r1
 800550c:	6139      	str	r1, [r7, #16]
 800550e:	4649      	mov	r1, r9
 8005510:	414b      	adcs	r3, r1
 8005512:	617b      	str	r3, [r7, #20]
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	f04f 0300 	mov.w	r3, #0
 800551c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005520:	4659      	mov	r1, fp
 8005522:	00cb      	lsls	r3, r1, #3
 8005524:	4651      	mov	r1, sl
 8005526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800552a:	4651      	mov	r1, sl
 800552c:	00ca      	lsls	r2, r1, #3
 800552e:	4610      	mov	r0, r2
 8005530:	4619      	mov	r1, r3
 8005532:	4603      	mov	r3, r0
 8005534:	4642      	mov	r2, r8
 8005536:	189b      	adds	r3, r3, r2
 8005538:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800553c:	464b      	mov	r3, r9
 800553e:	460a      	mov	r2, r1
 8005540:	eb42 0303 	adc.w	r3, r2, r3
 8005544:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005552:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005554:	f04f 0200 	mov.w	r2, #0
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005560:	4649      	mov	r1, r9
 8005562:	008b      	lsls	r3, r1, #2
 8005564:	4641      	mov	r1, r8
 8005566:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800556a:	4641      	mov	r1, r8
 800556c:	008a      	lsls	r2, r1, #2
 800556e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005572:	f7fb fb0d 	bl	8000b90 <__aeabi_uldivmod>
 8005576:	4602      	mov	r2, r0
 8005578:	460b      	mov	r3, r1
 800557a:	4611      	mov	r1, r2
 800557c:	4b38      	ldr	r3, [pc, #224]	@ (8005660 <UART_SetConfig+0x4e4>)
 800557e:	fba3 2301 	umull	r2, r3, r3, r1
 8005582:	095b      	lsrs	r3, r3, #5
 8005584:	2264      	movs	r2, #100	@ 0x64
 8005586:	fb02 f303 	mul.w	r3, r2, r3
 800558a:	1acb      	subs	r3, r1, r3
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	3332      	adds	r3, #50	@ 0x32
 8005590:	4a33      	ldr	r2, [pc, #204]	@ (8005660 <UART_SetConfig+0x4e4>)
 8005592:	fba2 2303 	umull	r2, r3, r2, r3
 8005596:	095b      	lsrs	r3, r3, #5
 8005598:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800559c:	441c      	add	r4, r3
 800559e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055a2:	2200      	movs	r2, #0
 80055a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80055a6:	677a      	str	r2, [r7, #116]	@ 0x74
 80055a8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80055ac:	4642      	mov	r2, r8
 80055ae:	464b      	mov	r3, r9
 80055b0:	1891      	adds	r1, r2, r2
 80055b2:	60b9      	str	r1, [r7, #8]
 80055b4:	415b      	adcs	r3, r3
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055bc:	4641      	mov	r1, r8
 80055be:	1851      	adds	r1, r2, r1
 80055c0:	6039      	str	r1, [r7, #0]
 80055c2:	4649      	mov	r1, r9
 80055c4:	414b      	adcs	r3, r1
 80055c6:	607b      	str	r3, [r7, #4]
 80055c8:	f04f 0200 	mov.w	r2, #0
 80055cc:	f04f 0300 	mov.w	r3, #0
 80055d0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055d4:	4659      	mov	r1, fp
 80055d6:	00cb      	lsls	r3, r1, #3
 80055d8:	4651      	mov	r1, sl
 80055da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055de:	4651      	mov	r1, sl
 80055e0:	00ca      	lsls	r2, r1, #3
 80055e2:	4610      	mov	r0, r2
 80055e4:	4619      	mov	r1, r3
 80055e6:	4603      	mov	r3, r0
 80055e8:	4642      	mov	r2, r8
 80055ea:	189b      	adds	r3, r3, r2
 80055ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055ee:	464b      	mov	r3, r9
 80055f0:	460a      	mov	r2, r1
 80055f2:	eb42 0303 	adc.w	r3, r2, r3
 80055f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80055f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	2200      	movs	r2, #0
 8005600:	663b      	str	r3, [r7, #96]	@ 0x60
 8005602:	667a      	str	r2, [r7, #100]	@ 0x64
 8005604:	f04f 0200 	mov.w	r2, #0
 8005608:	f04f 0300 	mov.w	r3, #0
 800560c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005610:	4649      	mov	r1, r9
 8005612:	008b      	lsls	r3, r1, #2
 8005614:	4641      	mov	r1, r8
 8005616:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800561a:	4641      	mov	r1, r8
 800561c:	008a      	lsls	r2, r1, #2
 800561e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005622:	f7fb fab5 	bl	8000b90 <__aeabi_uldivmod>
 8005626:	4602      	mov	r2, r0
 8005628:	460b      	mov	r3, r1
 800562a:	4b0d      	ldr	r3, [pc, #52]	@ (8005660 <UART_SetConfig+0x4e4>)
 800562c:	fba3 1302 	umull	r1, r3, r3, r2
 8005630:	095b      	lsrs	r3, r3, #5
 8005632:	2164      	movs	r1, #100	@ 0x64
 8005634:	fb01 f303 	mul.w	r3, r1, r3
 8005638:	1ad3      	subs	r3, r2, r3
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	3332      	adds	r3, #50	@ 0x32
 800563e:	4a08      	ldr	r2, [pc, #32]	@ (8005660 <UART_SetConfig+0x4e4>)
 8005640:	fba2 2303 	umull	r2, r3, r2, r3
 8005644:	095b      	lsrs	r3, r3, #5
 8005646:	f003 020f 	and.w	r2, r3, #15
 800564a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4422      	add	r2, r4
 8005652:	609a      	str	r2, [r3, #8]
}
 8005654:	bf00      	nop
 8005656:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800565a:	46bd      	mov	sp, r7
 800565c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005660:	51eb851f 	.word	0x51eb851f

08005664 <memset>:
 8005664:	4402      	add	r2, r0
 8005666:	4603      	mov	r3, r0
 8005668:	4293      	cmp	r3, r2
 800566a:	d100      	bne.n	800566e <memset+0xa>
 800566c:	4770      	bx	lr
 800566e:	f803 1b01 	strb.w	r1, [r3], #1
 8005672:	e7f9      	b.n	8005668 <memset+0x4>

08005674 <__errno>:
 8005674:	4b01      	ldr	r3, [pc, #4]	@ (800567c <__errno+0x8>)
 8005676:	6818      	ldr	r0, [r3, #0]
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	20000090 	.word	0x20000090

08005680 <__libc_init_array>:
 8005680:	b570      	push	{r4, r5, r6, lr}
 8005682:	4d0d      	ldr	r5, [pc, #52]	@ (80056b8 <__libc_init_array+0x38>)
 8005684:	4c0d      	ldr	r4, [pc, #52]	@ (80056bc <__libc_init_array+0x3c>)
 8005686:	1b64      	subs	r4, r4, r5
 8005688:	10a4      	asrs	r4, r4, #2
 800568a:	2600      	movs	r6, #0
 800568c:	42a6      	cmp	r6, r4
 800568e:	d109      	bne.n	80056a4 <__libc_init_array+0x24>
 8005690:	4d0b      	ldr	r5, [pc, #44]	@ (80056c0 <__libc_init_array+0x40>)
 8005692:	4c0c      	ldr	r4, [pc, #48]	@ (80056c4 <__libc_init_array+0x44>)
 8005694:	f000 f950 	bl	8005938 <_init>
 8005698:	1b64      	subs	r4, r4, r5
 800569a:	10a4      	asrs	r4, r4, #2
 800569c:	2600      	movs	r6, #0
 800569e:	42a6      	cmp	r6, r4
 80056a0:	d105      	bne.n	80056ae <__libc_init_array+0x2e>
 80056a2:	bd70      	pop	{r4, r5, r6, pc}
 80056a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80056a8:	4798      	blx	r3
 80056aa:	3601      	adds	r6, #1
 80056ac:	e7ee      	b.n	800568c <__libc_init_array+0xc>
 80056ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80056b2:	4798      	blx	r3
 80056b4:	3601      	adds	r6, #1
 80056b6:	e7f2      	b.n	800569e <__libc_init_array+0x1e>
 80056b8:	080059a8 	.word	0x080059a8
 80056bc:	080059a8 	.word	0x080059a8
 80056c0:	080059a8 	.word	0x080059a8
 80056c4:	080059ac 	.word	0x080059ac

080056c8 <fmod>:
 80056c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ca:	ed2d 8b02 	vpush	{d8}
 80056ce:	ec57 6b10 	vmov	r6, r7, d0
 80056d2:	ec55 4b11 	vmov	r4, r5, d1
 80056d6:	f000 f825 	bl	8005724 <__ieee754_fmod>
 80056da:	4622      	mov	r2, r4
 80056dc:	462b      	mov	r3, r5
 80056de:	4630      	mov	r0, r6
 80056e0:	4639      	mov	r1, r7
 80056e2:	eeb0 8a40 	vmov.f32	s16, s0
 80056e6:	eef0 8a60 	vmov.f32	s17, s1
 80056ea:	f7fb f9cb 	bl	8000a84 <__aeabi_dcmpun>
 80056ee:	b990      	cbnz	r0, 8005716 <fmod+0x4e>
 80056f0:	2200      	movs	r2, #0
 80056f2:	2300      	movs	r3, #0
 80056f4:	4620      	mov	r0, r4
 80056f6:	4629      	mov	r1, r5
 80056f8:	f7fb f992 	bl	8000a20 <__aeabi_dcmpeq>
 80056fc:	b158      	cbz	r0, 8005716 <fmod+0x4e>
 80056fe:	f7ff ffb9 	bl	8005674 <__errno>
 8005702:	2321      	movs	r3, #33	@ 0x21
 8005704:	6003      	str	r3, [r0, #0]
 8005706:	2200      	movs	r2, #0
 8005708:	2300      	movs	r3, #0
 800570a:	4610      	mov	r0, r2
 800570c:	4619      	mov	r1, r3
 800570e:	f7fb f849 	bl	80007a4 <__aeabi_ddiv>
 8005712:	ec41 0b18 	vmov	d8, r0, r1
 8005716:	eeb0 0a48 	vmov.f32	s0, s16
 800571a:	eef0 0a68 	vmov.f32	s1, s17
 800571e:	ecbd 8b02 	vpop	{d8}
 8005722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005724 <__ieee754_fmod>:
 8005724:	ec53 2b11 	vmov	r2, r3, d1
 8005728:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 800572c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005730:	ea52 040c 	orrs.w	r4, r2, ip
 8005734:	ec51 0b10 	vmov	r0, r1, d0
 8005738:	461e      	mov	r6, r3
 800573a:	4617      	mov	r7, r2
 800573c:	4696      	mov	lr, r2
 800573e:	d00c      	beq.n	800575a <__ieee754_fmod+0x36>
 8005740:	4c77      	ldr	r4, [pc, #476]	@ (8005920 <__ieee754_fmod+0x1fc>)
 8005742:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8005746:	45a0      	cmp	r8, r4
 8005748:	4689      	mov	r9, r1
 800574a:	d806      	bhi.n	800575a <__ieee754_fmod+0x36>
 800574c:	4254      	negs	r4, r2
 800574e:	4d75      	ldr	r5, [pc, #468]	@ (8005924 <__ieee754_fmod+0x200>)
 8005750:	4314      	orrs	r4, r2
 8005752:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8005756:	42ac      	cmp	r4, r5
 8005758:	d909      	bls.n	800576e <__ieee754_fmod+0x4a>
 800575a:	f7fa fef9 	bl	8000550 <__aeabi_dmul>
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	f7fb f81f 	bl	80007a4 <__aeabi_ddiv>
 8005766:	ec41 0b10 	vmov	d0, r0, r1
 800576a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800576e:	45e0      	cmp	r8, ip
 8005770:	4682      	mov	sl, r0
 8005772:	4604      	mov	r4, r0
 8005774:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8005778:	dc09      	bgt.n	800578e <__ieee754_fmod+0x6a>
 800577a:	dbf4      	blt.n	8005766 <__ieee754_fmod+0x42>
 800577c:	4282      	cmp	r2, r0
 800577e:	d8f2      	bhi.n	8005766 <__ieee754_fmod+0x42>
 8005780:	d105      	bne.n	800578e <__ieee754_fmod+0x6a>
 8005782:	4b69      	ldr	r3, [pc, #420]	@ (8005928 <__ieee754_fmod+0x204>)
 8005784:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8005788:	e9d3 0100 	ldrd	r0, r1, [r3]
 800578c:	e7eb      	b.n	8005766 <__ieee754_fmod+0x42>
 800578e:	4a65      	ldr	r2, [pc, #404]	@ (8005924 <__ieee754_fmod+0x200>)
 8005790:	ea19 0f02 	tst.w	r9, r2
 8005794:	d148      	bne.n	8005828 <__ieee754_fmod+0x104>
 8005796:	f1b8 0f00 	cmp.w	r8, #0
 800579a:	d13d      	bne.n	8005818 <__ieee754_fmod+0xf4>
 800579c:	4963      	ldr	r1, [pc, #396]	@ (800592c <__ieee754_fmod+0x208>)
 800579e:	4653      	mov	r3, sl
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	dc36      	bgt.n	8005812 <__ieee754_fmod+0xee>
 80057a4:	4216      	tst	r6, r2
 80057a6:	d14f      	bne.n	8005848 <__ieee754_fmod+0x124>
 80057a8:	f1bc 0f00 	cmp.w	ip, #0
 80057ac:	d144      	bne.n	8005838 <__ieee754_fmod+0x114>
 80057ae:	4a5f      	ldr	r2, [pc, #380]	@ (800592c <__ieee754_fmod+0x208>)
 80057b0:	463b      	mov	r3, r7
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	dc3d      	bgt.n	8005832 <__ieee754_fmod+0x10e>
 80057b6:	485e      	ldr	r0, [pc, #376]	@ (8005930 <__ieee754_fmod+0x20c>)
 80057b8:	4281      	cmp	r1, r0
 80057ba:	db4a      	blt.n	8005852 <__ieee754_fmod+0x12e>
 80057bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80057c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80057c4:	485a      	ldr	r0, [pc, #360]	@ (8005930 <__ieee754_fmod+0x20c>)
 80057c6:	4282      	cmp	r2, r0
 80057c8:	db57      	blt.n	800587a <__ieee754_fmod+0x156>
 80057ca:	f3c6 0613 	ubfx	r6, r6, #0, #20
 80057ce:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 80057d2:	1a89      	subs	r1, r1, r2
 80057d4:	1b98      	subs	r0, r3, r6
 80057d6:	eba4 070e 	sub.w	r7, r4, lr
 80057da:	2900      	cmp	r1, #0
 80057dc:	d162      	bne.n	80058a4 <__ieee754_fmod+0x180>
 80057de:	4574      	cmp	r4, lr
 80057e0:	bf38      	it	cc
 80057e2:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80057e6:	2800      	cmp	r0, #0
 80057e8:	bfa4      	itt	ge
 80057ea:	463c      	movge	r4, r7
 80057ec:	4603      	movge	r3, r0
 80057ee:	ea53 0104 	orrs.w	r1, r3, r4
 80057f2:	d0c6      	beq.n	8005782 <__ieee754_fmod+0x5e>
 80057f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057f8:	db69      	blt.n	80058ce <__ieee754_fmod+0x1aa>
 80057fa:	494d      	ldr	r1, [pc, #308]	@ (8005930 <__ieee754_fmod+0x20c>)
 80057fc:	428a      	cmp	r2, r1
 80057fe:	db6c      	blt.n	80058da <__ieee754_fmod+0x1b6>
 8005800:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005804:	432b      	orrs	r3, r5
 8005806:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800580a:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800580e:	4620      	mov	r0, r4
 8005810:	e7a9      	b.n	8005766 <__ieee754_fmod+0x42>
 8005812:	3901      	subs	r1, #1
 8005814:	005b      	lsls	r3, r3, #1
 8005816:	e7c3      	b.n	80057a0 <__ieee754_fmod+0x7c>
 8005818:	4945      	ldr	r1, [pc, #276]	@ (8005930 <__ieee754_fmod+0x20c>)
 800581a:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800581e:	2b00      	cmp	r3, #0
 8005820:	ddc0      	ble.n	80057a4 <__ieee754_fmod+0x80>
 8005822:	3901      	subs	r1, #1
 8005824:	005b      	lsls	r3, r3, #1
 8005826:	e7fa      	b.n	800581e <__ieee754_fmod+0xfa>
 8005828:	ea4f 5128 	mov.w	r1, r8, asr #20
 800582c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8005830:	e7b8      	b.n	80057a4 <__ieee754_fmod+0x80>
 8005832:	3a01      	subs	r2, #1
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	e7bc      	b.n	80057b2 <__ieee754_fmod+0x8e>
 8005838:	4a3d      	ldr	r2, [pc, #244]	@ (8005930 <__ieee754_fmod+0x20c>)
 800583a:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800583e:	2b00      	cmp	r3, #0
 8005840:	ddb9      	ble.n	80057b6 <__ieee754_fmod+0x92>
 8005842:	3a01      	subs	r2, #1
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	e7fa      	b.n	800583e <__ieee754_fmod+0x11a>
 8005848:	ea4f 522c 	mov.w	r2, ip, asr #20
 800584c:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8005850:	e7b1      	b.n	80057b6 <__ieee754_fmod+0x92>
 8005852:	1a40      	subs	r0, r0, r1
 8005854:	281f      	cmp	r0, #31
 8005856:	dc0a      	bgt.n	800586e <__ieee754_fmod+0x14a>
 8005858:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 800585c:	fa08 f800 	lsl.w	r8, r8, r0
 8005860:	fa2a f303 	lsr.w	r3, sl, r3
 8005864:	ea43 0308 	orr.w	r3, r3, r8
 8005868:	fa0a f400 	lsl.w	r4, sl, r0
 800586c:	e7aa      	b.n	80057c4 <__ieee754_fmod+0xa0>
 800586e:	4b31      	ldr	r3, [pc, #196]	@ (8005934 <__ieee754_fmod+0x210>)
 8005870:	1a5b      	subs	r3, r3, r1
 8005872:	fa0a f303 	lsl.w	r3, sl, r3
 8005876:	2400      	movs	r4, #0
 8005878:	e7a4      	b.n	80057c4 <__ieee754_fmod+0xa0>
 800587a:	1a80      	subs	r0, r0, r2
 800587c:	281f      	cmp	r0, #31
 800587e:	dc0a      	bgt.n	8005896 <__ieee754_fmod+0x172>
 8005880:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 8005884:	fa0c fc00 	lsl.w	ip, ip, r0
 8005888:	fa27 f606 	lsr.w	r6, r7, r6
 800588c:	ea46 060c 	orr.w	r6, r6, ip
 8005890:	fa07 fe00 	lsl.w	lr, r7, r0
 8005894:	e79d      	b.n	80057d2 <__ieee754_fmod+0xae>
 8005896:	4e27      	ldr	r6, [pc, #156]	@ (8005934 <__ieee754_fmod+0x210>)
 8005898:	1ab6      	subs	r6, r6, r2
 800589a:	fa07 f606 	lsl.w	r6, r7, r6
 800589e:	f04f 0e00 	mov.w	lr, #0
 80058a2:	e796      	b.n	80057d2 <__ieee754_fmod+0xae>
 80058a4:	4574      	cmp	r4, lr
 80058a6:	bf38      	it	cc
 80058a8:	f100 30ff 	addcc.w	r0, r0, #4294967295
 80058ac:	2800      	cmp	r0, #0
 80058ae:	da05      	bge.n	80058bc <__ieee754_fmod+0x198>
 80058b0:	0fe0      	lsrs	r0, r4, #31
 80058b2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80058b6:	0064      	lsls	r4, r4, #1
 80058b8:	3901      	subs	r1, #1
 80058ba:	e78b      	b.n	80057d4 <__ieee754_fmod+0xb0>
 80058bc:	ea50 0307 	orrs.w	r3, r0, r7
 80058c0:	f43f af5f 	beq.w	8005782 <__ieee754_fmod+0x5e>
 80058c4:	0ffb      	lsrs	r3, r7, #31
 80058c6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80058ca:	007c      	lsls	r4, r7, #1
 80058cc:	e7f4      	b.n	80058b8 <__ieee754_fmod+0x194>
 80058ce:	0fe1      	lsrs	r1, r4, #31
 80058d0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80058d4:	0064      	lsls	r4, r4, #1
 80058d6:	3a01      	subs	r2, #1
 80058d8:	e78c      	b.n	80057f4 <__ieee754_fmod+0xd0>
 80058da:	1a89      	subs	r1, r1, r2
 80058dc:	2914      	cmp	r1, #20
 80058de:	dc0a      	bgt.n	80058f6 <__ieee754_fmod+0x1d2>
 80058e0:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 80058e4:	fa03 f202 	lsl.w	r2, r3, r2
 80058e8:	40cc      	lsrs	r4, r1
 80058ea:	4322      	orrs	r2, r4
 80058ec:	410b      	asrs	r3, r1
 80058ee:	ea43 0105 	orr.w	r1, r3, r5
 80058f2:	4610      	mov	r0, r2
 80058f4:	e737      	b.n	8005766 <__ieee754_fmod+0x42>
 80058f6:	291f      	cmp	r1, #31
 80058f8:	dc07      	bgt.n	800590a <__ieee754_fmod+0x1e6>
 80058fa:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 80058fe:	40cc      	lsrs	r4, r1
 8005900:	fa03 f202 	lsl.w	r2, r3, r2
 8005904:	4322      	orrs	r2, r4
 8005906:	462b      	mov	r3, r5
 8005908:	e7f1      	b.n	80058ee <__ieee754_fmod+0x1ca>
 800590a:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800590e:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8005912:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8005916:	32e2      	adds	r2, #226	@ 0xe2
 8005918:	fa43 f202 	asr.w	r2, r3, r2
 800591c:	e7f3      	b.n	8005906 <__ieee754_fmod+0x1e2>
 800591e:	bf00      	nop
 8005920:	7fefffff 	.word	0x7fefffff
 8005924:	7ff00000 	.word	0x7ff00000
 8005928:	08005990 	.word	0x08005990
 800592c:	fffffbed 	.word	0xfffffbed
 8005930:	fffffc02 	.word	0xfffffc02
 8005934:	fffffbe2 	.word	0xfffffbe2

08005938 <_init>:
 8005938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593a:	bf00      	nop
 800593c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800593e:	bc08      	pop	{r3}
 8005940:	469e      	mov	lr, r3
 8005942:	4770      	bx	lr

08005944 <_fini>:
 8005944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005946:	bf00      	nop
 8005948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800594a:	bc08      	pop	{r3}
 800594c:	469e      	mov	lr, r3
 800594e:	4770      	bx	lr
