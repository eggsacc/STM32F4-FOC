
STM32F411_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e24  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08009fc0  08009fc0  0000afc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a030  0800a030  0000c1d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a030  0800a030  0000b030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a038  0800a038  0000c1d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a038  0800a038  0000b038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a03c  0800a03c  0000b03c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d0  20000000  0800a040  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f34  200001d0  0800a210  0000c1d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002104  0800a210  0000d104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c10  00000000  00000000  0000c200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b25  00000000  00000000  00023e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014c8  00000000  00000000  00027938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ffc  00000000  00000000  00028e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f59  00000000  00000000  00029dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b595  00000000  00000000  00043d55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092f82  00000000  00000000  0005f2ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f226c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005afc  00000000  00000000  000f22b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000f7dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001d0 	.word	0x200001d0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009fa4 	.word	0x08009fa4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001d4 	.word	0x200001d4
 80001d4:	08009fa4 	.word	0x08009fa4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_uldivmod>:
 8000b50:	b953      	cbnz	r3, 8000b68 <__aeabi_uldivmod+0x18>
 8000b52:	b94a      	cbnz	r2, 8000b68 <__aeabi_uldivmod+0x18>
 8000b54:	2900      	cmp	r1, #0
 8000b56:	bf08      	it	eq
 8000b58:	2800      	cmpeq	r0, #0
 8000b5a:	bf1c      	itt	ne
 8000b5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b60:	f04f 30ff 	movne.w	r0, #4294967295
 8000b64:	f000 b96a 	b.w	8000e3c <__aeabi_idiv0>
 8000b68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b70:	f000 f806 	bl	8000b80 <__udivmoddi4>
 8000b74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b7c:	b004      	add	sp, #16
 8000b7e:	4770      	bx	lr

08000b80 <__udivmoddi4>:
 8000b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b84:	9d08      	ldr	r5, [sp, #32]
 8000b86:	460c      	mov	r4, r1
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d14e      	bne.n	8000c2a <__udivmoddi4+0xaa>
 8000b8c:	4694      	mov	ip, r2
 8000b8e:	458c      	cmp	ip, r1
 8000b90:	4686      	mov	lr, r0
 8000b92:	fab2 f282 	clz	r2, r2
 8000b96:	d962      	bls.n	8000c5e <__udivmoddi4+0xde>
 8000b98:	b14a      	cbz	r2, 8000bae <__udivmoddi4+0x2e>
 8000b9a:	f1c2 0320 	rsb	r3, r2, #32
 8000b9e:	4091      	lsls	r1, r2
 8000ba0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ba4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba8:	4319      	orrs	r1, r3
 8000baa:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb2:	fa1f f68c 	uxth.w	r6, ip
 8000bb6:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bbe:	fb07 1114 	mls	r1, r7, r4, r1
 8000bc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc6:	fb04 f106 	mul.w	r1, r4, r6
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	d90a      	bls.n	8000be4 <__udivmoddi4+0x64>
 8000bce:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd2:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bd6:	f080 8112 	bcs.w	8000dfe <__udivmoddi4+0x27e>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 810f 	bls.w	8000dfe <__udivmoddi4+0x27e>
 8000be0:	3c02      	subs	r4, #2
 8000be2:	4463      	add	r3, ip
 8000be4:	1a59      	subs	r1, r3, r1
 8000be6:	fa1f f38e 	uxth.w	r3, lr
 8000bea:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bee:	fb07 1110 	mls	r1, r7, r0, r1
 8000bf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf6:	fb00 f606 	mul.w	r6, r0, r6
 8000bfa:	429e      	cmp	r6, r3
 8000bfc:	d90a      	bls.n	8000c14 <__udivmoddi4+0x94>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c06:	f080 80fc 	bcs.w	8000e02 <__udivmoddi4+0x282>
 8000c0a:	429e      	cmp	r6, r3
 8000c0c:	f240 80f9 	bls.w	8000e02 <__udivmoddi4+0x282>
 8000c10:	4463      	add	r3, ip
 8000c12:	3802      	subs	r0, #2
 8000c14:	1b9b      	subs	r3, r3, r6
 8000c16:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	b11d      	cbz	r5, 8000c26 <__udivmoddi4+0xa6>
 8000c1e:	40d3      	lsrs	r3, r2
 8000c20:	2200      	movs	r2, #0
 8000c22:	e9c5 3200 	strd	r3, r2, [r5]
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d905      	bls.n	8000c3a <__udivmoddi4+0xba>
 8000c2e:	b10d      	cbz	r5, 8000c34 <__udivmoddi4+0xb4>
 8000c30:	e9c5 0100 	strd	r0, r1, [r5]
 8000c34:	2100      	movs	r1, #0
 8000c36:	4608      	mov	r0, r1
 8000c38:	e7f5      	b.n	8000c26 <__udivmoddi4+0xa6>
 8000c3a:	fab3 f183 	clz	r1, r3
 8000c3e:	2900      	cmp	r1, #0
 8000c40:	d146      	bne.n	8000cd0 <__udivmoddi4+0x150>
 8000c42:	42a3      	cmp	r3, r4
 8000c44:	d302      	bcc.n	8000c4c <__udivmoddi4+0xcc>
 8000c46:	4290      	cmp	r0, r2
 8000c48:	f0c0 80f0 	bcc.w	8000e2c <__udivmoddi4+0x2ac>
 8000c4c:	1a86      	subs	r6, r0, r2
 8000c4e:	eb64 0303 	sbc.w	r3, r4, r3
 8000c52:	2001      	movs	r0, #1
 8000c54:	2d00      	cmp	r5, #0
 8000c56:	d0e6      	beq.n	8000c26 <__udivmoddi4+0xa6>
 8000c58:	e9c5 6300 	strd	r6, r3, [r5]
 8000c5c:	e7e3      	b.n	8000c26 <__udivmoddi4+0xa6>
 8000c5e:	2a00      	cmp	r2, #0
 8000c60:	f040 8090 	bne.w	8000d84 <__udivmoddi4+0x204>
 8000c64:	eba1 040c 	sub.w	r4, r1, ip
 8000c68:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c6c:	fa1f f78c 	uxth.w	r7, ip
 8000c70:	2101      	movs	r1, #1
 8000c72:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c76:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c7a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c82:	fb07 f006 	mul.w	r0, r7, r6
 8000c86:	4298      	cmp	r0, r3
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x11c>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c92:	d202      	bcs.n	8000c9a <__udivmoddi4+0x11a>
 8000c94:	4298      	cmp	r0, r3
 8000c96:	f200 80cd 	bhi.w	8000e34 <__udivmoddi4+0x2b4>
 8000c9a:	4626      	mov	r6, r4
 8000c9c:	1a1c      	subs	r4, r3, r0
 8000c9e:	fa1f f38e 	uxth.w	r3, lr
 8000ca2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ca6:	fb08 4410 	mls	r4, r8, r0, r4
 8000caa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cae:	fb00 f707 	mul.w	r7, r0, r7
 8000cb2:	429f      	cmp	r7, r3
 8000cb4:	d908      	bls.n	8000cc8 <__udivmoddi4+0x148>
 8000cb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cba:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cbe:	d202      	bcs.n	8000cc6 <__udivmoddi4+0x146>
 8000cc0:	429f      	cmp	r7, r3
 8000cc2:	f200 80b0 	bhi.w	8000e26 <__udivmoddi4+0x2a6>
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	1bdb      	subs	r3, r3, r7
 8000cca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cce:	e7a5      	b.n	8000c1c <__udivmoddi4+0x9c>
 8000cd0:	f1c1 0620 	rsb	r6, r1, #32
 8000cd4:	408b      	lsls	r3, r1
 8000cd6:	fa22 f706 	lsr.w	r7, r2, r6
 8000cda:	431f      	orrs	r7, r3
 8000cdc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce0:	fa04 f301 	lsl.w	r3, r4, r1
 8000ce4:	ea43 030c 	orr.w	r3, r3, ip
 8000ce8:	40f4      	lsrs	r4, r6
 8000cea:	fa00 f801 	lsl.w	r8, r0, r1
 8000cee:	0c38      	lsrs	r0, r7, #16
 8000cf0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cf4:	fbb4 fef0 	udiv	lr, r4, r0
 8000cf8:	fa1f fc87 	uxth.w	ip, r7
 8000cfc:	fb00 441e 	mls	r4, r0, lr, r4
 8000d00:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d04:	fb0e f90c 	mul.w	r9, lr, ip
 8000d08:	45a1      	cmp	r9, r4
 8000d0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d0e:	d90a      	bls.n	8000d26 <__udivmoddi4+0x1a6>
 8000d10:	193c      	adds	r4, r7, r4
 8000d12:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d16:	f080 8084 	bcs.w	8000e22 <__udivmoddi4+0x2a2>
 8000d1a:	45a1      	cmp	r9, r4
 8000d1c:	f240 8081 	bls.w	8000e22 <__udivmoddi4+0x2a2>
 8000d20:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d24:	443c      	add	r4, r7
 8000d26:	eba4 0409 	sub.w	r4, r4, r9
 8000d2a:	fa1f f983 	uxth.w	r9, r3
 8000d2e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d32:	fb00 4413 	mls	r4, r0, r3, r4
 8000d36:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d3a:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d3e:	45a4      	cmp	ip, r4
 8000d40:	d907      	bls.n	8000d52 <__udivmoddi4+0x1d2>
 8000d42:	193c      	adds	r4, r7, r4
 8000d44:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d48:	d267      	bcs.n	8000e1a <__udivmoddi4+0x29a>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	d965      	bls.n	8000e1a <__udivmoddi4+0x29a>
 8000d4e:	3b02      	subs	r3, #2
 8000d50:	443c      	add	r4, r7
 8000d52:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d56:	fba0 9302 	umull	r9, r3, r0, r2
 8000d5a:	eba4 040c 	sub.w	r4, r4, ip
 8000d5e:	429c      	cmp	r4, r3
 8000d60:	46ce      	mov	lr, r9
 8000d62:	469c      	mov	ip, r3
 8000d64:	d351      	bcc.n	8000e0a <__udivmoddi4+0x28a>
 8000d66:	d04e      	beq.n	8000e06 <__udivmoddi4+0x286>
 8000d68:	b155      	cbz	r5, 8000d80 <__udivmoddi4+0x200>
 8000d6a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d6e:	eb64 040c 	sbc.w	r4, r4, ip
 8000d72:	fa04 f606 	lsl.w	r6, r4, r6
 8000d76:	40cb      	lsrs	r3, r1
 8000d78:	431e      	orrs	r6, r3
 8000d7a:	40cc      	lsrs	r4, r1
 8000d7c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d80:	2100      	movs	r1, #0
 8000d82:	e750      	b.n	8000c26 <__udivmoddi4+0xa6>
 8000d84:	f1c2 0320 	rsb	r3, r2, #32
 8000d88:	fa20 f103 	lsr.w	r1, r0, r3
 8000d8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d90:	fa24 f303 	lsr.w	r3, r4, r3
 8000d94:	4094      	lsls	r4, r2
 8000d96:	430c      	orrs	r4, r1
 8000d98:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d9c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da0:	fa1f f78c 	uxth.w	r7, ip
 8000da4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da8:	fb08 3110 	mls	r1, r8, r0, r3
 8000dac:	0c23      	lsrs	r3, r4, #16
 8000dae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db2:	fb00 f107 	mul.w	r1, r0, r7
 8000db6:	4299      	cmp	r1, r3
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x24c>
 8000dba:	eb1c 0303 	adds.w	r3, ip, r3
 8000dbe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dc2:	d22c      	bcs.n	8000e1e <__udivmoddi4+0x29e>
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	d92a      	bls.n	8000e1e <__udivmoddi4+0x29e>
 8000dc8:	3802      	subs	r0, #2
 8000dca:	4463      	add	r3, ip
 8000dcc:	1a5b      	subs	r3, r3, r1
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dd4:	fb08 3311 	mls	r3, r8, r1, r3
 8000dd8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ddc:	fb01 f307 	mul.w	r3, r1, r7
 8000de0:	42a3      	cmp	r3, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x276>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f101 36ff 	add.w	r6, r1, #4294967295
 8000dec:	d213      	bcs.n	8000e16 <__udivmoddi4+0x296>
 8000dee:	42a3      	cmp	r3, r4
 8000df0:	d911      	bls.n	8000e16 <__udivmoddi4+0x296>
 8000df2:	3902      	subs	r1, #2
 8000df4:	4464      	add	r4, ip
 8000df6:	1ae4      	subs	r4, r4, r3
 8000df8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dfc:	e739      	b.n	8000c72 <__udivmoddi4+0xf2>
 8000dfe:	4604      	mov	r4, r0
 8000e00:	e6f0      	b.n	8000be4 <__udivmoddi4+0x64>
 8000e02:	4608      	mov	r0, r1
 8000e04:	e706      	b.n	8000c14 <__udivmoddi4+0x94>
 8000e06:	45c8      	cmp	r8, r9
 8000e08:	d2ae      	bcs.n	8000d68 <__udivmoddi4+0x1e8>
 8000e0a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e0e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e12:	3801      	subs	r0, #1
 8000e14:	e7a8      	b.n	8000d68 <__udivmoddi4+0x1e8>
 8000e16:	4631      	mov	r1, r6
 8000e18:	e7ed      	b.n	8000df6 <__udivmoddi4+0x276>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	e799      	b.n	8000d52 <__udivmoddi4+0x1d2>
 8000e1e:	4630      	mov	r0, r6
 8000e20:	e7d4      	b.n	8000dcc <__udivmoddi4+0x24c>
 8000e22:	46d6      	mov	lr, sl
 8000e24:	e77f      	b.n	8000d26 <__udivmoddi4+0x1a6>
 8000e26:	4463      	add	r3, ip
 8000e28:	3802      	subs	r0, #2
 8000e2a:	e74d      	b.n	8000cc8 <__udivmoddi4+0x148>
 8000e2c:	4606      	mov	r6, r0
 8000e2e:	4623      	mov	r3, r4
 8000e30:	4608      	mov	r0, r1
 8000e32:	e70f      	b.n	8000c54 <__udivmoddi4+0xd4>
 8000e34:	3e02      	subs	r6, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	e730      	b.n	8000c9c <__udivmoddi4+0x11c>
 8000e3a:	bf00      	nop

08000e3c <__aeabi_idiv0>:
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <AS5600_ReadRegister>:

/*
 * Static low level functions to read/write to registers
 */
static HAL_StatusTypeDef AS5600_ReadRegister(AS5600 *dev, uint8_t reg, uint8_t *data)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af04      	add	r7, sp, #16
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	460b      	mov	r3, r1
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(dev->i2cHandle, AS5600_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	6818      	ldr	r0, [r3, #0]
 8000e52:	7afb      	ldrb	r3, [r7, #11]
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5a:	9302      	str	r3, [sp, #8]
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	9301      	str	r3, [sp, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	9300      	str	r3, [sp, #0]
 8000e64:	2301      	movs	r3, #1
 8000e66:	216c      	movs	r1, #108	@ 0x6c
 8000e68:	f001 fd3e 	bl	80028e8 <HAL_I2C_Mem_Read>
 8000e6c:	4603      	mov	r3, r0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <AS5600_ReadRegisters>:

static HAL_StatusTypeDef AS5600_ReadRegisters(AS5600 *dev, uint8_t reg, uint8_t *data, uint8_t length)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b088      	sub	sp, #32
 8000e7a:	af04      	add	r7, sp, #16
 8000e7c:	60f8      	str	r0, [r7, #12]
 8000e7e:	607a      	str	r2, [r7, #4]
 8000e80:	461a      	mov	r2, r3
 8000e82:	460b      	mov	r3, r1
 8000e84:	72fb      	strb	r3, [r7, #11]
 8000e86:	4613      	mov	r3, r2
 8000e88:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(dev->i2cHandle, AS5600_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	6818      	ldr	r0, [r3, #0]
 8000e8e:	7afb      	ldrb	r3, [r7, #11]
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	7abb      	ldrb	r3, [r7, #10]
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	f04f 31ff 	mov.w	r1, #4294967295
 8000e9a:	9102      	str	r1, [sp, #8]
 8000e9c:	9301      	str	r3, [sp, #4]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	216c      	movs	r1, #108	@ 0x6c
 8000ea6:	f001 fd1f 	bl	80028e8 <HAL_I2C_Mem_Read>
 8000eaa:	4603      	mov	r3, r0
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	0000      	movs	r0, r0
	...

08000eb8 <AS5600_Init>:
/*
 * Initialization
 * Pass the struct to each function as pointer
 */
uint8_t AS5600_Init(AS5600* dev, I2C_HandleTypeDef* i2c_handle, uint8_t zero)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b088      	sub	sp, #32
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	60b9      	str	r1, [r7, #8]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	71fb      	strb	r3, [r7, #7]
	/* Set struct params */
	dev->i2cHandle = i2c_handle;
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	68ba      	ldr	r2, [r7, #8]
 8000eca:	601a      	str	r2, [r3, #0]
	dev->total_angle_rad = 0;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f04f 0200 	mov.w	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]

	uint8_t err_num = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	77fb      	strb	r3, [r7, #31]

	/*
	 * Check magnet strength
	 */
	HAL_StatusTypeDef magnet_status;
	uint8_t regdata = 0;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	767b      	strb	r3, [r7, #25]

	magnet_status = AS5600_ReadRegister(dev, MAGNET_STATUS_REG, &regdata);
 8000edc:	f107 0319 	add.w	r3, r7, #25
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	210b      	movs	r1, #11
 8000ee4:	68f8      	ldr	r0, [r7, #12]
 8000ee6:	f7ff ffab 	bl	8000e40 <AS5600_ReadRegister>
 8000eea:	4603      	mov	r3, r0
 8000eec:	77bb      	strb	r3, [r7, #30]
	err_num += (magnet_status != HAL_OK);
 8000eee:	7fbb      	ldrb	r3, [r7, #30]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	bf14      	ite	ne
 8000ef4:	2301      	movne	r3, #1
 8000ef6:	2300      	moveq	r3, #0
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	461a      	mov	r2, r3
 8000efc:	7ffb      	ldrb	r3, [r7, #31]
 8000efe:	4413      	add	r3, r2
 8000f00:	77fb      	strb	r3, [r7, #31]

	/* bit[5] indicates magnet present if set */
	if(!(regdata & (1 << 5))){
 8000f02:	7e7b      	ldrb	r3, [r7, #25]
 8000f04:	f003 0320 	and.w	r3, r3, #32
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d101      	bne.n	8000f10 <AS5600_Init+0x58>

		return 255;
 8000f0c:	23ff      	movs	r3, #255	@ 0xff
 8000f0e:	e038      	b.n	8000f82 <AS5600_Init+0xca>
	}

	/* initialize starting angle */
	uint8_t regdata_angle[2] = {0, 0};
 8000f10:	2300      	movs	r3, #0
 8000f12:	82bb      	strh	r3, [r7, #20]
	HAL_StatusTypeDef status = AS5600_ReadRegisters(dev, RAW_ANGLE_MSB_REG, regdata_angle, 2);
 8000f14:	f107 0214 	add.w	r2, r7, #20
 8000f18:	2302      	movs	r3, #2
 8000f1a:	210c      	movs	r1, #12
 8000f1c:	68f8      	ldr	r0, [r7, #12]
 8000f1e:	f7ff ffaa 	bl	8000e76 <AS5600_ReadRegisters>
 8000f22:	4603      	mov	r3, r0
 8000f24:	777b      	strb	r3, [r7, #29]

	/* Mask & shift 4 MSB left by 8 and concatenate with 8 LSBs */
	uint16_t raw_angle = (((regdata_angle[0] & 0x0F) << 8) | regdata_angle[1]);
 8000f26:	7d3b      	ldrb	r3, [r7, #20]
 8000f28:	021b      	lsls	r3, r3, #8
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000f30:	b21a      	sxth	r2, r3
 8000f32:	7d7b      	ldrb	r3, [r7, #21]
 8000f34:	b21b      	sxth	r3, r3
 8000f36:	4313      	orrs	r3, r2
 8000f38:	b21b      	sxth	r3, r3
 8000f3a:	837b      	strh	r3, [r7, #26]

	err_num += (status != HAL_OK);
 8000f3c:	7f7b      	ldrb	r3, [r7, #29]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	bf14      	ite	ne
 8000f42:	2301      	movne	r3, #1
 8000f44:	2300      	moveq	r3, #0
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	461a      	mov	r2, r3
 8000f4a:	7ffb      	ldrb	r3, [r7, #31]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	77fb      	strb	r3, [r7, #31]

	dev->prev_raw_angle = raw_angle;
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	8b7a      	ldrh	r2, [r7, #26]
 8000f54:	809a      	strh	r2, [r3, #4]

	if(!zero)
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d111      	bne.n	8000f80 <AS5600_Init+0xc8>
	{
		dev->total_angle_rad = raw_angle * BIT_TO_RAD;
 8000f5c:	8b7b      	ldrh	r3, [r7, #26]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fa8c 	bl	800047c <__aeabi_i2d>
 8000f64:	a30a      	add	r3, pc, #40	@ (adr r3, 8000f90 <AS5600_Init+0xd8>)
 8000f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6a:	f7ff faf1 	bl	8000550 <__aeabi_dmul>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	4610      	mov	r0, r2
 8000f74:	4619      	mov	r1, r3
 8000f76:	f7ff fd9b 	bl	8000ab0 <__aeabi_d2f>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	609a      	str	r2, [r3, #8]
	}

	return err_num;
 8000f80:	7ffb      	ldrb	r3, [r7, #31]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3720      	adds	r7, #32
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	f3af 8000 	nop.w
 8000f90:	8b5cd7aa 	.word	0x8b5cd7aa
 8000f94:	3f59238d 	.word	0x3f59238d

08000f98 <_cos>:
/*
 * @brief Cosine approximation
 * @param[in] angle(radians)
 * @return cos(angle)
 */
__STATIC_INLINE float _cos(float angle) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	ed87 0a01 	vstr	s0, [r7, #4]
  float _angle = angle + _PI_2;
 8000fa2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fa6:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8000ff0 <_cos+0x58>
 8000faa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fae:	edc7 7a03 	vstr	s15, [r7, #12]
  _angle = _angle > _2PI ? _angle - _2PI : _angle;
 8000fb2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fb6:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000ff4 <_cos+0x5c>
 8000fba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc2:	dd06      	ble.n	8000fd2 <_cos+0x3a>
 8000fc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fc8:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000ff4 <_cos+0x5c>
 8000fcc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fd0:	e001      	b.n	8000fd6 <_cos+0x3e>
 8000fd2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fd6:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(_angle);
 8000fda:	ed97 0a03 	vldr	s0, [r7, #12]
 8000fde:	f000 facd 	bl	800157c <_sin>
 8000fe2:	eef0 7a40 	vmov.f32	s15, s0
}
 8000fe6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	3fc90fdb 	.word	0x3fc90fdb
 8000ff4:	40c90fdb 	.word	0x40c90fdb

08000ff8 <_normalizeAngle>:
/*
 * @brief Normalize angle to [0, 2pi]
 * @param[in] angle(radians)
 * @return normalized_angle
 */
__STATIC_INLINE float _normalizeAngle(float angle){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);       // fmod(x,y) returns remainder of x/y
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff fa4c 	bl	80004a0 <__aeabi_f2d>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 8001058 <_normalizeAngle+0x60>
 8001010:	ec43 2b10 	vmov	d0, r2, r3
 8001014:	f008 fe8e 	bl	8009d34 <fmod>
 8001018:	ec53 2b10 	vmov	r2, r3, d0
 800101c:	4610      	mov	r0, r2
 800101e:	4619      	mov	r1, r3
 8001020:	f7ff fd46 	bl	8000ab0 <__aeabi_d2f>
 8001024:	4603      	mov	r3, r0
 8001026:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? a : (a + _2PI);    // add 2pi to negative angles to make positive
 8001028:	edd7 7a03 	vldr	s15, [r7, #12]
 800102c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001034:	db02      	blt.n	800103c <_normalizeAngle+0x44>
 8001036:	edd7 7a03 	vldr	s15, [r7, #12]
 800103a:	e005      	b.n	8001048 <_normalizeAngle+0x50>
 800103c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001040:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001060 <_normalizeAngle+0x68>
 8001044:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001048:	eeb0 0a67 	vmov.f32	s0, s15
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	f3af 8000 	nop.w
 8001058:	60000000 	.word	0x60000000
 800105c:	401921fb 	.word	0x401921fb
 8001060:	40c90fdb 	.word	0x40c90fdb

08001064 <_electricalAngle>:
 * @brief Calculates electrical angle from rotor angle
 * @param[in] shaft_angle(radians)
 * @param[in] pole_pairs
 * @return electrical angle
 */
__STATIC_INLINE float _electricalAngle(float shaft_angle, uint8_t pole_pairs){
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	ed87 0a01 	vstr	s0, [r7, #4]
 800106e:	4603      	mov	r3, r0
 8001070:	70fb      	strb	r3, [r7, #3]
  return (shaft_angle * pole_pairs);
 8001072:	78fb      	ldrb	r3, [r7, #3]
 8001074:	ee07 3a90 	vmov	s15, r3
 8001078:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800107c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001080:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001084:	eeb0 0a67 	vmov.f32	s0, s15
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <DWT_Init>:

/*
 * Timer utility functions to return number of microseconds since power up.
 */
__STATIC_INLINE void DWT_Init(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8001098:	4b08      	ldr	r3, [pc, #32]	@ (80010bc <DWT_Init+0x28>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	4a07      	ldr	r2, [pc, #28]	@ (80010bc <DWT_Init+0x28>)
 800109e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010a2:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 80010a4:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <DWT_Init+0x2c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a05      	ldr	r2, [pc, #20]	@ (80010c0 <DWT_Init+0x2c>)
 80010aa:	f043 0301 	orr.w	r3, r3, #1
 80010ae:	6013      	str	r3, [r2, #0]
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000edf0 	.word	0xe000edf0
 80010c0:	e0001000 	.word	0xe0001000

080010c4 <micros>:
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

__STATIC_INLINE uint32_t micros(void){
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 80010c8:	4b07      	ldr	r3, [pc, #28]	@ (80010e8 <micros+0x24>)
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	4b07      	ldr	r3, [pc, #28]	@ (80010ec <micros+0x28>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4907      	ldr	r1, [pc, #28]	@ (80010f0 <micros+0x2c>)
 80010d2:	fba1 1303 	umull	r1, r3, r1, r3
 80010d6:	0c9b      	lsrs	r3, r3, #18
 80010d8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e0001000 	.word	0xe0001000
 80010ec:	20000084 	.word	0x20000084
 80010f0:	431bde83 	.word	0x431bde83

080010f4 <PWM_Start_3_Channel>:
/*
 * @brief Starts PWM channels 1, 2, 3 of specified timer.
 * @param[in] TIM_HandleTypeDef timer
 */
void PWM_Start_3_Channel(TIM_HandleTypeDef* timer)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(timer, TIM_CHANNEL_1);
 80010fc:	2100      	movs	r1, #0
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f004 f8d8 	bl	80052b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer, TIM_CHANNEL_2);
 8001104:	2104      	movs	r1, #4
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f004 f8d4 	bl	80052b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer, TIM_CHANNEL_3);
 800110c:	2108      	movs	r1, #8
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f004 f8d0 	bl	80052b4 <HAL_TIM_PWM_Start>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <SetPWM>:
 * @scope static inline
 * @brief Set pwm duty cycle of timer channels
 * @param[in] Motor* motor
 */
__STATIC_INLINE void SetPWM(Motor* motor)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	motor->timer->Instance->CCR1 = _constrain(motor->phaseVs->Ua / motor->supply_voltage, 0.0f, 1.0f) * 256;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	edd3 6a00 	vldr	s13, [r3]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001136:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800113a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800113e:	d502      	bpl.n	8001146 <SetPWM+0x2a>
 8001140:	eddf 7a51 	vldr	s15, [pc, #324]	@ 8001288 <SetPWM+0x16c>
 8001144:	e01b      	b.n	800117e <SetPWM+0x62>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	edd3 6a00 	vldr	s13, [r3]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	ed93 7a02 	vldr	s14, [r3, #8]
 8001154:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001158:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800115c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001164:	dd02      	ble.n	800116c <SetPWM+0x50>
 8001166:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800116a:	e008      	b.n	800117e <SetPWM+0x62>
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	edd3 6a00 	vldr	s13, [r3]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	ed93 7a02 	vldr	s14, [r3, #8]
 800117a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800117e:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 800128c <SetPWM+0x170>
 8001182:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001190:	ee17 2a90 	vmov	r2, s15
 8001194:	635a      	str	r2, [r3, #52]	@ 0x34
	motor->timer->Instance->CCR2 = _constrain(motor->phaseVs->Ub / motor->supply_voltage, 0.0f, 1.0f) * 256;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	695b      	ldr	r3, [r3, #20]
 800119a:	edd3 6a01 	vldr	s13, [r3, #4]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	ed93 7a02 	vldr	s14, [r3, #8]
 80011a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b0:	d502      	bpl.n	80011b8 <SetPWM+0x9c>
 80011b2:	eddf 7a35 	vldr	s15, [pc, #212]	@ 8001288 <SetPWM+0x16c>
 80011b6:	e01b      	b.n	80011f0 <SetPWM+0xd4>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	edd3 6a01 	vldr	s13, [r3, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	ed93 7a02 	vldr	s14, [r3, #8]
 80011c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80011ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d6:	dd02      	ble.n	80011de <SetPWM+0xc2>
 80011d8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80011dc:	e008      	b.n	80011f0 <SetPWM+0xd4>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	edd3 6a01 	vldr	s13, [r3, #4]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	ed93 7a02 	vldr	s14, [r3, #8]
 80011ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011f0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800128c <SetPWM+0x170>
 80011f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69db      	ldr	r3, [r3, #28]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001202:	ee17 2a90 	vmov	r2, s15
 8001206:	639a      	str	r2, [r3, #56]	@ 0x38
	motor->timer->Instance->CCR3 = _constrain(motor->phaseVs->Uc / motor->supply_voltage, 0.0f, 1.0f) * 256;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	695b      	ldr	r3, [r3, #20]
 800120c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	ed93 7a02 	vldr	s14, [r3, #8]
 8001216:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800121a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800121e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001222:	d502      	bpl.n	800122a <SetPWM+0x10e>
 8001224:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8001288 <SetPWM+0x16c>
 8001228:	e01b      	b.n	8001262 <SetPWM+0x146>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	695b      	ldr	r3, [r3, #20]
 800122e:	edd3 6a02 	vldr	s13, [r3, #8]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	ed93 7a02 	vldr	s14, [r3, #8]
 8001238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800123c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001240:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001248:	dd02      	ble.n	8001250 <SetPWM+0x134>
 800124a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800124e:	e008      	b.n	8001262 <SetPWM+0x146>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	edd3 6a02 	vldr	s13, [r3, #8]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	ed93 7a02 	vldr	s14, [r3, #8]
 800125e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001262:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800128c <SetPWM+0x170>
 8001266:	ee67 7a87 	vmul.f32	s15, s15, s14
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	69db      	ldr	r3, [r3, #28]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001274:	ee17 2a90 	vmov	r2, s15
 8001278:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	00000000 	.word	0x00000000
 800128c:	43800000 	.word	0x43800000

08001290 <MotorInit>:
 * - Motor voltage limit set to supply voltage / 2 by default
 *
 * @retval Motor motor
 */
void MotorInit(Motor* motor, TIM_HandleTypeDef* timer, float supply_voltage, uint8_t pole_pairs)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	ed87 0a01 	vstr	s0, [r7, #4]
 800129e:	4613      	mov	r3, r2
 80012a0:	70fb      	strb	r3, [r7, #3]
	/* Create structs */
	static Var_t motor_vars;
	motor_vars.electric_angle = 0;
 80012a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001310 <MotorInit+0x80>)
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
	motor_vars.prev_us = 0;
 80012aa:	4b19      	ldr	r3, [pc, #100]	@ (8001310 <MotorInit+0x80>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	60da      	str	r2, [r3, #12]
	motor_vars.zero_angle = 0;
 80012b0:	4b17      	ldr	r3, [pc, #92]	@ (8001310 <MotorInit+0x80>)
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
	motor_vars.shaft_angle = 0;
 80012b8:	4b15      	ldr	r3, [pc, #84]	@ (8001310 <MotorInit+0x80>)
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	605a      	str	r2, [r3, #4]

	static DQval_t motor_dq = {0, 0};
	static PhaseV_t motor_pv = {0, 0, 0};

	DWT_Init();
 80012c0:	f7ff fee8 	bl	8001094 <DWT_Init>

	/* Motor struct initialization */
	motor->dqVals = &motor_dq;
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	4a13      	ldr	r2, [pc, #76]	@ (8001314 <MotorInit+0x84>)
 80012c8:	611a      	str	r2, [r3, #16]
	motor->phaseVs = &motor_pv;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	4a12      	ldr	r2, [pc, #72]	@ (8001318 <MotorInit+0x88>)
 80012ce:	615a      	str	r2, [r3, #20]
	motor->vars = &motor_vars;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001310 <MotorInit+0x80>)
 80012d4:	60da      	str	r2, [r3, #12]
	motor->sensor = NULL;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
	motor->timer = timer;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	61da      	str	r2, [r3, #28]
	motor->sensor_dir = 0;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2200      	movs	r2, #0
 80012e6:	701a      	strb	r2, [r3, #0]
	motor->pole_pairs = pole_pairs;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	78fa      	ldrb	r2, [r7, #3]
 80012ec:	705a      	strb	r2, [r3, #1]
	motor->supply_voltage = supply_voltage;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	609a      	str	r2, [r3, #8]
	motor->voltage_limit = supply_voltage / 2;
 80012f4:	ed97 7a01 	vldr	s14, [r7, #4]
 80012f8:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80012fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200001ec 	.word	0x200001ec
 8001314:	200001fc 	.word	0x200001fc
 8001318:	20000204 	.word	0x20000204

0800131c <SetTorque>:
/*
 * @brief Inverse Clarke & Park transformations to calculate phase voltages
 * @param[in] Motor* motor
 * @note Calls setpwm()
 */
void SetTorque(Motor* motor) {
 800131c:	b580      	push	{r7, lr}
 800131e:	ed2d 8b02 	vpush	{d8}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	/* Constrain Uq to within voltage range */
	motor->dqVals->Uq = _constrain(motor->dqVals->Uq, -motor->voltage_limit, motor->voltage_limit);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	ed93 7a00 	vldr	s14, [r3]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	edd3 7a01 	vldr	s15, [r3, #4]
 8001336:	eef1 7a67 	vneg.f32	s15, s15
 800133a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800133e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001342:	d505      	bpl.n	8001350 <SetTorque+0x34>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	edd3 7a01 	vldr	s15, [r3, #4]
 800134a:	eef1 7a67 	vneg.f32	s15, s15
 800134e:	e013      	b.n	8001378 <SetTorque+0x5c>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	691b      	ldr	r3, [r3, #16]
 8001354:	ed93 7a00 	vldr	s14, [r3]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	edd3 7a01 	vldr	s15, [r3, #4]
 800135e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001366:	dd03      	ble.n	8001370 <SetTorque+0x54>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	edd3 7a01 	vldr	s15, [r3, #4]
 800136e:	e003      	b.n	8001378 <SetTorque+0x5c>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	edc3 7a00 	vstr	s15, [r3]
    /* Normalize electric angle */
    float el_angle = _normalizeAngle(motor->vars->electric_angle);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	edd3 7a02 	vldr	s15, [r3, #8]
 8001388:	eeb0 0a67 	vmov.f32	s0, s15
 800138c:	f7ff fe34 	bl	8000ff8 <_normalizeAngle>
 8001390:	ed87 0a05 	vstr	s0, [r7, #20]

	/* Inverse park transform */
	float Ualpha = -(motor->dqVals->Uq) * _sin(el_angle);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	edd3 7a00 	vldr	s15, [r3]
 800139c:	eeb1 8a67 	vneg.f32	s16, s15
 80013a0:	ed97 0a05 	vldr	s0, [r7, #20]
 80013a4:	f000 f8ea 	bl	800157c <_sin>
 80013a8:	eef0 7a40 	vmov.f32	s15, s0
 80013ac:	ee68 7a27 	vmul.f32	s15, s16, s15
 80013b0:	edc7 7a04 	vstr	s15, [r7, #16]
	float Ubeta = motor->dqVals->Uq * _cos(el_angle);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	ed93 8a00 	vldr	s16, [r3]
 80013bc:	ed97 0a05 	vldr	s0, [r7, #20]
 80013c0:	f7ff fdea 	bl	8000f98 <_cos>
 80013c4:	eef0 7a40 	vmov.f32	s15, s0
 80013c8:	ee68 7a27 	vmul.f32	s15, s16, s15
 80013cc:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Inverse Clarke transform */
	motor->phaseVs->Ua = Ualpha + motor->supply_voltage / 2.0f;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80013d6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80013da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80013e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ea:	edc3 7a00 	vstr	s15, [r3]
	motor->phaseVs->Ub = (_SQRT3 * Ubeta - Ualpha) / 2.0f + motor->supply_voltage / 2.0f;
 80013ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80013f2:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001470 <SetTorque+0x154>
 80013f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80013fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001402:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001406:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001410:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001414:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001420:	edc3 7a01 	vstr	s15, [r3, #4]
	motor->phaseVs->Uc = (- Ualpha - _SQRT3 * Ubeta) / 2.0f + motor->supply_voltage / 2.0f;
 8001424:	edd7 7a04 	vldr	s15, [r7, #16]
 8001428:	eeb1 7a67 	vneg.f32	s14, s15
 800142c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001430:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001470 <SetTorque+0x154>
 8001434:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800143c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001440:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	edd3 6a02 	vldr	s13, [r3, #8]
 800144a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800144e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	695b      	ldr	r3, [r3, #20]
 8001456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800145a:	edc3 7a02 	vstr	s15, [r3, #8]

	SetPWM(motor);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff fe5c 	bl	800111c <SetPWM>
}
 8001464:	bf00      	nop
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	ecbd 8b02 	vpop	{d8}
 800146e:	bd80      	pop	{r7, pc}
 8001470:	3fddb3d7 	.word	0x3fddb3d7

08001474 <LinkSensor>:
 * @param[in] Motor* motor
 * @param[in] AS5600* sensor
 * @param[in] I2C_HandleTypeDef *i2c_handle
 */
void LinkSensor(Motor* motor, AS5600* sensor, I2C_HandleTypeDef *i2c_handle)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b086      	sub	sp, #24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
	uint8_t init_stat = AS5600_Init(sensor, i2c_handle, 1);
 8001480:	2201      	movs	r2, #1
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	68b8      	ldr	r0, [r7, #8]
 8001486:	f7ff fd17 	bl	8000eb8 <AS5600_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	75fb      	strb	r3, [r7, #23]

	/* Check if sensor link successful */
	if(init_stat != 0)
 800148e:	7dfb      	ldrb	r3, [r7, #23]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d003      	beq.n	800149c <LinkSensor+0x28>
	{
		motor->sensor = NULL;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
		return;
 800149a:	e002      	b.n	80014a2 <LinkSensor+0x2e>
	}

	motor->sensor = sensor;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	619a      	str	r2, [r3, #24]
}
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <OLVelocityControl>:
 * @param[in] Motor* motor
 * @param[in] float target_velocity (rads/sec)
 * @warning Ensure DWT_Init() is called in main() to initialize timer first.
 */
void OLVelocityControl(Motor* motor, float target_velocity)
{
 80014a8:	b590      	push	{r4, r7, lr}
 80014aa:	b087      	sub	sp, #28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	ed87 0a00 	vstr	s0, [r7]
	/* Check if motor timer initialized properly */
	if(motor->timer == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d056      	beq.n	800156a <OLVelocityControl+0xc2>
	{
		return;
	}

	/* Track current micros */
	uint32_t now_us = micros();
 80014bc:	f7ff fe02 	bl	80010c4 <micros>
 80014c0:	6178      	str	r0, [r7, #20]

	/* Time difference since last call */
	uint32_t time_elapsed_us = now_us - motor->vars->prev_us;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	613b      	str	r3, [r7, #16]
	float time_elapsed_s = time_elapsed_us  / 1000000.0f;
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	ee07 3a90 	vmov	s15, r3
 80014d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80014d8:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001574 <OLVelocityControl+0xcc>
 80014dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014e0:	edc7 7a03 	vstr	s15, [r7, #12]
	time_elapsed_s = time_elapsed_s > 0.5 ? 0.001 : time_elapsed_s;
 80014e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80014e8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80014ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f4:	dd01      	ble.n	80014fa <OLVelocityControl+0x52>
 80014f6:	4b20      	ldr	r3, [pc, #128]	@ (8001578 <OLVelocityControl+0xd0>)
 80014f8:	e000      	b.n	80014fc <OLVelocityControl+0x54>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	60fb      	str	r3, [r7, #12]

	/* Update virtual shaft angle, and calculate phase voltages */
	motor->vars->shaft_angle = _normalizeAngle(motor->vars->shaft_angle + target_velocity * time_elapsed_s);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	68db      	ldr	r3, [r3, #12]
 8001502:	ed93 7a01 	vldr	s14, [r3, #4]
 8001506:	edd7 6a00 	vldr	s13, [r7]
 800150a:	edd7 7a03 	vldr	s15, [r7, #12]
 800150e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68dc      	ldr	r4, [r3, #12]
 800151a:	eeb0 0a67 	vmov.f32	s0, s15
 800151e:	f7ff fd6b 	bl	8000ff8 <_normalizeAngle>
 8001522:	eef0 7a40 	vmov.f32	s15, s0
 8001526:	edc4 7a01 	vstr	s15, [r4, #4]
	motor->vars->electric_angle = _electricalAngle(motor->vars->shaft_angle, motor->pole_pairs);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	785a      	ldrb	r2, [r3, #1]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68dc      	ldr	r4, [r3, #12]
 800153a:	4610      	mov	r0, r2
 800153c:	eeb0 0a67 	vmov.f32	s0, s15
 8001540:	f7ff fd90 	bl	8001064 <_electricalAngle>
 8001544:	eef0 7a40 	vmov.f32	s15, s0
 8001548:	edc4 7a02 	vstr	s15, [r4, #8]
	motor->dqVals->Uq = motor->voltage_limit;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	6852      	ldr	r2, [r2, #4]
 8001554:	601a      	str	r2, [r3, #0]
	SetTorque(motor);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff fee0 	bl	800131c <SetTorque>

	/* Update timestamp */
	motor->vars->prev_us = micros();
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68dc      	ldr	r4, [r3, #12]
 8001560:	f7ff fdb0 	bl	80010c4 <micros>
 8001564:	4603      	mov	r3, r0
 8001566:	60e3      	str	r3, [r4, #12]
 8001568:	e000      	b.n	800156c <OLVelocityControl+0xc4>
		return;
 800156a:	bf00      	nop
}
 800156c:	371c      	adds	r7, #28
 800156e:	46bd      	mov	sp, r7
 8001570:	bd90      	pop	{r4, r7, pc}
 8001572:	bf00      	nop
 8001574:	49742400 	.word	0x49742400
 8001578:	3a83126f 	.word	0x3a83126f

0800157c <_sin>:
/*
 * @brief Sine approximation using look-up table
 * @param[in] angle(radians)
 * @return sin(angle)
 */
float _sin(float angle){
 800157c:	b480      	push	{r7}
 800157e:	b087      	sub	sp, #28
 8001580:	af00      	add	r7, sp, #0
 8001582:	ed87 0a01 	vstr	s0, [r7, #4]

  int32_t first, second;
  uint16_t index = (uint16_t)(angle / _2PI * 65536.0f);
 8001586:	ed97 7a01 	vldr	s14, [r7, #4]
 800158a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800166c <_sin+0xf0>
 800158e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001592:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8001670 <_sin+0xf4>
 8001596:	ee67 7a87 	vmul.f32	s15, s15, s14
 800159a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800159e:	ee17 3a90 	vmov	r3, s15
 80015a2:	81fb      	strh	r3, [r7, #14]
  int frac = index & 0xff;
 80015a4:	89fb      	ldrh	r3, [r7, #14]
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	60bb      	str	r3, [r7, #8]
  index = (index >> 8) & 0xff;
 80015aa:	89fb      	ldrh	r3, [r7, #14]
 80015ac:	0a1b      	lsrs	r3, r3, #8
 80015ae:	81fb      	strh	r3, [r7, #14]

  if (index < 64){
 80015b0:	89fb      	ldrh	r3, [r7, #14]
 80015b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80015b4:	d80b      	bhi.n	80015ce <_sin+0x52>
    first = (int32_t)sineLUT[index];
 80015b6:	89fb      	ldrh	r3, [r7, #14]
 80015b8:	4a2e      	ldr	r2, [pc, #184]	@ (8001674 <_sin+0xf8>)
 80015ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015be:	617b      	str	r3, [r7, #20]
    second = (int32_t)sineLUT[index + 1];
 80015c0:	89fb      	ldrh	r3, [r7, #14]
 80015c2:	3301      	adds	r3, #1
 80015c4:	4a2b      	ldr	r2, [pc, #172]	@ (8001674 <_sin+0xf8>)
 80015c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	e033      	b.n	8001636 <_sin+0xba>
  }
  else if (index < 128){
 80015ce:	89fb      	ldrh	r3, [r7, #14]
 80015d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80015d2:	d80e      	bhi.n	80015f2 <_sin+0x76>
    first = (int32_t)sineLUT[128 - index];
 80015d4:	89fb      	ldrh	r3, [r7, #14]
 80015d6:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80015da:	4a26      	ldr	r2, [pc, #152]	@ (8001674 <_sin+0xf8>)
 80015dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015e0:	617b      	str	r3, [r7, #20]
    second = (int32_t)sineLUT[127 - index];
 80015e2:	89fb      	ldrh	r3, [r7, #14]
 80015e4:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80015e8:	4a22      	ldr	r2, [pc, #136]	@ (8001674 <_sin+0xf8>)
 80015ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015ee:	613b      	str	r3, [r7, #16]
 80015f0:	e021      	b.n	8001636 <_sin+0xba>
  }
  else if (index < 192){
 80015f2:	89fb      	ldrh	r3, [r7, #14]
 80015f4:	2bbf      	cmp	r3, #191	@ 0xbf
 80015f6:	d80e      	bhi.n	8001616 <_sin+0x9a>
    first = -(int32_t)sineLUT[index - 128];
 80015f8:	89fb      	ldrh	r3, [r7, #14]
 80015fa:	3b80      	subs	r3, #128	@ 0x80
 80015fc:	4a1d      	ldr	r2, [pc, #116]	@ (8001674 <_sin+0xf8>)
 80015fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001602:	425b      	negs	r3, r3
 8001604:	617b      	str	r3, [r7, #20]
    second = -(int32_t)sineLUT[index - 127];
 8001606:	89fb      	ldrh	r3, [r7, #14]
 8001608:	3b7f      	subs	r3, #127	@ 0x7f
 800160a:	4a1a      	ldr	r2, [pc, #104]	@ (8001674 <_sin+0xf8>)
 800160c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001610:	425b      	negs	r3, r3
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	e00f      	b.n	8001636 <_sin+0xba>
  }
  else {
    first = -(int32_t)sineLUT[256 - index];
 8001616:	89fb      	ldrh	r3, [r7, #14]
 8001618:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800161c:	4a15      	ldr	r2, [pc, #84]	@ (8001674 <_sin+0xf8>)
 800161e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001622:	425b      	negs	r3, r3
 8001624:	617b      	str	r3, [r7, #20]
    second = -(int32_t)sineLUT[255 - index];
 8001626:	89fb      	ldrh	r3, [r7, #14]
 8001628:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800162c:	4a11      	ldr	r2, [pc, #68]	@ (8001674 <_sin+0xf8>)
 800162e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001632:	425b      	negs	r3, r3
 8001634:	613b      	str	r3, [r7, #16]
  }

  return (first + (((second - first) * frac) >> 8)) / 32768.0f;
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	68ba      	ldr	r2, [r7, #8]
 800163e:	fb02 f303 	mul.w	r3, r2, r3
 8001642:	121a      	asrs	r2, r3, #8
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	4413      	add	r3, r2
 8001648:	ee07 3a90 	vmov	s15, r3
 800164c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001650:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001678 <_sin+0xfc>
 8001654:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001658:	eef0 7a66 	vmov.f32	s15, s13
}
 800165c:	eeb0 0a67 	vmov.f32	s0, s15
 8001660:	371c      	adds	r7, #28
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40c90fdb 	.word	0x40c90fdb
 8001670:	47800000 	.word	0x47800000
 8001674:	20000000 	.word	0x20000000
 8001678:	47000000 	.word	0x47000000

0800167c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b0ac      	sub	sp, #176	@ 0xb0
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001682:	f000 fd07 	bl	8002094 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001686:	f000 f84d 	bl	8001724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800168a:	f000 fa0f 	bl	8001aac <MX_GPIO_Init>
  MX_I2C1_Init();
 800168e:	f000 f8b1 	bl	80017f4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001692:	f000 f90b 	bl	80018ac <MX_TIM2_Init>
  MX_TIM11_Init();
 8001696:	f000 f9e5 	bl	8001a64 <MX_TIM11_Init>
  MX_I2C2_Init();
 800169a:	f000 f8d9 	bl	8001850 <MX_I2C2_Init>
  MX_TIM3_Init();
 800169e:	f000 f973 	bl	8001988 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80016a2:	f007 fe2b 	bl	80092fc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  /* Start PWM channels */
  PWM_Start_3_Channel(&htim2);
 80016a6:	4819      	ldr	r0, [pc, #100]	@ (800170c <main+0x90>)
 80016a8:	f7ff fd24 	bl	80010f4 <PWM_Start_3_Channel>

  /* Create sensor & motor object */
  AS5600 s1;
  Motor m1;
  /* Init sensor & motor objects */
  AS5600_Init(&s1, &hi2c1, 1);
 80016ac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80016b0:	2201      	movs	r2, #1
 80016b2:	4917      	ldr	r1, [pc, #92]	@ (8001710 <main+0x94>)
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fbff 	bl	8000eb8 <AS5600_Init>
  MotorInit(&m1, &htim2, 12, 7);
 80016ba:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80016be:	2207      	movs	r2, #7
 80016c0:	eeb2 0a08 	vmov.f32	s0, #40	@ 0x41400000  12.0
 80016c4:	4911      	ldr	r1, [pc, #68]	@ (800170c <main+0x90>)
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fde2 	bl	8001290 <MotorInit>
  LinkSensor(&m1, &s1, &hi2c1);
 80016cc:	f107 01a4 	add.w	r1, r7, #164	@ 0xa4
 80016d0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80016d4:	4a0e      	ldr	r2, [pc, #56]	@ (8001710 <main+0x94>)
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fecc 	bl	8001474 <LinkSensor>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  OLVelocityControl(&m1, 100);
 80016dc:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 80016e0:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8001714 <main+0x98>
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fedf 	bl	80014a8 <OLVelocityControl>
	  Ua = m1.phaseVs->Ua;
 80016ea:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a09      	ldr	r2, [pc, #36]	@ (8001718 <main+0x9c>)
 80016f2:	6013      	str	r3, [r2, #0]
	  Ub = m1.phaseVs->Ub;
 80016f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	4a08      	ldr	r2, [pc, #32]	@ (800171c <main+0xa0>)
 80016fc:	6013      	str	r3, [r2, #0]
	  Uc = m1.phaseVs->Uc;
 80016fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	4a06      	ldr	r2, [pc, #24]	@ (8001720 <main+0xa4>)
 8001706:	6013      	str	r3, [r2, #0]
	  OLVelocityControl(&m1, 100);
 8001708:	bf00      	nop
 800170a:	e7e7      	b.n	80016dc <main+0x60>
 800170c:	200002b8 	.word	0x200002b8
 8001710:	20000210 	.word	0x20000210
 8001714:	42c80000 	.word	0x42c80000
 8001718:	20000390 	.word	0x20000390
 800171c:	20000394 	.word	0x20000394
 8001720:	20000398 	.word	0x20000398

08001724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b094      	sub	sp, #80	@ 0x50
 8001728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800172a:	f107 0320 	add.w	r3, r7, #32
 800172e:	2230      	movs	r2, #48	@ 0x30
 8001730:	2100      	movs	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f008 facc 	bl	8009cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001738:	f107 030c 	add.w	r3, r7, #12
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001748:	2300      	movs	r3, #0
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	4b27      	ldr	r3, [pc, #156]	@ (80017ec <SystemClock_Config+0xc8>)
 800174e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001750:	4a26      	ldr	r2, [pc, #152]	@ (80017ec <SystemClock_Config+0xc8>)
 8001752:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001756:	6413      	str	r3, [r2, #64]	@ 0x40
 8001758:	4b24      	ldr	r3, [pc, #144]	@ (80017ec <SystemClock_Config+0xc8>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001764:	2300      	movs	r3, #0
 8001766:	607b      	str	r3, [r7, #4]
 8001768:	4b21      	ldr	r3, [pc, #132]	@ (80017f0 <SystemClock_Config+0xcc>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a20      	ldr	r2, [pc, #128]	@ (80017f0 <SystemClock_Config+0xcc>)
 800176e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	4b1e      	ldr	r3, [pc, #120]	@ (80017f0 <SystemClock_Config+0xcc>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001780:	2301      	movs	r3, #1
 8001782:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001784:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001788:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800178a:	2302      	movs	r3, #2
 800178c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800178e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001792:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001794:	2319      	movs	r3, #25
 8001796:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001798:	23c0      	movs	r3, #192	@ 0xc0
 800179a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800179c:	2302      	movs	r3, #2
 800179e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017a0:	2304      	movs	r3, #4
 80017a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a4:	f107 0320 	add.w	r3, r7, #32
 80017a8:	4618      	mov	r0, r3
 80017aa:	f002 fff7 	bl	800479c <HAL_RCC_OscConfig>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017b4:	f000 f9ec 	bl	8001b90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b8:	230f      	movs	r3, #15
 80017ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017bc:	2302      	movs	r3, #2
 80017be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80017ce:	f107 030c 	add.w	r3, r7, #12
 80017d2:	2103      	movs	r1, #3
 80017d4:	4618      	mov	r0, r3
 80017d6:	f003 fa59 	bl	8004c8c <HAL_RCC_ClockConfig>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80017e0:	f000 f9d6 	bl	8001b90 <Error_Handler>
  }
}
 80017e4:	bf00      	nop
 80017e6:	3750      	adds	r7, #80	@ 0x50
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40007000 	.word	0x40007000

080017f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017f8:	4b12      	ldr	r3, [pc, #72]	@ (8001844 <MX_I2C1_Init+0x50>)
 80017fa:	4a13      	ldr	r2, [pc, #76]	@ (8001848 <MX_I2C1_Init+0x54>)
 80017fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017fe:	4b11      	ldr	r3, [pc, #68]	@ (8001844 <MX_I2C1_Init+0x50>)
 8001800:	4a12      	ldr	r2, [pc, #72]	@ (800184c <MX_I2C1_Init+0x58>)
 8001802:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001804:	4b0f      	ldr	r3, [pc, #60]	@ (8001844 <MX_I2C1_Init+0x50>)
 8001806:	2200      	movs	r2, #0
 8001808:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800180a:	4b0e      	ldr	r3, [pc, #56]	@ (8001844 <MX_I2C1_Init+0x50>)
 800180c:	2200      	movs	r2, #0
 800180e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001810:	4b0c      	ldr	r3, [pc, #48]	@ (8001844 <MX_I2C1_Init+0x50>)
 8001812:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001816:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001818:	4b0a      	ldr	r3, [pc, #40]	@ (8001844 <MX_I2C1_Init+0x50>)
 800181a:	2200      	movs	r2, #0
 800181c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800181e:	4b09      	ldr	r3, [pc, #36]	@ (8001844 <MX_I2C1_Init+0x50>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001824:	4b07      	ldr	r3, [pc, #28]	@ (8001844 <MX_I2C1_Init+0x50>)
 8001826:	2200      	movs	r2, #0
 8001828:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800182a:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <MX_I2C1_Init+0x50>)
 800182c:	2200      	movs	r2, #0
 800182e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001830:	4804      	ldr	r0, [pc, #16]	@ (8001844 <MX_I2C1_Init+0x50>)
 8001832:	f000 ff15 	bl	8002660 <HAL_I2C_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800183c:	f000 f9a8 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000210 	.word	0x20000210
 8001848:	40005400 	.word	0x40005400
 800184c:	000186a0 	.word	0x000186a0

08001850 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001854:	4b12      	ldr	r3, [pc, #72]	@ (80018a0 <MX_I2C2_Init+0x50>)
 8001856:	4a13      	ldr	r2, [pc, #76]	@ (80018a4 <MX_I2C2_Init+0x54>)
 8001858:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800185a:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <MX_I2C2_Init+0x50>)
 800185c:	4a12      	ldr	r2, [pc, #72]	@ (80018a8 <MX_I2C2_Init+0x58>)
 800185e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001860:	4b0f      	ldr	r3, [pc, #60]	@ (80018a0 <MX_I2C2_Init+0x50>)
 8001862:	2200      	movs	r2, #0
 8001864:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001866:	4b0e      	ldr	r3, [pc, #56]	@ (80018a0 <MX_I2C2_Init+0x50>)
 8001868:	2200      	movs	r2, #0
 800186a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800186c:	4b0c      	ldr	r3, [pc, #48]	@ (80018a0 <MX_I2C2_Init+0x50>)
 800186e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001872:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001874:	4b0a      	ldr	r3, [pc, #40]	@ (80018a0 <MX_I2C2_Init+0x50>)
 8001876:	2200      	movs	r2, #0
 8001878:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800187a:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <MX_I2C2_Init+0x50>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001880:	4b07      	ldr	r3, [pc, #28]	@ (80018a0 <MX_I2C2_Init+0x50>)
 8001882:	2200      	movs	r2, #0
 8001884:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001886:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <MX_I2C2_Init+0x50>)
 8001888:	2200      	movs	r2, #0
 800188a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800188c:	4804      	ldr	r0, [pc, #16]	@ (80018a0 <MX_I2C2_Init+0x50>)
 800188e:	f000 fee7 	bl	8002660 <HAL_I2C_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001898:	f000 f97a 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20000264 	.word	0x20000264
 80018a4:	40005800 	.word	0x40005800
 80018a8:	000186a0 	.word	0x000186a0

080018ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	@ 0x28
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b2:	f107 0320 	add.w	r3, r7, #32
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
 80018c8:	611a      	str	r2, [r3, #16]
 80018ca:	615a      	str	r2, [r3, #20]
 80018cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001984 <MX_TIM2_Init+0xd8>)
 80018d0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80018d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 80018d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001984 <MX_TIM2_Init+0xd8>)
 80018d8:	220a      	movs	r2, #10
 80018da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018dc:	4b29      	ldr	r3, [pc, #164]	@ (8001984 <MX_TIM2_Init+0xd8>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80018e2:	4b28      	ldr	r3, [pc, #160]	@ (8001984 <MX_TIM2_Init+0xd8>)
 80018e4:	22ff      	movs	r2, #255	@ 0xff
 80018e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e8:	4b26      	ldr	r3, [pc, #152]	@ (8001984 <MX_TIM2_Init+0xd8>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018ee:	4b25      	ldr	r3, [pc, #148]	@ (8001984 <MX_TIM2_Init+0xd8>)
 80018f0:	2280      	movs	r2, #128	@ 0x80
 80018f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80018f4:	4823      	ldr	r0, [pc, #140]	@ (8001984 <MX_TIM2_Init+0xd8>)
 80018f6:	f003 fc8d 	bl	8005214 <HAL_TIM_PWM_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001900:	f000 f946 	bl	8001b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001904:	2300      	movs	r3, #0
 8001906:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800190c:	f107 0320 	add.w	r3, r7, #32
 8001910:	4619      	mov	r1, r3
 8001912:	481c      	ldr	r0, [pc, #112]	@ (8001984 <MX_TIM2_Init+0xd8>)
 8001914:	f004 f996 	bl	8005c44 <HAL_TIMEx_MasterConfigSynchronization>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800191e:	f000 f937 	bl	8001b90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001922:	2360      	movs	r3, #96	@ 0x60
 8001924:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	2200      	movs	r2, #0
 8001936:	4619      	mov	r1, r3
 8001938:	4812      	ldr	r0, [pc, #72]	@ (8001984 <MX_TIM2_Init+0xd8>)
 800193a:	f003 fe5b 	bl	80055f4 <HAL_TIM_PWM_ConfigChannel>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001944:	f000 f924 	bl	8001b90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	2204      	movs	r2, #4
 800194c:	4619      	mov	r1, r3
 800194e:	480d      	ldr	r0, [pc, #52]	@ (8001984 <MX_TIM2_Init+0xd8>)
 8001950:	f003 fe50 	bl	80055f4 <HAL_TIM_PWM_ConfigChannel>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800195a:	f000 f919 	bl	8001b90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	2208      	movs	r2, #8
 8001962:	4619      	mov	r1, r3
 8001964:	4807      	ldr	r0, [pc, #28]	@ (8001984 <MX_TIM2_Init+0xd8>)
 8001966:	f003 fe45 	bl	80055f4 <HAL_TIM_PWM_ConfigChannel>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8001970:	f000 f90e 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001974:	4803      	ldr	r0, [pc, #12]	@ (8001984 <MX_TIM2_Init+0xd8>)
 8001976:	f000 fa1d 	bl	8001db4 <HAL_TIM_MspPostInit>

}
 800197a:	bf00      	nop
 800197c:	3728      	adds	r7, #40	@ 0x28
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	200002b8 	.word	0x200002b8

08001988 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	@ 0x28
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198e:	f107 0320 	add.w	r3, r7, #32
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]
 80019a4:	611a      	str	r2, [r3, #16]
 80019a6:	615a      	str	r2, [r3, #20]
 80019a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019aa:	4b2c      	ldr	r3, [pc, #176]	@ (8001a5c <MX_TIM3_Init+0xd4>)
 80019ac:	4a2c      	ldr	r2, [pc, #176]	@ (8001a60 <MX_TIM3_Init+0xd8>)
 80019ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10;
 80019b0:	4b2a      	ldr	r3, [pc, #168]	@ (8001a5c <MX_TIM3_Init+0xd4>)
 80019b2:	220a      	movs	r2, #10
 80019b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b6:	4b29      	ldr	r3, [pc, #164]	@ (8001a5c <MX_TIM3_Init+0xd4>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 80019bc:	4b27      	ldr	r3, [pc, #156]	@ (8001a5c <MX_TIM3_Init+0xd4>)
 80019be:	22ff      	movs	r2, #255	@ 0xff
 80019c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c2:	4b26      	ldr	r3, [pc, #152]	@ (8001a5c <MX_TIM3_Init+0xd4>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019c8:	4b24      	ldr	r3, [pc, #144]	@ (8001a5c <MX_TIM3_Init+0xd4>)
 80019ca:	2280      	movs	r2, #128	@ 0x80
 80019cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019ce:	4823      	ldr	r0, [pc, #140]	@ (8001a5c <MX_TIM3_Init+0xd4>)
 80019d0:	f003 fc20 	bl	8005214 <HAL_TIM_PWM_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80019da:	f000 f8d9 	bl	8001b90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019de:	2300      	movs	r3, #0
 80019e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019e6:	f107 0320 	add.w	r3, r7, #32
 80019ea:	4619      	mov	r1, r3
 80019ec:	481b      	ldr	r0, [pc, #108]	@ (8001a5c <MX_TIM3_Init+0xd4>)
 80019ee:	f004 f929 	bl	8005c44 <HAL_TIMEx_MasterConfigSynchronization>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80019f8:	f000 f8ca 	bl	8001b90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019fc:	2360      	movs	r3, #96	@ 0x60
 80019fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	2200      	movs	r2, #0
 8001a10:	4619      	mov	r1, r3
 8001a12:	4812      	ldr	r0, [pc, #72]	@ (8001a5c <MX_TIM3_Init+0xd4>)
 8001a14:	f003 fdee 	bl	80055f4 <HAL_TIM_PWM_ConfigChannel>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001a1e:	f000 f8b7 	bl	8001b90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a22:	1d3b      	adds	r3, r7, #4
 8001a24:	2204      	movs	r2, #4
 8001a26:	4619      	mov	r1, r3
 8001a28:	480c      	ldr	r0, [pc, #48]	@ (8001a5c <MX_TIM3_Init+0xd4>)
 8001a2a:	f003 fde3 	bl	80055f4 <HAL_TIM_PWM_ConfigChannel>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a34:	f000 f8ac 	bl	8001b90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	2208      	movs	r2, #8
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4807      	ldr	r0, [pc, #28]	@ (8001a5c <MX_TIM3_Init+0xd4>)
 8001a40:	f003 fdd8 	bl	80055f4 <HAL_TIM_PWM_ConfigChannel>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8001a4a:	f000 f8a1 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a4e:	4803      	ldr	r0, [pc, #12]	@ (8001a5c <MX_TIM3_Init+0xd4>)
 8001a50:	f000 f9b0 	bl	8001db4 <HAL_TIM_MspPostInit>

}
 8001a54:	bf00      	nop
 8001a56:	3728      	adds	r7, #40	@ 0x28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000300 	.word	0x20000300
 8001a60:	40000400 	.word	0x40000400

08001a64 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001a68:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa4 <MX_TIM11_Init+0x40>)
 8001a6a:	4a0f      	ldr	r2, [pc, #60]	@ (8001aa8 <MX_TIM11_Init+0x44>)
 8001a6c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001aa4 <MX_TIM11_Init+0x40>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a74:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <MX_TIM11_Init+0x40>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa4 <MX_TIM11_Init+0x40>)
 8001a7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a80:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a82:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <MX_TIM11_Init+0x40>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a88:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <MX_TIM11_Init+0x40>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001a8e:	4805      	ldr	r0, [pc, #20]	@ (8001aa4 <MX_TIM11_Init+0x40>)
 8001a90:	f003 fb0e 	bl	80050b0 <HAL_TIM_Base_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001a9a:	f000 f879 	bl	8001b90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000348 	.word	0x20000348
 8001aa8:	40014800 	.word	0x40014800

08001aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	@ 0x28
 8001ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
 8001ac0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	4b27      	ldr	r3, [pc, #156]	@ (8001b64 <MX_GPIO_Init+0xb8>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	4a26      	ldr	r2, [pc, #152]	@ (8001b64 <MX_GPIO_Init+0xb8>)
 8001acc:	f043 0304 	orr.w	r3, r3, #4
 8001ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad2:	4b24      	ldr	r3, [pc, #144]	@ (8001b64 <MX_GPIO_Init+0xb8>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	4b20      	ldr	r3, [pc, #128]	@ (8001b64 <MX_GPIO_Init+0xb8>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8001b64 <MX_GPIO_Init+0xb8>)
 8001ae8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aee:	4b1d      	ldr	r3, [pc, #116]	@ (8001b64 <MX_GPIO_Init+0xb8>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	4b19      	ldr	r3, [pc, #100]	@ (8001b64 <MX_GPIO_Init+0xb8>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	4a18      	ldr	r2, [pc, #96]	@ (8001b64 <MX_GPIO_Init+0xb8>)
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0a:	4b16      	ldr	r3, [pc, #88]	@ (8001b64 <MX_GPIO_Init+0xb8>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	4b12      	ldr	r3, [pc, #72]	@ (8001b64 <MX_GPIO_Init+0xb8>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	4a11      	ldr	r2, [pc, #68]	@ (8001b64 <MX_GPIO_Init+0xb8>)
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b26:	4b0f      	ldr	r3, [pc, #60]	@ (8001b64 <MX_GPIO_Init+0xb8>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001b32:	2200      	movs	r2, #0
 8001b34:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b38:	480b      	ldr	r0, [pc, #44]	@ (8001b68 <MX_GPIO_Init+0xbc>)
 8001b3a:	f000 fd77 	bl	800262c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b44:	2301      	movs	r3, #1
 8001b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	4619      	mov	r1, r3
 8001b56:	4804      	ldr	r0, [pc, #16]	@ (8001b68 <MX_GPIO_Init+0xbc>)
 8001b58:	f000 fbe4 	bl	8002324 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b5c:	bf00      	nop
 8001b5e:	3728      	adds	r7, #40	@ 0x28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40020800 	.word	0x40020800

08001b6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a04      	ldr	r2, [pc, #16]	@ (8001b8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d101      	bne.n	8001b82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b7e:	f000 faab 	bl	80020d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40010000 	.word	0x40010000

08001b90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b94:	b672      	cpsid	i
}
 8001b96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <Error_Handler+0x8>

08001b9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
 8001ba6:	4b10      	ldr	r3, [pc, #64]	@ (8001be8 <HAL_MspInit+0x4c>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001baa:	4a0f      	ldr	r2, [pc, #60]	@ (8001be8 <HAL_MspInit+0x4c>)
 8001bac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001be8 <HAL_MspInit+0x4c>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	603b      	str	r3, [r7, #0]
 8001bc2:	4b09      	ldr	r3, [pc, #36]	@ (8001be8 <HAL_MspInit+0x4c>)
 8001bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc6:	4a08      	ldr	r2, [pc, #32]	@ (8001be8 <HAL_MspInit+0x4c>)
 8001bc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bce:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <HAL_MspInit+0x4c>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd6:	603b      	str	r3, [r7, #0]
 8001bd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800

08001bec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08c      	sub	sp, #48	@ 0x30
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	f107 031c 	add.w	r3, r7, #28
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]
 8001bfe:	609a      	str	r2, [r3, #8]
 8001c00:	60da      	str	r2, [r3, #12]
 8001c02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a3a      	ldr	r2, [pc, #232]	@ (8001cf4 <HAL_I2C_MspInit+0x108>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d12c      	bne.n	8001c68 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61bb      	str	r3, [r7, #24]
 8001c12:	4b39      	ldr	r3, [pc, #228]	@ (8001cf8 <HAL_I2C_MspInit+0x10c>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	4a38      	ldr	r2, [pc, #224]	@ (8001cf8 <HAL_I2C_MspInit+0x10c>)
 8001c18:	f043 0302 	orr.w	r3, r3, #2
 8001c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1e:	4b36      	ldr	r3, [pc, #216]	@ (8001cf8 <HAL_I2C_MspInit+0x10c>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	61bb      	str	r3, [r7, #24]
 8001c28:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c2a:	23c0      	movs	r3, #192	@ 0xc0
 8001c2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c2e:	2312      	movs	r3, #18
 8001c30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c36:	2303      	movs	r3, #3
 8001c38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c3a:	2304      	movs	r3, #4
 8001c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3e:	f107 031c 	add.w	r3, r7, #28
 8001c42:	4619      	mov	r1, r3
 8001c44:	482d      	ldr	r0, [pc, #180]	@ (8001cfc <HAL_I2C_MspInit+0x110>)
 8001c46:	f000 fb6d 	bl	8002324 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
 8001c4e:	4b2a      	ldr	r3, [pc, #168]	@ (8001cf8 <HAL_I2C_MspInit+0x10c>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c52:	4a29      	ldr	r2, [pc, #164]	@ (8001cf8 <HAL_I2C_MspInit+0x10c>)
 8001c54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c5a:	4b27      	ldr	r3, [pc, #156]	@ (8001cf8 <HAL_I2C_MspInit+0x10c>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c62:	617b      	str	r3, [r7, #20]
 8001c64:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c66:	e041      	b.n	8001cec <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a24      	ldr	r2, [pc, #144]	@ (8001d00 <HAL_I2C_MspInit+0x114>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d13c      	bne.n	8001cec <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	4b20      	ldr	r3, [pc, #128]	@ (8001cf8 <HAL_I2C_MspInit+0x10c>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	4a1f      	ldr	r2, [pc, #124]	@ (8001cf8 <HAL_I2C_MspInit+0x10c>)
 8001c7c:	f043 0302 	orr.w	r3, r3, #2
 8001c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c82:	4b1d      	ldr	r3, [pc, #116]	@ (8001cf8 <HAL_I2C_MspInit+0x10c>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c94:	2312      	movs	r3, #18
 8001c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca4:	f107 031c 	add.w	r3, r7, #28
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4814      	ldr	r0, [pc, #80]	@ (8001cfc <HAL_I2C_MspInit+0x110>)
 8001cac:	f000 fb3a 	bl	8002324 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001cb0:	2308      	movs	r3, #8
 8001cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cb4:	2312      	movs	r3, #18
 8001cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001cc0:	2309      	movs	r3, #9
 8001cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc4:	f107 031c 	add.w	r3, r7, #28
 8001cc8:	4619      	mov	r1, r3
 8001cca:	480c      	ldr	r0, [pc, #48]	@ (8001cfc <HAL_I2C_MspInit+0x110>)
 8001ccc:	f000 fb2a 	bl	8002324 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	4b08      	ldr	r3, [pc, #32]	@ (8001cf8 <HAL_I2C_MspInit+0x10c>)
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd8:	4a07      	ldr	r2, [pc, #28]	@ (8001cf8 <HAL_I2C_MspInit+0x10c>)
 8001cda:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001cde:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ce0:	4b05      	ldr	r3, [pc, #20]	@ (8001cf8 <HAL_I2C_MspInit+0x10c>)
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	68fb      	ldr	r3, [r7, #12]
}
 8001cec:	bf00      	nop
 8001cee:	3730      	adds	r7, #48	@ 0x30
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40005400 	.word	0x40005400
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	40020400 	.word	0x40020400
 8001d00:	40005800 	.word	0x40005800

08001d04 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d14:	d10e      	bne.n	8001d34 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
 8001d1a:	4b13      	ldr	r3, [pc, #76]	@ (8001d68 <HAL_TIM_PWM_MspInit+0x64>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1e:	4a12      	ldr	r2, [pc, #72]	@ (8001d68 <HAL_TIM_PWM_MspInit+0x64>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d26:	4b10      	ldr	r3, [pc, #64]	@ (8001d68 <HAL_TIM_PWM_MspInit+0x64>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d32:	e012      	b.n	8001d5a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a0c      	ldr	r2, [pc, #48]	@ (8001d6c <HAL_TIM_PWM_MspInit+0x68>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d10d      	bne.n	8001d5a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	4b09      	ldr	r3, [pc, #36]	@ (8001d68 <HAL_TIM_PWM_MspInit+0x64>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	4a08      	ldr	r2, [pc, #32]	@ (8001d68 <HAL_TIM_PWM_MspInit+0x64>)
 8001d48:	f043 0302 	orr.w	r3, r3, #2
 8001d4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d4e:	4b06      	ldr	r3, [pc, #24]	@ (8001d68 <HAL_TIM_PWM_MspInit+0x64>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	68bb      	ldr	r3, [r7, #8]
}
 8001d5a:	bf00      	nop
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40000400 	.word	0x40000400

08001d70 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0b      	ldr	r2, [pc, #44]	@ (8001dac <HAL_TIM_Base_MspInit+0x3c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d10d      	bne.n	8001d9e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	4b0a      	ldr	r3, [pc, #40]	@ (8001db0 <HAL_TIM_Base_MspInit+0x40>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8a:	4a09      	ldr	r2, [pc, #36]	@ (8001db0 <HAL_TIM_Base_MspInit+0x40>)
 8001d8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d92:	4b07      	ldr	r3, [pc, #28]	@ (8001db0 <HAL_TIM_Base_MspInit+0x40>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM11_MspInit 1 */

  }

}
 8001d9e:	bf00      	nop
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40014800 	.word	0x40014800
 8001db0:	40023800 	.word	0x40023800

08001db4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	@ 0x28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
 8001dca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dd4:	d11e      	bne.n	8001e14 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	4b31      	ldr	r3, [pc, #196]	@ (8001ea0 <HAL_TIM_MspPostInit+0xec>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dde:	4a30      	ldr	r2, [pc, #192]	@ (8001ea0 <HAL_TIM_MspPostInit+0xec>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001de6:	4b2e      	ldr	r3, [pc, #184]	@ (8001ea0 <HAL_TIM_MspPostInit+0xec>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	613b      	str	r3, [r7, #16]
 8001df0:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001df2:	2307      	movs	r3, #7
 8001df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df6:	2302      	movs	r3, #2
 8001df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e02:	2301      	movs	r3, #1
 8001e04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e06:	f107 0314 	add.w	r3, r7, #20
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4825      	ldr	r0, [pc, #148]	@ (8001ea4 <HAL_TIM_MspPostInit+0xf0>)
 8001e0e:	f000 fa89 	bl	8002324 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e12:	e040      	b.n	8001e96 <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a23      	ldr	r2, [pc, #140]	@ (8001ea8 <HAL_TIM_MspPostInit+0xf4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d13b      	bne.n	8001e96 <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea0 <HAL_TIM_MspPostInit+0xec>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e26:	4a1e      	ldr	r2, [pc, #120]	@ (8001ea0 <HAL_TIM_MspPostInit+0xec>)
 8001e28:	f043 0301 	orr.w	r3, r3, #1
 8001e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea0 <HAL_TIM_MspPostInit+0xec>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	4b18      	ldr	r3, [pc, #96]	@ (8001ea0 <HAL_TIM_MspPostInit+0xec>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	4a17      	ldr	r2, [pc, #92]	@ (8001ea0 <HAL_TIM_MspPostInit+0xec>)
 8001e44:	f043 0302 	orr.w	r3, r3, #2
 8001e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ea0 <HAL_TIM_MspPostInit+0xec>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	60bb      	str	r3, [r7, #8]
 8001e54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e56:	23c0      	movs	r3, #192	@ 0xc0
 8001e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e62:	2300      	movs	r3, #0
 8001e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e66:	2302      	movs	r3, #2
 8001e68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6a:	f107 0314 	add.w	r3, r7, #20
 8001e6e:	4619      	mov	r1, r3
 8001e70:	480c      	ldr	r0, [pc, #48]	@ (8001ea4 <HAL_TIM_MspPostInit+0xf0>)
 8001e72:	f000 fa57 	bl	8002324 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e76:	2301      	movs	r3, #1
 8001e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e82:	2300      	movs	r3, #0
 8001e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e86:	2302      	movs	r3, #2
 8001e88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8a:	f107 0314 	add.w	r3, r7, #20
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4806      	ldr	r0, [pc, #24]	@ (8001eac <HAL_TIM_MspPostInit+0xf8>)
 8001e92:	f000 fa47 	bl	8002324 <HAL_GPIO_Init>
}
 8001e96:	bf00      	nop
 8001e98:	3728      	adds	r7, #40	@ 0x28
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40020000 	.word	0x40020000
 8001ea8:	40000400 	.word	0x40000400
 8001eac:	40020400 	.word	0x40020400

08001eb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b08c      	sub	sp, #48	@ 0x30
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	60bb      	str	r3, [r7, #8]
 8001ec4:	4b2e      	ldr	r3, [pc, #184]	@ (8001f80 <HAL_InitTick+0xd0>)
 8001ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec8:	4a2d      	ldr	r2, [pc, #180]	@ (8001f80 <HAL_InitTick+0xd0>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ed0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f80 <HAL_InitTick+0xd0>)
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001edc:	f107 020c 	add.w	r2, r7, #12
 8001ee0:	f107 0310 	add.w	r3, r7, #16
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f003 f8b0 	bl	800504c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001eec:	f003 f89a 	bl	8005024 <HAL_RCC_GetPCLK2Freq>
 8001ef0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ef4:	4a23      	ldr	r2, [pc, #140]	@ (8001f84 <HAL_InitTick+0xd4>)
 8001ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8001efa:	0c9b      	lsrs	r3, r3, #18
 8001efc:	3b01      	subs	r3, #1
 8001efe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f00:	4b21      	ldr	r3, [pc, #132]	@ (8001f88 <HAL_InitTick+0xd8>)
 8001f02:	4a22      	ldr	r2, [pc, #136]	@ (8001f8c <HAL_InitTick+0xdc>)
 8001f04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001f06:	4b20      	ldr	r3, [pc, #128]	@ (8001f88 <HAL_InitTick+0xd8>)
 8001f08:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f0c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f0e:	4a1e      	ldr	r2, [pc, #120]	@ (8001f88 <HAL_InitTick+0xd8>)
 8001f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f12:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001f14:	4b1c      	ldr	r3, [pc, #112]	@ (8001f88 <HAL_InitTick+0xd8>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001f88 <HAL_InitTick+0xd8>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f20:	4b19      	ldr	r3, [pc, #100]	@ (8001f88 <HAL_InitTick+0xd8>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001f26:	4818      	ldr	r0, [pc, #96]	@ (8001f88 <HAL_InitTick+0xd8>)
 8001f28:	f003 f8c2 	bl	80050b0 <HAL_TIM_Base_Init>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001f32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d11b      	bne.n	8001f72 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001f3a:	4813      	ldr	r0, [pc, #76]	@ (8001f88 <HAL_InitTick+0xd8>)
 8001f3c:	f003 f908 	bl	8005150 <HAL_TIM_Base_Start_IT>
 8001f40:	4603      	mov	r3, r0
 8001f42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001f46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d111      	bne.n	8001f72 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f4e:	2019      	movs	r0, #25
 8001f50:	f000 f9da 	bl	8002308 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b0f      	cmp	r3, #15
 8001f58:	d808      	bhi.n	8001f6c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	2019      	movs	r0, #25
 8001f60:	f000 f9b6 	bl	80022d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f64:	4a0a      	ldr	r2, [pc, #40]	@ (8001f90 <HAL_InitTick+0xe0>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	e002      	b.n	8001f72 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001f72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3730      	adds	r7, #48	@ 0x30
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40023800 	.word	0x40023800
 8001f84:	431bde83 	.word	0x431bde83
 8001f88:	2000039c 	.word	0x2000039c
 8001f8c:	40010000 	.word	0x40010000
 8001f90:	20000088 	.word	0x20000088

08001f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f98:	bf00      	nop
 8001f9a:	e7fd      	b.n	8001f98 <NMI_Handler+0x4>

08001f9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fa0:	bf00      	nop
 8001fa2:	e7fd      	b.n	8001fa0 <HardFault_Handler+0x4>

08001fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa8:	bf00      	nop
 8001faa:	e7fd      	b.n	8001fa8 <MemManage_Handler+0x4>

08001fac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <BusFault_Handler+0x4>

08001fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb8:	bf00      	nop
 8001fba:	e7fd      	b.n	8001fb8 <UsageFault_Handler+0x4>

08001fbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr

08001fca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ff8:	4802      	ldr	r0, [pc, #8]	@ (8002004 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001ffa:	f003 fa0b 	bl	8005414 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	2000039c 	.word	0x2000039c

08002008 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800200c:	4802      	ldr	r0, [pc, #8]	@ (8002018 <OTG_FS_IRQHandler+0x10>)
 800200e:	f001 fab7 	bl	8003580 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200018c8 	.word	0x200018c8

0800201c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002020:	4b06      	ldr	r3, [pc, #24]	@ (800203c <SystemInit+0x20>)
 8002022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002026:	4a05      	ldr	r2, [pc, #20]	@ (800203c <SystemInit+0x20>)
 8002028:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800202c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002030:	bf00      	nop
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002040:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002078 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002044:	f7ff ffea 	bl	800201c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002048:	480c      	ldr	r0, [pc, #48]	@ (800207c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800204a:	490d      	ldr	r1, [pc, #52]	@ (8002080 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800204c:	4a0d      	ldr	r2, [pc, #52]	@ (8002084 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800204e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002050:	e002      	b.n	8002058 <LoopCopyDataInit>

08002052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002056:	3304      	adds	r3, #4

08002058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800205a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800205c:	d3f9      	bcc.n	8002052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800205e:	4a0a      	ldr	r2, [pc, #40]	@ (8002088 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002060:	4c0a      	ldr	r4, [pc, #40]	@ (800208c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002064:	e001      	b.n	800206a <LoopFillZerobss>

08002066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002068:	3204      	adds	r2, #4

0800206a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800206a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800206c:	d3fb      	bcc.n	8002066 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800206e:	f007 fe3d 	bl	8009cec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002072:	f7ff fb03 	bl	800167c <main>
  bx  lr    
 8002076:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002078:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800207c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002080:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8002084:	0800a040 	.word	0x0800a040
  ldr r2, =_sbss
 8002088:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 800208c:	20002104 	.word	0x20002104

08002090 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002090:	e7fe      	b.n	8002090 <ADC_IRQHandler>
	...

08002094 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002098:	4b0e      	ldr	r3, [pc, #56]	@ (80020d4 <HAL_Init+0x40>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a0d      	ldr	r2, [pc, #52]	@ (80020d4 <HAL_Init+0x40>)
 800209e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020a4:	4b0b      	ldr	r3, [pc, #44]	@ (80020d4 <HAL_Init+0x40>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a0a      	ldr	r2, [pc, #40]	@ (80020d4 <HAL_Init+0x40>)
 80020aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020b0:	4b08      	ldr	r3, [pc, #32]	@ (80020d4 <HAL_Init+0x40>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a07      	ldr	r2, [pc, #28]	@ (80020d4 <HAL_Init+0x40>)
 80020b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020bc:	2003      	movs	r0, #3
 80020be:	f000 f8fc 	bl	80022ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020c2:	200f      	movs	r0, #15
 80020c4:	f7ff fef4 	bl	8001eb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020c8:	f7ff fd68 	bl	8001b9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40023c00 	.word	0x40023c00

080020d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020dc:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <HAL_IncTick+0x20>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	461a      	mov	r2, r3
 80020e2:	4b06      	ldr	r3, [pc, #24]	@ (80020fc <HAL_IncTick+0x24>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4413      	add	r3, r2
 80020e8:	4a04      	ldr	r2, [pc, #16]	@ (80020fc <HAL_IncTick+0x24>)
 80020ea:	6013      	str	r3, [r2, #0]
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	2000008c 	.word	0x2000008c
 80020fc:	200003e4 	.word	0x200003e4

08002100 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return uwTick;
 8002104:	4b03      	ldr	r3, [pc, #12]	@ (8002114 <HAL_GetTick+0x14>)
 8002106:	681b      	ldr	r3, [r3, #0]
}
 8002108:	4618      	mov	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	200003e4 	.word	0x200003e4

08002118 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002120:	f7ff ffee 	bl	8002100 <HAL_GetTick>
 8002124:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002130:	d005      	beq.n	800213e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002132:	4b0a      	ldr	r3, [pc, #40]	@ (800215c <HAL_Delay+0x44>)
 8002134:	781b      	ldrb	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4413      	add	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800213e:	bf00      	nop
 8002140:	f7ff ffde 	bl	8002100 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	429a      	cmp	r2, r3
 800214e:	d8f7      	bhi.n	8002140 <HAL_Delay+0x28>
  {
  }
}
 8002150:	bf00      	nop
 8002152:	bf00      	nop
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	2000008c 	.word	0x2000008c

08002160 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002170:	4b0c      	ldr	r3, [pc, #48]	@ (80021a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800217c:	4013      	ands	r3, r2
 800217e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002188:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800218c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002190:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002192:	4a04      	ldr	r2, [pc, #16]	@ (80021a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	60d3      	str	r3, [r2, #12]
}
 8002198:	bf00      	nop
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	e000ed00 	.word	0xe000ed00

080021a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021ac:	4b04      	ldr	r3, [pc, #16]	@ (80021c0 <__NVIC_GetPriorityGrouping+0x18>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	0a1b      	lsrs	r3, r3, #8
 80021b2:	f003 0307 	and.w	r3, r3, #7
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	4603      	mov	r3, r0
 80021cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	db0b      	blt.n	80021ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	f003 021f 	and.w	r2, r3, #31
 80021dc:	4907      	ldr	r1, [pc, #28]	@ (80021fc <__NVIC_EnableIRQ+0x38>)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	095b      	lsrs	r3, r3, #5
 80021e4:	2001      	movs	r0, #1
 80021e6:	fa00 f202 	lsl.w	r2, r0, r2
 80021ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021ee:	bf00      	nop
 80021f0:	370c      	adds	r7, #12
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	e000e100 	.word	0xe000e100

08002200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	6039      	str	r1, [r7, #0]
 800220a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002210:	2b00      	cmp	r3, #0
 8002212:	db0a      	blt.n	800222a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	b2da      	uxtb	r2, r3
 8002218:	490c      	ldr	r1, [pc, #48]	@ (800224c <__NVIC_SetPriority+0x4c>)
 800221a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800221e:	0112      	lsls	r2, r2, #4
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	440b      	add	r3, r1
 8002224:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002228:	e00a      	b.n	8002240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4908      	ldr	r1, [pc, #32]	@ (8002250 <__NVIC_SetPriority+0x50>)
 8002230:	79fb      	ldrb	r3, [r7, #7]
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	3b04      	subs	r3, #4
 8002238:	0112      	lsls	r2, r2, #4
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	440b      	add	r3, r1
 800223e:	761a      	strb	r2, [r3, #24]
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	e000e100 	.word	0xe000e100
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002254:	b480      	push	{r7}
 8002256:	b089      	sub	sp, #36	@ 0x24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f1c3 0307 	rsb	r3, r3, #7
 800226e:	2b04      	cmp	r3, #4
 8002270:	bf28      	it	cs
 8002272:	2304      	movcs	r3, #4
 8002274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3304      	adds	r3, #4
 800227a:	2b06      	cmp	r3, #6
 800227c:	d902      	bls.n	8002284 <NVIC_EncodePriority+0x30>
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3b03      	subs	r3, #3
 8002282:	e000      	b.n	8002286 <NVIC_EncodePriority+0x32>
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002288:	f04f 32ff 	mov.w	r2, #4294967295
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43da      	mvns	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	401a      	ands	r2, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800229c:	f04f 31ff 	mov.w	r1, #4294967295
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	43d9      	mvns	r1, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ac:	4313      	orrs	r3, r2
         );
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3724      	adds	r7, #36	@ 0x24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff ff4c 	bl	8002160 <__NVIC_SetPriorityGrouping>
}
 80022c8:	bf00      	nop
 80022ca:	3708      	adds	r7, #8
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	60b9      	str	r1, [r7, #8]
 80022da:	607a      	str	r2, [r7, #4]
 80022dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022de:	2300      	movs	r3, #0
 80022e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022e2:	f7ff ff61 	bl	80021a8 <__NVIC_GetPriorityGrouping>
 80022e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	68b9      	ldr	r1, [r7, #8]
 80022ec:	6978      	ldr	r0, [r7, #20]
 80022ee:	f7ff ffb1 	bl	8002254 <NVIC_EncodePriority>
 80022f2:	4602      	mov	r2, r0
 80022f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f8:	4611      	mov	r1, r2
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff ff80 	bl	8002200 <__NVIC_SetPriority>
}
 8002300:	bf00      	nop
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff ff54 	bl	80021c4 <__NVIC_EnableIRQ>
}
 800231c:	bf00      	nop
 800231e:	3708      	adds	r7, #8
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002324:	b480      	push	{r7}
 8002326:	b089      	sub	sp, #36	@ 0x24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002332:	2300      	movs	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002336:	2300      	movs	r3, #0
 8002338:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
 800233e:	e159      	b.n	80025f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002340:	2201      	movs	r2, #1
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	4013      	ands	r3, r2
 8002352:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002354:	693a      	ldr	r2, [r7, #16]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	429a      	cmp	r2, r3
 800235a:	f040 8148 	bne.w	80025ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	2b01      	cmp	r3, #1
 8002368:	d005      	beq.n	8002376 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002372:	2b02      	cmp	r3, #2
 8002374:	d130      	bne.n	80023d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	2203      	movs	r2, #3
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4313      	orrs	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ac:	2201      	movs	r2, #1
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	091b      	lsrs	r3, r3, #4
 80023c2:	f003 0201 	and.w	r2, r3, #1
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d017      	beq.n	8002414 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68db      	ldr	r3, [r3, #12]
 80023e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	2203      	movs	r2, #3
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	4013      	ands	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d123      	bne.n	8002468 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	08da      	lsrs	r2, r3, #3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3208      	adds	r2, #8
 8002428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	220f      	movs	r2, #15
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	08da      	lsrs	r2, r3, #3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3208      	adds	r2, #8
 8002462:	69b9      	ldr	r1, [r7, #24]
 8002464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	2203      	movs	r2, #3
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 0203 	and.w	r2, r3, #3
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4313      	orrs	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f000 80a2 	beq.w	80025ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	4b57      	ldr	r3, [pc, #348]	@ (800260c <HAL_GPIO_Init+0x2e8>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b2:	4a56      	ldr	r2, [pc, #344]	@ (800260c <HAL_GPIO_Init+0x2e8>)
 80024b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80024ba:	4b54      	ldr	r3, [pc, #336]	@ (800260c <HAL_GPIO_Init+0x2e8>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024c6:	4a52      	ldr	r2, [pc, #328]	@ (8002610 <HAL_GPIO_Init+0x2ec>)
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	089b      	lsrs	r3, r3, #2
 80024cc:	3302      	adds	r3, #2
 80024ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f003 0303 	and.w	r3, r3, #3
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	220f      	movs	r2, #15
 80024de:	fa02 f303 	lsl.w	r3, r2, r3
 80024e2:	43db      	mvns	r3, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4013      	ands	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a49      	ldr	r2, [pc, #292]	@ (8002614 <HAL_GPIO_Init+0x2f0>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d019      	beq.n	8002526 <HAL_GPIO_Init+0x202>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a48      	ldr	r2, [pc, #288]	@ (8002618 <HAL_GPIO_Init+0x2f4>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d013      	beq.n	8002522 <HAL_GPIO_Init+0x1fe>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a47      	ldr	r2, [pc, #284]	@ (800261c <HAL_GPIO_Init+0x2f8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d00d      	beq.n	800251e <HAL_GPIO_Init+0x1fa>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a46      	ldr	r2, [pc, #280]	@ (8002620 <HAL_GPIO_Init+0x2fc>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d007      	beq.n	800251a <HAL_GPIO_Init+0x1f6>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	4a45      	ldr	r2, [pc, #276]	@ (8002624 <HAL_GPIO_Init+0x300>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d101      	bne.n	8002516 <HAL_GPIO_Init+0x1f2>
 8002512:	2304      	movs	r3, #4
 8002514:	e008      	b.n	8002528 <HAL_GPIO_Init+0x204>
 8002516:	2307      	movs	r3, #7
 8002518:	e006      	b.n	8002528 <HAL_GPIO_Init+0x204>
 800251a:	2303      	movs	r3, #3
 800251c:	e004      	b.n	8002528 <HAL_GPIO_Init+0x204>
 800251e:	2302      	movs	r3, #2
 8002520:	e002      	b.n	8002528 <HAL_GPIO_Init+0x204>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <HAL_GPIO_Init+0x204>
 8002526:	2300      	movs	r3, #0
 8002528:	69fa      	ldr	r2, [r7, #28]
 800252a:	f002 0203 	and.w	r2, r2, #3
 800252e:	0092      	lsls	r2, r2, #2
 8002530:	4093      	lsls	r3, r2
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002538:	4935      	ldr	r1, [pc, #212]	@ (8002610 <HAL_GPIO_Init+0x2ec>)
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	089b      	lsrs	r3, r3, #2
 800253e:	3302      	adds	r3, #2
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002546:	4b38      	ldr	r3, [pc, #224]	@ (8002628 <HAL_GPIO_Init+0x304>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800256a:	4a2f      	ldr	r2, [pc, #188]	@ (8002628 <HAL_GPIO_Init+0x304>)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002570:	4b2d      	ldr	r3, [pc, #180]	@ (8002628 <HAL_GPIO_Init+0x304>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002594:	4a24      	ldr	r2, [pc, #144]	@ (8002628 <HAL_GPIO_Init+0x304>)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800259a:	4b23      	ldr	r3, [pc, #140]	@ (8002628 <HAL_GPIO_Init+0x304>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025be:	4a1a      	ldr	r2, [pc, #104]	@ (8002628 <HAL_GPIO_Init+0x304>)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025c4:	4b18      	ldr	r3, [pc, #96]	@ (8002628 <HAL_GPIO_Init+0x304>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025e8:	4a0f      	ldr	r2, [pc, #60]	@ (8002628 <HAL_GPIO_Init+0x304>)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3301      	adds	r3, #1
 80025f2:	61fb      	str	r3, [r7, #28]
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	2b0f      	cmp	r3, #15
 80025f8:	f67f aea2 	bls.w	8002340 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025fc:	bf00      	nop
 80025fe:	bf00      	nop
 8002600:	3724      	adds	r7, #36	@ 0x24
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40023800 	.word	0x40023800
 8002610:	40013800 	.word	0x40013800
 8002614:	40020000 	.word	0x40020000
 8002618:	40020400 	.word	0x40020400
 800261c:	40020800 	.word	0x40020800
 8002620:	40020c00 	.word	0x40020c00
 8002624:	40021000 	.word	0x40021000
 8002628:	40013c00 	.word	0x40013c00

0800262c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	807b      	strh	r3, [r7, #2]
 8002638:	4613      	mov	r3, r2
 800263a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800263c:	787b      	ldrb	r3, [r7, #1]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002642:	887a      	ldrh	r2, [r7, #2]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002648:	e003      	b.n	8002652 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800264a:	887b      	ldrh	r3, [r7, #2]
 800264c:	041a      	lsls	r2, r3, #16
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	619a      	str	r2, [r3, #24]
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d101      	bne.n	8002672 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e12b      	b.n	80028ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b00      	cmp	r3, #0
 800267c:	d106      	bne.n	800268c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff fab0 	bl	8001bec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2224      	movs	r2, #36	@ 0x24
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f022 0201 	bic.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026c4:	f002 fc9a 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 80026c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	4a81      	ldr	r2, [pc, #516]	@ (80028d4 <HAL_I2C_Init+0x274>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d807      	bhi.n	80026e4 <HAL_I2C_Init+0x84>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4a80      	ldr	r2, [pc, #512]	@ (80028d8 <HAL_I2C_Init+0x278>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	bf94      	ite	ls
 80026dc:	2301      	movls	r3, #1
 80026de:	2300      	movhi	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	e006      	b.n	80026f2 <HAL_I2C_Init+0x92>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4a7d      	ldr	r2, [pc, #500]	@ (80028dc <HAL_I2C_Init+0x27c>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	bf94      	ite	ls
 80026ec:	2301      	movls	r3, #1
 80026ee:	2300      	movhi	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e0e7      	b.n	80028ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	4a78      	ldr	r2, [pc, #480]	@ (80028e0 <HAL_I2C_Init+0x280>)
 80026fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002702:	0c9b      	lsrs	r3, r3, #18
 8002704:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68ba      	ldr	r2, [r7, #8]
 8002716:	430a      	orrs	r2, r1
 8002718:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	4a6a      	ldr	r2, [pc, #424]	@ (80028d4 <HAL_I2C_Init+0x274>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d802      	bhi.n	8002734 <HAL_I2C_Init+0xd4>
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	3301      	adds	r3, #1
 8002732:	e009      	b.n	8002748 <HAL_I2C_Init+0xe8>
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800273a:	fb02 f303 	mul.w	r3, r2, r3
 800273e:	4a69      	ldr	r2, [pc, #420]	@ (80028e4 <HAL_I2C_Init+0x284>)
 8002740:	fba2 2303 	umull	r2, r3, r2, r3
 8002744:	099b      	lsrs	r3, r3, #6
 8002746:	3301      	adds	r3, #1
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	430b      	orrs	r3, r1
 800274e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800275a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	495c      	ldr	r1, [pc, #368]	@ (80028d4 <HAL_I2C_Init+0x274>)
 8002764:	428b      	cmp	r3, r1
 8002766:	d819      	bhi.n	800279c <HAL_I2C_Init+0x13c>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	1e59      	subs	r1, r3, #1
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	fbb1 f3f3 	udiv	r3, r1, r3
 8002776:	1c59      	adds	r1, r3, #1
 8002778:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800277c:	400b      	ands	r3, r1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00a      	beq.n	8002798 <HAL_I2C_Init+0x138>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	1e59      	subs	r1, r3, #1
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002790:	3301      	adds	r3, #1
 8002792:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002796:	e051      	b.n	800283c <HAL_I2C_Init+0x1dc>
 8002798:	2304      	movs	r3, #4
 800279a:	e04f      	b.n	800283c <HAL_I2C_Init+0x1dc>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d111      	bne.n	80027c8 <HAL_I2C_Init+0x168>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	1e58      	subs	r0, r3, #1
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6859      	ldr	r1, [r3, #4]
 80027ac:	460b      	mov	r3, r1
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	440b      	add	r3, r1
 80027b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027b6:	3301      	adds	r3, #1
 80027b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027bc:	2b00      	cmp	r3, #0
 80027be:	bf0c      	ite	eq
 80027c0:	2301      	moveq	r3, #1
 80027c2:	2300      	movne	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	e012      	b.n	80027ee <HAL_I2C_Init+0x18e>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	1e58      	subs	r0, r3, #1
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6859      	ldr	r1, [r3, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	0099      	lsls	r1, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	fbb0 f3f3 	udiv	r3, r0, r3
 80027de:	3301      	adds	r3, #1
 80027e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	bf0c      	ite	eq
 80027e8:	2301      	moveq	r3, #1
 80027ea:	2300      	movne	r3, #0
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <HAL_I2C_Init+0x196>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e022      	b.n	800283c <HAL_I2C_Init+0x1dc>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d10e      	bne.n	800281c <HAL_I2C_Init+0x1bc>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	1e58      	subs	r0, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6859      	ldr	r1, [r3, #4]
 8002806:	460b      	mov	r3, r1
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	440b      	add	r3, r1
 800280c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002810:	3301      	adds	r3, #1
 8002812:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002816:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800281a:	e00f      	b.n	800283c <HAL_I2C_Init+0x1dc>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	1e58      	subs	r0, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6859      	ldr	r1, [r3, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	0099      	lsls	r1, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002832:	3301      	adds	r3, #1
 8002834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002838:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	6809      	ldr	r1, [r1, #0]
 8002840:	4313      	orrs	r3, r2
 8002842:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	69da      	ldr	r2, [r3, #28]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800286a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6911      	ldr	r1, [r2, #16]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	68d2      	ldr	r2, [r2, #12]
 8002876:	4311      	orrs	r1, r2
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	430b      	orrs	r3, r1
 800287e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695a      	ldr	r2, [r3, #20]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	430a      	orrs	r2, r1
 800289a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2220      	movs	r2, #32
 80028b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	000186a0 	.word	0x000186a0
 80028d8:	001e847f 	.word	0x001e847f
 80028dc:	003d08ff 	.word	0x003d08ff
 80028e0:	431bde83 	.word	0x431bde83
 80028e4:	10624dd3 	.word	0x10624dd3

080028e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08c      	sub	sp, #48	@ 0x30
 80028ec:	af02      	add	r7, sp, #8
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	4608      	mov	r0, r1
 80028f2:	4611      	mov	r1, r2
 80028f4:	461a      	mov	r2, r3
 80028f6:	4603      	mov	r3, r0
 80028f8:	817b      	strh	r3, [r7, #10]
 80028fa:	460b      	mov	r3, r1
 80028fc:	813b      	strh	r3, [r7, #8]
 80028fe:	4613      	mov	r3, r2
 8002900:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002902:	f7ff fbfd 	bl	8002100 <HAL_GetTick>
 8002906:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b20      	cmp	r3, #32
 8002912:	f040 8214 	bne.w	8002d3e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	9300      	str	r3, [sp, #0]
 800291a:	2319      	movs	r3, #25
 800291c:	2201      	movs	r2, #1
 800291e:	497b      	ldr	r1, [pc, #492]	@ (8002b0c <HAL_I2C_Mem_Read+0x224>)
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 fafb 	bl	8002f1c <I2C_WaitOnFlagUntilTimeout>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800292c:	2302      	movs	r3, #2
 800292e:	e207      	b.n	8002d40 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_I2C_Mem_Read+0x56>
 800293a:	2302      	movs	r3, #2
 800293c:	e200      	b.n	8002d40 <HAL_I2C_Mem_Read+0x458>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0301 	and.w	r3, r3, #1
 8002950:	2b01      	cmp	r3, #1
 8002952:	d007      	beq.n	8002964 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002972:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2222      	movs	r2, #34	@ 0x22
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2240      	movs	r2, #64	@ 0x40
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2200      	movs	r2, #0
 8002988:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800298e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002994:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800299a:	b29a      	uxth	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4a5b      	ldr	r2, [pc, #364]	@ (8002b10 <HAL_I2C_Mem_Read+0x228>)
 80029a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029a6:	88f8      	ldrh	r0, [r7, #6]
 80029a8:	893a      	ldrh	r2, [r7, #8]
 80029aa:	8979      	ldrh	r1, [r7, #10]
 80029ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ae:	9301      	str	r3, [sp, #4]
 80029b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	4603      	mov	r3, r0
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 f9c8 	bl	8002d4c <I2C_RequestMemoryRead>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e1bc      	b.n	8002d40 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d113      	bne.n	80029f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ce:	2300      	movs	r3, #0
 80029d0:	623b      	str	r3, [r7, #32]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	623b      	str	r3, [r7, #32]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	623b      	str	r3, [r7, #32]
 80029e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029f2:	601a      	str	r2, [r3, #0]
 80029f4:	e190      	b.n	8002d18 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d11b      	bne.n	8002a36 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a0e:	2300      	movs	r3, #0
 8002a10:	61fb      	str	r3, [r7, #28]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	61fb      	str	r3, [r7, #28]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	61fb      	str	r3, [r7, #28]
 8002a22:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	e170      	b.n	8002d18 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d11b      	bne.n	8002a76 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a4c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61bb      	str	r3, [r7, #24]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	61bb      	str	r3, [r7, #24]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	61bb      	str	r3, [r7, #24]
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	e150      	b.n	8002d18 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	617b      	str	r3, [r7, #20]
 8002a8a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a8c:	e144      	b.n	8002d18 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	f200 80f1 	bhi.w	8002c7a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d123      	bne.n	8002ae8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aa0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aa2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f000 fb9b 	bl	80031e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e145      	b.n	8002d40 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691a      	ldr	r2, [r3, #16]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ae6:	e117      	b.n	8002d18 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d14e      	bne.n	8002b8e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002af6:	2200      	movs	r2, #0
 8002af8:	4906      	ldr	r1, [pc, #24]	@ (8002b14 <HAL_I2C_Mem_Read+0x22c>)
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 fa0e 	bl	8002f1c <I2C_WaitOnFlagUntilTimeout>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d008      	beq.n	8002b18 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e11a      	b.n	8002d40 <HAL_I2C_Mem_Read+0x458>
 8002b0a:	bf00      	nop
 8002b0c:	00100002 	.word	0x00100002
 8002b10:	ffff0000 	.word	0xffff0000
 8002b14:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691a      	ldr	r2, [r3, #16]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b29a      	uxth	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	691a      	ldr	r2, [r3, #16]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	b2d2      	uxtb	r2, r2
 8002b66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b76:	3b01      	subs	r3, #1
 8002b78:	b29a      	uxth	r2, r3
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b8c:	e0c4      	b.n	8002d18 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b94:	2200      	movs	r2, #0
 8002b96:	496c      	ldr	r1, [pc, #432]	@ (8002d48 <HAL_I2C_Mem_Read+0x460>)
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 f9bf 	bl	8002f1c <I2C_WaitOnFlagUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e0cb      	b.n	8002d40 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	691a      	ldr	r2, [r3, #16]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc2:	b2d2      	uxtb	r2, r2
 8002bc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bca:	1c5a      	adds	r2, r3, #1
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	4955      	ldr	r1, [pc, #340]	@ (8002d48 <HAL_I2C_Mem_Read+0x460>)
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 f991 	bl	8002f1c <I2C_WaitOnFlagUntilTimeout>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e09d      	b.n	8002d40 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691a      	ldr	r2, [r3, #16]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1e:	b2d2      	uxtb	r2, r2
 8002c20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c26:	1c5a      	adds	r2, r3, #1
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	691a      	ldr	r2, [r3, #16]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c58:	1c5a      	adds	r2, r3, #1
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c78:	e04e      	b.n	8002d18 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c7c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f000 faae 	bl	80031e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d001      	beq.n	8002c8e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e058      	b.n	8002d40 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c98:	b2d2      	uxtb	r2, r2
 8002c9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca0:	1c5a      	adds	r2, r3, #1
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d124      	bne.n	8002d18 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d107      	bne.n	8002ce6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ce4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf8:	1c5a      	adds	r2, r3, #1
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d02:	3b01      	subs	r3, #1
 8002d04:	b29a      	uxth	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f47f aeb6 	bne.w	8002a8e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2220      	movs	r2, #32
 8002d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	e000      	b.n	8002d40 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002d3e:	2302      	movs	r3, #2
  }
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3728      	adds	r7, #40	@ 0x28
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	00010004 	.word	0x00010004

08002d4c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af02      	add	r7, sp, #8
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	4608      	mov	r0, r1
 8002d56:	4611      	mov	r1, r2
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	817b      	strh	r3, [r7, #10]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	813b      	strh	r3, [r7, #8]
 8002d62:	4613      	mov	r3, r2
 8002d64:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d74:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f000 f8c2 	bl	8002f1c <I2C_WaitOnFlagUntilTimeout>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00d      	beq.n	8002dba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dac:	d103      	bne.n	8002db6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002db4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e0aa      	b.n	8002f10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dba:	897b      	ldrh	r3, [r7, #10]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002dc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dcc:	6a3a      	ldr	r2, [r7, #32]
 8002dce:	4952      	ldr	r1, [pc, #328]	@ (8002f18 <I2C_RequestMemoryRead+0x1cc>)
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f000 f91d 	bl	8003010 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e097      	b.n	8002f10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002df8:	6a39      	ldr	r1, [r7, #32]
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 f9a8 	bl	8003150 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00d      	beq.n	8002e22 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d107      	bne.n	8002e1e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e076      	b.n	8002f10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e22:	88fb      	ldrh	r3, [r7, #6]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d105      	bne.n	8002e34 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e28:	893b      	ldrh	r3, [r7, #8]
 8002e2a:	b2da      	uxtb	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	611a      	str	r2, [r3, #16]
 8002e32:	e021      	b.n	8002e78 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e34:	893b      	ldrh	r3, [r7, #8]
 8002e36:	0a1b      	lsrs	r3, r3, #8
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e44:	6a39      	ldr	r1, [r7, #32]
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 f982 	bl	8003150 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d00d      	beq.n	8002e6e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d107      	bne.n	8002e6a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e050      	b.n	8002f10 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e6e:	893b      	ldrh	r3, [r7, #8]
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e7a:	6a39      	ldr	r1, [r7, #32]
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 f967 	bl	8003150 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00d      	beq.n	8002ea4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8c:	2b04      	cmp	r3, #4
 8002e8e:	d107      	bne.n	8002ea0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e9e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e035      	b.n	8002f10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eb2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 f82b 	bl	8002f1c <I2C_WaitOnFlagUntilTimeout>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00d      	beq.n	8002ee8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ed6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002eda:	d103      	bne.n	8002ee4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ee2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e013      	b.n	8002f10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ee8:	897b      	ldrh	r3, [r7, #10]
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	f043 0301 	orr.w	r3, r3, #1
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efa:	6a3a      	ldr	r2, [r7, #32]
 8002efc:	4906      	ldr	r1, [pc, #24]	@ (8002f18 <I2C_RequestMemoryRead+0x1cc>)
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 f886 	bl	8003010 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	00010002 	.word	0x00010002

08002f1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	603b      	str	r3, [r7, #0]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f2c:	e048      	b.n	8002fc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f34:	d044      	beq.n	8002fc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f36:	f7ff f8e3 	bl	8002100 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d302      	bcc.n	8002f4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d139      	bne.n	8002fc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	0c1b      	lsrs	r3, r3, #16
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d10d      	bne.n	8002f72 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	43da      	mvns	r2, r3
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	4013      	ands	r3, r2
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	bf0c      	ite	eq
 8002f68:	2301      	moveq	r3, #1
 8002f6a:	2300      	movne	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	461a      	mov	r2, r3
 8002f70:	e00c      	b.n	8002f8c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	43da      	mvns	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	bf0c      	ite	eq
 8002f84:	2301      	moveq	r3, #1
 8002f86:	2300      	movne	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d116      	bne.n	8002fc0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fac:	f043 0220 	orr.w	r2, r3, #32
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e023      	b.n	8003008 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	0c1b      	lsrs	r3, r3, #16
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d10d      	bne.n	8002fe6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	695b      	ldr	r3, [r3, #20]
 8002fd0:	43da      	mvns	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	bf0c      	ite	eq
 8002fdc:	2301      	moveq	r3, #1
 8002fde:	2300      	movne	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	e00c      	b.n	8003000 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	43da      	mvns	r2, r3
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	bf0c      	ite	eq
 8002ff8:	2301      	moveq	r3, #1
 8002ffa:	2300      	movne	r3, #0
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	461a      	mov	r2, r3
 8003000:	79fb      	ldrb	r3, [r7, #7]
 8003002:	429a      	cmp	r2, r3
 8003004:	d093      	beq.n	8002f2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003006:	2300      	movs	r3, #0
}
 8003008:	4618      	mov	r0, r3
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
 800301c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800301e:	e071      	b.n	8003104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800302a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800302e:	d123      	bne.n	8003078 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800303e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003048:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003064:	f043 0204 	orr.w	r2, r3, #4
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e067      	b.n	8003148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307e:	d041      	beq.n	8003104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003080:	f7ff f83e 	bl	8002100 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	429a      	cmp	r2, r3
 800308e:	d302      	bcc.n	8003096 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d136      	bne.n	8003104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	0c1b      	lsrs	r3, r3, #16
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b01      	cmp	r3, #1
 800309e:	d10c      	bne.n	80030ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	43da      	mvns	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	4013      	ands	r3, r2
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	bf14      	ite	ne
 80030b2:	2301      	movne	r3, #1
 80030b4:	2300      	moveq	r3, #0
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	e00b      	b.n	80030d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	43da      	mvns	r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	4013      	ands	r3, r2
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bf14      	ite	ne
 80030cc:	2301      	movne	r3, #1
 80030ce:	2300      	moveq	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d016      	beq.n	8003104 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f0:	f043 0220 	orr.w	r2, r3, #32
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e021      	b.n	8003148 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	0c1b      	lsrs	r3, r3, #16
 8003108:	b2db      	uxtb	r3, r3
 800310a:	2b01      	cmp	r3, #1
 800310c:	d10c      	bne.n	8003128 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	43da      	mvns	r2, r3
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	4013      	ands	r3, r2
 800311a:	b29b      	uxth	r3, r3
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf14      	ite	ne
 8003120:	2301      	movne	r3, #1
 8003122:	2300      	moveq	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	e00b      	b.n	8003140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	43da      	mvns	r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	4013      	ands	r3, r2
 8003134:	b29b      	uxth	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	bf14      	ite	ne
 800313a:	2301      	movne	r3, #1
 800313c:	2300      	moveq	r3, #0
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	f47f af6d 	bne.w	8003020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800315c:	e034      	b.n	80031c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 f89b 	bl	800329a <I2C_IsAcknowledgeFailed>
 8003164:	4603      	mov	r3, r0
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e034      	b.n	80031d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003174:	d028      	beq.n	80031c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003176:	f7fe ffc3 	bl	8002100 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	429a      	cmp	r2, r3
 8003184:	d302      	bcc.n	800318c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d11d      	bne.n	80031c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003196:	2b80      	cmp	r3, #128	@ 0x80
 8003198:	d016      	beq.n	80031c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b4:	f043 0220 	orr.w	r2, r3, #32
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e007      	b.n	80031d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031d2:	2b80      	cmp	r3, #128	@ 0x80
 80031d4:	d1c3      	bne.n	800315e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031d6:	2300      	movs	r3, #0
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031ec:	e049      	b.n	8003282 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695b      	ldr	r3, [r3, #20]
 80031f4:	f003 0310 	and.w	r3, r3, #16
 80031f8:	2b10      	cmp	r3, #16
 80031fa:	d119      	bne.n	8003230 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f06f 0210 	mvn.w	r2, #16
 8003204:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e030      	b.n	8003292 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003230:	f7fe ff66 	bl	8002100 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	429a      	cmp	r2, r3
 800323e:	d302      	bcc.n	8003246 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d11d      	bne.n	8003282 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003250:	2b40      	cmp	r3, #64	@ 0x40
 8003252:	d016      	beq.n	8003282 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2220      	movs	r2, #32
 800325e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	f043 0220 	orr.w	r2, r3, #32
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e007      	b.n	8003292 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800328c:	2b40      	cmp	r3, #64	@ 0x40
 800328e:	d1ae      	bne.n	80031ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800329a:	b480      	push	{r7}
 800329c:	b083      	sub	sp, #12
 800329e:	af00      	add	r7, sp, #0
 80032a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	695b      	ldr	r3, [r3, #20]
 80032a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032b0:	d11b      	bne.n	80032ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2220      	movs	r2, #32
 80032c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d6:	f043 0204 	orr.w	r2, r3, #4
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e000      	b.n	80032ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af02      	add	r7, sp, #8
 80032fe:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d101      	bne.n	800330a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e101      	b.n	800350e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d106      	bne.n	800332a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f006 f9c9 	bl	80096bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2203      	movs	r2, #3
 800332e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003338:	d102      	bne.n	8003340 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4618      	mov	r0, r3
 8003346:	f002 fe16 	bl	8005f76 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	7c1a      	ldrb	r2, [r3, #16]
 8003352:	f88d 2000 	strb.w	r2, [sp]
 8003356:	3304      	adds	r3, #4
 8003358:	cb0e      	ldmia	r3, {r1, r2, r3}
 800335a:	f002 fcf5 	bl	8005d48 <USB_CoreInit>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2202      	movs	r2, #2
 8003368:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e0ce      	b.n	800350e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2100      	movs	r1, #0
 8003376:	4618      	mov	r0, r3
 8003378:	f002 fe0e 	bl	8005f98 <USB_SetCurrentMode>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d005      	beq.n	800338e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2202      	movs	r2, #2
 8003386:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e0bf      	b.n	800350e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800338e:	2300      	movs	r3, #0
 8003390:	73fb      	strb	r3, [r7, #15]
 8003392:	e04a      	b.n	800342a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003394:	7bfa      	ldrb	r2, [r7, #15]
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	4613      	mov	r3, r2
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	4413      	add	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	440b      	add	r3, r1
 80033a2:	3315      	adds	r3, #21
 80033a4:	2201      	movs	r2, #1
 80033a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033a8:	7bfa      	ldrb	r2, [r7, #15]
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	4413      	add	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	3314      	adds	r3, #20
 80033b8:	7bfa      	ldrb	r2, [r7, #15]
 80033ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80033bc:	7bfa      	ldrb	r2, [r7, #15]
 80033be:	7bfb      	ldrb	r3, [r7, #15]
 80033c0:	b298      	uxth	r0, r3
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	4413      	add	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	332e      	adds	r3, #46	@ 0x2e
 80033d0:	4602      	mov	r2, r0
 80033d2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033d4:	7bfa      	ldrb	r2, [r7, #15]
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	4413      	add	r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	3318      	adds	r3, #24
 80033e4:	2200      	movs	r2, #0
 80033e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033e8:	7bfa      	ldrb	r2, [r7, #15]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	4413      	add	r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	331c      	adds	r3, #28
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033fc:	7bfa      	ldrb	r2, [r7, #15]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	3320      	adds	r3, #32
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003410:	7bfa      	ldrb	r2, [r7, #15]
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	3324      	adds	r3, #36	@ 0x24
 8003420:	2200      	movs	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003424:	7bfb      	ldrb	r3, [r7, #15]
 8003426:	3301      	adds	r3, #1
 8003428:	73fb      	strb	r3, [r7, #15]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	791b      	ldrb	r3, [r3, #4]
 800342e:	7bfa      	ldrb	r2, [r7, #15]
 8003430:	429a      	cmp	r2, r3
 8003432:	d3af      	bcc.n	8003394 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003434:	2300      	movs	r3, #0
 8003436:	73fb      	strb	r3, [r7, #15]
 8003438:	e044      	b.n	80034c4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800343a:	7bfa      	ldrb	r2, [r7, #15]
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	00db      	lsls	r3, r3, #3
 8003442:	4413      	add	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800344c:	2200      	movs	r2, #0
 800344e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003450:	7bfa      	ldrb	r2, [r7, #15]
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	00db      	lsls	r3, r3, #3
 8003458:	4413      	add	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003462:	7bfa      	ldrb	r2, [r7, #15]
 8003464:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003466:	7bfa      	ldrb	r2, [r7, #15]
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	4413      	add	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003478:	2200      	movs	r2, #0
 800347a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800347c:	7bfa      	ldrb	r2, [r7, #15]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	4413      	add	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003492:	7bfa      	ldrb	r2, [r7, #15]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	00db      	lsls	r3, r3, #3
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80034a4:	2200      	movs	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034a8:	7bfa      	ldrb	r2, [r7, #15]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	4413      	add	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034be:	7bfb      	ldrb	r3, [r7, #15]
 80034c0:	3301      	adds	r3, #1
 80034c2:	73fb      	strb	r3, [r7, #15]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	791b      	ldrb	r3, [r3, #4]
 80034c8:	7bfa      	ldrb	r2, [r7, #15]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d3b5      	bcc.n	800343a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	7c1a      	ldrb	r2, [r3, #16]
 80034d6:	f88d 2000 	strb.w	r2, [sp]
 80034da:	3304      	adds	r3, #4
 80034dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034de:	f002 fda7 	bl	8006030 <USB_DevInit>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e00c      	b.n	800350e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f003 fdf1 	bl	80070ee <USB_DevDisconnect>

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800352a:	2b01      	cmp	r3, #1
 800352c:	d101      	bne.n	8003532 <HAL_PCD_Start+0x1c>
 800352e:	2302      	movs	r3, #2
 8003530:	e022      	b.n	8003578 <HAL_PCD_Start+0x62>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2201      	movs	r2, #1
 8003536:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003542:	2b00      	cmp	r3, #0
 8003544:	d009      	beq.n	800355a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800354a:	2b01      	cmp	r3, #1
 800354c:	d105      	bne.n	800355a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003552:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f002 fcf8 	bl	8005f54 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f003 fd9f 	bl	80070ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003580:	b590      	push	{r4, r7, lr}
 8003582:	b08d      	sub	sp, #52	@ 0x34
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f003 fe5d 	bl	8007256 <USB_GetMode>
 800359c:	4603      	mov	r3, r0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f040 848c 	bne.w	8003ebc <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f003 fdc1 	bl	8007130 <USB_ReadInterrupts>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 8482 	beq.w	8003eba <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	0a1b      	lsrs	r3, r3, #8
 80035c0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f003 fdae 	bl	8007130 <USB_ReadInterrupts>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d107      	bne.n	80035ee <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	695a      	ldr	r2, [r3, #20]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f002 0202 	and.w	r2, r2, #2
 80035ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f003 fd9c 	bl	8007130 <USB_ReadInterrupts>
 80035f8:	4603      	mov	r3, r0
 80035fa:	f003 0310 	and.w	r3, r3, #16
 80035fe:	2b10      	cmp	r3, #16
 8003600:	d161      	bne.n	80036c6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	699a      	ldr	r2, [r3, #24]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0210 	bic.w	r2, r2, #16
 8003610:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	f003 020f 	and.w	r2, r3, #15
 800361e:	4613      	mov	r3, r2
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	4413      	add	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	4413      	add	r3, r2
 800362e:	3304      	adds	r3, #4
 8003630:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003632:	69bb      	ldr	r3, [r7, #24]
 8003634:	0c5b      	lsrs	r3, r3, #17
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	2b02      	cmp	r3, #2
 800363c:	d124      	bne.n	8003688 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8003644:	4013      	ands	r3, r2
 8003646:	2b00      	cmp	r3, #0
 8003648:	d035      	beq.n	80036b6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	091b      	lsrs	r3, r3, #4
 8003652:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003654:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003658:	b29b      	uxth	r3, r3
 800365a:	461a      	mov	r2, r3
 800365c:	6a38      	ldr	r0, [r7, #32]
 800365e:	f003 fbd3 	bl	8006e08 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	091b      	lsrs	r3, r3, #4
 800366a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800366e:	441a      	add	r2, r3
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	695a      	ldr	r2, [r3, #20]
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	091b      	lsrs	r3, r3, #4
 800367c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003680:	441a      	add	r2, r3
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	615a      	str	r2, [r3, #20]
 8003686:	e016      	b.n	80036b6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	0c5b      	lsrs	r3, r3, #17
 800368c:	f003 030f 	and.w	r3, r3, #15
 8003690:	2b06      	cmp	r3, #6
 8003692:	d110      	bne.n	80036b6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800369a:	2208      	movs	r2, #8
 800369c:	4619      	mov	r1, r3
 800369e:	6a38      	ldr	r0, [r7, #32]
 80036a0:	f003 fbb2 	bl	8006e08 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	695a      	ldr	r2, [r3, #20]
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	091b      	lsrs	r3, r3, #4
 80036ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036b0:	441a      	add	r2, r3
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	699a      	ldr	r2, [r3, #24]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f042 0210 	orr.w	r2, r2, #16
 80036c4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f003 fd30 	bl	8007130 <USB_ReadInterrupts>
 80036d0:	4603      	mov	r3, r0
 80036d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036d6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80036da:	f040 80a7 	bne.w	800382c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80036de:	2300      	movs	r3, #0
 80036e0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f003 fd35 	bl	8007156 <USB_ReadDevAllOutEpInterrupt>
 80036ec:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80036ee:	e099      	b.n	8003824 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80036f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 808e 	beq.w	8003818 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	4611      	mov	r1, r2
 8003706:	4618      	mov	r0, r3
 8003708:	f003 fd59 	bl	80071be <USB_ReadDevOutEPInterrupt>
 800370c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	d00c      	beq.n	8003732 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	4413      	add	r3, r2
 8003720:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003724:	461a      	mov	r2, r3
 8003726:	2301      	movs	r3, #1
 8003728:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800372a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 fea3 	bl	8004478 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f003 0308 	and.w	r3, r3, #8
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00c      	beq.n	8003756 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800373c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	4413      	add	r3, r2
 8003744:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003748:	461a      	mov	r2, r3
 800374a:	2308      	movs	r3, #8
 800374c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800374e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f000 ff79 	bl	8004648 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f003 0310 	and.w	r3, r3, #16
 800375c:	2b00      	cmp	r3, #0
 800375e:	d008      	beq.n	8003772 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	4413      	add	r3, r2
 8003768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800376c:	461a      	mov	r2, r3
 800376e:	2310      	movs	r3, #16
 8003770:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d030      	beq.n	80037de <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003784:	2b80      	cmp	r3, #128	@ 0x80
 8003786:	d109      	bne.n	800379c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	69fa      	ldr	r2, [r7, #28]
 8003792:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003796:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800379a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800379c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800379e:	4613      	mov	r3, r2
 80037a0:	00db      	lsls	r3, r3, #3
 80037a2:	4413      	add	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	4413      	add	r3, r2
 80037ae:	3304      	adds	r3, #4
 80037b0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	78db      	ldrb	r3, [r3, #3]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d108      	bne.n	80037cc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2200      	movs	r2, #0
 80037be:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80037c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	4619      	mov	r1, r3
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f006 f874 	bl	80098b4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80037cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ce:	015a      	lsls	r2, r3, #5
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	4413      	add	r3, r2
 80037d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037d8:	461a      	mov	r2, r3
 80037da:	2302      	movs	r3, #2
 80037dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f003 0320 	and.w	r3, r3, #32
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d008      	beq.n	80037fa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80037e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ea:	015a      	lsls	r2, r3, #5
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	4413      	add	r3, r2
 80037f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037f4:	461a      	mov	r2, r3
 80037f6:	2320      	movs	r3, #32
 80037f8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d009      	beq.n	8003818 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003806:	015a      	lsls	r2, r3, #5
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	4413      	add	r3, r2
 800380c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003810:	461a      	mov	r2, r3
 8003812:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003816:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800381a:	3301      	adds	r3, #1
 800381c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800381e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003820:	085b      	lsrs	r3, r3, #1
 8003822:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003826:	2b00      	cmp	r3, #0
 8003828:	f47f af62 	bne.w	80036f0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4618      	mov	r0, r3
 8003832:	f003 fc7d 	bl	8007130 <USB_ReadInterrupts>
 8003836:	4603      	mov	r3, r0
 8003838:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800383c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003840:	f040 80db 	bne.w	80039fa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f003 fc9e 	bl	800718a <USB_ReadDevAllInEpInterrupt>
 800384e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8003854:	e0cd      	b.n	80039f2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 80c2 	beq.w	80039e6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	4611      	mov	r1, r2
 800386c:	4618      	mov	r0, r3
 800386e:	f003 fcc4 	bl	80071fa <USB_ReadDevInEPInterrupt>
 8003872:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d057      	beq.n	800392e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800387e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003880:	f003 030f 	and.w	r3, r3, #15
 8003884:	2201      	movs	r2, #1
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003892:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	43db      	mvns	r3, r3
 8003898:	69f9      	ldr	r1, [r7, #28]
 800389a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800389e:	4013      	ands	r3, r2
 80038a0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80038a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038ae:	461a      	mov	r2, r3
 80038b0:	2301      	movs	r3, #1
 80038b2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	799b      	ldrb	r3, [r3, #6]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d132      	bne.n	8003922 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80038bc:	6879      	ldr	r1, [r7, #4]
 80038be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038c0:	4613      	mov	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	4413      	add	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	3320      	adds	r3, #32
 80038cc:	6819      	ldr	r1, [r3, #0]
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038d2:	4613      	mov	r3, r2
 80038d4:	00db      	lsls	r3, r3, #3
 80038d6:	4413      	add	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4403      	add	r3, r0
 80038dc:	331c      	adds	r3, #28
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4419      	add	r1, r3
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038e6:	4613      	mov	r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	4413      	add	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	4403      	add	r3, r0
 80038f0:	3320      	adds	r3, #32
 80038f2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80038f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d113      	bne.n	8003922 <HAL_PCD_IRQHandler+0x3a2>
 80038fa:	6879      	ldr	r1, [r7, #4]
 80038fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038fe:	4613      	mov	r3, r2
 8003900:	00db      	lsls	r3, r3, #3
 8003902:	4413      	add	r3, r2
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	440b      	add	r3, r1
 8003908:	3324      	adds	r3, #36	@ 0x24
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d108      	bne.n	8003922 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6818      	ldr	r0, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800391a:	461a      	mov	r2, r3
 800391c:	2101      	movs	r1, #1
 800391e:	f003 fccb 	bl	80072b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003924:	b2db      	uxtb	r3, r3
 8003926:	4619      	mov	r1, r3
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f005 ff48 	bl	80097be <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	f003 0308 	and.w	r3, r3, #8
 8003934:	2b00      	cmp	r3, #0
 8003936:	d008      	beq.n	800394a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393a:	015a      	lsls	r2, r3, #5
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	4413      	add	r3, r2
 8003940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003944:	461a      	mov	r2, r3
 8003946:	2308      	movs	r3, #8
 8003948:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f003 0310 	and.w	r3, r3, #16
 8003950:	2b00      	cmp	r3, #0
 8003952:	d008      	beq.n	8003966 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	4413      	add	r3, r2
 800395c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003960:	461a      	mov	r2, r3
 8003962:	2310      	movs	r3, #16
 8003964:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800396c:	2b00      	cmp	r3, #0
 800396e:	d008      	beq.n	8003982 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	4413      	add	r3, r2
 8003978:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800397c:	461a      	mov	r2, r3
 800397e:	2340      	movs	r3, #64	@ 0x40
 8003980:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d023      	beq.n	80039d4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800398c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800398e:	6a38      	ldr	r0, [r7, #32]
 8003990:	f002 fcb2 	bl	80062f8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003996:	4613      	mov	r3, r2
 8003998:	00db      	lsls	r3, r3, #3
 800399a:	4413      	add	r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	3310      	adds	r3, #16
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	4413      	add	r3, r2
 80039a4:	3304      	adds	r3, #4
 80039a6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	78db      	ldrb	r3, [r3, #3]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d108      	bne.n	80039c2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2200      	movs	r2, #0
 80039b4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80039b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	4619      	mov	r1, r3
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f005 ff8b 	bl	80098d8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80039c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039ce:	461a      	mov	r2, r3
 80039d0:	2302      	movs	r3, #2
 80039d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d003      	beq.n	80039e6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80039de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 fcbd 	bl	8004360 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80039e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039e8:	3301      	adds	r3, #1
 80039ea:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80039ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ee:	085b      	lsrs	r3, r3, #1
 80039f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80039f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f47f af2e 	bne.w	8003856 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4618      	mov	r0, r3
 8003a00:	f003 fb96 	bl	8007130 <USB_ReadInterrupts>
 8003a04:	4603      	mov	r3, r0
 8003a06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a0e:	d122      	bne.n	8003a56 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	69fa      	ldr	r2, [r7, #28]
 8003a1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a1e:	f023 0301 	bic.w	r3, r3, #1
 8003a22:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d108      	bne.n	8003a40 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003a36:	2100      	movs	r1, #0
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 fea3 	bl	8004784 <HAL_PCDEx_LPM_Callback>
 8003a3e:	e002      	b.n	8003a46 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f005 ff29 	bl	8009898 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	695a      	ldr	r2, [r3, #20]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003a54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f003 fb68 	bl	8007130 <USB_ReadInterrupts>
 8003a60:	4603      	mov	r3, r0
 8003a62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a6a:	d112      	bne.n	8003a92 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d102      	bne.n	8003a82 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f005 fee5 	bl	800984c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695a      	ldr	r2, [r3, #20]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003a90:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f003 fb4a 	bl	8007130 <USB_ReadInterrupts>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003aa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aa6:	f040 80b7 	bne.w	8003c18 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	69fa      	ldr	r2, [r7, #28]
 8003ab4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ab8:	f023 0301 	bic.w	r3, r3, #1
 8003abc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2110      	movs	r1, #16
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f002 fc17 	bl	80062f8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aca:	2300      	movs	r3, #0
 8003acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ace:	e046      	b.n	8003b5e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003adc:	461a      	mov	r2, r3
 8003ade:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003ae2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003af4:	0151      	lsls	r1, r2, #5
 8003af6:	69fa      	ldr	r2, [r7, #28]
 8003af8:	440a      	add	r2, r1
 8003afa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003afe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b02:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b10:	461a      	mov	r2, r3
 8003b12:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b16:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b28:	0151      	lsls	r1, r2, #5
 8003b2a:	69fa      	ldr	r2, [r7, #28]
 8003b2c:	440a      	add	r2, r1
 8003b2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b32:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b36:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b48:	0151      	lsls	r1, r2, #5
 8003b4a:	69fa      	ldr	r2, [r7, #28]
 8003b4c:	440a      	add	r2, r1
 8003b4e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b52:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003b56:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	791b      	ldrb	r3, [r3, #4]
 8003b62:	461a      	mov	r2, r3
 8003b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d3b2      	bcc.n	8003ad0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	69fa      	ldr	r2, [r7, #28]
 8003b74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b78:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003b7c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	7bdb      	ldrb	r3, [r3, #15]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d016      	beq.n	8003bb4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b90:	69fa      	ldr	r2, [r7, #28]
 8003b92:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b96:	f043 030b 	orr.w	r3, r3, #11
 8003b9a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba6:	69fa      	ldr	r2, [r7, #28]
 8003ba8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bac:	f043 030b 	orr.w	r3, r3, #11
 8003bb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bb2:	e015      	b.n	8003be0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bba:	695b      	ldr	r3, [r3, #20]
 8003bbc:	69fa      	ldr	r2, [r7, #28]
 8003bbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bc2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003bc6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003bca:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	69fa      	ldr	r2, [r7, #28]
 8003bd6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bda:	f043 030b 	orr.w	r3, r3, #11
 8003bde:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	69fa      	ldr	r2, [r7, #28]
 8003bea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bee:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003bf2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6818      	ldr	r0, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c02:	461a      	mov	r2, r3
 8003c04:	f003 fb58 	bl	80072b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	695a      	ldr	r2, [r3, #20]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003c16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f003 fa87 	bl	8007130 <USB_ReadInterrupts>
 8003c22:	4603      	mov	r3, r0
 8003c24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c2c:	d123      	bne.n	8003c76 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f003 fb1d 	bl	8007272 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f002 fbd4 	bl	80063ea <USB_GetDevSpeed>
 8003c42:	4603      	mov	r3, r0
 8003c44:	461a      	mov	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681c      	ldr	r4, [r3, #0]
 8003c4e:	f001 f9c9 	bl	8004fe4 <HAL_RCC_GetHCLKFreq>
 8003c52:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c58:	461a      	mov	r2, r3
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	f002 f8d8 	bl	8005e10 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f005 fdd4 	bl	800980e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695a      	ldr	r2, [r3, #20]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003c74:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f003 fa58 	bl	8007130 <USB_ReadInterrupts>
 8003c80:	4603      	mov	r3, r0
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d10a      	bne.n	8003ca0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f005 fdb1 	bl	80097f2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	695a      	ldr	r2, [r3, #20]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f002 0208 	and.w	r2, r2, #8
 8003c9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f003 fa43 	bl	8007130 <USB_ReadInterrupts>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb0:	2b80      	cmp	r3, #128	@ 0x80
 8003cb2:	d123      	bne.n	8003cfc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003cb4:	6a3b      	ldr	r3, [r7, #32]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cc4:	e014      	b.n	8003cf0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003cc6:	6879      	ldr	r1, [r7, #4]
 8003cc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cca:	4613      	mov	r3, r2
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	4413      	add	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d105      	bne.n	8003cea <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 fb0a 	bl	80042fe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cec:	3301      	adds	r3, #1
 8003cee:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	791b      	ldrb	r3, [r3, #4]
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d3e4      	bcc.n	8003cc6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f003 fa15 	bl	8007130 <USB_ReadInterrupts>
 8003d06:	4603      	mov	r3, r0
 8003d08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d10:	d13c      	bne.n	8003d8c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d12:	2301      	movs	r3, #1
 8003d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d16:	e02b      	b.n	8003d70 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d28:	6879      	ldr	r1, [r7, #4]
 8003d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	4413      	add	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	3318      	adds	r3, #24
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d115      	bne.n	8003d6a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003d3e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	da12      	bge.n	8003d6a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d48:	4613      	mov	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	440b      	add	r3, r1
 8003d52:	3317      	adds	r3, #23
 8003d54:	2201      	movs	r2, #1
 8003d56:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	4619      	mov	r1, r3
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 faca 	bl	80042fe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	791b      	ldrb	r3, [r3, #4]
 8003d74:	461a      	mov	r2, r3
 8003d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d3cd      	bcc.n	8003d18 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	695a      	ldr	r2, [r3, #20]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003d8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4618      	mov	r0, r3
 8003d92:	f003 f9cd 	bl	8007130 <USB_ReadInterrupts>
 8003d96:	4603      	mov	r3, r0
 8003d98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003da0:	d156      	bne.n	8003e50 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003da2:	2301      	movs	r3, #1
 8003da4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003da6:	e045      	b.n	8003e34 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d12e      	bne.n	8003e2e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003dd0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	da2b      	bge.n	8003e2e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003de2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d121      	bne.n	8003e2e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003dea:	6879      	ldr	r1, [r7, #4]
 8003dec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dee:	4613      	mov	r3, r2
 8003df0:	00db      	lsls	r3, r3, #3
 8003df2:	4413      	add	r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	440b      	add	r3, r1
 8003df8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003e00:	6a3b      	ldr	r3, [r7, #32]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003e08:	6a3b      	ldr	r3, [r7, #32]
 8003e0a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10a      	bne.n	8003e2e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	69fa      	ldr	r2, [r7, #28]
 8003e22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e2a:	6053      	str	r3, [r2, #4]
            break;
 8003e2c:	e008      	b.n	8003e40 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e30:	3301      	adds	r3, #1
 8003e32:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	791b      	ldrb	r3, [r3, #4]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d3b3      	bcc.n	8003da8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695a      	ldr	r2, [r3, #20]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003e4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4618      	mov	r0, r3
 8003e56:	f003 f96b 	bl	8007130 <USB_ReadInterrupts>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003e60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e64:	d10a      	bne.n	8003e7c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f005 fd48 	bl	80098fc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695a      	ldr	r2, [r3, #20]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003e7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f003 f955 	bl	8007130 <USB_ReadInterrupts>
 8003e86:	4603      	mov	r3, r0
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b04      	cmp	r3, #4
 8003e8e:	d115      	bne.n	8003ebc <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	f003 0304 	and.w	r3, r3, #4
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f005 fd38 	bl	8009918 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6859      	ldr	r1, [r3, #4]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	605a      	str	r2, [r3, #4]
 8003eb8:	e000      	b.n	8003ebc <HAL_PCD_IRQHandler+0x93c>
      return;
 8003eba:	bf00      	nop
    }
  }
}
 8003ebc:	3734      	adds	r7, #52	@ 0x34
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd90      	pop	{r4, r7, pc}

08003ec2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b082      	sub	sp, #8
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	460b      	mov	r3, r1
 8003ecc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_PCD_SetAddress+0x1a>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e012      	b.n	8003f02 <HAL_PCD_SetAddress+0x40>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	78fa      	ldrb	r2, [r7, #3]
 8003ee8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	78fa      	ldrb	r2, [r7, #3]
 8003ef0:	4611      	mov	r1, r2
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f003 f8b4 	bl	8007060 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b084      	sub	sp, #16
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
 8003f12:	4608      	mov	r0, r1
 8003f14:	4611      	mov	r1, r2
 8003f16:	461a      	mov	r2, r3
 8003f18:	4603      	mov	r3, r0
 8003f1a:	70fb      	strb	r3, [r7, #3]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	803b      	strh	r3, [r7, #0]
 8003f20:	4613      	mov	r3, r2
 8003f22:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003f24:	2300      	movs	r3, #0
 8003f26:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	da0f      	bge.n	8003f50 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f30:	78fb      	ldrb	r3, [r7, #3]
 8003f32:	f003 020f 	and.w	r2, r3, #15
 8003f36:	4613      	mov	r3, r2
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	3310      	adds	r3, #16
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	4413      	add	r3, r2
 8003f44:	3304      	adds	r3, #4
 8003f46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	705a      	strb	r2, [r3, #1]
 8003f4e:	e00f      	b.n	8003f70 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	f003 020f 	and.w	r2, r3, #15
 8003f56:	4613      	mov	r3, r2
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	4413      	add	r3, r2
 8003f66:	3304      	adds	r3, #4
 8003f68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003f70:	78fb      	ldrb	r3, [r7, #3]
 8003f72:	f003 030f 	and.w	r3, r3, #15
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003f7c:	883b      	ldrh	r3, [r7, #0]
 8003f7e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	78ba      	ldrb	r2, [r7, #2]
 8003f8a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	785b      	ldrb	r3, [r3, #1]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d004      	beq.n	8003f9e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f9e:	78bb      	ldrb	r3, [r7, #2]
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d102      	bne.n	8003faa <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d101      	bne.n	8003fb8 <HAL_PCD_EP_Open+0xae>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	e00e      	b.n	8003fd6 <HAL_PCD_EP_Open+0xcc>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68f9      	ldr	r1, [r7, #12]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f002 fa34 	bl	8006434 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003fd4:	7afb      	ldrb	r3, [r7, #11]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3710      	adds	r7, #16
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b084      	sub	sp, #16
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003fea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	da0f      	bge.n	8004012 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ff2:	78fb      	ldrb	r3, [r7, #3]
 8003ff4:	f003 020f 	and.w	r2, r3, #15
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	00db      	lsls	r3, r3, #3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	3310      	adds	r3, #16
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	4413      	add	r3, r2
 8004006:	3304      	adds	r3, #4
 8004008:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2201      	movs	r2, #1
 800400e:	705a      	strb	r2, [r3, #1]
 8004010:	e00f      	b.n	8004032 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004012:	78fb      	ldrb	r3, [r7, #3]
 8004014:	f003 020f 	and.w	r2, r3, #15
 8004018:	4613      	mov	r3, r2
 800401a:	00db      	lsls	r3, r3, #3
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	4413      	add	r3, r2
 8004028:	3304      	adds	r3, #4
 800402a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004032:	78fb      	ldrb	r3, [r7, #3]
 8004034:	f003 030f 	and.w	r3, r3, #15
 8004038:	b2da      	uxtb	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004044:	2b01      	cmp	r3, #1
 8004046:	d101      	bne.n	800404c <HAL_PCD_EP_Close+0x6e>
 8004048:	2302      	movs	r3, #2
 800404a:	e00e      	b.n	800406a <HAL_PCD_EP_Close+0x8c>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68f9      	ldr	r1, [r7, #12]
 800405a:	4618      	mov	r0, r3
 800405c:	f002 fa72 	bl	8006544 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004068:	2300      	movs	r3, #0
}
 800406a:	4618      	mov	r0, r3
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b086      	sub	sp, #24
 8004076:	af00      	add	r7, sp, #0
 8004078:	60f8      	str	r0, [r7, #12]
 800407a:	607a      	str	r2, [r7, #4]
 800407c:	603b      	str	r3, [r7, #0]
 800407e:	460b      	mov	r3, r1
 8004080:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004082:	7afb      	ldrb	r3, [r7, #11]
 8004084:	f003 020f 	and.w	r2, r3, #15
 8004088:	4613      	mov	r3, r2
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	4413      	add	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4413      	add	r3, r2
 8004098:	3304      	adds	r3, #4
 800409a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	2200      	movs	r2, #0
 80040ac:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	2200      	movs	r2, #0
 80040b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040b4:	7afb      	ldrb	r3, [r7, #11]
 80040b6:	f003 030f 	and.w	r3, r3, #15
 80040ba:	b2da      	uxtb	r2, r3
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	799b      	ldrb	r3, [r3, #6]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d102      	bne.n	80040ce <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6818      	ldr	r0, [r3, #0]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	799b      	ldrb	r3, [r3, #6]
 80040d6:	461a      	mov	r2, r3
 80040d8:	6979      	ldr	r1, [r7, #20]
 80040da:	f002 fb0f 	bl	80066fc <USB_EPStartXfer>

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	460b      	mov	r3, r1
 80040f2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80040f4:	78fb      	ldrb	r3, [r7, #3]
 80040f6:	f003 020f 	and.w	r2, r3, #15
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	4613      	mov	r3, r2
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	440b      	add	r3, r1
 8004106:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800410a:	681b      	ldr	r3, [r3, #0]
}
 800410c:	4618      	mov	r0, r3
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	607a      	str	r2, [r7, #4]
 8004122:	603b      	str	r3, [r7, #0]
 8004124:	460b      	mov	r3, r1
 8004126:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004128:	7afb      	ldrb	r3, [r7, #11]
 800412a:	f003 020f 	and.w	r2, r3, #15
 800412e:	4613      	mov	r3, r2
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	3310      	adds	r3, #16
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4413      	add	r3, r2
 800413c:	3304      	adds	r3, #4
 800413e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	683a      	ldr	r2, [r7, #0]
 800414a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	2200      	movs	r2, #0
 8004150:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	2201      	movs	r2, #1
 8004156:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004158:	7afb      	ldrb	r3, [r7, #11]
 800415a:	f003 030f 	and.w	r3, r3, #15
 800415e:	b2da      	uxtb	r2, r3
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	799b      	ldrb	r3, [r3, #6]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d102      	bne.n	8004172 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6818      	ldr	r0, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	799b      	ldrb	r3, [r3, #6]
 800417a:	461a      	mov	r2, r3
 800417c:	6979      	ldr	r1, [r7, #20]
 800417e:	f002 fabd 	bl	80066fc <USB_EPStartXfer>

  return HAL_OK;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3718      	adds	r7, #24
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	460b      	mov	r3, r1
 8004196:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004198:	78fb      	ldrb	r3, [r7, #3]
 800419a:	f003 030f 	and.w	r3, r3, #15
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	7912      	ldrb	r2, [r2, #4]
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d901      	bls.n	80041aa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e04f      	b.n	800424a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	da0f      	bge.n	80041d2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041b2:	78fb      	ldrb	r3, [r7, #3]
 80041b4:	f003 020f 	and.w	r2, r3, #15
 80041b8:	4613      	mov	r3, r2
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	4413      	add	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	3310      	adds	r3, #16
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	4413      	add	r3, r2
 80041c6:	3304      	adds	r3, #4
 80041c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2201      	movs	r2, #1
 80041ce:	705a      	strb	r2, [r3, #1]
 80041d0:	e00d      	b.n	80041ee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80041d2:	78fa      	ldrb	r2, [r7, #3]
 80041d4:	4613      	mov	r3, r2
 80041d6:	00db      	lsls	r3, r3, #3
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	4413      	add	r3, r2
 80041e4:	3304      	adds	r3, #4
 80041e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2201      	movs	r2, #1
 80041f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041f4:	78fb      	ldrb	r3, [r7, #3]
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004206:	2b01      	cmp	r3, #1
 8004208:	d101      	bne.n	800420e <HAL_PCD_EP_SetStall+0x82>
 800420a:	2302      	movs	r3, #2
 800420c:	e01d      	b.n	800424a <HAL_PCD_EP_SetStall+0xbe>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68f9      	ldr	r1, [r7, #12]
 800421c:	4618      	mov	r0, r3
 800421e:	f002 fe4b 	bl	8006eb8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004222:	78fb      	ldrb	r3, [r7, #3]
 8004224:	f003 030f 	and.w	r3, r3, #15
 8004228:	2b00      	cmp	r3, #0
 800422a:	d109      	bne.n	8004240 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6818      	ldr	r0, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	7999      	ldrb	r1, [r3, #6]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800423a:	461a      	mov	r2, r3
 800423c:	f003 f83c 	bl	80072b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	460b      	mov	r3, r1
 800425c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800425e:	78fb      	ldrb	r3, [r7, #3]
 8004260:	f003 030f 	and.w	r3, r3, #15
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	7912      	ldrb	r2, [r2, #4]
 8004268:	4293      	cmp	r3, r2
 800426a:	d901      	bls.n	8004270 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	e042      	b.n	80042f6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004270:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004274:	2b00      	cmp	r3, #0
 8004276:	da0f      	bge.n	8004298 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	f003 020f 	and.w	r2, r3, #15
 800427e:	4613      	mov	r3, r2
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	4413      	add	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	3310      	adds	r3, #16
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	4413      	add	r3, r2
 800428c:	3304      	adds	r3, #4
 800428e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2201      	movs	r2, #1
 8004294:	705a      	strb	r2, [r3, #1]
 8004296:	e00f      	b.n	80042b8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004298:	78fb      	ldrb	r3, [r7, #3]
 800429a:	f003 020f 	and.w	r2, r3, #15
 800429e:	4613      	mov	r3, r2
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	4413      	add	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	4413      	add	r3, r2
 80042ae:	3304      	adds	r3, #4
 80042b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042be:	78fb      	ldrb	r3, [r7, #3]
 80042c0:	f003 030f 	and.w	r3, r3, #15
 80042c4:	b2da      	uxtb	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d101      	bne.n	80042d8 <HAL_PCD_EP_ClrStall+0x86>
 80042d4:	2302      	movs	r3, #2
 80042d6:	e00e      	b.n	80042f6 <HAL_PCD_EP_ClrStall+0xa4>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68f9      	ldr	r1, [r7, #12]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f002 fe54 	bl	8006f94 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3710      	adds	r7, #16
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b084      	sub	sp, #16
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
 8004306:	460b      	mov	r3, r1
 8004308:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800430a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800430e:	2b00      	cmp	r3, #0
 8004310:	da0c      	bge.n	800432c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004312:	78fb      	ldrb	r3, [r7, #3]
 8004314:	f003 020f 	and.w	r2, r3, #15
 8004318:	4613      	mov	r3, r2
 800431a:	00db      	lsls	r3, r3, #3
 800431c:	4413      	add	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	3310      	adds	r3, #16
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	4413      	add	r3, r2
 8004326:	3304      	adds	r3, #4
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	e00c      	b.n	8004346 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	f003 020f 	and.w	r2, r3, #15
 8004332:	4613      	mov	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	4413      	add	r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	4413      	add	r3, r2
 8004342:	3304      	adds	r3, #4
 8004344:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68f9      	ldr	r1, [r7, #12]
 800434c:	4618      	mov	r0, r3
 800434e:	f002 fc73 	bl	8006c38 <USB_EPStopXfer>
 8004352:	4603      	mov	r3, r0
 8004354:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004356:	7afb      	ldrb	r3, [r7, #11]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3710      	adds	r7, #16
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b08a      	sub	sp, #40	@ 0x28
 8004364:	af02      	add	r7, sp, #8
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	4613      	mov	r3, r2
 8004378:	00db      	lsls	r3, r3, #3
 800437a:	4413      	add	r3, r2
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	3310      	adds	r3, #16
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	4413      	add	r3, r2
 8004384:	3304      	adds	r3, #4
 8004386:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	695a      	ldr	r2, [r3, #20]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	429a      	cmp	r2, r3
 8004392:	d901      	bls.n	8004398 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e06b      	b.n	8004470 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	69fa      	ldr	r2, [r7, #28]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d902      	bls.n	80043b4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	3303      	adds	r3, #3
 80043b8:	089b      	lsrs	r3, r3, #2
 80043ba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043bc:	e02a      	b.n	8004414 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	691a      	ldr	r2, [r3, #16]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	69fa      	ldr	r2, [r7, #28]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d902      	bls.n	80043da <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	3303      	adds	r3, #3
 80043de:	089b      	lsrs	r3, r3, #2
 80043e0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	68d9      	ldr	r1, [r3, #12]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80043f2:	9300      	str	r3, [sp, #0]
 80043f4:	4603      	mov	r3, r0
 80043f6:	6978      	ldr	r0, [r7, #20]
 80043f8:	f002 fcc8 	bl	8006d8c <USB_WritePacket>

    ep->xfer_buff  += len;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	441a      	add	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	695a      	ldr	r2, [r3, #20]
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	441a      	add	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004424:	69ba      	ldr	r2, [r7, #24]
 8004426:	429a      	cmp	r2, r3
 8004428:	d809      	bhi.n	800443e <PCD_WriteEmptyTxFifo+0xde>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	695a      	ldr	r2, [r3, #20]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004432:	429a      	cmp	r2, r3
 8004434:	d203      	bcs.n	800443e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1bf      	bne.n	80043be <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	691a      	ldr	r2, [r3, #16]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	429a      	cmp	r2, r3
 8004448:	d811      	bhi.n	800446e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	2201      	movs	r2, #1
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800445e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	43db      	mvns	r3, r3
 8004464:	6939      	ldr	r1, [r7, #16]
 8004466:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800446a:	4013      	ands	r3, r2
 800446c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3720      	adds	r7, #32
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}

08004478 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	333c      	adds	r3, #60	@ 0x3c
 8004490:	3304      	adds	r3, #4
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	015a      	lsls	r2, r3, #5
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	4413      	add	r3, r2
 800449e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	799b      	ldrb	r3, [r3, #6]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d17b      	bne.n	80045a6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d015      	beq.n	80044e4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	4a61      	ldr	r2, [pc, #388]	@ (8004640 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	f240 80b9 	bls.w	8004634 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	f000 80b3 	beq.w	8004634 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044da:	461a      	mov	r2, r3
 80044dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044e0:	6093      	str	r3, [r2, #8]
 80044e2:	e0a7      	b.n	8004634 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	f003 0320 	and.w	r3, r3, #32
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d009      	beq.n	8004502 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044fa:	461a      	mov	r2, r3
 80044fc:	2320      	movs	r3, #32
 80044fe:	6093      	str	r3, [r2, #8]
 8004500:	e098      	b.n	8004634 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004508:	2b00      	cmp	r3, #0
 800450a:	f040 8093 	bne.w	8004634 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	4a4b      	ldr	r2, [pc, #300]	@ (8004640 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d90f      	bls.n	8004536 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00a      	beq.n	8004536 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800452c:	461a      	mov	r2, r3
 800452e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004532:	6093      	str	r3, [r2, #8]
 8004534:	e07e      	b.n	8004634 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	4613      	mov	r3, r2
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	4413      	add	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	4413      	add	r3, r2
 8004548:	3304      	adds	r3, #4
 800454a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6a1a      	ldr	r2, [r3, #32]
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	0159      	lsls	r1, r3, #5
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	440b      	add	r3, r1
 8004558:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004562:	1ad2      	subs	r2, r2, r3
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d114      	bne.n	8004598 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d109      	bne.n	800458a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6818      	ldr	r0, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004580:	461a      	mov	r2, r3
 8004582:	2101      	movs	r1, #1
 8004584:	f002 fe98 	bl	80072b8 <USB_EP0_OutStart>
 8004588:	e006      	b.n	8004598 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	68da      	ldr	r2, [r3, #12]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	441a      	add	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	b2db      	uxtb	r3, r3
 800459c:	4619      	mov	r1, r3
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f005 f8f2 	bl	8009788 <HAL_PCD_DataOutStageCallback>
 80045a4:	e046      	b.n	8004634 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	4a26      	ldr	r2, [pc, #152]	@ (8004644 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d124      	bne.n	80045f8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	015a      	lsls	r2, r3, #5
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	4413      	add	r3, r2
 80045c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045c4:	461a      	mov	r2, r3
 80045c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045ca:	6093      	str	r3, [r2, #8]
 80045cc:	e032      	b.n	8004634 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d008      	beq.n	80045ea <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	015a      	lsls	r2, r3, #5
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	4413      	add	r3, r2
 80045e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045e4:	461a      	mov	r2, r3
 80045e6:	2320      	movs	r3, #32
 80045e8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	4619      	mov	r1, r3
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f005 f8c9 	bl	8009788 <HAL_PCD_DataOutStageCallback>
 80045f6:	e01d      	b.n	8004634 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d114      	bne.n	8004628 <PCD_EP_OutXfrComplete_int+0x1b0>
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	4613      	mov	r3, r2
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	4413      	add	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	440b      	add	r3, r1
 800460c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d108      	bne.n	8004628 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004620:	461a      	mov	r2, r3
 8004622:	2100      	movs	r1, #0
 8004624:	f002 fe48 	bl	80072b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	b2db      	uxtb	r3, r3
 800462c:	4619      	mov	r1, r3
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f005 f8aa 	bl	8009788 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3720      	adds	r7, #32
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	4f54300a 	.word	0x4f54300a
 8004644:	4f54310a 	.word	0x4f54310a

08004648 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
 8004650:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	333c      	adds	r3, #60	@ 0x3c
 8004660:	3304      	adds	r3, #4
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	4413      	add	r3, r2
 800466e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	4a15      	ldr	r2, [pc, #84]	@ (80046d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d90e      	bls.n	800469c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004684:	2b00      	cmp	r3, #0
 8004686:	d009      	beq.n	800469c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	4413      	add	r3, r2
 8004690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004694:	461a      	mov	r2, r3
 8004696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800469a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f005 f861 	bl	8009764 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4a0a      	ldr	r2, [pc, #40]	@ (80046d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d90c      	bls.n	80046c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	799b      	ldrb	r3, [r3, #6]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d108      	bne.n	80046c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80046bc:	461a      	mov	r2, r3
 80046be:	2101      	movs	r1, #1
 80046c0:	f002 fdfa 	bl	80072b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	4f54300a 	.word	0x4f54300a

080046d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	70fb      	strb	r3, [r7, #3]
 80046e0:	4613      	mov	r3, r2
 80046e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80046ec:	78fb      	ldrb	r3, [r7, #3]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d107      	bne.n	8004702 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80046f2:	883b      	ldrh	r3, [r7, #0]
 80046f4:	0419      	lsls	r1, r3, #16
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68ba      	ldr	r2, [r7, #8]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	629a      	str	r2, [r3, #40]	@ 0x28
 8004700:	e028      	b.n	8004754 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004708:	0c1b      	lsrs	r3, r3, #16
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	4413      	add	r3, r2
 800470e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004710:	2300      	movs	r3, #0
 8004712:	73fb      	strb	r3, [r7, #15]
 8004714:	e00d      	b.n	8004732 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	7bfb      	ldrb	r3, [r7, #15]
 800471c:	3340      	adds	r3, #64	@ 0x40
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	0c1b      	lsrs	r3, r3, #16
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	4413      	add	r3, r2
 800472a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800472c:	7bfb      	ldrb	r3, [r7, #15]
 800472e:	3301      	adds	r3, #1
 8004730:	73fb      	strb	r3, [r7, #15]
 8004732:	7bfa      	ldrb	r2, [r7, #15]
 8004734:	78fb      	ldrb	r3, [r7, #3]
 8004736:	3b01      	subs	r3, #1
 8004738:	429a      	cmp	r2, r3
 800473a:	d3ec      	bcc.n	8004716 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800473c:	883b      	ldrh	r3, [r7, #0]
 800473e:	0418      	lsls	r0, r3, #16
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6819      	ldr	r1, [r3, #0]
 8004744:	78fb      	ldrb	r3, [r7, #3]
 8004746:	3b01      	subs	r3, #1
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	4302      	orrs	r2, r0
 800474c:	3340      	adds	r3, #64	@ 0x40
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004762:	b480      	push	{r7}
 8004764:	b083      	sub	sp, #12
 8004766:	af00      	add	r7, sp, #0
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	460b      	mov	r3, r1
 800476c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	887a      	ldrh	r2, [r7, #2]
 8004774:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	460b      	mov	r3, r1
 800478e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d101      	bne.n	80047ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e267      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d075      	beq.n	80048a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80047ba:	4b88      	ldr	r3, [pc, #544]	@ (80049dc <HAL_RCC_OscConfig+0x240>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 030c 	and.w	r3, r3, #12
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d00c      	beq.n	80047e0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047c6:	4b85      	ldr	r3, [pc, #532]	@ (80049dc <HAL_RCC_OscConfig+0x240>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80047ce:	2b08      	cmp	r3, #8
 80047d0:	d112      	bne.n	80047f8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047d2:	4b82      	ldr	r3, [pc, #520]	@ (80049dc <HAL_RCC_OscConfig+0x240>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047da:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047de:	d10b      	bne.n	80047f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047e0:	4b7e      	ldr	r3, [pc, #504]	@ (80049dc <HAL_RCC_OscConfig+0x240>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d05b      	beq.n	80048a4 <HAL_RCC_OscConfig+0x108>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d157      	bne.n	80048a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e242      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004800:	d106      	bne.n	8004810 <HAL_RCC_OscConfig+0x74>
 8004802:	4b76      	ldr	r3, [pc, #472]	@ (80049dc <HAL_RCC_OscConfig+0x240>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a75      	ldr	r2, [pc, #468]	@ (80049dc <HAL_RCC_OscConfig+0x240>)
 8004808:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	e01d      	b.n	800484c <HAL_RCC_OscConfig+0xb0>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004818:	d10c      	bne.n	8004834 <HAL_RCC_OscConfig+0x98>
 800481a:	4b70      	ldr	r3, [pc, #448]	@ (80049dc <HAL_RCC_OscConfig+0x240>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a6f      	ldr	r2, [pc, #444]	@ (80049dc <HAL_RCC_OscConfig+0x240>)
 8004820:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	4b6d      	ldr	r3, [pc, #436]	@ (80049dc <HAL_RCC_OscConfig+0x240>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a6c      	ldr	r2, [pc, #432]	@ (80049dc <HAL_RCC_OscConfig+0x240>)
 800482c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004830:	6013      	str	r3, [r2, #0]
 8004832:	e00b      	b.n	800484c <HAL_RCC_OscConfig+0xb0>
 8004834:	4b69      	ldr	r3, [pc, #420]	@ (80049dc <HAL_RCC_OscConfig+0x240>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a68      	ldr	r2, [pc, #416]	@ (80049dc <HAL_RCC_OscConfig+0x240>)
 800483a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800483e:	6013      	str	r3, [r2, #0]
 8004840:	4b66      	ldr	r3, [pc, #408]	@ (80049dc <HAL_RCC_OscConfig+0x240>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a65      	ldr	r2, [pc, #404]	@ (80049dc <HAL_RCC_OscConfig+0x240>)
 8004846:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800484a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d013      	beq.n	800487c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004854:	f7fd fc54 	bl	8002100 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800485c:	f7fd fc50 	bl	8002100 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b64      	cmp	r3, #100	@ 0x64
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e207      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800486e:	4b5b      	ldr	r3, [pc, #364]	@ (80049dc <HAL_RCC_OscConfig+0x240>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0f0      	beq.n	800485c <HAL_RCC_OscConfig+0xc0>
 800487a:	e014      	b.n	80048a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800487c:	f7fd fc40 	bl	8002100 <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004884:	f7fd fc3c 	bl	8002100 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b64      	cmp	r3, #100	@ 0x64
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e1f3      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004896:	4b51      	ldr	r3, [pc, #324]	@ (80049dc <HAL_RCC_OscConfig+0x240>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1f0      	bne.n	8004884 <HAL_RCC_OscConfig+0xe8>
 80048a2:	e000      	b.n	80048a6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d063      	beq.n	800497a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80048b2:	4b4a      	ldr	r3, [pc, #296]	@ (80049dc <HAL_RCC_OscConfig+0x240>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 030c 	and.w	r3, r3, #12
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00b      	beq.n	80048d6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048be:	4b47      	ldr	r3, [pc, #284]	@ (80049dc <HAL_RCC_OscConfig+0x240>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80048c6:	2b08      	cmp	r3, #8
 80048c8:	d11c      	bne.n	8004904 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048ca:	4b44      	ldr	r3, [pc, #272]	@ (80049dc <HAL_RCC_OscConfig+0x240>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d116      	bne.n	8004904 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048d6:	4b41      	ldr	r3, [pc, #260]	@ (80049dc <HAL_RCC_OscConfig+0x240>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d005      	beq.n	80048ee <HAL_RCC_OscConfig+0x152>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d001      	beq.n	80048ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e1c7      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ee:	4b3b      	ldr	r3, [pc, #236]	@ (80049dc <HAL_RCC_OscConfig+0x240>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	4937      	ldr	r1, [pc, #220]	@ (80049dc <HAL_RCC_OscConfig+0x240>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004902:	e03a      	b.n	800497a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d020      	beq.n	800494e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800490c:	4b34      	ldr	r3, [pc, #208]	@ (80049e0 <HAL_RCC_OscConfig+0x244>)
 800490e:	2201      	movs	r2, #1
 8004910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004912:	f7fd fbf5 	bl	8002100 <HAL_GetTick>
 8004916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004918:	e008      	b.n	800492c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800491a:	f7fd fbf1 	bl	8002100 <HAL_GetTick>
 800491e:	4602      	mov	r2, r0
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	1ad3      	subs	r3, r2, r3
 8004924:	2b02      	cmp	r3, #2
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e1a8      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800492c:	4b2b      	ldr	r3, [pc, #172]	@ (80049dc <HAL_RCC_OscConfig+0x240>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d0f0      	beq.n	800491a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004938:	4b28      	ldr	r3, [pc, #160]	@ (80049dc <HAL_RCC_OscConfig+0x240>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	4925      	ldr	r1, [pc, #148]	@ (80049dc <HAL_RCC_OscConfig+0x240>)
 8004948:	4313      	orrs	r3, r2
 800494a:	600b      	str	r3, [r1, #0]
 800494c:	e015      	b.n	800497a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800494e:	4b24      	ldr	r3, [pc, #144]	@ (80049e0 <HAL_RCC_OscConfig+0x244>)
 8004950:	2200      	movs	r2, #0
 8004952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004954:	f7fd fbd4 	bl	8002100 <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800495c:	f7fd fbd0 	bl	8002100 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b02      	cmp	r3, #2
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e187      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800496e:	4b1b      	ldr	r3, [pc, #108]	@ (80049dc <HAL_RCC_OscConfig+0x240>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0302 	and.w	r3, r3, #2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1f0      	bne.n	800495c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0308 	and.w	r3, r3, #8
 8004982:	2b00      	cmp	r3, #0
 8004984:	d036      	beq.n	80049f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d016      	beq.n	80049bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800498e:	4b15      	ldr	r3, [pc, #84]	@ (80049e4 <HAL_RCC_OscConfig+0x248>)
 8004990:	2201      	movs	r2, #1
 8004992:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004994:	f7fd fbb4 	bl	8002100 <HAL_GetTick>
 8004998:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800499a:	e008      	b.n	80049ae <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800499c:	f7fd fbb0 	bl	8002100 <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	1ad3      	subs	r3, r2, r3
 80049a6:	2b02      	cmp	r3, #2
 80049a8:	d901      	bls.n	80049ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049aa:	2303      	movs	r3, #3
 80049ac:	e167      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049ae:	4b0b      	ldr	r3, [pc, #44]	@ (80049dc <HAL_RCC_OscConfig+0x240>)
 80049b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049b2:	f003 0302 	and.w	r3, r3, #2
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d0f0      	beq.n	800499c <HAL_RCC_OscConfig+0x200>
 80049ba:	e01b      	b.n	80049f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049bc:	4b09      	ldr	r3, [pc, #36]	@ (80049e4 <HAL_RCC_OscConfig+0x248>)
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049c2:	f7fd fb9d 	bl	8002100 <HAL_GetTick>
 80049c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049c8:	e00e      	b.n	80049e8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049ca:	f7fd fb99 	bl	8002100 <HAL_GetTick>
 80049ce:	4602      	mov	r2, r0
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	1ad3      	subs	r3, r2, r3
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d907      	bls.n	80049e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e150      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
 80049dc:	40023800 	.word	0x40023800
 80049e0:	42470000 	.word	0x42470000
 80049e4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049e8:	4b88      	ldr	r3, [pc, #544]	@ (8004c0c <HAL_RCC_OscConfig+0x470>)
 80049ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1ea      	bne.n	80049ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0304 	and.w	r3, r3, #4
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f000 8097 	beq.w	8004b30 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a02:	2300      	movs	r3, #0
 8004a04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a06:	4b81      	ldr	r3, [pc, #516]	@ (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10f      	bne.n	8004a32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a12:	2300      	movs	r3, #0
 8004a14:	60bb      	str	r3, [r7, #8]
 8004a16:	4b7d      	ldr	r3, [pc, #500]	@ (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1a:	4a7c      	ldr	r2, [pc, #496]	@ (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a22:	4b7a      	ldr	r3, [pc, #488]	@ (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a2a:	60bb      	str	r3, [r7, #8]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a32:	4b77      	ldr	r3, [pc, #476]	@ (8004c10 <HAL_RCC_OscConfig+0x474>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d118      	bne.n	8004a70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a3e:	4b74      	ldr	r3, [pc, #464]	@ (8004c10 <HAL_RCC_OscConfig+0x474>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a73      	ldr	r2, [pc, #460]	@ (8004c10 <HAL_RCC_OscConfig+0x474>)
 8004a44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a4a:	f7fd fb59 	bl	8002100 <HAL_GetTick>
 8004a4e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a50:	e008      	b.n	8004a64 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a52:	f7fd fb55 	bl	8002100 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d901      	bls.n	8004a64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e10c      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a64:	4b6a      	ldr	r3, [pc, #424]	@ (8004c10 <HAL_RCC_OscConfig+0x474>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d0f0      	beq.n	8004a52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d106      	bne.n	8004a86 <HAL_RCC_OscConfig+0x2ea>
 8004a78:	4b64      	ldr	r3, [pc, #400]	@ (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a7c:	4a63      	ldr	r2, [pc, #396]	@ (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004a7e:	f043 0301 	orr.w	r3, r3, #1
 8004a82:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a84:	e01c      	b.n	8004ac0 <HAL_RCC_OscConfig+0x324>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	2b05      	cmp	r3, #5
 8004a8c:	d10c      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x30c>
 8004a8e:	4b5f      	ldr	r3, [pc, #380]	@ (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a92:	4a5e      	ldr	r2, [pc, #376]	@ (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004a94:	f043 0304 	orr.w	r3, r3, #4
 8004a98:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a9a:	4b5c      	ldr	r3, [pc, #368]	@ (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a9e:	4a5b      	ldr	r2, [pc, #364]	@ (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004aa0:	f043 0301 	orr.w	r3, r3, #1
 8004aa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aa6:	e00b      	b.n	8004ac0 <HAL_RCC_OscConfig+0x324>
 8004aa8:	4b58      	ldr	r3, [pc, #352]	@ (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aac:	4a57      	ldr	r2, [pc, #348]	@ (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004aae:	f023 0301 	bic.w	r3, r3, #1
 8004ab2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ab4:	4b55      	ldr	r3, [pc, #340]	@ (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004ab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ab8:	4a54      	ldr	r2, [pc, #336]	@ (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004aba:	f023 0304 	bic.w	r3, r3, #4
 8004abe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d015      	beq.n	8004af4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac8:	f7fd fb1a 	bl	8002100 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ace:	e00a      	b.n	8004ae6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ad0:	f7fd fb16 	bl	8002100 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e0cb      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ae6:	4b49      	ldr	r3, [pc, #292]	@ (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0ee      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x334>
 8004af2:	e014      	b.n	8004b1e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004af4:	f7fd fb04 	bl	8002100 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004afa:	e00a      	b.n	8004b12 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004afc:	f7fd fb00 	bl	8002100 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d901      	bls.n	8004b12 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e0b5      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b12:	4b3e      	ldr	r3, [pc, #248]	@ (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1ee      	bne.n	8004afc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b1e:	7dfb      	ldrb	r3, [r7, #23]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d105      	bne.n	8004b30 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b24:	4b39      	ldr	r3, [pc, #228]	@ (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b28:	4a38      	ldr	r2, [pc, #224]	@ (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004b2a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b2e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 80a1 	beq.w	8004c7c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b3a:	4b34      	ldr	r3, [pc, #208]	@ (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f003 030c 	and.w	r3, r3, #12
 8004b42:	2b08      	cmp	r3, #8
 8004b44:	d05c      	beq.n	8004c00 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	699b      	ldr	r3, [r3, #24]
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d141      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b4e:	4b31      	ldr	r3, [pc, #196]	@ (8004c14 <HAL_RCC_OscConfig+0x478>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b54:	f7fd fad4 	bl	8002100 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b5c:	f7fd fad0 	bl	8002100 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e087      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b6e:	4b27      	ldr	r3, [pc, #156]	@ (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f0      	bne.n	8004b5c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	69da      	ldr	r2, [r3, #28]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b88:	019b      	lsls	r3, r3, #6
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b90:	085b      	lsrs	r3, r3, #1
 8004b92:	3b01      	subs	r3, #1
 8004b94:	041b      	lsls	r3, r3, #16
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b9c:	061b      	lsls	r3, r3, #24
 8004b9e:	491b      	ldr	r1, [pc, #108]	@ (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8004c14 <HAL_RCC_OscConfig+0x478>)
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004baa:	f7fd faa9 	bl	8002100 <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb2:	f7fd faa5 	bl	8002100 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e05c      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bc4:	4b11      	ldr	r3, [pc, #68]	@ (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0f0      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x416>
 8004bd0:	e054      	b.n	8004c7c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bd2:	4b10      	ldr	r3, [pc, #64]	@ (8004c14 <HAL_RCC_OscConfig+0x478>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd8:	f7fd fa92 	bl	8002100 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004be0:	f7fd fa8e 	bl	8002100 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e045      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bf2:	4b06      	ldr	r3, [pc, #24]	@ (8004c0c <HAL_RCC_OscConfig+0x470>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1f0      	bne.n	8004be0 <HAL_RCC_OscConfig+0x444>
 8004bfe:	e03d      	b.n	8004c7c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d107      	bne.n	8004c18 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e038      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	40007000 	.word	0x40007000
 8004c14:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c18:	4b1b      	ldr	r3, [pc, #108]	@ (8004c88 <HAL_RCC_OscConfig+0x4ec>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d028      	beq.n	8004c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d121      	bne.n	8004c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d11a      	bne.n	8004c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004c48:	4013      	ands	r3, r2
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c4e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d111      	bne.n	8004c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c5e:	085b      	lsrs	r3, r3, #1
 8004c60:	3b01      	subs	r3, #1
 8004c62:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d107      	bne.n	8004c78 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c72:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d001      	beq.n	8004c7c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e000      	b.n	8004c7e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40023800 	.word	0x40023800

08004c8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e0cc      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ca0:	4b68      	ldr	r3, [pc, #416]	@ (8004e44 <HAL_RCC_ClockConfig+0x1b8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0307 	and.w	r3, r3, #7
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d90c      	bls.n	8004cc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cae:	4b65      	ldr	r3, [pc, #404]	@ (8004e44 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb0:	683a      	ldr	r2, [r7, #0]
 8004cb2:	b2d2      	uxtb	r2, r2
 8004cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cb6:	4b63      	ldr	r3, [pc, #396]	@ (8004e44 <HAL_RCC_ClockConfig+0x1b8>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0307 	and.w	r3, r3, #7
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d001      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e0b8      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d020      	beq.n	8004d16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d005      	beq.n	8004cec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ce0:	4b59      	ldr	r3, [pc, #356]	@ (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	4a58      	ldr	r2, [pc, #352]	@ (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004cea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0308 	and.w	r3, r3, #8
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d005      	beq.n	8004d04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cf8:	4b53      	ldr	r3, [pc, #332]	@ (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	4a52      	ldr	r2, [pc, #328]	@ (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004cfe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004d02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d04:	4b50      	ldr	r3, [pc, #320]	@ (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	494d      	ldr	r1, [pc, #308]	@ (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d044      	beq.n	8004dac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d107      	bne.n	8004d3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d2a:	4b47      	ldr	r3, [pc, #284]	@ (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d119      	bne.n	8004d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e07f      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d003      	beq.n	8004d4a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	d107      	bne.n	8004d5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d4a:	4b3f      	ldr	r3, [pc, #252]	@ (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d109      	bne.n	8004d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e06f      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d5a:	4b3b      	ldr	r3, [pc, #236]	@ (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e067      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d6a:	4b37      	ldr	r3, [pc, #220]	@ (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f023 0203 	bic.w	r2, r3, #3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	4934      	ldr	r1, [pc, #208]	@ (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d7c:	f7fd f9c0 	bl	8002100 <HAL_GetTick>
 8004d80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d82:	e00a      	b.n	8004d9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d84:	f7fd f9bc 	bl	8002100 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e04f      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d9a:	4b2b      	ldr	r3, [pc, #172]	@ (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 020c 	and.w	r2, r3, #12
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d1eb      	bne.n	8004d84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004dac:	4b25      	ldr	r3, [pc, #148]	@ (8004e44 <HAL_RCC_ClockConfig+0x1b8>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0307 	and.w	r3, r3, #7
 8004db4:	683a      	ldr	r2, [r7, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d20c      	bcs.n	8004dd4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dba:	4b22      	ldr	r3, [pc, #136]	@ (8004e44 <HAL_RCC_ClockConfig+0x1b8>)
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc2:	4b20      	ldr	r3, [pc, #128]	@ (8004e44 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0307 	and.w	r3, r3, #7
 8004dca:	683a      	ldr	r2, [r7, #0]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d001      	beq.n	8004dd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e032      	b.n	8004e3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d008      	beq.n	8004df2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004de0:	4b19      	ldr	r3, [pc, #100]	@ (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	4916      	ldr	r1, [pc, #88]	@ (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0308 	and.w	r3, r3, #8
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d009      	beq.n	8004e12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004dfe:	4b12      	ldr	r3, [pc, #72]	@ (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	691b      	ldr	r3, [r3, #16]
 8004e0a:	00db      	lsls	r3, r3, #3
 8004e0c:	490e      	ldr	r1, [pc, #56]	@ (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e12:	f000 f821 	bl	8004e58 <HAL_RCC_GetSysClockFreq>
 8004e16:	4602      	mov	r2, r0
 8004e18:	4b0b      	ldr	r3, [pc, #44]	@ (8004e48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	091b      	lsrs	r3, r3, #4
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	490a      	ldr	r1, [pc, #40]	@ (8004e4c <HAL_RCC_ClockConfig+0x1c0>)
 8004e24:	5ccb      	ldrb	r3, [r1, r3]
 8004e26:	fa22 f303 	lsr.w	r3, r2, r3
 8004e2a:	4a09      	ldr	r2, [pc, #36]	@ (8004e50 <HAL_RCC_ClockConfig+0x1c4>)
 8004e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004e2e:	4b09      	ldr	r3, [pc, #36]	@ (8004e54 <HAL_RCC_ClockConfig+0x1c8>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fd f83c 	bl	8001eb0 <HAL_InitTick>

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	40023c00 	.word	0x40023c00
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	0800a008 	.word	0x0800a008
 8004e50:	20000084 	.word	0x20000084
 8004e54:	20000088 	.word	0x20000088

08004e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e5c:	b090      	sub	sp, #64	@ 0x40
 8004e5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e70:	4b59      	ldr	r3, [pc, #356]	@ (8004fd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f003 030c 	and.w	r3, r3, #12
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d00d      	beq.n	8004e98 <HAL_RCC_GetSysClockFreq+0x40>
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	f200 80a1 	bhi.w	8004fc4 <HAL_RCC_GetSysClockFreq+0x16c>
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d002      	beq.n	8004e8c <HAL_RCC_GetSysClockFreq+0x34>
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d003      	beq.n	8004e92 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e8a:	e09b      	b.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e8c:	4b53      	ldr	r3, [pc, #332]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0x184>)
 8004e8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e90:	e09b      	b.n	8004fca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e92:	4b53      	ldr	r3, [pc, #332]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004e94:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004e96:	e098      	b.n	8004fca <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e98:	4b4f      	ldr	r3, [pc, #316]	@ (8004fd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ea0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ea2:	4b4d      	ldr	r3, [pc, #308]	@ (8004fd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d028      	beq.n	8004f00 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eae:	4b4a      	ldr	r3, [pc, #296]	@ (8004fd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	099b      	lsrs	r3, r3, #6
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	623b      	str	r3, [r7, #32]
 8004eb8:	627a      	str	r2, [r7, #36]	@ 0x24
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	4b47      	ldr	r3, [pc, #284]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ec4:	fb03 f201 	mul.w	r2, r3, r1
 8004ec8:	2300      	movs	r3, #0
 8004eca:	fb00 f303 	mul.w	r3, r0, r3
 8004ece:	4413      	add	r3, r2
 8004ed0:	4a43      	ldr	r2, [pc, #268]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004ed2:	fba0 1202 	umull	r1, r2, r0, r2
 8004ed6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ed8:	460a      	mov	r2, r1
 8004eda:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004edc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ede:	4413      	add	r3, r2
 8004ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	61bb      	str	r3, [r7, #24]
 8004ee8:	61fa      	str	r2, [r7, #28]
 8004eea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004eee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004ef2:	f7fb fe2d 	bl	8000b50 <__aeabi_uldivmod>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	460b      	mov	r3, r1
 8004efa:	4613      	mov	r3, r2
 8004efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004efe:	e053      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f00:	4b35      	ldr	r3, [pc, #212]	@ (8004fd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	099b      	lsrs	r3, r3, #6
 8004f06:	2200      	movs	r2, #0
 8004f08:	613b      	str	r3, [r7, #16]
 8004f0a:	617a      	str	r2, [r7, #20]
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004f12:	f04f 0b00 	mov.w	fp, #0
 8004f16:	4652      	mov	r2, sl
 8004f18:	465b      	mov	r3, fp
 8004f1a:	f04f 0000 	mov.w	r0, #0
 8004f1e:	f04f 0100 	mov.w	r1, #0
 8004f22:	0159      	lsls	r1, r3, #5
 8004f24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f28:	0150      	lsls	r0, r2, #5
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	ebb2 080a 	subs.w	r8, r2, sl
 8004f32:	eb63 090b 	sbc.w	r9, r3, fp
 8004f36:	f04f 0200 	mov.w	r2, #0
 8004f3a:	f04f 0300 	mov.w	r3, #0
 8004f3e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004f42:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004f46:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004f4a:	ebb2 0408 	subs.w	r4, r2, r8
 8004f4e:	eb63 0509 	sbc.w	r5, r3, r9
 8004f52:	f04f 0200 	mov.w	r2, #0
 8004f56:	f04f 0300 	mov.w	r3, #0
 8004f5a:	00eb      	lsls	r3, r5, #3
 8004f5c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f60:	00e2      	lsls	r2, r4, #3
 8004f62:	4614      	mov	r4, r2
 8004f64:	461d      	mov	r5, r3
 8004f66:	eb14 030a 	adds.w	r3, r4, sl
 8004f6a:	603b      	str	r3, [r7, #0]
 8004f6c:	eb45 030b 	adc.w	r3, r5, fp
 8004f70:	607b      	str	r3, [r7, #4]
 8004f72:	f04f 0200 	mov.w	r2, #0
 8004f76:	f04f 0300 	mov.w	r3, #0
 8004f7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f7e:	4629      	mov	r1, r5
 8004f80:	028b      	lsls	r3, r1, #10
 8004f82:	4621      	mov	r1, r4
 8004f84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f88:	4621      	mov	r1, r4
 8004f8a:	028a      	lsls	r2, r1, #10
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	4619      	mov	r1, r3
 8004f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f92:	2200      	movs	r2, #0
 8004f94:	60bb      	str	r3, [r7, #8]
 8004f96:	60fa      	str	r2, [r7, #12]
 8004f98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f9c:	f7fb fdd8 	bl	8000b50 <__aeabi_uldivmod>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	0c1b      	lsrs	r3, r3, #16
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004fb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004fc2:	e002      	b.n	8004fca <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fc4:	4b05      	ldr	r3, [pc, #20]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0x184>)
 8004fc6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004fc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3740      	adds	r7, #64	@ 0x40
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fd6:	bf00      	nop
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	00f42400 	.word	0x00f42400
 8004fe0:	017d7840 	.word	0x017d7840

08004fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fe8:	4b03      	ldr	r3, [pc, #12]	@ (8004ff8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fea:	681b      	ldr	r3, [r3, #0]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	20000084 	.word	0x20000084

08004ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005000:	f7ff fff0 	bl	8004fe4 <HAL_RCC_GetHCLKFreq>
 8005004:	4602      	mov	r2, r0
 8005006:	4b05      	ldr	r3, [pc, #20]	@ (800501c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	0a9b      	lsrs	r3, r3, #10
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	4903      	ldr	r1, [pc, #12]	@ (8005020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005012:	5ccb      	ldrb	r3, [r1, r3]
 8005014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005018:	4618      	mov	r0, r3
 800501a:	bd80      	pop	{r7, pc}
 800501c:	40023800 	.word	0x40023800
 8005020:	0800a018 	.word	0x0800a018

08005024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005028:	f7ff ffdc 	bl	8004fe4 <HAL_RCC_GetHCLKFreq>
 800502c:	4602      	mov	r2, r0
 800502e:	4b05      	ldr	r3, [pc, #20]	@ (8005044 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	0b5b      	lsrs	r3, r3, #13
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	4903      	ldr	r1, [pc, #12]	@ (8005048 <HAL_RCC_GetPCLK2Freq+0x24>)
 800503a:	5ccb      	ldrb	r3, [r1, r3]
 800503c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005040:	4618      	mov	r0, r3
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40023800 	.word	0x40023800
 8005048:	0800a018 	.word	0x0800a018

0800504c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	220f      	movs	r2, #15
 800505a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800505c:	4b12      	ldr	r3, [pc, #72]	@ (80050a8 <HAL_RCC_GetClockConfig+0x5c>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f003 0203 	and.w	r2, r3, #3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005068:	4b0f      	ldr	r3, [pc, #60]	@ (80050a8 <HAL_RCC_GetClockConfig+0x5c>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005074:	4b0c      	ldr	r3, [pc, #48]	@ (80050a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005080:	4b09      	ldr	r3, [pc, #36]	@ (80050a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	08db      	lsrs	r3, r3, #3
 8005086:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800508e:	4b07      	ldr	r3, [pc, #28]	@ (80050ac <HAL_RCC_GetClockConfig+0x60>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0207 	and.w	r2, r3, #7
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	601a      	str	r2, [r3, #0]
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	40023800 	.word	0x40023800
 80050ac:	40023c00 	.word	0x40023c00

080050b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b082      	sub	sp, #8
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e041      	b.n	8005146 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d106      	bne.n	80050dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7fc fe4a 	bl	8001d70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2202      	movs	r2, #2
 80050e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3304      	adds	r3, #4
 80050ec:	4619      	mov	r1, r3
 80050ee:	4610      	mov	r0, r2
 80050f0:	f000 fb6a 	bl	80057c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
	...

08005150 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b01      	cmp	r3, #1
 8005162:	d001      	beq.n	8005168 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e044      	b.n	80051f2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2202      	movs	r2, #2
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	68da      	ldr	r2, [r3, #12]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0201 	orr.w	r2, r2, #1
 800517e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a1e      	ldr	r2, [pc, #120]	@ (8005200 <HAL_TIM_Base_Start_IT+0xb0>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d018      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x6c>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005192:	d013      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x6c>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a1a      	ldr	r2, [pc, #104]	@ (8005204 <HAL_TIM_Base_Start_IT+0xb4>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00e      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x6c>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a19      	ldr	r2, [pc, #100]	@ (8005208 <HAL_TIM_Base_Start_IT+0xb8>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d009      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x6c>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a17      	ldr	r2, [pc, #92]	@ (800520c <HAL_TIM_Base_Start_IT+0xbc>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d004      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0x6c>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a16      	ldr	r2, [pc, #88]	@ (8005210 <HAL_TIM_Base_Start_IT+0xc0>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d111      	bne.n	80051e0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2b06      	cmp	r3, #6
 80051cc:	d010      	beq.n	80051f0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f042 0201 	orr.w	r2, r2, #1
 80051dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051de:	e007      	b.n	80051f0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f042 0201 	orr.w	r2, r2, #1
 80051ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	40010000 	.word	0x40010000
 8005204:	40000400 	.word	0x40000400
 8005208:	40000800 	.word	0x40000800
 800520c:	40000c00 	.word	0x40000c00
 8005210:	40014000 	.word	0x40014000

08005214 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e041      	b.n	80052aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800522c:	b2db      	uxtb	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	d106      	bne.n	8005240 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7fc fd62 	bl	8001d04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2202      	movs	r2, #2
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	3304      	adds	r3, #4
 8005250:	4619      	mov	r1, r3
 8005252:	4610      	mov	r0, r2
 8005254:	f000 fab8 	bl	80057c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
	...

080052b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d109      	bne.n	80052d8 <HAL_TIM_PWM_Start+0x24>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	bf14      	ite	ne
 80052d0:	2301      	movne	r3, #1
 80052d2:	2300      	moveq	r3, #0
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	e022      	b.n	800531e <HAL_TIM_PWM_Start+0x6a>
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2b04      	cmp	r3, #4
 80052dc:	d109      	bne.n	80052f2 <HAL_TIM_PWM_Start+0x3e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	bf14      	ite	ne
 80052ea:	2301      	movne	r3, #1
 80052ec:	2300      	moveq	r3, #0
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	e015      	b.n	800531e <HAL_TIM_PWM_Start+0x6a>
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2b08      	cmp	r3, #8
 80052f6:	d109      	bne.n	800530c <HAL_TIM_PWM_Start+0x58>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b01      	cmp	r3, #1
 8005302:	bf14      	ite	ne
 8005304:	2301      	movne	r3, #1
 8005306:	2300      	moveq	r3, #0
 8005308:	b2db      	uxtb	r3, r3
 800530a:	e008      	b.n	800531e <HAL_TIM_PWM_Start+0x6a>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b01      	cmp	r3, #1
 8005316:	bf14      	ite	ne
 8005318:	2301      	movne	r3, #1
 800531a:	2300      	moveq	r3, #0
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e068      	b.n	80053f8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d104      	bne.n	8005336 <HAL_TIM_PWM_Start+0x82>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005334:	e013      	b.n	800535e <HAL_TIM_PWM_Start+0xaa>
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b04      	cmp	r3, #4
 800533a:	d104      	bne.n	8005346 <HAL_TIM_PWM_Start+0x92>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005344:	e00b      	b.n	800535e <HAL_TIM_PWM_Start+0xaa>
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b08      	cmp	r3, #8
 800534a:	d104      	bne.n	8005356 <HAL_TIM_PWM_Start+0xa2>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005354:	e003      	b.n	800535e <HAL_TIM_PWM_Start+0xaa>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2202      	movs	r2, #2
 800535a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2201      	movs	r2, #1
 8005364:	6839      	ldr	r1, [r7, #0]
 8005366:	4618      	mov	r0, r3
 8005368:	f000 fc46 	bl	8005bf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a23      	ldr	r2, [pc, #140]	@ (8005400 <HAL_TIM_PWM_Start+0x14c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d107      	bne.n	8005386 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005384:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a1d      	ldr	r2, [pc, #116]	@ (8005400 <HAL_TIM_PWM_Start+0x14c>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d018      	beq.n	80053c2 <HAL_TIM_PWM_Start+0x10e>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005398:	d013      	beq.n	80053c2 <HAL_TIM_PWM_Start+0x10e>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a19      	ldr	r2, [pc, #100]	@ (8005404 <HAL_TIM_PWM_Start+0x150>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d00e      	beq.n	80053c2 <HAL_TIM_PWM_Start+0x10e>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a17      	ldr	r2, [pc, #92]	@ (8005408 <HAL_TIM_PWM_Start+0x154>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d009      	beq.n	80053c2 <HAL_TIM_PWM_Start+0x10e>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a16      	ldr	r2, [pc, #88]	@ (800540c <HAL_TIM_PWM_Start+0x158>)
 80053b4:	4293      	cmp	r3, r2
 80053b6:	d004      	beq.n	80053c2 <HAL_TIM_PWM_Start+0x10e>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a14      	ldr	r2, [pc, #80]	@ (8005410 <HAL_TIM_PWM_Start+0x15c>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d111      	bne.n	80053e6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2b06      	cmp	r3, #6
 80053d2:	d010      	beq.n	80053f6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f042 0201 	orr.w	r2, r2, #1
 80053e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e4:	e007      	b.n	80053f6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f042 0201 	orr.w	r2, r2, #1
 80053f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	40010000 	.word	0x40010000
 8005404:	40000400 	.word	0x40000400
 8005408:	40000800 	.word	0x40000800
 800540c:	40000c00 	.word	0x40000c00
 8005410:	40014000 	.word	0x40014000

08005414 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	2b00      	cmp	r3, #0
 8005434:	d020      	beq.n	8005478 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d01b      	beq.n	8005478 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f06f 0202 	mvn.w	r2, #2
 8005448:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2201      	movs	r2, #1
 800544e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 f994 	bl	800578c <HAL_TIM_IC_CaptureCallback>
 8005464:	e005      	b.n	8005472 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f986 	bl	8005778 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f997 	bl	80057a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b00      	cmp	r3, #0
 8005480:	d020      	beq.n	80054c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b00      	cmp	r3, #0
 800548a:	d01b      	beq.n	80054c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f06f 0204 	mvn.w	r2, #4
 8005494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2202      	movs	r2, #2
 800549a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f96e 	bl	800578c <HAL_TIM_IC_CaptureCallback>
 80054b0:	e005      	b.n	80054be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 f960 	bl	8005778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f971 	bl	80057a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	f003 0308 	and.w	r3, r3, #8
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d020      	beq.n	8005510 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f003 0308 	and.w	r3, r3, #8
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d01b      	beq.n	8005510 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f06f 0208 	mvn.w	r2, #8
 80054e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2204      	movs	r2, #4
 80054e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d003      	beq.n	80054fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 f948 	bl	800578c <HAL_TIM_IC_CaptureCallback>
 80054fc:	e005      	b.n	800550a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 f93a 	bl	8005778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f94b 	bl	80057a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f003 0310 	and.w	r3, r3, #16
 8005516:	2b00      	cmp	r3, #0
 8005518:	d020      	beq.n	800555c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f003 0310 	and.w	r3, r3, #16
 8005520:	2b00      	cmp	r3, #0
 8005522:	d01b      	beq.n	800555c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f06f 0210 	mvn.w	r2, #16
 800552c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2208      	movs	r2, #8
 8005532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f922 	bl	800578c <HAL_TIM_IC_CaptureCallback>
 8005548:	e005      	b.n	8005556 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f914 	bl	8005778 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 f925 	bl	80057a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2200      	movs	r2, #0
 800555a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	f003 0301 	and.w	r3, r3, #1
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00c      	beq.n	8005580 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b00      	cmp	r3, #0
 800556e:	d007      	beq.n	8005580 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f06f 0201 	mvn.w	r2, #1
 8005578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7fc faf6 	bl	8001b6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005586:	2b00      	cmp	r3, #0
 8005588:	d00c      	beq.n	80055a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005590:	2b00      	cmp	r3, #0
 8005592:	d007      	beq.n	80055a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800559c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 fbc8 	bl	8005d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00c      	beq.n	80055c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d007      	beq.n	80055c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80055c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 f8f6 	bl	80057b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f003 0320 	and.w	r3, r3, #32
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00c      	beq.n	80055ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f003 0320 	and.w	r3, r3, #32
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d007      	beq.n	80055ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f06f 0220 	mvn.w	r2, #32
 80055e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 fb9a 	bl	8005d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055ec:	bf00      	nop
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005600:	2300      	movs	r3, #0
 8005602:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800560a:	2b01      	cmp	r3, #1
 800560c:	d101      	bne.n	8005612 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800560e:	2302      	movs	r3, #2
 8005610:	e0ae      	b.n	8005770 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2201      	movs	r2, #1
 8005616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b0c      	cmp	r3, #12
 800561e:	f200 809f 	bhi.w	8005760 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005622:	a201      	add	r2, pc, #4	@ (adr r2, 8005628 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005628:	0800565d 	.word	0x0800565d
 800562c:	08005761 	.word	0x08005761
 8005630:	08005761 	.word	0x08005761
 8005634:	08005761 	.word	0x08005761
 8005638:	0800569d 	.word	0x0800569d
 800563c:	08005761 	.word	0x08005761
 8005640:	08005761 	.word	0x08005761
 8005644:	08005761 	.word	0x08005761
 8005648:	080056df 	.word	0x080056df
 800564c:	08005761 	.word	0x08005761
 8005650:	08005761 	.word	0x08005761
 8005654:	08005761 	.word	0x08005761
 8005658:	0800571f 	.word	0x0800571f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68b9      	ldr	r1, [r7, #8]
 8005662:	4618      	mov	r0, r3
 8005664:	f000 f93c 	bl	80058e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699a      	ldr	r2, [r3, #24]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 0208 	orr.w	r2, r2, #8
 8005676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699a      	ldr	r2, [r3, #24]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 0204 	bic.w	r2, r2, #4
 8005686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6999      	ldr	r1, [r3, #24]
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	691a      	ldr	r2, [r3, #16]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	430a      	orrs	r2, r1
 8005698:	619a      	str	r2, [r3, #24]
      break;
 800569a:	e064      	b.n	8005766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68b9      	ldr	r1, [r7, #8]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 f982 	bl	80059ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	699a      	ldr	r2, [r3, #24]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699a      	ldr	r2, [r3, #24]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6999      	ldr	r1, [r3, #24]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	691b      	ldr	r3, [r3, #16]
 80056d2:	021a      	lsls	r2, r3, #8
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	430a      	orrs	r2, r1
 80056da:	619a      	str	r2, [r3, #24]
      break;
 80056dc:	e043      	b.n	8005766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68b9      	ldr	r1, [r7, #8]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 f9cd 	bl	8005a84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	69da      	ldr	r2, [r3, #28]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f042 0208 	orr.w	r2, r2, #8
 80056f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	69da      	ldr	r2, [r3, #28]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f022 0204 	bic.w	r2, r2, #4
 8005708:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69d9      	ldr	r1, [r3, #28]
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	691a      	ldr	r2, [r3, #16]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	430a      	orrs	r2, r1
 800571a:	61da      	str	r2, [r3, #28]
      break;
 800571c:	e023      	b.n	8005766 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68b9      	ldr	r1, [r7, #8]
 8005724:	4618      	mov	r0, r3
 8005726:	f000 fa17 	bl	8005b58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69da      	ldr	r2, [r3, #28]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69da      	ldr	r2, [r3, #28]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69d9      	ldr	r1, [r3, #28]
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	021a      	lsls	r2, r3, #8
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	61da      	str	r2, [r3, #28]
      break;
 800575e:	e002      	b.n	8005766 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	75fb      	strb	r3, [r7, #23]
      break;
 8005764:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800576e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005770:	4618      	mov	r0, r3
 8005772:	3718      	adds	r7, #24
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4a3a      	ldr	r2, [pc, #232]	@ (80058c4 <TIM_Base_SetConfig+0xfc>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d00f      	beq.n	8005800 <TIM_Base_SetConfig+0x38>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057e6:	d00b      	beq.n	8005800 <TIM_Base_SetConfig+0x38>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	4a37      	ldr	r2, [pc, #220]	@ (80058c8 <TIM_Base_SetConfig+0x100>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d007      	beq.n	8005800 <TIM_Base_SetConfig+0x38>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a36      	ldr	r2, [pc, #216]	@ (80058cc <TIM_Base_SetConfig+0x104>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d003      	beq.n	8005800 <TIM_Base_SetConfig+0x38>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a35      	ldr	r2, [pc, #212]	@ (80058d0 <TIM_Base_SetConfig+0x108>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d108      	bne.n	8005812 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005806:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	4313      	orrs	r3, r2
 8005810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4a2b      	ldr	r2, [pc, #172]	@ (80058c4 <TIM_Base_SetConfig+0xfc>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d01b      	beq.n	8005852 <TIM_Base_SetConfig+0x8a>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005820:	d017      	beq.n	8005852 <TIM_Base_SetConfig+0x8a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4a28      	ldr	r2, [pc, #160]	@ (80058c8 <TIM_Base_SetConfig+0x100>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d013      	beq.n	8005852 <TIM_Base_SetConfig+0x8a>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a27      	ldr	r2, [pc, #156]	@ (80058cc <TIM_Base_SetConfig+0x104>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d00f      	beq.n	8005852 <TIM_Base_SetConfig+0x8a>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a26      	ldr	r2, [pc, #152]	@ (80058d0 <TIM_Base_SetConfig+0x108>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d00b      	beq.n	8005852 <TIM_Base_SetConfig+0x8a>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a25      	ldr	r2, [pc, #148]	@ (80058d4 <TIM_Base_SetConfig+0x10c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d007      	beq.n	8005852 <TIM_Base_SetConfig+0x8a>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a24      	ldr	r2, [pc, #144]	@ (80058d8 <TIM_Base_SetConfig+0x110>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d003      	beq.n	8005852 <TIM_Base_SetConfig+0x8a>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a23      	ldr	r2, [pc, #140]	@ (80058dc <TIM_Base_SetConfig+0x114>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d108      	bne.n	8005864 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005858:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	4313      	orrs	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	689a      	ldr	r2, [r3, #8]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	4a0e      	ldr	r2, [pc, #56]	@ (80058c4 <TIM_Base_SetConfig+0xfc>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d103      	bne.n	8005898 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	691a      	ldr	r2, [r3, #16]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d105      	bne.n	80058b6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	f023 0201 	bic.w	r2, r3, #1
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	611a      	str	r2, [r3, #16]
  }
}
 80058b6:	bf00      	nop
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	40010000 	.word	0x40010000
 80058c8:	40000400 	.word	0x40000400
 80058cc:	40000800 	.word	0x40000800
 80058d0:	40000c00 	.word	0x40000c00
 80058d4:	40014000 	.word	0x40014000
 80058d8:	40014400 	.word	0x40014400
 80058dc:	40014800 	.word	0x40014800

080058e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b087      	sub	sp, #28
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	f023 0201 	bic.w	r2, r3, #1
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800590e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f023 0303 	bic.w	r3, r3, #3
 8005916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4313      	orrs	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f023 0302 	bic.w	r3, r3, #2
 8005928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	4313      	orrs	r3, r2
 8005932:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a1c      	ldr	r2, [pc, #112]	@ (80059a8 <TIM_OC1_SetConfig+0xc8>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d10c      	bne.n	8005956 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f023 0308 	bic.w	r3, r3, #8
 8005942:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	4313      	orrs	r3, r2
 800594c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f023 0304 	bic.w	r3, r3, #4
 8005954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a13      	ldr	r2, [pc, #76]	@ (80059a8 <TIM_OC1_SetConfig+0xc8>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d111      	bne.n	8005982 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005964:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800596c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	695b      	ldr	r3, [r3, #20]
 8005972:	693a      	ldr	r2, [r7, #16]
 8005974:	4313      	orrs	r3, r2
 8005976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	693a      	ldr	r2, [r7, #16]
 800597e:	4313      	orrs	r3, r2
 8005980:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	697a      	ldr	r2, [r7, #20]
 800599a:	621a      	str	r2, [r3, #32]
}
 800599c:	bf00      	nop
 800599e:	371c      	adds	r7, #28
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr
 80059a8:	40010000 	.word	0x40010000

080059ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	f023 0210 	bic.w	r2, r3, #16
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	021b      	lsls	r3, r3, #8
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f023 0320 	bic.w	r3, r3, #32
 80059f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	011b      	lsls	r3, r3, #4
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a1e      	ldr	r2, [pc, #120]	@ (8005a80 <TIM_OC2_SetConfig+0xd4>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d10d      	bne.n	8005a28 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	011b      	lsls	r3, r3, #4
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a15      	ldr	r2, [pc, #84]	@ (8005a80 <TIM_OC2_SetConfig+0xd4>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d113      	bne.n	8005a58 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	693a      	ldr	r2, [r7, #16]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	621a      	str	r2, [r3, #32]
}
 8005a72:	bf00      	nop
 8005a74:	371c      	adds	r7, #28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	40010000 	.word	0x40010000

08005a84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	69db      	ldr	r3, [r3, #28]
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0303 	bic.w	r3, r3, #3
 8005aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	021b      	lsls	r3, r3, #8
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a1d      	ldr	r2, [pc, #116]	@ (8005b54 <TIM_OC3_SetConfig+0xd0>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d10d      	bne.n	8005afe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005ae8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	021b      	lsls	r3, r3, #8
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005afc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a14      	ldr	r2, [pc, #80]	@ (8005b54 <TIM_OC3_SetConfig+0xd0>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d113      	bne.n	8005b2e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	011b      	lsls	r3, r3, #4
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	011b      	lsls	r3, r3, #4
 8005b28:	693a      	ldr	r2, [r7, #16]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	621a      	str	r2, [r3, #32]
}
 8005b48:	bf00      	nop
 8005b4a:	371c      	adds	r7, #28
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr
 8005b54:	40010000 	.word	0x40010000

08005b58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	021b      	lsls	r3, r3, #8
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ba2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	031b      	lsls	r3, r3, #12
 8005baa:	693a      	ldr	r2, [r7, #16]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4a10      	ldr	r2, [pc, #64]	@ (8005bf4 <TIM_OC4_SetConfig+0x9c>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d109      	bne.n	8005bcc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005bbe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	695b      	ldr	r3, [r3, #20]
 8005bc4:	019b      	lsls	r3, r3, #6
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	697a      	ldr	r2, [r7, #20]
 8005bd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	621a      	str	r2, [r3, #32]
}
 8005be6:	bf00      	nop
 8005be8:	371c      	adds	r7, #28
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	40010000 	.word	0x40010000

08005bf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b087      	sub	sp, #28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	f003 031f 	and.w	r3, r3, #31
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6a1a      	ldr	r2, [r3, #32]
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	43db      	mvns	r3, r3
 8005c1a:	401a      	ands	r2, r3
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6a1a      	ldr	r2, [r3, #32]
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	f003 031f 	and.w	r3, r3, #31
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c30:	431a      	orrs	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	621a      	str	r2, [r3, #32]
}
 8005c36:	bf00      	nop
 8005c38:	371c      	adds	r7, #28
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
	...

08005c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d101      	bne.n	8005c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c58:	2302      	movs	r3, #2
 8005c5a:	e050      	b.n	8005cfe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a1c      	ldr	r2, [pc, #112]	@ (8005d0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d018      	beq.n	8005cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ca8:	d013      	beq.n	8005cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a18      	ldr	r2, [pc, #96]	@ (8005d10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d00e      	beq.n	8005cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a16      	ldr	r2, [pc, #88]	@ (8005d14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d009      	beq.n	8005cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a15      	ldr	r2, [pc, #84]	@ (8005d18 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d004      	beq.n	8005cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a13      	ldr	r2, [pc, #76]	@ (8005d1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d10c      	bne.n	8005cec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68ba      	ldr	r2, [r7, #8]
 8005cea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3714      	adds	r7, #20
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
 8005d0a:	bf00      	nop
 8005d0c:	40010000 	.word	0x40010000
 8005d10:	40000400 	.word	0x40000400
 8005d14:	40000800 	.word	0x40000800
 8005d18:	40000c00 	.word	0x40000c00
 8005d1c:	40014000 	.word	0x40014000

08005d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d3c:	bf00      	nop
 8005d3e:	370c      	adds	r7, #12
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr

08005d48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d48:	b084      	sub	sp, #16
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b084      	sub	sp, #16
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	f107 001c 	add.w	r0, r7, #28
 8005d56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d5a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d123      	bne.n	8005daa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d66:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005d76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d7a:	687a      	ldr	r2, [r7, #4]
 8005d7c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d8a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d105      	bne.n	8005d9e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f001 fae8 	bl	8007374 <USB_CoreReset>
 8005da4:	4603      	mov	r3, r0
 8005da6:	73fb      	strb	r3, [r7, #15]
 8005da8:	e01b      	b.n	8005de2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f001 fadc 	bl	8007374 <USB_CoreReset>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005dc0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d106      	bne.n	8005dd6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dcc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	639a      	str	r2, [r3, #56]	@ 0x38
 8005dd4:	e005      	b.n	8005de2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dda:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005de2:	7fbb      	ldrb	r3, [r7, #30]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d10b      	bne.n	8005e00 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f043 0206 	orr.w	r2, r3, #6
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f043 0220 	orr.w	r2, r3, #32
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e0c:	b004      	add	sp, #16
 8005e0e:	4770      	bx	lr

08005e10 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005e1e:	79fb      	ldrb	r3, [r7, #7]
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d165      	bne.n	8005ef0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	4a41      	ldr	r2, [pc, #260]	@ (8005f2c <USB_SetTurnaroundTime+0x11c>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d906      	bls.n	8005e3a <USB_SetTurnaroundTime+0x2a>
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	4a40      	ldr	r2, [pc, #256]	@ (8005f30 <USB_SetTurnaroundTime+0x120>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d202      	bcs.n	8005e3a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005e34:	230f      	movs	r3, #15
 8005e36:	617b      	str	r3, [r7, #20]
 8005e38:	e062      	b.n	8005f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	4a3c      	ldr	r2, [pc, #240]	@ (8005f30 <USB_SetTurnaroundTime+0x120>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d306      	bcc.n	8005e50 <USB_SetTurnaroundTime+0x40>
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	4a3b      	ldr	r2, [pc, #236]	@ (8005f34 <USB_SetTurnaroundTime+0x124>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d202      	bcs.n	8005e50 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005e4a:	230e      	movs	r3, #14
 8005e4c:	617b      	str	r3, [r7, #20]
 8005e4e:	e057      	b.n	8005f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	4a38      	ldr	r2, [pc, #224]	@ (8005f34 <USB_SetTurnaroundTime+0x124>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d306      	bcc.n	8005e66 <USB_SetTurnaroundTime+0x56>
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	4a37      	ldr	r2, [pc, #220]	@ (8005f38 <USB_SetTurnaroundTime+0x128>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d202      	bcs.n	8005e66 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005e60:	230d      	movs	r3, #13
 8005e62:	617b      	str	r3, [r7, #20]
 8005e64:	e04c      	b.n	8005f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	4a33      	ldr	r2, [pc, #204]	@ (8005f38 <USB_SetTurnaroundTime+0x128>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d306      	bcc.n	8005e7c <USB_SetTurnaroundTime+0x6c>
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	4a32      	ldr	r2, [pc, #200]	@ (8005f3c <USB_SetTurnaroundTime+0x12c>)
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d802      	bhi.n	8005e7c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005e76:	230c      	movs	r3, #12
 8005e78:	617b      	str	r3, [r7, #20]
 8005e7a:	e041      	b.n	8005f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	4a2f      	ldr	r2, [pc, #188]	@ (8005f3c <USB_SetTurnaroundTime+0x12c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d906      	bls.n	8005e92 <USB_SetTurnaroundTime+0x82>
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	4a2e      	ldr	r2, [pc, #184]	@ (8005f40 <USB_SetTurnaroundTime+0x130>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d802      	bhi.n	8005e92 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005e8c:	230b      	movs	r3, #11
 8005e8e:	617b      	str	r3, [r7, #20]
 8005e90:	e036      	b.n	8005f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	4a2a      	ldr	r2, [pc, #168]	@ (8005f40 <USB_SetTurnaroundTime+0x130>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d906      	bls.n	8005ea8 <USB_SetTurnaroundTime+0x98>
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	4a29      	ldr	r2, [pc, #164]	@ (8005f44 <USB_SetTurnaroundTime+0x134>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d802      	bhi.n	8005ea8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005ea2:	230a      	movs	r3, #10
 8005ea4:	617b      	str	r3, [r7, #20]
 8005ea6:	e02b      	b.n	8005f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	4a26      	ldr	r2, [pc, #152]	@ (8005f44 <USB_SetTurnaroundTime+0x134>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d906      	bls.n	8005ebe <USB_SetTurnaroundTime+0xae>
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	4a25      	ldr	r2, [pc, #148]	@ (8005f48 <USB_SetTurnaroundTime+0x138>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d202      	bcs.n	8005ebe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005eb8:	2309      	movs	r3, #9
 8005eba:	617b      	str	r3, [r7, #20]
 8005ebc:	e020      	b.n	8005f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	4a21      	ldr	r2, [pc, #132]	@ (8005f48 <USB_SetTurnaroundTime+0x138>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d306      	bcc.n	8005ed4 <USB_SetTurnaroundTime+0xc4>
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	4a20      	ldr	r2, [pc, #128]	@ (8005f4c <USB_SetTurnaroundTime+0x13c>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d802      	bhi.n	8005ed4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005ece:	2308      	movs	r3, #8
 8005ed0:	617b      	str	r3, [r7, #20]
 8005ed2:	e015      	b.n	8005f00 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8005f4c <USB_SetTurnaroundTime+0x13c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d906      	bls.n	8005eea <USB_SetTurnaroundTime+0xda>
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	4a1c      	ldr	r2, [pc, #112]	@ (8005f50 <USB_SetTurnaroundTime+0x140>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d202      	bcs.n	8005eea <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005ee4:	2307      	movs	r3, #7
 8005ee6:	617b      	str	r3, [r7, #20]
 8005ee8:	e00a      	b.n	8005f00 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005eea:	2306      	movs	r3, #6
 8005eec:	617b      	str	r3, [r7, #20]
 8005eee:	e007      	b.n	8005f00 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005ef0:	79fb      	ldrb	r3, [r7, #7]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d102      	bne.n	8005efc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005ef6:	2309      	movs	r3, #9
 8005ef8:	617b      	str	r3, [r7, #20]
 8005efa:	e001      	b.n	8005f00 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005efc:	2309      	movs	r3, #9
 8005efe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	68da      	ldr	r2, [r3, #12]
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	029b      	lsls	r3, r3, #10
 8005f14:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005f18:	431a      	orrs	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f1e:	2300      	movs	r3, #0
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	371c      	adds	r7, #28
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	00d8acbf 	.word	0x00d8acbf
 8005f30:	00e4e1c0 	.word	0x00e4e1c0
 8005f34:	00f42400 	.word	0x00f42400
 8005f38:	01067380 	.word	0x01067380
 8005f3c:	011a499f 	.word	0x011a499f
 8005f40:	01312cff 	.word	0x01312cff
 8005f44:	014ca43f 	.word	0x014ca43f
 8005f48:	016e3600 	.word	0x016e3600
 8005f4c:	01a6ab1f 	.word	0x01a6ab1f
 8005f50:	01e84800 	.word	0x01e84800

08005f54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f043 0201 	orr.w	r2, r3, #1
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b083      	sub	sp, #12
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	f023 0201 	bic.w	r2, r3, #1
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005fb4:	78fb      	ldrb	r3, [r7, #3]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d115      	bne.n	8005fe6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005fc6:	200a      	movs	r0, #10
 8005fc8:	f7fc f8a6 	bl	8002118 <HAL_Delay>
      ms += 10U;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	330a      	adds	r3, #10
 8005fd0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f001 f93f 	bl	8007256 <USB_GetMode>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d01e      	beq.n	800601c <USB_SetCurrentMode+0x84>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2bc7      	cmp	r3, #199	@ 0xc7
 8005fe2:	d9f0      	bls.n	8005fc6 <USB_SetCurrentMode+0x2e>
 8005fe4:	e01a      	b.n	800601c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005fe6:	78fb      	ldrb	r3, [r7, #3]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d115      	bne.n	8006018 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ff8:	200a      	movs	r0, #10
 8005ffa:	f7fc f88d 	bl	8002118 <HAL_Delay>
      ms += 10U;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	330a      	adds	r3, #10
 8006002:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f001 f926 	bl	8007256 <USB_GetMode>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d005      	beq.n	800601c <USB_SetCurrentMode+0x84>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2bc7      	cmp	r3, #199	@ 0xc7
 8006014:	d9f0      	bls.n	8005ff8 <USB_SetCurrentMode+0x60>
 8006016:	e001      	b.n	800601c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	e005      	b.n	8006028 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2bc8      	cmp	r3, #200	@ 0xc8
 8006020:	d101      	bne.n	8006026 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e000      	b.n	8006028 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006026:	2300      	movs	r3, #0
}
 8006028:	4618      	mov	r0, r3
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006030:	b084      	sub	sp, #16
 8006032:	b580      	push	{r7, lr}
 8006034:	b086      	sub	sp, #24
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
 800603a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800603e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006042:	2300      	movs	r3, #0
 8006044:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800604a:	2300      	movs	r3, #0
 800604c:	613b      	str	r3, [r7, #16]
 800604e:	e009      	b.n	8006064 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	3340      	adds	r3, #64	@ 0x40
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	2200      	movs	r2, #0
 800605c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	3301      	adds	r3, #1
 8006062:	613b      	str	r3, [r7, #16]
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	2b0e      	cmp	r3, #14
 8006068:	d9f2      	bls.n	8006050 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800606a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800606e:	2b00      	cmp	r3, #0
 8006070:	d11c      	bne.n	80060ac <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006080:	f043 0302 	orr.w	r3, r3, #2
 8006084:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800608a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006096:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80060aa:	e00b      	b.n	80060c4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060bc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80060ca:	461a      	mov	r2, r3
 80060cc:	2300      	movs	r3, #0
 80060ce:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80060d0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d10d      	bne.n	80060f4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80060d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d104      	bne.n	80060ea <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80060e0:	2100      	movs	r1, #0
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f968 	bl	80063b8 <USB_SetDevSpeed>
 80060e8:	e008      	b.n	80060fc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80060ea:	2101      	movs	r1, #1
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f963 	bl	80063b8 <USB_SetDevSpeed>
 80060f2:	e003      	b.n	80060fc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80060f4:	2103      	movs	r1, #3
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f95e 	bl	80063b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060fc:	2110      	movs	r1, #16
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f8fa 	bl	80062f8 <USB_FlushTxFifo>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d001      	beq.n	800610e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f000 f924 	bl	800635c <USB_FlushRxFifo>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d001      	beq.n	800611e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006124:	461a      	mov	r2, r3
 8006126:	2300      	movs	r3, #0
 8006128:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006130:	461a      	mov	r2, r3
 8006132:	2300      	movs	r3, #0
 8006134:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800613c:	461a      	mov	r2, r3
 800613e:	2300      	movs	r3, #0
 8006140:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006142:	2300      	movs	r3, #0
 8006144:	613b      	str	r3, [r7, #16]
 8006146:	e043      	b.n	80061d0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800615a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800615e:	d118      	bne.n	8006192 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10a      	bne.n	800617c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	015a      	lsls	r2, r3, #5
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	4413      	add	r3, r2
 800616e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006172:	461a      	mov	r2, r3
 8006174:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006178:	6013      	str	r3, [r2, #0]
 800617a:	e013      	b.n	80061a4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	015a      	lsls	r2, r3, #5
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4413      	add	r3, r2
 8006184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006188:	461a      	mov	r2, r3
 800618a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800618e:	6013      	str	r3, [r2, #0]
 8006190:	e008      	b.n	80061a4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	4413      	add	r3, r2
 800619a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800619e:	461a      	mov	r2, r3
 80061a0:	2300      	movs	r3, #0
 80061a2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061b0:	461a      	mov	r2, r3
 80061b2:	2300      	movs	r3, #0
 80061b4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	015a      	lsls	r2, r3, #5
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4413      	add	r3, r2
 80061be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061c2:	461a      	mov	r2, r3
 80061c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80061c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	3301      	adds	r3, #1
 80061ce:	613b      	str	r3, [r7, #16]
 80061d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80061d4:	461a      	mov	r2, r3
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	4293      	cmp	r3, r2
 80061da:	d3b5      	bcc.n	8006148 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061dc:	2300      	movs	r3, #0
 80061de:	613b      	str	r3, [r7, #16]
 80061e0:	e043      	b.n	800626a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061f8:	d118      	bne.n	800622c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10a      	bne.n	8006216 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800620c:	461a      	mov	r2, r3
 800620e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006212:	6013      	str	r3, [r2, #0]
 8006214:	e013      	b.n	800623e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	015a      	lsls	r2, r3, #5
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	4413      	add	r3, r2
 800621e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006222:	461a      	mov	r2, r3
 8006224:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006228:	6013      	str	r3, [r2, #0]
 800622a:	e008      	b.n	800623e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006238:	461a      	mov	r2, r3
 800623a:	2300      	movs	r3, #0
 800623c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	4413      	add	r3, r2
 8006246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800624a:	461a      	mov	r2, r3
 800624c:	2300      	movs	r3, #0
 800624e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	015a      	lsls	r2, r3, #5
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	4413      	add	r3, r2
 8006258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800625c:	461a      	mov	r2, r3
 800625e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006262:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	3301      	adds	r3, #1
 8006268:	613b      	str	r3, [r7, #16]
 800626a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800626e:	461a      	mov	r2, r3
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	4293      	cmp	r3, r2
 8006274:	d3b5      	bcc.n	80061e2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006284:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006288:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006296:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006298:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800629c:	2b00      	cmp	r3, #0
 800629e:	d105      	bne.n	80062ac <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	f043 0210 	orr.w	r2, r3, #16
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	699a      	ldr	r2, [r3, #24]
 80062b0:	4b10      	ldr	r3, [pc, #64]	@ (80062f4 <USB_DevInit+0x2c4>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80062b8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d005      	beq.n	80062cc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	f043 0208 	orr.w	r2, r3, #8
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80062cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d107      	bne.n	80062e4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	699b      	ldr	r3, [r3, #24]
 80062d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80062dc:	f043 0304 	orr.w	r3, r3, #4
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80062e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3718      	adds	r7, #24
 80062ea:	46bd      	mov	sp, r7
 80062ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062f0:	b004      	add	sp, #16
 80062f2:	4770      	bx	lr
 80062f4:	803c3800 	.word	0x803c3800

080062f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006302:	2300      	movs	r3, #0
 8006304:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	3301      	adds	r3, #1
 800630a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006312:	d901      	bls.n	8006318 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e01b      	b.n	8006350 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	daf2      	bge.n	8006306 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	019b      	lsls	r3, r3, #6
 8006328:	f043 0220 	orr.w	r2, r3, #32
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	3301      	adds	r3, #1
 8006334:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800633c:	d901      	bls.n	8006342 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800633e:	2303      	movs	r3, #3
 8006340:	e006      	b.n	8006350 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f003 0320 	and.w	r3, r3, #32
 800634a:	2b20      	cmp	r3, #32
 800634c:	d0f0      	beq.n	8006330 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3714      	adds	r7, #20
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr

0800635c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006364:	2300      	movs	r3, #0
 8006366:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	3301      	adds	r3, #1
 800636c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006374:	d901      	bls.n	800637a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e018      	b.n	80063ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	2b00      	cmp	r3, #0
 8006380:	daf2      	bge.n	8006368 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006382:	2300      	movs	r3, #0
 8006384:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2210      	movs	r2, #16
 800638a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	3301      	adds	r3, #1
 8006390:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006398:	d901      	bls.n	800639e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800639a:	2303      	movs	r3, #3
 800639c:	e006      	b.n	80063ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	f003 0310 	and.w	r3, r3, #16
 80063a6:	2b10      	cmp	r3, #16
 80063a8:	d0f0      	beq.n	800638c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80063aa:	2300      	movs	r3, #0
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3714      	adds	r7, #20
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	460b      	mov	r3, r1
 80063c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063ce:	681a      	ldr	r2, [r3, #0]
 80063d0:	78fb      	ldrb	r3, [r7, #3]
 80063d2:	68f9      	ldr	r1, [r7, #12]
 80063d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80063d8:	4313      	orrs	r3, r2
 80063da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3714      	adds	r7, #20
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b087      	sub	sp, #28
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f003 0306 	and.w	r3, r3, #6
 8006402:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d102      	bne.n	8006410 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800640a:	2300      	movs	r3, #0
 800640c:	75fb      	strb	r3, [r7, #23]
 800640e:	e00a      	b.n	8006426 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2b02      	cmp	r3, #2
 8006414:	d002      	beq.n	800641c <USB_GetDevSpeed+0x32>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2b06      	cmp	r3, #6
 800641a:	d102      	bne.n	8006422 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800641c:	2302      	movs	r3, #2
 800641e:	75fb      	strb	r3, [r7, #23]
 8006420:	e001      	b.n	8006426 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006422:	230f      	movs	r3, #15
 8006424:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006426:	7dfb      	ldrb	r3, [r7, #23]
}
 8006428:	4618      	mov	r0, r3
 800642a:	371c      	adds	r7, #28
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	785b      	ldrb	r3, [r3, #1]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d13a      	bne.n	80064c6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006456:	69da      	ldr	r2, [r3, #28]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	f003 030f 	and.w	r3, r3, #15
 8006460:	2101      	movs	r1, #1
 8006462:	fa01 f303 	lsl.w	r3, r1, r3
 8006466:	b29b      	uxth	r3, r3
 8006468:	68f9      	ldr	r1, [r7, #12]
 800646a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800646e:	4313      	orrs	r3, r2
 8006470:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	015a      	lsls	r2, r3, #5
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	4413      	add	r3, r2
 800647a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d155      	bne.n	8006534 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	015a      	lsls	r2, r3, #5
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4413      	add	r3, r2
 8006490:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	791b      	ldrb	r3, [r3, #4]
 80064a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	059b      	lsls	r3, r3, #22
 80064aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80064ac:	4313      	orrs	r3, r2
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	0151      	lsls	r1, r2, #5
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	440a      	add	r2, r1
 80064b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80064ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064c2:	6013      	str	r3, [r2, #0]
 80064c4:	e036      	b.n	8006534 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064cc:	69da      	ldr	r2, [r3, #28]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	f003 030f 	and.w	r3, r3, #15
 80064d6:	2101      	movs	r1, #1
 80064d8:	fa01 f303 	lsl.w	r3, r1, r3
 80064dc:	041b      	lsls	r3, r3, #16
 80064de:	68f9      	ldr	r1, [r7, #12]
 80064e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80064e4:	4313      	orrs	r3, r2
 80064e6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d11a      	bne.n	8006534 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	015a      	lsls	r2, r3, #5
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	4413      	add	r3, r2
 8006506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	791b      	ldrb	r3, [r3, #4]
 8006518:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800651a:	430b      	orrs	r3, r1
 800651c:	4313      	orrs	r3, r2
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	0151      	lsls	r1, r2, #5
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	440a      	add	r2, r1
 8006526:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800652a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800652e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006532:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3714      	adds	r7, #20
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
	...

08006544 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006544:	b480      	push	{r7}
 8006546:	b085      	sub	sp, #20
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	785b      	ldrb	r3, [r3, #1]
 800655c:	2b01      	cmp	r3, #1
 800655e:	d161      	bne.n	8006624 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006572:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006576:	d11f      	bne.n	80065b8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	015a      	lsls	r2, r3, #5
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4413      	add	r3, r2
 8006580:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	0151      	lsls	r1, r2, #5
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	440a      	add	r2, r1
 800658e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006592:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006596:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	015a      	lsls	r2, r3, #5
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68ba      	ldr	r2, [r7, #8]
 80065a8:	0151      	lsls	r1, r2, #5
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	440a      	add	r2, r1
 80065ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065b2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	f003 030f 	and.w	r3, r3, #15
 80065c8:	2101      	movs	r1, #1
 80065ca:	fa01 f303 	lsl.w	r3, r1, r3
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	43db      	mvns	r3, r3
 80065d2:	68f9      	ldr	r1, [r7, #12]
 80065d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065d8:	4013      	ands	r3, r2
 80065da:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065e2:	69da      	ldr	r2, [r3, #28]
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	f003 030f 	and.w	r3, r3, #15
 80065ec:	2101      	movs	r1, #1
 80065ee:	fa01 f303 	lsl.w	r3, r1, r3
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	43db      	mvns	r3, r3
 80065f6:	68f9      	ldr	r1, [r7, #12]
 80065f8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065fc:	4013      	ands	r3, r2
 80065fe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	4413      	add	r3, r2
 8006608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	0159      	lsls	r1, r3, #5
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	440b      	add	r3, r1
 8006616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800661a:	4619      	mov	r1, r3
 800661c:	4b35      	ldr	r3, [pc, #212]	@ (80066f4 <USB_DeactivateEndpoint+0x1b0>)
 800661e:	4013      	ands	r3, r2
 8006620:	600b      	str	r3, [r1, #0]
 8006622:	e060      	b.n	80066e6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	015a      	lsls	r2, r3, #5
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	4413      	add	r3, r2
 800662c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006636:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800663a:	d11f      	bne.n	800667c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	4413      	add	r3, r2
 8006644:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68ba      	ldr	r2, [r7, #8]
 800664c:	0151      	lsls	r1, r2, #5
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	440a      	add	r2, r1
 8006652:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006656:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800665a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	015a      	lsls	r2, r3, #5
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	4413      	add	r3, r2
 8006664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	0151      	lsls	r1, r2, #5
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	440a      	add	r2, r1
 8006672:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006676:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800667a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006682:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	f003 030f 	and.w	r3, r3, #15
 800668c:	2101      	movs	r1, #1
 800668e:	fa01 f303 	lsl.w	r3, r1, r3
 8006692:	041b      	lsls	r3, r3, #16
 8006694:	43db      	mvns	r3, r3
 8006696:	68f9      	ldr	r1, [r7, #12]
 8006698:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800669c:	4013      	ands	r3, r2
 800669e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066a6:	69da      	ldr	r2, [r3, #28]
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	f003 030f 	and.w	r3, r3, #15
 80066b0:	2101      	movs	r1, #1
 80066b2:	fa01 f303 	lsl.w	r3, r1, r3
 80066b6:	041b      	lsls	r3, r3, #16
 80066b8:	43db      	mvns	r3, r3
 80066ba:	68f9      	ldr	r1, [r7, #12]
 80066bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80066c0:	4013      	ands	r3, r2
 80066c2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	0159      	lsls	r1, r3, #5
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	440b      	add	r3, r1
 80066da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066de:	4619      	mov	r1, r3
 80066e0:	4b05      	ldr	r3, [pc, #20]	@ (80066f8 <USB_DeactivateEndpoint+0x1b4>)
 80066e2:	4013      	ands	r3, r2
 80066e4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr
 80066f4:	ec337800 	.word	0xec337800
 80066f8:	eff37800 	.word	0xeff37800

080066fc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b08a      	sub	sp, #40	@ 0x28
 8006700:	af02      	add	r7, sp, #8
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	4613      	mov	r3, r2
 8006708:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	785b      	ldrb	r3, [r3, #1]
 8006718:	2b01      	cmp	r3, #1
 800671a:	f040 817f 	bne.w	8006a1c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d132      	bne.n	800678c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	4413      	add	r3, r2
 800672e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	0151      	lsls	r1, r2, #5
 8006738:	69fa      	ldr	r2, [r7, #28]
 800673a:	440a      	add	r2, r1
 800673c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006740:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006744:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006748:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	69fb      	ldr	r3, [r7, #28]
 8006750:	4413      	add	r3, r2
 8006752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	69ba      	ldr	r2, [r7, #24]
 800675a:	0151      	lsls	r1, r2, #5
 800675c:	69fa      	ldr	r2, [r7, #28]
 800675e:	440a      	add	r2, r1
 8006760:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006764:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006768:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800676a:	69bb      	ldr	r3, [r7, #24]
 800676c:	015a      	lsls	r2, r3, #5
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	4413      	add	r3, r2
 8006772:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	69ba      	ldr	r2, [r7, #24]
 800677a:	0151      	lsls	r1, r2, #5
 800677c:	69fa      	ldr	r2, [r7, #28]
 800677e:	440a      	add	r2, r1
 8006780:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006784:	0cdb      	lsrs	r3, r3, #19
 8006786:	04db      	lsls	r3, r3, #19
 8006788:	6113      	str	r3, [r2, #16]
 800678a:	e097      	b.n	80068bc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	4413      	add	r3, r2
 8006794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	69ba      	ldr	r2, [r7, #24]
 800679c:	0151      	lsls	r1, r2, #5
 800679e:	69fa      	ldr	r2, [r7, #28]
 80067a0:	440a      	add	r2, r1
 80067a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067a6:	0cdb      	lsrs	r3, r3, #19
 80067a8:	04db      	lsls	r3, r3, #19
 80067aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067ac:	69bb      	ldr	r3, [r7, #24]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	0151      	lsls	r1, r2, #5
 80067be:	69fa      	ldr	r2, [r7, #28]
 80067c0:	440a      	add	r2, r1
 80067c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80067c6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80067ca:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80067ce:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d11a      	bne.n	800680c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	691a      	ldr	r2, [r3, #16]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d903      	bls.n	80067ea <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	689a      	ldr	r2, [r3, #8]
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	015a      	lsls	r2, r3, #5
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	4413      	add	r3, r2
 80067f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	69ba      	ldr	r2, [r7, #24]
 80067fa:	0151      	lsls	r1, r2, #5
 80067fc:	69fa      	ldr	r2, [r7, #28]
 80067fe:	440a      	add	r2, r1
 8006800:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006804:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006808:	6113      	str	r3, [r2, #16]
 800680a:	e044      	b.n	8006896 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	691a      	ldr	r2, [r3, #16]
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	4413      	add	r3, r2
 8006816:	1e5a      	subs	r2, r3, #1
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006820:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006822:	69bb      	ldr	r3, [r7, #24]
 8006824:	015a      	lsls	r2, r3, #5
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	4413      	add	r3, r2
 800682a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800682e:	691a      	ldr	r2, [r3, #16]
 8006830:	8afb      	ldrh	r3, [r7, #22]
 8006832:	04d9      	lsls	r1, r3, #19
 8006834:	4ba4      	ldr	r3, [pc, #656]	@ (8006ac8 <USB_EPStartXfer+0x3cc>)
 8006836:	400b      	ands	r3, r1
 8006838:	69b9      	ldr	r1, [r7, #24]
 800683a:	0148      	lsls	r0, r1, #5
 800683c:	69f9      	ldr	r1, [r7, #28]
 800683e:	4401      	add	r1, r0
 8006840:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006844:	4313      	orrs	r3, r2
 8006846:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	791b      	ldrb	r3, [r3, #4]
 800684c:	2b01      	cmp	r3, #1
 800684e:	d122      	bne.n	8006896 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	015a      	lsls	r2, r3, #5
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	4413      	add	r3, r2
 8006858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	69ba      	ldr	r2, [r7, #24]
 8006860:	0151      	lsls	r1, r2, #5
 8006862:	69fa      	ldr	r2, [r7, #28]
 8006864:	440a      	add	r2, r1
 8006866:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800686a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800686e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	015a      	lsls	r2, r3, #5
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	4413      	add	r3, r2
 8006878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800687c:	691a      	ldr	r2, [r3, #16]
 800687e:	8afb      	ldrh	r3, [r7, #22]
 8006880:	075b      	lsls	r3, r3, #29
 8006882:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006886:	69b9      	ldr	r1, [r7, #24]
 8006888:	0148      	lsls	r0, r1, #5
 800688a:	69f9      	ldr	r1, [r7, #28]
 800688c:	4401      	add	r1, r0
 800688e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006892:	4313      	orrs	r3, r2
 8006894:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	015a      	lsls	r2, r3, #5
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	4413      	add	r3, r2
 800689e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068a2:	691a      	ldr	r2, [r3, #16]
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068ac:	69b9      	ldr	r1, [r7, #24]
 80068ae:	0148      	lsls	r0, r1, #5
 80068b0:	69f9      	ldr	r1, [r7, #28]
 80068b2:	4401      	add	r1, r0
 80068b4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80068b8:	4313      	orrs	r3, r2
 80068ba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80068bc:	79fb      	ldrb	r3, [r7, #7]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d14b      	bne.n	800695a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	69db      	ldr	r3, [r3, #28]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d009      	beq.n	80068de <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	015a      	lsls	r2, r3, #5
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	4413      	add	r3, r2
 80068d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068d6:	461a      	mov	r2, r3
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	69db      	ldr	r3, [r3, #28]
 80068dc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	791b      	ldrb	r3, [r3, #4]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d128      	bne.n	8006938 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d110      	bne.n	8006918 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	015a      	lsls	r2, r3, #5
 80068fa:	69fb      	ldr	r3, [r7, #28]
 80068fc:	4413      	add	r3, r2
 80068fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	69ba      	ldr	r2, [r7, #24]
 8006906:	0151      	lsls	r1, r2, #5
 8006908:	69fa      	ldr	r2, [r7, #28]
 800690a:	440a      	add	r2, r1
 800690c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006910:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006914:	6013      	str	r3, [r2, #0]
 8006916:	e00f      	b.n	8006938 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	015a      	lsls	r2, r3, #5
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	4413      	add	r3, r2
 8006920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	69ba      	ldr	r2, [r7, #24]
 8006928:	0151      	lsls	r1, r2, #5
 800692a:	69fa      	ldr	r2, [r7, #28]
 800692c:	440a      	add	r2, r1
 800692e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006932:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006936:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	015a      	lsls	r2, r3, #5
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	4413      	add	r3, r2
 8006940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	69ba      	ldr	r2, [r7, #24]
 8006948:	0151      	lsls	r1, r2, #5
 800694a:	69fa      	ldr	r2, [r7, #28]
 800694c:	440a      	add	r2, r1
 800694e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006952:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006956:	6013      	str	r3, [r2, #0]
 8006958:	e166      	b.n	8006c28 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	0151      	lsls	r1, r2, #5
 800696c:	69fa      	ldr	r2, [r7, #28]
 800696e:	440a      	add	r2, r1
 8006970:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006974:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006978:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	791b      	ldrb	r3, [r3, #4]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d015      	beq.n	80069ae <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	f000 814e 	beq.w	8006c28 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006992:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	f003 030f 	and.w	r3, r3, #15
 800699c:	2101      	movs	r1, #1
 800699e:	fa01 f303 	lsl.w	r3, r1, r3
 80069a2:	69f9      	ldr	r1, [r7, #28]
 80069a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069a8:	4313      	orrs	r3, r2
 80069aa:	634b      	str	r3, [r1, #52]	@ 0x34
 80069ac:	e13c      	b.n	8006c28 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d110      	bne.n	80069e0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	015a      	lsls	r2, r3, #5
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	4413      	add	r3, r2
 80069c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	69ba      	ldr	r2, [r7, #24]
 80069ce:	0151      	lsls	r1, r2, #5
 80069d0:	69fa      	ldr	r2, [r7, #28]
 80069d2:	440a      	add	r2, r1
 80069d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80069dc:	6013      	str	r3, [r2, #0]
 80069de:	e00f      	b.n	8006a00 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	015a      	lsls	r2, r3, #5
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	0151      	lsls	r1, r2, #5
 80069f2:	69fa      	ldr	r2, [r7, #28]
 80069f4:	440a      	add	r2, r1
 80069f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069fe:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	68d9      	ldr	r1, [r3, #12]
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	781a      	ldrb	r2, [r3, #0]
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	b298      	uxth	r0, r3
 8006a0e:	79fb      	ldrb	r3, [r7, #7]
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	4603      	mov	r3, r0
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f000 f9b9 	bl	8006d8c <USB_WritePacket>
 8006a1a:	e105      	b.n	8006c28 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	015a      	lsls	r2, r3, #5
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	4413      	add	r3, r2
 8006a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	69ba      	ldr	r2, [r7, #24]
 8006a2c:	0151      	lsls	r1, r2, #5
 8006a2e:	69fa      	ldr	r2, [r7, #28]
 8006a30:	440a      	add	r2, r1
 8006a32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a36:	0cdb      	lsrs	r3, r3, #19
 8006a38:	04db      	lsls	r3, r3, #19
 8006a3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	69ba      	ldr	r2, [r7, #24]
 8006a4c:	0151      	lsls	r1, r2, #5
 8006a4e:	69fa      	ldr	r2, [r7, #28]
 8006a50:	440a      	add	r2, r1
 8006a52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a56:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006a5a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006a5e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d132      	bne.n	8006acc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d003      	beq.n	8006a76 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	689a      	ldr	r2, [r3, #8]
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	689a      	ldr	r2, [r3, #8]
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	015a      	lsls	r2, r3, #5
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	4413      	add	r3, r2
 8006a86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a8a:	691a      	ldr	r2, [r3, #16]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a94:	69b9      	ldr	r1, [r7, #24]
 8006a96:	0148      	lsls	r0, r1, #5
 8006a98:	69f9      	ldr	r1, [r7, #28]
 8006a9a:	4401      	add	r1, r0
 8006a9c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	015a      	lsls	r2, r3, #5
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	4413      	add	r3, r2
 8006aac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	0151      	lsls	r1, r2, #5
 8006ab6:	69fa      	ldr	r2, [r7, #28]
 8006ab8:	440a      	add	r2, r1
 8006aba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006abe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ac2:	6113      	str	r3, [r2, #16]
 8006ac4:	e062      	b.n	8006b8c <USB_EPStartXfer+0x490>
 8006ac6:	bf00      	nop
 8006ac8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d123      	bne.n	8006b1c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	69fb      	ldr	r3, [r7, #28]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ae0:	691a      	ldr	r2, [r3, #16]
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006aea:	69b9      	ldr	r1, [r7, #24]
 8006aec:	0148      	lsls	r0, r1, #5
 8006aee:	69f9      	ldr	r1, [r7, #28]
 8006af0:	4401      	add	r1, r0
 8006af2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006af6:	4313      	orrs	r3, r2
 8006af8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	015a      	lsls	r2, r3, #5
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	4413      	add	r3, r2
 8006b02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b06:	691b      	ldr	r3, [r3, #16]
 8006b08:	69ba      	ldr	r2, [r7, #24]
 8006b0a:	0151      	lsls	r1, r2, #5
 8006b0c:	69fa      	ldr	r2, [r7, #28]
 8006b0e:	440a      	add	r2, r1
 8006b10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b14:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006b18:	6113      	str	r3, [r2, #16]
 8006b1a:	e037      	b.n	8006b8c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	691a      	ldr	r2, [r3, #16]
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	4413      	add	r3, r2
 8006b26:	1e5a      	subs	r2, r3, #1
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b30:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	8afa      	ldrh	r2, [r7, #22]
 8006b38:	fb03 f202 	mul.w	r2, r3, r2
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b4c:	691a      	ldr	r2, [r3, #16]
 8006b4e:	8afb      	ldrh	r3, [r7, #22]
 8006b50:	04d9      	lsls	r1, r3, #19
 8006b52:	4b38      	ldr	r3, [pc, #224]	@ (8006c34 <USB_EPStartXfer+0x538>)
 8006b54:	400b      	ands	r3, r1
 8006b56:	69b9      	ldr	r1, [r7, #24]
 8006b58:	0148      	lsls	r0, r1, #5
 8006b5a:	69f9      	ldr	r1, [r7, #28]
 8006b5c:	4401      	add	r1, r0
 8006b5e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006b62:	4313      	orrs	r3, r2
 8006b64:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	015a      	lsls	r2, r3, #5
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b72:	691a      	ldr	r2, [r3, #16]
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b7c:	69b9      	ldr	r1, [r7, #24]
 8006b7e:	0148      	lsls	r0, r1, #5
 8006b80:	69f9      	ldr	r1, [r7, #28]
 8006b82:	4401      	add	r1, r0
 8006b84:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006b8c:	79fb      	ldrb	r3, [r7, #7]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d10d      	bne.n	8006bae <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d009      	beq.n	8006bae <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	68d9      	ldr	r1, [r3, #12]
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006baa:	460a      	mov	r2, r1
 8006bac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	791b      	ldrb	r3, [r3, #4]
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d128      	bne.n	8006c08 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d110      	bne.n	8006be8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	015a      	lsls	r2, r3, #5
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	4413      	add	r3, r2
 8006bce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	0151      	lsls	r1, r2, #5
 8006bd8:	69fa      	ldr	r2, [r7, #28]
 8006bda:	440a      	add	r2, r1
 8006bdc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006be0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006be4:	6013      	str	r3, [r2, #0]
 8006be6:	e00f      	b.n	8006c08 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	015a      	lsls	r2, r3, #5
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	4413      	add	r3, r2
 8006bf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	69ba      	ldr	r2, [r7, #24]
 8006bf8:	0151      	lsls	r1, r2, #5
 8006bfa:	69fa      	ldr	r2, [r7, #28]
 8006bfc:	440a      	add	r2, r1
 8006bfe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c06:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	015a      	lsls	r2, r3, #5
 8006c0c:	69fb      	ldr	r3, [r7, #28]
 8006c0e:	4413      	add	r3, r2
 8006c10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	69ba      	ldr	r2, [r7, #24]
 8006c18:	0151      	lsls	r1, r2, #5
 8006c1a:	69fa      	ldr	r2, [r7, #28]
 8006c1c:	440a      	add	r2, r1
 8006c1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c22:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006c26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c28:	2300      	movs	r3, #0
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	3720      	adds	r7, #32
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	1ff80000 	.word	0x1ff80000

08006c38 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c42:	2300      	movs	r3, #0
 8006c44:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	785b      	ldrb	r3, [r3, #1]
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d14a      	bne.n	8006cec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	015a      	lsls	r2, r3, #5
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	4413      	add	r3, r2
 8006c60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c6a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c6e:	f040 8086 	bne.w	8006d7e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	015a      	lsls	r2, r3, #5
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	683a      	ldr	r2, [r7, #0]
 8006c84:	7812      	ldrb	r2, [r2, #0]
 8006c86:	0151      	lsls	r1, r2, #5
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	440a      	add	r2, r1
 8006c8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006c90:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006c94:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	015a      	lsls	r2, r3, #5
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	683a      	ldr	r2, [r7, #0]
 8006ca8:	7812      	ldrb	r2, [r2, #0]
 8006caa:	0151      	lsls	r1, r2, #5
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	440a      	add	r2, r1
 8006cb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cb4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006cb8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d902      	bls.n	8006cd0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	75fb      	strb	r3, [r7, #23]
          break;
 8006cce:	e056      	b.n	8006d7e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	015a      	lsls	r2, r3, #5
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	4413      	add	r3, r2
 8006cda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ce4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ce8:	d0e7      	beq.n	8006cba <USB_EPStopXfer+0x82>
 8006cea:	e048      	b.n	8006d7e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	015a      	lsls	r2, r3, #5
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d00:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d04:	d13b      	bne.n	8006d7e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	015a      	lsls	r2, r3, #5
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	4413      	add	r3, r2
 8006d10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	683a      	ldr	r2, [r7, #0]
 8006d18:	7812      	ldrb	r2, [r2, #0]
 8006d1a:	0151      	lsls	r1, r2, #5
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	440a      	add	r2, r1
 8006d20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d24:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006d28:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	015a      	lsls	r2, r3, #5
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	4413      	add	r3, r2
 8006d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	683a      	ldr	r2, [r7, #0]
 8006d3c:	7812      	ldrb	r2, [r2, #0]
 8006d3e:	0151      	lsls	r1, r2, #5
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	440a      	add	r2, r1
 8006d44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006d4c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	3301      	adds	r3, #1
 8006d52:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d902      	bls.n	8006d64 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	75fb      	strb	r3, [r7, #23]
          break;
 8006d62:	e00c      	b.n	8006d7e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	015a      	lsls	r2, r3, #5
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d7c:	d0e7      	beq.n	8006d4e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	371c      	adds	r7, #28
 8006d84:	46bd      	mov	sp, r7
 8006d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8a:	4770      	bx	lr

08006d8c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006d8c:	b480      	push	{r7}
 8006d8e:	b089      	sub	sp, #36	@ 0x24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	4611      	mov	r1, r2
 8006d98:	461a      	mov	r2, r3
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	71fb      	strb	r3, [r7, #7]
 8006d9e:	4613      	mov	r3, r2
 8006da0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006daa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d123      	bne.n	8006dfa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006db2:	88bb      	ldrh	r3, [r7, #4]
 8006db4:	3303      	adds	r3, #3
 8006db6:	089b      	lsrs	r3, r3, #2
 8006db8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006dba:	2300      	movs	r3, #0
 8006dbc:	61bb      	str	r3, [r7, #24]
 8006dbe:	e018      	b.n	8006df2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006dc0:	79fb      	ldrb	r3, [r7, #7]
 8006dc2:	031a      	lsls	r2, r3, #12
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006dcc:	461a      	mov	r2, r3
 8006dce:	69fb      	ldr	r3, [r7, #28]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	3301      	adds	r3, #1
 8006de4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	3301      	adds	r3, #1
 8006dea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	3301      	adds	r3, #1
 8006df0:	61bb      	str	r3, [r7, #24]
 8006df2:	69ba      	ldr	r2, [r7, #24]
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d3e2      	bcc.n	8006dc0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3724      	adds	r7, #36	@ 0x24
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b08b      	sub	sp, #44	@ 0x2c
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	60b9      	str	r1, [r7, #8]
 8006e12:	4613      	mov	r3, r2
 8006e14:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006e1e:	88fb      	ldrh	r3, [r7, #6]
 8006e20:	089b      	lsrs	r3, r3, #2
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e26:	88fb      	ldrh	r3, [r7, #6]
 8006e28:	f003 0303 	and.w	r3, r3, #3
 8006e2c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e2e:	2300      	movs	r3, #0
 8006e30:	623b      	str	r3, [r7, #32]
 8006e32:	e014      	b.n	8006e5e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e3e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e42:	3301      	adds	r3, #1
 8006e44:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e48:	3301      	adds	r3, #1
 8006e4a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e4e:	3301      	adds	r3, #1
 8006e50:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e54:	3301      	adds	r3, #1
 8006e56:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006e58:	6a3b      	ldr	r3, [r7, #32]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	623b      	str	r3, [r7, #32]
 8006e5e:	6a3a      	ldr	r2, [r7, #32]
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d3e6      	bcc.n	8006e34 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006e66:	8bfb      	ldrh	r3, [r7, #30]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d01e      	beq.n	8006eaa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006e70:	69bb      	ldr	r3, [r7, #24]
 8006e72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e76:	461a      	mov	r2, r3
 8006e78:	f107 0310 	add.w	r3, r7, #16
 8006e7c:	6812      	ldr	r2, [r2, #0]
 8006e7e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	6a3b      	ldr	r3, [r7, #32]
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	00db      	lsls	r3, r3, #3
 8006e88:	fa22 f303 	lsr.w	r3, r2, r3
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e90:	701a      	strb	r2, [r3, #0]
      i++;
 8006e92:	6a3b      	ldr	r3, [r7, #32]
 8006e94:	3301      	adds	r3, #1
 8006e96:	623b      	str	r3, [r7, #32]
      pDest++;
 8006e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006e9e:	8bfb      	ldrh	r3, [r7, #30]
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006ea4:	8bfb      	ldrh	r3, [r7, #30]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1ea      	bne.n	8006e80 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	372c      	adds	r7, #44	@ 0x2c
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	785b      	ldrb	r3, [r3, #1]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d12c      	bne.n	8006f2e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	015a      	lsls	r2, r3, #5
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	db12      	blt.n	8006f0c <USB_EPSetStall+0x54>
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00f      	beq.n	8006f0c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	015a      	lsls	r2, r3, #5
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68ba      	ldr	r2, [r7, #8]
 8006efc:	0151      	lsls	r1, r2, #5
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	440a      	add	r2, r1
 8006f02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f06:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006f0a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	015a      	lsls	r2, r3, #5
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	0151      	lsls	r1, r2, #5
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	440a      	add	r2, r1
 8006f22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f2a:	6013      	str	r3, [r2, #0]
 8006f2c:	e02b      	b.n	8006f86 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	015a      	lsls	r2, r3, #5
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	db12      	blt.n	8006f66 <USB_EPSetStall+0xae>
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00f      	beq.n	8006f66 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	015a      	lsls	r2, r3, #5
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	0151      	lsls	r1, r2, #5
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	440a      	add	r2, r1
 8006f5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f60:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006f64:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	0151      	lsls	r1, r2, #5
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	440a      	add	r2, r1
 8006f7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006f80:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f84:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f86:	2300      	movs	r3, #0
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	785b      	ldrb	r3, [r3, #1]
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d128      	bne.n	8007002 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	015a      	lsls	r2, r3, #5
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	0151      	lsls	r1, r2, #5
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	440a      	add	r2, r1
 8006fc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006fce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	791b      	ldrb	r3, [r3, #4]
 8006fd4:	2b03      	cmp	r3, #3
 8006fd6:	d003      	beq.n	8006fe0 <USB_EPClearStall+0x4c>
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	791b      	ldrb	r3, [r3, #4]
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d138      	bne.n	8007052 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	015a      	lsls	r2, r3, #5
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	0151      	lsls	r1, r2, #5
 8006ff2:	68fa      	ldr	r2, [r7, #12]
 8006ff4:	440a      	add	r2, r1
 8006ff6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ffa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ffe:	6013      	str	r3, [r2, #0]
 8007000:	e027      	b.n	8007052 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	015a      	lsls	r2, r3, #5
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	4413      	add	r3, r2
 800700a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	0151      	lsls	r1, r2, #5
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	440a      	add	r2, r1
 8007018:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800701c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007020:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	791b      	ldrb	r3, [r3, #4]
 8007026:	2b03      	cmp	r3, #3
 8007028:	d003      	beq.n	8007032 <USB_EPClearStall+0x9e>
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	791b      	ldrb	r3, [r3, #4]
 800702e:	2b02      	cmp	r3, #2
 8007030:	d10f      	bne.n	8007052 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	015a      	lsls	r2, r3, #5
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	4413      	add	r3, r2
 800703a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68ba      	ldr	r2, [r7, #8]
 8007042:	0151      	lsls	r1, r2, #5
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	440a      	add	r2, r1
 8007048:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800704c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007050:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3714      	adds	r7, #20
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	460b      	mov	r3, r1
 800706a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800707e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007082:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	78fb      	ldrb	r3, [r7, #3]
 800708e:	011b      	lsls	r3, r3, #4
 8007090:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007094:	68f9      	ldr	r1, [r7, #12]
 8007096:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800709a:	4313      	orrs	r3, r2
 800709c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3714      	adds	r7, #20
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80070c6:	f023 0303 	bic.w	r3, r3, #3
 80070ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80070da:	f023 0302 	bic.w	r3, r3, #2
 80070de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3714      	adds	r7, #20
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80070ee:	b480      	push	{r7}
 80070f0:	b085      	sub	sp, #20
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007108:	f023 0303 	bic.w	r3, r3, #3
 800710c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800711c:	f043 0302 	orr.w	r3, r3, #2
 8007120:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007122:	2300      	movs	r3, #0
}
 8007124:	4618      	mov	r0, r3
 8007126:	3714      	adds	r7, #20
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007130:	b480      	push	{r7}
 8007132:	b085      	sub	sp, #20
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	695b      	ldr	r3, [r3, #20]
 800713c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	699b      	ldr	r3, [r3, #24]
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	4013      	ands	r3, r2
 8007146:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007148:	68fb      	ldr	r3, [r7, #12]
}
 800714a:	4618      	mov	r0, r3
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr

08007156 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007156:	b480      	push	{r7}
 8007158:	b085      	sub	sp, #20
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007172:	69db      	ldr	r3, [r3, #28]
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	4013      	ands	r3, r2
 8007178:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	0c1b      	lsrs	r3, r3, #16
}
 800717e:	4618      	mov	r0, r3
 8007180:	3714      	adds	r7, #20
 8007182:	46bd      	mov	sp, r7
 8007184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007188:	4770      	bx	lr

0800718a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800718a:	b480      	push	{r7}
 800718c:	b085      	sub	sp, #20
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071a6:	69db      	ldr	r3, [r3, #28]
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	4013      	ands	r3, r2
 80071ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	b29b      	uxth	r3, r3
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3714      	adds	r7, #20
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80071be:	b480      	push	{r7}
 80071c0:	b085      	sub	sp, #20
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	460b      	mov	r3, r1
 80071c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80071ce:	78fb      	ldrb	r3, [r7, #3]
 80071d0:	015a      	lsls	r2, r3, #5
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	4413      	add	r3, r2
 80071d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071e4:	695b      	ldr	r3, [r3, #20]
 80071e6:	68ba      	ldr	r2, [r7, #8]
 80071e8:	4013      	ands	r3, r2
 80071ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80071ec:	68bb      	ldr	r3, [r7, #8]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3714      	adds	r7, #20
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80071fa:	b480      	push	{r7}
 80071fc:	b087      	sub	sp, #28
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
 8007202:	460b      	mov	r3, r1
 8007204:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800721a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800721c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800721e:	78fb      	ldrb	r3, [r7, #3]
 8007220:	f003 030f 	and.w	r3, r3, #15
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	fa22 f303 	lsr.w	r3, r2, r3
 800722a:	01db      	lsls	r3, r3, #7
 800722c:	b2db      	uxtb	r3, r3
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	4313      	orrs	r3, r2
 8007232:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007234:	78fb      	ldrb	r3, [r7, #3]
 8007236:	015a      	lsls	r2, r3, #5
 8007238:	697b      	ldr	r3, [r7, #20]
 800723a:	4413      	add	r3, r2
 800723c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	693a      	ldr	r2, [r7, #16]
 8007244:	4013      	ands	r3, r2
 8007246:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007248:	68bb      	ldr	r3, [r7, #8]
}
 800724a:	4618      	mov	r0, r3
 800724c:	371c      	adds	r7, #28
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007256:	b480      	push	{r7}
 8007258:	b083      	sub	sp, #12
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	695b      	ldr	r3, [r3, #20]
 8007262:	f003 0301 	and.w	r3, r3, #1
}
 8007266:	4618      	mov	r0, r3
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007272:	b480      	push	{r7}
 8007274:	b085      	sub	sp, #20
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800728c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007290:	f023 0307 	bic.w	r3, r3, #7
 8007294:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	68fa      	ldr	r2, [r7, #12]
 80072a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80072aa:	2300      	movs	r3, #0
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3714      	adds	r7, #20
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	460b      	mov	r3, r1
 80072c2:	607a      	str	r2, [r7, #4]
 80072c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	333c      	adds	r3, #60	@ 0x3c
 80072ce:	3304      	adds	r3, #4
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	4a26      	ldr	r2, [pc, #152]	@ (8007370 <USB_EP0_OutStart+0xb8>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d90a      	bls.n	80072f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072ec:	d101      	bne.n	80072f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80072ee:	2300      	movs	r3, #0
 80072f0:	e037      	b.n	8007362 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072f8:	461a      	mov	r2, r3
 80072fa:	2300      	movs	r3, #0
 80072fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800730c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007310:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	697a      	ldr	r2, [r7, #20]
 800731c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007320:	f043 0318 	orr.w	r3, r3, #24
 8007324:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800732c:	691b      	ldr	r3, [r3, #16]
 800732e:	697a      	ldr	r2, [r7, #20]
 8007330:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007334:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007338:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800733a:	7afb      	ldrb	r3, [r7, #11]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d10f      	bne.n	8007360 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007346:	461a      	mov	r2, r3
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800735a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800735e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	371c      	adds	r7, #28
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	4f54300a 	.word	0x4f54300a

08007374 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800737c:	2300      	movs	r3, #0
 800737e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	3301      	adds	r3, #1
 8007384:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800738c:	d901      	bls.n	8007392 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	e01b      	b.n	80073ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	2b00      	cmp	r3, #0
 8007398:	daf2      	bge.n	8007380 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800739a:	2300      	movs	r3, #0
 800739c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	f043 0201 	orr.w	r2, r3, #1
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	3301      	adds	r3, #1
 80073ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80073b6:	d901      	bls.n	80073bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e006      	b.n	80073ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	691b      	ldr	r3, [r3, #16]
 80073c0:	f003 0301 	and.w	r3, r3, #1
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d0f0      	beq.n	80073aa <USB_CoreReset+0x36>

  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3714      	adds	r7, #20
 80073ce:	46bd      	mov	sp, r7
 80073d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d4:	4770      	bx	lr
	...

080073d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	460b      	mov	r3, r1
 80073e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80073e4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80073e8:	f002 fc2e 	bl	8009c48 <USBD_static_malloc>
 80073ec:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d109      	bne.n	8007408 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	32b0      	adds	r2, #176	@ 0xb0
 80073fe:	2100      	movs	r1, #0
 8007400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007404:	2302      	movs	r3, #2
 8007406:	e0d4      	b.n	80075b2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007408:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800740c:	2100      	movs	r1, #0
 800740e:	68f8      	ldr	r0, [r7, #12]
 8007410:	f002 fc5e 	bl	8009cd0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	32b0      	adds	r2, #176	@ 0xb0
 800741e:	68f9      	ldr	r1, [r7, #12]
 8007420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	32b0      	adds	r2, #176	@ 0xb0
 800742e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	7c1b      	ldrb	r3, [r3, #16]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d138      	bne.n	80074b2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007440:	4b5e      	ldr	r3, [pc, #376]	@ (80075bc <USBD_CDC_Init+0x1e4>)
 8007442:	7819      	ldrb	r1, [r3, #0]
 8007444:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007448:	2202      	movs	r2, #2
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f002 fad9 	bl	8009a02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007450:	4b5a      	ldr	r3, [pc, #360]	@ (80075bc <USBD_CDC_Init+0x1e4>)
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	f003 020f 	and.w	r2, r3, #15
 8007458:	6879      	ldr	r1, [r7, #4]
 800745a:	4613      	mov	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4413      	add	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	440b      	add	r3, r1
 8007464:	3324      	adds	r3, #36	@ 0x24
 8007466:	2201      	movs	r2, #1
 8007468:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800746a:	4b55      	ldr	r3, [pc, #340]	@ (80075c0 <USBD_CDC_Init+0x1e8>)
 800746c:	7819      	ldrb	r1, [r3, #0]
 800746e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007472:	2202      	movs	r2, #2
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f002 fac4 	bl	8009a02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800747a:	4b51      	ldr	r3, [pc, #324]	@ (80075c0 <USBD_CDC_Init+0x1e8>)
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	f003 020f 	and.w	r2, r3, #15
 8007482:	6879      	ldr	r1, [r7, #4]
 8007484:	4613      	mov	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	4413      	add	r3, r2
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	440b      	add	r3, r1
 800748e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007492:	2201      	movs	r2, #1
 8007494:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007496:	4b4b      	ldr	r3, [pc, #300]	@ (80075c4 <USBD_CDC_Init+0x1ec>)
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	f003 020f 	and.w	r2, r3, #15
 800749e:	6879      	ldr	r1, [r7, #4]
 80074a0:	4613      	mov	r3, r2
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	4413      	add	r3, r2
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	440b      	add	r3, r1
 80074aa:	3326      	adds	r3, #38	@ 0x26
 80074ac:	2210      	movs	r2, #16
 80074ae:	801a      	strh	r2, [r3, #0]
 80074b0:	e035      	b.n	800751e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80074b2:	4b42      	ldr	r3, [pc, #264]	@ (80075bc <USBD_CDC_Init+0x1e4>)
 80074b4:	7819      	ldrb	r1, [r3, #0]
 80074b6:	2340      	movs	r3, #64	@ 0x40
 80074b8:	2202      	movs	r2, #2
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f002 faa1 	bl	8009a02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80074c0:	4b3e      	ldr	r3, [pc, #248]	@ (80075bc <USBD_CDC_Init+0x1e4>)
 80074c2:	781b      	ldrb	r3, [r3, #0]
 80074c4:	f003 020f 	and.w	r2, r3, #15
 80074c8:	6879      	ldr	r1, [r7, #4]
 80074ca:	4613      	mov	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	4413      	add	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	440b      	add	r3, r1
 80074d4:	3324      	adds	r3, #36	@ 0x24
 80074d6:	2201      	movs	r2, #1
 80074d8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80074da:	4b39      	ldr	r3, [pc, #228]	@ (80075c0 <USBD_CDC_Init+0x1e8>)
 80074dc:	7819      	ldrb	r1, [r3, #0]
 80074de:	2340      	movs	r3, #64	@ 0x40
 80074e0:	2202      	movs	r2, #2
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f002 fa8d 	bl	8009a02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80074e8:	4b35      	ldr	r3, [pc, #212]	@ (80075c0 <USBD_CDC_Init+0x1e8>)
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	f003 020f 	and.w	r2, r3, #15
 80074f0:	6879      	ldr	r1, [r7, #4]
 80074f2:	4613      	mov	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4413      	add	r3, r2
 80074f8:	009b      	lsls	r3, r3, #2
 80074fa:	440b      	add	r3, r1
 80074fc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007500:	2201      	movs	r2, #1
 8007502:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007504:	4b2f      	ldr	r3, [pc, #188]	@ (80075c4 <USBD_CDC_Init+0x1ec>)
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	f003 020f 	and.w	r2, r3, #15
 800750c:	6879      	ldr	r1, [r7, #4]
 800750e:	4613      	mov	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	4413      	add	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	440b      	add	r3, r1
 8007518:	3326      	adds	r3, #38	@ 0x26
 800751a:	2210      	movs	r2, #16
 800751c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800751e:	4b29      	ldr	r3, [pc, #164]	@ (80075c4 <USBD_CDC_Init+0x1ec>)
 8007520:	7819      	ldrb	r1, [r3, #0]
 8007522:	2308      	movs	r3, #8
 8007524:	2203      	movs	r2, #3
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f002 fa6b 	bl	8009a02 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800752c:	4b25      	ldr	r3, [pc, #148]	@ (80075c4 <USBD_CDC_Init+0x1ec>)
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	f003 020f 	and.w	r2, r3, #15
 8007534:	6879      	ldr	r1, [r7, #4]
 8007536:	4613      	mov	r3, r2
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	4413      	add	r3, r2
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	440b      	add	r3, r1
 8007540:	3324      	adds	r3, #36	@ 0x24
 8007542:	2201      	movs	r2, #1
 8007544:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	33b0      	adds	r3, #176	@ 0xb0
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800757c:	2302      	movs	r3, #2
 800757e:	e018      	b.n	80075b2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	7c1b      	ldrb	r3, [r3, #16]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d10a      	bne.n	800759e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007588:	4b0d      	ldr	r3, [pc, #52]	@ (80075c0 <USBD_CDC_Init+0x1e8>)
 800758a:	7819      	ldrb	r1, [r3, #0]
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007592:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f002 fb22 	bl	8009be0 <USBD_LL_PrepareReceive>
 800759c:	e008      	b.n	80075b0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800759e:	4b08      	ldr	r3, [pc, #32]	@ (80075c0 <USBD_CDC_Init+0x1e8>)
 80075a0:	7819      	ldrb	r1, [r3, #0]
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80075a8:	2340      	movs	r3, #64	@ 0x40
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f002 fb18 	bl	8009be0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80075b0:	2300      	movs	r3, #0
}
 80075b2:	4618      	mov	r0, r3
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	20000117 	.word	0x20000117
 80075c0:	20000118 	.word	0x20000118
 80075c4:	20000119 	.word	0x20000119

080075c8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	460b      	mov	r3, r1
 80075d2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80075d4:	4b3a      	ldr	r3, [pc, #232]	@ (80076c0 <USBD_CDC_DeInit+0xf8>)
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	4619      	mov	r1, r3
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f002 fa37 	bl	8009a4e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80075e0:	4b37      	ldr	r3, [pc, #220]	@ (80076c0 <USBD_CDC_DeInit+0xf8>)
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	f003 020f 	and.w	r2, r3, #15
 80075e8:	6879      	ldr	r1, [r7, #4]
 80075ea:	4613      	mov	r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	4413      	add	r3, r2
 80075f0:	009b      	lsls	r3, r3, #2
 80075f2:	440b      	add	r3, r1
 80075f4:	3324      	adds	r3, #36	@ 0x24
 80075f6:	2200      	movs	r2, #0
 80075f8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80075fa:	4b32      	ldr	r3, [pc, #200]	@ (80076c4 <USBD_CDC_DeInit+0xfc>)
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	4619      	mov	r1, r3
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f002 fa24 	bl	8009a4e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007606:	4b2f      	ldr	r3, [pc, #188]	@ (80076c4 <USBD_CDC_DeInit+0xfc>)
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	f003 020f 	and.w	r2, r3, #15
 800760e:	6879      	ldr	r1, [r7, #4]
 8007610:	4613      	mov	r3, r2
 8007612:	009b      	lsls	r3, r3, #2
 8007614:	4413      	add	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	440b      	add	r3, r1
 800761a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800761e:	2200      	movs	r2, #0
 8007620:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007622:	4b29      	ldr	r3, [pc, #164]	@ (80076c8 <USBD_CDC_DeInit+0x100>)
 8007624:	781b      	ldrb	r3, [r3, #0]
 8007626:	4619      	mov	r1, r3
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f002 fa10 	bl	8009a4e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800762e:	4b26      	ldr	r3, [pc, #152]	@ (80076c8 <USBD_CDC_DeInit+0x100>)
 8007630:	781b      	ldrb	r3, [r3, #0]
 8007632:	f003 020f 	and.w	r2, r3, #15
 8007636:	6879      	ldr	r1, [r7, #4]
 8007638:	4613      	mov	r3, r2
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	4413      	add	r3, r2
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	440b      	add	r3, r1
 8007642:	3324      	adds	r3, #36	@ 0x24
 8007644:	2200      	movs	r2, #0
 8007646:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007648:	4b1f      	ldr	r3, [pc, #124]	@ (80076c8 <USBD_CDC_DeInit+0x100>)
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	f003 020f 	and.w	r2, r3, #15
 8007650:	6879      	ldr	r1, [r7, #4]
 8007652:	4613      	mov	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	4413      	add	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	440b      	add	r3, r1
 800765c:	3326      	adds	r3, #38	@ 0x26
 800765e:	2200      	movs	r2, #0
 8007660:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	32b0      	adds	r2, #176	@ 0xb0
 800766c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d01f      	beq.n	80076b4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	33b0      	adds	r3, #176	@ 0xb0
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	4413      	add	r3, r2
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	32b0      	adds	r2, #176	@ 0xb0
 8007692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007696:	4618      	mov	r0, r3
 8007698:	f002 fae4 	bl	8009c64 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	32b0      	adds	r2, #176	@ 0xb0
 80076a6:	2100      	movs	r1, #0
 80076a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
 80076be:	bf00      	nop
 80076c0:	20000117 	.word	0x20000117
 80076c4:	20000118 	.word	0x20000118
 80076c8:	20000119 	.word	0x20000119

080076cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	32b0      	adds	r2, #176	@ 0xb0
 80076e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076e4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80076e6:	2300      	movs	r3, #0
 80076e8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80076ea:	2300      	movs	r3, #0
 80076ec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80076ee:	2300      	movs	r3, #0
 80076f0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d101      	bne.n	80076fc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80076f8:	2303      	movs	r3, #3
 80076fa:	e0bf      	b.n	800787c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007704:	2b00      	cmp	r3, #0
 8007706:	d050      	beq.n	80077aa <USBD_CDC_Setup+0xde>
 8007708:	2b20      	cmp	r3, #32
 800770a:	f040 80af 	bne.w	800786c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	88db      	ldrh	r3, [r3, #6]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d03a      	beq.n	800778c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	b25b      	sxtb	r3, r3
 800771c:	2b00      	cmp	r3, #0
 800771e:	da1b      	bge.n	8007758 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	33b0      	adds	r3, #176	@ 0xb0
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4413      	add	r3, r2
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	689b      	ldr	r3, [r3, #8]
 8007732:	683a      	ldr	r2, [r7, #0]
 8007734:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007736:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007738:	683a      	ldr	r2, [r7, #0]
 800773a:	88d2      	ldrh	r2, [r2, #6]
 800773c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	88db      	ldrh	r3, [r3, #6]
 8007742:	2b07      	cmp	r3, #7
 8007744:	bf28      	it	cs
 8007746:	2307      	movcs	r3, #7
 8007748:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	89fa      	ldrh	r2, [r7, #14]
 800774e:	4619      	mov	r1, r3
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f001 fd53 	bl	80091fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007756:	e090      	b.n	800787a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	785a      	ldrb	r2, [r3, #1]
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	88db      	ldrh	r3, [r3, #6]
 8007766:	2b3f      	cmp	r3, #63	@ 0x3f
 8007768:	d803      	bhi.n	8007772 <USBD_CDC_Setup+0xa6>
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	88db      	ldrh	r3, [r3, #6]
 800776e:	b2da      	uxtb	r2, r3
 8007770:	e000      	b.n	8007774 <USBD_CDC_Setup+0xa8>
 8007772:	2240      	movs	r2, #64	@ 0x40
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800777a:	6939      	ldr	r1, [r7, #16]
 800777c:	693b      	ldr	r3, [r7, #16]
 800777e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007782:	461a      	mov	r2, r3
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f001 fd65 	bl	8009254 <USBD_CtlPrepareRx>
      break;
 800778a:	e076      	b.n	800787a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	33b0      	adds	r3, #176	@ 0xb0
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	4413      	add	r3, r2
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	7850      	ldrb	r0, [r2, #1]
 80077a2:	2200      	movs	r2, #0
 80077a4:	6839      	ldr	r1, [r7, #0]
 80077a6:	4798      	blx	r3
      break;
 80077a8:	e067      	b.n	800787a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	785b      	ldrb	r3, [r3, #1]
 80077ae:	2b0b      	cmp	r3, #11
 80077b0:	d851      	bhi.n	8007856 <USBD_CDC_Setup+0x18a>
 80077b2:	a201      	add	r2, pc, #4	@ (adr r2, 80077b8 <USBD_CDC_Setup+0xec>)
 80077b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b8:	080077e9 	.word	0x080077e9
 80077bc:	08007865 	.word	0x08007865
 80077c0:	08007857 	.word	0x08007857
 80077c4:	08007857 	.word	0x08007857
 80077c8:	08007857 	.word	0x08007857
 80077cc:	08007857 	.word	0x08007857
 80077d0:	08007857 	.word	0x08007857
 80077d4:	08007857 	.word	0x08007857
 80077d8:	08007857 	.word	0x08007857
 80077dc:	08007857 	.word	0x08007857
 80077e0:	08007813 	.word	0x08007813
 80077e4:	0800783d 	.word	0x0800783d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	2b03      	cmp	r3, #3
 80077f2:	d107      	bne.n	8007804 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80077f4:	f107 030a 	add.w	r3, r7, #10
 80077f8:	2202      	movs	r2, #2
 80077fa:	4619      	mov	r1, r3
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f001 fcfd 	bl	80091fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007802:	e032      	b.n	800786a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007804:	6839      	ldr	r1, [r7, #0]
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f001 fc7b 	bl	8009102 <USBD_CtlError>
            ret = USBD_FAIL;
 800780c:	2303      	movs	r3, #3
 800780e:	75fb      	strb	r3, [r7, #23]
          break;
 8007810:	e02b      	b.n	800786a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007818:	b2db      	uxtb	r3, r3
 800781a:	2b03      	cmp	r3, #3
 800781c:	d107      	bne.n	800782e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800781e:	f107 030d 	add.w	r3, r7, #13
 8007822:	2201      	movs	r2, #1
 8007824:	4619      	mov	r1, r3
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f001 fce8 	bl	80091fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800782c:	e01d      	b.n	800786a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f001 fc66 	bl	8009102 <USBD_CtlError>
            ret = USBD_FAIL;
 8007836:	2303      	movs	r3, #3
 8007838:	75fb      	strb	r3, [r7, #23]
          break;
 800783a:	e016      	b.n	800786a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007842:	b2db      	uxtb	r3, r3
 8007844:	2b03      	cmp	r3, #3
 8007846:	d00f      	beq.n	8007868 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007848:	6839      	ldr	r1, [r7, #0]
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f001 fc59 	bl	8009102 <USBD_CtlError>
            ret = USBD_FAIL;
 8007850:	2303      	movs	r3, #3
 8007852:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007854:	e008      	b.n	8007868 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007856:	6839      	ldr	r1, [r7, #0]
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f001 fc52 	bl	8009102 <USBD_CtlError>
          ret = USBD_FAIL;
 800785e:	2303      	movs	r3, #3
 8007860:	75fb      	strb	r3, [r7, #23]
          break;
 8007862:	e002      	b.n	800786a <USBD_CDC_Setup+0x19e>
          break;
 8007864:	bf00      	nop
 8007866:	e008      	b.n	800787a <USBD_CDC_Setup+0x1ae>
          break;
 8007868:	bf00      	nop
      }
      break;
 800786a:	e006      	b.n	800787a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800786c:	6839      	ldr	r1, [r7, #0]
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f001 fc47 	bl	8009102 <USBD_CtlError>
      ret = USBD_FAIL;
 8007874:	2303      	movs	r3, #3
 8007876:	75fb      	strb	r3, [r7, #23]
      break;
 8007878:	bf00      	nop
  }

  return (uint8_t)ret;
 800787a:	7dfb      	ldrb	r3, [r7, #23]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3718      	adds	r7, #24
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	460b      	mov	r3, r1
 800788e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007896:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	32b0      	adds	r2, #176	@ 0xb0
 80078a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d101      	bne.n	80078ae <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80078aa:	2303      	movs	r3, #3
 80078ac:	e065      	b.n	800797a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	32b0      	adds	r2, #176	@ 0xb0
 80078b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078bc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80078be:	78fb      	ldrb	r3, [r7, #3]
 80078c0:	f003 020f 	and.w	r2, r3, #15
 80078c4:	6879      	ldr	r1, [r7, #4]
 80078c6:	4613      	mov	r3, r2
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	4413      	add	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	440b      	add	r3, r1
 80078d0:	3318      	adds	r3, #24
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d02f      	beq.n	8007938 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80078d8:	78fb      	ldrb	r3, [r7, #3]
 80078da:	f003 020f 	and.w	r2, r3, #15
 80078de:	6879      	ldr	r1, [r7, #4]
 80078e0:	4613      	mov	r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	4413      	add	r3, r2
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	440b      	add	r3, r1
 80078ea:	3318      	adds	r3, #24
 80078ec:	681a      	ldr	r2, [r3, #0]
 80078ee:	78fb      	ldrb	r3, [r7, #3]
 80078f0:	f003 010f 	and.w	r1, r3, #15
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	460b      	mov	r3, r1
 80078f8:	00db      	lsls	r3, r3, #3
 80078fa:	440b      	add	r3, r1
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4403      	add	r3, r0
 8007900:	331c      	adds	r3, #28
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	fbb2 f1f3 	udiv	r1, r2, r3
 8007908:	fb01 f303 	mul.w	r3, r1, r3
 800790c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800790e:	2b00      	cmp	r3, #0
 8007910:	d112      	bne.n	8007938 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007912:	78fb      	ldrb	r3, [r7, #3]
 8007914:	f003 020f 	and.w	r2, r3, #15
 8007918:	6879      	ldr	r1, [r7, #4]
 800791a:	4613      	mov	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4413      	add	r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	440b      	add	r3, r1
 8007924:	3318      	adds	r3, #24
 8007926:	2200      	movs	r2, #0
 8007928:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800792a:	78f9      	ldrb	r1, [r7, #3]
 800792c:	2300      	movs	r3, #0
 800792e:	2200      	movs	r2, #0
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f002 f934 	bl	8009b9e <USBD_LL_Transmit>
 8007936:	e01f      	b.n	8007978 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2200      	movs	r2, #0
 800793c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	33b0      	adds	r3, #176	@ 0xb0
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	4413      	add	r3, r2
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	691b      	ldr	r3, [r3, #16]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d010      	beq.n	8007978 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800795c:	687a      	ldr	r2, [r7, #4]
 800795e:	33b0      	adds	r3, #176	@ 0xb0
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4413      	add	r3, r2
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	691b      	ldr	r3, [r3, #16]
 8007968:	68ba      	ldr	r2, [r7, #8]
 800796a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800796e:	68ba      	ldr	r2, [r7, #8]
 8007970:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007974:	78fa      	ldrb	r2, [r7, #3]
 8007976:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3710      	adds	r7, #16
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b084      	sub	sp, #16
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	460b      	mov	r3, r1
 800798c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	32b0      	adds	r2, #176	@ 0xb0
 8007998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800799c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	32b0      	adds	r2, #176	@ 0xb0
 80079a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d101      	bne.n	80079b4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80079b0:	2303      	movs	r3, #3
 80079b2:	e01a      	b.n	80079ea <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80079b4:	78fb      	ldrb	r3, [r7, #3]
 80079b6:	4619      	mov	r1, r3
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f002 f932 	bl	8009c22 <USBD_LL_GetRxDataSize>
 80079be:	4602      	mov	r2, r0
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	33b0      	adds	r3, #176	@ 0xb0
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4413      	add	r3, r2
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80079e4:	4611      	mov	r1, r2
 80079e6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b084      	sub	sp, #16
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	32b0      	adds	r2, #176	@ 0xb0
 8007a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a08:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d101      	bne.n	8007a14 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007a10:	2303      	movs	r3, #3
 8007a12:	e024      	b.n	8007a5e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	33b0      	adds	r3, #176	@ 0xb0
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	4413      	add	r3, r2
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d019      	beq.n	8007a5c <USBD_CDC_EP0_RxReady+0x6a>
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007a2e:	2bff      	cmp	r3, #255	@ 0xff
 8007a30:	d014      	beq.n	8007a5c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	33b0      	adds	r3, #176	@ 0xb0
 8007a3c:	009b      	lsls	r3, r3, #2
 8007a3e:	4413      	add	r3, r2
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007a4a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007a52:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	22ff      	movs	r2, #255	@ 0xff
 8007a58:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
	...

08007a68 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b086      	sub	sp, #24
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007a70:	2182      	movs	r1, #130	@ 0x82
 8007a72:	4818      	ldr	r0, [pc, #96]	@ (8007ad4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007a74:	f000 fd0f 	bl	8008496 <USBD_GetEpDesc>
 8007a78:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007a7a:	2101      	movs	r1, #1
 8007a7c:	4815      	ldr	r0, [pc, #84]	@ (8007ad4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007a7e:	f000 fd0a 	bl	8008496 <USBD_GetEpDesc>
 8007a82:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007a84:	2181      	movs	r1, #129	@ 0x81
 8007a86:	4813      	ldr	r0, [pc, #76]	@ (8007ad4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007a88:	f000 fd05 	bl	8008496 <USBD_GetEpDesc>
 8007a8c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d002      	beq.n	8007a9a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	2210      	movs	r2, #16
 8007a98:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d006      	beq.n	8007aae <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007aa8:	711a      	strb	r2, [r3, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d006      	beq.n	8007ac2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007abc:	711a      	strb	r2, [r3, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2243      	movs	r2, #67	@ 0x43
 8007ac6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ac8:	4b02      	ldr	r3, [pc, #8]	@ (8007ad4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3718      	adds	r7, #24
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	200000d4 	.word	0x200000d4

08007ad8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b086      	sub	sp, #24
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007ae0:	2182      	movs	r1, #130	@ 0x82
 8007ae2:	4818      	ldr	r0, [pc, #96]	@ (8007b44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007ae4:	f000 fcd7 	bl	8008496 <USBD_GetEpDesc>
 8007ae8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007aea:	2101      	movs	r1, #1
 8007aec:	4815      	ldr	r0, [pc, #84]	@ (8007b44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007aee:	f000 fcd2 	bl	8008496 <USBD_GetEpDesc>
 8007af2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007af4:	2181      	movs	r1, #129	@ 0x81
 8007af6:	4813      	ldr	r0, [pc, #76]	@ (8007b44 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007af8:	f000 fccd 	bl	8008496 <USBD_GetEpDesc>
 8007afc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d002      	beq.n	8007b0a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	2210      	movs	r2, #16
 8007b08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d006      	beq.n	8007b1e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	2200      	movs	r2, #0
 8007b14:	711a      	strb	r2, [r3, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	f042 0202 	orr.w	r2, r2, #2
 8007b1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d006      	beq.n	8007b32 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2200      	movs	r2, #0
 8007b28:	711a      	strb	r2, [r3, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f042 0202 	orr.w	r2, r2, #2
 8007b30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2243      	movs	r2, #67	@ 0x43
 8007b36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007b38:	4b02      	ldr	r3, [pc, #8]	@ (8007b44 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3718      	adds	r7, #24
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	200000d4 	.word	0x200000d4

08007b48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007b50:	2182      	movs	r1, #130	@ 0x82
 8007b52:	4818      	ldr	r0, [pc, #96]	@ (8007bb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007b54:	f000 fc9f 	bl	8008496 <USBD_GetEpDesc>
 8007b58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007b5a:	2101      	movs	r1, #1
 8007b5c:	4815      	ldr	r0, [pc, #84]	@ (8007bb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007b5e:	f000 fc9a 	bl	8008496 <USBD_GetEpDesc>
 8007b62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007b64:	2181      	movs	r1, #129	@ 0x81
 8007b66:	4813      	ldr	r0, [pc, #76]	@ (8007bb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007b68:	f000 fc95 	bl	8008496 <USBD_GetEpDesc>
 8007b6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d002      	beq.n	8007b7a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	2210      	movs	r2, #16
 8007b78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d006      	beq.n	8007b8e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	2200      	movs	r2, #0
 8007b84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b88:	711a      	strb	r2, [r3, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d006      	beq.n	8007ba2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b9c:	711a      	strb	r2, [r3, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2243      	movs	r2, #67	@ 0x43
 8007ba6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007ba8:	4b02      	ldr	r3, [pc, #8]	@ (8007bb4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3718      	adds	r7, #24
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop
 8007bb4:	200000d4 	.word	0x200000d4

08007bb8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	220a      	movs	r2, #10
 8007bc4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007bc6:	4b03      	ldr	r3, [pc, #12]	@ (8007bd4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007bc8:	4618      	mov	r0, r3
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr
 8007bd4:	20000090 	.word	0x20000090

08007bd8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d101      	bne.n	8007bec <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007be8:	2303      	movs	r3, #3
 8007bea:	e009      	b.n	8007c00 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	33b0      	adds	r3, #176	@ 0xb0
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	683a      	ldr	r2, [r7, #0]
 8007bfc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b087      	sub	sp, #28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	32b0      	adds	r2, #176	@ 0xb0
 8007c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c26:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d101      	bne.n	8007c32 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e008      	b.n	8007c44 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	68ba      	ldr	r2, [r7, #8]
 8007c36:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8007c42:	2300      	movs	r3, #0
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	371c      	adds	r7, #28
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b085      	sub	sp, #20
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	32b0      	adds	r2, #176	@ 0xb0
 8007c64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c68:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d101      	bne.n	8007c74 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007c70:	2303      	movs	r3, #3
 8007c72:	e004      	b.n	8007c7e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	683a      	ldr	r2, [r7, #0]
 8007c78:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3714      	adds	r7, #20
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
	...

08007c8c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	32b0      	adds	r2, #176	@ 0xb0
 8007c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ca2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	32b0      	adds	r2, #176	@ 0xb0
 8007cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d101      	bne.n	8007cba <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e018      	b.n	8007cec <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	7c1b      	ldrb	r3, [r3, #16]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d10a      	bne.n	8007cd8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8007cf4 <USBD_CDC_ReceivePacket+0x68>)
 8007cc4:	7819      	ldrb	r1, [r3, #0]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007ccc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f001 ff85 	bl	8009be0 <USBD_LL_PrepareReceive>
 8007cd6:	e008      	b.n	8007cea <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007cd8:	4b06      	ldr	r3, [pc, #24]	@ (8007cf4 <USBD_CDC_ReceivePacket+0x68>)
 8007cda:	7819      	ldrb	r1, [r3, #0]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007ce2:	2340      	movs	r3, #64	@ 0x40
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f001 ff7b 	bl	8009be0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007cea:	2300      	movs	r3, #0
}
 8007cec:	4618      	mov	r0, r3
 8007cee:	3710      	adds	r7, #16
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	bd80      	pop	{r7, pc}
 8007cf4:	20000118 	.word	0x20000118

08007cf8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b086      	sub	sp, #24
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	4613      	mov	r3, r2
 8007d04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d101      	bne.n	8007d10 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007d0c:	2303      	movs	r3, #3
 8007d0e:	e01f      	b.n	8007d50 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2200      	movs	r2, #0
 8007d24:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d003      	beq.n	8007d36 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	79fa      	ldrb	r2, [r7, #7]
 8007d42:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f001 fdf5 	bl	8009934 <USBD_LL_Init>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3718      	adds	r7, #24
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d62:	2300      	movs	r3, #0
 8007d64:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d101      	bne.n	8007d70 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007d6c:	2303      	movs	r3, #3
 8007d6e:	e025      	b.n	8007dbc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	683a      	ldr	r2, [r7, #0]
 8007d74:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	32ae      	adds	r2, #174	@ 0xae
 8007d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00f      	beq.n	8007dac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	32ae      	adds	r2, #174	@ 0xae
 8007d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d9c:	f107 020e 	add.w	r2, r7, #14
 8007da0:	4610      	mov	r0, r2
 8007da2:	4798      	blx	r3
 8007da4:	4602      	mov	r2, r0
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8007db2:	1c5a      	adds	r2, r3, #1
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3710      	adds	r7, #16
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f001 fdfd 	bl	80099cc <USBD_LL_Start>
 8007dd2:	4603      	mov	r3, r0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007de4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b084      	sub	sp, #16
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d009      	beq.n	8007e20 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	78fa      	ldrb	r2, [r7, #3]
 8007e16:	4611      	mov	r1, r2
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	4798      	blx	r3
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b084      	sub	sp, #16
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
 8007e32:	460b      	mov	r3, r1
 8007e34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e36:	2300      	movs	r3, #0
 8007e38:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	78fa      	ldrb	r2, [r7, #3]
 8007e44:	4611      	mov	r1, r2
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	4798      	blx	r3
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d001      	beq.n	8007e54 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007e50:	2303      	movs	r3, #3
 8007e52:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b084      	sub	sp, #16
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
 8007e66:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007e6e:	6839      	ldr	r1, [r7, #0]
 8007e70:	4618      	mov	r0, r3
 8007e72:	f001 f90c 	bl	800908e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007e84:	461a      	mov	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007e92:	f003 031f 	and.w	r3, r3, #31
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d01a      	beq.n	8007ed0 <USBD_LL_SetupStage+0x72>
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d822      	bhi.n	8007ee4 <USBD_LL_SetupStage+0x86>
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d002      	beq.n	8007ea8 <USBD_LL_SetupStage+0x4a>
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d00a      	beq.n	8007ebc <USBD_LL_SetupStage+0x5e>
 8007ea6:	e01d      	b.n	8007ee4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007eae:	4619      	mov	r1, r3
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fb63 	bl	800857c <USBD_StdDevReq>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	73fb      	strb	r3, [r7, #15]
      break;
 8007eba:	e020      	b.n	8007efe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f000 fbcb 	bl	8008660 <USBD_StdItfReq>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	73fb      	strb	r3, [r7, #15]
      break;
 8007ece:	e016      	b.n	8007efe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 fc2d 	bl	8008738 <USBD_StdEPReq>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ee2:	e00c      	b.n	8007efe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007eea:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007eee:	b2db      	uxtb	r3, r3
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f001 fdca 	bl	8009a8c <USBD_LL_StallEP>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	73fb      	strb	r3, [r7, #15]
      break;
 8007efc:	bf00      	nop
  }

  return ret;
 8007efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3710      	adds	r7, #16
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}

08007f08 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b086      	sub	sp, #24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	460b      	mov	r3, r1
 8007f12:	607a      	str	r2, [r7, #4]
 8007f14:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007f16:	2300      	movs	r3, #0
 8007f18:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007f1a:	7afb      	ldrb	r3, [r7, #11]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d16e      	bne.n	8007ffe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007f26:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007f2e:	2b03      	cmp	r3, #3
 8007f30:	f040 8098 	bne.w	8008064 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	689a      	ldr	r2, [r3, #8]
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d913      	bls.n	8007f68 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	689a      	ldr	r2, [r3, #8]
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	1ad2      	subs	r2, r2, r3
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	68da      	ldr	r2, [r3, #12]
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	4293      	cmp	r3, r2
 8007f58:	bf28      	it	cs
 8007f5a:	4613      	movcs	r3, r2
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	6879      	ldr	r1, [r7, #4]
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f001 f994 	bl	800928e <USBD_CtlContinueRx>
 8007f66:	e07d      	b.n	8008064 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007f6e:	f003 031f 	and.w	r3, r3, #31
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d014      	beq.n	8007fa0 <USBD_LL_DataOutStage+0x98>
 8007f76:	2b02      	cmp	r3, #2
 8007f78:	d81d      	bhi.n	8007fb6 <USBD_LL_DataOutStage+0xae>
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d002      	beq.n	8007f84 <USBD_LL_DataOutStage+0x7c>
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d003      	beq.n	8007f8a <USBD_LL_DataOutStage+0x82>
 8007f82:	e018      	b.n	8007fb6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007f84:	2300      	movs	r3, #0
 8007f86:	75bb      	strb	r3, [r7, #22]
            break;
 8007f88:	e018      	b.n	8007fbc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	4619      	mov	r1, r3
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f000 fa64 	bl	8008462 <USBD_CoreFindIF>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	75bb      	strb	r3, [r7, #22]
            break;
 8007f9e:	e00d      	b.n	8007fbc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	4619      	mov	r1, r3
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f000 fa66 	bl	800847c <USBD_CoreFindEP>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	75bb      	strb	r3, [r7, #22]
            break;
 8007fb4:	e002      	b.n	8007fbc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	75bb      	strb	r3, [r7, #22]
            break;
 8007fba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007fbc:	7dbb      	ldrb	r3, [r7, #22]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d119      	bne.n	8007ff6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b03      	cmp	r3, #3
 8007fcc:	d113      	bne.n	8007ff6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007fce:	7dba      	ldrb	r2, [r7, #22]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	32ae      	adds	r2, #174	@ 0xae
 8007fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fd8:	691b      	ldr	r3, [r3, #16]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00b      	beq.n	8007ff6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007fde:	7dba      	ldrb	r2, [r7, #22]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007fe6:	7dba      	ldrb	r2, [r7, #22]
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	32ae      	adds	r2, #174	@ 0xae
 8007fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	68f8      	ldr	r0, [r7, #12]
 8007ff4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	f001 f95a 	bl	80092b0 <USBD_CtlSendStatus>
 8007ffc:	e032      	b.n	8008064 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007ffe:	7afb      	ldrb	r3, [r7, #11]
 8008000:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008004:	b2db      	uxtb	r3, r3
 8008006:	4619      	mov	r1, r3
 8008008:	68f8      	ldr	r0, [r7, #12]
 800800a:	f000 fa37 	bl	800847c <USBD_CoreFindEP>
 800800e:	4603      	mov	r3, r0
 8008010:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008012:	7dbb      	ldrb	r3, [r7, #22]
 8008014:	2bff      	cmp	r3, #255	@ 0xff
 8008016:	d025      	beq.n	8008064 <USBD_LL_DataOutStage+0x15c>
 8008018:	7dbb      	ldrb	r3, [r7, #22]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d122      	bne.n	8008064 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b03      	cmp	r3, #3
 8008028:	d117      	bne.n	800805a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800802a:	7dba      	ldrb	r2, [r7, #22]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	32ae      	adds	r2, #174	@ 0xae
 8008030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00f      	beq.n	800805a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800803a:	7dba      	ldrb	r2, [r7, #22]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008042:	7dba      	ldrb	r2, [r7, #22]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	32ae      	adds	r2, #174	@ 0xae
 8008048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	7afa      	ldrb	r2, [r7, #11]
 8008050:	4611      	mov	r1, r2
 8008052:	68f8      	ldr	r0, [r7, #12]
 8008054:	4798      	blx	r3
 8008056:	4603      	mov	r3, r0
 8008058:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800805a:	7dfb      	ldrb	r3, [r7, #23]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008060:	7dfb      	ldrb	r3, [r7, #23]
 8008062:	e000      	b.n	8008066 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3718      	adds	r7, #24
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}

0800806e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b086      	sub	sp, #24
 8008072:	af00      	add	r7, sp, #0
 8008074:	60f8      	str	r0, [r7, #12]
 8008076:	460b      	mov	r3, r1
 8008078:	607a      	str	r2, [r7, #4]
 800807a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800807c:	7afb      	ldrb	r3, [r7, #11]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d16f      	bne.n	8008162 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	3314      	adds	r3, #20
 8008086:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800808e:	2b02      	cmp	r3, #2
 8008090:	d15a      	bne.n	8008148 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	689a      	ldr	r2, [r3, #8]
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	68db      	ldr	r3, [r3, #12]
 800809a:	429a      	cmp	r2, r3
 800809c:	d914      	bls.n	80080c8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	689a      	ldr	r2, [r3, #8]
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	1ad2      	subs	r2, r2, r3
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	461a      	mov	r2, r3
 80080b2:	6879      	ldr	r1, [r7, #4]
 80080b4:	68f8      	ldr	r0, [r7, #12]
 80080b6:	f001 f8bc 	bl	8009232 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080ba:	2300      	movs	r3, #0
 80080bc:	2200      	movs	r2, #0
 80080be:	2100      	movs	r1, #0
 80080c0:	68f8      	ldr	r0, [r7, #12]
 80080c2:	f001 fd8d 	bl	8009be0 <USBD_LL_PrepareReceive>
 80080c6:	e03f      	b.n	8008148 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	68da      	ldr	r2, [r3, #12]
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d11c      	bne.n	800810e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	685a      	ldr	r2, [r3, #4]
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80080dc:	429a      	cmp	r2, r3
 80080de:	d316      	bcc.n	800810e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	685a      	ldr	r2, [r3, #4]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d20f      	bcs.n	800810e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80080ee:	2200      	movs	r2, #0
 80080f0:	2100      	movs	r1, #0
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f001 f89d 	bl	8009232 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	2200      	movs	r2, #0
 80080fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008100:	2300      	movs	r3, #0
 8008102:	2200      	movs	r2, #0
 8008104:	2100      	movs	r1, #0
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f001 fd6a 	bl	8009be0 <USBD_LL_PrepareReceive>
 800810c:	e01c      	b.n	8008148 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008114:	b2db      	uxtb	r3, r3
 8008116:	2b03      	cmp	r3, #3
 8008118:	d10f      	bne.n	800813a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d009      	beq.n	800813a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2200      	movs	r2, #0
 800812a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008134:	68db      	ldr	r3, [r3, #12]
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800813a:	2180      	movs	r1, #128	@ 0x80
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f001 fca5 	bl	8009a8c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f001 f8c7 	bl	80092d6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d03a      	beq.n	80081c8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f7ff fe42 	bl	8007ddc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2200      	movs	r2, #0
 800815c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008160:	e032      	b.n	80081c8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008162:	7afb      	ldrb	r3, [r7, #11]
 8008164:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008168:	b2db      	uxtb	r3, r3
 800816a:	4619      	mov	r1, r3
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f000 f985 	bl	800847c <USBD_CoreFindEP>
 8008172:	4603      	mov	r3, r0
 8008174:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008176:	7dfb      	ldrb	r3, [r7, #23]
 8008178:	2bff      	cmp	r3, #255	@ 0xff
 800817a:	d025      	beq.n	80081c8 <USBD_LL_DataInStage+0x15a>
 800817c:	7dfb      	ldrb	r3, [r7, #23]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d122      	bne.n	80081c8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008188:	b2db      	uxtb	r3, r3
 800818a:	2b03      	cmp	r3, #3
 800818c:	d11c      	bne.n	80081c8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800818e:	7dfa      	ldrb	r2, [r7, #23]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	32ae      	adds	r2, #174	@ 0xae
 8008194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008198:	695b      	ldr	r3, [r3, #20]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d014      	beq.n	80081c8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800819e:	7dfa      	ldrb	r2, [r7, #23]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80081a6:	7dfa      	ldrb	r2, [r7, #23]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	32ae      	adds	r2, #174	@ 0xae
 80081ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b0:	695b      	ldr	r3, [r3, #20]
 80081b2:	7afa      	ldrb	r2, [r7, #11]
 80081b4:	4611      	mov	r1, r2
 80081b6:	68f8      	ldr	r0, [r7, #12]
 80081b8:	4798      	blx	r3
 80081ba:	4603      	mov	r3, r0
 80081bc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80081be:	7dbb      	ldrb	r3, [r7, #22]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d001      	beq.n	80081c8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80081c4:	7dbb      	ldrb	r3, [r7, #22]
 80081c6:	e000      	b.n	80081ca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3718      	adds	r7, #24
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}

080081d2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80081d2:	b580      	push	{r7, lr}
 80081d4:	b084      	sub	sp, #16
 80081d6:	af00      	add	r7, sp, #0
 80081d8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80081da:	2300      	movs	r3, #0
 80081dc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2201      	movs	r2, #1
 80081e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	2200      	movs	r2, #0
 80081f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800820a:	2b00      	cmp	r3, #0
 800820c:	d014      	beq.n	8008238 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00e      	beq.n	8008238 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	687a      	ldr	r2, [r7, #4]
 8008224:	6852      	ldr	r2, [r2, #4]
 8008226:	b2d2      	uxtb	r2, r2
 8008228:	4611      	mov	r1, r2
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	4798      	blx	r3
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d001      	beq.n	8008238 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008234:	2303      	movs	r3, #3
 8008236:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008238:	2340      	movs	r3, #64	@ 0x40
 800823a:	2200      	movs	r2, #0
 800823c:	2100      	movs	r1, #0
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f001 fbdf 	bl	8009a02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2240      	movs	r2, #64	@ 0x40
 8008250:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008254:	2340      	movs	r3, #64	@ 0x40
 8008256:	2200      	movs	r2, #0
 8008258:	2180      	movs	r1, #128	@ 0x80
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f001 fbd1 	bl	8009a02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2201      	movs	r2, #1
 8008264:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2240      	movs	r2, #64	@ 0x40
 800826a:	621a      	str	r2, [r3, #32]

  return ret;
 800826c:	7bfb      	ldrb	r3, [r7, #15]
}
 800826e:	4618      	mov	r0, r3
 8008270:	3710      	adds	r7, #16
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008276:	b480      	push	{r7}
 8008278:	b083      	sub	sp, #12
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	460b      	mov	r3, r1
 8008280:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	78fa      	ldrb	r2, [r7, #3]
 8008286:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	370c      	adds	r7, #12
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr

08008296 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008296:	b480      	push	{r7}
 8008298:	b083      	sub	sp, #12
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	2b04      	cmp	r3, #4
 80082a8:	d006      	beq.n	80082b8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082b0:	b2da      	uxtb	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2204      	movs	r2, #4
 80082bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	370c      	adds	r7, #12
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr

080082ce <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80082ce:	b480      	push	{r7}
 80082d0:	b083      	sub	sp, #12
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	2b04      	cmp	r3, #4
 80082e0:	d106      	bne.n	80082f0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80082e8:	b2da      	uxtb	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b082      	sub	sp, #8
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b03      	cmp	r3, #3
 8008310:	d110      	bne.n	8008334 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00b      	beq.n	8008334 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008322:	69db      	ldr	r3, [r3, #28]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d005      	beq.n	8008334 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800832e:	69db      	ldr	r3, [r3, #28]
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008334:	2300      	movs	r3, #0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3708      	adds	r7, #8
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800833e:	b580      	push	{r7, lr}
 8008340:	b082      	sub	sp, #8
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
 8008346:	460b      	mov	r3, r1
 8008348:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	32ae      	adds	r2, #174	@ 0xae
 8008354:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d101      	bne.n	8008360 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800835c:	2303      	movs	r3, #3
 800835e:	e01c      	b.n	800839a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008366:	b2db      	uxtb	r3, r3
 8008368:	2b03      	cmp	r3, #3
 800836a:	d115      	bne.n	8008398 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	32ae      	adds	r2, #174	@ 0xae
 8008376:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800837a:	6a1b      	ldr	r3, [r3, #32]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00b      	beq.n	8008398 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	32ae      	adds	r2, #174	@ 0xae
 800838a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800838e:	6a1b      	ldr	r3, [r3, #32]
 8008390:	78fa      	ldrb	r2, [r7, #3]
 8008392:	4611      	mov	r1, r2
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80083a2:	b580      	push	{r7, lr}
 80083a4:	b082      	sub	sp, #8
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
 80083aa:	460b      	mov	r3, r1
 80083ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	32ae      	adds	r2, #174	@ 0xae
 80083b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d101      	bne.n	80083c4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80083c0:	2303      	movs	r3, #3
 80083c2:	e01c      	b.n	80083fe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	2b03      	cmp	r3, #3
 80083ce:	d115      	bne.n	80083fc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	32ae      	adds	r2, #174	@ 0xae
 80083da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00b      	beq.n	80083fc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	32ae      	adds	r2, #174	@ 0xae
 80083ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083f4:	78fa      	ldrb	r2, [r7, #3]
 80083f6:	4611      	mov	r1, r2
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3708      	adds	r7, #8
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008406:	b480      	push	{r7}
 8008408:	b083      	sub	sp, #12
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008424:	2300      	movs	r3, #0
 8008426:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008436:	2b00      	cmp	r3, #0
 8008438:	d00e      	beq.n	8008458 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	6852      	ldr	r2, [r2, #4]
 8008446:	b2d2      	uxtb	r2, r2
 8008448:	4611      	mov	r1, r2
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	4798      	blx	r3
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d001      	beq.n	8008458 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008454:	2303      	movs	r3, #3
 8008456:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008458:	7bfb      	ldrb	r3, [r7, #15]
}
 800845a:	4618      	mov	r0, r3
 800845c:	3710      	adds	r7, #16
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}

08008462 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008462:	b480      	push	{r7}
 8008464:	b083      	sub	sp, #12
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
 800846a:	460b      	mov	r3, r1
 800846c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800846e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008470:	4618      	mov	r0, r3
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	460b      	mov	r3, r1
 8008486:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008488:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800848a:	4618      	mov	r0, r3
 800848c:	370c      	adds	r7, #12
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr

08008496 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b086      	sub	sp, #24
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
 800849e:	460b      	mov	r3, r1
 80084a0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80084aa:	2300      	movs	r3, #0
 80084ac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	885b      	ldrh	r3, [r3, #2]
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	68fa      	ldr	r2, [r7, #12]
 80084b6:	7812      	ldrb	r2, [r2, #0]
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d91f      	bls.n	80084fc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80084c2:	e013      	b.n	80084ec <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80084c4:	f107 030a 	add.w	r3, r7, #10
 80084c8:	4619      	mov	r1, r3
 80084ca:	6978      	ldr	r0, [r7, #20]
 80084cc:	f000 f81b 	bl	8008506 <USBD_GetNextDesc>
 80084d0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	785b      	ldrb	r3, [r3, #1]
 80084d6:	2b05      	cmp	r3, #5
 80084d8:	d108      	bne.n	80084ec <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	789b      	ldrb	r3, [r3, #2]
 80084e2:	78fa      	ldrb	r2, [r7, #3]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d008      	beq.n	80084fa <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80084e8:	2300      	movs	r3, #0
 80084ea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	885b      	ldrh	r3, [r3, #2]
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	897b      	ldrh	r3, [r7, #10]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d8e5      	bhi.n	80084c4 <USBD_GetEpDesc+0x2e>
 80084f8:	e000      	b.n	80084fc <USBD_GetEpDesc+0x66>
          break;
 80084fa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80084fc:	693b      	ldr	r3, [r7, #16]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3718      	adds	r7, #24
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008506:	b480      	push	{r7}
 8008508:	b085      	sub	sp, #20
 800850a:	af00      	add	r7, sp, #0
 800850c:	6078      	str	r0, [r7, #4]
 800850e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	881b      	ldrh	r3, [r3, #0]
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	7812      	ldrb	r2, [r2, #0]
 800851c:	4413      	add	r3, r2
 800851e:	b29a      	uxth	r2, r3
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	461a      	mov	r2, r3
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	4413      	add	r3, r2
 800852e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008530:	68fb      	ldr	r3, [r7, #12]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800853e:	b480      	push	{r7}
 8008540:	b087      	sub	sp, #28
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	3301      	adds	r3, #1
 8008554:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	781b      	ldrb	r3, [r3, #0]
 800855a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800855c:	8a3b      	ldrh	r3, [r7, #16]
 800855e:	021b      	lsls	r3, r3, #8
 8008560:	b21a      	sxth	r2, r3
 8008562:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008566:	4313      	orrs	r3, r2
 8008568:	b21b      	sxth	r3, r3
 800856a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800856c:	89fb      	ldrh	r3, [r7, #14]
}
 800856e:	4618      	mov	r0, r3
 8008570:	371c      	adds	r7, #28
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
	...

0800857c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008586:	2300      	movs	r3, #0
 8008588:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008592:	2b40      	cmp	r3, #64	@ 0x40
 8008594:	d005      	beq.n	80085a2 <USBD_StdDevReq+0x26>
 8008596:	2b40      	cmp	r3, #64	@ 0x40
 8008598:	d857      	bhi.n	800864a <USBD_StdDevReq+0xce>
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00f      	beq.n	80085be <USBD_StdDevReq+0x42>
 800859e:	2b20      	cmp	r3, #32
 80085a0:	d153      	bne.n	800864a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	32ae      	adds	r2, #174	@ 0xae
 80085ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	6839      	ldr	r1, [r7, #0]
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	4798      	blx	r3
 80085b8:	4603      	mov	r3, r0
 80085ba:	73fb      	strb	r3, [r7, #15]
      break;
 80085bc:	e04a      	b.n	8008654 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	785b      	ldrb	r3, [r3, #1]
 80085c2:	2b09      	cmp	r3, #9
 80085c4:	d83b      	bhi.n	800863e <USBD_StdDevReq+0xc2>
 80085c6:	a201      	add	r2, pc, #4	@ (adr r2, 80085cc <USBD_StdDevReq+0x50>)
 80085c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085cc:	08008621 	.word	0x08008621
 80085d0:	08008635 	.word	0x08008635
 80085d4:	0800863f 	.word	0x0800863f
 80085d8:	0800862b 	.word	0x0800862b
 80085dc:	0800863f 	.word	0x0800863f
 80085e0:	080085ff 	.word	0x080085ff
 80085e4:	080085f5 	.word	0x080085f5
 80085e8:	0800863f 	.word	0x0800863f
 80085ec:	08008617 	.word	0x08008617
 80085f0:	08008609 	.word	0x08008609
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80085f4:	6839      	ldr	r1, [r7, #0]
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 fa3c 	bl	8008a74 <USBD_GetDescriptor>
          break;
 80085fc:	e024      	b.n	8008648 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80085fe:	6839      	ldr	r1, [r7, #0]
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 fba1 	bl	8008d48 <USBD_SetAddress>
          break;
 8008606:	e01f      	b.n	8008648 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008608:	6839      	ldr	r1, [r7, #0]
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 fbe0 	bl	8008dd0 <USBD_SetConfig>
 8008610:	4603      	mov	r3, r0
 8008612:	73fb      	strb	r3, [r7, #15]
          break;
 8008614:	e018      	b.n	8008648 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008616:	6839      	ldr	r1, [r7, #0]
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f000 fc83 	bl	8008f24 <USBD_GetConfig>
          break;
 800861e:	e013      	b.n	8008648 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008620:	6839      	ldr	r1, [r7, #0]
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 fcb4 	bl	8008f90 <USBD_GetStatus>
          break;
 8008628:	e00e      	b.n	8008648 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800862a:	6839      	ldr	r1, [r7, #0]
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 fce3 	bl	8008ff8 <USBD_SetFeature>
          break;
 8008632:	e009      	b.n	8008648 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008634:	6839      	ldr	r1, [r7, #0]
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 fd07 	bl	800904a <USBD_ClrFeature>
          break;
 800863c:	e004      	b.n	8008648 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fd5e 	bl	8009102 <USBD_CtlError>
          break;
 8008646:	bf00      	nop
      }
      break;
 8008648:	e004      	b.n	8008654 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800864a:	6839      	ldr	r1, [r7, #0]
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 fd58 	bl	8009102 <USBD_CtlError>
      break;
 8008652:	bf00      	nop
  }

  return ret;
 8008654:	7bfb      	ldrb	r3, [r7, #15]
}
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop

08008660 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008676:	2b40      	cmp	r3, #64	@ 0x40
 8008678:	d005      	beq.n	8008686 <USBD_StdItfReq+0x26>
 800867a:	2b40      	cmp	r3, #64	@ 0x40
 800867c:	d852      	bhi.n	8008724 <USBD_StdItfReq+0xc4>
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <USBD_StdItfReq+0x26>
 8008682:	2b20      	cmp	r3, #32
 8008684:	d14e      	bne.n	8008724 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800868c:	b2db      	uxtb	r3, r3
 800868e:	3b01      	subs	r3, #1
 8008690:	2b02      	cmp	r3, #2
 8008692:	d840      	bhi.n	8008716 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	889b      	ldrh	r3, [r3, #4]
 8008698:	b2db      	uxtb	r3, r3
 800869a:	2b01      	cmp	r3, #1
 800869c:	d836      	bhi.n	800870c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	889b      	ldrh	r3, [r3, #4]
 80086a2:	b2db      	uxtb	r3, r3
 80086a4:	4619      	mov	r1, r3
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f7ff fedb 	bl	8008462 <USBD_CoreFindIF>
 80086ac:	4603      	mov	r3, r0
 80086ae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80086b0:	7bbb      	ldrb	r3, [r7, #14]
 80086b2:	2bff      	cmp	r3, #255	@ 0xff
 80086b4:	d01d      	beq.n	80086f2 <USBD_StdItfReq+0x92>
 80086b6:	7bbb      	ldrb	r3, [r7, #14]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d11a      	bne.n	80086f2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80086bc:	7bba      	ldrb	r2, [r7, #14]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	32ae      	adds	r2, #174	@ 0xae
 80086c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00f      	beq.n	80086ec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80086cc:	7bba      	ldrb	r2, [r7, #14]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80086d4:	7bba      	ldrb	r2, [r7, #14]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	32ae      	adds	r2, #174	@ 0xae
 80086da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086de:	689b      	ldr	r3, [r3, #8]
 80086e0:	6839      	ldr	r1, [r7, #0]
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	4798      	blx	r3
 80086e6:	4603      	mov	r3, r0
 80086e8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80086ea:	e004      	b.n	80086f6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80086ec:	2303      	movs	r3, #3
 80086ee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80086f0:	e001      	b.n	80086f6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80086f2:	2303      	movs	r3, #3
 80086f4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	88db      	ldrh	r3, [r3, #6]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d110      	bne.n	8008720 <USBD_StdItfReq+0xc0>
 80086fe:	7bfb      	ldrb	r3, [r7, #15]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d10d      	bne.n	8008720 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 fdd3 	bl	80092b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800870a:	e009      	b.n	8008720 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800870c:	6839      	ldr	r1, [r7, #0]
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fcf7 	bl	8009102 <USBD_CtlError>
          break;
 8008714:	e004      	b.n	8008720 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008716:	6839      	ldr	r1, [r7, #0]
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fcf2 	bl	8009102 <USBD_CtlError>
          break;
 800871e:	e000      	b.n	8008722 <USBD_StdItfReq+0xc2>
          break;
 8008720:	bf00      	nop
      }
      break;
 8008722:	e004      	b.n	800872e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008724:	6839      	ldr	r1, [r7, #0]
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fceb 	bl	8009102 <USBD_CtlError>
      break;
 800872c:	bf00      	nop
  }

  return ret;
 800872e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008730:	4618      	mov	r0, r3
 8008732:	3710      	adds	r7, #16
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008742:	2300      	movs	r3, #0
 8008744:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	889b      	ldrh	r3, [r3, #4]
 800874a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	781b      	ldrb	r3, [r3, #0]
 8008750:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008754:	2b40      	cmp	r3, #64	@ 0x40
 8008756:	d007      	beq.n	8008768 <USBD_StdEPReq+0x30>
 8008758:	2b40      	cmp	r3, #64	@ 0x40
 800875a:	f200 817f 	bhi.w	8008a5c <USBD_StdEPReq+0x324>
 800875e:	2b00      	cmp	r3, #0
 8008760:	d02a      	beq.n	80087b8 <USBD_StdEPReq+0x80>
 8008762:	2b20      	cmp	r3, #32
 8008764:	f040 817a 	bne.w	8008a5c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008768:	7bbb      	ldrb	r3, [r7, #14]
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f7ff fe85 	bl	800847c <USBD_CoreFindEP>
 8008772:	4603      	mov	r3, r0
 8008774:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008776:	7b7b      	ldrb	r3, [r7, #13]
 8008778:	2bff      	cmp	r3, #255	@ 0xff
 800877a:	f000 8174 	beq.w	8008a66 <USBD_StdEPReq+0x32e>
 800877e:	7b7b      	ldrb	r3, [r7, #13]
 8008780:	2b00      	cmp	r3, #0
 8008782:	f040 8170 	bne.w	8008a66 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008786:	7b7a      	ldrb	r2, [r7, #13]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800878e:	7b7a      	ldrb	r2, [r7, #13]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	32ae      	adds	r2, #174	@ 0xae
 8008794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008798:	689b      	ldr	r3, [r3, #8]
 800879a:	2b00      	cmp	r3, #0
 800879c:	f000 8163 	beq.w	8008a66 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80087a0:	7b7a      	ldrb	r2, [r7, #13]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	32ae      	adds	r2, #174	@ 0xae
 80087a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	6839      	ldr	r1, [r7, #0]
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	4798      	blx	r3
 80087b2:	4603      	mov	r3, r0
 80087b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80087b6:	e156      	b.n	8008a66 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	785b      	ldrb	r3, [r3, #1]
 80087bc:	2b03      	cmp	r3, #3
 80087be:	d008      	beq.n	80087d2 <USBD_StdEPReq+0x9a>
 80087c0:	2b03      	cmp	r3, #3
 80087c2:	f300 8145 	bgt.w	8008a50 <USBD_StdEPReq+0x318>
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f000 809b 	beq.w	8008902 <USBD_StdEPReq+0x1ca>
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d03c      	beq.n	800884a <USBD_StdEPReq+0x112>
 80087d0:	e13e      	b.n	8008a50 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	2b02      	cmp	r3, #2
 80087dc:	d002      	beq.n	80087e4 <USBD_StdEPReq+0xac>
 80087de:	2b03      	cmp	r3, #3
 80087e0:	d016      	beq.n	8008810 <USBD_StdEPReq+0xd8>
 80087e2:	e02c      	b.n	800883e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087e4:	7bbb      	ldrb	r3, [r7, #14]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00d      	beq.n	8008806 <USBD_StdEPReq+0xce>
 80087ea:	7bbb      	ldrb	r3, [r7, #14]
 80087ec:	2b80      	cmp	r3, #128	@ 0x80
 80087ee:	d00a      	beq.n	8008806 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80087f0:	7bbb      	ldrb	r3, [r7, #14]
 80087f2:	4619      	mov	r1, r3
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f001 f949 	bl	8009a8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80087fa:	2180      	movs	r1, #128	@ 0x80
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f001 f945 	bl	8009a8c <USBD_LL_StallEP>
 8008802:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008804:	e020      	b.n	8008848 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008806:	6839      	ldr	r1, [r7, #0]
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fc7a 	bl	8009102 <USBD_CtlError>
              break;
 800880e:	e01b      	b.n	8008848 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	885b      	ldrh	r3, [r3, #2]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d10e      	bne.n	8008836 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008818:	7bbb      	ldrb	r3, [r7, #14]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00b      	beq.n	8008836 <USBD_StdEPReq+0xfe>
 800881e:	7bbb      	ldrb	r3, [r7, #14]
 8008820:	2b80      	cmp	r3, #128	@ 0x80
 8008822:	d008      	beq.n	8008836 <USBD_StdEPReq+0xfe>
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	88db      	ldrh	r3, [r3, #6]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d104      	bne.n	8008836 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800882c:	7bbb      	ldrb	r3, [r7, #14]
 800882e:	4619      	mov	r1, r3
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f001 f92b 	bl	8009a8c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 fd3a 	bl	80092b0 <USBD_CtlSendStatus>

              break;
 800883c:	e004      	b.n	8008848 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800883e:	6839      	ldr	r1, [r7, #0]
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 fc5e 	bl	8009102 <USBD_CtlError>
              break;
 8008846:	bf00      	nop
          }
          break;
 8008848:	e107      	b.n	8008a5a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008850:	b2db      	uxtb	r3, r3
 8008852:	2b02      	cmp	r3, #2
 8008854:	d002      	beq.n	800885c <USBD_StdEPReq+0x124>
 8008856:	2b03      	cmp	r3, #3
 8008858:	d016      	beq.n	8008888 <USBD_StdEPReq+0x150>
 800885a:	e04b      	b.n	80088f4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800885c:	7bbb      	ldrb	r3, [r7, #14]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d00d      	beq.n	800887e <USBD_StdEPReq+0x146>
 8008862:	7bbb      	ldrb	r3, [r7, #14]
 8008864:	2b80      	cmp	r3, #128	@ 0x80
 8008866:	d00a      	beq.n	800887e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008868:	7bbb      	ldrb	r3, [r7, #14]
 800886a:	4619      	mov	r1, r3
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f001 f90d 	bl	8009a8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008872:	2180      	movs	r1, #128	@ 0x80
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f001 f909 	bl	8009a8c <USBD_LL_StallEP>
 800887a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800887c:	e040      	b.n	8008900 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800887e:	6839      	ldr	r1, [r7, #0]
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 fc3e 	bl	8009102 <USBD_CtlError>
              break;
 8008886:	e03b      	b.n	8008900 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	885b      	ldrh	r3, [r3, #2]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d136      	bne.n	80088fe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008890:	7bbb      	ldrb	r3, [r7, #14]
 8008892:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008896:	2b00      	cmp	r3, #0
 8008898:	d004      	beq.n	80088a4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800889a:	7bbb      	ldrb	r3, [r7, #14]
 800889c:	4619      	mov	r1, r3
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f001 f913 	bl	8009aca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 fd03 	bl	80092b0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80088aa:	7bbb      	ldrb	r3, [r7, #14]
 80088ac:	4619      	mov	r1, r3
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f7ff fde4 	bl	800847c <USBD_CoreFindEP>
 80088b4:	4603      	mov	r3, r0
 80088b6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80088b8:	7b7b      	ldrb	r3, [r7, #13]
 80088ba:	2bff      	cmp	r3, #255	@ 0xff
 80088bc:	d01f      	beq.n	80088fe <USBD_StdEPReq+0x1c6>
 80088be:	7b7b      	ldrb	r3, [r7, #13]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d11c      	bne.n	80088fe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80088c4:	7b7a      	ldrb	r2, [r7, #13]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80088cc:	7b7a      	ldrb	r2, [r7, #13]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	32ae      	adds	r2, #174	@ 0xae
 80088d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d010      	beq.n	80088fe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80088dc:	7b7a      	ldrb	r2, [r7, #13]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	32ae      	adds	r2, #174	@ 0xae
 80088e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	6839      	ldr	r1, [r7, #0]
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	4798      	blx	r3
 80088ee:	4603      	mov	r3, r0
 80088f0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80088f2:	e004      	b.n	80088fe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80088f4:	6839      	ldr	r1, [r7, #0]
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fc03 	bl	8009102 <USBD_CtlError>
              break;
 80088fc:	e000      	b.n	8008900 <USBD_StdEPReq+0x1c8>
              break;
 80088fe:	bf00      	nop
          }
          break;
 8008900:	e0ab      	b.n	8008a5a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2b02      	cmp	r3, #2
 800890c:	d002      	beq.n	8008914 <USBD_StdEPReq+0x1dc>
 800890e:	2b03      	cmp	r3, #3
 8008910:	d032      	beq.n	8008978 <USBD_StdEPReq+0x240>
 8008912:	e097      	b.n	8008a44 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008914:	7bbb      	ldrb	r3, [r7, #14]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d007      	beq.n	800892a <USBD_StdEPReq+0x1f2>
 800891a:	7bbb      	ldrb	r3, [r7, #14]
 800891c:	2b80      	cmp	r3, #128	@ 0x80
 800891e:	d004      	beq.n	800892a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008920:	6839      	ldr	r1, [r7, #0]
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 fbed 	bl	8009102 <USBD_CtlError>
                break;
 8008928:	e091      	b.n	8008a4e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800892a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800892e:	2b00      	cmp	r3, #0
 8008930:	da0b      	bge.n	800894a <USBD_StdEPReq+0x212>
 8008932:	7bbb      	ldrb	r3, [r7, #14]
 8008934:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008938:	4613      	mov	r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	4413      	add	r3, r2
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	3310      	adds	r3, #16
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	4413      	add	r3, r2
 8008946:	3304      	adds	r3, #4
 8008948:	e00b      	b.n	8008962 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800894a:	7bbb      	ldrb	r3, [r7, #14]
 800894c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008950:	4613      	mov	r3, r2
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	4413      	add	r3, r2
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	4413      	add	r3, r2
 8008960:	3304      	adds	r3, #4
 8008962:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	2200      	movs	r2, #0
 8008968:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	2202      	movs	r2, #2
 800896e:	4619      	mov	r1, r3
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 fc43 	bl	80091fc <USBD_CtlSendData>
              break;
 8008976:	e06a      	b.n	8008a4e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008978:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800897c:	2b00      	cmp	r3, #0
 800897e:	da11      	bge.n	80089a4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008980:	7bbb      	ldrb	r3, [r7, #14]
 8008982:	f003 020f 	and.w	r2, r3, #15
 8008986:	6879      	ldr	r1, [r7, #4]
 8008988:	4613      	mov	r3, r2
 800898a:	009b      	lsls	r3, r3, #2
 800898c:	4413      	add	r3, r2
 800898e:	009b      	lsls	r3, r3, #2
 8008990:	440b      	add	r3, r1
 8008992:	3324      	adds	r3, #36	@ 0x24
 8008994:	881b      	ldrh	r3, [r3, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d117      	bne.n	80089ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800899a:	6839      	ldr	r1, [r7, #0]
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 fbb0 	bl	8009102 <USBD_CtlError>
                  break;
 80089a2:	e054      	b.n	8008a4e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80089a4:	7bbb      	ldrb	r3, [r7, #14]
 80089a6:	f003 020f 	and.w	r2, r3, #15
 80089aa:	6879      	ldr	r1, [r7, #4]
 80089ac:	4613      	mov	r3, r2
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	4413      	add	r3, r2
 80089b2:	009b      	lsls	r3, r3, #2
 80089b4:	440b      	add	r3, r1
 80089b6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80089ba:	881b      	ldrh	r3, [r3, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d104      	bne.n	80089ca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fb9d 	bl	8009102 <USBD_CtlError>
                  break;
 80089c8:	e041      	b.n	8008a4e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	da0b      	bge.n	80089ea <USBD_StdEPReq+0x2b2>
 80089d2:	7bbb      	ldrb	r3, [r7, #14]
 80089d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80089d8:	4613      	mov	r3, r2
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	4413      	add	r3, r2
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	3310      	adds	r3, #16
 80089e2:	687a      	ldr	r2, [r7, #4]
 80089e4:	4413      	add	r3, r2
 80089e6:	3304      	adds	r3, #4
 80089e8:	e00b      	b.n	8008a02 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80089ea:	7bbb      	ldrb	r3, [r7, #14]
 80089ec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80089f0:	4613      	mov	r3, r2
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4413      	add	r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	4413      	add	r3, r2
 8008a00:	3304      	adds	r3, #4
 8008a02:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008a04:	7bbb      	ldrb	r3, [r7, #14]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d002      	beq.n	8008a10 <USBD_StdEPReq+0x2d8>
 8008a0a:	7bbb      	ldrb	r3, [r7, #14]
 8008a0c:	2b80      	cmp	r3, #128	@ 0x80
 8008a0e:	d103      	bne.n	8008a18 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	2200      	movs	r2, #0
 8008a14:	601a      	str	r2, [r3, #0]
 8008a16:	e00e      	b.n	8008a36 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008a18:	7bbb      	ldrb	r3, [r7, #14]
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f001 f873 	bl	8009b08 <USBD_LL_IsStallEP>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d003      	beq.n	8008a30 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	601a      	str	r2, [r3, #0]
 8008a2e:	e002      	b.n	8008a36 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	2200      	movs	r2, #0
 8008a34:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	2202      	movs	r2, #2
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 fbdd 	bl	80091fc <USBD_CtlSendData>
              break;
 8008a42:	e004      	b.n	8008a4e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fb5b 	bl	8009102 <USBD_CtlError>
              break;
 8008a4c:	bf00      	nop
          }
          break;
 8008a4e:	e004      	b.n	8008a5a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008a50:	6839      	ldr	r1, [r7, #0]
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fb55 	bl	8009102 <USBD_CtlError>
          break;
 8008a58:	bf00      	nop
      }
      break;
 8008a5a:	e005      	b.n	8008a68 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fb4f 	bl	8009102 <USBD_CtlError>
      break;
 8008a64:	e000      	b.n	8008a68 <USBD_StdEPReq+0x330>
      break;
 8008a66:	bf00      	nop
  }

  return ret;
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3710      	adds	r7, #16
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
	...

08008a74 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008a82:	2300      	movs	r3, #0
 8008a84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008a86:	2300      	movs	r3, #0
 8008a88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	885b      	ldrh	r3, [r3, #2]
 8008a8e:	0a1b      	lsrs	r3, r3, #8
 8008a90:	b29b      	uxth	r3, r3
 8008a92:	3b01      	subs	r3, #1
 8008a94:	2b06      	cmp	r3, #6
 8008a96:	f200 8128 	bhi.w	8008cea <USBD_GetDescriptor+0x276>
 8008a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8008aa0 <USBD_GetDescriptor+0x2c>)
 8008a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa0:	08008abd 	.word	0x08008abd
 8008aa4:	08008ad5 	.word	0x08008ad5
 8008aa8:	08008b15 	.word	0x08008b15
 8008aac:	08008ceb 	.word	0x08008ceb
 8008ab0:	08008ceb 	.word	0x08008ceb
 8008ab4:	08008c8b 	.word	0x08008c8b
 8008ab8:	08008cb7 	.word	0x08008cb7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	7c12      	ldrb	r2, [r2, #16]
 8008ac8:	f107 0108 	add.w	r1, r7, #8
 8008acc:	4610      	mov	r0, r2
 8008ace:	4798      	blx	r3
 8008ad0:	60f8      	str	r0, [r7, #12]
      break;
 8008ad2:	e112      	b.n	8008cfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	7c1b      	ldrb	r3, [r3, #16]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d10d      	bne.n	8008af8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae4:	f107 0208 	add.w	r2, r7, #8
 8008ae8:	4610      	mov	r0, r2
 8008aea:	4798      	blx	r3
 8008aec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	3301      	adds	r3, #1
 8008af2:	2202      	movs	r2, #2
 8008af4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008af6:	e100      	b.n	8008cfa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b00:	f107 0208 	add.w	r2, r7, #8
 8008b04:	4610      	mov	r0, r2
 8008b06:	4798      	blx	r3
 8008b08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	3301      	adds	r3, #1
 8008b0e:	2202      	movs	r2, #2
 8008b10:	701a      	strb	r2, [r3, #0]
      break;
 8008b12:	e0f2      	b.n	8008cfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	885b      	ldrh	r3, [r3, #2]
 8008b18:	b2db      	uxtb	r3, r3
 8008b1a:	2b05      	cmp	r3, #5
 8008b1c:	f200 80ac 	bhi.w	8008c78 <USBD_GetDescriptor+0x204>
 8008b20:	a201      	add	r2, pc, #4	@ (adr r2, 8008b28 <USBD_GetDescriptor+0xb4>)
 8008b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b26:	bf00      	nop
 8008b28:	08008b41 	.word	0x08008b41
 8008b2c:	08008b75 	.word	0x08008b75
 8008b30:	08008ba9 	.word	0x08008ba9
 8008b34:	08008bdd 	.word	0x08008bdd
 8008b38:	08008c11 	.word	0x08008c11
 8008b3c:	08008c45 	.word	0x08008c45
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d00b      	beq.n	8008b64 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	7c12      	ldrb	r2, [r2, #16]
 8008b58:	f107 0108 	add.w	r1, r7, #8
 8008b5c:	4610      	mov	r0, r2
 8008b5e:	4798      	blx	r3
 8008b60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b62:	e091      	b.n	8008c88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b64:	6839      	ldr	r1, [r7, #0]
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 facb 	bl	8009102 <USBD_CtlError>
            err++;
 8008b6c:	7afb      	ldrb	r3, [r7, #11]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	72fb      	strb	r3, [r7, #11]
          break;
 8008b72:	e089      	b.n	8008c88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00b      	beq.n	8008b98 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	7c12      	ldrb	r2, [r2, #16]
 8008b8c:	f107 0108 	add.w	r1, r7, #8
 8008b90:	4610      	mov	r0, r2
 8008b92:	4798      	blx	r3
 8008b94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b96:	e077      	b.n	8008c88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b98:	6839      	ldr	r1, [r7, #0]
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fab1 	bl	8009102 <USBD_CtlError>
            err++;
 8008ba0:	7afb      	ldrb	r3, [r7, #11]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	72fb      	strb	r3, [r7, #11]
          break;
 8008ba6:	e06f      	b.n	8008c88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00b      	beq.n	8008bcc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	7c12      	ldrb	r2, [r2, #16]
 8008bc0:	f107 0108 	add.w	r1, r7, #8
 8008bc4:	4610      	mov	r0, r2
 8008bc6:	4798      	blx	r3
 8008bc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bca:	e05d      	b.n	8008c88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bcc:	6839      	ldr	r1, [r7, #0]
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 fa97 	bl	8009102 <USBD_CtlError>
            err++;
 8008bd4:	7afb      	ldrb	r3, [r7, #11]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	72fb      	strb	r3, [r7, #11]
          break;
 8008bda:	e055      	b.n	8008c88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00b      	beq.n	8008c00 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bee:	691b      	ldr	r3, [r3, #16]
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	7c12      	ldrb	r2, [r2, #16]
 8008bf4:	f107 0108 	add.w	r1, r7, #8
 8008bf8:	4610      	mov	r0, r2
 8008bfa:	4798      	blx	r3
 8008bfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bfe:	e043      	b.n	8008c88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 fa7d 	bl	8009102 <USBD_CtlError>
            err++;
 8008c08:	7afb      	ldrb	r3, [r7, #11]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	72fb      	strb	r3, [r7, #11]
          break;
 8008c0e:	e03b      	b.n	8008c88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c16:	695b      	ldr	r3, [r3, #20]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00b      	beq.n	8008c34 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c22:	695b      	ldr	r3, [r3, #20]
 8008c24:	687a      	ldr	r2, [r7, #4]
 8008c26:	7c12      	ldrb	r2, [r2, #16]
 8008c28:	f107 0108 	add.w	r1, r7, #8
 8008c2c:	4610      	mov	r0, r2
 8008c2e:	4798      	blx	r3
 8008c30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c32:	e029      	b.n	8008c88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c34:	6839      	ldr	r1, [r7, #0]
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fa63 	bl	8009102 <USBD_CtlError>
            err++;
 8008c3c:	7afb      	ldrb	r3, [r7, #11]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	72fb      	strb	r3, [r7, #11]
          break;
 8008c42:	e021      	b.n	8008c88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c4a:	699b      	ldr	r3, [r3, #24]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d00b      	beq.n	8008c68 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c56:	699b      	ldr	r3, [r3, #24]
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	7c12      	ldrb	r2, [r2, #16]
 8008c5c:	f107 0108 	add.w	r1, r7, #8
 8008c60:	4610      	mov	r0, r2
 8008c62:	4798      	blx	r3
 8008c64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008c66:	e00f      	b.n	8008c88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008c68:	6839      	ldr	r1, [r7, #0]
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 fa49 	bl	8009102 <USBD_CtlError>
            err++;
 8008c70:	7afb      	ldrb	r3, [r7, #11]
 8008c72:	3301      	adds	r3, #1
 8008c74:	72fb      	strb	r3, [r7, #11]
          break;
 8008c76:	e007      	b.n	8008c88 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008c78:	6839      	ldr	r1, [r7, #0]
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fa41 	bl	8009102 <USBD_CtlError>
          err++;
 8008c80:	7afb      	ldrb	r3, [r7, #11]
 8008c82:	3301      	adds	r3, #1
 8008c84:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008c86:	bf00      	nop
      }
      break;
 8008c88:	e037      	b.n	8008cfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	7c1b      	ldrb	r3, [r3, #16]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d109      	bne.n	8008ca6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c9a:	f107 0208 	add.w	r2, r7, #8
 8008c9e:	4610      	mov	r0, r2
 8008ca0:	4798      	blx	r3
 8008ca2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ca4:	e029      	b.n	8008cfa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008ca6:	6839      	ldr	r1, [r7, #0]
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fa2a 	bl	8009102 <USBD_CtlError>
        err++;
 8008cae:	7afb      	ldrb	r3, [r7, #11]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	72fb      	strb	r3, [r7, #11]
      break;
 8008cb4:	e021      	b.n	8008cfa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	7c1b      	ldrb	r3, [r3, #16]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10d      	bne.n	8008cda <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cc6:	f107 0208 	add.w	r2, r7, #8
 8008cca:	4610      	mov	r0, r2
 8008ccc:	4798      	blx	r3
 8008cce:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	3301      	adds	r3, #1
 8008cd4:	2207      	movs	r2, #7
 8008cd6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008cd8:	e00f      	b.n	8008cfa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008cda:	6839      	ldr	r1, [r7, #0]
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fa10 	bl	8009102 <USBD_CtlError>
        err++;
 8008ce2:	7afb      	ldrb	r3, [r7, #11]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	72fb      	strb	r3, [r7, #11]
      break;
 8008ce8:	e007      	b.n	8008cfa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008cea:	6839      	ldr	r1, [r7, #0]
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 fa08 	bl	8009102 <USBD_CtlError>
      err++;
 8008cf2:	7afb      	ldrb	r3, [r7, #11]
 8008cf4:	3301      	adds	r3, #1
 8008cf6:	72fb      	strb	r3, [r7, #11]
      break;
 8008cf8:	bf00      	nop
  }

  if (err != 0U)
 8008cfa:	7afb      	ldrb	r3, [r7, #11]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d11e      	bne.n	8008d3e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	88db      	ldrh	r3, [r3, #6]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d016      	beq.n	8008d36 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008d08:	893b      	ldrh	r3, [r7, #8]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d00e      	beq.n	8008d2c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	88da      	ldrh	r2, [r3, #6]
 8008d12:	893b      	ldrh	r3, [r7, #8]
 8008d14:	4293      	cmp	r3, r2
 8008d16:	bf28      	it	cs
 8008d18:	4613      	movcs	r3, r2
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008d1e:	893b      	ldrh	r3, [r7, #8]
 8008d20:	461a      	mov	r2, r3
 8008d22:	68f9      	ldr	r1, [r7, #12]
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f000 fa69 	bl	80091fc <USBD_CtlSendData>
 8008d2a:	e009      	b.n	8008d40 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008d2c:	6839      	ldr	r1, [r7, #0]
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f000 f9e7 	bl	8009102 <USBD_CtlError>
 8008d34:	e004      	b.n	8008d40 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 faba 	bl	80092b0 <USBD_CtlSendStatus>
 8008d3c:	e000      	b.n	8008d40 <USBD_GetDescriptor+0x2cc>
    return;
 8008d3e:	bf00      	nop
  }
}
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
 8008d46:	bf00      	nop

08008d48 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	889b      	ldrh	r3, [r3, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d131      	bne.n	8008dbe <USBD_SetAddress+0x76>
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	88db      	ldrh	r3, [r3, #6]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d12d      	bne.n	8008dbe <USBD_SetAddress+0x76>
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	885b      	ldrh	r3, [r3, #2]
 8008d66:	2b7f      	cmp	r3, #127	@ 0x7f
 8008d68:	d829      	bhi.n	8008dbe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	885b      	ldrh	r3, [r3, #2]
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	2b03      	cmp	r3, #3
 8008d80:	d104      	bne.n	8008d8c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008d82:	6839      	ldr	r1, [r7, #0]
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 f9bc 	bl	8009102 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d8a:	e01d      	b.n	8008dc8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	7bfa      	ldrb	r2, [r7, #15]
 8008d90:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008d94:	7bfb      	ldrb	r3, [r7, #15]
 8008d96:	4619      	mov	r1, r3
 8008d98:	6878      	ldr	r0, [r7, #4]
 8008d9a:	f000 fee1 	bl	8009b60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 fa86 	bl	80092b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008da4:	7bfb      	ldrb	r3, [r7, #15]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d004      	beq.n	8008db4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2202      	movs	r2, #2
 8008dae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008db2:	e009      	b.n	8008dc8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dbc:	e004      	b.n	8008dc8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008dbe:	6839      	ldr	r1, [r7, #0]
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f000 f99e 	bl	8009102 <USBD_CtlError>
  }
}
 8008dc6:	bf00      	nop
 8008dc8:	bf00      	nop
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b084      	sub	sp, #16
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
 8008dd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	885b      	ldrh	r3, [r3, #2]
 8008de2:	b2da      	uxtb	r2, r3
 8008de4:	4b4e      	ldr	r3, [pc, #312]	@ (8008f20 <USBD_SetConfig+0x150>)
 8008de6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008de8:	4b4d      	ldr	r3, [pc, #308]	@ (8008f20 <USBD_SetConfig+0x150>)
 8008dea:	781b      	ldrb	r3, [r3, #0]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d905      	bls.n	8008dfc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008df0:	6839      	ldr	r1, [r7, #0]
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f000 f985 	bl	8009102 <USBD_CtlError>
    return USBD_FAIL;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	e08c      	b.n	8008f16 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	d002      	beq.n	8008e0e <USBD_SetConfig+0x3e>
 8008e08:	2b03      	cmp	r3, #3
 8008e0a:	d029      	beq.n	8008e60 <USBD_SetConfig+0x90>
 8008e0c:	e075      	b.n	8008efa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008e0e:	4b44      	ldr	r3, [pc, #272]	@ (8008f20 <USBD_SetConfig+0x150>)
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d020      	beq.n	8008e58 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008e16:	4b42      	ldr	r3, [pc, #264]	@ (8008f20 <USBD_SetConfig+0x150>)
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008e20:	4b3f      	ldr	r3, [pc, #252]	@ (8008f20 <USBD_SetConfig+0x150>)
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	4619      	mov	r1, r3
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7fe ffe3 	bl	8007df2 <USBD_SetClassConfig>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008e30:	7bfb      	ldrb	r3, [r7, #15]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d008      	beq.n	8008e48 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008e36:	6839      	ldr	r1, [r7, #0]
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 f962 	bl	8009102 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2202      	movs	r2, #2
 8008e42:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008e46:	e065      	b.n	8008f14 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 fa31 	bl	80092b0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2203      	movs	r2, #3
 8008e52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008e56:	e05d      	b.n	8008f14 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 fa29 	bl	80092b0 <USBD_CtlSendStatus>
      break;
 8008e5e:	e059      	b.n	8008f14 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008e60:	4b2f      	ldr	r3, [pc, #188]	@ (8008f20 <USBD_SetConfig+0x150>)
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d112      	bne.n	8008e8e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2202      	movs	r2, #2
 8008e6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8008e70:	4b2b      	ldr	r3, [pc, #172]	@ (8008f20 <USBD_SetConfig+0x150>)
 8008e72:	781b      	ldrb	r3, [r3, #0]
 8008e74:	461a      	mov	r2, r3
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008e7a:	4b29      	ldr	r3, [pc, #164]	@ (8008f20 <USBD_SetConfig+0x150>)
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	4619      	mov	r1, r3
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f7fe ffd2 	bl	8007e2a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 fa12 	bl	80092b0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008e8c:	e042      	b.n	8008f14 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008e8e:	4b24      	ldr	r3, [pc, #144]	@ (8008f20 <USBD_SetConfig+0x150>)
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	461a      	mov	r2, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	685b      	ldr	r3, [r3, #4]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d02a      	beq.n	8008ef2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f7fe ffc0 	bl	8007e2a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8008f20 <USBD_SetConfig+0x150>)
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	461a      	mov	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008eb4:	4b1a      	ldr	r3, [pc, #104]	@ (8008f20 <USBD_SetConfig+0x150>)
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	4619      	mov	r1, r3
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f7fe ff99 	bl	8007df2 <USBD_SetClassConfig>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008ec4:	7bfb      	ldrb	r3, [r7, #15]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00f      	beq.n	8008eea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008eca:	6839      	ldr	r1, [r7, #0]
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 f918 	bl	8009102 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	4619      	mov	r1, r3
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f7fe ffa5 	bl	8007e2a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2202      	movs	r2, #2
 8008ee4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008ee8:	e014      	b.n	8008f14 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 f9e0 	bl	80092b0 <USBD_CtlSendStatus>
      break;
 8008ef0:	e010      	b.n	8008f14 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 f9dc 	bl	80092b0 <USBD_CtlSendStatus>
      break;
 8008ef8:	e00c      	b.n	8008f14 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008efa:	6839      	ldr	r1, [r7, #0]
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 f900 	bl	8009102 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008f02:	4b07      	ldr	r3, [pc, #28]	@ (8008f20 <USBD_SetConfig+0x150>)
 8008f04:	781b      	ldrb	r3, [r3, #0]
 8008f06:	4619      	mov	r1, r3
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f7fe ff8e 	bl	8007e2a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008f0e:	2303      	movs	r3, #3
 8008f10:	73fb      	strb	r3, [r7, #15]
      break;
 8008f12:	bf00      	nop
  }

  return ret;
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	200003e8 	.word	0x200003e8

08008f24 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	88db      	ldrh	r3, [r3, #6]
 8008f32:	2b01      	cmp	r3, #1
 8008f34:	d004      	beq.n	8008f40 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008f36:	6839      	ldr	r1, [r7, #0]
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 f8e2 	bl	8009102 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008f3e:	e023      	b.n	8008f88 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f46:	b2db      	uxtb	r3, r3
 8008f48:	2b02      	cmp	r3, #2
 8008f4a:	dc02      	bgt.n	8008f52 <USBD_GetConfig+0x2e>
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	dc03      	bgt.n	8008f58 <USBD_GetConfig+0x34>
 8008f50:	e015      	b.n	8008f7e <USBD_GetConfig+0x5a>
 8008f52:	2b03      	cmp	r3, #3
 8008f54:	d00b      	beq.n	8008f6e <USBD_GetConfig+0x4a>
 8008f56:	e012      	b.n	8008f7e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	3308      	adds	r3, #8
 8008f62:	2201      	movs	r2, #1
 8008f64:	4619      	mov	r1, r3
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 f948 	bl	80091fc <USBD_CtlSendData>
        break;
 8008f6c:	e00c      	b.n	8008f88 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	3304      	adds	r3, #4
 8008f72:	2201      	movs	r2, #1
 8008f74:	4619      	mov	r1, r3
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 f940 	bl	80091fc <USBD_CtlSendData>
        break;
 8008f7c:	e004      	b.n	8008f88 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008f7e:	6839      	ldr	r1, [r7, #0]
 8008f80:	6878      	ldr	r0, [r7, #4]
 8008f82:	f000 f8be 	bl	8009102 <USBD_CtlError>
        break;
 8008f86:	bf00      	nop
}
 8008f88:	bf00      	nop
 8008f8a:	3708      	adds	r7, #8
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	bd80      	pop	{r7, pc}

08008f90 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	2b02      	cmp	r3, #2
 8008fa6:	d81e      	bhi.n	8008fe6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	88db      	ldrh	r3, [r3, #6]
 8008fac:	2b02      	cmp	r3, #2
 8008fae:	d004      	beq.n	8008fba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008fb0:	6839      	ldr	r1, [r7, #0]
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 f8a5 	bl	8009102 <USBD_CtlError>
        break;
 8008fb8:	e01a      	b.n	8008ff0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d005      	beq.n	8008fd6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	f043 0202 	orr.w	r2, r3, #2
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	330c      	adds	r3, #12
 8008fda:	2202      	movs	r2, #2
 8008fdc:	4619      	mov	r1, r3
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 f90c 	bl	80091fc <USBD_CtlSendData>
      break;
 8008fe4:	e004      	b.n	8008ff0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008fe6:	6839      	ldr	r1, [r7, #0]
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 f88a 	bl	8009102 <USBD_CtlError>
      break;
 8008fee:	bf00      	nop
  }
}
 8008ff0:	bf00      	nop
 8008ff2:	3708      	adds	r7, #8
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	885b      	ldrh	r3, [r3, #2]
 8009006:	2b01      	cmp	r3, #1
 8009008:	d107      	bne.n	800901a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2201      	movs	r2, #1
 800900e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 f94c 	bl	80092b0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009018:	e013      	b.n	8009042 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	885b      	ldrh	r3, [r3, #2]
 800901e:	2b02      	cmp	r3, #2
 8009020:	d10b      	bne.n	800903a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	889b      	ldrh	r3, [r3, #4]
 8009026:	0a1b      	lsrs	r3, r3, #8
 8009028:	b29b      	uxth	r3, r3
 800902a:	b2da      	uxtb	r2, r3
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 f93c 	bl	80092b0 <USBD_CtlSendStatus>
}
 8009038:	e003      	b.n	8009042 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800903a:	6839      	ldr	r1, [r7, #0]
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 f860 	bl	8009102 <USBD_CtlError>
}
 8009042:	bf00      	nop
 8009044:	3708      	adds	r7, #8
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}

0800904a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800904a:	b580      	push	{r7, lr}
 800904c:	b082      	sub	sp, #8
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
 8009052:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800905a:	b2db      	uxtb	r3, r3
 800905c:	3b01      	subs	r3, #1
 800905e:	2b02      	cmp	r3, #2
 8009060:	d80b      	bhi.n	800907a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	885b      	ldrh	r3, [r3, #2]
 8009066:	2b01      	cmp	r3, #1
 8009068:	d10c      	bne.n	8009084 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f91c 	bl	80092b0 <USBD_CtlSendStatus>
      }
      break;
 8009078:	e004      	b.n	8009084 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800907a:	6839      	ldr	r1, [r7, #0]
 800907c:	6878      	ldr	r0, [r7, #4]
 800907e:	f000 f840 	bl	8009102 <USBD_CtlError>
      break;
 8009082:	e000      	b.n	8009086 <USBD_ClrFeature+0x3c>
      break;
 8009084:	bf00      	nop
  }
}
 8009086:	bf00      	nop
 8009088:	3708      	adds	r7, #8
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b084      	sub	sp, #16
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
 8009096:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	781a      	ldrb	r2, [r3, #0]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	3301      	adds	r3, #1
 80090a8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	781a      	ldrb	r2, [r3, #0]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	3301      	adds	r3, #1
 80090b6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80090b8:	68f8      	ldr	r0, [r7, #12]
 80090ba:	f7ff fa40 	bl	800853e <SWAPBYTE>
 80090be:	4603      	mov	r3, r0
 80090c0:	461a      	mov	r2, r3
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	3301      	adds	r3, #1
 80090ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	3301      	adds	r3, #1
 80090d0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f7ff fa33 	bl	800853e <SWAPBYTE>
 80090d8:	4603      	mov	r3, r0
 80090da:	461a      	mov	r2, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	3301      	adds	r3, #1
 80090e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	3301      	adds	r3, #1
 80090ea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80090ec:	68f8      	ldr	r0, [r7, #12]
 80090ee:	f7ff fa26 	bl	800853e <SWAPBYTE>
 80090f2:	4603      	mov	r3, r0
 80090f4:	461a      	mov	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	80da      	strh	r2, [r3, #6]
}
 80090fa:	bf00      	nop
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}

08009102 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b082      	sub	sp, #8
 8009106:	af00      	add	r7, sp, #0
 8009108:	6078      	str	r0, [r7, #4]
 800910a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800910c:	2180      	movs	r1, #128	@ 0x80
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f000 fcbc 	bl	8009a8c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009114:	2100      	movs	r1, #0
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fcb8 	bl	8009a8c <USBD_LL_StallEP>
}
 800911c:	bf00      	nop
 800911e:	3708      	adds	r7, #8
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}

08009124 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b086      	sub	sp, #24
 8009128:	af00      	add	r7, sp, #0
 800912a:	60f8      	str	r0, [r7, #12]
 800912c:	60b9      	str	r1, [r7, #8]
 800912e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009130:	2300      	movs	r3, #0
 8009132:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d042      	beq.n	80091c0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800913e:	6938      	ldr	r0, [r7, #16]
 8009140:	f000 f842 	bl	80091c8 <USBD_GetLen>
 8009144:	4603      	mov	r3, r0
 8009146:	3301      	adds	r3, #1
 8009148:	005b      	lsls	r3, r3, #1
 800914a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800914e:	d808      	bhi.n	8009162 <USBD_GetString+0x3e>
 8009150:	6938      	ldr	r0, [r7, #16]
 8009152:	f000 f839 	bl	80091c8 <USBD_GetLen>
 8009156:	4603      	mov	r3, r0
 8009158:	3301      	adds	r3, #1
 800915a:	b29b      	uxth	r3, r3
 800915c:	005b      	lsls	r3, r3, #1
 800915e:	b29a      	uxth	r2, r3
 8009160:	e001      	b.n	8009166 <USBD_GetString+0x42>
 8009162:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800916a:	7dfb      	ldrb	r3, [r7, #23]
 800916c:	68ba      	ldr	r2, [r7, #8]
 800916e:	4413      	add	r3, r2
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	7812      	ldrb	r2, [r2, #0]
 8009174:	701a      	strb	r2, [r3, #0]
  idx++;
 8009176:	7dfb      	ldrb	r3, [r7, #23]
 8009178:	3301      	adds	r3, #1
 800917a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800917c:	7dfb      	ldrb	r3, [r7, #23]
 800917e:	68ba      	ldr	r2, [r7, #8]
 8009180:	4413      	add	r3, r2
 8009182:	2203      	movs	r2, #3
 8009184:	701a      	strb	r2, [r3, #0]
  idx++;
 8009186:	7dfb      	ldrb	r3, [r7, #23]
 8009188:	3301      	adds	r3, #1
 800918a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800918c:	e013      	b.n	80091b6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800918e:	7dfb      	ldrb	r3, [r7, #23]
 8009190:	68ba      	ldr	r2, [r7, #8]
 8009192:	4413      	add	r3, r2
 8009194:	693a      	ldr	r2, [r7, #16]
 8009196:	7812      	ldrb	r2, [r2, #0]
 8009198:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	3301      	adds	r3, #1
 800919e:	613b      	str	r3, [r7, #16]
    idx++;
 80091a0:	7dfb      	ldrb	r3, [r7, #23]
 80091a2:	3301      	adds	r3, #1
 80091a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80091a6:	7dfb      	ldrb	r3, [r7, #23]
 80091a8:	68ba      	ldr	r2, [r7, #8]
 80091aa:	4413      	add	r3, r2
 80091ac:	2200      	movs	r2, #0
 80091ae:	701a      	strb	r2, [r3, #0]
    idx++;
 80091b0:	7dfb      	ldrb	r3, [r7, #23]
 80091b2:	3301      	adds	r3, #1
 80091b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1e7      	bne.n	800918e <USBD_GetString+0x6a>
 80091be:	e000      	b.n	80091c2 <USBD_GetString+0x9e>
    return;
 80091c0:	bf00      	nop
  }
}
 80091c2:	3718      	adds	r7, #24
 80091c4:	46bd      	mov	sp, r7
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80091d0:	2300      	movs	r3, #0
 80091d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80091d8:	e005      	b.n	80091e6 <USBD_GetLen+0x1e>
  {
    len++;
 80091da:	7bfb      	ldrb	r3, [r7, #15]
 80091dc:	3301      	adds	r3, #1
 80091de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	3301      	adds	r3, #1
 80091e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1f5      	bne.n	80091da <USBD_GetLen+0x12>
  }

  return len;
 80091ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	60f8      	str	r0, [r7, #12]
 8009204:	60b9      	str	r1, [r7, #8]
 8009206:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2202      	movs	r2, #2
 800920c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	68ba      	ldr	r2, [r7, #8]
 8009220:	2100      	movs	r1, #0
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	f000 fcbb 	bl	8009b9e <USBD_LL_Transmit>

  return USBD_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}

08009232 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b084      	sub	sp, #16
 8009236:	af00      	add	r7, sp, #0
 8009238:	60f8      	str	r0, [r7, #12]
 800923a:	60b9      	str	r1, [r7, #8]
 800923c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	2100      	movs	r1, #0
 8009244:	68f8      	ldr	r0, [r7, #12]
 8009246:	f000 fcaa 	bl	8009b9e <USBD_LL_Transmit>

  return USBD_OK;
 800924a:	2300      	movs	r3, #0
}
 800924c:	4618      	mov	r0, r3
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2203      	movs	r2, #3
 8009264:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	687a      	ldr	r2, [r7, #4]
 800926c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	687a      	ldr	r2, [r7, #4]
 8009274:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	68ba      	ldr	r2, [r7, #8]
 800927c:	2100      	movs	r1, #0
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f000 fcae 	bl	8009be0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009284:	2300      	movs	r3, #0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b084      	sub	sp, #16
 8009292:	af00      	add	r7, sp, #0
 8009294:	60f8      	str	r0, [r7, #12]
 8009296:	60b9      	str	r1, [r7, #8]
 8009298:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	68ba      	ldr	r2, [r7, #8]
 800929e:	2100      	movs	r1, #0
 80092a0:	68f8      	ldr	r0, [r7, #12]
 80092a2:	f000 fc9d 	bl	8009be0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092a6:	2300      	movs	r3, #0
}
 80092a8:	4618      	mov	r0, r3
 80092aa:	3710      	adds	r7, #16
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2204      	movs	r2, #4
 80092bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80092c0:	2300      	movs	r3, #0
 80092c2:	2200      	movs	r2, #0
 80092c4:	2100      	movs	r1, #0
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 fc69 	bl	8009b9e <USBD_LL_Transmit>

  return USBD_OK;
 80092cc:	2300      	movs	r3, #0
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3708      	adds	r7, #8
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b082      	sub	sp, #8
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2205      	movs	r2, #5
 80092e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80092e6:	2300      	movs	r3, #0
 80092e8:	2200      	movs	r2, #0
 80092ea:	2100      	movs	r1, #0
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 fc77 	bl	8009be0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009300:	2200      	movs	r2, #0
 8009302:	4912      	ldr	r1, [pc, #72]	@ (800934c <MX_USB_DEVICE_Init+0x50>)
 8009304:	4812      	ldr	r0, [pc, #72]	@ (8009350 <MX_USB_DEVICE_Init+0x54>)
 8009306:	f7fe fcf7 	bl	8007cf8 <USBD_Init>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d001      	beq.n	8009314 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009310:	f7f8 fc3e 	bl	8001b90 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009314:	490f      	ldr	r1, [pc, #60]	@ (8009354 <MX_USB_DEVICE_Init+0x58>)
 8009316:	480e      	ldr	r0, [pc, #56]	@ (8009350 <MX_USB_DEVICE_Init+0x54>)
 8009318:	f7fe fd1e 	bl	8007d58 <USBD_RegisterClass>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009322:	f7f8 fc35 	bl	8001b90 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009326:	490c      	ldr	r1, [pc, #48]	@ (8009358 <MX_USB_DEVICE_Init+0x5c>)
 8009328:	4809      	ldr	r0, [pc, #36]	@ (8009350 <MX_USB_DEVICE_Init+0x54>)
 800932a:	f7fe fc55 	bl	8007bd8 <USBD_CDC_RegisterInterface>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d001      	beq.n	8009338 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009334:	f7f8 fc2c 	bl	8001b90 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009338:	4805      	ldr	r0, [pc, #20]	@ (8009350 <MX_USB_DEVICE_Init+0x54>)
 800933a:	f7fe fd43 	bl	8007dc4 <USBD_Start>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d001      	beq.n	8009348 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009344:	f7f8 fc24 	bl	8001b90 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009348:	bf00      	nop
 800934a:	bd80      	pop	{r7, pc}
 800934c:	20000130 	.word	0x20000130
 8009350:	200003ec 	.word	0x200003ec
 8009354:	2000009c 	.word	0x2000009c
 8009358:	2000011c 	.word	0x2000011c

0800935c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009360:	2200      	movs	r2, #0
 8009362:	4905      	ldr	r1, [pc, #20]	@ (8009378 <CDC_Init_FS+0x1c>)
 8009364:	4805      	ldr	r0, [pc, #20]	@ (800937c <CDC_Init_FS+0x20>)
 8009366:	f7fe fc51 	bl	8007c0c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800936a:	4905      	ldr	r1, [pc, #20]	@ (8009380 <CDC_Init_FS+0x24>)
 800936c:	4803      	ldr	r0, [pc, #12]	@ (800937c <CDC_Init_FS+0x20>)
 800936e:	f7fe fc6f 	bl	8007c50 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009372:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009374:	4618      	mov	r0, r3
 8009376:	bd80      	pop	{r7, pc}
 8009378:	20000ec8 	.word	0x20000ec8
 800937c:	200003ec 	.word	0x200003ec
 8009380:	200006c8 	.word	0x200006c8

08009384 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009384:	b480      	push	{r7}
 8009386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009388:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800938a:	4618      	mov	r0, r3
 800938c:	46bd      	mov	sp, r7
 800938e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009392:	4770      	bx	lr

08009394 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	4603      	mov	r3, r0
 800939c:	6039      	str	r1, [r7, #0]
 800939e:	71fb      	strb	r3, [r7, #7]
 80093a0:	4613      	mov	r3, r2
 80093a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80093a4:	79fb      	ldrb	r3, [r7, #7]
 80093a6:	2b23      	cmp	r3, #35	@ 0x23
 80093a8:	d84a      	bhi.n	8009440 <CDC_Control_FS+0xac>
 80093aa:	a201      	add	r2, pc, #4	@ (adr r2, 80093b0 <CDC_Control_FS+0x1c>)
 80093ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b0:	08009441 	.word	0x08009441
 80093b4:	08009441 	.word	0x08009441
 80093b8:	08009441 	.word	0x08009441
 80093bc:	08009441 	.word	0x08009441
 80093c0:	08009441 	.word	0x08009441
 80093c4:	08009441 	.word	0x08009441
 80093c8:	08009441 	.word	0x08009441
 80093cc:	08009441 	.word	0x08009441
 80093d0:	08009441 	.word	0x08009441
 80093d4:	08009441 	.word	0x08009441
 80093d8:	08009441 	.word	0x08009441
 80093dc:	08009441 	.word	0x08009441
 80093e0:	08009441 	.word	0x08009441
 80093e4:	08009441 	.word	0x08009441
 80093e8:	08009441 	.word	0x08009441
 80093ec:	08009441 	.word	0x08009441
 80093f0:	08009441 	.word	0x08009441
 80093f4:	08009441 	.word	0x08009441
 80093f8:	08009441 	.word	0x08009441
 80093fc:	08009441 	.word	0x08009441
 8009400:	08009441 	.word	0x08009441
 8009404:	08009441 	.word	0x08009441
 8009408:	08009441 	.word	0x08009441
 800940c:	08009441 	.word	0x08009441
 8009410:	08009441 	.word	0x08009441
 8009414:	08009441 	.word	0x08009441
 8009418:	08009441 	.word	0x08009441
 800941c:	08009441 	.word	0x08009441
 8009420:	08009441 	.word	0x08009441
 8009424:	08009441 	.word	0x08009441
 8009428:	08009441 	.word	0x08009441
 800942c:	08009441 	.word	0x08009441
 8009430:	08009441 	.word	0x08009441
 8009434:	08009441 	.word	0x08009441
 8009438:	08009441 	.word	0x08009441
 800943c:	08009441 	.word	0x08009441
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009440:	bf00      	nop
  }

  return (USBD_OK);
 8009442:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009444:	4618      	mov	r0, r3
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800945a:	6879      	ldr	r1, [r7, #4]
 800945c:	4805      	ldr	r0, [pc, #20]	@ (8009474 <CDC_Receive_FS+0x24>)
 800945e:	f7fe fbf7 	bl	8007c50 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009462:	4804      	ldr	r0, [pc, #16]	@ (8009474 <CDC_Receive_FS+0x24>)
 8009464:	f7fe fc12 	bl	8007c8c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009468:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800946a:	4618      	mov	r0, r3
 800946c:	3708      	adds	r7, #8
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	200003ec 	.word	0x200003ec

08009478 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009478:	b480      	push	{r7}
 800947a:	b087      	sub	sp, #28
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	4613      	mov	r3, r2
 8009484:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009486:	2300      	movs	r3, #0
 8009488:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800948a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800948e:	4618      	mov	r0, r3
 8009490:	371c      	adds	r7, #28
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr
	...

0800949c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	4603      	mov	r3, r0
 80094a4:	6039      	str	r1, [r7, #0]
 80094a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	2212      	movs	r2, #18
 80094ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80094ae:	4b03      	ldr	r3, [pc, #12]	@ (80094bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80094b0:	4618      	mov	r0, r3
 80094b2:	370c      	adds	r7, #12
 80094b4:	46bd      	mov	sp, r7
 80094b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ba:	4770      	bx	lr
 80094bc:	2000014c 	.word	0x2000014c

080094c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	4603      	mov	r3, r0
 80094c8:	6039      	str	r1, [r7, #0]
 80094ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	2204      	movs	r2, #4
 80094d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80094d2:	4b03      	ldr	r3, [pc, #12]	@ (80094e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr
 80094e0:	20000160 	.word	0x20000160

080094e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	4603      	mov	r3, r0
 80094ec:	6039      	str	r1, [r7, #0]
 80094ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80094f0:	79fb      	ldrb	r3, [r7, #7]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d105      	bne.n	8009502 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80094f6:	683a      	ldr	r2, [r7, #0]
 80094f8:	4907      	ldr	r1, [pc, #28]	@ (8009518 <USBD_FS_ProductStrDescriptor+0x34>)
 80094fa:	4808      	ldr	r0, [pc, #32]	@ (800951c <USBD_FS_ProductStrDescriptor+0x38>)
 80094fc:	f7ff fe12 	bl	8009124 <USBD_GetString>
 8009500:	e004      	b.n	800950c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009502:	683a      	ldr	r2, [r7, #0]
 8009504:	4904      	ldr	r1, [pc, #16]	@ (8009518 <USBD_FS_ProductStrDescriptor+0x34>)
 8009506:	4805      	ldr	r0, [pc, #20]	@ (800951c <USBD_FS_ProductStrDescriptor+0x38>)
 8009508:	f7ff fe0c 	bl	8009124 <USBD_GetString>
  }
  return USBD_StrDesc;
 800950c:	4b02      	ldr	r3, [pc, #8]	@ (8009518 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800950e:	4618      	mov	r0, r3
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}
 8009516:	bf00      	nop
 8009518:	200016c8 	.word	0x200016c8
 800951c:	08009fc0 	.word	0x08009fc0

08009520 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	4603      	mov	r3, r0
 8009528:	6039      	str	r1, [r7, #0]
 800952a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800952c:	683a      	ldr	r2, [r7, #0]
 800952e:	4904      	ldr	r1, [pc, #16]	@ (8009540 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009530:	4804      	ldr	r0, [pc, #16]	@ (8009544 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009532:	f7ff fdf7 	bl	8009124 <USBD_GetString>
  return USBD_StrDesc;
 8009536:	4b02      	ldr	r3, [pc, #8]	@ (8009540 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009538:	4618      	mov	r0, r3
 800953a:	3708      	adds	r7, #8
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}
 8009540:	200016c8 	.word	0x200016c8
 8009544:	08009fd8 	.word	0x08009fd8

08009548 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
 800954e:	4603      	mov	r3, r0
 8009550:	6039      	str	r1, [r7, #0]
 8009552:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	221a      	movs	r2, #26
 8009558:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800955a:	f000 f843 	bl	80095e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800955e:	4b02      	ldr	r3, [pc, #8]	@ (8009568 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009560:	4618      	mov	r0, r3
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}
 8009568:	20000164 	.word	0x20000164

0800956c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	4603      	mov	r3, r0
 8009574:	6039      	str	r1, [r7, #0]
 8009576:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009578:	79fb      	ldrb	r3, [r7, #7]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d105      	bne.n	800958a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800957e:	683a      	ldr	r2, [r7, #0]
 8009580:	4907      	ldr	r1, [pc, #28]	@ (80095a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009582:	4808      	ldr	r0, [pc, #32]	@ (80095a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009584:	f7ff fdce 	bl	8009124 <USBD_GetString>
 8009588:	e004      	b.n	8009594 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800958a:	683a      	ldr	r2, [r7, #0]
 800958c:	4904      	ldr	r1, [pc, #16]	@ (80095a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800958e:	4805      	ldr	r0, [pc, #20]	@ (80095a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009590:	f7ff fdc8 	bl	8009124 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009594:	4b02      	ldr	r3, [pc, #8]	@ (80095a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009596:	4618      	mov	r0, r3
 8009598:	3708      	adds	r7, #8
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	200016c8 	.word	0x200016c8
 80095a4:	08009fec 	.word	0x08009fec

080095a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	4603      	mov	r3, r0
 80095b0:	6039      	str	r1, [r7, #0]
 80095b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80095b4:	79fb      	ldrb	r3, [r7, #7]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d105      	bne.n	80095c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095ba:	683a      	ldr	r2, [r7, #0]
 80095bc:	4907      	ldr	r1, [pc, #28]	@ (80095dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095be:	4808      	ldr	r0, [pc, #32]	@ (80095e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095c0:	f7ff fdb0 	bl	8009124 <USBD_GetString>
 80095c4:	e004      	b.n	80095d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80095c6:	683a      	ldr	r2, [r7, #0]
 80095c8:	4904      	ldr	r1, [pc, #16]	@ (80095dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80095ca:	4805      	ldr	r0, [pc, #20]	@ (80095e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80095cc:	f7ff fdaa 	bl	8009124 <USBD_GetString>
  }
  return USBD_StrDesc;
 80095d0:	4b02      	ldr	r3, [pc, #8]	@ (80095dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3708      	adds	r7, #8
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	200016c8 	.word	0x200016c8
 80095e0:	08009ff8 	.word	0x08009ff8

080095e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80095ea:	4b0f      	ldr	r3, [pc, #60]	@ (8009628 <Get_SerialNum+0x44>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80095f0:	4b0e      	ldr	r3, [pc, #56]	@ (800962c <Get_SerialNum+0x48>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80095f6:	4b0e      	ldr	r3, [pc, #56]	@ (8009630 <Get_SerialNum+0x4c>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	4413      	add	r3, r2
 8009602:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d009      	beq.n	800961e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800960a:	2208      	movs	r2, #8
 800960c:	4909      	ldr	r1, [pc, #36]	@ (8009634 <Get_SerialNum+0x50>)
 800960e:	68f8      	ldr	r0, [r7, #12]
 8009610:	f000 f814 	bl	800963c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009614:	2204      	movs	r2, #4
 8009616:	4908      	ldr	r1, [pc, #32]	@ (8009638 <Get_SerialNum+0x54>)
 8009618:	68b8      	ldr	r0, [r7, #8]
 800961a:	f000 f80f 	bl	800963c <IntToUnicode>
  }
}
 800961e:	bf00      	nop
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	1fff7a10 	.word	0x1fff7a10
 800962c:	1fff7a14 	.word	0x1fff7a14
 8009630:	1fff7a18 	.word	0x1fff7a18
 8009634:	20000166 	.word	0x20000166
 8009638:	20000176 	.word	0x20000176

0800963c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800963c:	b480      	push	{r7}
 800963e:	b087      	sub	sp, #28
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	4613      	mov	r3, r2
 8009648:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800964a:	2300      	movs	r3, #0
 800964c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800964e:	2300      	movs	r3, #0
 8009650:	75fb      	strb	r3, [r7, #23]
 8009652:	e027      	b.n	80096a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	0f1b      	lsrs	r3, r3, #28
 8009658:	2b09      	cmp	r3, #9
 800965a:	d80b      	bhi.n	8009674 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	0f1b      	lsrs	r3, r3, #28
 8009660:	b2da      	uxtb	r2, r3
 8009662:	7dfb      	ldrb	r3, [r7, #23]
 8009664:	005b      	lsls	r3, r3, #1
 8009666:	4619      	mov	r1, r3
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	440b      	add	r3, r1
 800966c:	3230      	adds	r2, #48	@ 0x30
 800966e:	b2d2      	uxtb	r2, r2
 8009670:	701a      	strb	r2, [r3, #0]
 8009672:	e00a      	b.n	800968a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	0f1b      	lsrs	r3, r3, #28
 8009678:	b2da      	uxtb	r2, r3
 800967a:	7dfb      	ldrb	r3, [r7, #23]
 800967c:	005b      	lsls	r3, r3, #1
 800967e:	4619      	mov	r1, r3
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	440b      	add	r3, r1
 8009684:	3237      	adds	r2, #55	@ 0x37
 8009686:	b2d2      	uxtb	r2, r2
 8009688:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	011b      	lsls	r3, r3, #4
 800968e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009690:	7dfb      	ldrb	r3, [r7, #23]
 8009692:	005b      	lsls	r3, r3, #1
 8009694:	3301      	adds	r3, #1
 8009696:	68ba      	ldr	r2, [r7, #8]
 8009698:	4413      	add	r3, r2
 800969a:	2200      	movs	r2, #0
 800969c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800969e:	7dfb      	ldrb	r3, [r7, #23]
 80096a0:	3301      	adds	r3, #1
 80096a2:	75fb      	strb	r3, [r7, #23]
 80096a4:	7dfa      	ldrb	r2, [r7, #23]
 80096a6:	79fb      	ldrb	r3, [r7, #7]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d3d3      	bcc.n	8009654 <IntToUnicode+0x18>
  }
}
 80096ac:	bf00      	nop
 80096ae:	bf00      	nop
 80096b0:	371c      	adds	r7, #28
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr
	...

080096bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b08a      	sub	sp, #40	@ 0x28
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80096c4:	f107 0314 	add.w	r3, r7, #20
 80096c8:	2200      	movs	r2, #0
 80096ca:	601a      	str	r2, [r3, #0]
 80096cc:	605a      	str	r2, [r3, #4]
 80096ce:	609a      	str	r2, [r3, #8]
 80096d0:	60da      	str	r2, [r3, #12]
 80096d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80096dc:	d13a      	bne.n	8009754 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80096de:	2300      	movs	r3, #0
 80096e0:	613b      	str	r3, [r7, #16]
 80096e2:	4b1e      	ldr	r3, [pc, #120]	@ (800975c <HAL_PCD_MspInit+0xa0>)
 80096e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096e6:	4a1d      	ldr	r2, [pc, #116]	@ (800975c <HAL_PCD_MspInit+0xa0>)
 80096e8:	f043 0301 	orr.w	r3, r3, #1
 80096ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80096ee:	4b1b      	ldr	r3, [pc, #108]	@ (800975c <HAL_PCD_MspInit+0xa0>)
 80096f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096f2:	f003 0301 	and.w	r3, r3, #1
 80096f6:	613b      	str	r3, [r7, #16]
 80096f8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80096fa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80096fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009700:	2302      	movs	r3, #2
 8009702:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009704:	2300      	movs	r3, #0
 8009706:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009708:	2303      	movs	r3, #3
 800970a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800970c:	230a      	movs	r3, #10
 800970e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009710:	f107 0314 	add.w	r3, r7, #20
 8009714:	4619      	mov	r1, r3
 8009716:	4812      	ldr	r0, [pc, #72]	@ (8009760 <HAL_PCD_MspInit+0xa4>)
 8009718:	f7f8 fe04 	bl	8002324 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800971c:	4b0f      	ldr	r3, [pc, #60]	@ (800975c <HAL_PCD_MspInit+0xa0>)
 800971e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009720:	4a0e      	ldr	r2, [pc, #56]	@ (800975c <HAL_PCD_MspInit+0xa0>)
 8009722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009726:	6353      	str	r3, [r2, #52]	@ 0x34
 8009728:	2300      	movs	r3, #0
 800972a:	60fb      	str	r3, [r7, #12]
 800972c:	4b0b      	ldr	r3, [pc, #44]	@ (800975c <HAL_PCD_MspInit+0xa0>)
 800972e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009730:	4a0a      	ldr	r2, [pc, #40]	@ (800975c <HAL_PCD_MspInit+0xa0>)
 8009732:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009736:	6453      	str	r3, [r2, #68]	@ 0x44
 8009738:	4b08      	ldr	r3, [pc, #32]	@ (800975c <HAL_PCD_MspInit+0xa0>)
 800973a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800973c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009740:	60fb      	str	r3, [r7, #12]
 8009742:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009744:	2200      	movs	r2, #0
 8009746:	2100      	movs	r1, #0
 8009748:	2043      	movs	r0, #67	@ 0x43
 800974a:	f7f8 fdc1 	bl	80022d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800974e:	2043      	movs	r0, #67	@ 0x43
 8009750:	f7f8 fdda 	bl	8002308 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009754:	bf00      	nop
 8009756:	3728      	adds	r7, #40	@ 0x28
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	40023800 	.word	0x40023800
 8009760:	40020000 	.word	0x40020000

08009764 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009778:	4619      	mov	r1, r3
 800977a:	4610      	mov	r0, r2
 800977c:	f7fe fb6f 	bl	8007e5e <USBD_LL_SetupStage>
}
 8009780:	bf00      	nop
 8009782:	3708      	adds	r7, #8
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
 8009790:	460b      	mov	r3, r1
 8009792:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800979a:	78fa      	ldrb	r2, [r7, #3]
 800979c:	6879      	ldr	r1, [r7, #4]
 800979e:	4613      	mov	r3, r2
 80097a0:	00db      	lsls	r3, r3, #3
 80097a2:	4413      	add	r3, r2
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	440b      	add	r3, r1
 80097a8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80097ac:	681a      	ldr	r2, [r3, #0]
 80097ae:	78fb      	ldrb	r3, [r7, #3]
 80097b0:	4619      	mov	r1, r3
 80097b2:	f7fe fba9 	bl	8007f08 <USBD_LL_DataOutStage>
}
 80097b6:	bf00      	nop
 80097b8:	3708      	adds	r7, #8
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b082      	sub	sp, #8
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
 80097c6:	460b      	mov	r3, r1
 80097c8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80097d0:	78fa      	ldrb	r2, [r7, #3]
 80097d2:	6879      	ldr	r1, [r7, #4]
 80097d4:	4613      	mov	r3, r2
 80097d6:	00db      	lsls	r3, r3, #3
 80097d8:	4413      	add	r3, r2
 80097da:	009b      	lsls	r3, r3, #2
 80097dc:	440b      	add	r3, r1
 80097de:	3320      	adds	r3, #32
 80097e0:	681a      	ldr	r2, [r3, #0]
 80097e2:	78fb      	ldrb	r3, [r7, #3]
 80097e4:	4619      	mov	r1, r3
 80097e6:	f7fe fc42 	bl	800806e <USBD_LL_DataInStage>
}
 80097ea:	bf00      	nop
 80097ec:	3708      	adds	r7, #8
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}

080097f2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80097f2:	b580      	push	{r7, lr}
 80097f4:	b082      	sub	sp, #8
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009800:	4618      	mov	r0, r3
 8009802:	f7fe fd7c 	bl	80082fe <USBD_LL_SOF>
}
 8009806:	bf00      	nop
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800980e:	b580      	push	{r7, lr}
 8009810:	b084      	sub	sp, #16
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009816:	2301      	movs	r3, #1
 8009818:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	79db      	ldrb	r3, [r3, #7]
 800981e:	2b02      	cmp	r3, #2
 8009820:	d001      	beq.n	8009826 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009822:	f7f8 f9b5 	bl	8001b90 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800982c:	7bfa      	ldrb	r2, [r7, #15]
 800982e:	4611      	mov	r1, r2
 8009830:	4618      	mov	r0, r3
 8009832:	f7fe fd20 	bl	8008276 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800983c:	4618      	mov	r0, r3
 800983e:	f7fe fcc8 	bl	80081d2 <USBD_LL_Reset>
}
 8009842:	bf00      	nop
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
	...

0800984c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800985a:	4618      	mov	r0, r3
 800985c:	f7fe fd1b 	bl	8008296 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	6812      	ldr	r2, [r2, #0]
 800986e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009872:	f043 0301 	orr.w	r3, r3, #1
 8009876:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	7adb      	ldrb	r3, [r3, #11]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d005      	beq.n	800988c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009880:	4b04      	ldr	r3, [pc, #16]	@ (8009894 <HAL_PCD_SuspendCallback+0x48>)
 8009882:	691b      	ldr	r3, [r3, #16]
 8009884:	4a03      	ldr	r2, [pc, #12]	@ (8009894 <HAL_PCD_SuspendCallback+0x48>)
 8009886:	f043 0306 	orr.w	r3, r3, #6
 800988a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800988c:	bf00      	nop
 800988e:	3708      	adds	r7, #8
 8009890:	46bd      	mov	sp, r7
 8009892:	bd80      	pop	{r7, pc}
 8009894:	e000ed00 	.word	0xe000ed00

08009898 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fe fd11 	bl	80082ce <USBD_LL_Resume>
}
 80098ac:	bf00      	nop
 80098ae:	3708      	adds	r7, #8
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	460b      	mov	r3, r1
 80098be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80098c6:	78fa      	ldrb	r2, [r7, #3]
 80098c8:	4611      	mov	r1, r2
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7fe fd69 	bl	80083a2 <USBD_LL_IsoOUTIncomplete>
}
 80098d0:	bf00      	nop
 80098d2:	3708      	adds	r7, #8
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b082      	sub	sp, #8
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	460b      	mov	r3, r1
 80098e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80098ea:	78fa      	ldrb	r2, [r7, #3]
 80098ec:	4611      	mov	r1, r2
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7fe fd25 	bl	800833e <USBD_LL_IsoINIncomplete>
}
 80098f4:	bf00      	nop
 80098f6:	3708      	adds	r7, #8
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b082      	sub	sp, #8
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800990a:	4618      	mov	r0, r3
 800990c:	f7fe fd7b 	bl	8008406 <USBD_LL_DevConnected>
}
 8009910:	bf00      	nop
 8009912:	3708      	adds	r7, #8
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009926:	4618      	mov	r0, r3
 8009928:	f7fe fd78 	bl	800841c <USBD_LL_DevDisconnected>
}
 800992c:	bf00      	nop
 800992e:	3708      	adds	r7, #8
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d13c      	bne.n	80099be <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009944:	4a20      	ldr	r2, [pc, #128]	@ (80099c8 <USBD_LL_Init+0x94>)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	4a1e      	ldr	r2, [pc, #120]	@ (80099c8 <USBD_LL_Init+0x94>)
 8009950:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009954:	4b1c      	ldr	r3, [pc, #112]	@ (80099c8 <USBD_LL_Init+0x94>)
 8009956:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800995a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800995c:	4b1a      	ldr	r3, [pc, #104]	@ (80099c8 <USBD_LL_Init+0x94>)
 800995e:	2204      	movs	r2, #4
 8009960:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009962:	4b19      	ldr	r3, [pc, #100]	@ (80099c8 <USBD_LL_Init+0x94>)
 8009964:	2202      	movs	r2, #2
 8009966:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009968:	4b17      	ldr	r3, [pc, #92]	@ (80099c8 <USBD_LL_Init+0x94>)
 800996a:	2200      	movs	r2, #0
 800996c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800996e:	4b16      	ldr	r3, [pc, #88]	@ (80099c8 <USBD_LL_Init+0x94>)
 8009970:	2202      	movs	r2, #2
 8009972:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009974:	4b14      	ldr	r3, [pc, #80]	@ (80099c8 <USBD_LL_Init+0x94>)
 8009976:	2200      	movs	r2, #0
 8009978:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800997a:	4b13      	ldr	r3, [pc, #76]	@ (80099c8 <USBD_LL_Init+0x94>)
 800997c:	2200      	movs	r2, #0
 800997e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009980:	4b11      	ldr	r3, [pc, #68]	@ (80099c8 <USBD_LL_Init+0x94>)
 8009982:	2200      	movs	r2, #0
 8009984:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009986:	4b10      	ldr	r3, [pc, #64]	@ (80099c8 <USBD_LL_Init+0x94>)
 8009988:	2200      	movs	r2, #0
 800998a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800998c:	4b0e      	ldr	r3, [pc, #56]	@ (80099c8 <USBD_LL_Init+0x94>)
 800998e:	2200      	movs	r2, #0
 8009990:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009992:	480d      	ldr	r0, [pc, #52]	@ (80099c8 <USBD_LL_Init+0x94>)
 8009994:	f7f9 fcb0 	bl	80032f8 <HAL_PCD_Init>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d001      	beq.n	80099a2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800999e:	f7f8 f8f7 	bl	8001b90 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80099a2:	2180      	movs	r1, #128	@ 0x80
 80099a4:	4808      	ldr	r0, [pc, #32]	@ (80099c8 <USBD_LL_Init+0x94>)
 80099a6:	f7fa fedc 	bl	8004762 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80099aa:	2240      	movs	r2, #64	@ 0x40
 80099ac:	2100      	movs	r1, #0
 80099ae:	4806      	ldr	r0, [pc, #24]	@ (80099c8 <USBD_LL_Init+0x94>)
 80099b0:	f7fa fe90 	bl	80046d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80099b4:	2280      	movs	r2, #128	@ 0x80
 80099b6:	2101      	movs	r1, #1
 80099b8:	4803      	ldr	r0, [pc, #12]	@ (80099c8 <USBD_LL_Init+0x94>)
 80099ba:	f7fa fe8b 	bl	80046d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3708      	adds	r7, #8
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}
 80099c8:	200018c8 	.word	0x200018c8

080099cc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b084      	sub	sp, #16
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099d4:	2300      	movs	r3, #0
 80099d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099d8:	2300      	movs	r3, #0
 80099da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7f9 fd97 	bl	8003516 <HAL_PCD_Start>
 80099e8:	4603      	mov	r3, r0
 80099ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099ec:	7bfb      	ldrb	r3, [r7, #15]
 80099ee:	4618      	mov	r0, r3
 80099f0:	f000 f942 	bl	8009c78 <USBD_Get_USB_Status>
 80099f4:	4603      	mov	r3, r0
 80099f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3710      	adds	r7, #16
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}

08009a02 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009a02:	b580      	push	{r7, lr}
 8009a04:	b084      	sub	sp, #16
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
 8009a0a:	4608      	mov	r0, r1
 8009a0c:	4611      	mov	r1, r2
 8009a0e:	461a      	mov	r2, r3
 8009a10:	4603      	mov	r3, r0
 8009a12:	70fb      	strb	r3, [r7, #3]
 8009a14:	460b      	mov	r3, r1
 8009a16:	70bb      	strb	r3, [r7, #2]
 8009a18:	4613      	mov	r3, r2
 8009a1a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a20:	2300      	movs	r3, #0
 8009a22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009a2a:	78bb      	ldrb	r3, [r7, #2]
 8009a2c:	883a      	ldrh	r2, [r7, #0]
 8009a2e:	78f9      	ldrb	r1, [r7, #3]
 8009a30:	f7fa fa6b 	bl	8003f0a <HAL_PCD_EP_Open>
 8009a34:	4603      	mov	r3, r0
 8009a36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a38:	7bfb      	ldrb	r3, [r7, #15]
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	f000 f91c 	bl	8009c78 <USBD_Get_USB_Status>
 8009a40:	4603      	mov	r3, r0
 8009a42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a44:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3710      	adds	r7, #16
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b084      	sub	sp, #16
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
 8009a56:	460b      	mov	r3, r1
 8009a58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009a68:	78fa      	ldrb	r2, [r7, #3]
 8009a6a:	4611      	mov	r1, r2
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f7fa fab6 	bl	8003fde <HAL_PCD_EP_Close>
 8009a72:	4603      	mov	r3, r0
 8009a74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a76:	7bfb      	ldrb	r3, [r7, #15]
 8009a78:	4618      	mov	r0, r3
 8009a7a:	f000 f8fd 	bl	8009c78 <USBD_Get_USB_Status>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a82:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	460b      	mov	r3, r1
 8009a96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009aa6:	78fa      	ldrb	r2, [r7, #3]
 8009aa8:	4611      	mov	r1, r2
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f7fa fb6e 	bl	800418c <HAL_PCD_EP_SetStall>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ab4:	7bfb      	ldrb	r3, [r7, #15]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f000 f8de 	bl	8009c78 <USBD_Get_USB_Status>
 8009abc:	4603      	mov	r3, r0
 8009abe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ac0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}

08009aca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009aca:	b580      	push	{r7, lr}
 8009acc:	b084      	sub	sp, #16
 8009ace:	af00      	add	r7, sp, #0
 8009ad0:	6078      	str	r0, [r7, #4]
 8009ad2:	460b      	mov	r3, r1
 8009ad4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ada:	2300      	movs	r3, #0
 8009adc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009ae4:	78fa      	ldrb	r2, [r7, #3]
 8009ae6:	4611      	mov	r1, r2
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f7fa fbb2 	bl	8004252 <HAL_PCD_EP_ClrStall>
 8009aee:	4603      	mov	r3, r0
 8009af0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009af2:	7bfb      	ldrb	r3, [r7, #15]
 8009af4:	4618      	mov	r0, r3
 8009af6:	f000 f8bf 	bl	8009c78 <USBD_Get_USB_Status>
 8009afa:	4603      	mov	r3, r0
 8009afc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009afe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b085      	sub	sp, #20
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
 8009b10:	460b      	mov	r3, r1
 8009b12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009b1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009b1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	da0b      	bge.n	8009b3c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009b24:	78fb      	ldrb	r3, [r7, #3]
 8009b26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009b2a:	68f9      	ldr	r1, [r7, #12]
 8009b2c:	4613      	mov	r3, r2
 8009b2e:	00db      	lsls	r3, r3, #3
 8009b30:	4413      	add	r3, r2
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	440b      	add	r3, r1
 8009b36:	3316      	adds	r3, #22
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	e00b      	b.n	8009b54 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009b3c:	78fb      	ldrb	r3, [r7, #3]
 8009b3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009b42:	68f9      	ldr	r1, [r7, #12]
 8009b44:	4613      	mov	r3, r2
 8009b46:	00db      	lsls	r3, r3, #3
 8009b48:	4413      	add	r3, r2
 8009b4a:	009b      	lsls	r3, r3, #2
 8009b4c:	440b      	add	r3, r1
 8009b4e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8009b52:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3714      	adds	r7, #20
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b084      	sub	sp, #16
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	460b      	mov	r3, r1
 8009b6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b70:	2300      	movs	r3, #0
 8009b72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009b7a:	78fa      	ldrb	r2, [r7, #3]
 8009b7c:	4611      	mov	r1, r2
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7fa f99f 	bl	8003ec2 <HAL_PCD_SetAddress>
 8009b84:	4603      	mov	r3, r0
 8009b86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009b88:	7bfb      	ldrb	r3, [r7, #15]
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f000 f874 	bl	8009c78 <USBD_Get_USB_Status>
 8009b90:	4603      	mov	r3, r0
 8009b92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009b94:	7bbb      	ldrb	r3, [r7, #14]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3710      	adds	r7, #16
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}

08009b9e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b086      	sub	sp, #24
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	60f8      	str	r0, [r7, #12]
 8009ba6:	607a      	str	r2, [r7, #4]
 8009ba8:	603b      	str	r3, [r7, #0]
 8009baa:	460b      	mov	r3, r1
 8009bac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009bbc:	7af9      	ldrb	r1, [r7, #11]
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	f7fa faa9 	bl	8004118 <HAL_PCD_EP_Transmit>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bca:	7dfb      	ldrb	r3, [r7, #23]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f000 f853 	bl	8009c78 <USBD_Get_USB_Status>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009bd6:	7dbb      	ldrb	r3, [r7, #22]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3718      	adds	r7, #24
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	607a      	str	r2, [r7, #4]
 8009bea:	603b      	str	r3, [r7, #0]
 8009bec:	460b      	mov	r3, r1
 8009bee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009bfe:	7af9      	ldrb	r1, [r7, #11]
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	f7fa fa35 	bl	8004072 <HAL_PCD_EP_Receive>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c0c:	7dfb      	ldrb	r3, [r7, #23]
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f000 f832 	bl	8009c78 <USBD_Get_USB_Status>
 8009c14:	4603      	mov	r3, r0
 8009c16:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009c18:	7dbb      	ldrb	r3, [r7, #22]
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3718      	adds	r7, #24
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}

08009c22 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b082      	sub	sp, #8
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
 8009c2a:	460b      	mov	r3, r1
 8009c2c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009c34:	78fa      	ldrb	r2, [r7, #3]
 8009c36:	4611      	mov	r1, r2
 8009c38:	4618      	mov	r0, r3
 8009c3a:	f7fa fa55 	bl	80040e8 <HAL_PCD_EP_GetRxCount>
 8009c3e:	4603      	mov	r3, r0
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3708      	adds	r7, #8
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009c50:	4b03      	ldr	r3, [pc, #12]	@ (8009c60 <USBD_static_malloc+0x18>)
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	370c      	adds	r7, #12
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr
 8009c5e:	bf00      	nop
 8009c60:	20001dac 	.word	0x20001dac

08009c64 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]

}
 8009c6c:	bf00      	nop
 8009c6e:	370c      	adds	r7, #12
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	4603      	mov	r3, r0
 8009c80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c82:	2300      	movs	r3, #0
 8009c84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009c86:	79fb      	ldrb	r3, [r7, #7]
 8009c88:	2b03      	cmp	r3, #3
 8009c8a:	d817      	bhi.n	8009cbc <USBD_Get_USB_Status+0x44>
 8009c8c:	a201      	add	r2, pc, #4	@ (adr r2, 8009c94 <USBD_Get_USB_Status+0x1c>)
 8009c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c92:	bf00      	nop
 8009c94:	08009ca5 	.word	0x08009ca5
 8009c98:	08009cab 	.word	0x08009cab
 8009c9c:	08009cb1 	.word	0x08009cb1
 8009ca0:	08009cb7 	.word	0x08009cb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ca8:	e00b      	b.n	8009cc2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009caa:	2303      	movs	r3, #3
 8009cac:	73fb      	strb	r3, [r7, #15]
    break;
 8009cae:	e008      	b.n	8009cc2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	73fb      	strb	r3, [r7, #15]
    break;
 8009cb4:	e005      	b.n	8009cc2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009cb6:	2303      	movs	r3, #3
 8009cb8:	73fb      	strb	r3, [r7, #15]
    break;
 8009cba:	e002      	b.n	8009cc2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009cbc:	2303      	movs	r3, #3
 8009cbe:	73fb      	strb	r3, [r7, #15]
    break;
 8009cc0:	bf00      	nop
  }
  return usb_status;
 8009cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3714      	adds	r7, #20
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <memset>:
 8009cd0:	4402      	add	r2, r0
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d100      	bne.n	8009cda <memset+0xa>
 8009cd8:	4770      	bx	lr
 8009cda:	f803 1b01 	strb.w	r1, [r3], #1
 8009cde:	e7f9      	b.n	8009cd4 <memset+0x4>

08009ce0 <__errno>:
 8009ce0:	4b01      	ldr	r3, [pc, #4]	@ (8009ce8 <__errno+0x8>)
 8009ce2:	6818      	ldr	r0, [r3, #0]
 8009ce4:	4770      	bx	lr
 8009ce6:	bf00      	nop
 8009ce8:	20000180 	.word	0x20000180

08009cec <__libc_init_array>:
 8009cec:	b570      	push	{r4, r5, r6, lr}
 8009cee:	4d0d      	ldr	r5, [pc, #52]	@ (8009d24 <__libc_init_array+0x38>)
 8009cf0:	4c0d      	ldr	r4, [pc, #52]	@ (8009d28 <__libc_init_array+0x3c>)
 8009cf2:	1b64      	subs	r4, r4, r5
 8009cf4:	10a4      	asrs	r4, r4, #2
 8009cf6:	2600      	movs	r6, #0
 8009cf8:	42a6      	cmp	r6, r4
 8009cfa:	d109      	bne.n	8009d10 <__libc_init_array+0x24>
 8009cfc:	4d0b      	ldr	r5, [pc, #44]	@ (8009d2c <__libc_init_array+0x40>)
 8009cfe:	4c0c      	ldr	r4, [pc, #48]	@ (8009d30 <__libc_init_array+0x44>)
 8009d00:	f000 f950 	bl	8009fa4 <_init>
 8009d04:	1b64      	subs	r4, r4, r5
 8009d06:	10a4      	asrs	r4, r4, #2
 8009d08:	2600      	movs	r6, #0
 8009d0a:	42a6      	cmp	r6, r4
 8009d0c:	d105      	bne.n	8009d1a <__libc_init_array+0x2e>
 8009d0e:	bd70      	pop	{r4, r5, r6, pc}
 8009d10:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d14:	4798      	blx	r3
 8009d16:	3601      	adds	r6, #1
 8009d18:	e7ee      	b.n	8009cf8 <__libc_init_array+0xc>
 8009d1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d1e:	4798      	blx	r3
 8009d20:	3601      	adds	r6, #1
 8009d22:	e7f2      	b.n	8009d0a <__libc_init_array+0x1e>
 8009d24:	0800a038 	.word	0x0800a038
 8009d28:	0800a038 	.word	0x0800a038
 8009d2c:	0800a038 	.word	0x0800a038
 8009d30:	0800a03c 	.word	0x0800a03c

08009d34 <fmod>:
 8009d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d36:	ed2d 8b02 	vpush	{d8}
 8009d3a:	ec57 6b10 	vmov	r6, r7, d0
 8009d3e:	ec55 4b11 	vmov	r4, r5, d1
 8009d42:	f000 f825 	bl	8009d90 <__ieee754_fmod>
 8009d46:	4622      	mov	r2, r4
 8009d48:	462b      	mov	r3, r5
 8009d4a:	4630      	mov	r0, r6
 8009d4c:	4639      	mov	r1, r7
 8009d4e:	eeb0 8a40 	vmov.f32	s16, s0
 8009d52:	eef0 8a60 	vmov.f32	s17, s1
 8009d56:	f7f6 fe95 	bl	8000a84 <__aeabi_dcmpun>
 8009d5a:	b990      	cbnz	r0, 8009d82 <fmod+0x4e>
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	2300      	movs	r3, #0
 8009d60:	4620      	mov	r0, r4
 8009d62:	4629      	mov	r1, r5
 8009d64:	f7f6 fe5c 	bl	8000a20 <__aeabi_dcmpeq>
 8009d68:	b158      	cbz	r0, 8009d82 <fmod+0x4e>
 8009d6a:	f7ff ffb9 	bl	8009ce0 <__errno>
 8009d6e:	2321      	movs	r3, #33	@ 0x21
 8009d70:	6003      	str	r3, [r0, #0]
 8009d72:	2200      	movs	r2, #0
 8009d74:	2300      	movs	r3, #0
 8009d76:	4610      	mov	r0, r2
 8009d78:	4619      	mov	r1, r3
 8009d7a:	f7f6 fd13 	bl	80007a4 <__aeabi_ddiv>
 8009d7e:	ec41 0b18 	vmov	d8, r0, r1
 8009d82:	eeb0 0a48 	vmov.f32	s0, s16
 8009d86:	eef0 0a68 	vmov.f32	s1, s17
 8009d8a:	ecbd 8b02 	vpop	{d8}
 8009d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009d90 <__ieee754_fmod>:
 8009d90:	ec53 2b11 	vmov	r2, r3, d1
 8009d94:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 8009d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d9c:	ea52 040c 	orrs.w	r4, r2, ip
 8009da0:	ec51 0b10 	vmov	r0, r1, d0
 8009da4:	461e      	mov	r6, r3
 8009da6:	4617      	mov	r7, r2
 8009da8:	4696      	mov	lr, r2
 8009daa:	d00c      	beq.n	8009dc6 <__ieee754_fmod+0x36>
 8009dac:	4c77      	ldr	r4, [pc, #476]	@ (8009f8c <__ieee754_fmod+0x1fc>)
 8009dae:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8009db2:	45a0      	cmp	r8, r4
 8009db4:	4689      	mov	r9, r1
 8009db6:	d806      	bhi.n	8009dc6 <__ieee754_fmod+0x36>
 8009db8:	4254      	negs	r4, r2
 8009dba:	4d75      	ldr	r5, [pc, #468]	@ (8009f90 <__ieee754_fmod+0x200>)
 8009dbc:	4314      	orrs	r4, r2
 8009dbe:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8009dc2:	42ac      	cmp	r4, r5
 8009dc4:	d909      	bls.n	8009dda <__ieee754_fmod+0x4a>
 8009dc6:	f7f6 fbc3 	bl	8000550 <__aeabi_dmul>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	460b      	mov	r3, r1
 8009dce:	f7f6 fce9 	bl	80007a4 <__aeabi_ddiv>
 8009dd2:	ec41 0b10 	vmov	d0, r0, r1
 8009dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dda:	45e0      	cmp	r8, ip
 8009ddc:	4682      	mov	sl, r0
 8009dde:	4604      	mov	r4, r0
 8009de0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8009de4:	dc09      	bgt.n	8009dfa <__ieee754_fmod+0x6a>
 8009de6:	dbf4      	blt.n	8009dd2 <__ieee754_fmod+0x42>
 8009de8:	4282      	cmp	r2, r0
 8009dea:	d8f2      	bhi.n	8009dd2 <__ieee754_fmod+0x42>
 8009dec:	d105      	bne.n	8009dfa <__ieee754_fmod+0x6a>
 8009dee:	4b69      	ldr	r3, [pc, #420]	@ (8009f94 <__ieee754_fmod+0x204>)
 8009df0:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8009df4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009df8:	e7eb      	b.n	8009dd2 <__ieee754_fmod+0x42>
 8009dfa:	4a65      	ldr	r2, [pc, #404]	@ (8009f90 <__ieee754_fmod+0x200>)
 8009dfc:	ea19 0f02 	tst.w	r9, r2
 8009e00:	d148      	bne.n	8009e94 <__ieee754_fmod+0x104>
 8009e02:	f1b8 0f00 	cmp.w	r8, #0
 8009e06:	d13d      	bne.n	8009e84 <__ieee754_fmod+0xf4>
 8009e08:	4963      	ldr	r1, [pc, #396]	@ (8009f98 <__ieee754_fmod+0x208>)
 8009e0a:	4653      	mov	r3, sl
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	dc36      	bgt.n	8009e7e <__ieee754_fmod+0xee>
 8009e10:	4216      	tst	r6, r2
 8009e12:	d14f      	bne.n	8009eb4 <__ieee754_fmod+0x124>
 8009e14:	f1bc 0f00 	cmp.w	ip, #0
 8009e18:	d144      	bne.n	8009ea4 <__ieee754_fmod+0x114>
 8009e1a:	4a5f      	ldr	r2, [pc, #380]	@ (8009f98 <__ieee754_fmod+0x208>)
 8009e1c:	463b      	mov	r3, r7
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	dc3d      	bgt.n	8009e9e <__ieee754_fmod+0x10e>
 8009e22:	485e      	ldr	r0, [pc, #376]	@ (8009f9c <__ieee754_fmod+0x20c>)
 8009e24:	4281      	cmp	r1, r0
 8009e26:	db4a      	blt.n	8009ebe <__ieee754_fmod+0x12e>
 8009e28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e2c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009e30:	485a      	ldr	r0, [pc, #360]	@ (8009f9c <__ieee754_fmod+0x20c>)
 8009e32:	4282      	cmp	r2, r0
 8009e34:	db57      	blt.n	8009ee6 <__ieee754_fmod+0x156>
 8009e36:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8009e3a:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 8009e3e:	1a89      	subs	r1, r1, r2
 8009e40:	1b98      	subs	r0, r3, r6
 8009e42:	eba4 070e 	sub.w	r7, r4, lr
 8009e46:	2900      	cmp	r1, #0
 8009e48:	d162      	bne.n	8009f10 <__ieee754_fmod+0x180>
 8009e4a:	4574      	cmp	r4, lr
 8009e4c:	bf38      	it	cc
 8009e4e:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8009e52:	2800      	cmp	r0, #0
 8009e54:	bfa4      	itt	ge
 8009e56:	463c      	movge	r4, r7
 8009e58:	4603      	movge	r3, r0
 8009e5a:	ea53 0104 	orrs.w	r1, r3, r4
 8009e5e:	d0c6      	beq.n	8009dee <__ieee754_fmod+0x5e>
 8009e60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009e64:	db69      	blt.n	8009f3a <__ieee754_fmod+0x1aa>
 8009e66:	494d      	ldr	r1, [pc, #308]	@ (8009f9c <__ieee754_fmod+0x20c>)
 8009e68:	428a      	cmp	r2, r1
 8009e6a:	db6c      	blt.n	8009f46 <__ieee754_fmod+0x1b6>
 8009e6c:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009e70:	432b      	orrs	r3, r5
 8009e72:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8009e76:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	e7a9      	b.n	8009dd2 <__ieee754_fmod+0x42>
 8009e7e:	3901      	subs	r1, #1
 8009e80:	005b      	lsls	r3, r3, #1
 8009e82:	e7c3      	b.n	8009e0c <__ieee754_fmod+0x7c>
 8009e84:	4945      	ldr	r1, [pc, #276]	@ (8009f9c <__ieee754_fmod+0x20c>)
 8009e86:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	ddc0      	ble.n	8009e10 <__ieee754_fmod+0x80>
 8009e8e:	3901      	subs	r1, #1
 8009e90:	005b      	lsls	r3, r3, #1
 8009e92:	e7fa      	b.n	8009e8a <__ieee754_fmod+0xfa>
 8009e94:	ea4f 5128 	mov.w	r1, r8, asr #20
 8009e98:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8009e9c:	e7b8      	b.n	8009e10 <__ieee754_fmod+0x80>
 8009e9e:	3a01      	subs	r2, #1
 8009ea0:	005b      	lsls	r3, r3, #1
 8009ea2:	e7bc      	b.n	8009e1e <__ieee754_fmod+0x8e>
 8009ea4:	4a3d      	ldr	r2, [pc, #244]	@ (8009f9c <__ieee754_fmod+0x20c>)
 8009ea6:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	ddb9      	ble.n	8009e22 <__ieee754_fmod+0x92>
 8009eae:	3a01      	subs	r2, #1
 8009eb0:	005b      	lsls	r3, r3, #1
 8009eb2:	e7fa      	b.n	8009eaa <__ieee754_fmod+0x11a>
 8009eb4:	ea4f 522c 	mov.w	r2, ip, asr #20
 8009eb8:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8009ebc:	e7b1      	b.n	8009e22 <__ieee754_fmod+0x92>
 8009ebe:	1a40      	subs	r0, r0, r1
 8009ec0:	281f      	cmp	r0, #31
 8009ec2:	dc0a      	bgt.n	8009eda <__ieee754_fmod+0x14a>
 8009ec4:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 8009ec8:	fa08 f800 	lsl.w	r8, r8, r0
 8009ecc:	fa2a f303 	lsr.w	r3, sl, r3
 8009ed0:	ea43 0308 	orr.w	r3, r3, r8
 8009ed4:	fa0a f400 	lsl.w	r4, sl, r0
 8009ed8:	e7aa      	b.n	8009e30 <__ieee754_fmod+0xa0>
 8009eda:	4b31      	ldr	r3, [pc, #196]	@ (8009fa0 <__ieee754_fmod+0x210>)
 8009edc:	1a5b      	subs	r3, r3, r1
 8009ede:	fa0a f303 	lsl.w	r3, sl, r3
 8009ee2:	2400      	movs	r4, #0
 8009ee4:	e7a4      	b.n	8009e30 <__ieee754_fmod+0xa0>
 8009ee6:	1a80      	subs	r0, r0, r2
 8009ee8:	281f      	cmp	r0, #31
 8009eea:	dc0a      	bgt.n	8009f02 <__ieee754_fmod+0x172>
 8009eec:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 8009ef0:	fa0c fc00 	lsl.w	ip, ip, r0
 8009ef4:	fa27 f606 	lsr.w	r6, r7, r6
 8009ef8:	ea46 060c 	orr.w	r6, r6, ip
 8009efc:	fa07 fe00 	lsl.w	lr, r7, r0
 8009f00:	e79d      	b.n	8009e3e <__ieee754_fmod+0xae>
 8009f02:	4e27      	ldr	r6, [pc, #156]	@ (8009fa0 <__ieee754_fmod+0x210>)
 8009f04:	1ab6      	subs	r6, r6, r2
 8009f06:	fa07 f606 	lsl.w	r6, r7, r6
 8009f0a:	f04f 0e00 	mov.w	lr, #0
 8009f0e:	e796      	b.n	8009e3e <__ieee754_fmod+0xae>
 8009f10:	4574      	cmp	r4, lr
 8009f12:	bf38      	it	cc
 8009f14:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	da05      	bge.n	8009f28 <__ieee754_fmod+0x198>
 8009f1c:	0fe0      	lsrs	r0, r4, #31
 8009f1e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8009f22:	0064      	lsls	r4, r4, #1
 8009f24:	3901      	subs	r1, #1
 8009f26:	e78b      	b.n	8009e40 <__ieee754_fmod+0xb0>
 8009f28:	ea50 0307 	orrs.w	r3, r0, r7
 8009f2c:	f43f af5f 	beq.w	8009dee <__ieee754_fmod+0x5e>
 8009f30:	0ffb      	lsrs	r3, r7, #31
 8009f32:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8009f36:	007c      	lsls	r4, r7, #1
 8009f38:	e7f4      	b.n	8009f24 <__ieee754_fmod+0x194>
 8009f3a:	0fe1      	lsrs	r1, r4, #31
 8009f3c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8009f40:	0064      	lsls	r4, r4, #1
 8009f42:	3a01      	subs	r2, #1
 8009f44:	e78c      	b.n	8009e60 <__ieee754_fmod+0xd0>
 8009f46:	1a89      	subs	r1, r1, r2
 8009f48:	2914      	cmp	r1, #20
 8009f4a:	dc0a      	bgt.n	8009f62 <__ieee754_fmod+0x1d2>
 8009f4c:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8009f50:	fa03 f202 	lsl.w	r2, r3, r2
 8009f54:	40cc      	lsrs	r4, r1
 8009f56:	4322      	orrs	r2, r4
 8009f58:	410b      	asrs	r3, r1
 8009f5a:	ea43 0105 	orr.w	r1, r3, r5
 8009f5e:	4610      	mov	r0, r2
 8009f60:	e737      	b.n	8009dd2 <__ieee754_fmod+0x42>
 8009f62:	291f      	cmp	r1, #31
 8009f64:	dc07      	bgt.n	8009f76 <__ieee754_fmod+0x1e6>
 8009f66:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8009f6a:	40cc      	lsrs	r4, r1
 8009f6c:	fa03 f202 	lsl.w	r2, r3, r2
 8009f70:	4322      	orrs	r2, r4
 8009f72:	462b      	mov	r3, r5
 8009f74:	e7f1      	b.n	8009f5a <__ieee754_fmod+0x1ca>
 8009f76:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8009f7a:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8009f7e:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8009f82:	32e2      	adds	r2, #226	@ 0xe2
 8009f84:	fa43 f202 	asr.w	r2, r3, r2
 8009f88:	e7f3      	b.n	8009f72 <__ieee754_fmod+0x1e2>
 8009f8a:	bf00      	nop
 8009f8c:	7fefffff 	.word	0x7fefffff
 8009f90:	7ff00000 	.word	0x7ff00000
 8009f94:	0800a020 	.word	0x0800a020
 8009f98:	fffffbed 	.word	0xfffffbed
 8009f9c:	fffffc02 	.word	0xfffffc02
 8009fa0:	fffffbe2 	.word	0xfffffbe2

08009fa4 <_init>:
 8009fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa6:	bf00      	nop
 8009fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009faa:	bc08      	pop	{r3}
 8009fac:	469e      	mov	lr, r3
 8009fae:	4770      	bx	lr

08009fb0 <_fini>:
 8009fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb2:	bf00      	nop
 8009fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fb6:	bc08      	pop	{r3}
 8009fb8:	469e      	mov	lr, r3
 8009fba:	4770      	bx	lr
