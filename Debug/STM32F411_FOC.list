
STM32F411_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d030  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006c8  0800d1d0  0800d1d0  0000e1d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d898  0800d898  0000f258  2**0
                  CONTENTS
  4 .ARM          00000008  0800d898  0800d898  0000e898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d8a0  0800d8a0  0000f258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d8a0  0800d8a0  0000e8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d8a4  0800d8a4  0000e8a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000258  20000000  0800d8a8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004bc  20000258  0800db00  0000f258  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000714  0800db00  0000f714  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f258  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015daa  00000000  00000000  0000f288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031f0  00000000  00000000  00025032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001328  00000000  00000000  00028228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef5  00000000  00000000  00029550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a53  00000000  00000000  0002a445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000191de  00000000  00000000  00043e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f92d  00000000  00000000  0005d076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fc9a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000679c  00000000  00000000  000fc9e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00103184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000258 	.word	0x20000258
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d1b8 	.word	0x0800d1b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000025c 	.word	0x2000025c
 80001dc:	0800d1b8 	.word	0x0800d1b8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <AS5600_ReadRegister>:

/*
 * Static low level functions to read/write to registers
 */
static HAL_StatusTypeDef AS5600_ReadRegister(AS5600 *dev, uint8_t reg, uint8_t *data)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af04      	add	r7, sp, #16
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	607a      	str	r2, [r7, #4]
 8001000:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(dev->i2cHandle, AS5600_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	6818      	ldr	r0, [r3, #0]
 8001006:	7afb      	ldrb	r3, [r7, #11]
 8001008:	b29a      	uxth	r2, r3
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	9302      	str	r3, [sp, #8]
 8001010:	2301      	movs	r3, #1
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2301      	movs	r3, #1
 800101a:	216c      	movs	r1, #108	@ 0x6c
 800101c:	f003 fa06 	bl	800442c <HAL_I2C_Mem_Read>
 8001020:	4603      	mov	r3, r0
}
 8001022:	4618      	mov	r0, r3
 8001024:	3710      	adds	r7, #16
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <AS5600_ReadRegisters>:

static HAL_StatusTypeDef AS5600_ReadRegisters(AS5600 *dev, uint8_t reg, uint8_t *data, uint8_t length)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b088      	sub	sp, #32
 800102e:	af04      	add	r7, sp, #16
 8001030:	60f8      	str	r0, [r7, #12]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	461a      	mov	r2, r3
 8001036:	460b      	mov	r3, r1
 8001038:	72fb      	strb	r3, [r7, #11]
 800103a:	4613      	mov	r3, r2
 800103c:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(dev->i2cHandle, AS5600_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6818      	ldr	r0, [r3, #0]
 8001042:	7afb      	ldrb	r3, [r7, #11]
 8001044:	b29a      	uxth	r2, r3
 8001046:	7abb      	ldrb	r3, [r7, #10]
 8001048:	b29b      	uxth	r3, r3
 800104a:	f04f 31ff 	mov.w	r1, #4294967295
 800104e:	9102      	str	r1, [sp, #8]
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	9300      	str	r3, [sp, #0]
 8001056:	2301      	movs	r3, #1
 8001058:	216c      	movs	r1, #108	@ 0x6c
 800105a:	f003 f9e7 	bl	800442c <HAL_I2C_Mem_Read>
 800105e:	4603      	mov	r3, r0
}
 8001060:	4618      	mov	r0, r3
 8001062:	3710      	adds	r7, #16
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <AS5600_ZeroAngle>:
/*
 * @brief Zeroes the sensor value.
 * @param[in] AS5600* sensor
 */
void AS5600_ZeroAngle(AS5600* dev)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	dev->total_angle_rad = 0;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
	dev->prev_raw_angle = AS5600_ReadRawAngle(dev);
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f000 f879 	bl	8001170 <AS5600_ReadRawAngle>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	809a      	strh	r2, [r3, #4]
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <AS5600_Init>:
/*
 * Initialization
 * Pass the struct to each function as pointer
 */
uint8_t AS5600_Init(AS5600* dev, I2C_HandleTypeDef* i2c_handle, uint8_t zero)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	4613      	mov	r3, r2
 800109c:	71fb      	strb	r3, [r7, #7]
	/* Set struct params */
	dev->i2cHandle = i2c_handle;
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	68ba      	ldr	r2, [r7, #8]
 80010a2:	601a      	str	r2, [r3, #0]
	dev->total_angle_rad = 0;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f04f 0200 	mov.w	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
	dev->prev_time_us = 0;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]

	uint8_t err_num = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	77fb      	strb	r3, [r7, #31]

	/*
	 * Check magnet strength
	 */
	HAL_StatusTypeDef magnet_status;
	uint8_t regdata = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	767b      	strb	r3, [r7, #25]

	magnet_status = AS5600_ReadRegister(dev, MAGNET_STATUS_REG, &regdata);
 80010ba:	f107 0319 	add.w	r3, r7, #25
 80010be:	461a      	mov	r2, r3
 80010c0:	210b      	movs	r1, #11
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f7ff ff96 	bl	8000ff4 <AS5600_ReadRegister>
 80010c8:	4603      	mov	r3, r0
 80010ca:	77bb      	strb	r3, [r7, #30]
	err_num += (magnet_status != HAL_OK);
 80010cc:	7fbb      	ldrb	r3, [r7, #30]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	bf14      	ite	ne
 80010d2:	2301      	movne	r3, #1
 80010d4:	2300      	moveq	r3, #0
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	461a      	mov	r2, r3
 80010da:	7ffb      	ldrb	r3, [r7, #31]
 80010dc:	4413      	add	r3, r2
 80010de:	77fb      	strb	r3, [r7, #31]

	/* bit[5] indicates magnet present if set */
	if(!(regdata & (1 << 5))){
 80010e0:	7e7b      	ldrb	r3, [r7, #25]
 80010e2:	f003 0320 	and.w	r3, r3, #32
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d101      	bne.n	80010ee <AS5600_Init+0x5e>

		return 255;
 80010ea:	23ff      	movs	r3, #255	@ 0xff
 80010ec:	e038      	b.n	8001160 <AS5600_Init+0xd0>
	}

	/* initialize starting angle */
	uint8_t regdata_angle[2] = {0, 0};
 80010ee:	2300      	movs	r3, #0
 80010f0:	82bb      	strh	r3, [r7, #20]
	HAL_StatusTypeDef status = AS5600_ReadRegisters(dev, RAW_ANGLE_MSB_REG, regdata_angle, 2);
 80010f2:	f107 0214 	add.w	r2, r7, #20
 80010f6:	2302      	movs	r3, #2
 80010f8:	210c      	movs	r1, #12
 80010fa:	68f8      	ldr	r0, [r7, #12]
 80010fc:	f7ff ff95 	bl	800102a <AS5600_ReadRegisters>
 8001100:	4603      	mov	r3, r0
 8001102:	777b      	strb	r3, [r7, #29]

	/* Mask & shift 4 MSB left by 8 and concatenate with 8 LSBs */
	uint16_t raw_angle = (((regdata_angle[0] & 0x0F) << 8) | regdata_angle[1]);
 8001104:	7d3b      	ldrb	r3, [r7, #20]
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	b21b      	sxth	r3, r3
 800110a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800110e:	b21a      	sxth	r2, r3
 8001110:	7d7b      	ldrb	r3, [r7, #21]
 8001112:	b21b      	sxth	r3, r3
 8001114:	4313      	orrs	r3, r2
 8001116:	b21b      	sxth	r3, r3
 8001118:	837b      	strh	r3, [r7, #26]

	err_num += (status != HAL_OK);
 800111a:	7f7b      	ldrb	r3, [r7, #29]
 800111c:	2b00      	cmp	r3, #0
 800111e:	bf14      	ite	ne
 8001120:	2301      	movne	r3, #1
 8001122:	2300      	moveq	r3, #0
 8001124:	b2db      	uxtb	r3, r3
 8001126:	461a      	mov	r2, r3
 8001128:	7ffb      	ldrb	r3, [r7, #31]
 800112a:	4413      	add	r3, r2
 800112c:	77fb      	strb	r3, [r7, #31]

	dev->prev_raw_angle = raw_angle;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	8b7a      	ldrh	r2, [r7, #26]
 8001132:	809a      	strh	r2, [r3, #4]

	if(!zero)
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d111      	bne.n	800115e <AS5600_Init+0xce>
	{
		dev->total_angle_rad = raw_angle * BIT_TO_RAD;
 800113a:	8b7b      	ldrh	r3, [r7, #26]
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff f9f9 	bl	8000534 <__aeabi_i2d>
 8001142:	a309      	add	r3, pc, #36	@ (adr r3, 8001168 <AS5600_Init+0xd8>)
 8001144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001148:	f7ff fa5e 	bl	8000608 <__aeabi_dmul>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4610      	mov	r0, r2
 8001152:	4619      	mov	r1, r3
 8001154:	f7ff fd50 	bl	8000bf8 <__aeabi_d2f>
 8001158:	4602      	mov	r2, r0
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	609a      	str	r2, [r3, #8]
	}

	return err_num;
 800115e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001160:	4618      	mov	r0, r3
 8001162:	3720      	adds	r7, #32
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	8b5cd7aa 	.word	0x8b5cd7aa
 800116c:	3f59238d 	.word	0x3f59238d

08001170 <AS5600_ReadRawAngle>:

	return dev->total_angle_rad;
}

uint16_t AS5600_ReadRawAngle(AS5600 *dev)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	uint8_t regdata[2] = {0, 0};
 8001178:	2300      	movs	r3, #0
 800117a:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef status = AS5600_ReadRegisters(dev, RAW_ANGLE_MSB_REG, regdata, 2);
 800117c:	f107 0208 	add.w	r2, r7, #8
 8001180:	2302      	movs	r3, #2
 8001182:	210c      	movs	r1, #12
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff50 	bl	800102a <AS5600_ReadRegisters>
 800118a:	4603      	mov	r3, r0
 800118c:	73fb      	strb	r3, [r7, #15]

	/* Return early if register read fails */
	if(status != HAL_OK)
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <AS5600_ReadRawAngle+0x28>
	{
		return 0;;
 8001194:	2300      	movs	r3, #0
 8001196:	e00b      	b.n	80011b0 <AS5600_ReadRawAngle+0x40>
	}

	/* Mask & shift 4 MSB left by 8 and concatenate with 8 LSBs */
	uint16_t raw_angle = (((regdata[0] & 0x0F) << 8) | regdata[1]);
 8001198:	7a3b      	ldrb	r3, [r7, #8]
 800119a:	021b      	lsls	r3, r3, #8
 800119c:	b21b      	sxth	r3, r3
 800119e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	7a7b      	ldrb	r3, [r7, #9]
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	4313      	orrs	r3, r2
 80011aa:	b21b      	sxth	r3, r3
 80011ac:	81bb      	strh	r3, [r7, #12]
	return raw_angle;
 80011ae:	89bb      	ldrh	r3, [r7, #12]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <float_to_fix16>:
{
	return x * fix16_one;
}

fix16_t float_to_fix16(float x)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	ed87 0a01 	vstr	s0, [r7, #4]
	return (fix16_t)(x * fix16_one + (x >= 0 ? 0.5f : -0.5f));
 80011c2:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8001204 <float_to_fix16+0x4c>
 80011c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80011d6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80011da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011de:	db02      	blt.n	80011e6 <float_to_fix16+0x2e>
 80011e0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80011e4:	e001      	b.n	80011ea <float_to_fix16+0x32>
 80011e6:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80011ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f2:	ee17 3a90 	vmov	r3, s15
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	00010000 	.word	0x00010000

08001208 <fix16_to_float>:

float fix16_to_float(fix16_t x)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	return x / (float)fix16_one;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	ee07 3a90 	vmov	s15, r3
 8001216:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800121a:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8001238 <fix16_to_float+0x30>
 800121e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001222:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001226:	eef0 7a66 	vmov.f32	s15, s13
}
 800122a:	eeb0 0a67 	vmov.f32	s0, s15
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	00010000 	.word	0x00010000

0800123c <fix16_abs>:
	}
	return ((x - fix16_half) >> 16);
}

uint32_t fix16_abs(fix16_t x)
{
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
	return (x >= 0) ? x : -x;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b00      	cmp	r3, #0
 8001248:	bfb8      	it	lt
 800124a:	425b      	neglt	r3, r3
}
 800124c:	4618      	mov	r0, r3
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <fix16_mul>:
 *
 * @warning Fixed-point multiplications really likes to overflow & cause errors.
 * 			Based on calculations, the maximum value to multiply together is only +- 127.
 */
fix16_t fix16_mul(fix16_t a, fix16_t b)
{
 8001258:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800125c:	b087      	sub	sp, #28
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	6039      	str	r1, [r7, #0]
	int64_t product = (int64_t)a * (int64_t)b;
 8001264:	6879      	ldr	r1, [r7, #4]
 8001266:	17c8      	asrs	r0, r1, #31
 8001268:	4688      	mov	r8, r1
 800126a:	4681      	mov	r9, r0
 800126c:	6839      	ldr	r1, [r7, #0]
 800126e:	17c8      	asrs	r0, r1, #31
 8001270:	460c      	mov	r4, r1
 8001272:	4605      	mov	r5, r0
 8001274:	fb04 f009 	mul.w	r0, r4, r9
 8001278:	fb08 f105 	mul.w	r1, r8, r5
 800127c:	4401      	add	r1, r0
 800127e:	fba8 2304 	umull	r2, r3, r8, r4
 8001282:	4419      	add	r1, r3
 8001284:	460b      	mov	r3, r1
 8001286:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800128a:	e9c7 2304 	strd	r2, r3, [r7, #16]

	uint32_t upper = (product >> 47);
 800128e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001292:	f04f 0200 	mov.w	r2, #0
 8001296:	f04f 0300 	mov.w	r3, #0
 800129a:	13ca      	asrs	r2, r1, #15
 800129c:	17cb      	asrs	r3, r1, #31
 800129e:	4613      	mov	r3, r2
 80012a0:	60fb      	str	r3, [r7, #12]

	/* Check for overflow. The most significant 17 bits should all be 0 or 1 */
	if(product < 0)
 80012a2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	da0f      	bge.n	80012ca <fix16_mul+0x72>
	{
		/* For negative numbers, all upper is 1. So invert to check if all 0. */
		if(~upper)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b0:	d002      	beq.n	80012b8 <fix16_mul+0x60>
		{
			return fix16_overflow;
 80012b2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80012b6:	e02b      	b.n	8001310 <fix16_mul+0xb8>
		}
		product --;
 80012b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012bc:	f112 3aff 	adds.w	sl, r2, #4294967295
 80012c0:	f143 3bff 	adc.w	fp, r3, #4294967295
 80012c4:	e9c7 ab04 	strd	sl, fp, [r7, #16]
 80012c8:	e005      	b.n	80012d6 <fix16_mul+0x7e>
	}
	else
	{
		/* Positive numbers: all 0 */
		if(upper)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d002      	beq.n	80012d6 <fix16_mul+0x7e>
		{
			return fix16_overflow;
 80012d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80012d4:	e01c      	b.n	8001310 <fix16_mul+0xb8>
		}
	}

	/* Rounding : take bit 15 (the first bit discarded) & add it to result */
	fix16_t result = product >> 16;
 80012d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012da:	f04f 0200 	mov.w	r2, #0
 80012de:	f04f 0300 	mov.w	r3, #0
 80012e2:	0c02      	lsrs	r2, r0, #16
 80012e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80012e8:	140b      	asrs	r3, r1, #16
 80012ea:	4613      	mov	r3, r2
 80012ec:	60bb      	str	r3, [r7, #8]
	result += (product & 0x8000) >> 15;
 80012ee:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	f04f 0300 	mov.w	r3, #0
 80012fa:	0bc2      	lsrs	r2, r0, #15
 80012fc:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8001300:	13cb      	asrs	r3, r1, #15
 8001302:	4613      	mov	r3, r2
 8001304:	f003 0201 	and.w	r2, r3, #1
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	4413      	add	r3, r2
 800130c:	60bb      	str	r3, [r7, #8]

	return result;
 800130e:	68bb      	ldr	r3, [r7, #8]
}
 8001310:	4618      	mov	r0, r3
 8001312:	371c      	adds	r7, #28
 8001314:	46bd      	mov	sp, r7
 8001316:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800131a:	4770      	bx	lr

0800131c <clz>:

/*
 * @brief Counts leading 0s in an integer
 */
static uint8_t clz(uint32_t x)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
	uint8_t result = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	73fb      	strb	r3, [r7, #15]
	if (x == 0) return 32;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d107      	bne.n	800133e <clz+0x22>
 800132e:	2320      	movs	r3, #32
 8001330:	e014      	b.n	800135c <clz+0x40>
	while (!(x & 0xF0000000)) { result += 4; x <<= 4; }
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	3304      	adds	r3, #4
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	011b      	lsls	r3, r3, #4
 800133c:	607b      	str	r3, [r7, #4]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001344:	d3f5      	bcc.n	8001332 <clz+0x16>
	while (!(x & 0x80000000)) { result += 1; x <<= 1; }
 8001346:	e005      	b.n	8001354 <clz+0x38>
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	3301      	adds	r3, #1
 800134c:	73fb      	strb	r3, [r7, #15]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	607b      	str	r3, [r7, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	daf6      	bge.n	8001348 <clz+0x2c>
	return result;
 800135a:	7bfb      	ldrb	r3, [r7, #15]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <fix16_div>:

/*
 * @brief Fixed-point division leveraging hardware division found on compatible MCUs.
 */
fix16_t fix16_div(fix16_t a, fix16_t b)
{
 8001368:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800136c:	b098      	sub	sp, #96	@ 0x60
 800136e:	af00      	add	r7, sp, #0
 8001370:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001372:	62b9      	str	r1, [r7, #40]	@ 0x28
	// This uses a hardware 32/32 bit division multiple times, until we have
	// computed all the bits in (a<<17)/b. Usually this takes 1-3 iterations.

	/* Prevent division by 0: returns min value instead */
	if (b == 0)
 8001374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001376:	2b00      	cmp	r3, #0
 8001378:	d102      	bne.n	8001380 <fix16_div+0x18>
	{
		return fix16_minimum;
 800137a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800137e:	e0e6      	b.n	800154e <fix16_div+0x1e6>
	}

    uint32_t remainder = fix16_abs(a);
 8001380:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001382:	f7ff ff5b 	bl	800123c <fix16_abs>
 8001386:	65f8      	str	r0, [r7, #92]	@ 0x5c
    uint32_t divider = fix16_abs(b);
 8001388:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800138a:	f7ff ff57 	bl	800123c <fix16_abs>
 800138e:	65b8      	str	r0, [r7, #88]	@ 0x58
    uint64_t quotient = 0;
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    int bit_pos = 17;
 800139c:	2311      	movs	r3, #17
 800139e:	64fb      	str	r3, [r7, #76]	@ 0x4c

	/* Optimize initial calculations for the case where divisor is large */
	if (divider & 0xFFF00000)
 80013a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80013a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80013a6:	d33d      	bcc.n	8001424 <fix16_div+0xbc>
	{
		uint32_t shifted_div = ((divider >> 17) + 1);
 80013a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80013aa:	0c5b      	lsrs	r3, r3, #17
 80013ac:	3301      	adds	r3, #1
 80013ae:	643b      	str	r3, [r7, #64]	@ 0x40
        quotient = remainder / shifted_div;
 80013b0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80013b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80013b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b8:	2200      	movs	r2, #0
 80013ba:	613b      	str	r3, [r7, #16]
 80013bc:	617a      	str	r2, [r7, #20]
 80013be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013c2:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
        uint64_t tmp = ((uint64_t)quotient * (uint64_t)divider) >> 17;
 80013c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80013c8:	2200      	movs	r2, #0
 80013ca:	623b      	str	r3, [r7, #32]
 80013cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80013ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80013d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013d4:	460a      	mov	r2, r1
 80013d6:	fb02 f203 	mul.w	r2, r2, r3
 80013da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80013dc:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80013e0:	4601      	mov	r1, r0
 80013e2:	fb01 f303 	mul.w	r3, r1, r3
 80013e6:	441a      	add	r2, r3
 80013e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80013ea:	6a39      	ldr	r1, [r7, #32]
 80013ec:	fba3 8901 	umull	r8, r9, r3, r1
 80013f0:	eb02 0309 	add.w	r3, r2, r9
 80013f4:	4699      	mov	r9, r3
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	f04f 0300 	mov.w	r3, #0
 80013fe:	ea4f 4258 	mov.w	r2, r8, lsr #17
 8001402:	ea42 32c9 	orr.w	r2, r2, r9, lsl #15
 8001406:	ea4f 4359 	mov.w	r3, r9, lsr #17
 800140a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        remainder -= (uint32_t)(tmp);
 800140e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001410:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }

	/* If divider is divisible by 16, take advantage of bit shifting */
	while (!(divider & 0xF) && bit_pos >= 4)
 8001416:	e005      	b.n	8001424 <fix16_div+0xbc>
	{
		divider >>= 4;
 8001418:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800141a:	091b      	lsrs	r3, r3, #4
 800141c:	65bb      	str	r3, [r7, #88]	@ 0x58
		bit_pos -= 4;
 800141e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001420:	3b04      	subs	r3, #4
 8001422:	64fb      	str	r3, [r7, #76]	@ 0x4c
	while (!(divider & 0xF) && bit_pos >= 4)
 8001424:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	2b00      	cmp	r3, #0
 800142c:	d15b      	bne.n	80014e6 <fix16_div+0x17e>
 800142e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001430:	2b03      	cmp	r3, #3
 8001432:	dcf1      	bgt.n	8001418 <fix16_div+0xb0>
	}

	/* Main division loop */
	while (remainder && bit_pos >= 0)
 8001434:	e057      	b.n	80014e6 <fix16_div+0x17e>
	{
		/* Use clz() to check max left shifts without overflowing */
		int shift = clz(remainder);
 8001436:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001438:	f7ff ff70 	bl	800131c <clz>
 800143c:	4603      	mov	r3, r0
 800143e:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (shift > bit_pos) shift = bit_pos;
 8001440:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001442:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001444:	429a      	cmp	r2, r3
 8001446:	dd01      	ble.n	800144c <fix16_div+0xe4>
 8001448:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800144a:	64bb      	str	r3, [r7, #72]	@ 0x48
		remainder <<= shift;
 800144c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800144e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	65fb      	str	r3, [r7, #92]	@ 0x5c
		bit_pos -= shift;
 8001456:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001458:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		uint32_t div = remainder / divider;
 800145e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001460:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001462:	fbb2 f3f3 	udiv	r3, r2, r3
 8001466:	637b      	str	r3, [r7, #52]	@ 0x34
        remainder = remainder % divider;
 8001468:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800146a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800146c:	fbb3 f2f2 	udiv	r2, r3, r2
 8001470:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001472:	fb01 f202 	mul.w	r2, r1, r2
 8001476:	1a9b      	subs	r3, r3, r2
 8001478:	65fb      	str	r3, [r7, #92]	@ 0x5c
        quotient += (uint64_t)div << bit_pos;
 800147a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800147c:	2200      	movs	r2, #0
 800147e:	61bb      	str	r3, [r7, #24]
 8001480:	61fa      	str	r2, [r7, #28]
 8001482:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001484:	f1a3 0120 	sub.w	r1, r3, #32
 8001488:	f1c3 0220 	rsb	r2, r3, #32
 800148c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001490:	4648      	mov	r0, r9
 8001492:	fa00 f503 	lsl.w	r5, r0, r3
 8001496:	4640      	mov	r0, r8
 8001498:	fa00 f101 	lsl.w	r1, r0, r1
 800149c:	430d      	orrs	r5, r1
 800149e:	4641      	mov	r1, r8
 80014a0:	fa21 f202 	lsr.w	r2, r1, r2
 80014a4:	4315      	orrs	r5, r2
 80014a6:	4642      	mov	r2, r8
 80014a8:	fa02 f403 	lsl.w	r4, r2, r3
 80014ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80014b0:	1911      	adds	r1, r2, r4
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	416b      	adcs	r3, r5
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014bc:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50

		if (div & ~(0xFFFFFFFF >> bit_pos))
 80014c0:	f04f 32ff 	mov.w	r2, #4294967295
 80014c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80014c6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ca:	43da      	mvns	r2, r3
 80014cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014ce:	4013      	ands	r3, r2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d002      	beq.n	80014da <fix16_div+0x172>
				return fix16_overflow;
 80014d4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80014d8:	e039      	b.n	800154e <fix16_div+0x1e6>

		remainder <<= 1;
 80014da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	65fb      	str	r3, [r7, #92]	@ 0x5c
		bit_pos--;
 80014e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80014e2:	3b01      	subs	r3, #1
 80014e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	while (remainder && bit_pos >= 0)
 80014e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d002      	beq.n	80014f2 <fix16_div+0x18a>
 80014ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	daa1      	bge.n	8001436 <fix16_div+0xce>
	}

	/* Rounding: quotient is always positive */
	quotient++;
 80014f2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80014f6:	1c51      	adds	r1, r2, #1
 80014f8:	6039      	str	r1, [r7, #0]
 80014fa:	f143 0300 	adc.w	r3, r3, #0
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001504:	e9c7 3414 	strd	r3, r4, [r7, #80]	@ 0x50

	fix16_t result = (quotient + (quotient >= 0 ? 1 : -1)) >> 1;
 8001508:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800150c:	f112 0a01 	adds.w	sl, r2, #1
 8001510:	f143 0b00 	adc.w	fp, r3, #0
 8001514:	f04f 0200 	mov.w	r2, #0
 8001518:	f04f 0300 	mov.w	r3, #0
 800151c:	ea4f 025a 	mov.w	r2, sl, lsr #1
 8001520:	ea42 72cb 	orr.w	r2, r2, fp, lsl #31
 8001524:	ea4f 035b 	mov.w	r3, fp, lsr #1
 8001528:	4613      	mov	r3, r2
 800152a:	647b      	str	r3, [r7, #68]	@ 0x44

	/* Sign of result */
	if ((a ^ b) & 0x80000000)
 800152c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800152e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001530:	4053      	eors	r3, r2
 8001532:	2b00      	cmp	r3, #0
 8001534:	da0a      	bge.n	800154c <fix16_div+0x1e4>
	{
		if (result == fix16_minimum)
 8001536:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800153a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800153c:	4293      	cmp	r3, r2
 800153e:	d102      	bne.n	8001546 <fix16_div+0x1de>
				return fix16_overflow;
 8001540:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001544:	e003      	b.n	800154e <fix16_div+0x1e6>

		result = -result;
 8001546:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001548:	425b      	negs	r3, r3
 800154a:	647b      	str	r3, [r7, #68]	@ 0x44
	}

	return result;
 800154c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800154e:	4618      	mov	r0, r3
 8001550:	3760      	adds	r7, #96	@ 0x60
 8001552:	46bd      	mov	sp, r7
 8001554:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001558 <_cos>:
/*
 * @brief Cosine approximation
 * @param[in] angle(radians)
 * @return cos(angle)
 */
__STATIC_INLINE fix16_t _cos(fix16_t angle) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  fix16_t _angle = angle + FIX16_PI_2;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f503 33c9 	add.w	r3, r3, #102912	@ 0x19200
 8001566:	3320      	adds	r3, #32
 8001568:	60fb      	str	r3, [r7, #12]
  _angle = _angle > FIX16_2PI ? _angle - FIX16_2PI : _angle;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	4a08      	ldr	r2, [pc, #32]	@ (8001590 <_cos+0x38>)
 800156e:	4293      	cmp	r3, r2
 8001570:	dd04      	ble.n	800157c <_cos+0x24>
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f5a3 23c9 	sub.w	r3, r3, #411648	@ 0x64800
 8001578:	3b7f      	subs	r3, #127	@ 0x7f
 800157a:	e000      	b.n	800157e <_cos+0x26>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	60fb      	str	r3, [r7, #12]
  return _sin(_angle);
 8001580:	68f8      	ldr	r0, [r7, #12]
 8001582:	f000 fb29 	bl	8001bd8 <_sin>
 8001586:	4603      	mov	r3, r0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3710      	adds	r7, #16
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	0006487f 	.word	0x0006487f
 8001594:	00000000 	.word	0x00000000

08001598 <_normalizeAngle>:
/*
 * @brief Normalize angle to [0, 2pi]
 * @param[in] angle(radians)
 * @return normalized_angle
 */
__STATIC_INLINE fix16_t _normalizeAngle(float angle){
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);       // fmod(x,y) returns remainder of x/y
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7fe ffd8 	bl	8000558 <__aeabi_f2d>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	ed9f 1b14 	vldr	d1, [pc, #80]	@ 8001600 <_normalizeAngle+0x68>
 80015b0:	ec43 2b10 	vmov	d0, r2, r3
 80015b4:	f00a fc9a 	bl	800beec <fmod>
 80015b8:	ec53 2b10 	vmov	r2, r3, d0
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	f7ff fb1a 	bl	8000bf8 <__aeabi_d2f>
 80015c4:	4603      	mov	r3, r0
 80015c6:	60fb      	str	r3, [r7, #12]
  return a >= 0 ? float_to_fix16(a) : (float_to_fix16(a) + FIX16_2PI);    // add 2pi to negative angles to make positive
 80015c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80015cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d4:	db05      	blt.n	80015e2 <_normalizeAngle+0x4a>
 80015d6:	ed97 0a03 	vldr	s0, [r7, #12]
 80015da:	f7ff fded 	bl	80011b8 <float_to_fix16>
 80015de:	4603      	mov	r3, r0
 80015e0:	e007      	b.n	80015f2 <_normalizeAngle+0x5a>
 80015e2:	ed97 0a03 	vldr	s0, [r7, #12]
 80015e6:	f7ff fde7 	bl	80011b8 <float_to_fix16>
 80015ea:	4603      	mov	r3, r0
 80015ec:	f503 23c9 	add.w	r3, r3, #411648	@ 0x64800
 80015f0:	337f      	adds	r3, #127	@ 0x7f
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	f3af 8000 	nop.w
 8001600:	60000000 	.word	0x60000000
 8001604:	401921fb 	.word	0x401921fb

08001608 <_electricalAngle>:
 * @brief Calculates electrical angle from rotor angle
 * @param[in] shaft_angle(radians)
 * @param[in] pole_pairs
 * @return electrical angle
 */
__STATIC_INLINE fix16_t _electricalAngle(fix16_t shaft_angle, uint8_t pole_pairs){
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	70fb      	strb	r3, [r7, #3]
  return (fix16_mul(shaft_angle, (fix16_t)pole_pairs));
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	4619      	mov	r1, r3
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff fe1d 	bl	8001258 <fix16_mul>
 800161e:	4603      	mov	r3, r0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <PWM_Start_3_Channel>:
/*
 * @brief Starts PWM channels 1, 2, 3 of specified timer.
 * @param[in] TIM_HandleTypeDef timer
 */
void PWM_Start_3_Channel(TIM_HandleTypeDef* timer)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(timer, TIM_CHANNEL_1);
 8001630:	2100      	movs	r1, #0
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f004 f998 	bl	8005968 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer, TIM_CHANNEL_2);
 8001638:	2104      	movs	r1, #4
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f004 f994 	bl	8005968 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer, TIM_CHANNEL_3);
 8001640:	2108      	movs	r1, #8
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f004 f990 	bl	8005968 <HAL_TIM_PWM_Start>
}
 8001648:	bf00      	nop
 800164a:	3708      	adds	r7, #8
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <SetPWM>:
 * @scope static
 * @brief Set pwm duty cycle of timer channels
 * @param[in] BLDCMotor* motor
 */
__STATIC_INLINE void SetPWM(BLDCMotor* motor)
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
	uint16_t ARR = motor->timer->Instance->ARR;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69db      	ldr	r3, [r3, #28]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001660:	81fb      	strh	r3, [r7, #14]
	motor->timer->Instance->CCR1 = _constrain(motor->pv->Ua / motor->supply_voltage, 0.0f, 1.0f) * ARR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	edd3 6a00 	vldr	s13, [r3]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	ee07 3a90 	vmov	s15, r3
 8001672:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001676:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800167a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800167e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001682:	d502      	bpl.n	800168a <SetPWM+0x3a>
 8001684:	eddf 7a61 	vldr	s15, [pc, #388]	@ 800180c <SetPWM+0x1bc>
 8001688:	e021      	b.n	80016ce <SetPWM+0x7e>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	edd3 6a00 	vldr	s13, [r3]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	ee07 3a90 	vmov	s15, r3
 800169a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800169e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80016a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ae:	dd02      	ble.n	80016b6 <SetPWM+0x66>
 80016b0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80016b4:	e00b      	b.n	80016ce <SetPWM+0x7e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	695b      	ldr	r3, [r3, #20]
 80016ba:	edd3 6a00 	vldr	s13, [r3]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	ee07 3a90 	vmov	s15, r3
 80016c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ce:	89fb      	ldrh	r3, [r7, #14]
 80016d0:	ee07 3a10 	vmov	s14, r3
 80016d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80016d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016e6:	ee17 2a90 	vmov	r2, s15
 80016ea:	635a      	str	r2, [r3, #52]	@ 0x34
	motor->timer->Instance->CCR2 = _constrain(motor->pv->Ub / motor->supply_voltage, 0.0f, 1.0f) * ARR;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	695b      	ldr	r3, [r3, #20]
 80016f0:	edd3 6a01 	vldr	s13, [r3, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	ee07 3a90 	vmov	s15, r3
 80016fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001704:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170c:	d502      	bpl.n	8001714 <SetPWM+0xc4>
 800170e:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800180c <SetPWM+0x1bc>
 8001712:	e021      	b.n	8001758 <SetPWM+0x108>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	edd3 6a01 	vldr	s13, [r3, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	ee07 3a90 	vmov	s15, r3
 8001724:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001728:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800172c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001730:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001738:	dd02      	ble.n	8001740 <SetPWM+0xf0>
 800173a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800173e:	e00b      	b.n	8001758 <SetPWM+0x108>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	edd3 6a01 	vldr	s13, [r3, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	ee07 3a90 	vmov	s15, r3
 8001750:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001758:	89fb      	ldrh	r3, [r7, #14]
 800175a:	ee07 3a10 	vmov	s14, r3
 800175e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001762:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001770:	ee17 2a90 	vmov	r2, s15
 8001774:	639a      	str	r2, [r3, #56]	@ 0x38
	motor->timer->Instance->CCR3 = _constrain(motor->pv->Uc / motor->supply_voltage, 0.0f, 1.0f) * ARR;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	edd3 6a02 	vldr	s13, [r3, #8]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	ee07 3a90 	vmov	s15, r3
 8001786:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800178a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800178e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001796:	d502      	bpl.n	800179e <SetPWM+0x14e>
 8001798:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 800180c <SetPWM+0x1bc>
 800179c:	e021      	b.n	80017e2 <SetPWM+0x192>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	edd3 6a02 	vldr	s13, [r3, #8]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	ee07 3a90 	vmov	s15, r3
 80017ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80017ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c2:	dd02      	ble.n	80017ca <SetPWM+0x17a>
 80017c4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80017c8:	e00b      	b.n	80017e2 <SetPWM+0x192>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	edd3 6a02 	vldr	s13, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	ee07 3a90 	vmov	s15, r3
 80017da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017e2:	89fb      	ldrh	r3, [r7, #14]
 80017e4:	ee07 3a10 	vmov	s14, r3
 80017e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80017ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69db      	ldr	r3, [r3, #28]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017fa:	ee17 2a90 	vmov	r2, s15
 80017fe:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001800:	bf00      	nop
 8001802:	3714      	adds	r7, #20
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr
 800180c:	00000000 	.word	0x00000000

08001810 <Var_t_Init>:
 * @scope Static
 * @brief Initializers for motor sub-structs
 * @retval Struct_t struct
 */
static Var_t Var_t_Init()
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
	Var_t vars = {
 8001818:	2300      	movs	r3, #0
 800181a:	60bb      	str	r3, [r7, #8]
 800181c:	2300      	movs	r3, #0
 800181e:	60fb      	str	r3, [r7, #12]
		.shaft_angle = 0,
		.prev_us = 0
	};

	return vars;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	461a      	mov	r2, r3
 8001824:	f107 0308 	add.w	r3, r7, #8
 8001828:	e893 0003 	ldmia.w	r3, {r0, r1}
 800182c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <DQ_t_Init>:

static DQ_t DQ_t_Init()
{
 800183c:	b480      	push	{r7}
 800183e:	b087      	sub	sp, #28
 8001840:	af00      	add	r7, sp, #0
	DQ_t dq = {
 8001842:	f04f 0300 	mov.w	r3, #0
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	f04f 0300 	mov.w	r3, #0
 800184c:	60fb      	str	r3, [r7, #12]
		.Ud = 0,
		.Uq = 0
	};

	return dq;
 800184e:	f107 0310 	add.w	r3, r7, #16
 8001852:	f107 0208 	add.w	r2, r7, #8
 8001856:	e892 0003 	ldmia.w	r2, {r0, r1}
 800185a:	e883 0003 	stmia.w	r3, {r0, r1}
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	ee07 2a10 	vmov	s14, r2
 8001866:	ee07 3a90 	vmov	s15, r3
}
 800186a:	eeb0 0a47 	vmov.f32	s0, s14
 800186e:	eef0 0a67 	vmov.f32	s1, s15
 8001872:	371c      	adds	r7, #28
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <PV_t_Init>:

static PV_t PV_t_Init()
{
 800187c:	b480      	push	{r7}
 800187e:	b08b      	sub	sp, #44	@ 0x2c
 8001880:	af00      	add	r7, sp, #0
	PV_t pv = {
 8001882:	f04f 0300 	mov.w	r3, #0
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	61bb      	str	r3, [r7, #24]
		.Ua = 0,
		.Ub = 0,
		.Uc = 0
	};

	return pv;
 8001894:	f107 031c 	add.w	r3, r7, #28
 8001898:	f107 0210 	add.w	r2, r7, #16
 800189c:	ca07      	ldmia	r2, {r0, r1, r2}
 800189e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80018a2:	69f9      	ldr	r1, [r7, #28]
 80018a4:	6a3a      	ldr	r2, [r7, #32]
 80018a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a8:	ee06 1a90 	vmov	s13, r1
 80018ac:	ee07 2a10 	vmov	s14, r2
 80018b0:	ee07 3a90 	vmov	s15, r3
}
 80018b4:	eeb0 0a66 	vmov.f32	s0, s13
 80018b8:	eef0 0a47 	vmov.f32	s1, s14
 80018bc:	eeb0 1a67 	vmov.f32	s2, s15
 80018c0:	372c      	adds	r7, #44	@ 0x2c
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <BLDCMotor_Init>:
 * - Voltage limit is 3V by default.
 *
 * @retval BLDCMotor motor
 */
void BLDCMotor_Init(BLDCMotor* motor, Var_t* var, DQ_t* dq, PV_t* pv, PID_t* pid, LPF_t* lpf, TIM_HandleTypeDef* timer, uint8_t pole_pairs)
{
 80018ca:	b5b0      	push	{r4, r5, r7, lr}
 80018cc:	b090      	sub	sp, #64	@ 0x40
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80018d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80018d4:	637a      	str	r2, [r7, #52]	@ 0x34
 80018d6:	633b      	str	r3, [r7, #48]	@ 0x30
	/* De-reference & initialize sub-structs */
	*var = Var_t_Init();
 80018d8:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 80018da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff ff96 	bl	8001810 <Var_t_Init>
 80018e4:	4622      	mov	r2, r4
 80018e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018ea:	e893 0003 	ldmia.w	r3, {r0, r1}
 80018ee:	e882 0003 	stmia.w	r2, {r0, r1}
	*dq = DQ_t_Init();
 80018f2:	f7ff ffa3 	bl	800183c <DQ_t_Init>
 80018f6:	eeb0 7a40 	vmov.f32	s14, s0
 80018fa:	eef0 7a60 	vmov.f32	s15, s1
 80018fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001900:	ed83 7a00 	vstr	s14, [r3]
 8001904:	edc3 7a01 	vstr	s15, [r3, #4]
	*pv = PV_t_Init();
 8001908:	f7ff ffb8 	bl	800187c <PV_t_Init>
 800190c:	eef0 6a40 	vmov.f32	s13, s0
 8001910:	eeb0 7a60 	vmov.f32	s14, s1
 8001914:	eef0 7a41 	vmov.f32	s15, s2
 8001918:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800191a:	edc3 6a00 	vstr	s13, [r3]
 800191e:	ed83 7a01 	vstr	s14, [r3, #4]
 8001922:	edc3 7a02 	vstr	s15, [r3, #8]
	*pid = PID_Init();
 8001926:	6d3c      	ldr	r4, [r7, #80]	@ 0x50
 8001928:	463b      	mov	r3, r7
 800192a:	4618      	mov	r0, r3
 800192c:	f000 fe00 	bl	8002530 <PID_Init>
 8001930:	4625      	mov	r5, r4
 8001932:	463c      	mov	r4, r7
 8001934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001936:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800193a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800193c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001940:	e885 0003 	stmia.w	r5, {r0, r1}
	*lpf = LPF_Init();
 8001944:	6d7c      	ldr	r4, [r7, #84]	@ 0x54
 8001946:	463b      	mov	r3, r7
 8001948:	4618      	mov	r0, r3
 800194a:	f000 f9ab 	bl	8001ca4 <LPF_Init>
 800194e:	463b      	mov	r3, r7
 8001950:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001954:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	/* BLDCMotor struct initialization */
	motor->vars = var;
 8001958:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800195a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800195c:	60da      	str	r2, [r3, #12]
	motor->dq = dq;
 800195e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001960:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001962:	611a      	str	r2, [r3, #16]
	motor->pv = pv;
 8001964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001966:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001968:	615a      	str	r2, [r3, #20]
	motor->sensor = NULL;
 800196a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]
	motor->timer = timer;
 8001970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001972:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001974:	61da      	str	r2, [r3, #28]
	motor->pid = pid;
 8001976:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001978:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800197a:	621a      	str	r2, [r3, #32]
	motor->lpf = lpf;
 800197c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800197e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001980:	625a      	str	r2, [r3, #36]	@ 0x24
	motor->sensor_dir = 1;
 8001982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001984:	2201      	movs	r2, #1
 8001986:	701a      	strb	r2, [r3, #0]
	motor->pole_pairs = pole_pairs;
 8001988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800198a:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800198e:	705a      	strb	r2, [r3, #1]
	motor->supply_voltage = 12;
 8001990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001992:	220c      	movs	r2, #12
 8001994:	609a      	str	r2, [r3, #8]
	motor->voltage_limit = 3;
 8001996:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001998:	2203      	movs	r2, #3
 800199a:	605a      	str	r2, [r3, #4]
}
 800199c:	bf00      	nop
 800199e:	3740      	adds	r7, #64	@ 0x40
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bdb0      	pop	{r4, r5, r7, pc}

080019a4 <SetTorque>:
/*
 * @brief Inverse Clarke & Park transformations to calculate phase voltages
 * @param[in] BLDCMotor* motor
 * @note Calls setpwm()
 */
void SetTorque(BLDCMotor* motor) {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	ed2d 8b02 	vpush	{d8}
 80019aa:	b086      	sub	sp, #24
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	/* Constrain Uq to within voltage range */
	motor->dq->Uq = _constrain(motor->dq->Uq, -motor->voltage_limit, motor->voltage_limit);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	ed93 7a00 	vldr	s14, [r3]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	425b      	negs	r3, r3
 80019be:	ee07 3a90 	vmov	s15, r3
 80019c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ce:	d507      	bpl.n	80019e0 <SetTorque+0x3c>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	425b      	negs	r3, r3
 80019d6:	ee07 3a90 	vmov	s15, r3
 80019da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019de:	e019      	b.n	8001a14 <SetTorque+0x70>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	ed93 7a00 	vldr	s14, [r3]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	ee07 3a90 	vmov	s15, r3
 80019f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fc:	dd06      	ble.n	8001a0c <SetTorque+0x68>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	ee07 3a90 	vmov	s15, r3
 8001a06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a0a:	e003      	b.n	8001a14 <SetTorque+0x70>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	edd3 7a00 	vldr	s15, [r3]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	edc3 7a00 	vstr	s15, [r3]
    /* Normalize electric angle */
    float el_angle = _normalizeAngle(_electricalAngle(motor->vars->shaft_angle, motor->pole_pairs));
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	785b      	ldrb	r3, [r3, #1]
 8001a26:	4619      	mov	r1, r3
 8001a28:	4610      	mov	r0, r2
 8001a2a:	f7ff fded 	bl	8001608 <_electricalAngle>
 8001a2e:	ee07 0a90 	vmov	s15, r0
 8001a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a36:	eeb0 0a67 	vmov.f32	s0, s15
 8001a3a:	f7ff fdad 	bl	8001598 <_normalizeAngle>
 8001a3e:	ee07 0a90 	vmov	s15, r0
 8001a42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a46:	edc7 7a05 	vstr	s15, [r7, #20]

	/* Inverse park transform */
	float Ualpha = -(motor->dq->Uq) * _sin(el_angle);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	edd3 7a00 	vldr	s15, [r3]
 8001a52:	eeb1 8a67 	vneg.f32	s16, s15
 8001a56:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a5e:	ee17 0a90 	vmov	r0, s15
 8001a62:	f000 f8b9 	bl	8001bd8 <_sin>
 8001a66:	ee07 0a90 	vmov	s15, r0
 8001a6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a6e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001a72:	edc7 7a04 	vstr	s15, [r7, #16]
	float Ubeta = motor->dq->Uq * _cos(el_angle);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	ed93 8a00 	vldr	s16, [r3]
 8001a7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a86:	ee17 0a90 	vmov	r0, s15
 8001a8a:	f7ff fd65 	bl	8001558 <_cos>
 8001a8e:	ee07 0a90 	vmov	s15, r0
 8001a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a96:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001a9a:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Inverse Clarke transform */
	motor->pv->Ua = Ualpha + motor->supply_voltage / 2.0f;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	ee07 3a90 	vmov	s15, r3
 8001aa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aaa:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001aae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	edd7 7a04 	vldr	s15, [r7, #16]
 8001aba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001abe:	edc3 7a00 	vstr	s15, [r3]
	motor->pv->Ub = (_SQRT3 * Ubeta - Ualpha) / 2.0f + motor->supply_voltage / 2.0f;
 8001ac2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ac6:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001b50 <SetTorque+0x1ac>
 8001aca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ace:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ad2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ad6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001ada:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	ee07 3a90 	vmov	s15, r3
 8001ae6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001aea:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001aee:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001afa:	edc3 7a01 	vstr	s15, [r3, #4]
	motor->pv->Uc = (- Ualpha - _SQRT3 * Ubeta) / 2.0f + motor->supply_voltage / 2.0f;
 8001afe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b02:	eeb1 7a67 	vneg.f32	s14, s15
 8001b06:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b0a:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8001b50 <SetTorque+0x1ac>
 8001b0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b16:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001b1a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	ee07 3a90 	vmov	s15, r3
 8001b26:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b2a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001b2e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b3a:	edc3 7a02 	vstr	s15, [r3, #8]

	SetPWM(motor);
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff fd86 	bl	8001650 <SetPWM>
}
 8001b44:	bf00      	nop
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	ecbd 8b02 	vpop	{d8}
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	3fddb3d7 	.word	0x3fddb3d7

08001b54 <LinkSensor>:
 * @param[in] BLDCMotor* motor
 * @param[in] AS5600* sensor
 * @param[in] I2C_HandleTypeDef *i2c_handle
 */
void LinkSensor(BLDCMotor* motor, AS5600* sensor, I2C_HandleTypeDef *i2c_handle)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
	uint8_t init_stat = AS5600_Init(sensor, i2c_handle, 1);
 8001b60:	2201      	movs	r2, #1
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	68b8      	ldr	r0, [r7, #8]
 8001b66:	f7ff fa93 	bl	8001090 <AS5600_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	75fb      	strb	r3, [r7, #23]

	/* Check if sensor link successful */
	if(init_stat != 0)
 8001b6e:	7dfb      	ldrb	r3, [r7, #23]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <LinkSensor+0x28>
	{
		motor->sensor = NULL;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2200      	movs	r2, #0
 8001b78:	619a      	str	r2, [r3, #24]
		return;
 8001b7a:	e029      	b.n	8001bd0 <LinkSensor+0x7c>
	}

	motor->sensor = sensor;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	68ba      	ldr	r2, [r7, #8]
 8001b80:	619a      	str	r2, [r3, #24]

	motor->dq->Uq = motor->voltage_limit / 2;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	0fda      	lsrs	r2, r3, #31
 8001b88:	4413      	add	r3, r2
 8001b8a:	105b      	asrs	r3, r3, #1
 8001b8c:	ee07 3a90 	vmov	s15, r3
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b98:	edc3 7a00 	vstr	s15, [r3]
	motor->vars->shaft_angle = _PI_2;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]
	SetTorque(motor);
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f7ff fefd 	bl	80019a4 <SetTorque>
	HAL_Delay(1500);
 8001baa:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001bae:	f001 f9e1 	bl	8002f74 <HAL_Delay>
	AS5600_ZeroAngle(sensor);
 8001bb2:	68b8      	ldr	r0, [r7, #8]
 8001bb4:	f7ff fa58 	bl	8001068 <AS5600_ZeroAngle>
	motor->dq->Uq = 0;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
	motor->vars->shaft_angle = 0;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
	SetTorque(motor);
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f7ff feea 	bl	80019a4 <SetTorque>
}
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <_sin>:
/*
 * @brief Sine approximation using look-up table & linear interpolation
 * @param[in] angle(radians)
 * @return sin(angle)
 */
fix16_t _sin(fix16_t angle){
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]

  int32_t first, second;
  fix16_t index = fix16_div(angle, FIX16_2PI) << SINELUT_WIDTH_BITS;
 8001be0:	492e      	ldr	r1, [pc, #184]	@ (8001c9c <_sin+0xc4>)
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff fbc0 	bl	8001368 <fix16_div>
 8001be8:	4603      	mov	r3, r0
 8001bea:	021b      	lsls	r3, r3, #8
 8001bec:	60fb      	str	r3, [r7, #12]
  uint8_t frac = (uint8_t)((index & 0xFFFF) >> 8);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	121b      	asrs	r3, r3, #8
 8001bf2:	72fb      	strb	r3, [r7, #11]
  index >>= 16;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	141b      	asrs	r3, r3, #16
 8001bf8:	60fb      	str	r3, [r7, #12]

  if (index < SINELUT_QUAD_1){
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2b3f      	cmp	r3, #63	@ 0x3f
 8001bfe:	dc0b      	bgt.n	8001c18 <_sin+0x40>
    first = (int32_t)sineLUT[index];
 8001c00:	4a27      	ldr	r2, [pc, #156]	@ (8001ca0 <_sin+0xc8>)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c08:	617b      	str	r3, [r7, #20]
    second = (int32_t)sineLUT[index + 1];
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	4a24      	ldr	r2, [pc, #144]	@ (8001ca0 <_sin+0xc8>)
 8001c10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c14:	613b      	str	r3, [r7, #16]
 8001c16:	e033      	b.n	8001c80 <_sin+0xa8>
  }
  else if (index < SINELUT_QUAD_2){
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c1c:	dc0e      	bgt.n	8001c3c <_sin+0x64>
    first = (int32_t)sineLUT[SINELUT_WIDTH_HALF - index];
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001c24:	4a1e      	ldr	r2, [pc, #120]	@ (8001ca0 <_sin+0xc8>)
 8001c26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c2a:	617b      	str	r3, [r7, #20]
    second = (int32_t)sineLUT[SINELUT_WIDTH_HALF - index - 1];
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8001c32:	4a1b      	ldr	r2, [pc, #108]	@ (8001ca0 <_sin+0xc8>)
 8001c34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	e021      	b.n	8001c80 <_sin+0xa8>
  }
  else if (index < SINELUT_QUAD_3){
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2bbf      	cmp	r3, #191	@ 0xbf
 8001c40:	dc0e      	bgt.n	8001c60 <_sin+0x88>
    first = -(int32_t)sineLUT[index - SINELUT_WIDTH_HALF];
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	3b80      	subs	r3, #128	@ 0x80
 8001c46:	4a16      	ldr	r2, [pc, #88]	@ (8001ca0 <_sin+0xc8>)
 8001c48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c4c:	425b      	negs	r3, r3
 8001c4e:	617b      	str	r3, [r7, #20]
    second = -(int32_t)sineLUT[index - SINELUT_WIDTH_HALF + 1];
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	3b7f      	subs	r3, #127	@ 0x7f
 8001c54:	4a12      	ldr	r2, [pc, #72]	@ (8001ca0 <_sin+0xc8>)
 8001c56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c5a:	425b      	negs	r3, r3
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	e00f      	b.n	8001c80 <_sin+0xa8>
  }
  else {
    first = -(int32_t)sineLUT[SINELUT_WIDTH - index];
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8001c66:	4a0e      	ldr	r2, [pc, #56]	@ (8001ca0 <_sin+0xc8>)
 8001c68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c6c:	425b      	negs	r3, r3
 8001c6e:	617b      	str	r3, [r7, #20]
    second = -(int32_t)sineLUT[SINELUT_WIDTH - index - 1];
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8001c76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca0 <_sin+0xc8>)
 8001c78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c7c:	425b      	negs	r3, r3
 8001c7e:	613b      	str	r3, [r7, #16]
  }

  return (fix16_t)((first + (((second - first) * frac) >> 8)) * 2);
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	7afa      	ldrb	r2, [r7, #11]
 8001c88:	fb02 f303 	mul.w	r3, r2, r3
 8001c8c:	121a      	asrs	r2, r3, #8
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	4413      	add	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	0006487f 	.word	0x0006487f
 8001ca0:	20000000 	.word	0x20000000

08001ca4 <LPF_Init>:

/*
 * @brief LPF struct initialization function
 */
LPF_t LPF_Init()
{
 8001ca4:	b490      	push	{r4, r7}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
	LPF_t lpf_dev = {
 8001cac:	4b09      	ldr	r3, [pc, #36]	@ (8001cd4 <LPF_Init+0x30>)
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
			.prev_data = 0,
			.prev_us = 0,
			.time_const = 0.1
	};

	return lpf_dev;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	461c      	mov	r4, r3
 8001cbe:	f107 030c 	add.w	r3, r7, #12
 8001cc2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001cc6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bc90      	pop	{r4, r7}
 8001cd2:	4770      	bx	lr
 8001cd4:	3dcccccd 	.word	0x3dcccccd

08001cd8 <DWT_Init>:

/*
 * Timer utility functions to return number of microseconds since power up.
 */
__STATIC_INLINE void DWT_Init(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8001cdc:	4b08      	ldr	r3, [pc, #32]	@ (8001d00 <DWT_Init+0x28>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	4a07      	ldr	r2, [pc, #28]	@ (8001d00 <DWT_Init+0x28>)
 8001ce2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ce6:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8001ce8:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <DWT_Init+0x2c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a05      	ldr	r2, [pc, #20]	@ (8001d04 <DWT_Init+0x2c>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	6013      	str	r3, [r2, #0]
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000edf0 	.word	0xe000edf0
 8001d04:	e0001000 	.word	0xe0001000

08001d08 <micros>:
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

__STATIC_INLINE uint32_t micros(void){
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8001d0c:	4b07      	ldr	r3, [pc, #28]	@ (8001d2c <micros+0x24>)
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	4b07      	ldr	r3, [pc, #28]	@ (8001d30 <micros+0x28>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4907      	ldr	r1, [pc, #28]	@ (8001d34 <micros+0x2c>)
 8001d16:	fba1 1303 	umull	r1, r3, r1, r3
 8001d1a:	0c9b      	lsrs	r3, r3, #18
 8001d1c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	e0001000 	.word	0xe0001000
 8001d30:	20000084 	.word	0x20000084
 8001d34:	431bde83 	.word	0x431bde83

08001d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d38:	b5b0      	push	{r4, r5, r7, lr}
 8001d3a:	b0cc      	sub	sp, #304	@ 0x130
 8001d3c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d3e:	f001 f8d7 	bl	8002ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d42:	f000 f931 	bl	8001fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d46:	f000 fb7b 	bl	8002440 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d4a:	f000 fb49 	bl	80023e0 <MX_DMA_Init>
  MX_I2C1_Init();
 8001d4e:	f000 f9e5 	bl	800211c <MX_I2C1_Init>
  MX_TIM2_Init();
 8001d52:	f000 fa3f 	bl	80021d4 <MX_TIM2_Init>
  MX_I2C2_Init();
 8001d56:	f000 fa0f 	bl	8002178 <MX_I2C2_Init>
  MX_TIM3_Init();
 8001d5a:	f000 faa9 	bl	80022b0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001d5e:	f000 fb15 	bl	800238c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001d62:	f000 f989 	bl	8002078 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  /* Start PWM channels */
  PWM_Start_3_Channel(&htim2);
 8001d66:	4888      	ldr	r0, [pc, #544]	@ (8001f88 <main+0x250>)
 8001d68:	f7ff fc5e 	bl	8001628 <PWM_Start_3_Channel>

  DWT_Init();
 8001d6c:	f7ff ffb4 	bl	8001cd8 <DWT_Init>
  /* Create sensor & motor object */
  AS5600 s1;
  BLDCMotor m1;

  /* Init motor object */
  BLDC_Init(m1, htim2, 7);
 8001d70:	f107 04bc 	add.w	r4, r7, #188	@ 0xbc
 8001d74:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 8001d78:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 8001d7c:	f107 00d8 	add.w	r0, r7, #216	@ 0xd8
 8001d80:	2307      	movs	r3, #7
 8001d82:	9303      	str	r3, [sp, #12]
 8001d84:	4b80      	ldr	r3, [pc, #512]	@ (8001f88 <main+0x250>)
 8001d86:	9302      	str	r3, [sp, #8]
 8001d88:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001d8c:	9301      	str	r3, [sp, #4]
 8001d8e:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	4623      	mov	r3, r4
 8001d96:	f7ff fd98 	bl	80018ca <BLDCMotor_Init>

  /* Attach sensor to motor object & initialize */
  LinkSensor(&m1, &s1, &hi2c1);
 8001d9a:	f507 7180 	add.w	r1, r7, #256	@ 0x100
 8001d9e:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001da2:	4a7a      	ldr	r2, [pc, #488]	@ (8001f8c <main+0x254>)
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fed5 	bl	8001b54 <LinkSensor>

  SerialCommander_Init(&m1, &huart1);
 8001daa:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001dae:	4978      	ldr	r1, [pc, #480]	@ (8001f90 <main+0x258>)
 8001db0:	4618      	mov	r0, r3
 8001db2:	f000 fbe1 	bl	8002578 <SerialCommander_Init>
  uint32_t sin_time = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  uint32_t _sin_time = 0;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
//
//  sprintf(tx_buff, "sin time: %d, result: %f\n", _sin_time - sin_time, accum);
//  Serial_Print(&tx_buff);
//  HAL_Delay(50);

  volatile float accum = 0;
 8001dc2:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001dc6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
  volatile fix16_t accum_f = 0;
 8001dd0:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001dd4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]

  Serial_Print("############ Test begin ############\n");
 8001ddc:	486d      	ldr	r0, [pc, #436]	@ (8001f94 <main+0x25c>)
 8001dde:	f000 fc05 	bl	80025ec <Serial_Print>
  sin_time = micros();
 8001de2:	f7ff ff91 	bl	8001d08 <micros>
 8001de6:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

  for(float i = 0; i < 6.283; i += 0.01)
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001df2:	e037      	b.n	8001e64 <main+0x12c>
  {
	  accum += sin(i);
 8001df4:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001df8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fbaa 	bl	8000558 <__aeabi_f2d>
 8001e04:	4604      	mov	r4, r0
 8001e06:	460d      	mov	r5, r1
 8001e08:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8001e0c:	f7fe fba4 	bl	8000558 <__aeabi_f2d>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	ec43 2b10 	vmov	d0, r2, r3
 8001e18:	f00a f896 	bl	800bf48 <sin>
 8001e1c:	ec53 2b10 	vmov	r2, r3, d0
 8001e20:	4620      	mov	r0, r4
 8001e22:	4629      	mov	r1, r5
 8001e24:	f7fe fa3a 	bl	800029c <__adddf3>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f7fe fee2 	bl	8000bf8 <__aeabi_d2f>
 8001e34:	4602      	mov	r2, r0
 8001e36:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001e3a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e3e:	601a      	str	r2, [r3, #0]
  for(float i = 0; i < 6.283; i += 0.01)
 8001e40:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8001e44:	f7fe fb88 	bl	8000558 <__aeabi_f2d>
 8001e48:	a34b      	add	r3, pc, #300	@ (adr r3, 8001f78 <main+0x240>)
 8001e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4e:	f7fe fa25 	bl	800029c <__adddf3>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4610      	mov	r0, r2
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f7fe fecd 	bl	8000bf8 <__aeabi_d2f>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001e64:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8001e68:	f7fe fb76 	bl	8000558 <__aeabi_f2d>
 8001e6c:	a344      	add	r3, pc, #272	@ (adr r3, 8001f80 <main+0x248>)
 8001e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e72:	f7fe fe3b 	bl	8000aec <__aeabi_dcmplt>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1bb      	bne.n	8001df4 <main+0xbc>
  }

  _sin_time = micros();
 8001e7c:	f7ff ff44 	bl	8001d08 <micros>
 8001e80:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
  sprintf(tx_buff, "sin time: %d, accum: %f\n", _sin_time - sin_time, accum);
 8001e84:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001e8c:	1ad4      	subs	r4, r2, r3
 8001e8e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001e92:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe fb5d 	bl	8000558 <__aeabi_f2d>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	f107 0008 	add.w	r0, r7, #8
 8001ea6:	e9cd 2300 	strd	r2, r3, [sp]
 8001eaa:	4622      	mov	r2, r4
 8001eac:	493a      	ldr	r1, [pc, #232]	@ (8001f98 <main+0x260>)
 8001eae:	f006 fbe3 	bl	8008678 <siprintf>
  Serial_Print(&tx_buff);
 8001eb2:	f107 0308 	add.w	r3, r7, #8
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 fb98 	bl	80025ec <Serial_Print>
  HAL_Delay(10);
 8001ebc:	200a      	movs	r0, #10
 8001ebe:	f001 f859 	bl	8002f74 <HAL_Delay>

  sin_time = micros();
 8001ec2:	f7ff ff21 	bl	8001d08 <micros>
 8001ec6:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

    for(fix16_t i = 0; i < float_to_fix16(6.283); i += float_to_fix16(0.01))
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001ed0:	e019      	b.n	8001f06 <main+0x1ce>
    {
  	  accum_f += _sin(i);
 8001ed2:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8001ed6:	f7ff fe7f 	bl	8001bd8 <_sin>
 8001eda:	4602      	mov	r2, r0
 8001edc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001ee0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	441a      	add	r2, r3
 8001ee8:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001eec:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001ef0:	601a      	str	r2, [r3, #0]
    for(fix16_t i = 0; i < float_to_fix16(6.283); i += float_to_fix16(0.01))
 8001ef2:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8001f9c <main+0x264>
 8001ef6:	f7ff f95f 	bl	80011b8 <float_to_fix16>
 8001efa:	4602      	mov	r2, r0
 8001efc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001f00:	4413      	add	r3, r2
 8001f02:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8001f06:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8001fa0 <main+0x268>
 8001f0a:	f7ff f955 	bl	80011b8 <float_to_fix16>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001f14:	4293      	cmp	r3, r2
 8001f16:	dbdc      	blt.n	8001ed2 <main+0x19a>
    }

    _sin_time = micros();
 8001f18:	f7ff fef6 	bl	8001d08 <micros>
 8001f1c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    sprintf(tx_buff, "sin time: %d, accum: %f\n", _sin_time - sin_time, fix16_to_float(accum_f));
 8001f20:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001f28:	1ad4      	subs	r4, r2, r3
 8001f2a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8001f2e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff f967 	bl	8001208 <fix16_to_float>
 8001f3a:	ee10 3a10 	vmov	r3, s0
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe fb0a 	bl	8000558 <__aeabi_f2d>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	f107 0008 	add.w	r0, r7, #8
 8001f4c:	e9cd 2300 	strd	r2, r3, [sp]
 8001f50:	4622      	mov	r2, r4
 8001f52:	4911      	ldr	r1, [pc, #68]	@ (8001f98 <main+0x260>)
 8001f54:	f006 fb90 	bl	8008678 <siprintf>
    Serial_Print(&tx_buff);
 8001f58:	f107 0308 	add.w	r3, r7, #8
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 fb45 	bl	80025ec <Serial_Print>
    HAL_Delay(10);
 8001f62:	200a      	movs	r0, #10
 8001f64:	f001 f806 	bl	8002f74 <HAL_Delay>
    Serial_Print("############ Test ended ############\n");
 8001f68:	480e      	ldr	r0, [pc, #56]	@ (8001fa4 <main+0x26c>)
 8001f6a:	f000 fb3f 	bl	80025ec <Serial_Print>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f6e:	bf00      	nop
 8001f70:	e7fd      	b.n	8001f6e <main+0x236>
 8001f72:	bf00      	nop
 8001f74:	f3af 8000 	nop.w
 8001f78:	47ae147b 	.word	0x47ae147b
 8001f7c:	3f847ae1 	.word	0x3f847ae1
 8001f80:	c083126f 	.word	0xc083126f
 8001f84:	401921ca 	.word	0x401921ca
 8001f88:	200003c4 	.word	0x200003c4
 8001f8c:	2000031c 	.word	0x2000031c
 8001f90:	20000454 	.word	0x20000454
 8001f94:	0800d1d0 	.word	0x0800d1d0
 8001f98:	0800d1f8 	.word	0x0800d1f8
 8001f9c:	3c23d70a 	.word	0x3c23d70a
 8001fa0:	40c90e56 	.word	0x40c90e56
 8001fa4:	0800d214 	.word	0x0800d214

08001fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b094      	sub	sp, #80	@ 0x50
 8001fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fae:	f107 0320 	add.w	r3, r7, #32
 8001fb2:	2230      	movs	r2, #48	@ 0x30
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f006 fbc1 	bl	800873e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fbc:	f107 030c 	add.w	r3, r7, #12
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	4b27      	ldr	r3, [pc, #156]	@ (8002070 <SystemClock_Config+0xc8>)
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd4:	4a26      	ldr	r2, [pc, #152]	@ (8002070 <SystemClock_Config+0xc8>)
 8001fd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fda:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fdc:	4b24      	ldr	r3, [pc, #144]	@ (8002070 <SystemClock_Config+0xc8>)
 8001fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fe8:	2300      	movs	r3, #0
 8001fea:	607b      	str	r3, [r7, #4]
 8001fec:	4b21      	ldr	r3, [pc, #132]	@ (8002074 <SystemClock_Config+0xcc>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a20      	ldr	r2, [pc, #128]	@ (8002074 <SystemClock_Config+0xcc>)
 8001ff2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	4b1e      	ldr	r3, [pc, #120]	@ (8002074 <SystemClock_Config+0xcc>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002000:	607b      	str	r3, [r7, #4]
 8002002:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002004:	2301      	movs	r3, #1
 8002006:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002008:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800200c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800200e:	2302      	movs	r3, #2
 8002010:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002012:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002016:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002018:	2319      	movs	r3, #25
 800201a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800201c:	23c0      	movs	r3, #192	@ 0xc0
 800201e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002020:	2302      	movs	r3, #2
 8002022:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002024:	2304      	movs	r3, #4
 8002026:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002028:	f107 0320 	add.w	r3, r7, #32
 800202c:	4618      	mov	r0, r3
 800202e:	f002 ff05 	bl	8004e3c <HAL_RCC_OscConfig>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002038:	f000 fa74 	bl	8002524 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800203c:	230f      	movs	r3, #15
 800203e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002040:	2302      	movs	r3, #2
 8002042:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002048:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800204c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002052:	f107 030c 	add.w	r3, r7, #12
 8002056:	2103      	movs	r1, #3
 8002058:	4618      	mov	r0, r3
 800205a:	f003 f967 	bl	800532c <HAL_RCC_ClockConfig>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002064:	f000 fa5e 	bl	8002524 <Error_Handler>
  }
}
 8002068:	bf00      	nop
 800206a:	3750      	adds	r7, #80	@ 0x50
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40023800 	.word	0x40023800
 8002074:	40007000 	.word	0x40007000

08002078 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800207e:	463b      	mov	r3, r7
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
 8002084:	605a      	str	r2, [r3, #4]
 8002086:	609a      	str	r2, [r3, #8]
 8002088:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800208a:	4b21      	ldr	r3, [pc, #132]	@ (8002110 <MX_ADC1_Init+0x98>)
 800208c:	4a21      	ldr	r2, [pc, #132]	@ (8002114 <MX_ADC1_Init+0x9c>)
 800208e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002090:	4b1f      	ldr	r3, [pc, #124]	@ (8002110 <MX_ADC1_Init+0x98>)
 8002092:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002096:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002098:	4b1d      	ldr	r3, [pc, #116]	@ (8002110 <MX_ADC1_Init+0x98>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800209e:	4b1c      	ldr	r3, [pc, #112]	@ (8002110 <MX_ADC1_Init+0x98>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80020a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002110 <MX_ADC1_Init+0x98>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020aa:	4b19      	ldr	r3, [pc, #100]	@ (8002110 <MX_ADC1_Init+0x98>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020b2:	4b17      	ldr	r3, [pc, #92]	@ (8002110 <MX_ADC1_Init+0x98>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020b8:	4b15      	ldr	r3, [pc, #84]	@ (8002110 <MX_ADC1_Init+0x98>)
 80020ba:	4a17      	ldr	r2, [pc, #92]	@ (8002118 <MX_ADC1_Init+0xa0>)
 80020bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020be:	4b14      	ldr	r3, [pc, #80]	@ (8002110 <MX_ADC1_Init+0x98>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80020c4:	4b12      	ldr	r3, [pc, #72]	@ (8002110 <MX_ADC1_Init+0x98>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80020ca:	4b11      	ldr	r3, [pc, #68]	@ (8002110 <MX_ADC1_Init+0x98>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002110 <MX_ADC1_Init+0x98>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020d8:	480d      	ldr	r0, [pc, #52]	@ (8002110 <MX_ADC1_Init+0x98>)
 80020da:	f000 ff6f 	bl	8002fbc <HAL_ADC_Init>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80020e4:	f000 fa1e 	bl	8002524 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80020ec:	2301      	movs	r3, #1
 80020ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020f4:	463b      	mov	r3, r7
 80020f6:	4619      	mov	r1, r3
 80020f8:	4805      	ldr	r0, [pc, #20]	@ (8002110 <MX_ADC1_Init+0x98>)
 80020fa:	f000 ffa3 	bl	8003044 <HAL_ADC_ConfigChannel>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002104:	f000 fa0e 	bl	8002524 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002108:	bf00      	nop
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20000274 	.word	0x20000274
 8002114:	40012000 	.word	0x40012000
 8002118:	0f000001 	.word	0x0f000001

0800211c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002120:	4b12      	ldr	r3, [pc, #72]	@ (800216c <MX_I2C1_Init+0x50>)
 8002122:	4a13      	ldr	r2, [pc, #76]	@ (8002170 <MX_I2C1_Init+0x54>)
 8002124:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002126:	4b11      	ldr	r3, [pc, #68]	@ (800216c <MX_I2C1_Init+0x50>)
 8002128:	4a12      	ldr	r2, [pc, #72]	@ (8002174 <MX_I2C1_Init+0x58>)
 800212a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800212c:	4b0f      	ldr	r3, [pc, #60]	@ (800216c <MX_I2C1_Init+0x50>)
 800212e:	2200      	movs	r2, #0
 8002130:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002132:	4b0e      	ldr	r3, [pc, #56]	@ (800216c <MX_I2C1_Init+0x50>)
 8002134:	2200      	movs	r2, #0
 8002136:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002138:	4b0c      	ldr	r3, [pc, #48]	@ (800216c <MX_I2C1_Init+0x50>)
 800213a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800213e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002140:	4b0a      	ldr	r3, [pc, #40]	@ (800216c <MX_I2C1_Init+0x50>)
 8002142:	2200      	movs	r2, #0
 8002144:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002146:	4b09      	ldr	r3, [pc, #36]	@ (800216c <MX_I2C1_Init+0x50>)
 8002148:	2200      	movs	r2, #0
 800214a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800214c:	4b07      	ldr	r3, [pc, #28]	@ (800216c <MX_I2C1_Init+0x50>)
 800214e:	2200      	movs	r2, #0
 8002150:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002152:	4b06      	ldr	r3, [pc, #24]	@ (800216c <MX_I2C1_Init+0x50>)
 8002154:	2200      	movs	r2, #0
 8002156:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002158:	4804      	ldr	r0, [pc, #16]	@ (800216c <MX_I2C1_Init+0x50>)
 800215a:	f002 f823 	bl	80041a4 <HAL_I2C_Init>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002164:	f000 f9de 	bl	8002524 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002168:	bf00      	nop
 800216a:	bd80      	pop	{r7, pc}
 800216c:	2000031c 	.word	0x2000031c
 8002170:	40005400 	.word	0x40005400
 8002174:	000186a0 	.word	0x000186a0

08002178 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800217c:	4b12      	ldr	r3, [pc, #72]	@ (80021c8 <MX_I2C2_Init+0x50>)
 800217e:	4a13      	ldr	r2, [pc, #76]	@ (80021cc <MX_I2C2_Init+0x54>)
 8002180:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8002182:	4b11      	ldr	r3, [pc, #68]	@ (80021c8 <MX_I2C2_Init+0x50>)
 8002184:	4a12      	ldr	r2, [pc, #72]	@ (80021d0 <MX_I2C2_Init+0x58>)
 8002186:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002188:	4b0f      	ldr	r3, [pc, #60]	@ (80021c8 <MX_I2C2_Init+0x50>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800218e:	4b0e      	ldr	r3, [pc, #56]	@ (80021c8 <MX_I2C2_Init+0x50>)
 8002190:	2200      	movs	r2, #0
 8002192:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002194:	4b0c      	ldr	r3, [pc, #48]	@ (80021c8 <MX_I2C2_Init+0x50>)
 8002196:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800219a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800219c:	4b0a      	ldr	r3, [pc, #40]	@ (80021c8 <MX_I2C2_Init+0x50>)
 800219e:	2200      	movs	r2, #0
 80021a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80021a2:	4b09      	ldr	r3, [pc, #36]	@ (80021c8 <MX_I2C2_Init+0x50>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021a8:	4b07      	ldr	r3, [pc, #28]	@ (80021c8 <MX_I2C2_Init+0x50>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021ae:	4b06      	ldr	r3, [pc, #24]	@ (80021c8 <MX_I2C2_Init+0x50>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80021b4:	4804      	ldr	r0, [pc, #16]	@ (80021c8 <MX_I2C2_Init+0x50>)
 80021b6:	f001 fff5 	bl	80041a4 <HAL_I2C_Init>
 80021ba:	4603      	mov	r3, r0
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80021c0:	f000 f9b0 	bl	8002524 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80021c4:	bf00      	nop
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20000370 	.word	0x20000370
 80021cc:	40005800 	.word	0x40005800
 80021d0:	000186a0 	.word	0x000186a0

080021d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08a      	sub	sp, #40	@ 0x28
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021da:	f107 0320 	add.w	r3, r7, #32
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021e4:	1d3b      	adds	r3, r7, #4
 80021e6:	2200      	movs	r2, #0
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	605a      	str	r2, [r3, #4]
 80021ec:	609a      	str	r2, [r3, #8]
 80021ee:	60da      	str	r2, [r3, #12]
 80021f0:	611a      	str	r2, [r3, #16]
 80021f2:	615a      	str	r2, [r3, #20]
 80021f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021f6:	4b2d      	ldr	r3, [pc, #180]	@ (80022ac <MX_TIM2_Init+0xd8>)
 80021f8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80021fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 80021fe:	4b2b      	ldr	r3, [pc, #172]	@ (80022ac <MX_TIM2_Init+0xd8>)
 8002200:	220a      	movs	r2, #10
 8002202:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002204:	4b29      	ldr	r3, [pc, #164]	@ (80022ac <MX_TIM2_Init+0xd8>)
 8002206:	2200      	movs	r2, #0
 8002208:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 800220a:	4b28      	ldr	r3, [pc, #160]	@ (80022ac <MX_TIM2_Init+0xd8>)
 800220c:	22ff      	movs	r2, #255	@ 0xff
 800220e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002210:	4b26      	ldr	r3, [pc, #152]	@ (80022ac <MX_TIM2_Init+0xd8>)
 8002212:	2200      	movs	r2, #0
 8002214:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002216:	4b25      	ldr	r3, [pc, #148]	@ (80022ac <MX_TIM2_Init+0xd8>)
 8002218:	2280      	movs	r2, #128	@ 0x80
 800221a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800221c:	4823      	ldr	r0, [pc, #140]	@ (80022ac <MX_TIM2_Init+0xd8>)
 800221e:	f003 fb53 	bl	80058c8 <HAL_TIM_PWM_Init>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002228:	f000 f97c 	bl	8002524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800222c:	2300      	movs	r3, #0
 800222e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002230:	2300      	movs	r3, #0
 8002232:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002234:	f107 0320 	add.w	r3, r7, #32
 8002238:	4619      	mov	r1, r3
 800223a:	481c      	ldr	r0, [pc, #112]	@ (80022ac <MX_TIM2_Init+0xd8>)
 800223c:	f004 f85c 	bl	80062f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8002246:	f000 f96d 	bl	8002524 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800224a:	2360      	movs	r3, #96	@ 0x60
 800224c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	2200      	movs	r2, #0
 800225e:	4619      	mov	r1, r3
 8002260:	4812      	ldr	r0, [pc, #72]	@ (80022ac <MX_TIM2_Init+0xd8>)
 8002262:	f003 fd21 	bl	8005ca8 <HAL_TIM_PWM_ConfigChannel>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800226c:	f000 f95a 	bl	8002524 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002270:	1d3b      	adds	r3, r7, #4
 8002272:	2204      	movs	r2, #4
 8002274:	4619      	mov	r1, r3
 8002276:	480d      	ldr	r0, [pc, #52]	@ (80022ac <MX_TIM2_Init+0xd8>)
 8002278:	f003 fd16 	bl	8005ca8 <HAL_TIM_PWM_ConfigChannel>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8002282:	f000 f94f 	bl	8002524 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002286:	1d3b      	adds	r3, r7, #4
 8002288:	2208      	movs	r2, #8
 800228a:	4619      	mov	r1, r3
 800228c:	4807      	ldr	r0, [pc, #28]	@ (80022ac <MX_TIM2_Init+0xd8>)
 800228e:	f003 fd0b 	bl	8005ca8 <HAL_TIM_PWM_ConfigChannel>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8002298:	f000 f944 	bl	8002524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800229c:	4803      	ldr	r0, [pc, #12]	@ (80022ac <MX_TIM2_Init+0xd8>)
 800229e:	f000 fb1d 	bl	80028dc <HAL_TIM_MspPostInit>

}
 80022a2:	bf00      	nop
 80022a4:	3728      	adds	r7, #40	@ 0x28
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	200003c4 	.word	0x200003c4

080022b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b08a      	sub	sp, #40	@ 0x28
 80022b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b6:	f107 0320 	add.w	r3, r7, #32
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022c0:	1d3b      	adds	r3, r7, #4
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]
 80022c8:	609a      	str	r2, [r3, #8]
 80022ca:	60da      	str	r2, [r3, #12]
 80022cc:	611a      	str	r2, [r3, #16]
 80022ce:	615a      	str	r2, [r3, #20]
 80022d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002384 <MX_TIM3_Init+0xd4>)
 80022d4:	4a2c      	ldr	r2, [pc, #176]	@ (8002388 <MX_TIM3_Init+0xd8>)
 80022d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10;
 80022d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002384 <MX_TIM3_Init+0xd4>)
 80022da:	220a      	movs	r2, #10
 80022dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022de:	4b29      	ldr	r3, [pc, #164]	@ (8002384 <MX_TIM3_Init+0xd4>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 80022e4:	4b27      	ldr	r3, [pc, #156]	@ (8002384 <MX_TIM3_Init+0xd4>)
 80022e6:	22ff      	movs	r2, #255	@ 0xff
 80022e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ea:	4b26      	ldr	r3, [pc, #152]	@ (8002384 <MX_TIM3_Init+0xd4>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022f0:	4b24      	ldr	r3, [pc, #144]	@ (8002384 <MX_TIM3_Init+0xd4>)
 80022f2:	2280      	movs	r2, #128	@ 0x80
 80022f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80022f6:	4823      	ldr	r0, [pc, #140]	@ (8002384 <MX_TIM3_Init+0xd4>)
 80022f8:	f003 fae6 	bl	80058c8 <HAL_TIM_PWM_Init>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002302:	f000 f90f 	bl	8002524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002306:	2300      	movs	r3, #0
 8002308:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800230a:	2300      	movs	r3, #0
 800230c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800230e:	f107 0320 	add.w	r3, r7, #32
 8002312:	4619      	mov	r1, r3
 8002314:	481b      	ldr	r0, [pc, #108]	@ (8002384 <MX_TIM3_Init+0xd4>)
 8002316:	f003 ffef 	bl	80062f8 <HAL_TIMEx_MasterConfigSynchronization>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8002320:	f000 f900 	bl	8002524 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002324:	2360      	movs	r3, #96	@ 0x60
 8002326:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800232c:	2300      	movs	r3, #0
 800232e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002334:	1d3b      	adds	r3, r7, #4
 8002336:	2200      	movs	r2, #0
 8002338:	4619      	mov	r1, r3
 800233a:	4812      	ldr	r0, [pc, #72]	@ (8002384 <MX_TIM3_Init+0xd4>)
 800233c:	f003 fcb4 	bl	8005ca8 <HAL_TIM_PWM_ConfigChannel>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002346:	f000 f8ed 	bl	8002524 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800234a:	1d3b      	adds	r3, r7, #4
 800234c:	2204      	movs	r2, #4
 800234e:	4619      	mov	r1, r3
 8002350:	480c      	ldr	r0, [pc, #48]	@ (8002384 <MX_TIM3_Init+0xd4>)
 8002352:	f003 fca9 	bl	8005ca8 <HAL_TIM_PWM_ConfigChannel>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800235c:	f000 f8e2 	bl	8002524 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	2208      	movs	r2, #8
 8002364:	4619      	mov	r1, r3
 8002366:	4807      	ldr	r0, [pc, #28]	@ (8002384 <MX_TIM3_Init+0xd4>)
 8002368:	f003 fc9e 	bl	8005ca8 <HAL_TIM_PWM_ConfigChannel>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 8002372:	f000 f8d7 	bl	8002524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002376:	4803      	ldr	r0, [pc, #12]	@ (8002384 <MX_TIM3_Init+0xd4>)
 8002378:	f000 fab0 	bl	80028dc <HAL_TIM_MspPostInit>

}
 800237c:	bf00      	nop
 800237e:	3728      	adds	r7, #40	@ 0x28
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	2000040c 	.word	0x2000040c
 8002388:	40000400 	.word	0x40000400

0800238c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002390:	4b11      	ldr	r3, [pc, #68]	@ (80023d8 <MX_USART1_UART_Init+0x4c>)
 8002392:	4a12      	ldr	r2, [pc, #72]	@ (80023dc <MX_USART1_UART_Init+0x50>)
 8002394:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002396:	4b10      	ldr	r3, [pc, #64]	@ (80023d8 <MX_USART1_UART_Init+0x4c>)
 8002398:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800239c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800239e:	4b0e      	ldr	r3, [pc, #56]	@ (80023d8 <MX_USART1_UART_Init+0x4c>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023a4:	4b0c      	ldr	r3, [pc, #48]	@ (80023d8 <MX_USART1_UART_Init+0x4c>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023aa:	4b0b      	ldr	r3, [pc, #44]	@ (80023d8 <MX_USART1_UART_Init+0x4c>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023b0:	4b09      	ldr	r3, [pc, #36]	@ (80023d8 <MX_USART1_UART_Init+0x4c>)
 80023b2:	220c      	movs	r2, #12
 80023b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023b6:	4b08      	ldr	r3, [pc, #32]	@ (80023d8 <MX_USART1_UART_Init+0x4c>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023bc:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <MX_USART1_UART_Init+0x4c>)
 80023be:	2200      	movs	r2, #0
 80023c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023c2:	4805      	ldr	r0, [pc, #20]	@ (80023d8 <MX_USART1_UART_Init+0x4c>)
 80023c4:	f004 f81a 	bl	80063fc <HAL_UART_Init>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80023ce:	f000 f8a9 	bl	8002524 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000454 	.word	0x20000454
 80023dc:	40011000 	.word	0x40011000

080023e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	607b      	str	r3, [r7, #4]
 80023ea:	4b14      	ldr	r3, [pc, #80]	@ (800243c <MX_DMA_Init+0x5c>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ee:	4a13      	ldr	r2, [pc, #76]	@ (800243c <MX_DMA_Init+0x5c>)
 80023f0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80023f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023f6:	4b11      	ldr	r3, [pc, #68]	@ (800243c <MX_DMA_Init+0x5c>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023fe:	607b      	str	r3, [r7, #4]
 8002400:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002402:	2200      	movs	r2, #0
 8002404:	2100      	movs	r1, #0
 8002406:	2038      	movs	r0, #56	@ 0x38
 8002408:	f001 f902 	bl	8003610 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800240c:	2038      	movs	r0, #56	@ 0x38
 800240e:	f001 f91b 	bl	8003648 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002412:	2200      	movs	r2, #0
 8002414:	2100      	movs	r1, #0
 8002416:	203a      	movs	r0, #58	@ 0x3a
 8002418:	f001 f8fa 	bl	8003610 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800241c:	203a      	movs	r0, #58	@ 0x3a
 800241e:	f001 f913 	bl	8003648 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002422:	2200      	movs	r2, #0
 8002424:	2100      	movs	r1, #0
 8002426:	2046      	movs	r0, #70	@ 0x46
 8002428:	f001 f8f2 	bl	8003610 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800242c:	2046      	movs	r0, #70	@ 0x46
 800242e:	f001 f90b 	bl	8003648 <HAL_NVIC_EnableIRQ>

}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40023800 	.word	0x40023800

08002440 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b08a      	sub	sp, #40	@ 0x28
 8002444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002446:	f107 0314 	add.w	r3, r7, #20
 800244a:	2200      	movs	r2, #0
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	605a      	str	r2, [r3, #4]
 8002450:	609a      	str	r2, [r3, #8]
 8002452:	60da      	str	r2, [r3, #12]
 8002454:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002456:	2300      	movs	r3, #0
 8002458:	613b      	str	r3, [r7, #16]
 800245a:	4b27      	ldr	r3, [pc, #156]	@ (80024f8 <MX_GPIO_Init+0xb8>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245e:	4a26      	ldr	r2, [pc, #152]	@ (80024f8 <MX_GPIO_Init+0xb8>)
 8002460:	f043 0304 	orr.w	r3, r3, #4
 8002464:	6313      	str	r3, [r2, #48]	@ 0x30
 8002466:	4b24      	ldr	r3, [pc, #144]	@ (80024f8 <MX_GPIO_Init+0xb8>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	4b20      	ldr	r3, [pc, #128]	@ (80024f8 <MX_GPIO_Init+0xb8>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247a:	4a1f      	ldr	r2, [pc, #124]	@ (80024f8 <MX_GPIO_Init+0xb8>)
 800247c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002480:	6313      	str	r3, [r2, #48]	@ 0x30
 8002482:	4b1d      	ldr	r3, [pc, #116]	@ (80024f8 <MX_GPIO_Init+0xb8>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800248e:	2300      	movs	r3, #0
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	4b19      	ldr	r3, [pc, #100]	@ (80024f8 <MX_GPIO_Init+0xb8>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002496:	4a18      	ldr	r2, [pc, #96]	@ (80024f8 <MX_GPIO_Init+0xb8>)
 8002498:	f043 0301 	orr.w	r3, r3, #1
 800249c:	6313      	str	r3, [r2, #48]	@ 0x30
 800249e:	4b16      	ldr	r3, [pc, #88]	@ (80024f8 <MX_GPIO_Init+0xb8>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	60bb      	str	r3, [r7, #8]
 80024a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	607b      	str	r3, [r7, #4]
 80024ae:	4b12      	ldr	r3, [pc, #72]	@ (80024f8 <MX_GPIO_Init+0xb8>)
 80024b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024b2:	4a11      	ldr	r2, [pc, #68]	@ (80024f8 <MX_GPIO_Init+0xb8>)
 80024b4:	f043 0302 	orr.w	r3, r3, #2
 80024b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ba:	4b0f      	ldr	r3, [pc, #60]	@ (80024f8 <MX_GPIO_Init+0xb8>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	607b      	str	r3, [r7, #4]
 80024c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80024c6:	2200      	movs	r2, #0
 80024c8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024cc:	480b      	ldr	r0, [pc, #44]	@ (80024fc <MX_GPIO_Init+0xbc>)
 80024ce:	f001 fe4f 	bl	8004170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80024d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d8:	2301      	movs	r3, #1
 80024da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e0:	2300      	movs	r3, #0
 80024e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024e4:	f107 0314 	add.w	r3, r7, #20
 80024e8:	4619      	mov	r1, r3
 80024ea:	4804      	ldr	r0, [pc, #16]	@ (80024fc <MX_GPIO_Init+0xbc>)
 80024ec:	f001 fcbc 	bl	8003e68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024f0:	bf00      	nop
 80024f2:	3728      	adds	r7, #40	@ 0x28
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40020800 	.word	0x40020800

08002500 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a04      	ldr	r2, [pc, #16]	@ (8002520 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d101      	bne.n	8002516 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002512:	f000 fd0f 	bl	8002f34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40010000 	.word	0x40010000

08002524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002528:	b672      	cpsid	i
}
 800252a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800252c:	bf00      	nop
 800252e:	e7fd      	b.n	800252c <Error_Handler+0x8>

08002530 <PID_Init>:
 * @params[in] float ki
 * @params[in] float kd
 * @retval PID structure
 */
PID_t PID_Init()
{
 8002530:	b4b0      	push	{r4, r5, r7}
 8002532:	b08d      	sub	sp, #52	@ 0x34
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
	PID_t PID_dev =
 8002538:	4b0e      	ldr	r3, [pc, #56]	@ (8002574 <PID_Init+0x44>)
 800253a:	f107 0408 	add.w	r4, r7, #8
 800253e:	461d      	mov	r5, r3
 8002540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002548:	e895 0003 	ldmia.w	r5, {r0, r1}
 800254c:	e884 0003 	stmia.w	r4, {r0, r1}
		.upper_bound = 10,
		.timestamp_us = 0,
		.mode = 2
	};

	return PID_dev;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	461d      	mov	r5, r3
 8002554:	f107 0408 	add.w	r4, r7, #8
 8002558:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800255a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800255c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800255e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002560:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002564:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	3734      	adds	r7, #52	@ 0x34
 800256c:	46bd      	mov	sp, r7
 800256e:	bcb0      	pop	{r4, r5, r7}
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	0800d23c 	.word	0x0800d23c

08002578 <SerialCommander_Init>:
 * @param[in] motor ptr
 * @param[in] UART handle
 * @retval -
 */
__INLINE void SerialCommander_Init(BLDCMotor* motor, UART_HandleTypeDef* huart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
	uart_dev = huart;
 8002582:	4a08      	ldr	r2, [pc, #32]	@ (80025a4 <SerialCommander_Init+0x2c>)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	6013      	str	r3, [r2, #0]
	bldc_dev = motor;
 8002588:	4a07      	ldr	r2, [pc, #28]	@ (80025a8 <SerialCommander_Init+0x30>)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6013      	str	r3, [r2, #0]
	HAL_UARTEx_ReceiveToIdle_DMA(uart_dev, rx_buff, 32);
 800258e:	4b05      	ldr	r3, [pc, #20]	@ (80025a4 <SerialCommander_Init+0x2c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2220      	movs	r2, #32
 8002594:	4905      	ldr	r1, [pc, #20]	@ (80025ac <SerialCommander_Init+0x34>)
 8002596:	4618      	mov	r0, r3
 8002598:	f003 fff0 	bl	800657c <HAL_UARTEx_ReceiveToIdle_DMA>
}
 800259c:	bf00      	nop
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	2000055c 	.word	0x2000055c
 80025a8:	20000560 	.word	0x20000560
 80025ac:	20000564 	.word	0x20000564

080025b0 <HAL_UARTEx_RxEventCallback>:
/*
 * @brief DMA receive to idle interrupt callback function
 * @note Sets the receive flag to 1
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	460b      	mov	r3, r1
 80025ba:	807b      	strh	r3, [r7, #2]
	/* Indicate incoming data */
	rx_flag = 1;
 80025bc:	4b09      	ldr	r3, [pc, #36]	@ (80025e4 <HAL_UARTEx_RxEventCallback+0x34>)
 80025be:	2201      	movs	r2, #1
 80025c0:	701a      	strb	r2, [r3, #0]

	/* Insert null terminator for C string */
	if(Size > 15)
 80025c2:	887b      	ldrh	r3, [r7, #2]
 80025c4:	2b0f      	cmp	r3, #15
 80025c6:	d903      	bls.n	80025d0 <HAL_UARTEx_RxEventCallback+0x20>
	{
		rx_buff[15] = '\0';
 80025c8:	4b07      	ldr	r3, [pc, #28]	@ (80025e8 <HAL_UARTEx_RxEventCallback+0x38>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	73da      	strb	r2, [r3, #15]
	}
	else
	{
		rx_buff[Size] = '\0';
	}
}
 80025ce:	e003      	b.n	80025d8 <HAL_UARTEx_RxEventCallback+0x28>
		rx_buff[Size] = '\0';
 80025d0:	887b      	ldrh	r3, [r7, #2]
 80025d2:	4a05      	ldr	r2, [pc, #20]	@ (80025e8 <HAL_UARTEx_RxEventCallback+0x38>)
 80025d4:	2100      	movs	r1, #0
 80025d6:	54d1      	strb	r1, [r2, r3]
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	20000574 	.word	0x20000574
 80025e8:	20000564 	.word	0x20000564

080025ec <Serial_Print>:
 * @param[in] UART handle
 * @param[in] string
 * @retval -
 */
void Serial_Print(const char* s)
{
 80025ec:	b590      	push	{r4, r7, lr}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(uart_dev, s, strlen(s));
 80025f4:	4b07      	ldr	r3, [pc, #28]	@ (8002614 <Serial_Print+0x28>)
 80025f6:	681c      	ldr	r4, [r3, #0]
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7fd fe41 	bl	8000280 <strlen>
 80025fe:	4603      	mov	r3, r0
 8002600:	b29b      	uxth	r3, r3
 8002602:	461a      	mov	r2, r3
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	4620      	mov	r0, r4
 8002608:	f003 ff48 	bl	800649c <HAL_UART_Transmit_DMA>
}
 800260c:	bf00      	nop
 800260e:	370c      	adds	r7, #12
 8002610:	46bd      	mov	sp, r7
 8002612:	bd90      	pop	{r4, r7, pc}
 8002614:	2000055c 	.word	0x2000055c

08002618 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	607b      	str	r3, [r7, #4]
 8002622:	4b10      	ldr	r3, [pc, #64]	@ (8002664 <HAL_MspInit+0x4c>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002626:	4a0f      	ldr	r2, [pc, #60]	@ (8002664 <HAL_MspInit+0x4c>)
 8002628:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800262c:	6453      	str	r3, [r2, #68]	@ 0x44
 800262e:	4b0d      	ldr	r3, [pc, #52]	@ (8002664 <HAL_MspInit+0x4c>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002632:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002636:	607b      	str	r3, [r7, #4]
 8002638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	603b      	str	r3, [r7, #0]
 800263e:	4b09      	ldr	r3, [pc, #36]	@ (8002664 <HAL_MspInit+0x4c>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	4a08      	ldr	r2, [pc, #32]	@ (8002664 <HAL_MspInit+0x4c>)
 8002644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002648:	6413      	str	r3, [r2, #64]	@ 0x40
 800264a:	4b06      	ldr	r3, [pc, #24]	@ (8002664 <HAL_MspInit+0x4c>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40023800 	.word	0x40023800

08002668 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08a      	sub	sp, #40	@ 0x28
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002670:	f107 0314 	add.w	r3, r7, #20
 8002674:	2200      	movs	r2, #0
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	605a      	str	r2, [r3, #4]
 800267a:	609a      	str	r2, [r3, #8]
 800267c:	60da      	str	r2, [r3, #12]
 800267e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a2e      	ldr	r2, [pc, #184]	@ (8002740 <HAL_ADC_MspInit+0xd8>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d156      	bne.n	8002738 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800268a:	2300      	movs	r3, #0
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	4b2d      	ldr	r3, [pc, #180]	@ (8002744 <HAL_ADC_MspInit+0xdc>)
 8002690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002692:	4a2c      	ldr	r2, [pc, #176]	@ (8002744 <HAL_ADC_MspInit+0xdc>)
 8002694:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002698:	6453      	str	r3, [r2, #68]	@ 0x44
 800269a:	4b2a      	ldr	r3, [pc, #168]	@ (8002744 <HAL_ADC_MspInit+0xdc>)
 800269c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a2:	613b      	str	r3, [r7, #16]
 80026a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	4b26      	ldr	r3, [pc, #152]	@ (8002744 <HAL_ADC_MspInit+0xdc>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	4a25      	ldr	r2, [pc, #148]	@ (8002744 <HAL_ADC_MspInit+0xdc>)
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b6:	4b23      	ldr	r3, [pc, #140]	@ (8002744 <HAL_ADC_MspInit+0xdc>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 80026c2:	231b      	movs	r3, #27
 80026c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026c6:	2303      	movs	r3, #3
 80026c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ce:	f107 0314 	add.w	r3, r7, #20
 80026d2:	4619      	mov	r1, r3
 80026d4:	481c      	ldr	r0, [pc, #112]	@ (8002748 <HAL_ADC_MspInit+0xe0>)
 80026d6:	f001 fbc7 	bl	8003e68 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80026da:	4b1c      	ldr	r3, [pc, #112]	@ (800274c <HAL_ADC_MspInit+0xe4>)
 80026dc:	4a1c      	ldr	r2, [pc, #112]	@ (8002750 <HAL_ADC_MspInit+0xe8>)
 80026de:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80026e0:	4b1a      	ldr	r3, [pc, #104]	@ (800274c <HAL_ADC_MspInit+0xe4>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026e6:	4b19      	ldr	r3, [pc, #100]	@ (800274c <HAL_ADC_MspInit+0xe4>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80026ec:	4b17      	ldr	r3, [pc, #92]	@ (800274c <HAL_ADC_MspInit+0xe4>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80026f2:	4b16      	ldr	r3, [pc, #88]	@ (800274c <HAL_ADC_MspInit+0xe4>)
 80026f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026f8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80026fa:	4b14      	ldr	r3, [pc, #80]	@ (800274c <HAL_ADC_MspInit+0xe4>)
 80026fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002700:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002702:	4b12      	ldr	r3, [pc, #72]	@ (800274c <HAL_ADC_MspInit+0xe4>)
 8002704:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002708:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800270a:	4b10      	ldr	r3, [pc, #64]	@ (800274c <HAL_ADC_MspInit+0xe4>)
 800270c:	2200      	movs	r2, #0
 800270e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002710:	4b0e      	ldr	r3, [pc, #56]	@ (800274c <HAL_ADC_MspInit+0xe4>)
 8002712:	2200      	movs	r2, #0
 8002714:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002716:	4b0d      	ldr	r3, [pc, #52]	@ (800274c <HAL_ADC_MspInit+0xe4>)
 8002718:	2200      	movs	r2, #0
 800271a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800271c:	480b      	ldr	r0, [pc, #44]	@ (800274c <HAL_ADC_MspInit+0xe4>)
 800271e:	f000 ffa1 	bl	8003664 <HAL_DMA_Init>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002728:	f7ff fefc 	bl	8002524 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a07      	ldr	r2, [pc, #28]	@ (800274c <HAL_ADC_MspInit+0xe4>)
 8002730:	639a      	str	r2, [r3, #56]	@ 0x38
 8002732:	4a06      	ldr	r2, [pc, #24]	@ (800274c <HAL_ADC_MspInit+0xe4>)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002738:	bf00      	nop
 800273a:	3728      	adds	r7, #40	@ 0x28
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40012000 	.word	0x40012000
 8002744:	40023800 	.word	0x40023800
 8002748:	40020000 	.word	0x40020000
 800274c:	200002bc 	.word	0x200002bc
 8002750:	40026410 	.word	0x40026410

08002754 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b08c      	sub	sp, #48	@ 0x30
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800275c:	f107 031c 	add.w	r3, r7, #28
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a3b      	ldr	r2, [pc, #236]	@ (8002860 <HAL_I2C_MspInit+0x10c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d12c      	bne.n	80027d0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	61bb      	str	r3, [r7, #24]
 800277a:	4b3a      	ldr	r3, [pc, #232]	@ (8002864 <HAL_I2C_MspInit+0x110>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800277e:	4a39      	ldr	r2, [pc, #228]	@ (8002864 <HAL_I2C_MspInit+0x110>)
 8002780:	f043 0302 	orr.w	r3, r3, #2
 8002784:	6313      	str	r3, [r2, #48]	@ 0x30
 8002786:	4b37      	ldr	r3, [pc, #220]	@ (8002864 <HAL_I2C_MspInit+0x110>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	61bb      	str	r3, [r7, #24]
 8002790:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002792:	23c0      	movs	r3, #192	@ 0xc0
 8002794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002796:	2312      	movs	r3, #18
 8002798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800279e:	2303      	movs	r3, #3
 80027a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027a2:	2304      	movs	r3, #4
 80027a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027a6:	f107 031c 	add.w	r3, r7, #28
 80027aa:	4619      	mov	r1, r3
 80027ac:	482e      	ldr	r0, [pc, #184]	@ (8002868 <HAL_I2C_MspInit+0x114>)
 80027ae:	f001 fb5b 	bl	8003e68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
 80027b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002864 <HAL_I2C_MspInit+0x110>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ba:	4a2a      	ldr	r2, [pc, #168]	@ (8002864 <HAL_I2C_MspInit+0x110>)
 80027bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027c2:	4b28      	ldr	r3, [pc, #160]	@ (8002864 <HAL_I2C_MspInit+0x110>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80027ce:	e042      	b.n	8002856 <HAL_I2C_MspInit+0x102>
  else if(hi2c->Instance==I2C2)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a25      	ldr	r2, [pc, #148]	@ (800286c <HAL_I2C_MspInit+0x118>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d13d      	bne.n	8002856 <HAL_I2C_MspInit+0x102>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	4b21      	ldr	r3, [pc, #132]	@ (8002864 <HAL_I2C_MspInit+0x110>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	4a20      	ldr	r2, [pc, #128]	@ (8002864 <HAL_I2C_MspInit+0x110>)
 80027e4:	f043 0302 	orr.w	r3, r3, #2
 80027e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002864 <HAL_I2C_MspInit+0x110>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	613b      	str	r3, [r7, #16]
 80027f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80027f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027fc:	2312      	movs	r3, #18
 80027fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002800:	2300      	movs	r3, #0
 8002802:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002804:	2303      	movs	r3, #3
 8002806:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002808:	2304      	movs	r3, #4
 800280a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800280c:	f107 031c 	add.w	r3, r7, #28
 8002810:	4619      	mov	r1, r3
 8002812:	4815      	ldr	r0, [pc, #84]	@ (8002868 <HAL_I2C_MspInit+0x114>)
 8002814:	f001 fb28 	bl	8003e68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002818:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800281c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800281e:	2312      	movs	r3, #18
 8002820:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002822:	2300      	movs	r3, #0
 8002824:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002826:	2303      	movs	r3, #3
 8002828:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800282a:	2309      	movs	r3, #9
 800282c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282e:	f107 031c 	add.w	r3, r7, #28
 8002832:	4619      	mov	r1, r3
 8002834:	480c      	ldr	r0, [pc, #48]	@ (8002868 <HAL_I2C_MspInit+0x114>)
 8002836:	f001 fb17 	bl	8003e68 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]
 800283e:	4b09      	ldr	r3, [pc, #36]	@ (8002864 <HAL_I2C_MspInit+0x110>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002842:	4a08      	ldr	r2, [pc, #32]	@ (8002864 <HAL_I2C_MspInit+0x110>)
 8002844:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002848:	6413      	str	r3, [r2, #64]	@ 0x40
 800284a:	4b06      	ldr	r3, [pc, #24]	@ (8002864 <HAL_I2C_MspInit+0x110>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	68fb      	ldr	r3, [r7, #12]
}
 8002856:	bf00      	nop
 8002858:	3730      	adds	r7, #48	@ 0x30
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40005400 	.word	0x40005400
 8002864:	40023800 	.word	0x40023800
 8002868:	40020400 	.word	0x40020400
 800286c:	40005800 	.word	0x40005800

08002870 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002880:	d10e      	bne.n	80028a0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002882:	2300      	movs	r3, #0
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	4b13      	ldr	r3, [pc, #76]	@ (80028d4 <HAL_TIM_PWM_MspInit+0x64>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288a:	4a12      	ldr	r2, [pc, #72]	@ (80028d4 <HAL_TIM_PWM_MspInit+0x64>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	6413      	str	r3, [r2, #64]	@ 0x40
 8002892:	4b10      	ldr	r3, [pc, #64]	@ (80028d4 <HAL_TIM_PWM_MspInit+0x64>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	60fb      	str	r3, [r7, #12]
 800289c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800289e:	e012      	b.n	80028c6 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a0c      	ldr	r2, [pc, #48]	@ (80028d8 <HAL_TIM_PWM_MspInit+0x68>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d10d      	bne.n	80028c6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	4b09      	ldr	r3, [pc, #36]	@ (80028d4 <HAL_TIM_PWM_MspInit+0x64>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	4a08      	ldr	r2, [pc, #32]	@ (80028d4 <HAL_TIM_PWM_MspInit+0x64>)
 80028b4:	f043 0302 	orr.w	r3, r3, #2
 80028b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ba:	4b06      	ldr	r3, [pc, #24]	@ (80028d4 <HAL_TIM_PWM_MspInit+0x64>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	68bb      	ldr	r3, [r7, #8]
}
 80028c6:	bf00      	nop
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40000400 	.word	0x40000400

080028dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b08a      	sub	sp, #40	@ 0x28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e4:	f107 0314 	add.w	r3, r7, #20
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028fc:	d13c      	bne.n	8002978 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	613b      	str	r3, [r7, #16]
 8002902:	4b31      	ldr	r3, [pc, #196]	@ (80029c8 <HAL_TIM_MspPostInit+0xec>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002906:	4a30      	ldr	r2, [pc, #192]	@ (80029c8 <HAL_TIM_MspPostInit+0xec>)
 8002908:	f043 0301 	orr.w	r3, r3, #1
 800290c:	6313      	str	r3, [r2, #48]	@ 0x30
 800290e:	4b2e      	ldr	r3, [pc, #184]	@ (80029c8 <HAL_TIM_MspPostInit+0xec>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	613b      	str	r3, [r7, #16]
 8002918:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	4b2a      	ldr	r3, [pc, #168]	@ (80029c8 <HAL_TIM_MspPostInit+0xec>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002922:	4a29      	ldr	r2, [pc, #164]	@ (80029c8 <HAL_TIM_MspPostInit+0xec>)
 8002924:	f043 0302 	orr.w	r3, r3, #2
 8002928:	6313      	str	r3, [r2, #48]	@ 0x30
 800292a:	4b27      	ldr	r3, [pc, #156]	@ (80029c8 <HAL_TIM_MspPostInit+0xec>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 8002936:	2324      	movs	r3, #36	@ 0x24
 8002938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293a:	2302      	movs	r3, #2
 800293c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293e:	2300      	movs	r3, #0
 8002940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002942:	2300      	movs	r3, #0
 8002944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002946:	2301      	movs	r3, #1
 8002948:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294a:	f107 0314 	add.w	r3, r7, #20
 800294e:	4619      	mov	r1, r3
 8002950:	481e      	ldr	r0, [pc, #120]	@ (80029cc <HAL_TIM_MspPostInit+0xf0>)
 8002952:	f001 fa89 	bl	8003e68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002956:	2308      	movs	r3, #8
 8002958:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295a:	2302      	movs	r3, #2
 800295c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	2300      	movs	r3, #0
 8002960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002962:	2300      	movs	r3, #0
 8002964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002966:	2301      	movs	r3, #1
 8002968:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800296a:	f107 0314 	add.w	r3, r7, #20
 800296e:	4619      	mov	r1, r3
 8002970:	4817      	ldr	r0, [pc, #92]	@ (80029d0 <HAL_TIM_MspPostInit+0xf4>)
 8002972:	f001 fa79 	bl	8003e68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002976:	e022      	b.n	80029be <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a15      	ldr	r2, [pc, #84]	@ (80029d4 <HAL_TIM_MspPostInit+0xf8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d11d      	bne.n	80029be <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	4b10      	ldr	r3, [pc, #64]	@ (80029c8 <HAL_TIM_MspPostInit+0xec>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	4a0f      	ldr	r2, [pc, #60]	@ (80029c8 <HAL_TIM_MspPostInit+0xec>)
 800298c:	f043 0302 	orr.w	r3, r3, #2
 8002990:	6313      	str	r3, [r2, #48]	@ 0x30
 8002992:	4b0d      	ldr	r3, [pc, #52]	@ (80029c8 <HAL_TIM_MspPostInit+0xec>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	60bb      	str	r3, [r7, #8]
 800299c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 800299e:	2331      	movs	r3, #49	@ 0x31
 80029a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a2:	2302      	movs	r3, #2
 80029a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029aa:	2300      	movs	r3, #0
 80029ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80029ae:	2302      	movs	r3, #2
 80029b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029b2:	f107 0314 	add.w	r3, r7, #20
 80029b6:	4619      	mov	r1, r3
 80029b8:	4805      	ldr	r0, [pc, #20]	@ (80029d0 <HAL_TIM_MspPostInit+0xf4>)
 80029ba:	f001 fa55 	bl	8003e68 <HAL_GPIO_Init>
}
 80029be:	bf00      	nop
 80029c0:	3728      	adds	r7, #40	@ 0x28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40020000 	.word	0x40020000
 80029d0:	40020400 	.word	0x40020400
 80029d4:	40000400 	.word	0x40000400

080029d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08a      	sub	sp, #40	@ 0x28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e0:	f107 0314 	add.w	r3, r7, #20
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	605a      	str	r2, [r3, #4]
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	60da      	str	r2, [r3, #12]
 80029ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a4c      	ldr	r2, [pc, #304]	@ (8002b28 <HAL_UART_MspInit+0x150>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	f040 8091 	bne.w	8002b1e <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029fc:	2300      	movs	r3, #0
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	4b4a      	ldr	r3, [pc, #296]	@ (8002b2c <HAL_UART_MspInit+0x154>)
 8002a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a04:	4a49      	ldr	r2, [pc, #292]	@ (8002b2c <HAL_UART_MspInit+0x154>)
 8002a06:	f043 0310 	orr.w	r3, r3, #16
 8002a0a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a0c:	4b47      	ldr	r3, [pc, #284]	@ (8002b2c <HAL_UART_MspInit+0x154>)
 8002a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a10:	f003 0310 	and.w	r3, r3, #16
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	4b43      	ldr	r3, [pc, #268]	@ (8002b2c <HAL_UART_MspInit+0x154>)
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a20:	4a42      	ldr	r2, [pc, #264]	@ (8002b2c <HAL_UART_MspInit+0x154>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a28:	4b40      	ldr	r3, [pc, #256]	@ (8002b2c <HAL_UART_MspInit+0x154>)
 8002a2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a34:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a42:	2303      	movs	r3, #3
 8002a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a46:	2307      	movs	r3, #7
 8002a48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a4a:	f107 0314 	add.w	r3, r7, #20
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4837      	ldr	r0, [pc, #220]	@ (8002b30 <HAL_UART_MspInit+0x158>)
 8002a52:	f001 fa09 	bl	8003e68 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002a56:	4b37      	ldr	r3, [pc, #220]	@ (8002b34 <HAL_UART_MspInit+0x15c>)
 8002a58:	4a37      	ldr	r2, [pc, #220]	@ (8002b38 <HAL_UART_MspInit+0x160>)
 8002a5a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002a5c:	4b35      	ldr	r3, [pc, #212]	@ (8002b34 <HAL_UART_MspInit+0x15c>)
 8002a5e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002a62:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a64:	4b33      	ldr	r3, [pc, #204]	@ (8002b34 <HAL_UART_MspInit+0x15c>)
 8002a66:	2240      	movs	r2, #64	@ 0x40
 8002a68:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a6a:	4b32      	ldr	r3, [pc, #200]	@ (8002b34 <HAL_UART_MspInit+0x15c>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a70:	4b30      	ldr	r3, [pc, #192]	@ (8002b34 <HAL_UART_MspInit+0x15c>)
 8002a72:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a76:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a78:	4b2e      	ldr	r3, [pc, #184]	@ (8002b34 <HAL_UART_MspInit+0x15c>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a7e:	4b2d      	ldr	r3, [pc, #180]	@ (8002b34 <HAL_UART_MspInit+0x15c>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002a84:	4b2b      	ldr	r3, [pc, #172]	@ (8002b34 <HAL_UART_MspInit+0x15c>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a8a:	4b2a      	ldr	r3, [pc, #168]	@ (8002b34 <HAL_UART_MspInit+0x15c>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a90:	4b28      	ldr	r3, [pc, #160]	@ (8002b34 <HAL_UART_MspInit+0x15c>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002a96:	4827      	ldr	r0, [pc, #156]	@ (8002b34 <HAL_UART_MspInit+0x15c>)
 8002a98:	f000 fde4 	bl	8003664 <HAL_DMA_Init>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002aa2:	f7ff fd3f 	bl	8002524 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a22      	ldr	r2, [pc, #136]	@ (8002b34 <HAL_UART_MspInit+0x15c>)
 8002aaa:	639a      	str	r2, [r3, #56]	@ 0x38
 8002aac:	4a21      	ldr	r2, [pc, #132]	@ (8002b34 <HAL_UART_MspInit+0x15c>)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002ab2:	4b22      	ldr	r3, [pc, #136]	@ (8002b3c <HAL_UART_MspInit+0x164>)
 8002ab4:	4a22      	ldr	r2, [pc, #136]	@ (8002b40 <HAL_UART_MspInit+0x168>)
 8002ab6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002ab8:	4b20      	ldr	r3, [pc, #128]	@ (8002b3c <HAL_UART_MspInit+0x164>)
 8002aba:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002abe:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ac0:	4b1e      	ldr	r3, [pc, #120]	@ (8002b3c <HAL_UART_MspInit+0x164>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ac6:	4b1d      	ldr	r3, [pc, #116]	@ (8002b3c <HAL_UART_MspInit+0x164>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002acc:	4b1b      	ldr	r3, [pc, #108]	@ (8002b3c <HAL_UART_MspInit+0x164>)
 8002ace:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ad2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ad4:	4b19      	ldr	r3, [pc, #100]	@ (8002b3c <HAL_UART_MspInit+0x164>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ada:	4b18      	ldr	r3, [pc, #96]	@ (8002b3c <HAL_UART_MspInit+0x164>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002ae0:	4b16      	ldr	r3, [pc, #88]	@ (8002b3c <HAL_UART_MspInit+0x164>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ae6:	4b15      	ldr	r3, [pc, #84]	@ (8002b3c <HAL_UART_MspInit+0x164>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002aec:	4b13      	ldr	r3, [pc, #76]	@ (8002b3c <HAL_UART_MspInit+0x164>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002af2:	4812      	ldr	r0, [pc, #72]	@ (8002b3c <HAL_UART_MspInit+0x164>)
 8002af4:	f000 fdb6 	bl	8003664 <HAL_DMA_Init>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002afe:	f7ff fd11 	bl	8002524 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a0d      	ldr	r2, [pc, #52]	@ (8002b3c <HAL_UART_MspInit+0x164>)
 8002b06:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002b08:	4a0c      	ldr	r2, [pc, #48]	@ (8002b3c <HAL_UART_MspInit+0x164>)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2100      	movs	r1, #0
 8002b12:	2025      	movs	r0, #37	@ 0x25
 8002b14:	f000 fd7c 	bl	8003610 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b18:	2025      	movs	r0, #37	@ 0x25
 8002b1a:	f000 fd95 	bl	8003648 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002b1e:	bf00      	nop
 8002b20:	3728      	adds	r7, #40	@ 0x28
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40011000 	.word	0x40011000
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	40020000 	.word	0x40020000
 8002b34:	2000049c 	.word	0x2000049c
 8002b38:	400264b8 	.word	0x400264b8
 8002b3c:	200004fc 	.word	0x200004fc
 8002b40:	40026440 	.word	0x40026440

08002b44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b08c      	sub	sp, #48	@ 0x30
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002b50:	2300      	movs	r3, #0
 8002b52:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002b54:	2300      	movs	r3, #0
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	4b2e      	ldr	r3, [pc, #184]	@ (8002c14 <HAL_InitTick+0xd0>)
 8002b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5c:	4a2d      	ldr	r2, [pc, #180]	@ (8002c14 <HAL_InitTick+0xd0>)
 8002b5e:	f043 0301 	orr.w	r3, r3, #1
 8002b62:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b64:	4b2b      	ldr	r3, [pc, #172]	@ (8002c14 <HAL_InitTick+0xd0>)
 8002b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b68:	f003 0301 	and.w	r3, r3, #1
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b70:	f107 020c 	add.w	r2, r7, #12
 8002b74:	f107 0310 	add.w	r3, r7, #16
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f002 fdb6 	bl	80056ec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002b80:	f002 fda0 	bl	80056c4 <HAL_RCC_GetPCLK2Freq>
 8002b84:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b88:	4a23      	ldr	r2, [pc, #140]	@ (8002c18 <HAL_InitTick+0xd4>)
 8002b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8e:	0c9b      	lsrs	r3, r3, #18
 8002b90:	3b01      	subs	r3, #1
 8002b92:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002b94:	4b21      	ldr	r3, [pc, #132]	@ (8002c1c <HAL_InitTick+0xd8>)
 8002b96:	4a22      	ldr	r2, [pc, #136]	@ (8002c20 <HAL_InitTick+0xdc>)
 8002b98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002b9a:	4b20      	ldr	r3, [pc, #128]	@ (8002c1c <HAL_InitTick+0xd8>)
 8002b9c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002ba0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002ba2:	4a1e      	ldr	r2, [pc, #120]	@ (8002c1c <HAL_InitTick+0xd8>)
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8002c1c <HAL_InitTick+0xd8>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bae:	4b1b      	ldr	r3, [pc, #108]	@ (8002c1c <HAL_InitTick+0xd8>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bb4:	4b19      	ldr	r3, [pc, #100]	@ (8002c1c <HAL_InitTick+0xd8>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002bba:	4818      	ldr	r0, [pc, #96]	@ (8002c1c <HAL_InitTick+0xd8>)
 8002bbc:	f002 fdc8 	bl	8005750 <HAL_TIM_Base_Init>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002bc6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d11b      	bne.n	8002c06 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002bce:	4813      	ldr	r0, [pc, #76]	@ (8002c1c <HAL_InitTick+0xd8>)
 8002bd0:	f002 fe18 	bl	8005804 <HAL_TIM_Base_Start_IT>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002bda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d111      	bne.n	8002c06 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002be2:	2019      	movs	r0, #25
 8002be4:	f000 fd30 	bl	8003648 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b0f      	cmp	r3, #15
 8002bec:	d808      	bhi.n	8002c00 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002bee:	2200      	movs	r2, #0
 8002bf0:	6879      	ldr	r1, [r7, #4]
 8002bf2:	2019      	movs	r0, #25
 8002bf4:	f000 fd0c 	bl	8003610 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002bf8:	4a0a      	ldr	r2, [pc, #40]	@ (8002c24 <HAL_InitTick+0xe0>)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6013      	str	r3, [r2, #0]
 8002bfe:	e002      	b.n	8002c06 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002c06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3730      	adds	r7, #48	@ 0x30
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40023800 	.word	0x40023800
 8002c18:	431bde83 	.word	0x431bde83
 8002c1c:	20000578 	.word	0x20000578
 8002c20:	40010000 	.word	0x40010000
 8002c24:	20000088 	.word	0x20000088

08002c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c2c:	bf00      	nop
 8002c2e:	e7fd      	b.n	8002c2c <NMI_Handler+0x4>

08002c30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c34:	bf00      	nop
 8002c36:	e7fd      	b.n	8002c34 <HardFault_Handler+0x4>

08002c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c3c:	bf00      	nop
 8002c3e:	e7fd      	b.n	8002c3c <MemManage_Handler+0x4>

08002c40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c44:	bf00      	nop
 8002c46:	e7fd      	b.n	8002c44 <BusFault_Handler+0x4>

08002c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c4c:	bf00      	nop
 8002c4e:	e7fd      	b.n	8002c4c <UsageFault_Handler+0x4>

08002c50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c54:	bf00      	nop
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c62:	bf00      	nop
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c70:	bf00      	nop
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c8c:	4802      	ldr	r0, [pc, #8]	@ (8002c98 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002c8e:	f002 ff1b 	bl	8005ac8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000578 	.word	0x20000578

08002c9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ca0:	4802      	ldr	r0, [pc, #8]	@ (8002cac <USART1_IRQHandler+0x10>)
 8002ca2:	f003 fcc9 	bl	8006638 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000454 	.word	0x20000454

08002cb0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002cb4:	4802      	ldr	r0, [pc, #8]	@ (8002cc0 <DMA2_Stream0_IRQHandler+0x10>)
 8002cb6:	f000 fe6d 	bl	8003994 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	200002bc 	.word	0x200002bc

08002cc4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002cc8:	4802      	ldr	r0, [pc, #8]	@ (8002cd4 <DMA2_Stream2_IRQHandler+0x10>)
 8002cca:	f000 fe63 	bl	8003994 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	200004fc 	.word	0x200004fc

08002cd8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002cdc:	4802      	ldr	r0, [pc, #8]	@ (8002ce8 <DMA2_Stream7_IRQHandler+0x10>)
 8002cde:	f000 fe59 	bl	8003994 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	2000049c 	.word	0x2000049c

08002cec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  return 1;
 8002cf0:	2301      	movs	r3, #1
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <_kill>:

int _kill(int pid, int sig)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d06:	f005 fd6d 	bl	80087e4 <__errno>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2216      	movs	r2, #22
 8002d0e:	601a      	str	r2, [r3, #0]
  return -1;
 8002d10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <_exit>:

void _exit (int status)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d24:	f04f 31ff 	mov.w	r1, #4294967295
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7ff ffe7 	bl	8002cfc <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d2e:	bf00      	nop
 8002d30:	e7fd      	b.n	8002d2e <_exit+0x12>

08002d32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b086      	sub	sp, #24
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d3e:	2300      	movs	r3, #0
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	e00a      	b.n	8002d5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d44:	f3af 8000 	nop.w
 8002d48:	4601      	mov	r1, r0
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	60ba      	str	r2, [r7, #8]
 8002d50:	b2ca      	uxtb	r2, r1
 8002d52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	3301      	adds	r3, #1
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	dbf0      	blt.n	8002d44 <_read+0x12>
  }

  return len;
 8002d62:	687b      	ldr	r3, [r7, #4]
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]
 8002d7c:	e009      	b.n	8002d92 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	1c5a      	adds	r2, r3, #1
 8002d82:	60ba      	str	r2, [r7, #8]
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	dbf1      	blt.n	8002d7e <_write+0x12>
  }
  return len;
 8002d9a:	687b      	ldr	r3, [r7, #4]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3718      	adds	r7, #24
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <_close>:

int _close(int file)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002dac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002dcc:	605a      	str	r2, [r3, #4]
  return 0;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <_isatty>:

int _isatty(int file)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002de4:	2301      	movs	r3, #1
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b085      	sub	sp, #20
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	60f8      	str	r0, [r7, #12]
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e14:	4a14      	ldr	r2, [pc, #80]	@ (8002e68 <_sbrk+0x5c>)
 8002e16:	4b15      	ldr	r3, [pc, #84]	@ (8002e6c <_sbrk+0x60>)
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e20:	4b13      	ldr	r3, [pc, #76]	@ (8002e70 <_sbrk+0x64>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d102      	bne.n	8002e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e28:	4b11      	ldr	r3, [pc, #68]	@ (8002e70 <_sbrk+0x64>)
 8002e2a:	4a12      	ldr	r2, [pc, #72]	@ (8002e74 <_sbrk+0x68>)
 8002e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e2e:	4b10      	ldr	r3, [pc, #64]	@ (8002e70 <_sbrk+0x64>)
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4413      	add	r3, r2
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d207      	bcs.n	8002e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e3c:	f005 fcd2 	bl	80087e4 <__errno>
 8002e40:	4603      	mov	r3, r0
 8002e42:	220c      	movs	r2, #12
 8002e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e46:	f04f 33ff 	mov.w	r3, #4294967295
 8002e4a:	e009      	b.n	8002e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e4c:	4b08      	ldr	r3, [pc, #32]	@ (8002e70 <_sbrk+0x64>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e52:	4b07      	ldr	r3, [pc, #28]	@ (8002e70 <_sbrk+0x64>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4413      	add	r3, r2
 8002e5a:	4a05      	ldr	r2, [pc, #20]	@ (8002e70 <_sbrk+0x64>)
 8002e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	20020000 	.word	0x20020000
 8002e6c:	00000400 	.word	0x00000400
 8002e70:	200005c0 	.word	0x200005c0
 8002e74:	20000718 	.word	0x20000718

08002e78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e7c:	4b06      	ldr	r3, [pc, #24]	@ (8002e98 <SystemInit+0x20>)
 8002e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e82:	4a05      	ldr	r2, [pc, #20]	@ (8002e98 <SystemInit+0x20>)
 8002e84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e8c:	bf00      	nop
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	e000ed00 	.word	0xe000ed00

08002e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ed4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ea0:	f7ff ffea 	bl	8002e78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ea4:	480c      	ldr	r0, [pc, #48]	@ (8002ed8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ea6:	490d      	ldr	r1, [pc, #52]	@ (8002edc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ee0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eac:	e002      	b.n	8002eb4 <LoopCopyDataInit>

08002eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eb2:	3304      	adds	r3, #4

08002eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002eb8:	d3f9      	bcc.n	8002eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eba:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ebc:	4c0a      	ldr	r4, [pc, #40]	@ (8002ee8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ec0:	e001      	b.n	8002ec6 <LoopFillZerobss>

08002ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ec4:	3204      	adds	r2, #4

08002ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ec8:	d3fb      	bcc.n	8002ec2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002eca:	f005 fc91 	bl	80087f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ece:	f7fe ff33 	bl	8001d38 <main>
  bx  lr    
 8002ed2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ed4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002edc:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 8002ee0:	0800d8a8 	.word	0x0800d8a8
  ldr r2, =_sbss
 8002ee4:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8002ee8:	20000714 	.word	0x20000714

08002eec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002eec:	e7fe      	b.n	8002eec <ADC_IRQHandler>
	...

08002ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8002f30 <HAL_Init+0x40>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8002f30 <HAL_Init+0x40>)
 8002efa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002efe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f00:	4b0b      	ldr	r3, [pc, #44]	@ (8002f30 <HAL_Init+0x40>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a0a      	ldr	r2, [pc, #40]	@ (8002f30 <HAL_Init+0x40>)
 8002f06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f0c:	4b08      	ldr	r3, [pc, #32]	@ (8002f30 <HAL_Init+0x40>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a07      	ldr	r2, [pc, #28]	@ (8002f30 <HAL_Init+0x40>)
 8002f12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f18:	2003      	movs	r0, #3
 8002f1a:	f000 fb6e 	bl	80035fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f1e:	200f      	movs	r0, #15
 8002f20:	f7ff fe10 	bl	8002b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f24:	f7ff fb78 	bl	8002618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40023c00 	.word	0x40023c00

08002f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f38:	4b06      	ldr	r3, [pc, #24]	@ (8002f54 <HAL_IncTick+0x20>)
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4b06      	ldr	r3, [pc, #24]	@ (8002f58 <HAL_IncTick+0x24>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4413      	add	r3, r2
 8002f44:	4a04      	ldr	r2, [pc, #16]	@ (8002f58 <HAL_IncTick+0x24>)
 8002f46:	6013      	str	r3, [r2, #0]
}
 8002f48:	bf00      	nop
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	2000008c 	.word	0x2000008c
 8002f58:	200005c4 	.word	0x200005c4

08002f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f60:	4b03      	ldr	r3, [pc, #12]	@ (8002f70 <HAL_GetTick+0x14>)
 8002f62:	681b      	ldr	r3, [r3, #0]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	200005c4 	.word	0x200005c4

08002f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f7c:	f7ff ffee 	bl	8002f5c <HAL_GetTick>
 8002f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8c:	d005      	beq.n	8002f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb8 <HAL_Delay+0x44>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	461a      	mov	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4413      	add	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f9a:	bf00      	nop
 8002f9c:	f7ff ffde 	bl	8002f5c <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d8f7      	bhi.n	8002f9c <HAL_Delay+0x28>
  {
  }
}
 8002fac:	bf00      	nop
 8002fae:	bf00      	nop
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	2000008c 	.word	0x2000008c

08002fbc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d101      	bne.n	8002fd2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e033      	b.n	800303a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d109      	bne.n	8002fee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7ff fb44 	bl	8002668 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff2:	f003 0310 	and.w	r3, r3, #16
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d118      	bne.n	800302c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffe:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003002:	f023 0302 	bic.w	r3, r3, #2
 8003006:	f043 0202 	orr.w	r2, r3, #2
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f94a 	bl	80032a8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301e:	f023 0303 	bic.w	r3, r3, #3
 8003022:	f043 0201 	orr.w	r2, r3, #1
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	641a      	str	r2, [r3, #64]	@ 0x40
 800302a:	e001      	b.n	8003030 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003038:	7bfb      	ldrb	r3, [r7, #15]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800304e:	2300      	movs	r3, #0
 8003050:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_ADC_ConfigChannel+0x1c>
 800305c:	2302      	movs	r3, #2
 800305e:	e113      	b.n	8003288 <HAL_ADC_ConfigChannel+0x244>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b09      	cmp	r3, #9
 800306e:	d925      	bls.n	80030bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68d9      	ldr	r1, [r3, #12]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	b29b      	uxth	r3, r3
 800307c:	461a      	mov	r2, r3
 800307e:	4613      	mov	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	4413      	add	r3, r2
 8003084:	3b1e      	subs	r3, #30
 8003086:	2207      	movs	r2, #7
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43da      	mvns	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	400a      	ands	r2, r1
 8003094:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68d9      	ldr	r1, [r3, #12]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	4618      	mov	r0, r3
 80030a8:	4603      	mov	r3, r0
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	4403      	add	r3, r0
 80030ae:	3b1e      	subs	r3, #30
 80030b0:	409a      	lsls	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	60da      	str	r2, [r3, #12]
 80030ba:	e022      	b.n	8003102 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6919      	ldr	r1, [r3, #16]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	461a      	mov	r2, r3
 80030ca:	4613      	mov	r3, r2
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	4413      	add	r3, r2
 80030d0:	2207      	movs	r2, #7
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	43da      	mvns	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	400a      	ands	r2, r1
 80030de:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6919      	ldr	r1, [r3, #16]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	4618      	mov	r0, r3
 80030f2:	4603      	mov	r3, r0
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	4403      	add	r3, r0
 80030f8:	409a      	lsls	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b06      	cmp	r3, #6
 8003108:	d824      	bhi.n	8003154 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	4413      	add	r3, r2
 800311a:	3b05      	subs	r3, #5
 800311c:	221f      	movs	r2, #31
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43da      	mvns	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	400a      	ands	r2, r1
 800312a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	b29b      	uxth	r3, r3
 8003138:	4618      	mov	r0, r3
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	3b05      	subs	r3, #5
 8003146:	fa00 f203 	lsl.w	r2, r0, r3
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	635a      	str	r2, [r3, #52]	@ 0x34
 8003152:	e04c      	b.n	80031ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b0c      	cmp	r3, #12
 800315a:	d824      	bhi.n	80031a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	3b23      	subs	r3, #35	@ 0x23
 800316e:	221f      	movs	r2, #31
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43da      	mvns	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	400a      	ands	r2, r1
 800317c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	b29b      	uxth	r3, r3
 800318a:	4618      	mov	r0, r3
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	3b23      	subs	r3, #35	@ 0x23
 8003198:	fa00 f203 	lsl.w	r2, r0, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80031a4:	e023      	b.n	80031ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	4613      	mov	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4413      	add	r3, r2
 80031b6:	3b41      	subs	r3, #65	@ 0x41
 80031b8:	221f      	movs	r2, #31
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43da      	mvns	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	400a      	ands	r2, r1
 80031c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	4618      	mov	r0, r3
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	3b41      	subs	r3, #65	@ 0x41
 80031e2:	fa00 f203 	lsl.w	r2, r0, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031ee:	4b29      	ldr	r3, [pc, #164]	@ (8003294 <HAL_ADC_ConfigChannel+0x250>)
 80031f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a28      	ldr	r2, [pc, #160]	@ (8003298 <HAL_ADC_ConfigChannel+0x254>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d10f      	bne.n	800321c <HAL_ADC_ConfigChannel+0x1d8>
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b12      	cmp	r3, #18
 8003202:	d10b      	bne.n	800321c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a1d      	ldr	r2, [pc, #116]	@ (8003298 <HAL_ADC_ConfigChannel+0x254>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d12b      	bne.n	800327e <HAL_ADC_ConfigChannel+0x23a>
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a1c      	ldr	r2, [pc, #112]	@ (800329c <HAL_ADC_ConfigChannel+0x258>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d003      	beq.n	8003238 <HAL_ADC_ConfigChannel+0x1f4>
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2b11      	cmp	r3, #17
 8003236:	d122      	bne.n	800327e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a11      	ldr	r2, [pc, #68]	@ (800329c <HAL_ADC_ConfigChannel+0x258>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d111      	bne.n	800327e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800325a:	4b11      	ldr	r3, [pc, #68]	@ (80032a0 <HAL_ADC_ConfigChannel+0x25c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a11      	ldr	r2, [pc, #68]	@ (80032a4 <HAL_ADC_ConfigChannel+0x260>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	0c9a      	lsrs	r2, r3, #18
 8003266:	4613      	mov	r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4413      	add	r3, r2
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003270:	e002      	b.n	8003278 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	3b01      	subs	r3, #1
 8003276:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f9      	bne.n	8003272 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	40012300 	.word	0x40012300
 8003298:	40012000 	.word	0x40012000
 800329c:	10000012 	.word	0x10000012
 80032a0:	20000084 	.word	0x20000084
 80032a4:	431bde83 	.word	0x431bde83

080032a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032b0:	4b79      	ldr	r3, [pc, #484]	@ (8003498 <ADC_Init+0x1f0>)
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	431a      	orrs	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	6859      	ldr	r1, [r3, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	021a      	lsls	r2, r3, #8
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003300:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6859      	ldr	r1, [r3, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	430a      	orrs	r2, r1
 8003312:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003322:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6899      	ldr	r1, [r3, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68da      	ldr	r2, [r3, #12]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333a:	4a58      	ldr	r2, [pc, #352]	@ (800349c <ADC_Init+0x1f4>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d022      	beq.n	8003386 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800334e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6899      	ldr	r1, [r3, #8]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003370:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6899      	ldr	r1, [r3, #8]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	430a      	orrs	r2, r1
 8003382:	609a      	str	r2, [r3, #8]
 8003384:	e00f      	b.n	80033a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689a      	ldr	r2, [r3, #8]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003394:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80033a4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0202 	bic.w	r2, r2, #2
 80033b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6899      	ldr	r1, [r3, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	7e1b      	ldrb	r3, [r3, #24]
 80033c0:	005a      	lsls	r2, r3, #1
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d01b      	beq.n	800340c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	685a      	ldr	r2, [r3, #4]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033e2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80033f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	6859      	ldr	r1, [r3, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fe:	3b01      	subs	r3, #1
 8003400:	035a      	lsls	r2, r3, #13
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	605a      	str	r2, [r3, #4]
 800340a:	e007      	b.n	800341c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800341a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800342a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	69db      	ldr	r3, [r3, #28]
 8003436:	3b01      	subs	r3, #1
 8003438:	051a      	lsls	r2, r3, #20
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	430a      	orrs	r2, r1
 8003440:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003450:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6899      	ldr	r1, [r3, #8]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800345e:	025a      	lsls	r2, r3, #9
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003476:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6899      	ldr	r1, [r3, #8]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	029a      	lsls	r2, r3, #10
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	609a      	str	r2, [r3, #8]
}
 800348c:	bf00      	nop
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	40012300 	.word	0x40012300
 800349c:	0f000001 	.word	0x0f000001

080034a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f003 0307 	and.w	r3, r3, #7
 80034ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034b0:	4b0c      	ldr	r3, [pc, #48]	@ (80034e4 <__NVIC_SetPriorityGrouping+0x44>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034bc:	4013      	ands	r3, r2
 80034be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034d2:	4a04      	ldr	r2, [pc, #16]	@ (80034e4 <__NVIC_SetPriorityGrouping+0x44>)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	60d3      	str	r3, [r2, #12]
}
 80034d8:	bf00      	nop
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034ec:	4b04      	ldr	r3, [pc, #16]	@ (8003500 <__NVIC_GetPriorityGrouping+0x18>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	0a1b      	lsrs	r3, r3, #8
 80034f2:	f003 0307 	and.w	r3, r3, #7
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	e000ed00 	.word	0xe000ed00

08003504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800350e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003512:	2b00      	cmp	r3, #0
 8003514:	db0b      	blt.n	800352e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003516:	79fb      	ldrb	r3, [r7, #7]
 8003518:	f003 021f 	and.w	r2, r3, #31
 800351c:	4907      	ldr	r1, [pc, #28]	@ (800353c <__NVIC_EnableIRQ+0x38>)
 800351e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003522:	095b      	lsrs	r3, r3, #5
 8003524:	2001      	movs	r0, #1
 8003526:	fa00 f202 	lsl.w	r2, r0, r2
 800352a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800352e:	bf00      	nop
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	e000e100 	.word	0xe000e100

08003540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	6039      	str	r1, [r7, #0]
 800354a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800354c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003550:	2b00      	cmp	r3, #0
 8003552:	db0a      	blt.n	800356a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	b2da      	uxtb	r2, r3
 8003558:	490c      	ldr	r1, [pc, #48]	@ (800358c <__NVIC_SetPriority+0x4c>)
 800355a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800355e:	0112      	lsls	r2, r2, #4
 8003560:	b2d2      	uxtb	r2, r2
 8003562:	440b      	add	r3, r1
 8003564:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003568:	e00a      	b.n	8003580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	b2da      	uxtb	r2, r3
 800356e:	4908      	ldr	r1, [pc, #32]	@ (8003590 <__NVIC_SetPriority+0x50>)
 8003570:	79fb      	ldrb	r3, [r7, #7]
 8003572:	f003 030f 	and.w	r3, r3, #15
 8003576:	3b04      	subs	r3, #4
 8003578:	0112      	lsls	r2, r2, #4
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	440b      	add	r3, r1
 800357e:	761a      	strb	r2, [r3, #24]
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr
 800358c:	e000e100 	.word	0xe000e100
 8003590:	e000ed00 	.word	0xe000ed00

08003594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003594:	b480      	push	{r7}
 8003596:	b089      	sub	sp, #36	@ 0x24
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	f1c3 0307 	rsb	r3, r3, #7
 80035ae:	2b04      	cmp	r3, #4
 80035b0:	bf28      	it	cs
 80035b2:	2304      	movcs	r3, #4
 80035b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	3304      	adds	r3, #4
 80035ba:	2b06      	cmp	r3, #6
 80035bc:	d902      	bls.n	80035c4 <NVIC_EncodePriority+0x30>
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	3b03      	subs	r3, #3
 80035c2:	e000      	b.n	80035c6 <NVIC_EncodePriority+0x32>
 80035c4:	2300      	movs	r3, #0
 80035c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c8:	f04f 32ff 	mov.w	r2, #4294967295
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	43da      	mvns	r2, r3
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	401a      	ands	r2, r3
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035dc:	f04f 31ff 	mov.w	r1, #4294967295
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	fa01 f303 	lsl.w	r3, r1, r3
 80035e6:	43d9      	mvns	r1, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035ec:	4313      	orrs	r3, r2
         );
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3724      	adds	r7, #36	@ 0x24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr

080035fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff ff4c 	bl	80034a0 <__NVIC_SetPriorityGrouping>
}
 8003608:	bf00      	nop
 800360a:	3708      	adds	r7, #8
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	4603      	mov	r3, r0
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
 800361c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800361e:	2300      	movs	r3, #0
 8003620:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003622:	f7ff ff61 	bl	80034e8 <__NVIC_GetPriorityGrouping>
 8003626:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	68b9      	ldr	r1, [r7, #8]
 800362c:	6978      	ldr	r0, [r7, #20]
 800362e:	f7ff ffb1 	bl	8003594 <NVIC_EncodePriority>
 8003632:	4602      	mov	r2, r0
 8003634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003638:	4611      	mov	r1, r2
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff ff80 	bl	8003540 <__NVIC_SetPriority>
}
 8003640:	bf00      	nop
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}

08003648 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003652:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003656:	4618      	mov	r0, r3
 8003658:	f7ff ff54 	bl	8003504 <__NVIC_EnableIRQ>
}
 800365c:	bf00      	nop
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003670:	f7ff fc74 	bl	8002f5c <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e099      	b.n	80037b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0201 	bic.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036a0:	e00f      	b.n	80036c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036a2:	f7ff fc5b 	bl	8002f5c <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	2b05      	cmp	r3, #5
 80036ae:	d908      	bls.n	80036c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2220      	movs	r2, #32
 80036b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2203      	movs	r2, #3
 80036ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e078      	b.n	80037b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d1e8      	bne.n	80036a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	4b38      	ldr	r3, [pc, #224]	@ (80037bc <HAL_DMA_Init+0x158>)
 80036dc:	4013      	ands	r3, r2
 80036de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685a      	ldr	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003706:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	4313      	orrs	r3, r2
 8003712:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003718:	2b04      	cmp	r3, #4
 800371a:	d107      	bne.n	800372c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003724:	4313      	orrs	r3, r2
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	4313      	orrs	r3, r2
 800372a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f023 0307 	bic.w	r3, r3, #7
 8003742:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	4313      	orrs	r3, r2
 800374c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003752:	2b04      	cmp	r3, #4
 8003754:	d117      	bne.n	8003786 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00e      	beq.n	8003786 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f000 fb01 	bl	8003d70 <DMA_CheckFifoParam>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d008      	beq.n	8003786 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2240      	movs	r2, #64	@ 0x40
 8003778:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003782:	2301      	movs	r3, #1
 8003784:	e016      	b.n	80037b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fab8 	bl	8003d04 <DMA_CalcBaseAndBitshift>
 8003794:	4603      	mov	r3, r0
 8003796:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800379c:	223f      	movs	r2, #63	@ 0x3f
 800379e:	409a      	lsls	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	f010803f 	.word	0xf010803f

080037c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
 80037cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d101      	bne.n	80037e6 <HAL_DMA_Start_IT+0x26>
 80037e2:	2302      	movs	r3, #2
 80037e4:	e040      	b.n	8003868 <HAL_DMA_Start_IT+0xa8>
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d12f      	bne.n	800385a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2202      	movs	r2, #2
 80037fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	68b9      	ldr	r1, [r7, #8]
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 fa4a 	bl	8003ca8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003818:	223f      	movs	r2, #63	@ 0x3f
 800381a:	409a      	lsls	r2, r3
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0216 	orr.w	r2, r2, #22
 800382e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003834:	2b00      	cmp	r3, #0
 8003836:	d007      	beq.n	8003848 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0208 	orr.w	r2, r2, #8
 8003846:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0201 	orr.w	r2, r2, #1
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	e005      	b.n	8003866 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003862:	2302      	movs	r3, #2
 8003864:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003866:	7dfb      	ldrb	r3, [r7, #23]
}
 8003868:	4618      	mov	r0, r3
 800386a:	3718      	adds	r7, #24
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800387e:	f7ff fb6d 	bl	8002f5c <HAL_GetTick>
 8003882:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d008      	beq.n	80038a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2280      	movs	r2, #128	@ 0x80
 8003894:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e052      	b.n	8003948 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0216 	bic.w	r2, r2, #22
 80038b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695a      	ldr	r2, [r3, #20]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d103      	bne.n	80038d2 <HAL_DMA_Abort+0x62>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d007      	beq.n	80038e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0208 	bic.w	r2, r2, #8
 80038e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0201 	bic.w	r2, r2, #1
 80038f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038f2:	e013      	b.n	800391c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038f4:	f7ff fb32 	bl	8002f5c <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b05      	cmp	r3, #5
 8003900:	d90c      	bls.n	800391c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2220      	movs	r2, #32
 8003906:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2203      	movs	r2, #3
 800390c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e015      	b.n	8003948 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d1e4      	bne.n	80038f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800392e:	223f      	movs	r2, #63	@ 0x3f
 8003930:	409a      	lsls	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003946:	2300      	movs	r3, #0
}
 8003948:	4618      	mov	r0, r3
 800394a:	3710      	adds	r7, #16
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}

08003950 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b02      	cmp	r3, #2
 8003962:	d004      	beq.n	800396e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2280      	movs	r2, #128	@ 0x80
 8003968:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e00c      	b.n	8003988 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2205      	movs	r2, #5
 8003972:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0201 	bic.w	r2, r2, #1
 8003984:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800399c:	2300      	movs	r3, #0
 800399e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039a0:	4b8e      	ldr	r3, [pc, #568]	@ (8003bdc <HAL_DMA_IRQHandler+0x248>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a8e      	ldr	r2, [pc, #568]	@ (8003be0 <HAL_DMA_IRQHandler+0x24c>)
 80039a6:	fba2 2303 	umull	r2, r3, r2, r3
 80039aa:	0a9b      	lsrs	r3, r3, #10
 80039ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039be:	2208      	movs	r2, #8
 80039c0:	409a      	lsls	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	4013      	ands	r3, r2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d01a      	beq.n	8003a00 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0304 	and.w	r3, r3, #4
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d013      	beq.n	8003a00 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0204 	bic.w	r2, r2, #4
 80039e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039ec:	2208      	movs	r2, #8
 80039ee:	409a      	lsls	r2, r3
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f8:	f043 0201 	orr.w	r2, r3, #1
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a04:	2201      	movs	r2, #1
 8003a06:	409a      	lsls	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d012      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00b      	beq.n	8003a36 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a22:	2201      	movs	r2, #1
 8003a24:	409a      	lsls	r2, r3
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a2e:	f043 0202 	orr.w	r2, r3, #2
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a3a:	2204      	movs	r2, #4
 8003a3c:	409a      	lsls	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4013      	ands	r3, r2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d012      	beq.n	8003a6c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0302 	and.w	r3, r3, #2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d00b      	beq.n	8003a6c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a58:	2204      	movs	r2, #4
 8003a5a:	409a      	lsls	r2, r3
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a64:	f043 0204 	orr.w	r2, r3, #4
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a70:	2210      	movs	r2, #16
 8003a72:	409a      	lsls	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4013      	ands	r3, r2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d043      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0308 	and.w	r3, r3, #8
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d03c      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a8e:	2210      	movs	r2, #16
 8003a90:	409a      	lsls	r2, r3
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d018      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d108      	bne.n	8003ac4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d024      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	4798      	blx	r3
 8003ac2:	e01f      	b.n	8003b04 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d01b      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	4798      	blx	r3
 8003ad4:	e016      	b.n	8003b04 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d107      	bne.n	8003af4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0208 	bic.w	r2, r2, #8
 8003af2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b08:	2220      	movs	r2, #32
 8003b0a:	409a      	lsls	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	f000 808f 	beq.w	8003c34 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0310 	and.w	r3, r3, #16
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 8087 	beq.w	8003c34 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	409a      	lsls	r2, r3
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b05      	cmp	r3, #5
 8003b3c:	d136      	bne.n	8003bac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0216 	bic.w	r2, r2, #22
 8003b4c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695a      	ldr	r2, [r3, #20]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b5c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d103      	bne.n	8003b6e <HAL_DMA_IRQHandler+0x1da>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d007      	beq.n	8003b7e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f022 0208 	bic.w	r2, r2, #8
 8003b7c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b82:	223f      	movs	r2, #63	@ 0x3f
 8003b84:	409a      	lsls	r2, r3
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d07e      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	4798      	blx	r3
        }
        return;
 8003baa:	e079      	b.n	8003ca0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d01d      	beq.n	8003bf6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10d      	bne.n	8003be4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d031      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	4798      	blx	r3
 8003bd8:	e02c      	b.n	8003c34 <HAL_DMA_IRQHandler+0x2a0>
 8003bda:	bf00      	nop
 8003bdc:	20000084 	.word	0x20000084
 8003be0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d023      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	4798      	blx	r3
 8003bf4:	e01e      	b.n	8003c34 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10f      	bne.n	8003c24 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0210 	bic.w	r2, r2, #16
 8003c12:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d032      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d022      	beq.n	8003c8e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2205      	movs	r2, #5
 8003c4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0201 	bic.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	3301      	adds	r3, #1
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d307      	bcc.n	8003c7c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1f2      	bne.n	8003c60 <HAL_DMA_IRQHandler+0x2cc>
 8003c7a:	e000      	b.n	8003c7e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c7c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d005      	beq.n	8003ca2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	4798      	blx	r3
 8003c9e:	e000      	b.n	8003ca2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ca0:	bf00      	nop
    }
  }
}
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b085      	sub	sp, #20
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
 8003cb4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003cc4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	2b40      	cmp	r3, #64	@ 0x40
 8003cd4:	d108      	bne.n	8003ce8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ce6:	e007      	b.n	8003cf8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	60da      	str	r2, [r3, #12]
}
 8003cf8:	bf00      	nop
 8003cfa:	3714      	adds	r7, #20
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	3b10      	subs	r3, #16
 8003d14:	4a14      	ldr	r2, [pc, #80]	@ (8003d68 <DMA_CalcBaseAndBitshift+0x64>)
 8003d16:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1a:	091b      	lsrs	r3, r3, #4
 8003d1c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d1e:	4a13      	ldr	r2, [pc, #76]	@ (8003d6c <DMA_CalcBaseAndBitshift+0x68>)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4413      	add	r3, r2
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	461a      	mov	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	d909      	bls.n	8003d46 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d3a:	f023 0303 	bic.w	r3, r3, #3
 8003d3e:	1d1a      	adds	r2, r3, #4
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d44:	e007      	b.n	8003d56 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d4e:	f023 0303 	bic.w	r3, r3, #3
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3714      	adds	r7, #20
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	aaaaaaab 	.word	0xaaaaaaab
 8003d6c:	0800d27c 	.word	0x0800d27c

08003d70 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d80:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d11f      	bne.n	8003dca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d856      	bhi.n	8003e3e <DMA_CheckFifoParam+0xce>
 8003d90:	a201      	add	r2, pc, #4	@ (adr r2, 8003d98 <DMA_CheckFifoParam+0x28>)
 8003d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d96:	bf00      	nop
 8003d98:	08003da9 	.word	0x08003da9
 8003d9c:	08003dbb 	.word	0x08003dbb
 8003da0:	08003da9 	.word	0x08003da9
 8003da4:	08003e3f 	.word	0x08003e3f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d046      	beq.n	8003e42 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003db8:	e043      	b.n	8003e42 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dbe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003dc2:	d140      	bne.n	8003e46 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dc8:	e03d      	b.n	8003e46 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	699b      	ldr	r3, [r3, #24]
 8003dce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dd2:	d121      	bne.n	8003e18 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	d837      	bhi.n	8003e4a <DMA_CheckFifoParam+0xda>
 8003dda:	a201      	add	r2, pc, #4	@ (adr r2, 8003de0 <DMA_CheckFifoParam+0x70>)
 8003ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de0:	08003df1 	.word	0x08003df1
 8003de4:	08003df7 	.word	0x08003df7
 8003de8:	08003df1 	.word	0x08003df1
 8003dec:	08003e09 	.word	0x08003e09
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	73fb      	strb	r3, [r7, #15]
      break;
 8003df4:	e030      	b.n	8003e58 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d025      	beq.n	8003e4e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e06:	e022      	b.n	8003e4e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e10:	d11f      	bne.n	8003e52 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e16:	e01c      	b.n	8003e52 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d903      	bls.n	8003e26 <DMA_CheckFifoParam+0xb6>
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	2b03      	cmp	r3, #3
 8003e22:	d003      	beq.n	8003e2c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e24:	e018      	b.n	8003e58 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	73fb      	strb	r3, [r7, #15]
      break;
 8003e2a:	e015      	b.n	8003e58 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00e      	beq.n	8003e56 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e3c:	e00b      	b.n	8003e56 <DMA_CheckFifoParam+0xe6>
      break;
 8003e3e:	bf00      	nop
 8003e40:	e00a      	b.n	8003e58 <DMA_CheckFifoParam+0xe8>
      break;
 8003e42:	bf00      	nop
 8003e44:	e008      	b.n	8003e58 <DMA_CheckFifoParam+0xe8>
      break;
 8003e46:	bf00      	nop
 8003e48:	e006      	b.n	8003e58 <DMA_CheckFifoParam+0xe8>
      break;
 8003e4a:	bf00      	nop
 8003e4c:	e004      	b.n	8003e58 <DMA_CheckFifoParam+0xe8>
      break;
 8003e4e:	bf00      	nop
 8003e50:	e002      	b.n	8003e58 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e52:	bf00      	nop
 8003e54:	e000      	b.n	8003e58 <DMA_CheckFifoParam+0xe8>
      break;
 8003e56:	bf00      	nop
    }
  } 
  
  return status; 
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop

08003e68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b089      	sub	sp, #36	@ 0x24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e72:	2300      	movs	r3, #0
 8003e74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61fb      	str	r3, [r7, #28]
 8003e82:	e159      	b.n	8004138 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e84:	2201      	movs	r2, #1
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4013      	ands	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e98:	693a      	ldr	r2, [r7, #16]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	f040 8148 	bne.w	8004132 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d005      	beq.n	8003eba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d130      	bne.n	8003f1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ec0:	69fb      	ldr	r3, [r7, #28]
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	2203      	movs	r2, #3
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	43db      	mvns	r3, r3
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	fa02 f303 	lsl.w	r3, r2, r3
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	4013      	ands	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	091b      	lsrs	r3, r3, #4
 8003f06:	f003 0201 	and.w	r2, r3, #1
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f003 0303 	and.w	r3, r3, #3
 8003f24:	2b03      	cmp	r3, #3
 8003f26:	d017      	beq.n	8003f58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	2203      	movs	r2, #3
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	43db      	mvns	r3, r3
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 0303 	and.w	r3, r3, #3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d123      	bne.n	8003fac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	08da      	lsrs	r2, r3, #3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3208      	adds	r2, #8
 8003f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	220f      	movs	r2, #15
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	43db      	mvns	r3, r3
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	4013      	ands	r3, r2
 8003f86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	691a      	ldr	r2, [r3, #16]
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	f003 0307 	and.w	r3, r3, #7
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	08da      	lsrs	r2, r3, #3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	3208      	adds	r2, #8
 8003fa6:	69b9      	ldr	r1, [r7, #24]
 8003fa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	2203      	movs	r2, #3
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	43db      	mvns	r3, r3
 8003fbe:	69ba      	ldr	r2, [r7, #24]
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f003 0203 	and.w	r2, r3, #3
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 80a2 	beq.w	8004132 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	4b57      	ldr	r3, [pc, #348]	@ (8004150 <HAL_GPIO_Init+0x2e8>)
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff6:	4a56      	ldr	r2, [pc, #344]	@ (8004150 <HAL_GPIO_Init+0x2e8>)
 8003ff8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ffc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ffe:	4b54      	ldr	r3, [pc, #336]	@ (8004150 <HAL_GPIO_Init+0x2e8>)
 8004000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800400a:	4a52      	ldr	r2, [pc, #328]	@ (8004154 <HAL_GPIO_Init+0x2ec>)
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	089b      	lsrs	r3, r3, #2
 8004010:	3302      	adds	r3, #2
 8004012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004016:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	f003 0303 	and.w	r3, r3, #3
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	220f      	movs	r2, #15
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	43db      	mvns	r3, r3
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	4013      	ands	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a49      	ldr	r2, [pc, #292]	@ (8004158 <HAL_GPIO_Init+0x2f0>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d019      	beq.n	800406a <HAL_GPIO_Init+0x202>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a48      	ldr	r2, [pc, #288]	@ (800415c <HAL_GPIO_Init+0x2f4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d013      	beq.n	8004066 <HAL_GPIO_Init+0x1fe>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a47      	ldr	r2, [pc, #284]	@ (8004160 <HAL_GPIO_Init+0x2f8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d00d      	beq.n	8004062 <HAL_GPIO_Init+0x1fa>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a46      	ldr	r2, [pc, #280]	@ (8004164 <HAL_GPIO_Init+0x2fc>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d007      	beq.n	800405e <HAL_GPIO_Init+0x1f6>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a45      	ldr	r2, [pc, #276]	@ (8004168 <HAL_GPIO_Init+0x300>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d101      	bne.n	800405a <HAL_GPIO_Init+0x1f2>
 8004056:	2304      	movs	r3, #4
 8004058:	e008      	b.n	800406c <HAL_GPIO_Init+0x204>
 800405a:	2307      	movs	r3, #7
 800405c:	e006      	b.n	800406c <HAL_GPIO_Init+0x204>
 800405e:	2303      	movs	r3, #3
 8004060:	e004      	b.n	800406c <HAL_GPIO_Init+0x204>
 8004062:	2302      	movs	r3, #2
 8004064:	e002      	b.n	800406c <HAL_GPIO_Init+0x204>
 8004066:	2301      	movs	r3, #1
 8004068:	e000      	b.n	800406c <HAL_GPIO_Init+0x204>
 800406a:	2300      	movs	r3, #0
 800406c:	69fa      	ldr	r2, [r7, #28]
 800406e:	f002 0203 	and.w	r2, r2, #3
 8004072:	0092      	lsls	r2, r2, #2
 8004074:	4093      	lsls	r3, r2
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4313      	orrs	r3, r2
 800407a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800407c:	4935      	ldr	r1, [pc, #212]	@ (8004154 <HAL_GPIO_Init+0x2ec>)
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	089b      	lsrs	r3, r3, #2
 8004082:	3302      	adds	r3, #2
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800408a:	4b38      	ldr	r3, [pc, #224]	@ (800416c <HAL_GPIO_Init+0x304>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	43db      	mvns	r3, r3
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	4013      	ands	r3, r2
 8004098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040ae:	4a2f      	ldr	r2, [pc, #188]	@ (800416c <HAL_GPIO_Init+0x304>)
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040b4:	4b2d      	ldr	r3, [pc, #180]	@ (800416c <HAL_GPIO_Init+0x304>)
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	43db      	mvns	r3, r3
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	4013      	ands	r3, r2
 80040c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80040d0:	69ba      	ldr	r2, [r7, #24]
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040d8:	4a24      	ldr	r2, [pc, #144]	@ (800416c <HAL_GPIO_Init+0x304>)
 80040da:	69bb      	ldr	r3, [r7, #24]
 80040dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040de:	4b23      	ldr	r3, [pc, #140]	@ (800416c <HAL_GPIO_Init+0x304>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	43db      	mvns	r3, r3
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	4013      	ands	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80040fa:	69ba      	ldr	r2, [r7, #24]
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	4313      	orrs	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004102:	4a1a      	ldr	r2, [pc, #104]	@ (800416c <HAL_GPIO_Init+0x304>)
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004108:	4b18      	ldr	r3, [pc, #96]	@ (800416c <HAL_GPIO_Init+0x304>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	43db      	mvns	r3, r3
 8004112:	69ba      	ldr	r2, [r7, #24]
 8004114:	4013      	ands	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d003      	beq.n	800412c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	4313      	orrs	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800412c:	4a0f      	ldr	r2, [pc, #60]	@ (800416c <HAL_GPIO_Init+0x304>)
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	3301      	adds	r3, #1
 8004136:	61fb      	str	r3, [r7, #28]
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	2b0f      	cmp	r3, #15
 800413c:	f67f aea2 	bls.w	8003e84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004140:	bf00      	nop
 8004142:	bf00      	nop
 8004144:	3724      	adds	r7, #36	@ 0x24
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
 800414e:	bf00      	nop
 8004150:	40023800 	.word	0x40023800
 8004154:	40013800 	.word	0x40013800
 8004158:	40020000 	.word	0x40020000
 800415c:	40020400 	.word	0x40020400
 8004160:	40020800 	.word	0x40020800
 8004164:	40020c00 	.word	0x40020c00
 8004168:	40021000 	.word	0x40021000
 800416c:	40013c00 	.word	0x40013c00

08004170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	460b      	mov	r3, r1
 800417a:	807b      	strh	r3, [r7, #2]
 800417c:	4613      	mov	r3, r2
 800417e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004180:	787b      	ldrb	r3, [r7, #1]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004186:	887a      	ldrh	r2, [r7, #2]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800418c:	e003      	b.n	8004196 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800418e:	887b      	ldrh	r3, [r7, #2]
 8004190:	041a      	lsls	r2, r3, #16
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	619a      	str	r2, [r3, #24]
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
	...

080041a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d101      	bne.n	80041b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e12b      	b.n	800440e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d106      	bne.n	80041d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7fe fac2 	bl	8002754 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2224      	movs	r2, #36	@ 0x24
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f022 0201 	bic.w	r2, r2, #1
 80041e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004206:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004208:	f001 fa48 	bl	800569c <HAL_RCC_GetPCLK1Freq>
 800420c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	4a81      	ldr	r2, [pc, #516]	@ (8004418 <HAL_I2C_Init+0x274>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d807      	bhi.n	8004228 <HAL_I2C_Init+0x84>
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4a80      	ldr	r2, [pc, #512]	@ (800441c <HAL_I2C_Init+0x278>)
 800421c:	4293      	cmp	r3, r2
 800421e:	bf94      	ite	ls
 8004220:	2301      	movls	r3, #1
 8004222:	2300      	movhi	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	e006      	b.n	8004236 <HAL_I2C_Init+0x92>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4a7d      	ldr	r2, [pc, #500]	@ (8004420 <HAL_I2C_Init+0x27c>)
 800422c:	4293      	cmp	r3, r2
 800422e:	bf94      	ite	ls
 8004230:	2301      	movls	r3, #1
 8004232:	2300      	movhi	r3, #0
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e0e7      	b.n	800440e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4a78      	ldr	r2, [pc, #480]	@ (8004424 <HAL_I2C_Init+0x280>)
 8004242:	fba2 2303 	umull	r2, r3, r2, r3
 8004246:	0c9b      	lsrs	r3, r3, #18
 8004248:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6a1b      	ldr	r3, [r3, #32]
 8004264:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	4a6a      	ldr	r2, [pc, #424]	@ (8004418 <HAL_I2C_Init+0x274>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d802      	bhi.n	8004278 <HAL_I2C_Init+0xd4>
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	3301      	adds	r3, #1
 8004276:	e009      	b.n	800428c <HAL_I2C_Init+0xe8>
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800427e:	fb02 f303 	mul.w	r3, r2, r3
 8004282:	4a69      	ldr	r2, [pc, #420]	@ (8004428 <HAL_I2C_Init+0x284>)
 8004284:	fba2 2303 	umull	r2, r3, r2, r3
 8004288:	099b      	lsrs	r3, r3, #6
 800428a:	3301      	adds	r3, #1
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	6812      	ldr	r2, [r2, #0]
 8004290:	430b      	orrs	r3, r1
 8004292:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800429e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	495c      	ldr	r1, [pc, #368]	@ (8004418 <HAL_I2C_Init+0x274>)
 80042a8:	428b      	cmp	r3, r1
 80042aa:	d819      	bhi.n	80042e0 <HAL_I2C_Init+0x13c>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	1e59      	subs	r1, r3, #1
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80042ba:	1c59      	adds	r1, r3, #1
 80042bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80042c0:	400b      	ands	r3, r1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00a      	beq.n	80042dc <HAL_I2C_Init+0x138>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	1e59      	subs	r1, r3, #1
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80042d4:	3301      	adds	r3, #1
 80042d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042da:	e051      	b.n	8004380 <HAL_I2C_Init+0x1dc>
 80042dc:	2304      	movs	r3, #4
 80042de:	e04f      	b.n	8004380 <HAL_I2C_Init+0x1dc>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d111      	bne.n	800430c <HAL_I2C_Init+0x168>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	1e58      	subs	r0, r3, #1
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6859      	ldr	r1, [r3, #4]
 80042f0:	460b      	mov	r3, r1
 80042f2:	005b      	lsls	r3, r3, #1
 80042f4:	440b      	add	r3, r1
 80042f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80042fa:	3301      	adds	r3, #1
 80042fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004300:	2b00      	cmp	r3, #0
 8004302:	bf0c      	ite	eq
 8004304:	2301      	moveq	r3, #1
 8004306:	2300      	movne	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	e012      	b.n	8004332 <HAL_I2C_Init+0x18e>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	1e58      	subs	r0, r3, #1
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6859      	ldr	r1, [r3, #4]
 8004314:	460b      	mov	r3, r1
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	440b      	add	r3, r1
 800431a:	0099      	lsls	r1, r3, #2
 800431c:	440b      	add	r3, r1
 800431e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004322:	3301      	adds	r3, #1
 8004324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004328:	2b00      	cmp	r3, #0
 800432a:	bf0c      	ite	eq
 800432c:	2301      	moveq	r3, #1
 800432e:	2300      	movne	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <HAL_I2C_Init+0x196>
 8004336:	2301      	movs	r3, #1
 8004338:	e022      	b.n	8004380 <HAL_I2C_Init+0x1dc>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10e      	bne.n	8004360 <HAL_I2C_Init+0x1bc>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	1e58      	subs	r0, r3, #1
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6859      	ldr	r1, [r3, #4]
 800434a:	460b      	mov	r3, r1
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	440b      	add	r3, r1
 8004350:	fbb0 f3f3 	udiv	r3, r0, r3
 8004354:	3301      	adds	r3, #1
 8004356:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800435a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800435e:	e00f      	b.n	8004380 <HAL_I2C_Init+0x1dc>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	1e58      	subs	r0, r3, #1
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6859      	ldr	r1, [r3, #4]
 8004368:	460b      	mov	r3, r1
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	440b      	add	r3, r1
 800436e:	0099      	lsls	r1, r3, #2
 8004370:	440b      	add	r3, r1
 8004372:	fbb0 f3f3 	udiv	r3, r0, r3
 8004376:	3301      	adds	r3, #1
 8004378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800437c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004380:	6879      	ldr	r1, [r7, #4]
 8004382:	6809      	ldr	r1, [r1, #0]
 8004384:	4313      	orrs	r3, r2
 8004386:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69da      	ldr	r2, [r3, #28]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80043ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6911      	ldr	r1, [r2, #16]
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	68d2      	ldr	r2, [r2, #12]
 80043ba:	4311      	orrs	r1, r2
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6812      	ldr	r2, [r2, #0]
 80043c0:	430b      	orrs	r3, r1
 80043c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	695a      	ldr	r2, [r3, #20]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	430a      	orrs	r2, r1
 80043de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0201 	orr.w	r2, r2, #1
 80043ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	000186a0 	.word	0x000186a0
 800441c:	001e847f 	.word	0x001e847f
 8004420:	003d08ff 	.word	0x003d08ff
 8004424:	431bde83 	.word	0x431bde83
 8004428:	10624dd3 	.word	0x10624dd3

0800442c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08c      	sub	sp, #48	@ 0x30
 8004430:	af02      	add	r7, sp, #8
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	4608      	mov	r0, r1
 8004436:	4611      	mov	r1, r2
 8004438:	461a      	mov	r2, r3
 800443a:	4603      	mov	r3, r0
 800443c:	817b      	strh	r3, [r7, #10]
 800443e:	460b      	mov	r3, r1
 8004440:	813b      	strh	r3, [r7, #8]
 8004442:	4613      	mov	r3, r2
 8004444:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004446:	f7fe fd89 	bl	8002f5c <HAL_GetTick>
 800444a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b20      	cmp	r3, #32
 8004456:	f040 8214 	bne.w	8004882 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800445a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	2319      	movs	r3, #25
 8004460:	2201      	movs	r2, #1
 8004462:	497b      	ldr	r1, [pc, #492]	@ (8004650 <HAL_I2C_Mem_Read+0x224>)
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 fafb 	bl	8004a60 <I2C_WaitOnFlagUntilTimeout>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d001      	beq.n	8004474 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004470:	2302      	movs	r3, #2
 8004472:	e207      	b.n	8004884 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800447a:	2b01      	cmp	r3, #1
 800447c:	d101      	bne.n	8004482 <HAL_I2C_Mem_Read+0x56>
 800447e:	2302      	movs	r3, #2
 8004480:	e200      	b.n	8004884 <HAL_I2C_Mem_Read+0x458>
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2201      	movs	r2, #1
 8004486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b01      	cmp	r3, #1
 8004496:	d007      	beq.n	80044a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f042 0201 	orr.w	r2, r2, #1
 80044a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2222      	movs	r2, #34	@ 0x22
 80044bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2240      	movs	r2, #64	@ 0x40
 80044c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80044d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044de:	b29a      	uxth	r2, r3
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	4a5b      	ldr	r2, [pc, #364]	@ (8004654 <HAL_I2C_Mem_Read+0x228>)
 80044e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044ea:	88f8      	ldrh	r0, [r7, #6]
 80044ec:	893a      	ldrh	r2, [r7, #8]
 80044ee:	8979      	ldrh	r1, [r7, #10]
 80044f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f2:	9301      	str	r3, [sp, #4]
 80044f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	4603      	mov	r3, r0
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 f9c8 	bl	8004890 <I2C_RequestMemoryRead>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e1bc      	b.n	8004884 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800450e:	2b00      	cmp	r3, #0
 8004510:	d113      	bne.n	800453a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004512:	2300      	movs	r3, #0
 8004514:	623b      	str	r3, [r7, #32]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	623b      	str	r3, [r7, #32]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	623b      	str	r3, [r7, #32]
 8004526:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	e190      	b.n	800485c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800453e:	2b01      	cmp	r3, #1
 8004540:	d11b      	bne.n	800457a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004550:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004552:	2300      	movs	r3, #0
 8004554:	61fb      	str	r3, [r7, #28]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	695b      	ldr	r3, [r3, #20]
 800455c:	61fb      	str	r3, [r7, #28]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	61fb      	str	r3, [r7, #28]
 8004566:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	e170      	b.n	800485c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800457e:	2b02      	cmp	r3, #2
 8004580:	d11b      	bne.n	80045ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004590:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045a2:	2300      	movs	r3, #0
 80045a4:	61bb      	str	r3, [r7, #24]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	695b      	ldr	r3, [r3, #20]
 80045ac:	61bb      	str	r3, [r7, #24]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	61bb      	str	r3, [r7, #24]
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	e150      	b.n	800485c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045ba:	2300      	movs	r3, #0
 80045bc:	617b      	str	r3, [r7, #20]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	617b      	str	r3, [r7, #20]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	617b      	str	r3, [r7, #20]
 80045ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80045d0:	e144      	b.n	800485c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	f200 80f1 	bhi.w	80047be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d123      	bne.n	800462c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045e6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 fb9b 	bl	8004d24 <I2C_WaitOnRXNEFlagUntilTimeout>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e145      	b.n	8004884 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	691a      	ldr	r2, [r3, #16]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004602:	b2d2      	uxtb	r2, r2
 8004604:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004614:	3b01      	subs	r3, #1
 8004616:	b29a      	uxth	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004620:	b29b      	uxth	r3, r3
 8004622:	3b01      	subs	r3, #1
 8004624:	b29a      	uxth	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800462a:	e117      	b.n	800485c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004630:	2b02      	cmp	r3, #2
 8004632:	d14e      	bne.n	80046d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004636:	9300      	str	r3, [sp, #0]
 8004638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800463a:	2200      	movs	r2, #0
 800463c:	4906      	ldr	r1, [pc, #24]	@ (8004658 <HAL_I2C_Mem_Read+0x22c>)
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 fa0e 	bl	8004a60 <I2C_WaitOnFlagUntilTimeout>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d008      	beq.n	800465c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e11a      	b.n	8004884 <HAL_I2C_Mem_Read+0x458>
 800464e:	bf00      	nop
 8004650:	00100002 	.word	0x00100002
 8004654:	ffff0000 	.word	0xffff0000
 8004658:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800466a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	691a      	ldr	r2, [r3, #16]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467e:	1c5a      	adds	r2, r3, #1
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004688:	3b01      	subs	r3, #1
 800468a:	b29a      	uxth	r2, r3
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004694:	b29b      	uxth	r3, r3
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	691a      	ldr	r2, [r3, #16]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a8:	b2d2      	uxtb	r2, r2
 80046aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ba:	3b01      	subs	r3, #1
 80046bc:	b29a      	uxth	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80046d0:	e0c4      	b.n	800485c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046d8:	2200      	movs	r2, #0
 80046da:	496c      	ldr	r1, [pc, #432]	@ (800488c <HAL_I2C_Mem_Read+0x460>)
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 f9bf 	bl	8004a60 <I2C_WaitOnFlagUntilTimeout>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e0cb      	b.n	8004884 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	691a      	ldr	r2, [r3, #16]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004718:	3b01      	subs	r3, #1
 800471a:	b29a      	uxth	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004724:	b29b      	uxth	r3, r3
 8004726:	3b01      	subs	r3, #1
 8004728:	b29a      	uxth	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800472e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004734:	2200      	movs	r2, #0
 8004736:	4955      	ldr	r1, [pc, #340]	@ (800488c <HAL_I2C_Mem_Read+0x460>)
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f000 f991 	bl	8004a60 <I2C_WaitOnFlagUntilTimeout>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e09d      	b.n	8004884 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004756:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	691a      	ldr	r2, [r3, #16]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004762:	b2d2      	uxtb	r2, r2
 8004764:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476a:	1c5a      	adds	r2, r3, #1
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004774:	3b01      	subs	r3, #1
 8004776:	b29a      	uxth	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004780:	b29b      	uxth	r3, r3
 8004782:	3b01      	subs	r3, #1
 8004784:	b29a      	uxth	r2, r3
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	691a      	ldr	r2, [r3, #16]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004794:	b2d2      	uxtb	r2, r2
 8004796:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479c:	1c5a      	adds	r2, r3, #1
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a6:	3b01      	subs	r3, #1
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	3b01      	subs	r3, #1
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80047bc:	e04e      	b.n	800485c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047c0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 faae 	bl	8004d24 <I2C_WaitOnRXNEFlagUntilTimeout>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e058      	b.n	8004884 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	691a      	ldr	r2, [r3, #16]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047dc:	b2d2      	uxtb	r2, r2
 80047de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ee:	3b01      	subs	r3, #1
 80047f0:	b29a      	uxth	r2, r3
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	3b01      	subs	r3, #1
 80047fe:	b29a      	uxth	r2, r3
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	f003 0304 	and.w	r3, r3, #4
 800480e:	2b04      	cmp	r3, #4
 8004810:	d124      	bne.n	800485c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004816:	2b03      	cmp	r3, #3
 8004818:	d107      	bne.n	800482a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004828:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	691a      	ldr	r2, [r3, #16]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004846:	3b01      	subs	r3, #1
 8004848:	b29a      	uxth	r2, r3
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004852:	b29b      	uxth	r3, r3
 8004854:	3b01      	subs	r3, #1
 8004856:	b29a      	uxth	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004860:	2b00      	cmp	r3, #0
 8004862:	f47f aeb6 	bne.w	80045d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2220      	movs	r2, #32
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800487e:	2300      	movs	r3, #0
 8004880:	e000      	b.n	8004884 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004882:	2302      	movs	r3, #2
  }
}
 8004884:	4618      	mov	r0, r3
 8004886:	3728      	adds	r7, #40	@ 0x28
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	00010004 	.word	0x00010004

08004890 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b088      	sub	sp, #32
 8004894:	af02      	add	r7, sp, #8
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	4608      	mov	r0, r1
 800489a:	4611      	mov	r1, r2
 800489c:	461a      	mov	r2, r3
 800489e:	4603      	mov	r3, r0
 80048a0:	817b      	strh	r3, [r7, #10]
 80048a2:	460b      	mov	r3, r1
 80048a4:	813b      	strh	r3, [r7, #8]
 80048a6:	4613      	mov	r3, r2
 80048a8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80048b8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	6a3b      	ldr	r3, [r7, #32]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 f8c2 	bl	8004a60 <I2C_WaitOnFlagUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00d      	beq.n	80048fe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048f0:	d103      	bne.n	80048fa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e0aa      	b.n	8004a54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80048fe:	897b      	ldrh	r3, [r7, #10]
 8004900:	b2db      	uxtb	r3, r3
 8004902:	461a      	mov	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800490c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800490e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004910:	6a3a      	ldr	r2, [r7, #32]
 8004912:	4952      	ldr	r1, [pc, #328]	@ (8004a5c <I2C_RequestMemoryRead+0x1cc>)
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 f91d 	bl	8004b54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e097      	b.n	8004a54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004924:	2300      	movs	r3, #0
 8004926:	617b      	str	r3, [r7, #20]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800493a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800493c:	6a39      	ldr	r1, [r7, #32]
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f000 f9a8 	bl	8004c94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00d      	beq.n	8004966 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494e:	2b04      	cmp	r3, #4
 8004950:	d107      	bne.n	8004962 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004960:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e076      	b.n	8004a54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004966:	88fb      	ldrh	r3, [r7, #6]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d105      	bne.n	8004978 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800496c:	893b      	ldrh	r3, [r7, #8]
 800496e:	b2da      	uxtb	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	611a      	str	r2, [r3, #16]
 8004976:	e021      	b.n	80049bc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004978:	893b      	ldrh	r3, [r7, #8]
 800497a:	0a1b      	lsrs	r3, r3, #8
 800497c:	b29b      	uxth	r3, r3
 800497e:	b2da      	uxtb	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004988:	6a39      	ldr	r1, [r7, #32]
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f000 f982 	bl	8004c94 <I2C_WaitOnTXEFlagUntilTimeout>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00d      	beq.n	80049b2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499a:	2b04      	cmp	r3, #4
 800499c:	d107      	bne.n	80049ae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e050      	b.n	8004a54 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80049b2:	893b      	ldrh	r3, [r7, #8]
 80049b4:	b2da      	uxtb	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80049bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049be:	6a39      	ldr	r1, [r7, #32]
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 f967 	bl	8004c94 <I2C_WaitOnTXEFlagUntilTimeout>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00d      	beq.n	80049e8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d0:	2b04      	cmp	r3, #4
 80049d2:	d107      	bne.n	80049e4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049e2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e035      	b.n	8004a54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049f6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f000 f82b 	bl	8004a60 <I2C_WaitOnFlagUntilTimeout>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00d      	beq.n	8004a2c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a1e:	d103      	bne.n	8004a28 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e013      	b.n	8004a54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004a2c:	897b      	ldrh	r3, [r7, #10]
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	f043 0301 	orr.w	r3, r3, #1
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3e:	6a3a      	ldr	r2, [r7, #32]
 8004a40:	4906      	ldr	r1, [pc, #24]	@ (8004a5c <I2C_RequestMemoryRead+0x1cc>)
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 f886 	bl	8004b54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e000      	b.n	8004a54 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3718      	adds	r7, #24
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	00010002 	.word	0x00010002

08004a60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	603b      	str	r3, [r7, #0]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a70:	e048      	b.n	8004b04 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a78:	d044      	beq.n	8004b04 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a7a:	f7fe fa6f 	bl	8002f5c <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d302      	bcc.n	8004a90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d139      	bne.n	8004b04 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	0c1b      	lsrs	r3, r3, #16
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d10d      	bne.n	8004ab6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	43da      	mvns	r2, r3
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	bf0c      	ite	eq
 8004aac:	2301      	moveq	r3, #1
 8004aae:	2300      	movne	r3, #0
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	e00c      	b.n	8004ad0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	43da      	mvns	r2, r3
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	bf0c      	ite	eq
 8004ac8:	2301      	moveq	r3, #1
 8004aca:	2300      	movne	r3, #0
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	461a      	mov	r2, r3
 8004ad0:	79fb      	ldrb	r3, [r7, #7]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d116      	bne.n	8004b04 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af0:	f043 0220 	orr.w	r2, r3, #32
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e023      	b.n	8004b4c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	0c1b      	lsrs	r3, r3, #16
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d10d      	bne.n	8004b2a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	43da      	mvns	r2, r3
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	bf0c      	ite	eq
 8004b20:	2301      	moveq	r3, #1
 8004b22:	2300      	movne	r3, #0
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	461a      	mov	r2, r3
 8004b28:	e00c      	b.n	8004b44 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	43da      	mvns	r2, r3
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	4013      	ands	r3, r2
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	bf0c      	ite	eq
 8004b3c:	2301      	moveq	r3, #1
 8004b3e:	2300      	movne	r3, #0
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	461a      	mov	r2, r3
 8004b44:	79fb      	ldrb	r3, [r7, #7]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d093      	beq.n	8004a72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
 8004b60:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b62:	e071      	b.n	8004c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b72:	d123      	bne.n	8004bbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b82:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba8:	f043 0204 	orr.w	r2, r3, #4
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e067      	b.n	8004c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc2:	d041      	beq.n	8004c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bc4:	f7fe f9ca 	bl	8002f5c <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d302      	bcc.n	8004bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d136      	bne.n	8004c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	0c1b      	lsrs	r3, r3, #16
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d10c      	bne.n	8004bfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	43da      	mvns	r2, r3
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	4013      	ands	r3, r2
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	bf14      	ite	ne
 8004bf6:	2301      	movne	r3, #1
 8004bf8:	2300      	moveq	r3, #0
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	e00b      	b.n	8004c16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	43da      	mvns	r2, r3
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	bf14      	ite	ne
 8004c10:	2301      	movne	r3, #1
 8004c12:	2300      	moveq	r3, #0
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d016      	beq.n	8004c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2220      	movs	r2, #32
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c34:	f043 0220 	orr.w	r2, r3, #32
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e021      	b.n	8004c8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	0c1b      	lsrs	r3, r3, #16
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d10c      	bne.n	8004c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	43da      	mvns	r2, r3
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	bf14      	ite	ne
 8004c64:	2301      	movne	r3, #1
 8004c66:	2300      	moveq	r3, #0
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	e00b      	b.n	8004c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	43da      	mvns	r2, r3
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4013      	ands	r3, r2
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	bf14      	ite	ne
 8004c7e:	2301      	movne	r3, #1
 8004c80:	2300      	moveq	r3, #0
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f47f af6d 	bne.w	8004b64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ca0:	e034      	b.n	8004d0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f000 f89b 	bl	8004dde <I2C_IsAcknowledgeFailed>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e034      	b.n	8004d1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb8:	d028      	beq.n	8004d0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cba:	f7fe f94f 	bl	8002f5c <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d302      	bcc.n	8004cd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d11d      	bne.n	8004d0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cda:	2b80      	cmp	r3, #128	@ 0x80
 8004cdc:	d016      	beq.n	8004d0c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf8:	f043 0220 	orr.w	r2, r3, #32
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e007      	b.n	8004d1c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d16:	2b80      	cmp	r3, #128	@ 0x80
 8004d18:	d1c3      	bne.n	8004ca2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d30:	e049      	b.n	8004dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	f003 0310 	and.w	r3, r3, #16
 8004d3c:	2b10      	cmp	r3, #16
 8004d3e:	d119      	bne.n	8004d74 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f06f 0210 	mvn.w	r2, #16
 8004d48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2220      	movs	r2, #32
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e030      	b.n	8004dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d74:	f7fe f8f2 	bl	8002f5c <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d302      	bcc.n	8004d8a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d11d      	bne.n	8004dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d94:	2b40      	cmp	r3, #64	@ 0x40
 8004d96:	d016      	beq.n	8004dc6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2220      	movs	r2, #32
 8004da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db2:	f043 0220 	orr.w	r2, r3, #32
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e007      	b.n	8004dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dd0:	2b40      	cmp	r3, #64	@ 0x40
 8004dd2:	d1ae      	bne.n	8004d32 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dd4:	2300      	movs	r3, #0
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}

08004dde <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	695b      	ldr	r3, [r3, #20]
 8004dec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004df0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004df4:	d11b      	bne.n	8004e2e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004dfe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2220      	movs	r2, #32
 8004e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1a:	f043 0204 	orr.w	r2, r3, #4
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e000      	b.n	8004e30 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e267      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0301 	and.w	r3, r3, #1
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d075      	beq.n	8004f46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004e5a:	4b88      	ldr	r3, [pc, #544]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f003 030c 	and.w	r3, r3, #12
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	d00c      	beq.n	8004e80 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e66:	4b85      	ldr	r3, [pc, #532]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004e6e:	2b08      	cmp	r3, #8
 8004e70:	d112      	bne.n	8004e98 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e72:	4b82      	ldr	r3, [pc, #520]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e7e:	d10b      	bne.n	8004e98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e80:	4b7e      	ldr	r3, [pc, #504]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d05b      	beq.n	8004f44 <HAL_RCC_OscConfig+0x108>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d157      	bne.n	8004f44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e242      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ea0:	d106      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x74>
 8004ea2:	4b76      	ldr	r3, [pc, #472]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a75      	ldr	r2, [pc, #468]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eac:	6013      	str	r3, [r2, #0]
 8004eae:	e01d      	b.n	8004eec <HAL_RCC_OscConfig+0xb0>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004eb8:	d10c      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x98>
 8004eba:	4b70      	ldr	r3, [pc, #448]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a6f      	ldr	r2, [pc, #444]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004ec0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	4b6d      	ldr	r3, [pc, #436]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a6c      	ldr	r2, [pc, #432]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	e00b      	b.n	8004eec <HAL_RCC_OscConfig+0xb0>
 8004ed4:	4b69      	ldr	r3, [pc, #420]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a68      	ldr	r2, [pc, #416]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004eda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ede:	6013      	str	r3, [r2, #0]
 8004ee0:	4b66      	ldr	r3, [pc, #408]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a65      	ldr	r2, [pc, #404]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004ee6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d013      	beq.n	8004f1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef4:	f7fe f832 	bl	8002f5c <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004efc:	f7fe f82e 	bl	8002f5c <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b64      	cmp	r3, #100	@ 0x64
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e207      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f0e:	4b5b      	ldr	r3, [pc, #364]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d0f0      	beq.n	8004efc <HAL_RCC_OscConfig+0xc0>
 8004f1a:	e014      	b.n	8004f46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f1c:	f7fe f81e 	bl	8002f5c <HAL_GetTick>
 8004f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f22:	e008      	b.n	8004f36 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f24:	f7fe f81a 	bl	8002f5c <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	2b64      	cmp	r3, #100	@ 0x64
 8004f30:	d901      	bls.n	8004f36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e1f3      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f36:	4b51      	ldr	r3, [pc, #324]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1f0      	bne.n	8004f24 <HAL_RCC_OscConfig+0xe8>
 8004f42:	e000      	b.n	8004f46 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d063      	beq.n	800501a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f52:	4b4a      	ldr	r3, [pc, #296]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 030c 	and.w	r3, r3, #12
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d00b      	beq.n	8004f76 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f5e:	4b47      	ldr	r3, [pc, #284]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d11c      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f6a:	4b44      	ldr	r3, [pc, #272]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d116      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f76:	4b41      	ldr	r3, [pc, #260]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d005      	beq.n	8004f8e <HAL_RCC_OscConfig+0x152>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d001      	beq.n	8004f8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e1c7      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f8e:	4b3b      	ldr	r3, [pc, #236]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	4937      	ldr	r1, [pc, #220]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fa2:	e03a      	b.n	800501a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d020      	beq.n	8004fee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fac:	4b34      	ldr	r3, [pc, #208]	@ (8005080 <HAL_RCC_OscConfig+0x244>)
 8004fae:	2201      	movs	r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb2:	f7fd ffd3 	bl	8002f5c <HAL_GetTick>
 8004fb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fb8:	e008      	b.n	8004fcc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fba:	f7fd ffcf 	bl	8002f5c <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e1a8      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fcc:	4b2b      	ldr	r3, [pc, #172]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0f0      	beq.n	8004fba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd8:	4b28      	ldr	r3, [pc, #160]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	691b      	ldr	r3, [r3, #16]
 8004fe4:	00db      	lsls	r3, r3, #3
 8004fe6:	4925      	ldr	r1, [pc, #148]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	600b      	str	r3, [r1, #0]
 8004fec:	e015      	b.n	800501a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fee:	4b24      	ldr	r3, [pc, #144]	@ (8005080 <HAL_RCC_OscConfig+0x244>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff4:	f7fd ffb2 	bl	8002f5c <HAL_GetTick>
 8004ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ffa:	e008      	b.n	800500e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ffc:	f7fd ffae 	bl	8002f5c <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d901      	bls.n	800500e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	e187      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800500e:	4b1b      	ldr	r3, [pc, #108]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0302 	and.w	r3, r3, #2
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1f0      	bne.n	8004ffc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0308 	and.w	r3, r3, #8
 8005022:	2b00      	cmp	r3, #0
 8005024:	d036      	beq.n	8005094 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d016      	beq.n	800505c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800502e:	4b15      	ldr	r3, [pc, #84]	@ (8005084 <HAL_RCC_OscConfig+0x248>)
 8005030:	2201      	movs	r2, #1
 8005032:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005034:	f7fd ff92 	bl	8002f5c <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800503c:	f7fd ff8e 	bl	8002f5c <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e167      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800504e:	4b0b      	ldr	r3, [pc, #44]	@ (800507c <HAL_RCC_OscConfig+0x240>)
 8005050:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0f0      	beq.n	800503c <HAL_RCC_OscConfig+0x200>
 800505a:	e01b      	b.n	8005094 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800505c:	4b09      	ldr	r3, [pc, #36]	@ (8005084 <HAL_RCC_OscConfig+0x248>)
 800505e:	2200      	movs	r2, #0
 8005060:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005062:	f7fd ff7b 	bl	8002f5c <HAL_GetTick>
 8005066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005068:	e00e      	b.n	8005088 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800506a:	f7fd ff77 	bl	8002f5c <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	2b02      	cmp	r3, #2
 8005076:	d907      	bls.n	8005088 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e150      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
 800507c:	40023800 	.word	0x40023800
 8005080:	42470000 	.word	0x42470000
 8005084:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005088:	4b88      	ldr	r3, [pc, #544]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 800508a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1ea      	bne.n	800506a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0304 	and.w	r3, r3, #4
 800509c:	2b00      	cmp	r3, #0
 800509e:	f000 8097 	beq.w	80051d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050a2:	2300      	movs	r3, #0
 80050a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050a6:	4b81      	ldr	r3, [pc, #516]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 80050a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10f      	bne.n	80050d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050b2:	2300      	movs	r3, #0
 80050b4:	60bb      	str	r3, [r7, #8]
 80050b6:	4b7d      	ldr	r3, [pc, #500]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 80050b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ba:	4a7c      	ldr	r2, [pc, #496]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 80050bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80050c2:	4b7a      	ldr	r3, [pc, #488]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 80050c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ca:	60bb      	str	r3, [r7, #8]
 80050cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050ce:	2301      	movs	r3, #1
 80050d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050d2:	4b77      	ldr	r3, [pc, #476]	@ (80052b0 <HAL_RCC_OscConfig+0x474>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d118      	bne.n	8005110 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050de:	4b74      	ldr	r3, [pc, #464]	@ (80052b0 <HAL_RCC_OscConfig+0x474>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a73      	ldr	r2, [pc, #460]	@ (80052b0 <HAL_RCC_OscConfig+0x474>)
 80050e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ea:	f7fd ff37 	bl	8002f5c <HAL_GetTick>
 80050ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050f0:	e008      	b.n	8005104 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050f2:	f7fd ff33 	bl	8002f5c <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d901      	bls.n	8005104 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e10c      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005104:	4b6a      	ldr	r3, [pc, #424]	@ (80052b0 <HAL_RCC_OscConfig+0x474>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800510c:	2b00      	cmp	r3, #0
 800510e:	d0f0      	beq.n	80050f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d106      	bne.n	8005126 <HAL_RCC_OscConfig+0x2ea>
 8005118:	4b64      	ldr	r3, [pc, #400]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 800511a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800511c:	4a63      	ldr	r2, [pc, #396]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 800511e:	f043 0301 	orr.w	r3, r3, #1
 8005122:	6713      	str	r3, [r2, #112]	@ 0x70
 8005124:	e01c      	b.n	8005160 <HAL_RCC_OscConfig+0x324>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	2b05      	cmp	r3, #5
 800512c:	d10c      	bne.n	8005148 <HAL_RCC_OscConfig+0x30c>
 800512e:	4b5f      	ldr	r3, [pc, #380]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 8005130:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005132:	4a5e      	ldr	r2, [pc, #376]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 8005134:	f043 0304 	orr.w	r3, r3, #4
 8005138:	6713      	str	r3, [r2, #112]	@ 0x70
 800513a:	4b5c      	ldr	r3, [pc, #368]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 800513c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800513e:	4a5b      	ldr	r2, [pc, #364]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 8005140:	f043 0301 	orr.w	r3, r3, #1
 8005144:	6713      	str	r3, [r2, #112]	@ 0x70
 8005146:	e00b      	b.n	8005160 <HAL_RCC_OscConfig+0x324>
 8005148:	4b58      	ldr	r3, [pc, #352]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 800514a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800514c:	4a57      	ldr	r2, [pc, #348]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 800514e:	f023 0301 	bic.w	r3, r3, #1
 8005152:	6713      	str	r3, [r2, #112]	@ 0x70
 8005154:	4b55      	ldr	r3, [pc, #340]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 8005156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005158:	4a54      	ldr	r2, [pc, #336]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 800515a:	f023 0304 	bic.w	r3, r3, #4
 800515e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d015      	beq.n	8005194 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005168:	f7fd fef8 	bl	8002f5c <HAL_GetTick>
 800516c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800516e:	e00a      	b.n	8005186 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005170:	f7fd fef4 	bl	8002f5c <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800517e:	4293      	cmp	r3, r2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e0cb      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005186:	4b49      	ldr	r3, [pc, #292]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 8005188:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d0ee      	beq.n	8005170 <HAL_RCC_OscConfig+0x334>
 8005192:	e014      	b.n	80051be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005194:	f7fd fee2 	bl	8002f5c <HAL_GetTick>
 8005198:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800519a:	e00a      	b.n	80051b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800519c:	f7fd fede 	bl	8002f5c <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d901      	bls.n	80051b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051ae:	2303      	movs	r3, #3
 80051b0:	e0b5      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051b2:	4b3e      	ldr	r3, [pc, #248]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 80051b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1ee      	bne.n	800519c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051be:	7dfb      	ldrb	r3, [r7, #23]
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d105      	bne.n	80051d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051c4:	4b39      	ldr	r3, [pc, #228]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 80051c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c8:	4a38      	ldr	r2, [pc, #224]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 80051ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	699b      	ldr	r3, [r3, #24]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 80a1 	beq.w	800531c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051da:	4b34      	ldr	r3, [pc, #208]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	f003 030c 	and.w	r3, r3, #12
 80051e2:	2b08      	cmp	r3, #8
 80051e4:	d05c      	beq.n	80052a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d141      	bne.n	8005272 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051ee:	4b31      	ldr	r3, [pc, #196]	@ (80052b4 <HAL_RCC_OscConfig+0x478>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051f4:	f7fd feb2 	bl	8002f5c <HAL_GetTick>
 80051f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051fc:	f7fd feae 	bl	8002f5c <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e087      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800520e:	4b27      	ldr	r3, [pc, #156]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1f0      	bne.n	80051fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	69da      	ldr	r2, [r3, #28]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005228:	019b      	lsls	r3, r3, #6
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005230:	085b      	lsrs	r3, r3, #1
 8005232:	3b01      	subs	r3, #1
 8005234:	041b      	lsls	r3, r3, #16
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800523c:	061b      	lsls	r3, r3, #24
 800523e:	491b      	ldr	r1, [pc, #108]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 8005240:	4313      	orrs	r3, r2
 8005242:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005244:	4b1b      	ldr	r3, [pc, #108]	@ (80052b4 <HAL_RCC_OscConfig+0x478>)
 8005246:	2201      	movs	r2, #1
 8005248:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800524a:	f7fd fe87 	bl	8002f5c <HAL_GetTick>
 800524e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005250:	e008      	b.n	8005264 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005252:	f7fd fe83 	bl	8002f5c <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d901      	bls.n	8005264 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e05c      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005264:	4b11      	ldr	r3, [pc, #68]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0f0      	beq.n	8005252 <HAL_RCC_OscConfig+0x416>
 8005270:	e054      	b.n	800531c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005272:	4b10      	ldr	r3, [pc, #64]	@ (80052b4 <HAL_RCC_OscConfig+0x478>)
 8005274:	2200      	movs	r2, #0
 8005276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005278:	f7fd fe70 	bl	8002f5c <HAL_GetTick>
 800527c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800527e:	e008      	b.n	8005292 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005280:	f7fd fe6c 	bl	8002f5c <HAL_GetTick>
 8005284:	4602      	mov	r2, r0
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	1ad3      	subs	r3, r2, r3
 800528a:	2b02      	cmp	r3, #2
 800528c:	d901      	bls.n	8005292 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800528e:	2303      	movs	r3, #3
 8005290:	e045      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005292:	4b06      	ldr	r3, [pc, #24]	@ (80052ac <HAL_RCC_OscConfig+0x470>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1f0      	bne.n	8005280 <HAL_RCC_OscConfig+0x444>
 800529e:	e03d      	b.n	800531c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	699b      	ldr	r3, [r3, #24]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d107      	bne.n	80052b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e038      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
 80052ac:	40023800 	.word	0x40023800
 80052b0:	40007000 	.word	0x40007000
 80052b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005328 <HAL_RCC_OscConfig+0x4ec>)
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d028      	beq.n	8005318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d121      	bne.n	8005318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052de:	429a      	cmp	r2, r3
 80052e0:	d11a      	bne.n	8005318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052e2:	68fa      	ldr	r2, [r7, #12]
 80052e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80052e8:	4013      	ands	r3, r2
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80052ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d111      	bne.n	8005318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052fe:	085b      	lsrs	r3, r3, #1
 8005300:	3b01      	subs	r3, #1
 8005302:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005304:	429a      	cmp	r2, r3
 8005306:	d107      	bne.n	8005318 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005312:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005314:	429a      	cmp	r2, r3
 8005316:	d001      	beq.n	800531c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	e000      	b.n	800531e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3718      	adds	r7, #24
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	40023800 	.word	0x40023800

0800532c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b084      	sub	sp, #16
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d101      	bne.n	8005340 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e0cc      	b.n	80054da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005340:	4b68      	ldr	r3, [pc, #416]	@ (80054e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0307 	and.w	r3, r3, #7
 8005348:	683a      	ldr	r2, [r7, #0]
 800534a:	429a      	cmp	r2, r3
 800534c:	d90c      	bls.n	8005368 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800534e:	4b65      	ldr	r3, [pc, #404]	@ (80054e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005356:	4b63      	ldr	r3, [pc, #396]	@ (80054e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0307 	and.w	r3, r3, #7
 800535e:	683a      	ldr	r2, [r7, #0]
 8005360:	429a      	cmp	r2, r3
 8005362:	d001      	beq.n	8005368 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e0b8      	b.n	80054da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d020      	beq.n	80053b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b00      	cmp	r3, #0
 800537e:	d005      	beq.n	800538c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005380:	4b59      	ldr	r3, [pc, #356]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	4a58      	ldr	r2, [pc, #352]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005386:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800538a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0308 	and.w	r3, r3, #8
 8005394:	2b00      	cmp	r3, #0
 8005396:	d005      	beq.n	80053a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005398:	4b53      	ldr	r3, [pc, #332]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	4a52      	ldr	r2, [pc, #328]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 800539e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80053a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053a4:	4b50      	ldr	r3, [pc, #320]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	494d      	ldr	r1, [pc, #308]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 80053b2:	4313      	orrs	r3, r2
 80053b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d044      	beq.n	800544c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d107      	bne.n	80053da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053ca:	4b47      	ldr	r3, [pc, #284]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d119      	bne.n	800540a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e07f      	b.n	80054da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d003      	beq.n	80053ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053e6:	2b03      	cmp	r3, #3
 80053e8:	d107      	bne.n	80053fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ea:	4b3f      	ldr	r3, [pc, #252]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d109      	bne.n	800540a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e06f      	b.n	80054da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053fa:	4b3b      	ldr	r3, [pc, #236]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e067      	b.n	80054da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800540a:	4b37      	ldr	r3, [pc, #220]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f023 0203 	bic.w	r2, r3, #3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	4934      	ldr	r1, [pc, #208]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005418:	4313      	orrs	r3, r2
 800541a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800541c:	f7fd fd9e 	bl	8002f5c <HAL_GetTick>
 8005420:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005422:	e00a      	b.n	800543a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005424:	f7fd fd9a 	bl	8002f5c <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005432:	4293      	cmp	r3, r2
 8005434:	d901      	bls.n	800543a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e04f      	b.n	80054da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800543a:	4b2b      	ldr	r3, [pc, #172]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 020c 	and.w	r2, r3, #12
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	429a      	cmp	r2, r3
 800544a:	d1eb      	bne.n	8005424 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800544c:	4b25      	ldr	r3, [pc, #148]	@ (80054e4 <HAL_RCC_ClockConfig+0x1b8>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0307 	and.w	r3, r3, #7
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	429a      	cmp	r2, r3
 8005458:	d20c      	bcs.n	8005474 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800545a:	4b22      	ldr	r3, [pc, #136]	@ (80054e4 <HAL_RCC_ClockConfig+0x1b8>)
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	b2d2      	uxtb	r2, r2
 8005460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005462:	4b20      	ldr	r3, [pc, #128]	@ (80054e4 <HAL_RCC_ClockConfig+0x1b8>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0307 	and.w	r3, r3, #7
 800546a:	683a      	ldr	r2, [r7, #0]
 800546c:	429a      	cmp	r2, r3
 800546e:	d001      	beq.n	8005474 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e032      	b.n	80054da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0304 	and.w	r3, r3, #4
 800547c:	2b00      	cmp	r3, #0
 800547e:	d008      	beq.n	8005492 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005480:	4b19      	ldr	r3, [pc, #100]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	4916      	ldr	r1, [pc, #88]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 800548e:	4313      	orrs	r3, r2
 8005490:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0308 	and.w	r3, r3, #8
 800549a:	2b00      	cmp	r3, #0
 800549c:	d009      	beq.n	80054b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800549e:	4b12      	ldr	r3, [pc, #72]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	490e      	ldr	r1, [pc, #56]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054b2:	f000 f821 	bl	80054f8 <HAL_RCC_GetSysClockFreq>
 80054b6:	4602      	mov	r2, r0
 80054b8:	4b0b      	ldr	r3, [pc, #44]	@ (80054e8 <HAL_RCC_ClockConfig+0x1bc>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	091b      	lsrs	r3, r3, #4
 80054be:	f003 030f 	and.w	r3, r3, #15
 80054c2:	490a      	ldr	r1, [pc, #40]	@ (80054ec <HAL_RCC_ClockConfig+0x1c0>)
 80054c4:	5ccb      	ldrb	r3, [r1, r3]
 80054c6:	fa22 f303 	lsr.w	r3, r2, r3
 80054ca:	4a09      	ldr	r2, [pc, #36]	@ (80054f0 <HAL_RCC_ClockConfig+0x1c4>)
 80054cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80054ce:	4b09      	ldr	r3, [pc, #36]	@ (80054f4 <HAL_RCC_ClockConfig+0x1c8>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fd fb36 	bl	8002b44 <HAL_InitTick>

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	40023c00 	.word	0x40023c00
 80054e8:	40023800 	.word	0x40023800
 80054ec:	0800d264 	.word	0x0800d264
 80054f0:	20000084 	.word	0x20000084
 80054f4:	20000088 	.word	0x20000088

080054f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054fc:	b090      	sub	sp, #64	@ 0x40
 80054fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005500:	2300      	movs	r3, #0
 8005502:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005504:	2300      	movs	r3, #0
 8005506:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005508:	2300      	movs	r3, #0
 800550a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005510:	4b59      	ldr	r3, [pc, #356]	@ (8005678 <HAL_RCC_GetSysClockFreq+0x180>)
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f003 030c 	and.w	r3, r3, #12
 8005518:	2b08      	cmp	r3, #8
 800551a:	d00d      	beq.n	8005538 <HAL_RCC_GetSysClockFreq+0x40>
 800551c:	2b08      	cmp	r3, #8
 800551e:	f200 80a1 	bhi.w	8005664 <HAL_RCC_GetSysClockFreq+0x16c>
 8005522:	2b00      	cmp	r3, #0
 8005524:	d002      	beq.n	800552c <HAL_RCC_GetSysClockFreq+0x34>
 8005526:	2b04      	cmp	r3, #4
 8005528:	d003      	beq.n	8005532 <HAL_RCC_GetSysClockFreq+0x3a>
 800552a:	e09b      	b.n	8005664 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800552c:	4b53      	ldr	r3, [pc, #332]	@ (800567c <HAL_RCC_GetSysClockFreq+0x184>)
 800552e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005530:	e09b      	b.n	800566a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005532:	4b53      	ldr	r3, [pc, #332]	@ (8005680 <HAL_RCC_GetSysClockFreq+0x188>)
 8005534:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005536:	e098      	b.n	800566a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005538:	4b4f      	ldr	r3, [pc, #316]	@ (8005678 <HAL_RCC_GetSysClockFreq+0x180>)
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005540:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005542:	4b4d      	ldr	r3, [pc, #308]	@ (8005678 <HAL_RCC_GetSysClockFreq+0x180>)
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d028      	beq.n	80055a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800554e:	4b4a      	ldr	r3, [pc, #296]	@ (8005678 <HAL_RCC_GetSysClockFreq+0x180>)
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	099b      	lsrs	r3, r3, #6
 8005554:	2200      	movs	r2, #0
 8005556:	623b      	str	r3, [r7, #32]
 8005558:	627a      	str	r2, [r7, #36]	@ 0x24
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005560:	2100      	movs	r1, #0
 8005562:	4b47      	ldr	r3, [pc, #284]	@ (8005680 <HAL_RCC_GetSysClockFreq+0x188>)
 8005564:	fb03 f201 	mul.w	r2, r3, r1
 8005568:	2300      	movs	r3, #0
 800556a:	fb00 f303 	mul.w	r3, r0, r3
 800556e:	4413      	add	r3, r2
 8005570:	4a43      	ldr	r2, [pc, #268]	@ (8005680 <HAL_RCC_GetSysClockFreq+0x188>)
 8005572:	fba0 1202 	umull	r1, r2, r0, r2
 8005576:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005578:	460a      	mov	r2, r1
 800557a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800557c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800557e:	4413      	add	r3, r2
 8005580:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005584:	2200      	movs	r2, #0
 8005586:	61bb      	str	r3, [r7, #24]
 8005588:	61fa      	str	r2, [r7, #28]
 800558a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800558e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005592:	f7fb fb81 	bl	8000c98 <__aeabi_uldivmod>
 8005596:	4602      	mov	r2, r0
 8005598:	460b      	mov	r3, r1
 800559a:	4613      	mov	r3, r2
 800559c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800559e:	e053      	b.n	8005648 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055a0:	4b35      	ldr	r3, [pc, #212]	@ (8005678 <HAL_RCC_GetSysClockFreq+0x180>)
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	099b      	lsrs	r3, r3, #6
 80055a6:	2200      	movs	r2, #0
 80055a8:	613b      	str	r3, [r7, #16]
 80055aa:	617a      	str	r2, [r7, #20]
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80055b2:	f04f 0b00 	mov.w	fp, #0
 80055b6:	4652      	mov	r2, sl
 80055b8:	465b      	mov	r3, fp
 80055ba:	f04f 0000 	mov.w	r0, #0
 80055be:	f04f 0100 	mov.w	r1, #0
 80055c2:	0159      	lsls	r1, r3, #5
 80055c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055c8:	0150      	lsls	r0, r2, #5
 80055ca:	4602      	mov	r2, r0
 80055cc:	460b      	mov	r3, r1
 80055ce:	ebb2 080a 	subs.w	r8, r2, sl
 80055d2:	eb63 090b 	sbc.w	r9, r3, fp
 80055d6:	f04f 0200 	mov.w	r2, #0
 80055da:	f04f 0300 	mov.w	r3, #0
 80055de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80055e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80055e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80055ea:	ebb2 0408 	subs.w	r4, r2, r8
 80055ee:	eb63 0509 	sbc.w	r5, r3, r9
 80055f2:	f04f 0200 	mov.w	r2, #0
 80055f6:	f04f 0300 	mov.w	r3, #0
 80055fa:	00eb      	lsls	r3, r5, #3
 80055fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005600:	00e2      	lsls	r2, r4, #3
 8005602:	4614      	mov	r4, r2
 8005604:	461d      	mov	r5, r3
 8005606:	eb14 030a 	adds.w	r3, r4, sl
 800560a:	603b      	str	r3, [r7, #0]
 800560c:	eb45 030b 	adc.w	r3, r5, fp
 8005610:	607b      	str	r3, [r7, #4]
 8005612:	f04f 0200 	mov.w	r2, #0
 8005616:	f04f 0300 	mov.w	r3, #0
 800561a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800561e:	4629      	mov	r1, r5
 8005620:	028b      	lsls	r3, r1, #10
 8005622:	4621      	mov	r1, r4
 8005624:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005628:	4621      	mov	r1, r4
 800562a:	028a      	lsls	r2, r1, #10
 800562c:	4610      	mov	r0, r2
 800562e:	4619      	mov	r1, r3
 8005630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005632:	2200      	movs	r2, #0
 8005634:	60bb      	str	r3, [r7, #8]
 8005636:	60fa      	str	r2, [r7, #12]
 8005638:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800563c:	f7fb fb2c 	bl	8000c98 <__aeabi_uldivmod>
 8005640:	4602      	mov	r2, r0
 8005642:	460b      	mov	r3, r1
 8005644:	4613      	mov	r3, r2
 8005646:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005648:	4b0b      	ldr	r3, [pc, #44]	@ (8005678 <HAL_RCC_GetSysClockFreq+0x180>)
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	0c1b      	lsrs	r3, r3, #16
 800564e:	f003 0303 	and.w	r3, r3, #3
 8005652:	3301      	adds	r3, #1
 8005654:	005b      	lsls	r3, r3, #1
 8005656:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005658:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800565a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005660:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005662:	e002      	b.n	800566a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005664:	4b05      	ldr	r3, [pc, #20]	@ (800567c <HAL_RCC_GetSysClockFreq+0x184>)
 8005666:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005668:	bf00      	nop
    }
  }
  return sysclockfreq;
 800566a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800566c:	4618      	mov	r0, r3
 800566e:	3740      	adds	r7, #64	@ 0x40
 8005670:	46bd      	mov	sp, r7
 8005672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005676:	bf00      	nop
 8005678:	40023800 	.word	0x40023800
 800567c:	00f42400 	.word	0x00f42400
 8005680:	017d7840 	.word	0x017d7840

08005684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005688:	4b03      	ldr	r3, [pc, #12]	@ (8005698 <HAL_RCC_GetHCLKFreq+0x14>)
 800568a:	681b      	ldr	r3, [r3, #0]
}
 800568c:	4618      	mov	r0, r3
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	20000084 	.word	0x20000084

0800569c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056a0:	f7ff fff0 	bl	8005684 <HAL_RCC_GetHCLKFreq>
 80056a4:	4602      	mov	r2, r0
 80056a6:	4b05      	ldr	r3, [pc, #20]	@ (80056bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	0a9b      	lsrs	r3, r3, #10
 80056ac:	f003 0307 	and.w	r3, r3, #7
 80056b0:	4903      	ldr	r1, [pc, #12]	@ (80056c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056b2:	5ccb      	ldrb	r3, [r1, r3]
 80056b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	40023800 	.word	0x40023800
 80056c0:	0800d274 	.word	0x0800d274

080056c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80056c8:	f7ff ffdc 	bl	8005684 <HAL_RCC_GetHCLKFreq>
 80056cc:	4602      	mov	r2, r0
 80056ce:	4b05      	ldr	r3, [pc, #20]	@ (80056e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	0b5b      	lsrs	r3, r3, #13
 80056d4:	f003 0307 	and.w	r3, r3, #7
 80056d8:	4903      	ldr	r1, [pc, #12]	@ (80056e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056da:	5ccb      	ldrb	r3, [r1, r3]
 80056dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	40023800 	.word	0x40023800
 80056e8:	0800d274 	.word	0x0800d274

080056ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	220f      	movs	r2, #15
 80056fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80056fc:	4b12      	ldr	r3, [pc, #72]	@ (8005748 <HAL_RCC_GetClockConfig+0x5c>)
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f003 0203 	and.w	r2, r3, #3
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005708:	4b0f      	ldr	r3, [pc, #60]	@ (8005748 <HAL_RCC_GetClockConfig+0x5c>)
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005714:	4b0c      	ldr	r3, [pc, #48]	@ (8005748 <HAL_RCC_GetClockConfig+0x5c>)
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005720:	4b09      	ldr	r3, [pc, #36]	@ (8005748 <HAL_RCC_GetClockConfig+0x5c>)
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	08db      	lsrs	r3, r3, #3
 8005726:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800572e:	4b07      	ldr	r3, [pc, #28]	@ (800574c <HAL_RCC_GetClockConfig+0x60>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0207 	and.w	r2, r3, #7
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	601a      	str	r2, [r3, #0]
}
 800573a:	bf00      	nop
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	40023800 	.word	0x40023800
 800574c:	40023c00 	.word	0x40023c00

08005750 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e041      	b.n	80057e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d106      	bne.n	800577c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 f839 	bl	80057ee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2202      	movs	r2, #2
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	3304      	adds	r3, #4
 800578c:	4619      	mov	r1, r3
 800578e:	4610      	mov	r0, r2
 8005790:	f000 fb74 	bl	8005e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}

080057ee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b083      	sub	sp, #12
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80057f6:	bf00      	nop
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
	...

08005804 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b01      	cmp	r3, #1
 8005816:	d001      	beq.n	800581c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e044      	b.n	80058a6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2202      	movs	r2, #2
 8005820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68da      	ldr	r2, [r3, #12]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0201 	orr.w	r2, r2, #1
 8005832:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a1e      	ldr	r2, [pc, #120]	@ (80058b4 <HAL_TIM_Base_Start_IT+0xb0>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d018      	beq.n	8005870 <HAL_TIM_Base_Start_IT+0x6c>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005846:	d013      	beq.n	8005870 <HAL_TIM_Base_Start_IT+0x6c>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a1a      	ldr	r2, [pc, #104]	@ (80058b8 <HAL_TIM_Base_Start_IT+0xb4>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d00e      	beq.n	8005870 <HAL_TIM_Base_Start_IT+0x6c>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a19      	ldr	r2, [pc, #100]	@ (80058bc <HAL_TIM_Base_Start_IT+0xb8>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d009      	beq.n	8005870 <HAL_TIM_Base_Start_IT+0x6c>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a17      	ldr	r2, [pc, #92]	@ (80058c0 <HAL_TIM_Base_Start_IT+0xbc>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d004      	beq.n	8005870 <HAL_TIM_Base_Start_IT+0x6c>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a16      	ldr	r2, [pc, #88]	@ (80058c4 <HAL_TIM_Base_Start_IT+0xc0>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d111      	bne.n	8005894 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	f003 0307 	and.w	r3, r3, #7
 800587a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2b06      	cmp	r3, #6
 8005880:	d010      	beq.n	80058a4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f042 0201 	orr.w	r2, r2, #1
 8005890:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005892:	e007      	b.n	80058a4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f042 0201 	orr.w	r2, r2, #1
 80058a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop
 80058b4:	40010000 	.word	0x40010000
 80058b8:	40000400 	.word	0x40000400
 80058bc:	40000800 	.word	0x40000800
 80058c0:	40000c00 	.word	0x40000c00
 80058c4:	40014000 	.word	0x40014000

080058c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d101      	bne.n	80058da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e041      	b.n	800595e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d106      	bne.n	80058f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7fc ffbe 	bl	8002870 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3304      	adds	r3, #4
 8005904:	4619      	mov	r1, r3
 8005906:	4610      	mov	r0, r2
 8005908:	f000 fab8 	bl	8005e7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
	...

08005968 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d109      	bne.n	800598c <HAL_TIM_PWM_Start+0x24>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800597e:	b2db      	uxtb	r3, r3
 8005980:	2b01      	cmp	r3, #1
 8005982:	bf14      	ite	ne
 8005984:	2301      	movne	r3, #1
 8005986:	2300      	moveq	r3, #0
 8005988:	b2db      	uxtb	r3, r3
 800598a:	e022      	b.n	80059d2 <HAL_TIM_PWM_Start+0x6a>
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	2b04      	cmp	r3, #4
 8005990:	d109      	bne.n	80059a6 <HAL_TIM_PWM_Start+0x3e>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b01      	cmp	r3, #1
 800599c:	bf14      	ite	ne
 800599e:	2301      	movne	r3, #1
 80059a0:	2300      	moveq	r3, #0
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	e015      	b.n	80059d2 <HAL_TIM_PWM_Start+0x6a>
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	d109      	bne.n	80059c0 <HAL_TIM_PWM_Start+0x58>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	bf14      	ite	ne
 80059b8:	2301      	movne	r3, #1
 80059ba:	2300      	moveq	r3, #0
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	e008      	b.n	80059d2 <HAL_TIM_PWM_Start+0x6a>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	bf14      	ite	ne
 80059cc:	2301      	movne	r3, #1
 80059ce:	2300      	moveq	r3, #0
 80059d0:	b2db      	uxtb	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e068      	b.n	8005aac <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d104      	bne.n	80059ea <HAL_TIM_PWM_Start+0x82>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80059e8:	e013      	b.n	8005a12 <HAL_TIM_PWM_Start+0xaa>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b04      	cmp	r3, #4
 80059ee:	d104      	bne.n	80059fa <HAL_TIM_PWM_Start+0x92>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80059f8:	e00b      	b.n	8005a12 <HAL_TIM_PWM_Start+0xaa>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	d104      	bne.n	8005a0a <HAL_TIM_PWM_Start+0xa2>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a08:	e003      	b.n	8005a12 <HAL_TIM_PWM_Start+0xaa>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2201      	movs	r2, #1
 8005a18:	6839      	ldr	r1, [r7, #0]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 fc46 	bl	80062ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a23      	ldr	r2, [pc, #140]	@ (8005ab4 <HAL_TIM_PWM_Start+0x14c>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d107      	bne.n	8005a3a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a1d      	ldr	r2, [pc, #116]	@ (8005ab4 <HAL_TIM_PWM_Start+0x14c>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d018      	beq.n	8005a76 <HAL_TIM_PWM_Start+0x10e>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a4c:	d013      	beq.n	8005a76 <HAL_TIM_PWM_Start+0x10e>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a19      	ldr	r2, [pc, #100]	@ (8005ab8 <HAL_TIM_PWM_Start+0x150>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d00e      	beq.n	8005a76 <HAL_TIM_PWM_Start+0x10e>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a17      	ldr	r2, [pc, #92]	@ (8005abc <HAL_TIM_PWM_Start+0x154>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d009      	beq.n	8005a76 <HAL_TIM_PWM_Start+0x10e>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a16      	ldr	r2, [pc, #88]	@ (8005ac0 <HAL_TIM_PWM_Start+0x158>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d004      	beq.n	8005a76 <HAL_TIM_PWM_Start+0x10e>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a14      	ldr	r2, [pc, #80]	@ (8005ac4 <HAL_TIM_PWM_Start+0x15c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d111      	bne.n	8005a9a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f003 0307 	and.w	r3, r3, #7
 8005a80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2b06      	cmp	r3, #6
 8005a86:	d010      	beq.n	8005aaa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f042 0201 	orr.w	r2, r2, #1
 8005a96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a98:	e007      	b.n	8005aaa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f042 0201 	orr.w	r2, r2, #1
 8005aa8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3710      	adds	r7, #16
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	40010000 	.word	0x40010000
 8005ab8:	40000400 	.word	0x40000400
 8005abc:	40000800 	.word	0x40000800
 8005ac0:	40000c00 	.word	0x40000c00
 8005ac4:	40014000 	.word	0x40014000

08005ac8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	691b      	ldr	r3, [r3, #16]
 8005ade:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d020      	beq.n	8005b2c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d01b      	beq.n	8005b2c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f06f 0202 	mvn.w	r2, #2
 8005afc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	f003 0303 	and.w	r3, r3, #3
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d003      	beq.n	8005b1a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f994 	bl	8005e40 <HAL_TIM_IC_CaptureCallback>
 8005b18:	e005      	b.n	8005b26 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 f986 	bl	8005e2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f000 f997 	bl	8005e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f003 0304 	and.w	r3, r3, #4
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d020      	beq.n	8005b78 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f003 0304 	and.w	r3, r3, #4
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d01b      	beq.n	8005b78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f06f 0204 	mvn.w	r2, #4
 8005b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f96e 	bl	8005e40 <HAL_TIM_IC_CaptureCallback>
 8005b64:	e005      	b.n	8005b72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f960 	bl	8005e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f971 	bl	8005e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	f003 0308 	and.w	r3, r3, #8
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d020      	beq.n	8005bc4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f003 0308 	and.w	r3, r3, #8
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d01b      	beq.n	8005bc4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f06f 0208 	mvn.w	r2, #8
 8005b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2204      	movs	r2, #4
 8005b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	f003 0303 	and.w	r3, r3, #3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f948 	bl	8005e40 <HAL_TIM_IC_CaptureCallback>
 8005bb0:	e005      	b.n	8005bbe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f93a 	bl	8005e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f94b 	bl	8005e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	f003 0310 	and.w	r3, r3, #16
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d020      	beq.n	8005c10 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f003 0310 	and.w	r3, r3, #16
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d01b      	beq.n	8005c10 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f06f 0210 	mvn.w	r2, #16
 8005be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2208      	movs	r2, #8
 8005be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d003      	beq.n	8005bfe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f922 	bl	8005e40 <HAL_TIM_IC_CaptureCallback>
 8005bfc:	e005      	b.n	8005c0a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f914 	bl	8005e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	f000 f925 	bl	8005e54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00c      	beq.n	8005c34 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f003 0301 	and.w	r3, r3, #1
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d007      	beq.n	8005c34 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f06f 0201 	mvn.w	r2, #1
 8005c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f7fc fc66 	bl	8002500 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00c      	beq.n	8005c58 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d007      	beq.n	8005c58 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fbc8 	bl	80063e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00c      	beq.n	8005c7c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d007      	beq.n	8005c7c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f8f6 	bl	8005e68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	f003 0320 	and.w	r3, r3, #32
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00c      	beq.n	8005ca0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f003 0320 	and.w	r3, r3, #32
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d007      	beq.n	8005ca0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f06f 0220 	mvn.w	r2, #32
 8005c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 fb9a 	bl	80063d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ca0:	bf00      	nop
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b086      	sub	sp, #24
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d101      	bne.n	8005cc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005cc2:	2302      	movs	r3, #2
 8005cc4:	e0ae      	b.n	8005e24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b0c      	cmp	r3, #12
 8005cd2:	f200 809f 	bhi.w	8005e14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8005cdc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cdc:	08005d11 	.word	0x08005d11
 8005ce0:	08005e15 	.word	0x08005e15
 8005ce4:	08005e15 	.word	0x08005e15
 8005ce8:	08005e15 	.word	0x08005e15
 8005cec:	08005d51 	.word	0x08005d51
 8005cf0:	08005e15 	.word	0x08005e15
 8005cf4:	08005e15 	.word	0x08005e15
 8005cf8:	08005e15 	.word	0x08005e15
 8005cfc:	08005d93 	.word	0x08005d93
 8005d00:	08005e15 	.word	0x08005e15
 8005d04:	08005e15 	.word	0x08005e15
 8005d08:	08005e15 	.word	0x08005e15
 8005d0c:	08005dd3 	.word	0x08005dd3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68b9      	ldr	r1, [r7, #8]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 f93c 	bl	8005f94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699a      	ldr	r2, [r3, #24]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 0208 	orr.w	r2, r2, #8
 8005d2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699a      	ldr	r2, [r3, #24]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 0204 	bic.w	r2, r2, #4
 8005d3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6999      	ldr	r1, [r3, #24]
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	691a      	ldr	r2, [r3, #16]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	619a      	str	r2, [r3, #24]
      break;
 8005d4e:	e064      	b.n	8005e1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68b9      	ldr	r1, [r7, #8]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 f982 	bl	8006060 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	699a      	ldr	r2, [r3, #24]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699a      	ldr	r2, [r3, #24]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6999      	ldr	r1, [r3, #24]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	021a      	lsls	r2, r3, #8
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	430a      	orrs	r2, r1
 8005d8e:	619a      	str	r2, [r3, #24]
      break;
 8005d90:	e043      	b.n	8005e1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68b9      	ldr	r1, [r7, #8]
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f000 f9cd 	bl	8006138 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	69da      	ldr	r2, [r3, #28]
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f042 0208 	orr.w	r2, r2, #8
 8005dac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69da      	ldr	r2, [r3, #28]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0204 	bic.w	r2, r2, #4
 8005dbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69d9      	ldr	r1, [r3, #28]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	691a      	ldr	r2, [r3, #16]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	61da      	str	r2, [r3, #28]
      break;
 8005dd0:	e023      	b.n	8005e1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68b9      	ldr	r1, [r7, #8]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f000 fa17 	bl	800620c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	69da      	ldr	r2, [r3, #28]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	69da      	ldr	r2, [r3, #28]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69d9      	ldr	r1, [r3, #28]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	021a      	lsls	r2, r3, #8
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	61da      	str	r2, [r3, #28]
      break;
 8005e12:	e002      	b.n	8005e1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	75fb      	strb	r3, [r7, #23]
      break;
 8005e18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e22:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3718      	adds	r7, #24
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a3a      	ldr	r2, [pc, #232]	@ (8005f78 <TIM_Base_SetConfig+0xfc>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d00f      	beq.n	8005eb4 <TIM_Base_SetConfig+0x38>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e9a:	d00b      	beq.n	8005eb4 <TIM_Base_SetConfig+0x38>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a37      	ldr	r2, [pc, #220]	@ (8005f7c <TIM_Base_SetConfig+0x100>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d007      	beq.n	8005eb4 <TIM_Base_SetConfig+0x38>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	4a36      	ldr	r2, [pc, #216]	@ (8005f80 <TIM_Base_SetConfig+0x104>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d003      	beq.n	8005eb4 <TIM_Base_SetConfig+0x38>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a35      	ldr	r2, [pc, #212]	@ (8005f84 <TIM_Base_SetConfig+0x108>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d108      	bne.n	8005ec6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a2b      	ldr	r2, [pc, #172]	@ (8005f78 <TIM_Base_SetConfig+0xfc>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d01b      	beq.n	8005f06 <TIM_Base_SetConfig+0x8a>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ed4:	d017      	beq.n	8005f06 <TIM_Base_SetConfig+0x8a>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a28      	ldr	r2, [pc, #160]	@ (8005f7c <TIM_Base_SetConfig+0x100>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d013      	beq.n	8005f06 <TIM_Base_SetConfig+0x8a>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a27      	ldr	r2, [pc, #156]	@ (8005f80 <TIM_Base_SetConfig+0x104>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d00f      	beq.n	8005f06 <TIM_Base_SetConfig+0x8a>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a26      	ldr	r2, [pc, #152]	@ (8005f84 <TIM_Base_SetConfig+0x108>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d00b      	beq.n	8005f06 <TIM_Base_SetConfig+0x8a>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a25      	ldr	r2, [pc, #148]	@ (8005f88 <TIM_Base_SetConfig+0x10c>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d007      	beq.n	8005f06 <TIM_Base_SetConfig+0x8a>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a24      	ldr	r2, [pc, #144]	@ (8005f8c <TIM_Base_SetConfig+0x110>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d003      	beq.n	8005f06 <TIM_Base_SetConfig+0x8a>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a23      	ldr	r2, [pc, #140]	@ (8005f90 <TIM_Base_SetConfig+0x114>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d108      	bne.n	8005f18 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	68fa      	ldr	r2, [r7, #12]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	689a      	ldr	r2, [r3, #8]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a0e      	ldr	r2, [pc, #56]	@ (8005f78 <TIM_Base_SetConfig+0xfc>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d103      	bne.n	8005f4c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	691a      	ldr	r2, [r3, #16]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d105      	bne.n	8005f6a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	691b      	ldr	r3, [r3, #16]
 8005f62:	f023 0201 	bic.w	r2, r3, #1
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	611a      	str	r2, [r3, #16]
  }
}
 8005f6a:	bf00      	nop
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
 8005f76:	bf00      	nop
 8005f78:	40010000 	.word	0x40010000
 8005f7c:	40000400 	.word	0x40000400
 8005f80:	40000800 	.word	0x40000800
 8005f84:	40000c00 	.word	0x40000c00
 8005f88:	40014000 	.word	0x40014000
 8005f8c:	40014400 	.word	0x40014400
 8005f90:	40014800 	.word	0x40014800

08005f94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	f023 0201 	bic.w	r2, r3, #1
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	685b      	ldr	r3, [r3, #4]
 8005fb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	699b      	ldr	r3, [r3, #24]
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f023 0303 	bic.w	r3, r3, #3
 8005fca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f023 0302 	bic.w	r3, r3, #2
 8005fdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	4a1c      	ldr	r2, [pc, #112]	@ (800605c <TIM_OC1_SetConfig+0xc8>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d10c      	bne.n	800600a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f023 0308 	bic.w	r3, r3, #8
 8005ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f023 0304 	bic.w	r3, r3, #4
 8006008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a13      	ldr	r2, [pc, #76]	@ (800605c <TIM_OC1_SetConfig+0xc8>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d111      	bne.n	8006036 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	4313      	orrs	r3, r2
 800602a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	4313      	orrs	r3, r2
 8006034:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	621a      	str	r2, [r3, #32]
}
 8006050:	bf00      	nop
 8006052:	371c      	adds	r7, #28
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr
 800605c:	40010000 	.word	0x40010000

08006060 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006060:	b480      	push	{r7}
 8006062:	b087      	sub	sp, #28
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	f023 0210 	bic.w	r2, r3, #16
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800608e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006096:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	021b      	lsls	r3, r3, #8
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	f023 0320 	bic.w	r3, r3, #32
 80060aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	011b      	lsls	r3, r3, #4
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a1e      	ldr	r2, [pc, #120]	@ (8006134 <TIM_OC2_SetConfig+0xd4>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d10d      	bne.n	80060dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	011b      	lsls	r3, r3, #4
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a15      	ldr	r2, [pc, #84]	@ (8006134 <TIM_OC2_SetConfig+0xd4>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d113      	bne.n	800610c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80060ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80060f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	4313      	orrs	r3, r2
 800610a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	621a      	str	r2, [r3, #32]
}
 8006126:	bf00      	nop
 8006128:	371c      	adds	r7, #28
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	40010000 	.word	0x40010000

08006138 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	69db      	ldr	r3, [r3, #28]
 800615e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f023 0303 	bic.w	r3, r3, #3
 800616e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	4313      	orrs	r3, r2
 8006178:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006180:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	021b      	lsls	r3, r3, #8
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	4313      	orrs	r3, r2
 800618c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a1d      	ldr	r2, [pc, #116]	@ (8006208 <TIM_OC3_SetConfig+0xd0>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d10d      	bne.n	80061b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800619c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	021b      	lsls	r3, r3, #8
 80061a4:	697a      	ldr	r2, [r7, #20]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	4a14      	ldr	r2, [pc, #80]	@ (8006208 <TIM_OC3_SetConfig+0xd0>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d113      	bne.n	80061e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80061c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	011b      	lsls	r3, r3, #4
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	011b      	lsls	r3, r3, #4
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	4313      	orrs	r3, r2
 80061e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	693a      	ldr	r2, [r7, #16]
 80061e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	685a      	ldr	r2, [r3, #4]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	621a      	str	r2, [r3, #32]
}
 80061fc:	bf00      	nop
 80061fe:	371c      	adds	r7, #28
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	40010000 	.word	0x40010000

0800620c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800623a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006242:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	021b      	lsls	r3, r3, #8
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	4313      	orrs	r3, r2
 800624e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006256:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	031b      	lsls	r3, r3, #12
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	4313      	orrs	r3, r2
 8006262:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a10      	ldr	r2, [pc, #64]	@ (80062a8 <TIM_OC4_SetConfig+0x9c>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d109      	bne.n	8006280 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006272:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	019b      	lsls	r3, r3, #6
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	4313      	orrs	r3, r2
 800627e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	621a      	str	r2, [r3, #32]
}
 800629a:	bf00      	nop
 800629c:	371c      	adds	r7, #28
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	40010000 	.word	0x40010000

080062ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f003 031f 	and.w	r3, r3, #31
 80062be:	2201      	movs	r2, #1
 80062c0:	fa02 f303 	lsl.w	r3, r2, r3
 80062c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	6a1a      	ldr	r2, [r3, #32]
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	43db      	mvns	r3, r3
 80062ce:	401a      	ands	r2, r3
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6a1a      	ldr	r2, [r3, #32]
 80062d8:	68bb      	ldr	r3, [r7, #8]
 80062da:	f003 031f 	and.w	r3, r3, #31
 80062de:	6879      	ldr	r1, [r7, #4]
 80062e0:	fa01 f303 	lsl.w	r3, r1, r3
 80062e4:	431a      	orrs	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	621a      	str	r2, [r3, #32]
}
 80062ea:	bf00      	nop
 80062ec:	371c      	adds	r7, #28
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
	...

080062f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006308:	2b01      	cmp	r3, #1
 800630a:	d101      	bne.n	8006310 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800630c:	2302      	movs	r3, #2
 800630e:	e050      	b.n	80063b2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2202      	movs	r2, #2
 800631c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689b      	ldr	r3, [r3, #8]
 800632e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006336:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	4313      	orrs	r3, r2
 8006340:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a1c      	ldr	r2, [pc, #112]	@ (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d018      	beq.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800635c:	d013      	beq.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a18      	ldr	r2, [pc, #96]	@ (80063c4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d00e      	beq.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a16      	ldr	r2, [pc, #88]	@ (80063c8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d009      	beq.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a15      	ldr	r2, [pc, #84]	@ (80063cc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d004      	beq.n	8006386 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a13      	ldr	r2, [pc, #76]	@ (80063d0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d10c      	bne.n	80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800638c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	4313      	orrs	r3, r2
 8006396:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	40010000 	.word	0x40010000
 80063c4:	40000400 	.word	0x40000400
 80063c8:	40000800 	.word	0x40000800
 80063cc:	40000c00 	.word	0x40000c00
 80063d0:	40014000 	.word	0x40014000

080063d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063dc:	bf00      	nop
 80063de:	370c      	adds	r7, #12
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800640a:	2301      	movs	r3, #1
 800640c:	e042      	b.n	8006494 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b00      	cmp	r3, #0
 8006418:	d106      	bne.n	8006428 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f7fc fad8 	bl	80029d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2224      	movs	r2, #36	@ 0x24
 800642c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68da      	ldr	r2, [r3, #12]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800643e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 ff77 	bl	8007334 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	691a      	ldr	r2, [r3, #16]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006454:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	695a      	ldr	r2, [r3, #20]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006464:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68da      	ldr	r2, [r3, #12]
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006474:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2220      	movs	r2, #32
 8006480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2220      	movs	r2, #32
 8006488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b08c      	sub	sp, #48	@ 0x30
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	4613      	mov	r3, r2
 80064a8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b20      	cmp	r3, #32
 80064b4:	d156      	bne.n	8006564 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d002      	beq.n	80064c2 <HAL_UART_Transmit_DMA+0x26>
 80064bc:	88fb      	ldrh	r3, [r7, #6]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e04f      	b.n	8006566 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	88fa      	ldrh	r2, [r7, #6]
 80064d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	88fa      	ldrh	r2, [r7, #6]
 80064d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2200      	movs	r2, #0
 80064dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2221      	movs	r2, #33	@ 0x21
 80064e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ea:	4a21      	ldr	r2, [pc, #132]	@ (8006570 <HAL_UART_Transmit_DMA+0xd4>)
 80064ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f2:	4a20      	ldr	r2, [pc, #128]	@ (8006574 <HAL_UART_Transmit_DMA+0xd8>)
 80064f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064fa:	4a1f      	ldr	r2, [pc, #124]	@ (8006578 <HAL_UART_Transmit_DMA+0xdc>)
 80064fc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006502:	2200      	movs	r2, #0
 8006504:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8006506:	f107 0308 	add.w	r3, r7, #8
 800650a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8006510:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006512:	6819      	ldr	r1, [r3, #0]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3304      	adds	r3, #4
 800651a:	461a      	mov	r2, r3
 800651c:	88fb      	ldrh	r3, [r7, #6]
 800651e:	f7fd f94f 	bl	80037c0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800652a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	3314      	adds	r3, #20
 8006532:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	e853 3f00 	ldrex	r3, [r3]
 800653a:	617b      	str	r3, [r7, #20]
   return(result);
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006542:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	3314      	adds	r3, #20
 800654a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800654c:	627a      	str	r2, [r7, #36]	@ 0x24
 800654e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006550:	6a39      	ldr	r1, [r7, #32]
 8006552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006554:	e841 2300 	strex	r3, r2, [r1]
 8006558:	61fb      	str	r3, [r7, #28]
   return(result);
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1e5      	bne.n	800652c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8006560:	2300      	movs	r3, #0
 8006562:	e000      	b.n	8006566 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006564:	2302      	movs	r3, #2
  }
}
 8006566:	4618      	mov	r0, r3
 8006568:	3730      	adds	r7, #48	@ 0x30
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	08006bc1 	.word	0x08006bc1
 8006574:	08006c5b 	.word	0x08006c5b
 8006578:	08006ddf 	.word	0x08006ddf

0800657c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b08c      	sub	sp, #48	@ 0x30
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	4613      	mov	r3, r2
 8006588:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b20      	cmp	r3, #32
 8006594:	d14a      	bne.n	800662c <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d002      	beq.n	80065a2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800659c:	88fb      	ldrh	r3, [r7, #6]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e043      	b.n	800662e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2201      	movs	r2, #1
 80065aa:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80065b2:	88fb      	ldrh	r3, [r7, #6]
 80065b4:	461a      	mov	r2, r3
 80065b6:	68b9      	ldr	r1, [r7, #8]
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f000 fc5b 	bl	8006e74 <UART_Start_Receive_DMA>
 80065be:	4603      	mov	r3, r0
 80065c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80065c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d12c      	bne.n	8006626 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d125      	bne.n	8006620 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80065d4:	2300      	movs	r3, #0
 80065d6:	613b      	str	r3, [r7, #16]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	613b      	str	r3, [r7, #16]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	613b      	str	r3, [r7, #16]
 80065e8:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	330c      	adds	r3, #12
 80065f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	e853 3f00 	ldrex	r3, [r3]
 80065f8:	617b      	str	r3, [r7, #20]
   return(result);
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f043 0310 	orr.w	r3, r3, #16
 8006600:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	330c      	adds	r3, #12
 8006608:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800660a:	627a      	str	r2, [r7, #36]	@ 0x24
 800660c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660e:	6a39      	ldr	r1, [r7, #32]
 8006610:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	61fb      	str	r3, [r7, #28]
   return(result);
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e5      	bne.n	80065ea <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800661e:	e002      	b.n	8006626 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006626:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800662a:	e000      	b.n	800662e <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 800662c:	2302      	movs	r3, #2
  }
}
 800662e:	4618      	mov	r0, r3
 8006630:	3730      	adds	r7, #48	@ 0x30
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
	...

08006638 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b0ba      	sub	sp, #232	@ 0xe8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	695b      	ldr	r3, [r3, #20]
 800665a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800665e:	2300      	movs	r3, #0
 8006660:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006664:	2300      	movs	r3, #0
 8006666:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800666a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800666e:	f003 030f 	and.w	r3, r3, #15
 8006672:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006676:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10f      	bne.n	800669e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800667e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006682:	f003 0320 	and.w	r3, r3, #32
 8006686:	2b00      	cmp	r3, #0
 8006688:	d009      	beq.n	800669e <HAL_UART_IRQHandler+0x66>
 800668a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800668e:	f003 0320 	and.w	r3, r3, #32
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fd8d 	bl	80071b6 <UART_Receive_IT>
      return;
 800669c:	e25b      	b.n	8006b56 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800669e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f000 80de 	beq.w	8006864 <HAL_UART_IRQHandler+0x22c>
 80066a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066ac:	f003 0301 	and.w	r3, r3, #1
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d106      	bne.n	80066c2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066b8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 80d1 	beq.w	8006864 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066c6:	f003 0301 	and.w	r3, r3, #1
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00b      	beq.n	80066e6 <HAL_UART_IRQHandler+0xae>
 80066ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d005      	beq.n	80066e6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066de:	f043 0201 	orr.w	r2, r3, #1
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066ea:	f003 0304 	and.w	r3, r3, #4
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00b      	beq.n	800670a <HAL_UART_IRQHandler+0xd2>
 80066f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d005      	beq.n	800670a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006702:	f043 0202 	orr.w	r2, r3, #2
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800670a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00b      	beq.n	800672e <HAL_UART_IRQHandler+0xf6>
 8006716:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b00      	cmp	r3, #0
 8006720:	d005      	beq.n	800672e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006726:	f043 0204 	orr.w	r2, r3, #4
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800672e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006732:	f003 0308 	and.w	r3, r3, #8
 8006736:	2b00      	cmp	r3, #0
 8006738:	d011      	beq.n	800675e <HAL_UART_IRQHandler+0x126>
 800673a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800673e:	f003 0320 	and.w	r3, r3, #32
 8006742:	2b00      	cmp	r3, #0
 8006744:	d105      	bne.n	8006752 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006746:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	2b00      	cmp	r3, #0
 8006750:	d005      	beq.n	800675e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006756:	f043 0208 	orr.w	r2, r3, #8
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006762:	2b00      	cmp	r3, #0
 8006764:	f000 81f2 	beq.w	8006b4c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800676c:	f003 0320 	and.w	r3, r3, #32
 8006770:	2b00      	cmp	r3, #0
 8006772:	d008      	beq.n	8006786 <HAL_UART_IRQHandler+0x14e>
 8006774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006778:	f003 0320 	and.w	r3, r3, #32
 800677c:	2b00      	cmp	r3, #0
 800677e:	d002      	beq.n	8006786 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f000 fd18 	bl	80071b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006790:	2b40      	cmp	r3, #64	@ 0x40
 8006792:	bf0c      	ite	eq
 8006794:	2301      	moveq	r3, #1
 8006796:	2300      	movne	r3, #0
 8006798:	b2db      	uxtb	r3, r3
 800679a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067a2:	f003 0308 	and.w	r3, r3, #8
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d103      	bne.n	80067b2 <HAL_UART_IRQHandler+0x17a>
 80067aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d04f      	beq.n	8006852 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 fc20 	bl	8006ff8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c2:	2b40      	cmp	r3, #64	@ 0x40
 80067c4:	d141      	bne.n	800684a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	3314      	adds	r3, #20
 80067cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80067d4:	e853 3f00 	ldrex	r3, [r3]
 80067d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80067dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80067e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	3314      	adds	r3, #20
 80067ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80067f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80067f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80067fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006802:	e841 2300 	strex	r3, r2, [r1]
 8006806:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800680a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1d9      	bne.n	80067c6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006816:	2b00      	cmp	r3, #0
 8006818:	d013      	beq.n	8006842 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800681e:	4a7e      	ldr	r2, [pc, #504]	@ (8006a18 <HAL_UART_IRQHandler+0x3e0>)
 8006820:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006826:	4618      	mov	r0, r3
 8006828:	f7fd f892 	bl	8003950 <HAL_DMA_Abort_IT>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d016      	beq.n	8006860 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800683c:	4610      	mov	r0, r2
 800683e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006840:	e00e      	b.n	8006860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f9b2 	bl	8006bac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006848:	e00a      	b.n	8006860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f9ae 	bl	8006bac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006850:	e006      	b.n	8006860 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f9aa 	bl	8006bac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800685e:	e175      	b.n	8006b4c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006860:	bf00      	nop
    return;
 8006862:	e173      	b.n	8006b4c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006868:	2b01      	cmp	r3, #1
 800686a:	f040 814f 	bne.w	8006b0c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800686e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006872:	f003 0310 	and.w	r3, r3, #16
 8006876:	2b00      	cmp	r3, #0
 8006878:	f000 8148 	beq.w	8006b0c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800687c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006880:	f003 0310 	and.w	r3, r3, #16
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 8141 	beq.w	8006b0c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800688a:	2300      	movs	r3, #0
 800688c:	60bb      	str	r3, [r7, #8]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	60bb      	str	r3, [r7, #8]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	60bb      	str	r3, [r7, #8]
 800689e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068aa:	2b40      	cmp	r3, #64	@ 0x40
 80068ac:	f040 80b6 	bne.w	8006a1c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 8145 	beq.w	8006b50 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80068ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068ce:	429a      	cmp	r2, r3
 80068d0:	f080 813e 	bcs.w	8006b50 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068da:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068e0:	69db      	ldr	r3, [r3, #28]
 80068e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068e6:	f000 8088 	beq.w	80069fa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	330c      	adds	r3, #12
 80068f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80068f8:	e853 3f00 	ldrex	r3, [r3]
 80068fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006900:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006904:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006908:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	330c      	adds	r3, #12
 8006912:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006916:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800691a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006922:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800692e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006932:	2b00      	cmp	r3, #0
 8006934:	d1d9      	bne.n	80068ea <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3314      	adds	r3, #20
 800693c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800693e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006940:	e853 3f00 	ldrex	r3, [r3]
 8006944:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006946:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006948:	f023 0301 	bic.w	r3, r3, #1
 800694c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3314      	adds	r3, #20
 8006956:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800695a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800695e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006960:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006962:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006966:	e841 2300 	strex	r3, r2, [r1]
 800696a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800696c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1e1      	bne.n	8006936 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3314      	adds	r3, #20
 8006978:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800697c:	e853 3f00 	ldrex	r3, [r3]
 8006980:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006982:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006984:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006988:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	3314      	adds	r3, #20
 8006992:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006996:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006998:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800699c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800699e:	e841 2300 	strex	r3, r2, [r1]
 80069a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80069a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1e3      	bne.n	8006972 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2220      	movs	r2, #32
 80069ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	330c      	adds	r3, #12
 80069be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069c2:	e853 3f00 	ldrex	r3, [r3]
 80069c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80069c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069ca:	f023 0310 	bic.w	r3, r3, #16
 80069ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	330c      	adds	r3, #12
 80069d8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80069dc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80069de:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80069e2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069e4:	e841 2300 	strex	r3, r2, [r1]
 80069e8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80069ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1e3      	bne.n	80069b8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7fc ff3b 	bl	8003870 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2202      	movs	r2, #2
 80069fe:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	1ad3      	subs	r3, r2, r3
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	4619      	mov	r1, r3
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f7fb fdcd 	bl	80025b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a16:	e09b      	b.n	8006b50 <HAL_UART_IRQHandler+0x518>
 8006a18:	080070bf 	.word	0x080070bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f000 808e 	beq.w	8006b54 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006a38:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 8089 	beq.w	8006b54 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	330c      	adds	r3, #12
 8006a48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a4c:	e853 3f00 	ldrex	r3, [r3]
 8006a50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a54:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a58:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	330c      	adds	r3, #12
 8006a62:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006a66:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a6e:	e841 2300 	strex	r3, r2, [r1]
 8006a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1e3      	bne.n	8006a42 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	3314      	adds	r3, #20
 8006a80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a84:	e853 3f00 	ldrex	r3, [r3]
 8006a88:	623b      	str	r3, [r7, #32]
   return(result);
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	f023 0301 	bic.w	r3, r3, #1
 8006a90:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	3314      	adds	r3, #20
 8006a9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006a9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006aa4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006aa6:	e841 2300 	strex	r3, r2, [r1]
 8006aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d1e3      	bne.n	8006a7a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	330c      	adds	r3, #12
 8006ac6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	e853 3f00 	ldrex	r3, [r3]
 8006ace:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f023 0310 	bic.w	r3, r3, #16
 8006ad6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	330c      	adds	r3, #12
 8006ae0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006ae4:	61fa      	str	r2, [r7, #28]
 8006ae6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae8:	69b9      	ldr	r1, [r7, #24]
 8006aea:	69fa      	ldr	r2, [r7, #28]
 8006aec:	e841 2300 	strex	r3, r2, [r1]
 8006af0:	617b      	str	r3, [r7, #20]
   return(result);
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1e3      	bne.n	8006ac0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2202      	movs	r2, #2
 8006afc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006afe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b02:	4619      	mov	r1, r3
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f7fb fd53 	bl	80025b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b0a:	e023      	b.n	8006b54 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d009      	beq.n	8006b2c <HAL_UART_IRQHandler+0x4f4>
 8006b18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d003      	beq.n	8006b2c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 fade 	bl	80070e6 <UART_Transmit_IT>
    return;
 8006b2a:	e014      	b.n	8006b56 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00e      	beq.n	8006b56 <HAL_UART_IRQHandler+0x51e>
 8006b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d008      	beq.n	8006b56 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fb1e 	bl	8007186 <UART_EndTransmit_IT>
    return;
 8006b4a:	e004      	b.n	8006b56 <HAL_UART_IRQHandler+0x51e>
    return;
 8006b4c:	bf00      	nop
 8006b4e:	e002      	b.n	8006b56 <HAL_UART_IRQHandler+0x51e>
      return;
 8006b50:	bf00      	nop
 8006b52:	e000      	b.n	8006b56 <HAL_UART_IRQHandler+0x51e>
      return;
 8006b54:	bf00      	nop
  }
}
 8006b56:	37e8      	adds	r7, #232	@ 0xe8
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b083      	sub	sp, #12
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006bb4:	bf00      	nop
 8006bb6:	370c      	adds	r7, #12
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b090      	sub	sp, #64	@ 0x40
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d137      	bne.n	8006c4c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006bdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bde:	2200      	movs	r2, #0
 8006be0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	3314      	adds	r3, #20
 8006be8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bec:	e853 3f00 	ldrex	r3, [r3]
 8006bf0:	623b      	str	r3, [r7, #32]
   return(result);
 8006bf2:	6a3b      	ldr	r3, [r7, #32]
 8006bf4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006bfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	3314      	adds	r3, #20
 8006c00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c02:	633a      	str	r2, [r7, #48]	@ 0x30
 8006c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006c08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c0a:	e841 2300 	strex	r3, r2, [r1]
 8006c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1e5      	bne.n	8006be2 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	330c      	adds	r3, #12
 8006c1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	e853 3f00 	ldrex	r3, [r3]
 8006c24:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c2c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	330c      	adds	r3, #12
 8006c34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c36:	61fa      	str	r2, [r7, #28]
 8006c38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3a:	69b9      	ldr	r1, [r7, #24]
 8006c3c:	69fa      	ldr	r2, [r7, #28]
 8006c3e:	e841 2300 	strex	r3, r2, [r1]
 8006c42:	617b      	str	r3, [r7, #20]
   return(result);
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1e5      	bne.n	8006c16 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006c4a:	e002      	b.n	8006c52 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006c4c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006c4e:	f7ff ff85 	bl	8006b5c <HAL_UART_TxCpltCallback>
}
 8006c52:	bf00      	nop
 8006c54:	3740      	adds	r7, #64	@ 0x40
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}

08006c5a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c5a:	b580      	push	{r7, lr}
 8006c5c:	b084      	sub	sp, #16
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c66:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f7ff ff81 	bl	8006b70 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c6e:	bf00      	nop
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b09c      	sub	sp, #112	@ 0x70
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c82:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d172      	bne.n	8006d78 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006c92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c94:	2200      	movs	r2, #0
 8006c96:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	330c      	adds	r3, #12
 8006c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ca2:	e853 3f00 	ldrex	r3, [r3]
 8006ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006ca8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006caa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cae:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006cb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	330c      	adds	r3, #12
 8006cb6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006cb8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006cba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006cbe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006cc0:	e841 2300 	strex	r3, r2, [r1]
 8006cc4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006cc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d1e5      	bne.n	8006c98 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ccc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	3314      	adds	r3, #20
 8006cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cd6:	e853 3f00 	ldrex	r3, [r3]
 8006cda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cde:	f023 0301 	bic.w	r3, r3, #1
 8006ce2:	667b      	str	r3, [r7, #100]	@ 0x64
 8006ce4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	3314      	adds	r3, #20
 8006cea:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006cec:	647a      	str	r2, [r7, #68]	@ 0x44
 8006cee:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006cf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cf4:	e841 2300 	strex	r3, r2, [r1]
 8006cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1e5      	bne.n	8006ccc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	3314      	adds	r3, #20
 8006d06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0a:	e853 3f00 	ldrex	r3, [r3]
 8006d0e:	623b      	str	r3, [r7, #32]
   return(result);
 8006d10:	6a3b      	ldr	r3, [r7, #32]
 8006d12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d16:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	3314      	adds	r3, #20
 8006d1e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006d20:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d28:	e841 2300 	strex	r3, r2, [r1]
 8006d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d1e5      	bne.n	8006d00 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d36:	2220      	movs	r2, #32
 8006d38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d119      	bne.n	8006d78 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	330c      	adds	r3, #12
 8006d4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	e853 3f00 	ldrex	r3, [r3]
 8006d52:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f023 0310 	bic.w	r3, r3, #16
 8006d5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	330c      	adds	r3, #12
 8006d62:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006d64:	61fa      	str	r2, [r7, #28]
 8006d66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d68:	69b9      	ldr	r1, [r7, #24]
 8006d6a:	69fa      	ldr	r2, [r7, #28]
 8006d6c:	e841 2300 	strex	r3, r2, [r1]
 8006d70:	617b      	str	r3, [r7, #20]
   return(result);
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1e5      	bne.n	8006d44 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d106      	bne.n	8006d94 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d88:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006d8e:	f7fb fc0f 	bl	80025b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d92:	e002      	b.n	8006d9a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006d94:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006d96:	f7ff fef5 	bl	8006b84 <HAL_UART_RxCpltCallback>
}
 8006d9a:	bf00      	nop
 8006d9c:	3770      	adds	r7, #112	@ 0x70
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b084      	sub	sp, #16
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	2201      	movs	r2, #1
 8006db4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d108      	bne.n	8006dd0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006dc2:	085b      	lsrs	r3, r3, #1
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f7fb fbf1 	bl	80025b0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006dce:	e002      	b.n	8006dd6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006dd0:	68f8      	ldr	r0, [r7, #12]
 8006dd2:	f7ff fee1 	bl	8006b98 <HAL_UART_RxHalfCpltCallback>
}
 8006dd6:	bf00      	nop
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b084      	sub	sp, #16
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006de6:	2300      	movs	r3, #0
 8006de8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dee:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dfa:	2b80      	cmp	r3, #128	@ 0x80
 8006dfc:	bf0c      	ite	eq
 8006dfe:	2301      	moveq	r3, #1
 8006e00:	2300      	movne	r3, #0
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b21      	cmp	r3, #33	@ 0x21
 8006e10:	d108      	bne.n	8006e24 <UART_DMAError+0x46>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d005      	beq.n	8006e24 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006e1e:	68b8      	ldr	r0, [r7, #8]
 8006e20:	f000 f8c2 	bl	8006fa8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e2e:	2b40      	cmp	r3, #64	@ 0x40
 8006e30:	bf0c      	ite	eq
 8006e32:	2301      	moveq	r3, #1
 8006e34:	2300      	movne	r3, #0
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e40:	b2db      	uxtb	r3, r3
 8006e42:	2b22      	cmp	r3, #34	@ 0x22
 8006e44:	d108      	bne.n	8006e58 <UART_DMAError+0x7a>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d005      	beq.n	8006e58 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006e52:	68b8      	ldr	r0, [r7, #8]
 8006e54:	f000 f8d0 	bl	8006ff8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e5c:	f043 0210 	orr.w	r2, r3, #16
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e64:	68b8      	ldr	r0, [r7, #8]
 8006e66:	f7ff fea1 	bl	8006bac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e6a:	bf00      	nop
 8006e6c:	3710      	adds	r7, #16
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
	...

08006e74 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b098      	sub	sp, #96	@ 0x60
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006e82:	68ba      	ldr	r2, [r7, #8]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	88fa      	ldrh	r2, [r7, #6]
 8006e8c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2222      	movs	r2, #34	@ 0x22
 8006e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ea0:	4a3e      	ldr	r2, [pc, #248]	@ (8006f9c <UART_Start_Receive_DMA+0x128>)
 8006ea2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ea8:	4a3d      	ldr	r2, [pc, #244]	@ (8006fa0 <UART_Start_Receive_DMA+0x12c>)
 8006eaa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eb0:	4a3c      	ldr	r2, [pc, #240]	@ (8006fa4 <UART_Start_Receive_DMA+0x130>)
 8006eb2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eb8:	2200      	movs	r2, #0
 8006eba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006ebc:	f107 0308 	add.w	r3, r7, #8
 8006ec0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	3304      	adds	r3, #4
 8006ecc:	4619      	mov	r1, r3
 8006ece:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	88fb      	ldrh	r3, [r7, #6]
 8006ed4:	f7fc fc74 	bl	80037c0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006ed8:	2300      	movs	r3, #0
 8006eda:	613b      	str	r3, [r7, #16]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	613b      	str	r3, [r7, #16]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	613b      	str	r3, [r7, #16]
 8006eec:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d019      	beq.n	8006f2a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	330c      	adds	r3, #12
 8006efc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f00:	e853 3f00 	ldrex	r3, [r3]
 8006f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f0c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	330c      	adds	r3, #12
 8006f14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006f16:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006f18:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006f1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f1e:	e841 2300 	strex	r3, r2, [r1]
 8006f22:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006f24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1e5      	bne.n	8006ef6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	3314      	adds	r3, #20
 8006f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f34:	e853 3f00 	ldrex	r3, [r3]
 8006f38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f3c:	f043 0301 	orr.w	r3, r3, #1
 8006f40:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	3314      	adds	r3, #20
 8006f48:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f4a:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006f4c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006f50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f52:	e841 2300 	strex	r3, r2, [r1]
 8006f56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1e5      	bne.n	8006f2a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	3314      	adds	r3, #20
 8006f64:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f66:	69bb      	ldr	r3, [r7, #24]
 8006f68:	e853 3f00 	ldrex	r3, [r3]
 8006f6c:	617b      	str	r3, [r7, #20]
   return(result);
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f74:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	3314      	adds	r3, #20
 8006f7c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006f7e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f82:	6a39      	ldr	r1, [r7, #32]
 8006f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f86:	e841 2300 	strex	r3, r2, [r1]
 8006f8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d1e5      	bne.n	8006f5e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3760      	adds	r7, #96	@ 0x60
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	08006c77 	.word	0x08006c77
 8006fa0:	08006da3 	.word	0x08006da3
 8006fa4:	08006ddf 	.word	0x08006ddf

08006fa8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b089      	sub	sp, #36	@ 0x24
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	330c      	adds	r3, #12
 8006fb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	e853 3f00 	ldrex	r3, [r3]
 8006fbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006fc6:	61fb      	str	r3, [r7, #28]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	330c      	adds	r3, #12
 8006fce:	69fa      	ldr	r2, [r7, #28]
 8006fd0:	61ba      	str	r2, [r7, #24]
 8006fd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd4:	6979      	ldr	r1, [r7, #20]
 8006fd6:	69ba      	ldr	r2, [r7, #24]
 8006fd8:	e841 2300 	strex	r3, r2, [r1]
 8006fdc:	613b      	str	r3, [r7, #16]
   return(result);
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d1e5      	bne.n	8006fb0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2220      	movs	r2, #32
 8006fe8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006fec:	bf00      	nop
 8006fee:	3724      	adds	r7, #36	@ 0x24
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr

08006ff8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b095      	sub	sp, #84	@ 0x54
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	330c      	adds	r3, #12
 8007006:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800700a:	e853 3f00 	ldrex	r3, [r3]
 800700e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007012:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007016:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	330c      	adds	r3, #12
 800701e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007020:	643a      	str	r2, [r7, #64]	@ 0x40
 8007022:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007024:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007026:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007028:	e841 2300 	strex	r3, r2, [r1]
 800702c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800702e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1e5      	bne.n	8007000 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	3314      	adds	r3, #20
 800703a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703c:	6a3b      	ldr	r3, [r7, #32]
 800703e:	e853 3f00 	ldrex	r3, [r3]
 8007042:	61fb      	str	r3, [r7, #28]
   return(result);
 8007044:	69fb      	ldr	r3, [r7, #28]
 8007046:	f023 0301 	bic.w	r3, r3, #1
 800704a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	3314      	adds	r3, #20
 8007052:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007054:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007056:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007058:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800705a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800705c:	e841 2300 	strex	r3, r2, [r1]
 8007060:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1e5      	bne.n	8007034 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800706c:	2b01      	cmp	r3, #1
 800706e:	d119      	bne.n	80070a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	330c      	adds	r3, #12
 8007076:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	e853 3f00 	ldrex	r3, [r3]
 800707e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	f023 0310 	bic.w	r3, r3, #16
 8007086:	647b      	str	r3, [r7, #68]	@ 0x44
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	330c      	adds	r3, #12
 800708e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007090:	61ba      	str	r2, [r7, #24]
 8007092:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007094:	6979      	ldr	r1, [r7, #20]
 8007096:	69ba      	ldr	r2, [r7, #24]
 8007098:	e841 2300 	strex	r3, r2, [r1]
 800709c:	613b      	str	r3, [r7, #16]
   return(result);
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d1e5      	bne.n	8007070 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2220      	movs	r2, #32
 80070a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80070b2:	bf00      	nop
 80070b4:	3754      	adds	r7, #84	@ 0x54
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b084      	sub	sp, #16
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f7ff fd67 	bl	8006bac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80070de:	bf00      	nop
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b085      	sub	sp, #20
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070f4:	b2db      	uxtb	r3, r3
 80070f6:	2b21      	cmp	r3, #33	@ 0x21
 80070f8:	d13e      	bne.n	8007178 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007102:	d114      	bne.n	800712e <UART_Transmit_IT+0x48>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d110      	bne.n	800712e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6a1b      	ldr	r3, [r3, #32]
 8007110:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	881b      	ldrh	r3, [r3, #0]
 8007116:	461a      	mov	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007120:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	1c9a      	adds	r2, r3, #2
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	621a      	str	r2, [r3, #32]
 800712c:	e008      	b.n	8007140 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6a1b      	ldr	r3, [r3, #32]
 8007132:	1c59      	adds	r1, r3, #1
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	6211      	str	r1, [r2, #32]
 8007138:	781a      	ldrb	r2, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007144:	b29b      	uxth	r3, r3
 8007146:	3b01      	subs	r3, #1
 8007148:	b29b      	uxth	r3, r3
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	4619      	mov	r1, r3
 800714e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10f      	bne.n	8007174 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68da      	ldr	r2, [r3, #12]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007162:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68da      	ldr	r2, [r3, #12]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007172:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007174:	2300      	movs	r3, #0
 8007176:	e000      	b.n	800717a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007178:	2302      	movs	r3, #2
  }
}
 800717a:	4618      	mov	r0, r3
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b082      	sub	sp, #8
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68da      	ldr	r2, [r3, #12]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800719c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2220      	movs	r2, #32
 80071a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f7ff fcd8 	bl	8006b5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3708      	adds	r7, #8
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b08c      	sub	sp, #48	@ 0x30
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	2b22      	cmp	r3, #34	@ 0x22
 80071c8:	f040 80ae 	bne.w	8007328 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071d4:	d117      	bne.n	8007206 <UART_Receive_IT+0x50>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d113      	bne.n	8007206 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80071de:	2300      	movs	r3, #0
 80071e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071f4:	b29a      	uxth	r2, r3
 80071f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071fe:	1c9a      	adds	r2, r3, #2
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	629a      	str	r2, [r3, #40]	@ 0x28
 8007204:	e026      	b.n	8007254 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800720a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800720c:	2300      	movs	r3, #0
 800720e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007218:	d007      	beq.n	800722a <UART_Receive_IT+0x74>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10a      	bne.n	8007238 <UART_Receive_IT+0x82>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d106      	bne.n	8007238 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	b2da      	uxtb	r2, r3
 8007232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007234:	701a      	strb	r2, [r3, #0]
 8007236:	e008      	b.n	800724a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	b2db      	uxtb	r3, r3
 8007240:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007244:	b2da      	uxtb	r2, r3
 8007246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007248:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800724e:	1c5a      	adds	r2, r3, #1
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007258:	b29b      	uxth	r3, r3
 800725a:	3b01      	subs	r3, #1
 800725c:	b29b      	uxth	r3, r3
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	4619      	mov	r1, r3
 8007262:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007264:	2b00      	cmp	r3, #0
 8007266:	d15d      	bne.n	8007324 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	68da      	ldr	r2, [r3, #12]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f022 0220 	bic.w	r2, r2, #32
 8007276:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	68da      	ldr	r2, [r3, #12]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007286:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	695a      	ldr	r2, [r3, #20]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f022 0201 	bic.w	r2, r2, #1
 8007296:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2220      	movs	r2, #32
 800729c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d135      	bne.n	800731a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	330c      	adds	r3, #12
 80072ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	e853 3f00 	ldrex	r3, [r3]
 80072c2:	613b      	str	r3, [r7, #16]
   return(result);
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	f023 0310 	bic.w	r3, r3, #16
 80072ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	330c      	adds	r3, #12
 80072d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072d4:	623a      	str	r2, [r7, #32]
 80072d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d8:	69f9      	ldr	r1, [r7, #28]
 80072da:	6a3a      	ldr	r2, [r7, #32]
 80072dc:	e841 2300 	strex	r3, r2, [r1]
 80072e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1e5      	bne.n	80072b4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0310 	and.w	r3, r3, #16
 80072f2:	2b10      	cmp	r3, #16
 80072f4:	d10a      	bne.n	800730c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80072f6:	2300      	movs	r3, #0
 80072f8:	60fb      	str	r3, [r7, #12]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	60fb      	str	r3, [r7, #12]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	60fb      	str	r3, [r7, #12]
 800730a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007310:	4619      	mov	r1, r3
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f7fb f94c 	bl	80025b0 <HAL_UARTEx_RxEventCallback>
 8007318:	e002      	b.n	8007320 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7ff fc32 	bl	8006b84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007320:	2300      	movs	r3, #0
 8007322:	e002      	b.n	800732a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007324:	2300      	movs	r3, #0
 8007326:	e000      	b.n	800732a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007328:	2302      	movs	r3, #2
  }
}
 800732a:	4618      	mov	r0, r3
 800732c:	3730      	adds	r7, #48	@ 0x30
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
	...

08007334 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007338:	b0c0      	sub	sp, #256	@ 0x100
 800733a:	af00      	add	r7, sp, #0
 800733c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800734c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007350:	68d9      	ldr	r1, [r3, #12]
 8007352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	ea40 0301 	orr.w	r3, r0, r1
 800735c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800735e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007362:	689a      	ldr	r2, [r3, #8]
 8007364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007368:	691b      	ldr	r3, [r3, #16]
 800736a:	431a      	orrs	r2, r3
 800736c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007370:	695b      	ldr	r3, [r3, #20]
 8007372:	431a      	orrs	r2, r3
 8007374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007378:	69db      	ldr	r3, [r3, #28]
 800737a:	4313      	orrs	r3, r2
 800737c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800738c:	f021 010c 	bic.w	r1, r1, #12
 8007390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800739a:	430b      	orrs	r3, r1
 800739c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800739e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	695b      	ldr	r3, [r3, #20]
 80073a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80073aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ae:	6999      	ldr	r1, [r3, #24]
 80073b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	ea40 0301 	orr.w	r3, r0, r1
 80073ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	4b8f      	ldr	r3, [pc, #572]	@ (8007600 <UART_SetConfig+0x2cc>)
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d005      	beq.n	80073d4 <UART_SetConfig+0xa0>
 80073c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	4b8d      	ldr	r3, [pc, #564]	@ (8007604 <UART_SetConfig+0x2d0>)
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d104      	bne.n	80073de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80073d4:	f7fe f976 	bl	80056c4 <HAL_RCC_GetPCLK2Freq>
 80073d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80073dc:	e003      	b.n	80073e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80073de:	f7fe f95d 	bl	800569c <HAL_RCC_GetPCLK1Freq>
 80073e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ea:	69db      	ldr	r3, [r3, #28]
 80073ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80073f0:	f040 810c 	bne.w	800760c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073f8:	2200      	movs	r2, #0
 80073fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80073fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007402:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007406:	4622      	mov	r2, r4
 8007408:	462b      	mov	r3, r5
 800740a:	1891      	adds	r1, r2, r2
 800740c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800740e:	415b      	adcs	r3, r3
 8007410:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007412:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007416:	4621      	mov	r1, r4
 8007418:	eb12 0801 	adds.w	r8, r2, r1
 800741c:	4629      	mov	r1, r5
 800741e:	eb43 0901 	adc.w	r9, r3, r1
 8007422:	f04f 0200 	mov.w	r2, #0
 8007426:	f04f 0300 	mov.w	r3, #0
 800742a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800742e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007432:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007436:	4690      	mov	r8, r2
 8007438:	4699      	mov	r9, r3
 800743a:	4623      	mov	r3, r4
 800743c:	eb18 0303 	adds.w	r3, r8, r3
 8007440:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007444:	462b      	mov	r3, r5
 8007446:	eb49 0303 	adc.w	r3, r9, r3
 800744a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800744e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800745a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800745e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007462:	460b      	mov	r3, r1
 8007464:	18db      	adds	r3, r3, r3
 8007466:	653b      	str	r3, [r7, #80]	@ 0x50
 8007468:	4613      	mov	r3, r2
 800746a:	eb42 0303 	adc.w	r3, r2, r3
 800746e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007470:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007474:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007478:	f7f9 fc0e 	bl	8000c98 <__aeabi_uldivmod>
 800747c:	4602      	mov	r2, r0
 800747e:	460b      	mov	r3, r1
 8007480:	4b61      	ldr	r3, [pc, #388]	@ (8007608 <UART_SetConfig+0x2d4>)
 8007482:	fba3 2302 	umull	r2, r3, r3, r2
 8007486:	095b      	lsrs	r3, r3, #5
 8007488:	011c      	lsls	r4, r3, #4
 800748a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800748e:	2200      	movs	r2, #0
 8007490:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007494:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007498:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800749c:	4642      	mov	r2, r8
 800749e:	464b      	mov	r3, r9
 80074a0:	1891      	adds	r1, r2, r2
 80074a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80074a4:	415b      	adcs	r3, r3
 80074a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80074a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80074ac:	4641      	mov	r1, r8
 80074ae:	eb12 0a01 	adds.w	sl, r2, r1
 80074b2:	4649      	mov	r1, r9
 80074b4:	eb43 0b01 	adc.w	fp, r3, r1
 80074b8:	f04f 0200 	mov.w	r2, #0
 80074bc:	f04f 0300 	mov.w	r3, #0
 80074c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80074c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80074c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074cc:	4692      	mov	sl, r2
 80074ce:	469b      	mov	fp, r3
 80074d0:	4643      	mov	r3, r8
 80074d2:	eb1a 0303 	adds.w	r3, sl, r3
 80074d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80074da:	464b      	mov	r3, r9
 80074dc:	eb4b 0303 	adc.w	r3, fp, r3
 80074e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80074e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80074f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80074f8:	460b      	mov	r3, r1
 80074fa:	18db      	adds	r3, r3, r3
 80074fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80074fe:	4613      	mov	r3, r2
 8007500:	eb42 0303 	adc.w	r3, r2, r3
 8007504:	647b      	str	r3, [r7, #68]	@ 0x44
 8007506:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800750a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800750e:	f7f9 fbc3 	bl	8000c98 <__aeabi_uldivmod>
 8007512:	4602      	mov	r2, r0
 8007514:	460b      	mov	r3, r1
 8007516:	4611      	mov	r1, r2
 8007518:	4b3b      	ldr	r3, [pc, #236]	@ (8007608 <UART_SetConfig+0x2d4>)
 800751a:	fba3 2301 	umull	r2, r3, r3, r1
 800751e:	095b      	lsrs	r3, r3, #5
 8007520:	2264      	movs	r2, #100	@ 0x64
 8007522:	fb02 f303 	mul.w	r3, r2, r3
 8007526:	1acb      	subs	r3, r1, r3
 8007528:	00db      	lsls	r3, r3, #3
 800752a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800752e:	4b36      	ldr	r3, [pc, #216]	@ (8007608 <UART_SetConfig+0x2d4>)
 8007530:	fba3 2302 	umull	r2, r3, r3, r2
 8007534:	095b      	lsrs	r3, r3, #5
 8007536:	005b      	lsls	r3, r3, #1
 8007538:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800753c:	441c      	add	r4, r3
 800753e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007542:	2200      	movs	r2, #0
 8007544:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007548:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800754c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007550:	4642      	mov	r2, r8
 8007552:	464b      	mov	r3, r9
 8007554:	1891      	adds	r1, r2, r2
 8007556:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007558:	415b      	adcs	r3, r3
 800755a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800755c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007560:	4641      	mov	r1, r8
 8007562:	1851      	adds	r1, r2, r1
 8007564:	6339      	str	r1, [r7, #48]	@ 0x30
 8007566:	4649      	mov	r1, r9
 8007568:	414b      	adcs	r3, r1
 800756a:	637b      	str	r3, [r7, #52]	@ 0x34
 800756c:	f04f 0200 	mov.w	r2, #0
 8007570:	f04f 0300 	mov.w	r3, #0
 8007574:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007578:	4659      	mov	r1, fp
 800757a:	00cb      	lsls	r3, r1, #3
 800757c:	4651      	mov	r1, sl
 800757e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007582:	4651      	mov	r1, sl
 8007584:	00ca      	lsls	r2, r1, #3
 8007586:	4610      	mov	r0, r2
 8007588:	4619      	mov	r1, r3
 800758a:	4603      	mov	r3, r0
 800758c:	4642      	mov	r2, r8
 800758e:	189b      	adds	r3, r3, r2
 8007590:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007594:	464b      	mov	r3, r9
 8007596:	460a      	mov	r2, r1
 8007598:	eb42 0303 	adc.w	r3, r2, r3
 800759c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80075a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80075ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80075b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80075b4:	460b      	mov	r3, r1
 80075b6:	18db      	adds	r3, r3, r3
 80075b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80075ba:	4613      	mov	r3, r2
 80075bc:	eb42 0303 	adc.w	r3, r2, r3
 80075c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80075c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80075c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80075ca:	f7f9 fb65 	bl	8000c98 <__aeabi_uldivmod>
 80075ce:	4602      	mov	r2, r0
 80075d0:	460b      	mov	r3, r1
 80075d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007608 <UART_SetConfig+0x2d4>)
 80075d4:	fba3 1302 	umull	r1, r3, r3, r2
 80075d8:	095b      	lsrs	r3, r3, #5
 80075da:	2164      	movs	r1, #100	@ 0x64
 80075dc:	fb01 f303 	mul.w	r3, r1, r3
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	00db      	lsls	r3, r3, #3
 80075e4:	3332      	adds	r3, #50	@ 0x32
 80075e6:	4a08      	ldr	r2, [pc, #32]	@ (8007608 <UART_SetConfig+0x2d4>)
 80075e8:	fba2 2303 	umull	r2, r3, r2, r3
 80075ec:	095b      	lsrs	r3, r3, #5
 80075ee:	f003 0207 	and.w	r2, r3, #7
 80075f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4422      	add	r2, r4
 80075fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80075fc:	e106      	b.n	800780c <UART_SetConfig+0x4d8>
 80075fe:	bf00      	nop
 8007600:	40011000 	.word	0x40011000
 8007604:	40011400 	.word	0x40011400
 8007608:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800760c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007610:	2200      	movs	r2, #0
 8007612:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007616:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800761a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800761e:	4642      	mov	r2, r8
 8007620:	464b      	mov	r3, r9
 8007622:	1891      	adds	r1, r2, r2
 8007624:	6239      	str	r1, [r7, #32]
 8007626:	415b      	adcs	r3, r3
 8007628:	627b      	str	r3, [r7, #36]	@ 0x24
 800762a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800762e:	4641      	mov	r1, r8
 8007630:	1854      	adds	r4, r2, r1
 8007632:	4649      	mov	r1, r9
 8007634:	eb43 0501 	adc.w	r5, r3, r1
 8007638:	f04f 0200 	mov.w	r2, #0
 800763c:	f04f 0300 	mov.w	r3, #0
 8007640:	00eb      	lsls	r3, r5, #3
 8007642:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007646:	00e2      	lsls	r2, r4, #3
 8007648:	4614      	mov	r4, r2
 800764a:	461d      	mov	r5, r3
 800764c:	4643      	mov	r3, r8
 800764e:	18e3      	adds	r3, r4, r3
 8007650:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007654:	464b      	mov	r3, r9
 8007656:	eb45 0303 	adc.w	r3, r5, r3
 800765a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800765e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	2200      	movs	r2, #0
 8007666:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800766a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800766e:	f04f 0200 	mov.w	r2, #0
 8007672:	f04f 0300 	mov.w	r3, #0
 8007676:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800767a:	4629      	mov	r1, r5
 800767c:	008b      	lsls	r3, r1, #2
 800767e:	4621      	mov	r1, r4
 8007680:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007684:	4621      	mov	r1, r4
 8007686:	008a      	lsls	r2, r1, #2
 8007688:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800768c:	f7f9 fb04 	bl	8000c98 <__aeabi_uldivmod>
 8007690:	4602      	mov	r2, r0
 8007692:	460b      	mov	r3, r1
 8007694:	4b60      	ldr	r3, [pc, #384]	@ (8007818 <UART_SetConfig+0x4e4>)
 8007696:	fba3 2302 	umull	r2, r3, r3, r2
 800769a:	095b      	lsrs	r3, r3, #5
 800769c:	011c      	lsls	r4, r3, #4
 800769e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076a2:	2200      	movs	r2, #0
 80076a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80076a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80076ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80076b0:	4642      	mov	r2, r8
 80076b2:	464b      	mov	r3, r9
 80076b4:	1891      	adds	r1, r2, r2
 80076b6:	61b9      	str	r1, [r7, #24]
 80076b8:	415b      	adcs	r3, r3
 80076ba:	61fb      	str	r3, [r7, #28]
 80076bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076c0:	4641      	mov	r1, r8
 80076c2:	1851      	adds	r1, r2, r1
 80076c4:	6139      	str	r1, [r7, #16]
 80076c6:	4649      	mov	r1, r9
 80076c8:	414b      	adcs	r3, r1
 80076ca:	617b      	str	r3, [r7, #20]
 80076cc:	f04f 0200 	mov.w	r2, #0
 80076d0:	f04f 0300 	mov.w	r3, #0
 80076d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80076d8:	4659      	mov	r1, fp
 80076da:	00cb      	lsls	r3, r1, #3
 80076dc:	4651      	mov	r1, sl
 80076de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076e2:	4651      	mov	r1, sl
 80076e4:	00ca      	lsls	r2, r1, #3
 80076e6:	4610      	mov	r0, r2
 80076e8:	4619      	mov	r1, r3
 80076ea:	4603      	mov	r3, r0
 80076ec:	4642      	mov	r2, r8
 80076ee:	189b      	adds	r3, r3, r2
 80076f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80076f4:	464b      	mov	r3, r9
 80076f6:	460a      	mov	r2, r1
 80076f8:	eb42 0303 	adc.w	r3, r2, r3
 80076fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	67bb      	str	r3, [r7, #120]	@ 0x78
 800770a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800770c:	f04f 0200 	mov.w	r2, #0
 8007710:	f04f 0300 	mov.w	r3, #0
 8007714:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007718:	4649      	mov	r1, r9
 800771a:	008b      	lsls	r3, r1, #2
 800771c:	4641      	mov	r1, r8
 800771e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007722:	4641      	mov	r1, r8
 8007724:	008a      	lsls	r2, r1, #2
 8007726:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800772a:	f7f9 fab5 	bl	8000c98 <__aeabi_uldivmod>
 800772e:	4602      	mov	r2, r0
 8007730:	460b      	mov	r3, r1
 8007732:	4611      	mov	r1, r2
 8007734:	4b38      	ldr	r3, [pc, #224]	@ (8007818 <UART_SetConfig+0x4e4>)
 8007736:	fba3 2301 	umull	r2, r3, r3, r1
 800773a:	095b      	lsrs	r3, r3, #5
 800773c:	2264      	movs	r2, #100	@ 0x64
 800773e:	fb02 f303 	mul.w	r3, r2, r3
 8007742:	1acb      	subs	r3, r1, r3
 8007744:	011b      	lsls	r3, r3, #4
 8007746:	3332      	adds	r3, #50	@ 0x32
 8007748:	4a33      	ldr	r2, [pc, #204]	@ (8007818 <UART_SetConfig+0x4e4>)
 800774a:	fba2 2303 	umull	r2, r3, r2, r3
 800774e:	095b      	lsrs	r3, r3, #5
 8007750:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007754:	441c      	add	r4, r3
 8007756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800775a:	2200      	movs	r2, #0
 800775c:	673b      	str	r3, [r7, #112]	@ 0x70
 800775e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007760:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007764:	4642      	mov	r2, r8
 8007766:	464b      	mov	r3, r9
 8007768:	1891      	adds	r1, r2, r2
 800776a:	60b9      	str	r1, [r7, #8]
 800776c:	415b      	adcs	r3, r3
 800776e:	60fb      	str	r3, [r7, #12]
 8007770:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007774:	4641      	mov	r1, r8
 8007776:	1851      	adds	r1, r2, r1
 8007778:	6039      	str	r1, [r7, #0]
 800777a:	4649      	mov	r1, r9
 800777c:	414b      	adcs	r3, r1
 800777e:	607b      	str	r3, [r7, #4]
 8007780:	f04f 0200 	mov.w	r2, #0
 8007784:	f04f 0300 	mov.w	r3, #0
 8007788:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800778c:	4659      	mov	r1, fp
 800778e:	00cb      	lsls	r3, r1, #3
 8007790:	4651      	mov	r1, sl
 8007792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007796:	4651      	mov	r1, sl
 8007798:	00ca      	lsls	r2, r1, #3
 800779a:	4610      	mov	r0, r2
 800779c:	4619      	mov	r1, r3
 800779e:	4603      	mov	r3, r0
 80077a0:	4642      	mov	r2, r8
 80077a2:	189b      	adds	r3, r3, r2
 80077a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077a6:	464b      	mov	r3, r9
 80077a8:	460a      	mov	r2, r1
 80077aa:	eb42 0303 	adc.w	r3, r2, r3
 80077ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80077b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80077ba:	667a      	str	r2, [r7, #100]	@ 0x64
 80077bc:	f04f 0200 	mov.w	r2, #0
 80077c0:	f04f 0300 	mov.w	r3, #0
 80077c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80077c8:	4649      	mov	r1, r9
 80077ca:	008b      	lsls	r3, r1, #2
 80077cc:	4641      	mov	r1, r8
 80077ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077d2:	4641      	mov	r1, r8
 80077d4:	008a      	lsls	r2, r1, #2
 80077d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80077da:	f7f9 fa5d 	bl	8000c98 <__aeabi_uldivmod>
 80077de:	4602      	mov	r2, r0
 80077e0:	460b      	mov	r3, r1
 80077e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007818 <UART_SetConfig+0x4e4>)
 80077e4:	fba3 1302 	umull	r1, r3, r3, r2
 80077e8:	095b      	lsrs	r3, r3, #5
 80077ea:	2164      	movs	r1, #100	@ 0x64
 80077ec:	fb01 f303 	mul.w	r3, r1, r3
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	011b      	lsls	r3, r3, #4
 80077f4:	3332      	adds	r3, #50	@ 0x32
 80077f6:	4a08      	ldr	r2, [pc, #32]	@ (8007818 <UART_SetConfig+0x4e4>)
 80077f8:	fba2 2303 	umull	r2, r3, r2, r3
 80077fc:	095b      	lsrs	r3, r3, #5
 80077fe:	f003 020f 	and.w	r2, r3, #15
 8007802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4422      	add	r2, r4
 800780a:	609a      	str	r2, [r3, #8]
}
 800780c:	bf00      	nop
 800780e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007812:	46bd      	mov	sp, r7
 8007814:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007818:	51eb851f 	.word	0x51eb851f

0800781c <__cvt>:
 800781c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007820:	ec57 6b10 	vmov	r6, r7, d0
 8007824:	2f00      	cmp	r7, #0
 8007826:	460c      	mov	r4, r1
 8007828:	4619      	mov	r1, r3
 800782a:	463b      	mov	r3, r7
 800782c:	bfbb      	ittet	lt
 800782e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007832:	461f      	movlt	r7, r3
 8007834:	2300      	movge	r3, #0
 8007836:	232d      	movlt	r3, #45	@ 0x2d
 8007838:	700b      	strb	r3, [r1, #0]
 800783a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800783c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007840:	4691      	mov	r9, r2
 8007842:	f023 0820 	bic.w	r8, r3, #32
 8007846:	bfbc      	itt	lt
 8007848:	4632      	movlt	r2, r6
 800784a:	4616      	movlt	r6, r2
 800784c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007850:	d005      	beq.n	800785e <__cvt+0x42>
 8007852:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007856:	d100      	bne.n	800785a <__cvt+0x3e>
 8007858:	3401      	adds	r4, #1
 800785a:	2102      	movs	r1, #2
 800785c:	e000      	b.n	8007860 <__cvt+0x44>
 800785e:	2103      	movs	r1, #3
 8007860:	ab03      	add	r3, sp, #12
 8007862:	9301      	str	r3, [sp, #4]
 8007864:	ab02      	add	r3, sp, #8
 8007866:	9300      	str	r3, [sp, #0]
 8007868:	ec47 6b10 	vmov	d0, r6, r7
 800786c:	4653      	mov	r3, sl
 800786e:	4622      	mov	r2, r4
 8007870:	f001 f876 	bl	8008960 <_dtoa_r>
 8007874:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007878:	4605      	mov	r5, r0
 800787a:	d119      	bne.n	80078b0 <__cvt+0x94>
 800787c:	f019 0f01 	tst.w	r9, #1
 8007880:	d00e      	beq.n	80078a0 <__cvt+0x84>
 8007882:	eb00 0904 	add.w	r9, r0, r4
 8007886:	2200      	movs	r2, #0
 8007888:	2300      	movs	r3, #0
 800788a:	4630      	mov	r0, r6
 800788c:	4639      	mov	r1, r7
 800788e:	f7f9 f923 	bl	8000ad8 <__aeabi_dcmpeq>
 8007892:	b108      	cbz	r0, 8007898 <__cvt+0x7c>
 8007894:	f8cd 900c 	str.w	r9, [sp, #12]
 8007898:	2230      	movs	r2, #48	@ 0x30
 800789a:	9b03      	ldr	r3, [sp, #12]
 800789c:	454b      	cmp	r3, r9
 800789e:	d31e      	bcc.n	80078de <__cvt+0xc2>
 80078a0:	9b03      	ldr	r3, [sp, #12]
 80078a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80078a4:	1b5b      	subs	r3, r3, r5
 80078a6:	4628      	mov	r0, r5
 80078a8:	6013      	str	r3, [r2, #0]
 80078aa:	b004      	add	sp, #16
 80078ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078b0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80078b4:	eb00 0904 	add.w	r9, r0, r4
 80078b8:	d1e5      	bne.n	8007886 <__cvt+0x6a>
 80078ba:	7803      	ldrb	r3, [r0, #0]
 80078bc:	2b30      	cmp	r3, #48	@ 0x30
 80078be:	d10a      	bne.n	80078d6 <__cvt+0xba>
 80078c0:	2200      	movs	r2, #0
 80078c2:	2300      	movs	r3, #0
 80078c4:	4630      	mov	r0, r6
 80078c6:	4639      	mov	r1, r7
 80078c8:	f7f9 f906 	bl	8000ad8 <__aeabi_dcmpeq>
 80078cc:	b918      	cbnz	r0, 80078d6 <__cvt+0xba>
 80078ce:	f1c4 0401 	rsb	r4, r4, #1
 80078d2:	f8ca 4000 	str.w	r4, [sl]
 80078d6:	f8da 3000 	ldr.w	r3, [sl]
 80078da:	4499      	add	r9, r3
 80078dc:	e7d3      	b.n	8007886 <__cvt+0x6a>
 80078de:	1c59      	adds	r1, r3, #1
 80078e0:	9103      	str	r1, [sp, #12]
 80078e2:	701a      	strb	r2, [r3, #0]
 80078e4:	e7d9      	b.n	800789a <__cvt+0x7e>

080078e6 <__exponent>:
 80078e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078e8:	2900      	cmp	r1, #0
 80078ea:	bfba      	itte	lt
 80078ec:	4249      	neglt	r1, r1
 80078ee:	232d      	movlt	r3, #45	@ 0x2d
 80078f0:	232b      	movge	r3, #43	@ 0x2b
 80078f2:	2909      	cmp	r1, #9
 80078f4:	7002      	strb	r2, [r0, #0]
 80078f6:	7043      	strb	r3, [r0, #1]
 80078f8:	dd29      	ble.n	800794e <__exponent+0x68>
 80078fa:	f10d 0307 	add.w	r3, sp, #7
 80078fe:	461d      	mov	r5, r3
 8007900:	270a      	movs	r7, #10
 8007902:	461a      	mov	r2, r3
 8007904:	fbb1 f6f7 	udiv	r6, r1, r7
 8007908:	fb07 1416 	mls	r4, r7, r6, r1
 800790c:	3430      	adds	r4, #48	@ 0x30
 800790e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007912:	460c      	mov	r4, r1
 8007914:	2c63      	cmp	r4, #99	@ 0x63
 8007916:	f103 33ff 	add.w	r3, r3, #4294967295
 800791a:	4631      	mov	r1, r6
 800791c:	dcf1      	bgt.n	8007902 <__exponent+0x1c>
 800791e:	3130      	adds	r1, #48	@ 0x30
 8007920:	1e94      	subs	r4, r2, #2
 8007922:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007926:	1c41      	adds	r1, r0, #1
 8007928:	4623      	mov	r3, r4
 800792a:	42ab      	cmp	r3, r5
 800792c:	d30a      	bcc.n	8007944 <__exponent+0x5e>
 800792e:	f10d 0309 	add.w	r3, sp, #9
 8007932:	1a9b      	subs	r3, r3, r2
 8007934:	42ac      	cmp	r4, r5
 8007936:	bf88      	it	hi
 8007938:	2300      	movhi	r3, #0
 800793a:	3302      	adds	r3, #2
 800793c:	4403      	add	r3, r0
 800793e:	1a18      	subs	r0, r3, r0
 8007940:	b003      	add	sp, #12
 8007942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007944:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007948:	f801 6f01 	strb.w	r6, [r1, #1]!
 800794c:	e7ed      	b.n	800792a <__exponent+0x44>
 800794e:	2330      	movs	r3, #48	@ 0x30
 8007950:	3130      	adds	r1, #48	@ 0x30
 8007952:	7083      	strb	r3, [r0, #2]
 8007954:	70c1      	strb	r1, [r0, #3]
 8007956:	1d03      	adds	r3, r0, #4
 8007958:	e7f1      	b.n	800793e <__exponent+0x58>
	...

0800795c <_printf_float>:
 800795c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007960:	b08d      	sub	sp, #52	@ 0x34
 8007962:	460c      	mov	r4, r1
 8007964:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007968:	4616      	mov	r6, r2
 800796a:	461f      	mov	r7, r3
 800796c:	4605      	mov	r5, r0
 800796e:	f000 feef 	bl	8008750 <_localeconv_r>
 8007972:	6803      	ldr	r3, [r0, #0]
 8007974:	9304      	str	r3, [sp, #16]
 8007976:	4618      	mov	r0, r3
 8007978:	f7f8 fc82 	bl	8000280 <strlen>
 800797c:	2300      	movs	r3, #0
 800797e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007980:	f8d8 3000 	ldr.w	r3, [r8]
 8007984:	9005      	str	r0, [sp, #20]
 8007986:	3307      	adds	r3, #7
 8007988:	f023 0307 	bic.w	r3, r3, #7
 800798c:	f103 0208 	add.w	r2, r3, #8
 8007990:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007994:	f8d4 b000 	ldr.w	fp, [r4]
 8007998:	f8c8 2000 	str.w	r2, [r8]
 800799c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80079a4:	9307      	str	r3, [sp, #28]
 80079a6:	f8cd 8018 	str.w	r8, [sp, #24]
 80079aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80079ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079b2:	4b9c      	ldr	r3, [pc, #624]	@ (8007c24 <_printf_float+0x2c8>)
 80079b4:	f04f 32ff 	mov.w	r2, #4294967295
 80079b8:	f7f9 f8c0 	bl	8000b3c <__aeabi_dcmpun>
 80079bc:	bb70      	cbnz	r0, 8007a1c <_printf_float+0xc0>
 80079be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079c2:	4b98      	ldr	r3, [pc, #608]	@ (8007c24 <_printf_float+0x2c8>)
 80079c4:	f04f 32ff 	mov.w	r2, #4294967295
 80079c8:	f7f9 f89a 	bl	8000b00 <__aeabi_dcmple>
 80079cc:	bb30      	cbnz	r0, 8007a1c <_printf_float+0xc0>
 80079ce:	2200      	movs	r2, #0
 80079d0:	2300      	movs	r3, #0
 80079d2:	4640      	mov	r0, r8
 80079d4:	4649      	mov	r1, r9
 80079d6:	f7f9 f889 	bl	8000aec <__aeabi_dcmplt>
 80079da:	b110      	cbz	r0, 80079e2 <_printf_float+0x86>
 80079dc:	232d      	movs	r3, #45	@ 0x2d
 80079de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079e2:	4a91      	ldr	r2, [pc, #580]	@ (8007c28 <_printf_float+0x2cc>)
 80079e4:	4b91      	ldr	r3, [pc, #580]	@ (8007c2c <_printf_float+0x2d0>)
 80079e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80079ea:	bf94      	ite	ls
 80079ec:	4690      	movls	r8, r2
 80079ee:	4698      	movhi	r8, r3
 80079f0:	2303      	movs	r3, #3
 80079f2:	6123      	str	r3, [r4, #16]
 80079f4:	f02b 0304 	bic.w	r3, fp, #4
 80079f8:	6023      	str	r3, [r4, #0]
 80079fa:	f04f 0900 	mov.w	r9, #0
 80079fe:	9700      	str	r7, [sp, #0]
 8007a00:	4633      	mov	r3, r6
 8007a02:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007a04:	4621      	mov	r1, r4
 8007a06:	4628      	mov	r0, r5
 8007a08:	f000 f9d2 	bl	8007db0 <_printf_common>
 8007a0c:	3001      	adds	r0, #1
 8007a0e:	f040 808d 	bne.w	8007b2c <_printf_float+0x1d0>
 8007a12:	f04f 30ff 	mov.w	r0, #4294967295
 8007a16:	b00d      	add	sp, #52	@ 0x34
 8007a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a1c:	4642      	mov	r2, r8
 8007a1e:	464b      	mov	r3, r9
 8007a20:	4640      	mov	r0, r8
 8007a22:	4649      	mov	r1, r9
 8007a24:	f7f9 f88a 	bl	8000b3c <__aeabi_dcmpun>
 8007a28:	b140      	cbz	r0, 8007a3c <_printf_float+0xe0>
 8007a2a:	464b      	mov	r3, r9
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	bfbc      	itt	lt
 8007a30:	232d      	movlt	r3, #45	@ 0x2d
 8007a32:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007a36:	4a7e      	ldr	r2, [pc, #504]	@ (8007c30 <_printf_float+0x2d4>)
 8007a38:	4b7e      	ldr	r3, [pc, #504]	@ (8007c34 <_printf_float+0x2d8>)
 8007a3a:	e7d4      	b.n	80079e6 <_printf_float+0x8a>
 8007a3c:	6863      	ldr	r3, [r4, #4]
 8007a3e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007a42:	9206      	str	r2, [sp, #24]
 8007a44:	1c5a      	adds	r2, r3, #1
 8007a46:	d13b      	bne.n	8007ac0 <_printf_float+0x164>
 8007a48:	2306      	movs	r3, #6
 8007a4a:	6063      	str	r3, [r4, #4]
 8007a4c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007a50:	2300      	movs	r3, #0
 8007a52:	6022      	str	r2, [r4, #0]
 8007a54:	9303      	str	r3, [sp, #12]
 8007a56:	ab0a      	add	r3, sp, #40	@ 0x28
 8007a58:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007a5c:	ab09      	add	r3, sp, #36	@ 0x24
 8007a5e:	9300      	str	r3, [sp, #0]
 8007a60:	6861      	ldr	r1, [r4, #4]
 8007a62:	ec49 8b10 	vmov	d0, r8, r9
 8007a66:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	f7ff fed6 	bl	800781c <__cvt>
 8007a70:	9b06      	ldr	r3, [sp, #24]
 8007a72:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a74:	2b47      	cmp	r3, #71	@ 0x47
 8007a76:	4680      	mov	r8, r0
 8007a78:	d129      	bne.n	8007ace <_printf_float+0x172>
 8007a7a:	1cc8      	adds	r0, r1, #3
 8007a7c:	db02      	blt.n	8007a84 <_printf_float+0x128>
 8007a7e:	6863      	ldr	r3, [r4, #4]
 8007a80:	4299      	cmp	r1, r3
 8007a82:	dd41      	ble.n	8007b08 <_printf_float+0x1ac>
 8007a84:	f1aa 0a02 	sub.w	sl, sl, #2
 8007a88:	fa5f fa8a 	uxtb.w	sl, sl
 8007a8c:	3901      	subs	r1, #1
 8007a8e:	4652      	mov	r2, sl
 8007a90:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007a94:	9109      	str	r1, [sp, #36]	@ 0x24
 8007a96:	f7ff ff26 	bl	80078e6 <__exponent>
 8007a9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a9c:	1813      	adds	r3, r2, r0
 8007a9e:	2a01      	cmp	r2, #1
 8007aa0:	4681      	mov	r9, r0
 8007aa2:	6123      	str	r3, [r4, #16]
 8007aa4:	dc02      	bgt.n	8007aac <_printf_float+0x150>
 8007aa6:	6822      	ldr	r2, [r4, #0]
 8007aa8:	07d2      	lsls	r2, r2, #31
 8007aaa:	d501      	bpl.n	8007ab0 <_printf_float+0x154>
 8007aac:	3301      	adds	r3, #1
 8007aae:	6123      	str	r3, [r4, #16]
 8007ab0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d0a2      	beq.n	80079fe <_printf_float+0xa2>
 8007ab8:	232d      	movs	r3, #45	@ 0x2d
 8007aba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007abe:	e79e      	b.n	80079fe <_printf_float+0xa2>
 8007ac0:	9a06      	ldr	r2, [sp, #24]
 8007ac2:	2a47      	cmp	r2, #71	@ 0x47
 8007ac4:	d1c2      	bne.n	8007a4c <_printf_float+0xf0>
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1c0      	bne.n	8007a4c <_printf_float+0xf0>
 8007aca:	2301      	movs	r3, #1
 8007acc:	e7bd      	b.n	8007a4a <_printf_float+0xee>
 8007ace:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007ad2:	d9db      	bls.n	8007a8c <_printf_float+0x130>
 8007ad4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007ad8:	d118      	bne.n	8007b0c <_printf_float+0x1b0>
 8007ada:	2900      	cmp	r1, #0
 8007adc:	6863      	ldr	r3, [r4, #4]
 8007ade:	dd0b      	ble.n	8007af8 <_printf_float+0x19c>
 8007ae0:	6121      	str	r1, [r4, #16]
 8007ae2:	b913      	cbnz	r3, 8007aea <_printf_float+0x18e>
 8007ae4:	6822      	ldr	r2, [r4, #0]
 8007ae6:	07d0      	lsls	r0, r2, #31
 8007ae8:	d502      	bpl.n	8007af0 <_printf_float+0x194>
 8007aea:	3301      	adds	r3, #1
 8007aec:	440b      	add	r3, r1
 8007aee:	6123      	str	r3, [r4, #16]
 8007af0:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007af2:	f04f 0900 	mov.w	r9, #0
 8007af6:	e7db      	b.n	8007ab0 <_printf_float+0x154>
 8007af8:	b913      	cbnz	r3, 8007b00 <_printf_float+0x1a4>
 8007afa:	6822      	ldr	r2, [r4, #0]
 8007afc:	07d2      	lsls	r2, r2, #31
 8007afe:	d501      	bpl.n	8007b04 <_printf_float+0x1a8>
 8007b00:	3302      	adds	r3, #2
 8007b02:	e7f4      	b.n	8007aee <_printf_float+0x192>
 8007b04:	2301      	movs	r3, #1
 8007b06:	e7f2      	b.n	8007aee <_printf_float+0x192>
 8007b08:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007b0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b0e:	4299      	cmp	r1, r3
 8007b10:	db05      	blt.n	8007b1e <_printf_float+0x1c2>
 8007b12:	6823      	ldr	r3, [r4, #0]
 8007b14:	6121      	str	r1, [r4, #16]
 8007b16:	07d8      	lsls	r0, r3, #31
 8007b18:	d5ea      	bpl.n	8007af0 <_printf_float+0x194>
 8007b1a:	1c4b      	adds	r3, r1, #1
 8007b1c:	e7e7      	b.n	8007aee <_printf_float+0x192>
 8007b1e:	2900      	cmp	r1, #0
 8007b20:	bfd4      	ite	le
 8007b22:	f1c1 0202 	rsble	r2, r1, #2
 8007b26:	2201      	movgt	r2, #1
 8007b28:	4413      	add	r3, r2
 8007b2a:	e7e0      	b.n	8007aee <_printf_float+0x192>
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	055a      	lsls	r2, r3, #21
 8007b30:	d407      	bmi.n	8007b42 <_printf_float+0x1e6>
 8007b32:	6923      	ldr	r3, [r4, #16]
 8007b34:	4642      	mov	r2, r8
 8007b36:	4631      	mov	r1, r6
 8007b38:	4628      	mov	r0, r5
 8007b3a:	47b8      	blx	r7
 8007b3c:	3001      	adds	r0, #1
 8007b3e:	d12b      	bne.n	8007b98 <_printf_float+0x23c>
 8007b40:	e767      	b.n	8007a12 <_printf_float+0xb6>
 8007b42:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007b46:	f240 80dd 	bls.w	8007d04 <_printf_float+0x3a8>
 8007b4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007b4e:	2200      	movs	r2, #0
 8007b50:	2300      	movs	r3, #0
 8007b52:	f7f8 ffc1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b56:	2800      	cmp	r0, #0
 8007b58:	d033      	beq.n	8007bc2 <_printf_float+0x266>
 8007b5a:	4a37      	ldr	r2, [pc, #220]	@ (8007c38 <_printf_float+0x2dc>)
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	4631      	mov	r1, r6
 8007b60:	4628      	mov	r0, r5
 8007b62:	47b8      	blx	r7
 8007b64:	3001      	adds	r0, #1
 8007b66:	f43f af54 	beq.w	8007a12 <_printf_float+0xb6>
 8007b6a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007b6e:	4543      	cmp	r3, r8
 8007b70:	db02      	blt.n	8007b78 <_printf_float+0x21c>
 8007b72:	6823      	ldr	r3, [r4, #0]
 8007b74:	07d8      	lsls	r0, r3, #31
 8007b76:	d50f      	bpl.n	8007b98 <_printf_float+0x23c>
 8007b78:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b7c:	4631      	mov	r1, r6
 8007b7e:	4628      	mov	r0, r5
 8007b80:	47b8      	blx	r7
 8007b82:	3001      	adds	r0, #1
 8007b84:	f43f af45 	beq.w	8007a12 <_printf_float+0xb6>
 8007b88:	f04f 0900 	mov.w	r9, #0
 8007b8c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b90:	f104 0a1a 	add.w	sl, r4, #26
 8007b94:	45c8      	cmp	r8, r9
 8007b96:	dc09      	bgt.n	8007bac <_printf_float+0x250>
 8007b98:	6823      	ldr	r3, [r4, #0]
 8007b9a:	079b      	lsls	r3, r3, #30
 8007b9c:	f100 8103 	bmi.w	8007da6 <_printf_float+0x44a>
 8007ba0:	68e0      	ldr	r0, [r4, #12]
 8007ba2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ba4:	4298      	cmp	r0, r3
 8007ba6:	bfb8      	it	lt
 8007ba8:	4618      	movlt	r0, r3
 8007baa:	e734      	b.n	8007a16 <_printf_float+0xba>
 8007bac:	2301      	movs	r3, #1
 8007bae:	4652      	mov	r2, sl
 8007bb0:	4631      	mov	r1, r6
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	47b8      	blx	r7
 8007bb6:	3001      	adds	r0, #1
 8007bb8:	f43f af2b 	beq.w	8007a12 <_printf_float+0xb6>
 8007bbc:	f109 0901 	add.w	r9, r9, #1
 8007bc0:	e7e8      	b.n	8007b94 <_printf_float+0x238>
 8007bc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	dc39      	bgt.n	8007c3c <_printf_float+0x2e0>
 8007bc8:	4a1b      	ldr	r2, [pc, #108]	@ (8007c38 <_printf_float+0x2dc>)
 8007bca:	2301      	movs	r3, #1
 8007bcc:	4631      	mov	r1, r6
 8007bce:	4628      	mov	r0, r5
 8007bd0:	47b8      	blx	r7
 8007bd2:	3001      	adds	r0, #1
 8007bd4:	f43f af1d 	beq.w	8007a12 <_printf_float+0xb6>
 8007bd8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007bdc:	ea59 0303 	orrs.w	r3, r9, r3
 8007be0:	d102      	bne.n	8007be8 <_printf_float+0x28c>
 8007be2:	6823      	ldr	r3, [r4, #0]
 8007be4:	07d9      	lsls	r1, r3, #31
 8007be6:	d5d7      	bpl.n	8007b98 <_printf_float+0x23c>
 8007be8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bec:	4631      	mov	r1, r6
 8007bee:	4628      	mov	r0, r5
 8007bf0:	47b8      	blx	r7
 8007bf2:	3001      	adds	r0, #1
 8007bf4:	f43f af0d 	beq.w	8007a12 <_printf_float+0xb6>
 8007bf8:	f04f 0a00 	mov.w	sl, #0
 8007bfc:	f104 0b1a 	add.w	fp, r4, #26
 8007c00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c02:	425b      	negs	r3, r3
 8007c04:	4553      	cmp	r3, sl
 8007c06:	dc01      	bgt.n	8007c0c <_printf_float+0x2b0>
 8007c08:	464b      	mov	r3, r9
 8007c0a:	e793      	b.n	8007b34 <_printf_float+0x1d8>
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	465a      	mov	r2, fp
 8007c10:	4631      	mov	r1, r6
 8007c12:	4628      	mov	r0, r5
 8007c14:	47b8      	blx	r7
 8007c16:	3001      	adds	r0, #1
 8007c18:	f43f aefb 	beq.w	8007a12 <_printf_float+0xb6>
 8007c1c:	f10a 0a01 	add.w	sl, sl, #1
 8007c20:	e7ee      	b.n	8007c00 <_printf_float+0x2a4>
 8007c22:	bf00      	nop
 8007c24:	7fefffff 	.word	0x7fefffff
 8007c28:	0800d284 	.word	0x0800d284
 8007c2c:	0800d288 	.word	0x0800d288
 8007c30:	0800d28c 	.word	0x0800d28c
 8007c34:	0800d290 	.word	0x0800d290
 8007c38:	0800d294 	.word	0x0800d294
 8007c3c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c3e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007c42:	4553      	cmp	r3, sl
 8007c44:	bfa8      	it	ge
 8007c46:	4653      	movge	r3, sl
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	4699      	mov	r9, r3
 8007c4c:	dc36      	bgt.n	8007cbc <_printf_float+0x360>
 8007c4e:	f04f 0b00 	mov.w	fp, #0
 8007c52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c56:	f104 021a 	add.w	r2, r4, #26
 8007c5a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c5c:	9306      	str	r3, [sp, #24]
 8007c5e:	eba3 0309 	sub.w	r3, r3, r9
 8007c62:	455b      	cmp	r3, fp
 8007c64:	dc31      	bgt.n	8007cca <_printf_float+0x36e>
 8007c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c68:	459a      	cmp	sl, r3
 8007c6a:	dc3a      	bgt.n	8007ce2 <_printf_float+0x386>
 8007c6c:	6823      	ldr	r3, [r4, #0]
 8007c6e:	07da      	lsls	r2, r3, #31
 8007c70:	d437      	bmi.n	8007ce2 <_printf_float+0x386>
 8007c72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c74:	ebaa 0903 	sub.w	r9, sl, r3
 8007c78:	9b06      	ldr	r3, [sp, #24]
 8007c7a:	ebaa 0303 	sub.w	r3, sl, r3
 8007c7e:	4599      	cmp	r9, r3
 8007c80:	bfa8      	it	ge
 8007c82:	4699      	movge	r9, r3
 8007c84:	f1b9 0f00 	cmp.w	r9, #0
 8007c88:	dc33      	bgt.n	8007cf2 <_printf_float+0x396>
 8007c8a:	f04f 0800 	mov.w	r8, #0
 8007c8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c92:	f104 0b1a 	add.w	fp, r4, #26
 8007c96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c98:	ebaa 0303 	sub.w	r3, sl, r3
 8007c9c:	eba3 0309 	sub.w	r3, r3, r9
 8007ca0:	4543      	cmp	r3, r8
 8007ca2:	f77f af79 	ble.w	8007b98 <_printf_float+0x23c>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	465a      	mov	r2, fp
 8007caa:	4631      	mov	r1, r6
 8007cac:	4628      	mov	r0, r5
 8007cae:	47b8      	blx	r7
 8007cb0:	3001      	adds	r0, #1
 8007cb2:	f43f aeae 	beq.w	8007a12 <_printf_float+0xb6>
 8007cb6:	f108 0801 	add.w	r8, r8, #1
 8007cba:	e7ec      	b.n	8007c96 <_printf_float+0x33a>
 8007cbc:	4642      	mov	r2, r8
 8007cbe:	4631      	mov	r1, r6
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	47b8      	blx	r7
 8007cc4:	3001      	adds	r0, #1
 8007cc6:	d1c2      	bne.n	8007c4e <_printf_float+0x2f2>
 8007cc8:	e6a3      	b.n	8007a12 <_printf_float+0xb6>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	4631      	mov	r1, r6
 8007cce:	4628      	mov	r0, r5
 8007cd0:	9206      	str	r2, [sp, #24]
 8007cd2:	47b8      	blx	r7
 8007cd4:	3001      	adds	r0, #1
 8007cd6:	f43f ae9c 	beq.w	8007a12 <_printf_float+0xb6>
 8007cda:	9a06      	ldr	r2, [sp, #24]
 8007cdc:	f10b 0b01 	add.w	fp, fp, #1
 8007ce0:	e7bb      	b.n	8007c5a <_printf_float+0x2fe>
 8007ce2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ce6:	4631      	mov	r1, r6
 8007ce8:	4628      	mov	r0, r5
 8007cea:	47b8      	blx	r7
 8007cec:	3001      	adds	r0, #1
 8007cee:	d1c0      	bne.n	8007c72 <_printf_float+0x316>
 8007cf0:	e68f      	b.n	8007a12 <_printf_float+0xb6>
 8007cf2:	9a06      	ldr	r2, [sp, #24]
 8007cf4:	464b      	mov	r3, r9
 8007cf6:	4442      	add	r2, r8
 8007cf8:	4631      	mov	r1, r6
 8007cfa:	4628      	mov	r0, r5
 8007cfc:	47b8      	blx	r7
 8007cfe:	3001      	adds	r0, #1
 8007d00:	d1c3      	bne.n	8007c8a <_printf_float+0x32e>
 8007d02:	e686      	b.n	8007a12 <_printf_float+0xb6>
 8007d04:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007d08:	f1ba 0f01 	cmp.w	sl, #1
 8007d0c:	dc01      	bgt.n	8007d12 <_printf_float+0x3b6>
 8007d0e:	07db      	lsls	r3, r3, #31
 8007d10:	d536      	bpl.n	8007d80 <_printf_float+0x424>
 8007d12:	2301      	movs	r3, #1
 8007d14:	4642      	mov	r2, r8
 8007d16:	4631      	mov	r1, r6
 8007d18:	4628      	mov	r0, r5
 8007d1a:	47b8      	blx	r7
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	f43f ae78 	beq.w	8007a12 <_printf_float+0xb6>
 8007d22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d26:	4631      	mov	r1, r6
 8007d28:	4628      	mov	r0, r5
 8007d2a:	47b8      	blx	r7
 8007d2c:	3001      	adds	r0, #1
 8007d2e:	f43f ae70 	beq.w	8007a12 <_printf_float+0xb6>
 8007d32:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007d36:	2200      	movs	r2, #0
 8007d38:	2300      	movs	r3, #0
 8007d3a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d3e:	f7f8 fecb 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d42:	b9c0      	cbnz	r0, 8007d76 <_printf_float+0x41a>
 8007d44:	4653      	mov	r3, sl
 8007d46:	f108 0201 	add.w	r2, r8, #1
 8007d4a:	4631      	mov	r1, r6
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	47b8      	blx	r7
 8007d50:	3001      	adds	r0, #1
 8007d52:	d10c      	bne.n	8007d6e <_printf_float+0x412>
 8007d54:	e65d      	b.n	8007a12 <_printf_float+0xb6>
 8007d56:	2301      	movs	r3, #1
 8007d58:	465a      	mov	r2, fp
 8007d5a:	4631      	mov	r1, r6
 8007d5c:	4628      	mov	r0, r5
 8007d5e:	47b8      	blx	r7
 8007d60:	3001      	adds	r0, #1
 8007d62:	f43f ae56 	beq.w	8007a12 <_printf_float+0xb6>
 8007d66:	f108 0801 	add.w	r8, r8, #1
 8007d6a:	45d0      	cmp	r8, sl
 8007d6c:	dbf3      	blt.n	8007d56 <_printf_float+0x3fa>
 8007d6e:	464b      	mov	r3, r9
 8007d70:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007d74:	e6df      	b.n	8007b36 <_printf_float+0x1da>
 8007d76:	f04f 0800 	mov.w	r8, #0
 8007d7a:	f104 0b1a 	add.w	fp, r4, #26
 8007d7e:	e7f4      	b.n	8007d6a <_printf_float+0x40e>
 8007d80:	2301      	movs	r3, #1
 8007d82:	4642      	mov	r2, r8
 8007d84:	e7e1      	b.n	8007d4a <_printf_float+0x3ee>
 8007d86:	2301      	movs	r3, #1
 8007d88:	464a      	mov	r2, r9
 8007d8a:	4631      	mov	r1, r6
 8007d8c:	4628      	mov	r0, r5
 8007d8e:	47b8      	blx	r7
 8007d90:	3001      	adds	r0, #1
 8007d92:	f43f ae3e 	beq.w	8007a12 <_printf_float+0xb6>
 8007d96:	f108 0801 	add.w	r8, r8, #1
 8007d9a:	68e3      	ldr	r3, [r4, #12]
 8007d9c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d9e:	1a5b      	subs	r3, r3, r1
 8007da0:	4543      	cmp	r3, r8
 8007da2:	dcf0      	bgt.n	8007d86 <_printf_float+0x42a>
 8007da4:	e6fc      	b.n	8007ba0 <_printf_float+0x244>
 8007da6:	f04f 0800 	mov.w	r8, #0
 8007daa:	f104 0919 	add.w	r9, r4, #25
 8007dae:	e7f4      	b.n	8007d9a <_printf_float+0x43e>

08007db0 <_printf_common>:
 8007db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007db4:	4616      	mov	r6, r2
 8007db6:	4698      	mov	r8, r3
 8007db8:	688a      	ldr	r2, [r1, #8]
 8007dba:	690b      	ldr	r3, [r1, #16]
 8007dbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	bfb8      	it	lt
 8007dc4:	4613      	movlt	r3, r2
 8007dc6:	6033      	str	r3, [r6, #0]
 8007dc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007dcc:	4607      	mov	r7, r0
 8007dce:	460c      	mov	r4, r1
 8007dd0:	b10a      	cbz	r2, 8007dd6 <_printf_common+0x26>
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	6033      	str	r3, [r6, #0]
 8007dd6:	6823      	ldr	r3, [r4, #0]
 8007dd8:	0699      	lsls	r1, r3, #26
 8007dda:	bf42      	ittt	mi
 8007ddc:	6833      	ldrmi	r3, [r6, #0]
 8007dde:	3302      	addmi	r3, #2
 8007de0:	6033      	strmi	r3, [r6, #0]
 8007de2:	6825      	ldr	r5, [r4, #0]
 8007de4:	f015 0506 	ands.w	r5, r5, #6
 8007de8:	d106      	bne.n	8007df8 <_printf_common+0x48>
 8007dea:	f104 0a19 	add.w	sl, r4, #25
 8007dee:	68e3      	ldr	r3, [r4, #12]
 8007df0:	6832      	ldr	r2, [r6, #0]
 8007df2:	1a9b      	subs	r3, r3, r2
 8007df4:	42ab      	cmp	r3, r5
 8007df6:	dc26      	bgt.n	8007e46 <_printf_common+0x96>
 8007df8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007dfc:	6822      	ldr	r2, [r4, #0]
 8007dfe:	3b00      	subs	r3, #0
 8007e00:	bf18      	it	ne
 8007e02:	2301      	movne	r3, #1
 8007e04:	0692      	lsls	r2, r2, #26
 8007e06:	d42b      	bmi.n	8007e60 <_printf_common+0xb0>
 8007e08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007e0c:	4641      	mov	r1, r8
 8007e0e:	4638      	mov	r0, r7
 8007e10:	47c8      	blx	r9
 8007e12:	3001      	adds	r0, #1
 8007e14:	d01e      	beq.n	8007e54 <_printf_common+0xa4>
 8007e16:	6823      	ldr	r3, [r4, #0]
 8007e18:	6922      	ldr	r2, [r4, #16]
 8007e1a:	f003 0306 	and.w	r3, r3, #6
 8007e1e:	2b04      	cmp	r3, #4
 8007e20:	bf02      	ittt	eq
 8007e22:	68e5      	ldreq	r5, [r4, #12]
 8007e24:	6833      	ldreq	r3, [r6, #0]
 8007e26:	1aed      	subeq	r5, r5, r3
 8007e28:	68a3      	ldr	r3, [r4, #8]
 8007e2a:	bf0c      	ite	eq
 8007e2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e30:	2500      	movne	r5, #0
 8007e32:	4293      	cmp	r3, r2
 8007e34:	bfc4      	itt	gt
 8007e36:	1a9b      	subgt	r3, r3, r2
 8007e38:	18ed      	addgt	r5, r5, r3
 8007e3a:	2600      	movs	r6, #0
 8007e3c:	341a      	adds	r4, #26
 8007e3e:	42b5      	cmp	r5, r6
 8007e40:	d11a      	bne.n	8007e78 <_printf_common+0xc8>
 8007e42:	2000      	movs	r0, #0
 8007e44:	e008      	b.n	8007e58 <_printf_common+0xa8>
 8007e46:	2301      	movs	r3, #1
 8007e48:	4652      	mov	r2, sl
 8007e4a:	4641      	mov	r1, r8
 8007e4c:	4638      	mov	r0, r7
 8007e4e:	47c8      	blx	r9
 8007e50:	3001      	adds	r0, #1
 8007e52:	d103      	bne.n	8007e5c <_printf_common+0xac>
 8007e54:	f04f 30ff 	mov.w	r0, #4294967295
 8007e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e5c:	3501      	adds	r5, #1
 8007e5e:	e7c6      	b.n	8007dee <_printf_common+0x3e>
 8007e60:	18e1      	adds	r1, r4, r3
 8007e62:	1c5a      	adds	r2, r3, #1
 8007e64:	2030      	movs	r0, #48	@ 0x30
 8007e66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e6a:	4422      	add	r2, r4
 8007e6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e74:	3302      	adds	r3, #2
 8007e76:	e7c7      	b.n	8007e08 <_printf_common+0x58>
 8007e78:	2301      	movs	r3, #1
 8007e7a:	4622      	mov	r2, r4
 8007e7c:	4641      	mov	r1, r8
 8007e7e:	4638      	mov	r0, r7
 8007e80:	47c8      	blx	r9
 8007e82:	3001      	adds	r0, #1
 8007e84:	d0e6      	beq.n	8007e54 <_printf_common+0xa4>
 8007e86:	3601      	adds	r6, #1
 8007e88:	e7d9      	b.n	8007e3e <_printf_common+0x8e>
	...

08007e8c <_printf_i>:
 8007e8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e90:	7e0f      	ldrb	r7, [r1, #24]
 8007e92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e94:	2f78      	cmp	r7, #120	@ 0x78
 8007e96:	4691      	mov	r9, r2
 8007e98:	4680      	mov	r8, r0
 8007e9a:	460c      	mov	r4, r1
 8007e9c:	469a      	mov	sl, r3
 8007e9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007ea2:	d807      	bhi.n	8007eb4 <_printf_i+0x28>
 8007ea4:	2f62      	cmp	r7, #98	@ 0x62
 8007ea6:	d80a      	bhi.n	8007ebe <_printf_i+0x32>
 8007ea8:	2f00      	cmp	r7, #0
 8007eaa:	f000 80d2 	beq.w	8008052 <_printf_i+0x1c6>
 8007eae:	2f58      	cmp	r7, #88	@ 0x58
 8007eb0:	f000 80b9 	beq.w	8008026 <_printf_i+0x19a>
 8007eb4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007eb8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ebc:	e03a      	b.n	8007f34 <_printf_i+0xa8>
 8007ebe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007ec2:	2b15      	cmp	r3, #21
 8007ec4:	d8f6      	bhi.n	8007eb4 <_printf_i+0x28>
 8007ec6:	a101      	add	r1, pc, #4	@ (adr r1, 8007ecc <_printf_i+0x40>)
 8007ec8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ecc:	08007f25 	.word	0x08007f25
 8007ed0:	08007f39 	.word	0x08007f39
 8007ed4:	08007eb5 	.word	0x08007eb5
 8007ed8:	08007eb5 	.word	0x08007eb5
 8007edc:	08007eb5 	.word	0x08007eb5
 8007ee0:	08007eb5 	.word	0x08007eb5
 8007ee4:	08007f39 	.word	0x08007f39
 8007ee8:	08007eb5 	.word	0x08007eb5
 8007eec:	08007eb5 	.word	0x08007eb5
 8007ef0:	08007eb5 	.word	0x08007eb5
 8007ef4:	08007eb5 	.word	0x08007eb5
 8007ef8:	08008039 	.word	0x08008039
 8007efc:	08007f63 	.word	0x08007f63
 8007f00:	08007ff3 	.word	0x08007ff3
 8007f04:	08007eb5 	.word	0x08007eb5
 8007f08:	08007eb5 	.word	0x08007eb5
 8007f0c:	0800805b 	.word	0x0800805b
 8007f10:	08007eb5 	.word	0x08007eb5
 8007f14:	08007f63 	.word	0x08007f63
 8007f18:	08007eb5 	.word	0x08007eb5
 8007f1c:	08007eb5 	.word	0x08007eb5
 8007f20:	08007ffb 	.word	0x08007ffb
 8007f24:	6833      	ldr	r3, [r6, #0]
 8007f26:	1d1a      	adds	r2, r3, #4
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	6032      	str	r2, [r6, #0]
 8007f2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f34:	2301      	movs	r3, #1
 8007f36:	e09d      	b.n	8008074 <_printf_i+0x1e8>
 8007f38:	6833      	ldr	r3, [r6, #0]
 8007f3a:	6820      	ldr	r0, [r4, #0]
 8007f3c:	1d19      	adds	r1, r3, #4
 8007f3e:	6031      	str	r1, [r6, #0]
 8007f40:	0606      	lsls	r6, r0, #24
 8007f42:	d501      	bpl.n	8007f48 <_printf_i+0xbc>
 8007f44:	681d      	ldr	r5, [r3, #0]
 8007f46:	e003      	b.n	8007f50 <_printf_i+0xc4>
 8007f48:	0645      	lsls	r5, r0, #25
 8007f4a:	d5fb      	bpl.n	8007f44 <_printf_i+0xb8>
 8007f4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f50:	2d00      	cmp	r5, #0
 8007f52:	da03      	bge.n	8007f5c <_printf_i+0xd0>
 8007f54:	232d      	movs	r3, #45	@ 0x2d
 8007f56:	426d      	negs	r5, r5
 8007f58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f5c:	4859      	ldr	r0, [pc, #356]	@ (80080c4 <_printf_i+0x238>)
 8007f5e:	230a      	movs	r3, #10
 8007f60:	e011      	b.n	8007f86 <_printf_i+0xfa>
 8007f62:	6821      	ldr	r1, [r4, #0]
 8007f64:	6833      	ldr	r3, [r6, #0]
 8007f66:	0608      	lsls	r0, r1, #24
 8007f68:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f6c:	d402      	bmi.n	8007f74 <_printf_i+0xe8>
 8007f6e:	0649      	lsls	r1, r1, #25
 8007f70:	bf48      	it	mi
 8007f72:	b2ad      	uxthmi	r5, r5
 8007f74:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f76:	4853      	ldr	r0, [pc, #332]	@ (80080c4 <_printf_i+0x238>)
 8007f78:	6033      	str	r3, [r6, #0]
 8007f7a:	bf14      	ite	ne
 8007f7c:	230a      	movne	r3, #10
 8007f7e:	2308      	moveq	r3, #8
 8007f80:	2100      	movs	r1, #0
 8007f82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f86:	6866      	ldr	r6, [r4, #4]
 8007f88:	60a6      	str	r6, [r4, #8]
 8007f8a:	2e00      	cmp	r6, #0
 8007f8c:	bfa2      	ittt	ge
 8007f8e:	6821      	ldrge	r1, [r4, #0]
 8007f90:	f021 0104 	bicge.w	r1, r1, #4
 8007f94:	6021      	strge	r1, [r4, #0]
 8007f96:	b90d      	cbnz	r5, 8007f9c <_printf_i+0x110>
 8007f98:	2e00      	cmp	r6, #0
 8007f9a:	d04b      	beq.n	8008034 <_printf_i+0x1a8>
 8007f9c:	4616      	mov	r6, r2
 8007f9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007fa2:	fb03 5711 	mls	r7, r3, r1, r5
 8007fa6:	5dc7      	ldrb	r7, [r0, r7]
 8007fa8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007fac:	462f      	mov	r7, r5
 8007fae:	42bb      	cmp	r3, r7
 8007fb0:	460d      	mov	r5, r1
 8007fb2:	d9f4      	bls.n	8007f9e <_printf_i+0x112>
 8007fb4:	2b08      	cmp	r3, #8
 8007fb6:	d10b      	bne.n	8007fd0 <_printf_i+0x144>
 8007fb8:	6823      	ldr	r3, [r4, #0]
 8007fba:	07df      	lsls	r7, r3, #31
 8007fbc:	d508      	bpl.n	8007fd0 <_printf_i+0x144>
 8007fbe:	6923      	ldr	r3, [r4, #16]
 8007fc0:	6861      	ldr	r1, [r4, #4]
 8007fc2:	4299      	cmp	r1, r3
 8007fc4:	bfde      	ittt	le
 8007fc6:	2330      	movle	r3, #48	@ 0x30
 8007fc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007fcc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007fd0:	1b92      	subs	r2, r2, r6
 8007fd2:	6122      	str	r2, [r4, #16]
 8007fd4:	f8cd a000 	str.w	sl, [sp]
 8007fd8:	464b      	mov	r3, r9
 8007fda:	aa03      	add	r2, sp, #12
 8007fdc:	4621      	mov	r1, r4
 8007fde:	4640      	mov	r0, r8
 8007fe0:	f7ff fee6 	bl	8007db0 <_printf_common>
 8007fe4:	3001      	adds	r0, #1
 8007fe6:	d14a      	bne.n	800807e <_printf_i+0x1f2>
 8007fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8007fec:	b004      	add	sp, #16
 8007fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ff2:	6823      	ldr	r3, [r4, #0]
 8007ff4:	f043 0320 	orr.w	r3, r3, #32
 8007ff8:	6023      	str	r3, [r4, #0]
 8007ffa:	4833      	ldr	r0, [pc, #204]	@ (80080c8 <_printf_i+0x23c>)
 8007ffc:	2778      	movs	r7, #120	@ 0x78
 8007ffe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008002:	6823      	ldr	r3, [r4, #0]
 8008004:	6831      	ldr	r1, [r6, #0]
 8008006:	061f      	lsls	r7, r3, #24
 8008008:	f851 5b04 	ldr.w	r5, [r1], #4
 800800c:	d402      	bmi.n	8008014 <_printf_i+0x188>
 800800e:	065f      	lsls	r7, r3, #25
 8008010:	bf48      	it	mi
 8008012:	b2ad      	uxthmi	r5, r5
 8008014:	6031      	str	r1, [r6, #0]
 8008016:	07d9      	lsls	r1, r3, #31
 8008018:	bf44      	itt	mi
 800801a:	f043 0320 	orrmi.w	r3, r3, #32
 800801e:	6023      	strmi	r3, [r4, #0]
 8008020:	b11d      	cbz	r5, 800802a <_printf_i+0x19e>
 8008022:	2310      	movs	r3, #16
 8008024:	e7ac      	b.n	8007f80 <_printf_i+0xf4>
 8008026:	4827      	ldr	r0, [pc, #156]	@ (80080c4 <_printf_i+0x238>)
 8008028:	e7e9      	b.n	8007ffe <_printf_i+0x172>
 800802a:	6823      	ldr	r3, [r4, #0]
 800802c:	f023 0320 	bic.w	r3, r3, #32
 8008030:	6023      	str	r3, [r4, #0]
 8008032:	e7f6      	b.n	8008022 <_printf_i+0x196>
 8008034:	4616      	mov	r6, r2
 8008036:	e7bd      	b.n	8007fb4 <_printf_i+0x128>
 8008038:	6833      	ldr	r3, [r6, #0]
 800803a:	6825      	ldr	r5, [r4, #0]
 800803c:	6961      	ldr	r1, [r4, #20]
 800803e:	1d18      	adds	r0, r3, #4
 8008040:	6030      	str	r0, [r6, #0]
 8008042:	062e      	lsls	r6, r5, #24
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	d501      	bpl.n	800804c <_printf_i+0x1c0>
 8008048:	6019      	str	r1, [r3, #0]
 800804a:	e002      	b.n	8008052 <_printf_i+0x1c6>
 800804c:	0668      	lsls	r0, r5, #25
 800804e:	d5fb      	bpl.n	8008048 <_printf_i+0x1bc>
 8008050:	8019      	strh	r1, [r3, #0]
 8008052:	2300      	movs	r3, #0
 8008054:	6123      	str	r3, [r4, #16]
 8008056:	4616      	mov	r6, r2
 8008058:	e7bc      	b.n	8007fd4 <_printf_i+0x148>
 800805a:	6833      	ldr	r3, [r6, #0]
 800805c:	1d1a      	adds	r2, r3, #4
 800805e:	6032      	str	r2, [r6, #0]
 8008060:	681e      	ldr	r6, [r3, #0]
 8008062:	6862      	ldr	r2, [r4, #4]
 8008064:	2100      	movs	r1, #0
 8008066:	4630      	mov	r0, r6
 8008068:	f7f8 f8ba 	bl	80001e0 <memchr>
 800806c:	b108      	cbz	r0, 8008072 <_printf_i+0x1e6>
 800806e:	1b80      	subs	r0, r0, r6
 8008070:	6060      	str	r0, [r4, #4]
 8008072:	6863      	ldr	r3, [r4, #4]
 8008074:	6123      	str	r3, [r4, #16]
 8008076:	2300      	movs	r3, #0
 8008078:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800807c:	e7aa      	b.n	8007fd4 <_printf_i+0x148>
 800807e:	6923      	ldr	r3, [r4, #16]
 8008080:	4632      	mov	r2, r6
 8008082:	4649      	mov	r1, r9
 8008084:	4640      	mov	r0, r8
 8008086:	47d0      	blx	sl
 8008088:	3001      	adds	r0, #1
 800808a:	d0ad      	beq.n	8007fe8 <_printf_i+0x15c>
 800808c:	6823      	ldr	r3, [r4, #0]
 800808e:	079b      	lsls	r3, r3, #30
 8008090:	d413      	bmi.n	80080ba <_printf_i+0x22e>
 8008092:	68e0      	ldr	r0, [r4, #12]
 8008094:	9b03      	ldr	r3, [sp, #12]
 8008096:	4298      	cmp	r0, r3
 8008098:	bfb8      	it	lt
 800809a:	4618      	movlt	r0, r3
 800809c:	e7a6      	b.n	8007fec <_printf_i+0x160>
 800809e:	2301      	movs	r3, #1
 80080a0:	4632      	mov	r2, r6
 80080a2:	4649      	mov	r1, r9
 80080a4:	4640      	mov	r0, r8
 80080a6:	47d0      	blx	sl
 80080a8:	3001      	adds	r0, #1
 80080aa:	d09d      	beq.n	8007fe8 <_printf_i+0x15c>
 80080ac:	3501      	adds	r5, #1
 80080ae:	68e3      	ldr	r3, [r4, #12]
 80080b0:	9903      	ldr	r1, [sp, #12]
 80080b2:	1a5b      	subs	r3, r3, r1
 80080b4:	42ab      	cmp	r3, r5
 80080b6:	dcf2      	bgt.n	800809e <_printf_i+0x212>
 80080b8:	e7eb      	b.n	8008092 <_printf_i+0x206>
 80080ba:	2500      	movs	r5, #0
 80080bc:	f104 0619 	add.w	r6, r4, #25
 80080c0:	e7f5      	b.n	80080ae <_printf_i+0x222>
 80080c2:	bf00      	nop
 80080c4:	0800d296 	.word	0x0800d296
 80080c8:	0800d2a7 	.word	0x0800d2a7

080080cc <_scanf_float>:
 80080cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080d0:	b087      	sub	sp, #28
 80080d2:	4617      	mov	r7, r2
 80080d4:	9303      	str	r3, [sp, #12]
 80080d6:	688b      	ldr	r3, [r1, #8]
 80080d8:	1e5a      	subs	r2, r3, #1
 80080da:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80080de:	bf81      	itttt	hi
 80080e0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80080e4:	eb03 0b05 	addhi.w	fp, r3, r5
 80080e8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80080ec:	608b      	strhi	r3, [r1, #8]
 80080ee:	680b      	ldr	r3, [r1, #0]
 80080f0:	460a      	mov	r2, r1
 80080f2:	f04f 0500 	mov.w	r5, #0
 80080f6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80080fa:	f842 3b1c 	str.w	r3, [r2], #28
 80080fe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008102:	4680      	mov	r8, r0
 8008104:	460c      	mov	r4, r1
 8008106:	bf98      	it	ls
 8008108:	f04f 0b00 	movls.w	fp, #0
 800810c:	9201      	str	r2, [sp, #4]
 800810e:	4616      	mov	r6, r2
 8008110:	46aa      	mov	sl, r5
 8008112:	46a9      	mov	r9, r5
 8008114:	9502      	str	r5, [sp, #8]
 8008116:	68a2      	ldr	r2, [r4, #8]
 8008118:	b152      	cbz	r2, 8008130 <_scanf_float+0x64>
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	2b4e      	cmp	r3, #78	@ 0x4e
 8008120:	d864      	bhi.n	80081ec <_scanf_float+0x120>
 8008122:	2b40      	cmp	r3, #64	@ 0x40
 8008124:	d83c      	bhi.n	80081a0 <_scanf_float+0xd4>
 8008126:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800812a:	b2c8      	uxtb	r0, r1
 800812c:	280e      	cmp	r0, #14
 800812e:	d93a      	bls.n	80081a6 <_scanf_float+0xda>
 8008130:	f1b9 0f00 	cmp.w	r9, #0
 8008134:	d003      	beq.n	800813e <_scanf_float+0x72>
 8008136:	6823      	ldr	r3, [r4, #0]
 8008138:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800813c:	6023      	str	r3, [r4, #0]
 800813e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008142:	f1ba 0f01 	cmp.w	sl, #1
 8008146:	f200 8117 	bhi.w	8008378 <_scanf_float+0x2ac>
 800814a:	9b01      	ldr	r3, [sp, #4]
 800814c:	429e      	cmp	r6, r3
 800814e:	f200 8108 	bhi.w	8008362 <_scanf_float+0x296>
 8008152:	2001      	movs	r0, #1
 8008154:	b007      	add	sp, #28
 8008156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800815a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800815e:	2a0d      	cmp	r2, #13
 8008160:	d8e6      	bhi.n	8008130 <_scanf_float+0x64>
 8008162:	a101      	add	r1, pc, #4	@ (adr r1, 8008168 <_scanf_float+0x9c>)
 8008164:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008168:	080082af 	.word	0x080082af
 800816c:	08008131 	.word	0x08008131
 8008170:	08008131 	.word	0x08008131
 8008174:	08008131 	.word	0x08008131
 8008178:	0800830f 	.word	0x0800830f
 800817c:	080082e7 	.word	0x080082e7
 8008180:	08008131 	.word	0x08008131
 8008184:	08008131 	.word	0x08008131
 8008188:	080082bd 	.word	0x080082bd
 800818c:	08008131 	.word	0x08008131
 8008190:	08008131 	.word	0x08008131
 8008194:	08008131 	.word	0x08008131
 8008198:	08008131 	.word	0x08008131
 800819c:	08008275 	.word	0x08008275
 80081a0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80081a4:	e7db      	b.n	800815e <_scanf_float+0x92>
 80081a6:	290e      	cmp	r1, #14
 80081a8:	d8c2      	bhi.n	8008130 <_scanf_float+0x64>
 80081aa:	a001      	add	r0, pc, #4	@ (adr r0, 80081b0 <_scanf_float+0xe4>)
 80081ac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80081b0:	08008265 	.word	0x08008265
 80081b4:	08008131 	.word	0x08008131
 80081b8:	08008265 	.word	0x08008265
 80081bc:	080082fb 	.word	0x080082fb
 80081c0:	08008131 	.word	0x08008131
 80081c4:	0800820d 	.word	0x0800820d
 80081c8:	0800824b 	.word	0x0800824b
 80081cc:	0800824b 	.word	0x0800824b
 80081d0:	0800824b 	.word	0x0800824b
 80081d4:	0800824b 	.word	0x0800824b
 80081d8:	0800824b 	.word	0x0800824b
 80081dc:	0800824b 	.word	0x0800824b
 80081e0:	0800824b 	.word	0x0800824b
 80081e4:	0800824b 	.word	0x0800824b
 80081e8:	0800824b 	.word	0x0800824b
 80081ec:	2b6e      	cmp	r3, #110	@ 0x6e
 80081ee:	d809      	bhi.n	8008204 <_scanf_float+0x138>
 80081f0:	2b60      	cmp	r3, #96	@ 0x60
 80081f2:	d8b2      	bhi.n	800815a <_scanf_float+0x8e>
 80081f4:	2b54      	cmp	r3, #84	@ 0x54
 80081f6:	d07b      	beq.n	80082f0 <_scanf_float+0x224>
 80081f8:	2b59      	cmp	r3, #89	@ 0x59
 80081fa:	d199      	bne.n	8008130 <_scanf_float+0x64>
 80081fc:	2d07      	cmp	r5, #7
 80081fe:	d197      	bne.n	8008130 <_scanf_float+0x64>
 8008200:	2508      	movs	r5, #8
 8008202:	e02c      	b.n	800825e <_scanf_float+0x192>
 8008204:	2b74      	cmp	r3, #116	@ 0x74
 8008206:	d073      	beq.n	80082f0 <_scanf_float+0x224>
 8008208:	2b79      	cmp	r3, #121	@ 0x79
 800820a:	e7f6      	b.n	80081fa <_scanf_float+0x12e>
 800820c:	6821      	ldr	r1, [r4, #0]
 800820e:	05c8      	lsls	r0, r1, #23
 8008210:	d51b      	bpl.n	800824a <_scanf_float+0x17e>
 8008212:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008216:	6021      	str	r1, [r4, #0]
 8008218:	f109 0901 	add.w	r9, r9, #1
 800821c:	f1bb 0f00 	cmp.w	fp, #0
 8008220:	d003      	beq.n	800822a <_scanf_float+0x15e>
 8008222:	3201      	adds	r2, #1
 8008224:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008228:	60a2      	str	r2, [r4, #8]
 800822a:	68a3      	ldr	r3, [r4, #8]
 800822c:	3b01      	subs	r3, #1
 800822e:	60a3      	str	r3, [r4, #8]
 8008230:	6923      	ldr	r3, [r4, #16]
 8008232:	3301      	adds	r3, #1
 8008234:	6123      	str	r3, [r4, #16]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	3b01      	subs	r3, #1
 800823a:	2b00      	cmp	r3, #0
 800823c:	607b      	str	r3, [r7, #4]
 800823e:	f340 8087 	ble.w	8008350 <_scanf_float+0x284>
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	3301      	adds	r3, #1
 8008246:	603b      	str	r3, [r7, #0]
 8008248:	e765      	b.n	8008116 <_scanf_float+0x4a>
 800824a:	eb1a 0105 	adds.w	r1, sl, r5
 800824e:	f47f af6f 	bne.w	8008130 <_scanf_float+0x64>
 8008252:	6822      	ldr	r2, [r4, #0]
 8008254:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008258:	6022      	str	r2, [r4, #0]
 800825a:	460d      	mov	r5, r1
 800825c:	468a      	mov	sl, r1
 800825e:	f806 3b01 	strb.w	r3, [r6], #1
 8008262:	e7e2      	b.n	800822a <_scanf_float+0x15e>
 8008264:	6822      	ldr	r2, [r4, #0]
 8008266:	0610      	lsls	r0, r2, #24
 8008268:	f57f af62 	bpl.w	8008130 <_scanf_float+0x64>
 800826c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008270:	6022      	str	r2, [r4, #0]
 8008272:	e7f4      	b.n	800825e <_scanf_float+0x192>
 8008274:	f1ba 0f00 	cmp.w	sl, #0
 8008278:	d10e      	bne.n	8008298 <_scanf_float+0x1cc>
 800827a:	f1b9 0f00 	cmp.w	r9, #0
 800827e:	d10e      	bne.n	800829e <_scanf_float+0x1d2>
 8008280:	6822      	ldr	r2, [r4, #0]
 8008282:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008286:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800828a:	d108      	bne.n	800829e <_scanf_float+0x1d2>
 800828c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008290:	6022      	str	r2, [r4, #0]
 8008292:	f04f 0a01 	mov.w	sl, #1
 8008296:	e7e2      	b.n	800825e <_scanf_float+0x192>
 8008298:	f1ba 0f02 	cmp.w	sl, #2
 800829c:	d055      	beq.n	800834a <_scanf_float+0x27e>
 800829e:	2d01      	cmp	r5, #1
 80082a0:	d002      	beq.n	80082a8 <_scanf_float+0x1dc>
 80082a2:	2d04      	cmp	r5, #4
 80082a4:	f47f af44 	bne.w	8008130 <_scanf_float+0x64>
 80082a8:	3501      	adds	r5, #1
 80082aa:	b2ed      	uxtb	r5, r5
 80082ac:	e7d7      	b.n	800825e <_scanf_float+0x192>
 80082ae:	f1ba 0f01 	cmp.w	sl, #1
 80082b2:	f47f af3d 	bne.w	8008130 <_scanf_float+0x64>
 80082b6:	f04f 0a02 	mov.w	sl, #2
 80082ba:	e7d0      	b.n	800825e <_scanf_float+0x192>
 80082bc:	b97d      	cbnz	r5, 80082de <_scanf_float+0x212>
 80082be:	f1b9 0f00 	cmp.w	r9, #0
 80082c2:	f47f af38 	bne.w	8008136 <_scanf_float+0x6a>
 80082c6:	6822      	ldr	r2, [r4, #0]
 80082c8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80082cc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80082d0:	f040 8108 	bne.w	80084e4 <_scanf_float+0x418>
 80082d4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80082d8:	6022      	str	r2, [r4, #0]
 80082da:	2501      	movs	r5, #1
 80082dc:	e7bf      	b.n	800825e <_scanf_float+0x192>
 80082de:	2d03      	cmp	r5, #3
 80082e0:	d0e2      	beq.n	80082a8 <_scanf_float+0x1dc>
 80082e2:	2d05      	cmp	r5, #5
 80082e4:	e7de      	b.n	80082a4 <_scanf_float+0x1d8>
 80082e6:	2d02      	cmp	r5, #2
 80082e8:	f47f af22 	bne.w	8008130 <_scanf_float+0x64>
 80082ec:	2503      	movs	r5, #3
 80082ee:	e7b6      	b.n	800825e <_scanf_float+0x192>
 80082f0:	2d06      	cmp	r5, #6
 80082f2:	f47f af1d 	bne.w	8008130 <_scanf_float+0x64>
 80082f6:	2507      	movs	r5, #7
 80082f8:	e7b1      	b.n	800825e <_scanf_float+0x192>
 80082fa:	6822      	ldr	r2, [r4, #0]
 80082fc:	0591      	lsls	r1, r2, #22
 80082fe:	f57f af17 	bpl.w	8008130 <_scanf_float+0x64>
 8008302:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008306:	6022      	str	r2, [r4, #0]
 8008308:	f8cd 9008 	str.w	r9, [sp, #8]
 800830c:	e7a7      	b.n	800825e <_scanf_float+0x192>
 800830e:	6822      	ldr	r2, [r4, #0]
 8008310:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008314:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008318:	d006      	beq.n	8008328 <_scanf_float+0x25c>
 800831a:	0550      	lsls	r0, r2, #21
 800831c:	f57f af08 	bpl.w	8008130 <_scanf_float+0x64>
 8008320:	f1b9 0f00 	cmp.w	r9, #0
 8008324:	f000 80de 	beq.w	80084e4 <_scanf_float+0x418>
 8008328:	0591      	lsls	r1, r2, #22
 800832a:	bf58      	it	pl
 800832c:	9902      	ldrpl	r1, [sp, #8]
 800832e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008332:	bf58      	it	pl
 8008334:	eba9 0101 	subpl.w	r1, r9, r1
 8008338:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800833c:	bf58      	it	pl
 800833e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008342:	6022      	str	r2, [r4, #0]
 8008344:	f04f 0900 	mov.w	r9, #0
 8008348:	e789      	b.n	800825e <_scanf_float+0x192>
 800834a:	f04f 0a03 	mov.w	sl, #3
 800834e:	e786      	b.n	800825e <_scanf_float+0x192>
 8008350:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008354:	4639      	mov	r1, r7
 8008356:	4640      	mov	r0, r8
 8008358:	4798      	blx	r3
 800835a:	2800      	cmp	r0, #0
 800835c:	f43f aedb 	beq.w	8008116 <_scanf_float+0x4a>
 8008360:	e6e6      	b.n	8008130 <_scanf_float+0x64>
 8008362:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008366:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800836a:	463a      	mov	r2, r7
 800836c:	4640      	mov	r0, r8
 800836e:	4798      	blx	r3
 8008370:	6923      	ldr	r3, [r4, #16]
 8008372:	3b01      	subs	r3, #1
 8008374:	6123      	str	r3, [r4, #16]
 8008376:	e6e8      	b.n	800814a <_scanf_float+0x7e>
 8008378:	1e6b      	subs	r3, r5, #1
 800837a:	2b06      	cmp	r3, #6
 800837c:	d824      	bhi.n	80083c8 <_scanf_float+0x2fc>
 800837e:	2d02      	cmp	r5, #2
 8008380:	d836      	bhi.n	80083f0 <_scanf_float+0x324>
 8008382:	9b01      	ldr	r3, [sp, #4]
 8008384:	429e      	cmp	r6, r3
 8008386:	f67f aee4 	bls.w	8008152 <_scanf_float+0x86>
 800838a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800838e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008392:	463a      	mov	r2, r7
 8008394:	4640      	mov	r0, r8
 8008396:	4798      	blx	r3
 8008398:	6923      	ldr	r3, [r4, #16]
 800839a:	3b01      	subs	r3, #1
 800839c:	6123      	str	r3, [r4, #16]
 800839e:	e7f0      	b.n	8008382 <_scanf_float+0x2b6>
 80083a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80083a4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80083a8:	463a      	mov	r2, r7
 80083aa:	4640      	mov	r0, r8
 80083ac:	4798      	blx	r3
 80083ae:	6923      	ldr	r3, [r4, #16]
 80083b0:	3b01      	subs	r3, #1
 80083b2:	6123      	str	r3, [r4, #16]
 80083b4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083b8:	fa5f fa8a 	uxtb.w	sl, sl
 80083bc:	f1ba 0f02 	cmp.w	sl, #2
 80083c0:	d1ee      	bne.n	80083a0 <_scanf_float+0x2d4>
 80083c2:	3d03      	subs	r5, #3
 80083c4:	b2ed      	uxtb	r5, r5
 80083c6:	1b76      	subs	r6, r6, r5
 80083c8:	6823      	ldr	r3, [r4, #0]
 80083ca:	05da      	lsls	r2, r3, #23
 80083cc:	d530      	bpl.n	8008430 <_scanf_float+0x364>
 80083ce:	055b      	lsls	r3, r3, #21
 80083d0:	d511      	bpl.n	80083f6 <_scanf_float+0x32a>
 80083d2:	9b01      	ldr	r3, [sp, #4]
 80083d4:	429e      	cmp	r6, r3
 80083d6:	f67f aebc 	bls.w	8008152 <_scanf_float+0x86>
 80083da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80083de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80083e2:	463a      	mov	r2, r7
 80083e4:	4640      	mov	r0, r8
 80083e6:	4798      	blx	r3
 80083e8:	6923      	ldr	r3, [r4, #16]
 80083ea:	3b01      	subs	r3, #1
 80083ec:	6123      	str	r3, [r4, #16]
 80083ee:	e7f0      	b.n	80083d2 <_scanf_float+0x306>
 80083f0:	46aa      	mov	sl, r5
 80083f2:	46b3      	mov	fp, r6
 80083f4:	e7de      	b.n	80083b4 <_scanf_float+0x2e8>
 80083f6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80083fa:	6923      	ldr	r3, [r4, #16]
 80083fc:	2965      	cmp	r1, #101	@ 0x65
 80083fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8008402:	f106 35ff 	add.w	r5, r6, #4294967295
 8008406:	6123      	str	r3, [r4, #16]
 8008408:	d00c      	beq.n	8008424 <_scanf_float+0x358>
 800840a:	2945      	cmp	r1, #69	@ 0x45
 800840c:	d00a      	beq.n	8008424 <_scanf_float+0x358>
 800840e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008412:	463a      	mov	r2, r7
 8008414:	4640      	mov	r0, r8
 8008416:	4798      	blx	r3
 8008418:	6923      	ldr	r3, [r4, #16]
 800841a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800841e:	3b01      	subs	r3, #1
 8008420:	1eb5      	subs	r5, r6, #2
 8008422:	6123      	str	r3, [r4, #16]
 8008424:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008428:	463a      	mov	r2, r7
 800842a:	4640      	mov	r0, r8
 800842c:	4798      	blx	r3
 800842e:	462e      	mov	r6, r5
 8008430:	6822      	ldr	r2, [r4, #0]
 8008432:	f012 0210 	ands.w	r2, r2, #16
 8008436:	d001      	beq.n	800843c <_scanf_float+0x370>
 8008438:	2000      	movs	r0, #0
 800843a:	e68b      	b.n	8008154 <_scanf_float+0x88>
 800843c:	7032      	strb	r2, [r6, #0]
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008444:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008448:	d11c      	bne.n	8008484 <_scanf_float+0x3b8>
 800844a:	9b02      	ldr	r3, [sp, #8]
 800844c:	454b      	cmp	r3, r9
 800844e:	eba3 0209 	sub.w	r2, r3, r9
 8008452:	d123      	bne.n	800849c <_scanf_float+0x3d0>
 8008454:	9901      	ldr	r1, [sp, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	4640      	mov	r0, r8
 800845a:	f002 fbf9 	bl	800ac50 <_strtod_r>
 800845e:	9b03      	ldr	r3, [sp, #12]
 8008460:	6821      	ldr	r1, [r4, #0]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f011 0f02 	tst.w	r1, #2
 8008468:	ec57 6b10 	vmov	r6, r7, d0
 800846c:	f103 0204 	add.w	r2, r3, #4
 8008470:	d01f      	beq.n	80084b2 <_scanf_float+0x3e6>
 8008472:	9903      	ldr	r1, [sp, #12]
 8008474:	600a      	str	r2, [r1, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	e9c3 6700 	strd	r6, r7, [r3]
 800847c:	68e3      	ldr	r3, [r4, #12]
 800847e:	3301      	adds	r3, #1
 8008480:	60e3      	str	r3, [r4, #12]
 8008482:	e7d9      	b.n	8008438 <_scanf_float+0x36c>
 8008484:	9b04      	ldr	r3, [sp, #16]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d0e4      	beq.n	8008454 <_scanf_float+0x388>
 800848a:	9905      	ldr	r1, [sp, #20]
 800848c:	230a      	movs	r3, #10
 800848e:	3101      	adds	r1, #1
 8008490:	4640      	mov	r0, r8
 8008492:	f002 fc5d 	bl	800ad50 <_strtol_r>
 8008496:	9b04      	ldr	r3, [sp, #16]
 8008498:	9e05      	ldr	r6, [sp, #20]
 800849a:	1ac2      	subs	r2, r0, r3
 800849c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80084a0:	429e      	cmp	r6, r3
 80084a2:	bf28      	it	cs
 80084a4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80084a8:	4910      	ldr	r1, [pc, #64]	@ (80084ec <_scanf_float+0x420>)
 80084aa:	4630      	mov	r0, r6
 80084ac:	f000 f8e4 	bl	8008678 <siprintf>
 80084b0:	e7d0      	b.n	8008454 <_scanf_float+0x388>
 80084b2:	f011 0f04 	tst.w	r1, #4
 80084b6:	9903      	ldr	r1, [sp, #12]
 80084b8:	600a      	str	r2, [r1, #0]
 80084ba:	d1dc      	bne.n	8008476 <_scanf_float+0x3aa>
 80084bc:	681d      	ldr	r5, [r3, #0]
 80084be:	4632      	mov	r2, r6
 80084c0:	463b      	mov	r3, r7
 80084c2:	4630      	mov	r0, r6
 80084c4:	4639      	mov	r1, r7
 80084c6:	f7f8 fb39 	bl	8000b3c <__aeabi_dcmpun>
 80084ca:	b128      	cbz	r0, 80084d8 <_scanf_float+0x40c>
 80084cc:	4808      	ldr	r0, [pc, #32]	@ (80084f0 <_scanf_float+0x424>)
 80084ce:	f000 f9b7 	bl	8008840 <nanf>
 80084d2:	ed85 0a00 	vstr	s0, [r5]
 80084d6:	e7d1      	b.n	800847c <_scanf_float+0x3b0>
 80084d8:	4630      	mov	r0, r6
 80084da:	4639      	mov	r1, r7
 80084dc:	f7f8 fb8c 	bl	8000bf8 <__aeabi_d2f>
 80084e0:	6028      	str	r0, [r5, #0]
 80084e2:	e7cb      	b.n	800847c <_scanf_float+0x3b0>
 80084e4:	f04f 0900 	mov.w	r9, #0
 80084e8:	e629      	b.n	800813e <_scanf_float+0x72>
 80084ea:	bf00      	nop
 80084ec:	0800d2b8 	.word	0x0800d2b8
 80084f0:	0800d64d 	.word	0x0800d64d

080084f4 <std>:
 80084f4:	2300      	movs	r3, #0
 80084f6:	b510      	push	{r4, lr}
 80084f8:	4604      	mov	r4, r0
 80084fa:	e9c0 3300 	strd	r3, r3, [r0]
 80084fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008502:	6083      	str	r3, [r0, #8]
 8008504:	8181      	strh	r1, [r0, #12]
 8008506:	6643      	str	r3, [r0, #100]	@ 0x64
 8008508:	81c2      	strh	r2, [r0, #14]
 800850a:	6183      	str	r3, [r0, #24]
 800850c:	4619      	mov	r1, r3
 800850e:	2208      	movs	r2, #8
 8008510:	305c      	adds	r0, #92	@ 0x5c
 8008512:	f000 f914 	bl	800873e <memset>
 8008516:	4b0d      	ldr	r3, [pc, #52]	@ (800854c <std+0x58>)
 8008518:	6263      	str	r3, [r4, #36]	@ 0x24
 800851a:	4b0d      	ldr	r3, [pc, #52]	@ (8008550 <std+0x5c>)
 800851c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800851e:	4b0d      	ldr	r3, [pc, #52]	@ (8008554 <std+0x60>)
 8008520:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008522:	4b0d      	ldr	r3, [pc, #52]	@ (8008558 <std+0x64>)
 8008524:	6323      	str	r3, [r4, #48]	@ 0x30
 8008526:	4b0d      	ldr	r3, [pc, #52]	@ (800855c <std+0x68>)
 8008528:	6224      	str	r4, [r4, #32]
 800852a:	429c      	cmp	r4, r3
 800852c:	d006      	beq.n	800853c <std+0x48>
 800852e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008532:	4294      	cmp	r4, r2
 8008534:	d002      	beq.n	800853c <std+0x48>
 8008536:	33d0      	adds	r3, #208	@ 0xd0
 8008538:	429c      	cmp	r4, r3
 800853a:	d105      	bne.n	8008548 <std+0x54>
 800853c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008544:	f000 b978 	b.w	8008838 <__retarget_lock_init_recursive>
 8008548:	bd10      	pop	{r4, pc}
 800854a:	bf00      	nop
 800854c:	080086b9 	.word	0x080086b9
 8008550:	080086db 	.word	0x080086db
 8008554:	08008713 	.word	0x08008713
 8008558:	08008737 	.word	0x08008737
 800855c:	200005c8 	.word	0x200005c8

08008560 <stdio_exit_handler>:
 8008560:	4a02      	ldr	r2, [pc, #8]	@ (800856c <stdio_exit_handler+0xc>)
 8008562:	4903      	ldr	r1, [pc, #12]	@ (8008570 <stdio_exit_handler+0x10>)
 8008564:	4803      	ldr	r0, [pc, #12]	@ (8008574 <stdio_exit_handler+0x14>)
 8008566:	f000 b869 	b.w	800863c <_fwalk_sglue>
 800856a:	bf00      	nop
 800856c:	20000090 	.word	0x20000090
 8008570:	0800b10d 	.word	0x0800b10d
 8008574:	200000a0 	.word	0x200000a0

08008578 <cleanup_stdio>:
 8008578:	6841      	ldr	r1, [r0, #4]
 800857a:	4b0c      	ldr	r3, [pc, #48]	@ (80085ac <cleanup_stdio+0x34>)
 800857c:	4299      	cmp	r1, r3
 800857e:	b510      	push	{r4, lr}
 8008580:	4604      	mov	r4, r0
 8008582:	d001      	beq.n	8008588 <cleanup_stdio+0x10>
 8008584:	f002 fdc2 	bl	800b10c <_fflush_r>
 8008588:	68a1      	ldr	r1, [r4, #8]
 800858a:	4b09      	ldr	r3, [pc, #36]	@ (80085b0 <cleanup_stdio+0x38>)
 800858c:	4299      	cmp	r1, r3
 800858e:	d002      	beq.n	8008596 <cleanup_stdio+0x1e>
 8008590:	4620      	mov	r0, r4
 8008592:	f002 fdbb 	bl	800b10c <_fflush_r>
 8008596:	68e1      	ldr	r1, [r4, #12]
 8008598:	4b06      	ldr	r3, [pc, #24]	@ (80085b4 <cleanup_stdio+0x3c>)
 800859a:	4299      	cmp	r1, r3
 800859c:	d004      	beq.n	80085a8 <cleanup_stdio+0x30>
 800859e:	4620      	mov	r0, r4
 80085a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085a4:	f002 bdb2 	b.w	800b10c <_fflush_r>
 80085a8:	bd10      	pop	{r4, pc}
 80085aa:	bf00      	nop
 80085ac:	200005c8 	.word	0x200005c8
 80085b0:	20000630 	.word	0x20000630
 80085b4:	20000698 	.word	0x20000698

080085b8 <global_stdio_init.part.0>:
 80085b8:	b510      	push	{r4, lr}
 80085ba:	4b0b      	ldr	r3, [pc, #44]	@ (80085e8 <global_stdio_init.part.0+0x30>)
 80085bc:	4c0b      	ldr	r4, [pc, #44]	@ (80085ec <global_stdio_init.part.0+0x34>)
 80085be:	4a0c      	ldr	r2, [pc, #48]	@ (80085f0 <global_stdio_init.part.0+0x38>)
 80085c0:	601a      	str	r2, [r3, #0]
 80085c2:	4620      	mov	r0, r4
 80085c4:	2200      	movs	r2, #0
 80085c6:	2104      	movs	r1, #4
 80085c8:	f7ff ff94 	bl	80084f4 <std>
 80085cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80085d0:	2201      	movs	r2, #1
 80085d2:	2109      	movs	r1, #9
 80085d4:	f7ff ff8e 	bl	80084f4 <std>
 80085d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80085dc:	2202      	movs	r2, #2
 80085de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085e2:	2112      	movs	r1, #18
 80085e4:	f7ff bf86 	b.w	80084f4 <std>
 80085e8:	20000700 	.word	0x20000700
 80085ec:	200005c8 	.word	0x200005c8
 80085f0:	08008561 	.word	0x08008561

080085f4 <__sfp_lock_acquire>:
 80085f4:	4801      	ldr	r0, [pc, #4]	@ (80085fc <__sfp_lock_acquire+0x8>)
 80085f6:	f000 b920 	b.w	800883a <__retarget_lock_acquire_recursive>
 80085fa:	bf00      	nop
 80085fc:	20000709 	.word	0x20000709

08008600 <__sfp_lock_release>:
 8008600:	4801      	ldr	r0, [pc, #4]	@ (8008608 <__sfp_lock_release+0x8>)
 8008602:	f000 b91b 	b.w	800883c <__retarget_lock_release_recursive>
 8008606:	bf00      	nop
 8008608:	20000709 	.word	0x20000709

0800860c <__sinit>:
 800860c:	b510      	push	{r4, lr}
 800860e:	4604      	mov	r4, r0
 8008610:	f7ff fff0 	bl	80085f4 <__sfp_lock_acquire>
 8008614:	6a23      	ldr	r3, [r4, #32]
 8008616:	b11b      	cbz	r3, 8008620 <__sinit+0x14>
 8008618:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800861c:	f7ff bff0 	b.w	8008600 <__sfp_lock_release>
 8008620:	4b04      	ldr	r3, [pc, #16]	@ (8008634 <__sinit+0x28>)
 8008622:	6223      	str	r3, [r4, #32]
 8008624:	4b04      	ldr	r3, [pc, #16]	@ (8008638 <__sinit+0x2c>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d1f5      	bne.n	8008618 <__sinit+0xc>
 800862c:	f7ff ffc4 	bl	80085b8 <global_stdio_init.part.0>
 8008630:	e7f2      	b.n	8008618 <__sinit+0xc>
 8008632:	bf00      	nop
 8008634:	08008579 	.word	0x08008579
 8008638:	20000700 	.word	0x20000700

0800863c <_fwalk_sglue>:
 800863c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008640:	4607      	mov	r7, r0
 8008642:	4688      	mov	r8, r1
 8008644:	4614      	mov	r4, r2
 8008646:	2600      	movs	r6, #0
 8008648:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800864c:	f1b9 0901 	subs.w	r9, r9, #1
 8008650:	d505      	bpl.n	800865e <_fwalk_sglue+0x22>
 8008652:	6824      	ldr	r4, [r4, #0]
 8008654:	2c00      	cmp	r4, #0
 8008656:	d1f7      	bne.n	8008648 <_fwalk_sglue+0xc>
 8008658:	4630      	mov	r0, r6
 800865a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800865e:	89ab      	ldrh	r3, [r5, #12]
 8008660:	2b01      	cmp	r3, #1
 8008662:	d907      	bls.n	8008674 <_fwalk_sglue+0x38>
 8008664:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008668:	3301      	adds	r3, #1
 800866a:	d003      	beq.n	8008674 <_fwalk_sglue+0x38>
 800866c:	4629      	mov	r1, r5
 800866e:	4638      	mov	r0, r7
 8008670:	47c0      	blx	r8
 8008672:	4306      	orrs	r6, r0
 8008674:	3568      	adds	r5, #104	@ 0x68
 8008676:	e7e9      	b.n	800864c <_fwalk_sglue+0x10>

08008678 <siprintf>:
 8008678:	b40e      	push	{r1, r2, r3}
 800867a:	b500      	push	{lr}
 800867c:	b09c      	sub	sp, #112	@ 0x70
 800867e:	ab1d      	add	r3, sp, #116	@ 0x74
 8008680:	9002      	str	r0, [sp, #8]
 8008682:	9006      	str	r0, [sp, #24]
 8008684:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008688:	4809      	ldr	r0, [pc, #36]	@ (80086b0 <siprintf+0x38>)
 800868a:	9107      	str	r1, [sp, #28]
 800868c:	9104      	str	r1, [sp, #16]
 800868e:	4909      	ldr	r1, [pc, #36]	@ (80086b4 <siprintf+0x3c>)
 8008690:	f853 2b04 	ldr.w	r2, [r3], #4
 8008694:	9105      	str	r1, [sp, #20]
 8008696:	6800      	ldr	r0, [r0, #0]
 8008698:	9301      	str	r3, [sp, #4]
 800869a:	a902      	add	r1, sp, #8
 800869c:	f002 fbb6 	bl	800ae0c <_svfiprintf_r>
 80086a0:	9b02      	ldr	r3, [sp, #8]
 80086a2:	2200      	movs	r2, #0
 80086a4:	701a      	strb	r2, [r3, #0]
 80086a6:	b01c      	add	sp, #112	@ 0x70
 80086a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80086ac:	b003      	add	sp, #12
 80086ae:	4770      	bx	lr
 80086b0:	2000009c 	.word	0x2000009c
 80086b4:	ffff0208 	.word	0xffff0208

080086b8 <__sread>:
 80086b8:	b510      	push	{r4, lr}
 80086ba:	460c      	mov	r4, r1
 80086bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086c0:	f000 f86c 	bl	800879c <_read_r>
 80086c4:	2800      	cmp	r0, #0
 80086c6:	bfab      	itete	ge
 80086c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80086ca:	89a3      	ldrhlt	r3, [r4, #12]
 80086cc:	181b      	addge	r3, r3, r0
 80086ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80086d2:	bfac      	ite	ge
 80086d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80086d6:	81a3      	strhlt	r3, [r4, #12]
 80086d8:	bd10      	pop	{r4, pc}

080086da <__swrite>:
 80086da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086de:	461f      	mov	r7, r3
 80086e0:	898b      	ldrh	r3, [r1, #12]
 80086e2:	05db      	lsls	r3, r3, #23
 80086e4:	4605      	mov	r5, r0
 80086e6:	460c      	mov	r4, r1
 80086e8:	4616      	mov	r6, r2
 80086ea:	d505      	bpl.n	80086f8 <__swrite+0x1e>
 80086ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086f0:	2302      	movs	r3, #2
 80086f2:	2200      	movs	r2, #0
 80086f4:	f000 f840 	bl	8008778 <_lseek_r>
 80086f8:	89a3      	ldrh	r3, [r4, #12]
 80086fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008702:	81a3      	strh	r3, [r4, #12]
 8008704:	4632      	mov	r2, r6
 8008706:	463b      	mov	r3, r7
 8008708:	4628      	mov	r0, r5
 800870a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800870e:	f000 b857 	b.w	80087c0 <_write_r>

08008712 <__sseek>:
 8008712:	b510      	push	{r4, lr}
 8008714:	460c      	mov	r4, r1
 8008716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800871a:	f000 f82d 	bl	8008778 <_lseek_r>
 800871e:	1c43      	adds	r3, r0, #1
 8008720:	89a3      	ldrh	r3, [r4, #12]
 8008722:	bf15      	itete	ne
 8008724:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008726:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800872a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800872e:	81a3      	strheq	r3, [r4, #12]
 8008730:	bf18      	it	ne
 8008732:	81a3      	strhne	r3, [r4, #12]
 8008734:	bd10      	pop	{r4, pc}

08008736 <__sclose>:
 8008736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800873a:	f000 b80d 	b.w	8008758 <_close_r>

0800873e <memset>:
 800873e:	4402      	add	r2, r0
 8008740:	4603      	mov	r3, r0
 8008742:	4293      	cmp	r3, r2
 8008744:	d100      	bne.n	8008748 <memset+0xa>
 8008746:	4770      	bx	lr
 8008748:	f803 1b01 	strb.w	r1, [r3], #1
 800874c:	e7f9      	b.n	8008742 <memset+0x4>
	...

08008750 <_localeconv_r>:
 8008750:	4800      	ldr	r0, [pc, #0]	@ (8008754 <_localeconv_r+0x4>)
 8008752:	4770      	bx	lr
 8008754:	200001dc 	.word	0x200001dc

08008758 <_close_r>:
 8008758:	b538      	push	{r3, r4, r5, lr}
 800875a:	4d06      	ldr	r5, [pc, #24]	@ (8008774 <_close_r+0x1c>)
 800875c:	2300      	movs	r3, #0
 800875e:	4604      	mov	r4, r0
 8008760:	4608      	mov	r0, r1
 8008762:	602b      	str	r3, [r5, #0]
 8008764:	f7fa fb1e 	bl	8002da4 <_close>
 8008768:	1c43      	adds	r3, r0, #1
 800876a:	d102      	bne.n	8008772 <_close_r+0x1a>
 800876c:	682b      	ldr	r3, [r5, #0]
 800876e:	b103      	cbz	r3, 8008772 <_close_r+0x1a>
 8008770:	6023      	str	r3, [r4, #0]
 8008772:	bd38      	pop	{r3, r4, r5, pc}
 8008774:	20000704 	.word	0x20000704

08008778 <_lseek_r>:
 8008778:	b538      	push	{r3, r4, r5, lr}
 800877a:	4d07      	ldr	r5, [pc, #28]	@ (8008798 <_lseek_r+0x20>)
 800877c:	4604      	mov	r4, r0
 800877e:	4608      	mov	r0, r1
 8008780:	4611      	mov	r1, r2
 8008782:	2200      	movs	r2, #0
 8008784:	602a      	str	r2, [r5, #0]
 8008786:	461a      	mov	r2, r3
 8008788:	f7fa fb33 	bl	8002df2 <_lseek>
 800878c:	1c43      	adds	r3, r0, #1
 800878e:	d102      	bne.n	8008796 <_lseek_r+0x1e>
 8008790:	682b      	ldr	r3, [r5, #0]
 8008792:	b103      	cbz	r3, 8008796 <_lseek_r+0x1e>
 8008794:	6023      	str	r3, [r4, #0]
 8008796:	bd38      	pop	{r3, r4, r5, pc}
 8008798:	20000704 	.word	0x20000704

0800879c <_read_r>:
 800879c:	b538      	push	{r3, r4, r5, lr}
 800879e:	4d07      	ldr	r5, [pc, #28]	@ (80087bc <_read_r+0x20>)
 80087a0:	4604      	mov	r4, r0
 80087a2:	4608      	mov	r0, r1
 80087a4:	4611      	mov	r1, r2
 80087a6:	2200      	movs	r2, #0
 80087a8:	602a      	str	r2, [r5, #0]
 80087aa:	461a      	mov	r2, r3
 80087ac:	f7fa fac1 	bl	8002d32 <_read>
 80087b0:	1c43      	adds	r3, r0, #1
 80087b2:	d102      	bne.n	80087ba <_read_r+0x1e>
 80087b4:	682b      	ldr	r3, [r5, #0]
 80087b6:	b103      	cbz	r3, 80087ba <_read_r+0x1e>
 80087b8:	6023      	str	r3, [r4, #0]
 80087ba:	bd38      	pop	{r3, r4, r5, pc}
 80087bc:	20000704 	.word	0x20000704

080087c0 <_write_r>:
 80087c0:	b538      	push	{r3, r4, r5, lr}
 80087c2:	4d07      	ldr	r5, [pc, #28]	@ (80087e0 <_write_r+0x20>)
 80087c4:	4604      	mov	r4, r0
 80087c6:	4608      	mov	r0, r1
 80087c8:	4611      	mov	r1, r2
 80087ca:	2200      	movs	r2, #0
 80087cc:	602a      	str	r2, [r5, #0]
 80087ce:	461a      	mov	r2, r3
 80087d0:	f7fa facc 	bl	8002d6c <_write>
 80087d4:	1c43      	adds	r3, r0, #1
 80087d6:	d102      	bne.n	80087de <_write_r+0x1e>
 80087d8:	682b      	ldr	r3, [r5, #0]
 80087da:	b103      	cbz	r3, 80087de <_write_r+0x1e>
 80087dc:	6023      	str	r3, [r4, #0]
 80087de:	bd38      	pop	{r3, r4, r5, pc}
 80087e0:	20000704 	.word	0x20000704

080087e4 <__errno>:
 80087e4:	4b01      	ldr	r3, [pc, #4]	@ (80087ec <__errno+0x8>)
 80087e6:	6818      	ldr	r0, [r3, #0]
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	2000009c 	.word	0x2000009c

080087f0 <__libc_init_array>:
 80087f0:	b570      	push	{r4, r5, r6, lr}
 80087f2:	4d0d      	ldr	r5, [pc, #52]	@ (8008828 <__libc_init_array+0x38>)
 80087f4:	4c0d      	ldr	r4, [pc, #52]	@ (800882c <__libc_init_array+0x3c>)
 80087f6:	1b64      	subs	r4, r4, r5
 80087f8:	10a4      	asrs	r4, r4, #2
 80087fa:	2600      	movs	r6, #0
 80087fc:	42a6      	cmp	r6, r4
 80087fe:	d109      	bne.n	8008814 <__libc_init_array+0x24>
 8008800:	4d0b      	ldr	r5, [pc, #44]	@ (8008830 <__libc_init_array+0x40>)
 8008802:	4c0c      	ldr	r4, [pc, #48]	@ (8008834 <__libc_init_array+0x44>)
 8008804:	f004 fcd8 	bl	800d1b8 <_init>
 8008808:	1b64      	subs	r4, r4, r5
 800880a:	10a4      	asrs	r4, r4, #2
 800880c:	2600      	movs	r6, #0
 800880e:	42a6      	cmp	r6, r4
 8008810:	d105      	bne.n	800881e <__libc_init_array+0x2e>
 8008812:	bd70      	pop	{r4, r5, r6, pc}
 8008814:	f855 3b04 	ldr.w	r3, [r5], #4
 8008818:	4798      	blx	r3
 800881a:	3601      	adds	r6, #1
 800881c:	e7ee      	b.n	80087fc <__libc_init_array+0xc>
 800881e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008822:	4798      	blx	r3
 8008824:	3601      	adds	r6, #1
 8008826:	e7f2      	b.n	800880e <__libc_init_array+0x1e>
 8008828:	0800d8a0 	.word	0x0800d8a0
 800882c:	0800d8a0 	.word	0x0800d8a0
 8008830:	0800d8a0 	.word	0x0800d8a0
 8008834:	0800d8a4 	.word	0x0800d8a4

08008838 <__retarget_lock_init_recursive>:
 8008838:	4770      	bx	lr

0800883a <__retarget_lock_acquire_recursive>:
 800883a:	4770      	bx	lr

0800883c <__retarget_lock_release_recursive>:
 800883c:	4770      	bx	lr
	...

08008840 <nanf>:
 8008840:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008848 <nanf+0x8>
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop
 8008848:	7fc00000 	.word	0x7fc00000

0800884c <quorem>:
 800884c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008850:	6903      	ldr	r3, [r0, #16]
 8008852:	690c      	ldr	r4, [r1, #16]
 8008854:	42a3      	cmp	r3, r4
 8008856:	4607      	mov	r7, r0
 8008858:	db7e      	blt.n	8008958 <quorem+0x10c>
 800885a:	3c01      	subs	r4, #1
 800885c:	f101 0814 	add.w	r8, r1, #20
 8008860:	00a3      	lsls	r3, r4, #2
 8008862:	f100 0514 	add.w	r5, r0, #20
 8008866:	9300      	str	r3, [sp, #0]
 8008868:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800886c:	9301      	str	r3, [sp, #4]
 800886e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008872:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008876:	3301      	adds	r3, #1
 8008878:	429a      	cmp	r2, r3
 800887a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800887e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008882:	d32e      	bcc.n	80088e2 <quorem+0x96>
 8008884:	f04f 0a00 	mov.w	sl, #0
 8008888:	46c4      	mov	ip, r8
 800888a:	46ae      	mov	lr, r5
 800888c:	46d3      	mov	fp, sl
 800888e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008892:	b298      	uxth	r0, r3
 8008894:	fb06 a000 	mla	r0, r6, r0, sl
 8008898:	0c02      	lsrs	r2, r0, #16
 800889a:	0c1b      	lsrs	r3, r3, #16
 800889c:	fb06 2303 	mla	r3, r6, r3, r2
 80088a0:	f8de 2000 	ldr.w	r2, [lr]
 80088a4:	b280      	uxth	r0, r0
 80088a6:	b292      	uxth	r2, r2
 80088a8:	1a12      	subs	r2, r2, r0
 80088aa:	445a      	add	r2, fp
 80088ac:	f8de 0000 	ldr.w	r0, [lr]
 80088b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80088ba:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80088be:	b292      	uxth	r2, r2
 80088c0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80088c4:	45e1      	cmp	r9, ip
 80088c6:	f84e 2b04 	str.w	r2, [lr], #4
 80088ca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80088ce:	d2de      	bcs.n	800888e <quorem+0x42>
 80088d0:	9b00      	ldr	r3, [sp, #0]
 80088d2:	58eb      	ldr	r3, [r5, r3]
 80088d4:	b92b      	cbnz	r3, 80088e2 <quorem+0x96>
 80088d6:	9b01      	ldr	r3, [sp, #4]
 80088d8:	3b04      	subs	r3, #4
 80088da:	429d      	cmp	r5, r3
 80088dc:	461a      	mov	r2, r3
 80088de:	d32f      	bcc.n	8008940 <quorem+0xf4>
 80088e0:	613c      	str	r4, [r7, #16]
 80088e2:	4638      	mov	r0, r7
 80088e4:	f001 f9c4 	bl	8009c70 <__mcmp>
 80088e8:	2800      	cmp	r0, #0
 80088ea:	db25      	blt.n	8008938 <quorem+0xec>
 80088ec:	4629      	mov	r1, r5
 80088ee:	2000      	movs	r0, #0
 80088f0:	f858 2b04 	ldr.w	r2, [r8], #4
 80088f4:	f8d1 c000 	ldr.w	ip, [r1]
 80088f8:	fa1f fe82 	uxth.w	lr, r2
 80088fc:	fa1f f38c 	uxth.w	r3, ip
 8008900:	eba3 030e 	sub.w	r3, r3, lr
 8008904:	4403      	add	r3, r0
 8008906:	0c12      	lsrs	r2, r2, #16
 8008908:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800890c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008910:	b29b      	uxth	r3, r3
 8008912:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008916:	45c1      	cmp	r9, r8
 8008918:	f841 3b04 	str.w	r3, [r1], #4
 800891c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008920:	d2e6      	bcs.n	80088f0 <quorem+0xa4>
 8008922:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008926:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800892a:	b922      	cbnz	r2, 8008936 <quorem+0xea>
 800892c:	3b04      	subs	r3, #4
 800892e:	429d      	cmp	r5, r3
 8008930:	461a      	mov	r2, r3
 8008932:	d30b      	bcc.n	800894c <quorem+0x100>
 8008934:	613c      	str	r4, [r7, #16]
 8008936:	3601      	adds	r6, #1
 8008938:	4630      	mov	r0, r6
 800893a:	b003      	add	sp, #12
 800893c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008940:	6812      	ldr	r2, [r2, #0]
 8008942:	3b04      	subs	r3, #4
 8008944:	2a00      	cmp	r2, #0
 8008946:	d1cb      	bne.n	80088e0 <quorem+0x94>
 8008948:	3c01      	subs	r4, #1
 800894a:	e7c6      	b.n	80088da <quorem+0x8e>
 800894c:	6812      	ldr	r2, [r2, #0]
 800894e:	3b04      	subs	r3, #4
 8008950:	2a00      	cmp	r2, #0
 8008952:	d1ef      	bne.n	8008934 <quorem+0xe8>
 8008954:	3c01      	subs	r4, #1
 8008956:	e7ea      	b.n	800892e <quorem+0xe2>
 8008958:	2000      	movs	r0, #0
 800895a:	e7ee      	b.n	800893a <quorem+0xee>
 800895c:	0000      	movs	r0, r0
	...

08008960 <_dtoa_r>:
 8008960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008964:	69c7      	ldr	r7, [r0, #28]
 8008966:	b099      	sub	sp, #100	@ 0x64
 8008968:	ed8d 0b02 	vstr	d0, [sp, #8]
 800896c:	ec55 4b10 	vmov	r4, r5, d0
 8008970:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008972:	9109      	str	r1, [sp, #36]	@ 0x24
 8008974:	4683      	mov	fp, r0
 8008976:	920e      	str	r2, [sp, #56]	@ 0x38
 8008978:	9313      	str	r3, [sp, #76]	@ 0x4c
 800897a:	b97f      	cbnz	r7, 800899c <_dtoa_r+0x3c>
 800897c:	2010      	movs	r0, #16
 800897e:	f000 fdfd 	bl	800957c <malloc>
 8008982:	4602      	mov	r2, r0
 8008984:	f8cb 001c 	str.w	r0, [fp, #28]
 8008988:	b920      	cbnz	r0, 8008994 <_dtoa_r+0x34>
 800898a:	4ba7      	ldr	r3, [pc, #668]	@ (8008c28 <_dtoa_r+0x2c8>)
 800898c:	21ef      	movs	r1, #239	@ 0xef
 800898e:	48a7      	ldr	r0, [pc, #668]	@ (8008c2c <_dtoa_r+0x2cc>)
 8008990:	f002 fc36 	bl	800b200 <__assert_func>
 8008994:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008998:	6007      	str	r7, [r0, #0]
 800899a:	60c7      	str	r7, [r0, #12]
 800899c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80089a0:	6819      	ldr	r1, [r3, #0]
 80089a2:	b159      	cbz	r1, 80089bc <_dtoa_r+0x5c>
 80089a4:	685a      	ldr	r2, [r3, #4]
 80089a6:	604a      	str	r2, [r1, #4]
 80089a8:	2301      	movs	r3, #1
 80089aa:	4093      	lsls	r3, r2
 80089ac:	608b      	str	r3, [r1, #8]
 80089ae:	4658      	mov	r0, fp
 80089b0:	f000 feda 	bl	8009768 <_Bfree>
 80089b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80089b8:	2200      	movs	r2, #0
 80089ba:	601a      	str	r2, [r3, #0]
 80089bc:	1e2b      	subs	r3, r5, #0
 80089be:	bfb9      	ittee	lt
 80089c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80089c4:	9303      	strlt	r3, [sp, #12]
 80089c6:	2300      	movge	r3, #0
 80089c8:	6033      	strge	r3, [r6, #0]
 80089ca:	9f03      	ldr	r7, [sp, #12]
 80089cc:	4b98      	ldr	r3, [pc, #608]	@ (8008c30 <_dtoa_r+0x2d0>)
 80089ce:	bfbc      	itt	lt
 80089d0:	2201      	movlt	r2, #1
 80089d2:	6032      	strlt	r2, [r6, #0]
 80089d4:	43bb      	bics	r3, r7
 80089d6:	d112      	bne.n	80089fe <_dtoa_r+0x9e>
 80089d8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80089da:	f242 730f 	movw	r3, #9999	@ 0x270f
 80089de:	6013      	str	r3, [r2, #0]
 80089e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80089e4:	4323      	orrs	r3, r4
 80089e6:	f000 854d 	beq.w	8009484 <_dtoa_r+0xb24>
 80089ea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80089ec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008c44 <_dtoa_r+0x2e4>
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f000 854f 	beq.w	8009494 <_dtoa_r+0xb34>
 80089f6:	f10a 0303 	add.w	r3, sl, #3
 80089fa:	f000 bd49 	b.w	8009490 <_dtoa_r+0xb30>
 80089fe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a02:	2200      	movs	r2, #0
 8008a04:	ec51 0b17 	vmov	r0, r1, d7
 8008a08:	2300      	movs	r3, #0
 8008a0a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008a0e:	f7f8 f863 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a12:	4680      	mov	r8, r0
 8008a14:	b158      	cbz	r0, 8008a2e <_dtoa_r+0xce>
 8008a16:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008a18:	2301      	movs	r3, #1
 8008a1a:	6013      	str	r3, [r2, #0]
 8008a1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008a1e:	b113      	cbz	r3, 8008a26 <_dtoa_r+0xc6>
 8008a20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008a22:	4b84      	ldr	r3, [pc, #528]	@ (8008c34 <_dtoa_r+0x2d4>)
 8008a24:	6013      	str	r3, [r2, #0]
 8008a26:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008c48 <_dtoa_r+0x2e8>
 8008a2a:	f000 bd33 	b.w	8009494 <_dtoa_r+0xb34>
 8008a2e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008a32:	aa16      	add	r2, sp, #88	@ 0x58
 8008a34:	a917      	add	r1, sp, #92	@ 0x5c
 8008a36:	4658      	mov	r0, fp
 8008a38:	f001 fa3a 	bl	8009eb0 <__d2b>
 8008a3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008a40:	4681      	mov	r9, r0
 8008a42:	2e00      	cmp	r6, #0
 8008a44:	d077      	beq.n	8008b36 <_dtoa_r+0x1d6>
 8008a46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a48:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008a4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008a58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008a5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008a60:	4619      	mov	r1, r3
 8008a62:	2200      	movs	r2, #0
 8008a64:	4b74      	ldr	r3, [pc, #464]	@ (8008c38 <_dtoa_r+0x2d8>)
 8008a66:	f7f7 fc17 	bl	8000298 <__aeabi_dsub>
 8008a6a:	a369      	add	r3, pc, #420	@ (adr r3, 8008c10 <_dtoa_r+0x2b0>)
 8008a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a70:	f7f7 fdca 	bl	8000608 <__aeabi_dmul>
 8008a74:	a368      	add	r3, pc, #416	@ (adr r3, 8008c18 <_dtoa_r+0x2b8>)
 8008a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7a:	f7f7 fc0f 	bl	800029c <__adddf3>
 8008a7e:	4604      	mov	r4, r0
 8008a80:	4630      	mov	r0, r6
 8008a82:	460d      	mov	r5, r1
 8008a84:	f7f7 fd56 	bl	8000534 <__aeabi_i2d>
 8008a88:	a365      	add	r3, pc, #404	@ (adr r3, 8008c20 <_dtoa_r+0x2c0>)
 8008a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8e:	f7f7 fdbb 	bl	8000608 <__aeabi_dmul>
 8008a92:	4602      	mov	r2, r0
 8008a94:	460b      	mov	r3, r1
 8008a96:	4620      	mov	r0, r4
 8008a98:	4629      	mov	r1, r5
 8008a9a:	f7f7 fbff 	bl	800029c <__adddf3>
 8008a9e:	4604      	mov	r4, r0
 8008aa0:	460d      	mov	r5, r1
 8008aa2:	f7f8 f861 	bl	8000b68 <__aeabi_d2iz>
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	4607      	mov	r7, r0
 8008aaa:	2300      	movs	r3, #0
 8008aac:	4620      	mov	r0, r4
 8008aae:	4629      	mov	r1, r5
 8008ab0:	f7f8 f81c 	bl	8000aec <__aeabi_dcmplt>
 8008ab4:	b140      	cbz	r0, 8008ac8 <_dtoa_r+0x168>
 8008ab6:	4638      	mov	r0, r7
 8008ab8:	f7f7 fd3c 	bl	8000534 <__aeabi_i2d>
 8008abc:	4622      	mov	r2, r4
 8008abe:	462b      	mov	r3, r5
 8008ac0:	f7f8 f80a 	bl	8000ad8 <__aeabi_dcmpeq>
 8008ac4:	b900      	cbnz	r0, 8008ac8 <_dtoa_r+0x168>
 8008ac6:	3f01      	subs	r7, #1
 8008ac8:	2f16      	cmp	r7, #22
 8008aca:	d851      	bhi.n	8008b70 <_dtoa_r+0x210>
 8008acc:	4b5b      	ldr	r3, [pc, #364]	@ (8008c3c <_dtoa_r+0x2dc>)
 8008ace:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ada:	f7f8 f807 	bl	8000aec <__aeabi_dcmplt>
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	d048      	beq.n	8008b74 <_dtoa_r+0x214>
 8008ae2:	3f01      	subs	r7, #1
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	9312      	str	r3, [sp, #72]	@ 0x48
 8008ae8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008aea:	1b9b      	subs	r3, r3, r6
 8008aec:	1e5a      	subs	r2, r3, #1
 8008aee:	bf44      	itt	mi
 8008af0:	f1c3 0801 	rsbmi	r8, r3, #1
 8008af4:	2300      	movmi	r3, #0
 8008af6:	9208      	str	r2, [sp, #32]
 8008af8:	bf54      	ite	pl
 8008afa:	f04f 0800 	movpl.w	r8, #0
 8008afe:	9308      	strmi	r3, [sp, #32]
 8008b00:	2f00      	cmp	r7, #0
 8008b02:	db39      	blt.n	8008b78 <_dtoa_r+0x218>
 8008b04:	9b08      	ldr	r3, [sp, #32]
 8008b06:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008b08:	443b      	add	r3, r7
 8008b0a:	9308      	str	r3, [sp, #32]
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b12:	2b09      	cmp	r3, #9
 8008b14:	d864      	bhi.n	8008be0 <_dtoa_r+0x280>
 8008b16:	2b05      	cmp	r3, #5
 8008b18:	bfc4      	itt	gt
 8008b1a:	3b04      	subgt	r3, #4
 8008b1c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008b1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b20:	f1a3 0302 	sub.w	r3, r3, #2
 8008b24:	bfcc      	ite	gt
 8008b26:	2400      	movgt	r4, #0
 8008b28:	2401      	movle	r4, #1
 8008b2a:	2b03      	cmp	r3, #3
 8008b2c:	d863      	bhi.n	8008bf6 <_dtoa_r+0x296>
 8008b2e:	e8df f003 	tbb	[pc, r3]
 8008b32:	372a      	.short	0x372a
 8008b34:	5535      	.short	0x5535
 8008b36:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008b3a:	441e      	add	r6, r3
 8008b3c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008b40:	2b20      	cmp	r3, #32
 8008b42:	bfc1      	itttt	gt
 8008b44:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008b48:	409f      	lslgt	r7, r3
 8008b4a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008b4e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008b52:	bfd6      	itet	le
 8008b54:	f1c3 0320 	rsble	r3, r3, #32
 8008b58:	ea47 0003 	orrgt.w	r0, r7, r3
 8008b5c:	fa04 f003 	lslle.w	r0, r4, r3
 8008b60:	f7f7 fcd8 	bl	8000514 <__aeabi_ui2d>
 8008b64:	2201      	movs	r2, #1
 8008b66:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008b6a:	3e01      	subs	r6, #1
 8008b6c:	9214      	str	r2, [sp, #80]	@ 0x50
 8008b6e:	e777      	b.n	8008a60 <_dtoa_r+0x100>
 8008b70:	2301      	movs	r3, #1
 8008b72:	e7b8      	b.n	8008ae6 <_dtoa_r+0x186>
 8008b74:	9012      	str	r0, [sp, #72]	@ 0x48
 8008b76:	e7b7      	b.n	8008ae8 <_dtoa_r+0x188>
 8008b78:	427b      	negs	r3, r7
 8008b7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	eba8 0807 	sub.w	r8, r8, r7
 8008b82:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008b84:	e7c4      	b.n	8008b10 <_dtoa_r+0x1b0>
 8008b86:	2300      	movs	r3, #0
 8008b88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	dc35      	bgt.n	8008bfc <_dtoa_r+0x29c>
 8008b90:	2301      	movs	r3, #1
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	9307      	str	r3, [sp, #28]
 8008b96:	461a      	mov	r2, r3
 8008b98:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b9a:	e00b      	b.n	8008bb4 <_dtoa_r+0x254>
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e7f3      	b.n	8008b88 <_dtoa_r+0x228>
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ba4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ba6:	18fb      	adds	r3, r7, r3
 8008ba8:	9300      	str	r3, [sp, #0]
 8008baa:	3301      	adds	r3, #1
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	9307      	str	r3, [sp, #28]
 8008bb0:	bfb8      	it	lt
 8008bb2:	2301      	movlt	r3, #1
 8008bb4:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008bb8:	2100      	movs	r1, #0
 8008bba:	2204      	movs	r2, #4
 8008bbc:	f102 0514 	add.w	r5, r2, #20
 8008bc0:	429d      	cmp	r5, r3
 8008bc2:	d91f      	bls.n	8008c04 <_dtoa_r+0x2a4>
 8008bc4:	6041      	str	r1, [r0, #4]
 8008bc6:	4658      	mov	r0, fp
 8008bc8:	f000 fd8e 	bl	80096e8 <_Balloc>
 8008bcc:	4682      	mov	sl, r0
 8008bce:	2800      	cmp	r0, #0
 8008bd0:	d13c      	bne.n	8008c4c <_dtoa_r+0x2ec>
 8008bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8008c40 <_dtoa_r+0x2e0>)
 8008bd4:	4602      	mov	r2, r0
 8008bd6:	f240 11af 	movw	r1, #431	@ 0x1af
 8008bda:	e6d8      	b.n	800898e <_dtoa_r+0x2e>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e7e0      	b.n	8008ba2 <_dtoa_r+0x242>
 8008be0:	2401      	movs	r4, #1
 8008be2:	2300      	movs	r3, #0
 8008be4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008be6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008be8:	f04f 33ff 	mov.w	r3, #4294967295
 8008bec:	9300      	str	r3, [sp, #0]
 8008bee:	9307      	str	r3, [sp, #28]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	2312      	movs	r3, #18
 8008bf4:	e7d0      	b.n	8008b98 <_dtoa_r+0x238>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008bfa:	e7f5      	b.n	8008be8 <_dtoa_r+0x288>
 8008bfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bfe:	9300      	str	r3, [sp, #0]
 8008c00:	9307      	str	r3, [sp, #28]
 8008c02:	e7d7      	b.n	8008bb4 <_dtoa_r+0x254>
 8008c04:	3101      	adds	r1, #1
 8008c06:	0052      	lsls	r2, r2, #1
 8008c08:	e7d8      	b.n	8008bbc <_dtoa_r+0x25c>
 8008c0a:	bf00      	nop
 8008c0c:	f3af 8000 	nop.w
 8008c10:	636f4361 	.word	0x636f4361
 8008c14:	3fd287a7 	.word	0x3fd287a7
 8008c18:	8b60c8b3 	.word	0x8b60c8b3
 8008c1c:	3fc68a28 	.word	0x3fc68a28
 8008c20:	509f79fb 	.word	0x509f79fb
 8008c24:	3fd34413 	.word	0x3fd34413
 8008c28:	0800d2ca 	.word	0x0800d2ca
 8008c2c:	0800d2e1 	.word	0x0800d2e1
 8008c30:	7ff00000 	.word	0x7ff00000
 8008c34:	0800d295 	.word	0x0800d295
 8008c38:	3ff80000 	.word	0x3ff80000
 8008c3c:	0800d3d8 	.word	0x0800d3d8
 8008c40:	0800d339 	.word	0x0800d339
 8008c44:	0800d2c6 	.word	0x0800d2c6
 8008c48:	0800d294 	.word	0x0800d294
 8008c4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008c50:	6018      	str	r0, [r3, #0]
 8008c52:	9b07      	ldr	r3, [sp, #28]
 8008c54:	2b0e      	cmp	r3, #14
 8008c56:	f200 80a4 	bhi.w	8008da2 <_dtoa_r+0x442>
 8008c5a:	2c00      	cmp	r4, #0
 8008c5c:	f000 80a1 	beq.w	8008da2 <_dtoa_r+0x442>
 8008c60:	2f00      	cmp	r7, #0
 8008c62:	dd33      	ble.n	8008ccc <_dtoa_r+0x36c>
 8008c64:	4bad      	ldr	r3, [pc, #692]	@ (8008f1c <_dtoa_r+0x5bc>)
 8008c66:	f007 020f 	and.w	r2, r7, #15
 8008c6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c6e:	ed93 7b00 	vldr	d7, [r3]
 8008c72:	05f8      	lsls	r0, r7, #23
 8008c74:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008c78:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008c7c:	d516      	bpl.n	8008cac <_dtoa_r+0x34c>
 8008c7e:	4ba8      	ldr	r3, [pc, #672]	@ (8008f20 <_dtoa_r+0x5c0>)
 8008c80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008c84:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008c88:	f7f7 fde8 	bl	800085c <__aeabi_ddiv>
 8008c8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c90:	f004 040f 	and.w	r4, r4, #15
 8008c94:	2603      	movs	r6, #3
 8008c96:	4da2      	ldr	r5, [pc, #648]	@ (8008f20 <_dtoa_r+0x5c0>)
 8008c98:	b954      	cbnz	r4, 8008cb0 <_dtoa_r+0x350>
 8008c9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ca2:	f7f7 fddb 	bl	800085c <__aeabi_ddiv>
 8008ca6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008caa:	e028      	b.n	8008cfe <_dtoa_r+0x39e>
 8008cac:	2602      	movs	r6, #2
 8008cae:	e7f2      	b.n	8008c96 <_dtoa_r+0x336>
 8008cb0:	07e1      	lsls	r1, r4, #31
 8008cb2:	d508      	bpl.n	8008cc6 <_dtoa_r+0x366>
 8008cb4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008cb8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008cbc:	f7f7 fca4 	bl	8000608 <__aeabi_dmul>
 8008cc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cc4:	3601      	adds	r6, #1
 8008cc6:	1064      	asrs	r4, r4, #1
 8008cc8:	3508      	adds	r5, #8
 8008cca:	e7e5      	b.n	8008c98 <_dtoa_r+0x338>
 8008ccc:	f000 80d2 	beq.w	8008e74 <_dtoa_r+0x514>
 8008cd0:	427c      	negs	r4, r7
 8008cd2:	4b92      	ldr	r3, [pc, #584]	@ (8008f1c <_dtoa_r+0x5bc>)
 8008cd4:	4d92      	ldr	r5, [pc, #584]	@ (8008f20 <_dtoa_r+0x5c0>)
 8008cd6:	f004 020f 	and.w	r2, r4, #15
 8008cda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ce6:	f7f7 fc8f 	bl	8000608 <__aeabi_dmul>
 8008cea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cee:	1124      	asrs	r4, r4, #4
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	2602      	movs	r6, #2
 8008cf4:	2c00      	cmp	r4, #0
 8008cf6:	f040 80b2 	bne.w	8008e5e <_dtoa_r+0x4fe>
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1d3      	bne.n	8008ca6 <_dtoa_r+0x346>
 8008cfe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008d00:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	f000 80b7 	beq.w	8008e78 <_dtoa_r+0x518>
 8008d0a:	4b86      	ldr	r3, [pc, #536]	@ (8008f24 <_dtoa_r+0x5c4>)
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	4620      	mov	r0, r4
 8008d10:	4629      	mov	r1, r5
 8008d12:	f7f7 feeb 	bl	8000aec <__aeabi_dcmplt>
 8008d16:	2800      	cmp	r0, #0
 8008d18:	f000 80ae 	beq.w	8008e78 <_dtoa_r+0x518>
 8008d1c:	9b07      	ldr	r3, [sp, #28]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f000 80aa 	beq.w	8008e78 <_dtoa_r+0x518>
 8008d24:	9b00      	ldr	r3, [sp, #0]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	dd37      	ble.n	8008d9a <_dtoa_r+0x43a>
 8008d2a:	1e7b      	subs	r3, r7, #1
 8008d2c:	9304      	str	r3, [sp, #16]
 8008d2e:	4620      	mov	r0, r4
 8008d30:	4b7d      	ldr	r3, [pc, #500]	@ (8008f28 <_dtoa_r+0x5c8>)
 8008d32:	2200      	movs	r2, #0
 8008d34:	4629      	mov	r1, r5
 8008d36:	f7f7 fc67 	bl	8000608 <__aeabi_dmul>
 8008d3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d3e:	9c00      	ldr	r4, [sp, #0]
 8008d40:	3601      	adds	r6, #1
 8008d42:	4630      	mov	r0, r6
 8008d44:	f7f7 fbf6 	bl	8000534 <__aeabi_i2d>
 8008d48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d4c:	f7f7 fc5c 	bl	8000608 <__aeabi_dmul>
 8008d50:	4b76      	ldr	r3, [pc, #472]	@ (8008f2c <_dtoa_r+0x5cc>)
 8008d52:	2200      	movs	r2, #0
 8008d54:	f7f7 faa2 	bl	800029c <__adddf3>
 8008d58:	4605      	mov	r5, r0
 8008d5a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008d5e:	2c00      	cmp	r4, #0
 8008d60:	f040 808d 	bne.w	8008e7e <_dtoa_r+0x51e>
 8008d64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d68:	4b71      	ldr	r3, [pc, #452]	@ (8008f30 <_dtoa_r+0x5d0>)
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f7f7 fa94 	bl	8000298 <__aeabi_dsub>
 8008d70:	4602      	mov	r2, r0
 8008d72:	460b      	mov	r3, r1
 8008d74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008d78:	462a      	mov	r2, r5
 8008d7a:	4633      	mov	r3, r6
 8008d7c:	f7f7 fed4 	bl	8000b28 <__aeabi_dcmpgt>
 8008d80:	2800      	cmp	r0, #0
 8008d82:	f040 828b 	bne.w	800929c <_dtoa_r+0x93c>
 8008d86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d8a:	462a      	mov	r2, r5
 8008d8c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008d90:	f7f7 feac 	bl	8000aec <__aeabi_dcmplt>
 8008d94:	2800      	cmp	r0, #0
 8008d96:	f040 8128 	bne.w	8008fea <_dtoa_r+0x68a>
 8008d9a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008d9e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008da2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f2c0 815a 	blt.w	800905e <_dtoa_r+0x6fe>
 8008daa:	2f0e      	cmp	r7, #14
 8008dac:	f300 8157 	bgt.w	800905e <_dtoa_r+0x6fe>
 8008db0:	4b5a      	ldr	r3, [pc, #360]	@ (8008f1c <_dtoa_r+0x5bc>)
 8008db2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008db6:	ed93 7b00 	vldr	d7, [r3]
 8008dba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	ed8d 7b00 	vstr	d7, [sp]
 8008dc2:	da03      	bge.n	8008dcc <_dtoa_r+0x46c>
 8008dc4:	9b07      	ldr	r3, [sp, #28]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	f340 8101 	ble.w	8008fce <_dtoa_r+0x66e>
 8008dcc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008dd0:	4656      	mov	r6, sl
 8008dd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008dd6:	4620      	mov	r0, r4
 8008dd8:	4629      	mov	r1, r5
 8008dda:	f7f7 fd3f 	bl	800085c <__aeabi_ddiv>
 8008dde:	f7f7 fec3 	bl	8000b68 <__aeabi_d2iz>
 8008de2:	4680      	mov	r8, r0
 8008de4:	f7f7 fba6 	bl	8000534 <__aeabi_i2d>
 8008de8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008dec:	f7f7 fc0c 	bl	8000608 <__aeabi_dmul>
 8008df0:	4602      	mov	r2, r0
 8008df2:	460b      	mov	r3, r1
 8008df4:	4620      	mov	r0, r4
 8008df6:	4629      	mov	r1, r5
 8008df8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008dfc:	f7f7 fa4c 	bl	8000298 <__aeabi_dsub>
 8008e00:	f806 4b01 	strb.w	r4, [r6], #1
 8008e04:	9d07      	ldr	r5, [sp, #28]
 8008e06:	eba6 040a 	sub.w	r4, r6, sl
 8008e0a:	42a5      	cmp	r5, r4
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	460b      	mov	r3, r1
 8008e10:	f040 8117 	bne.w	8009042 <_dtoa_r+0x6e2>
 8008e14:	f7f7 fa42 	bl	800029c <__adddf3>
 8008e18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e1c:	4604      	mov	r4, r0
 8008e1e:	460d      	mov	r5, r1
 8008e20:	f7f7 fe82 	bl	8000b28 <__aeabi_dcmpgt>
 8008e24:	2800      	cmp	r0, #0
 8008e26:	f040 80f9 	bne.w	800901c <_dtoa_r+0x6bc>
 8008e2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e2e:	4620      	mov	r0, r4
 8008e30:	4629      	mov	r1, r5
 8008e32:	f7f7 fe51 	bl	8000ad8 <__aeabi_dcmpeq>
 8008e36:	b118      	cbz	r0, 8008e40 <_dtoa_r+0x4e0>
 8008e38:	f018 0f01 	tst.w	r8, #1
 8008e3c:	f040 80ee 	bne.w	800901c <_dtoa_r+0x6bc>
 8008e40:	4649      	mov	r1, r9
 8008e42:	4658      	mov	r0, fp
 8008e44:	f000 fc90 	bl	8009768 <_Bfree>
 8008e48:	2300      	movs	r3, #0
 8008e4a:	7033      	strb	r3, [r6, #0]
 8008e4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008e4e:	3701      	adds	r7, #1
 8008e50:	601f      	str	r7, [r3, #0]
 8008e52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f000 831d 	beq.w	8009494 <_dtoa_r+0xb34>
 8008e5a:	601e      	str	r6, [r3, #0]
 8008e5c:	e31a      	b.n	8009494 <_dtoa_r+0xb34>
 8008e5e:	07e2      	lsls	r2, r4, #31
 8008e60:	d505      	bpl.n	8008e6e <_dtoa_r+0x50e>
 8008e62:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008e66:	f7f7 fbcf 	bl	8000608 <__aeabi_dmul>
 8008e6a:	3601      	adds	r6, #1
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	1064      	asrs	r4, r4, #1
 8008e70:	3508      	adds	r5, #8
 8008e72:	e73f      	b.n	8008cf4 <_dtoa_r+0x394>
 8008e74:	2602      	movs	r6, #2
 8008e76:	e742      	b.n	8008cfe <_dtoa_r+0x39e>
 8008e78:	9c07      	ldr	r4, [sp, #28]
 8008e7a:	9704      	str	r7, [sp, #16]
 8008e7c:	e761      	b.n	8008d42 <_dtoa_r+0x3e2>
 8008e7e:	4b27      	ldr	r3, [pc, #156]	@ (8008f1c <_dtoa_r+0x5bc>)
 8008e80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008e82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008e86:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008e8a:	4454      	add	r4, sl
 8008e8c:	2900      	cmp	r1, #0
 8008e8e:	d053      	beq.n	8008f38 <_dtoa_r+0x5d8>
 8008e90:	4928      	ldr	r1, [pc, #160]	@ (8008f34 <_dtoa_r+0x5d4>)
 8008e92:	2000      	movs	r0, #0
 8008e94:	f7f7 fce2 	bl	800085c <__aeabi_ddiv>
 8008e98:	4633      	mov	r3, r6
 8008e9a:	462a      	mov	r2, r5
 8008e9c:	f7f7 f9fc 	bl	8000298 <__aeabi_dsub>
 8008ea0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008ea4:	4656      	mov	r6, sl
 8008ea6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008eaa:	f7f7 fe5d 	bl	8000b68 <__aeabi_d2iz>
 8008eae:	4605      	mov	r5, r0
 8008eb0:	f7f7 fb40 	bl	8000534 <__aeabi_i2d>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ebc:	f7f7 f9ec 	bl	8000298 <__aeabi_dsub>
 8008ec0:	3530      	adds	r5, #48	@ 0x30
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008eca:	f806 5b01 	strb.w	r5, [r6], #1
 8008ece:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008ed2:	f7f7 fe0b 	bl	8000aec <__aeabi_dcmplt>
 8008ed6:	2800      	cmp	r0, #0
 8008ed8:	d171      	bne.n	8008fbe <_dtoa_r+0x65e>
 8008eda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ede:	4911      	ldr	r1, [pc, #68]	@ (8008f24 <_dtoa_r+0x5c4>)
 8008ee0:	2000      	movs	r0, #0
 8008ee2:	f7f7 f9d9 	bl	8000298 <__aeabi_dsub>
 8008ee6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008eea:	f7f7 fdff 	bl	8000aec <__aeabi_dcmplt>
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	f040 8095 	bne.w	800901e <_dtoa_r+0x6be>
 8008ef4:	42a6      	cmp	r6, r4
 8008ef6:	f43f af50 	beq.w	8008d9a <_dtoa_r+0x43a>
 8008efa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008efe:	4b0a      	ldr	r3, [pc, #40]	@ (8008f28 <_dtoa_r+0x5c8>)
 8008f00:	2200      	movs	r2, #0
 8008f02:	f7f7 fb81 	bl	8000608 <__aeabi_dmul>
 8008f06:	4b08      	ldr	r3, [pc, #32]	@ (8008f28 <_dtoa_r+0x5c8>)
 8008f08:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f12:	f7f7 fb79 	bl	8000608 <__aeabi_dmul>
 8008f16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f1a:	e7c4      	b.n	8008ea6 <_dtoa_r+0x546>
 8008f1c:	0800d3d8 	.word	0x0800d3d8
 8008f20:	0800d3b0 	.word	0x0800d3b0
 8008f24:	3ff00000 	.word	0x3ff00000
 8008f28:	40240000 	.word	0x40240000
 8008f2c:	401c0000 	.word	0x401c0000
 8008f30:	40140000 	.word	0x40140000
 8008f34:	3fe00000 	.word	0x3fe00000
 8008f38:	4631      	mov	r1, r6
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	f7f7 fb64 	bl	8000608 <__aeabi_dmul>
 8008f40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008f44:	9415      	str	r4, [sp, #84]	@ 0x54
 8008f46:	4656      	mov	r6, sl
 8008f48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f4c:	f7f7 fe0c 	bl	8000b68 <__aeabi_d2iz>
 8008f50:	4605      	mov	r5, r0
 8008f52:	f7f7 faef 	bl	8000534 <__aeabi_i2d>
 8008f56:	4602      	mov	r2, r0
 8008f58:	460b      	mov	r3, r1
 8008f5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f5e:	f7f7 f99b 	bl	8000298 <__aeabi_dsub>
 8008f62:	3530      	adds	r5, #48	@ 0x30
 8008f64:	f806 5b01 	strb.w	r5, [r6], #1
 8008f68:	4602      	mov	r2, r0
 8008f6a:	460b      	mov	r3, r1
 8008f6c:	42a6      	cmp	r6, r4
 8008f6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f72:	f04f 0200 	mov.w	r2, #0
 8008f76:	d124      	bne.n	8008fc2 <_dtoa_r+0x662>
 8008f78:	4bac      	ldr	r3, [pc, #688]	@ (800922c <_dtoa_r+0x8cc>)
 8008f7a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008f7e:	f7f7 f98d 	bl	800029c <__adddf3>
 8008f82:	4602      	mov	r2, r0
 8008f84:	460b      	mov	r3, r1
 8008f86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f8a:	f7f7 fdcd 	bl	8000b28 <__aeabi_dcmpgt>
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	d145      	bne.n	800901e <_dtoa_r+0x6be>
 8008f92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008f96:	49a5      	ldr	r1, [pc, #660]	@ (800922c <_dtoa_r+0x8cc>)
 8008f98:	2000      	movs	r0, #0
 8008f9a:	f7f7 f97d 	bl	8000298 <__aeabi_dsub>
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fa6:	f7f7 fda1 	bl	8000aec <__aeabi_dcmplt>
 8008faa:	2800      	cmp	r0, #0
 8008fac:	f43f aef5 	beq.w	8008d9a <_dtoa_r+0x43a>
 8008fb0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008fb2:	1e73      	subs	r3, r6, #1
 8008fb4:	9315      	str	r3, [sp, #84]	@ 0x54
 8008fb6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008fba:	2b30      	cmp	r3, #48	@ 0x30
 8008fbc:	d0f8      	beq.n	8008fb0 <_dtoa_r+0x650>
 8008fbe:	9f04      	ldr	r7, [sp, #16]
 8008fc0:	e73e      	b.n	8008e40 <_dtoa_r+0x4e0>
 8008fc2:	4b9b      	ldr	r3, [pc, #620]	@ (8009230 <_dtoa_r+0x8d0>)
 8008fc4:	f7f7 fb20 	bl	8000608 <__aeabi_dmul>
 8008fc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fcc:	e7bc      	b.n	8008f48 <_dtoa_r+0x5e8>
 8008fce:	d10c      	bne.n	8008fea <_dtoa_r+0x68a>
 8008fd0:	4b98      	ldr	r3, [pc, #608]	@ (8009234 <_dtoa_r+0x8d4>)
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fd8:	f7f7 fb16 	bl	8000608 <__aeabi_dmul>
 8008fdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fe0:	f7f7 fd98 	bl	8000b14 <__aeabi_dcmpge>
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	f000 8157 	beq.w	8009298 <_dtoa_r+0x938>
 8008fea:	2400      	movs	r4, #0
 8008fec:	4625      	mov	r5, r4
 8008fee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ff0:	43db      	mvns	r3, r3
 8008ff2:	9304      	str	r3, [sp, #16]
 8008ff4:	4656      	mov	r6, sl
 8008ff6:	2700      	movs	r7, #0
 8008ff8:	4621      	mov	r1, r4
 8008ffa:	4658      	mov	r0, fp
 8008ffc:	f000 fbb4 	bl	8009768 <_Bfree>
 8009000:	2d00      	cmp	r5, #0
 8009002:	d0dc      	beq.n	8008fbe <_dtoa_r+0x65e>
 8009004:	b12f      	cbz	r7, 8009012 <_dtoa_r+0x6b2>
 8009006:	42af      	cmp	r7, r5
 8009008:	d003      	beq.n	8009012 <_dtoa_r+0x6b2>
 800900a:	4639      	mov	r1, r7
 800900c:	4658      	mov	r0, fp
 800900e:	f000 fbab 	bl	8009768 <_Bfree>
 8009012:	4629      	mov	r1, r5
 8009014:	4658      	mov	r0, fp
 8009016:	f000 fba7 	bl	8009768 <_Bfree>
 800901a:	e7d0      	b.n	8008fbe <_dtoa_r+0x65e>
 800901c:	9704      	str	r7, [sp, #16]
 800901e:	4633      	mov	r3, r6
 8009020:	461e      	mov	r6, r3
 8009022:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009026:	2a39      	cmp	r2, #57	@ 0x39
 8009028:	d107      	bne.n	800903a <_dtoa_r+0x6da>
 800902a:	459a      	cmp	sl, r3
 800902c:	d1f8      	bne.n	8009020 <_dtoa_r+0x6c0>
 800902e:	9a04      	ldr	r2, [sp, #16]
 8009030:	3201      	adds	r2, #1
 8009032:	9204      	str	r2, [sp, #16]
 8009034:	2230      	movs	r2, #48	@ 0x30
 8009036:	f88a 2000 	strb.w	r2, [sl]
 800903a:	781a      	ldrb	r2, [r3, #0]
 800903c:	3201      	adds	r2, #1
 800903e:	701a      	strb	r2, [r3, #0]
 8009040:	e7bd      	b.n	8008fbe <_dtoa_r+0x65e>
 8009042:	4b7b      	ldr	r3, [pc, #492]	@ (8009230 <_dtoa_r+0x8d0>)
 8009044:	2200      	movs	r2, #0
 8009046:	f7f7 fadf 	bl	8000608 <__aeabi_dmul>
 800904a:	2200      	movs	r2, #0
 800904c:	2300      	movs	r3, #0
 800904e:	4604      	mov	r4, r0
 8009050:	460d      	mov	r5, r1
 8009052:	f7f7 fd41 	bl	8000ad8 <__aeabi_dcmpeq>
 8009056:	2800      	cmp	r0, #0
 8009058:	f43f aebb 	beq.w	8008dd2 <_dtoa_r+0x472>
 800905c:	e6f0      	b.n	8008e40 <_dtoa_r+0x4e0>
 800905e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009060:	2a00      	cmp	r2, #0
 8009062:	f000 80db 	beq.w	800921c <_dtoa_r+0x8bc>
 8009066:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009068:	2a01      	cmp	r2, #1
 800906a:	f300 80bf 	bgt.w	80091ec <_dtoa_r+0x88c>
 800906e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009070:	2a00      	cmp	r2, #0
 8009072:	f000 80b7 	beq.w	80091e4 <_dtoa_r+0x884>
 8009076:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800907a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800907c:	4646      	mov	r6, r8
 800907e:	9a08      	ldr	r2, [sp, #32]
 8009080:	2101      	movs	r1, #1
 8009082:	441a      	add	r2, r3
 8009084:	4658      	mov	r0, fp
 8009086:	4498      	add	r8, r3
 8009088:	9208      	str	r2, [sp, #32]
 800908a:	f000 fc6b 	bl	8009964 <__i2b>
 800908e:	4605      	mov	r5, r0
 8009090:	b15e      	cbz	r6, 80090aa <_dtoa_r+0x74a>
 8009092:	9b08      	ldr	r3, [sp, #32]
 8009094:	2b00      	cmp	r3, #0
 8009096:	dd08      	ble.n	80090aa <_dtoa_r+0x74a>
 8009098:	42b3      	cmp	r3, r6
 800909a:	9a08      	ldr	r2, [sp, #32]
 800909c:	bfa8      	it	ge
 800909e:	4633      	movge	r3, r6
 80090a0:	eba8 0803 	sub.w	r8, r8, r3
 80090a4:	1af6      	subs	r6, r6, r3
 80090a6:	1ad3      	subs	r3, r2, r3
 80090a8:	9308      	str	r3, [sp, #32]
 80090aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090ac:	b1f3      	cbz	r3, 80090ec <_dtoa_r+0x78c>
 80090ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 80b7 	beq.w	8009224 <_dtoa_r+0x8c4>
 80090b6:	b18c      	cbz	r4, 80090dc <_dtoa_r+0x77c>
 80090b8:	4629      	mov	r1, r5
 80090ba:	4622      	mov	r2, r4
 80090bc:	4658      	mov	r0, fp
 80090be:	f000 fd11 	bl	8009ae4 <__pow5mult>
 80090c2:	464a      	mov	r2, r9
 80090c4:	4601      	mov	r1, r0
 80090c6:	4605      	mov	r5, r0
 80090c8:	4658      	mov	r0, fp
 80090ca:	f000 fc61 	bl	8009990 <__multiply>
 80090ce:	4649      	mov	r1, r9
 80090d0:	9004      	str	r0, [sp, #16]
 80090d2:	4658      	mov	r0, fp
 80090d4:	f000 fb48 	bl	8009768 <_Bfree>
 80090d8:	9b04      	ldr	r3, [sp, #16]
 80090da:	4699      	mov	r9, r3
 80090dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090de:	1b1a      	subs	r2, r3, r4
 80090e0:	d004      	beq.n	80090ec <_dtoa_r+0x78c>
 80090e2:	4649      	mov	r1, r9
 80090e4:	4658      	mov	r0, fp
 80090e6:	f000 fcfd 	bl	8009ae4 <__pow5mult>
 80090ea:	4681      	mov	r9, r0
 80090ec:	2101      	movs	r1, #1
 80090ee:	4658      	mov	r0, fp
 80090f0:	f000 fc38 	bl	8009964 <__i2b>
 80090f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090f6:	4604      	mov	r4, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f000 81cf 	beq.w	800949c <_dtoa_r+0xb3c>
 80090fe:	461a      	mov	r2, r3
 8009100:	4601      	mov	r1, r0
 8009102:	4658      	mov	r0, fp
 8009104:	f000 fcee 	bl	8009ae4 <__pow5mult>
 8009108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800910a:	2b01      	cmp	r3, #1
 800910c:	4604      	mov	r4, r0
 800910e:	f300 8095 	bgt.w	800923c <_dtoa_r+0x8dc>
 8009112:	9b02      	ldr	r3, [sp, #8]
 8009114:	2b00      	cmp	r3, #0
 8009116:	f040 8087 	bne.w	8009228 <_dtoa_r+0x8c8>
 800911a:	9b03      	ldr	r3, [sp, #12]
 800911c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009120:	2b00      	cmp	r3, #0
 8009122:	f040 8089 	bne.w	8009238 <_dtoa_r+0x8d8>
 8009126:	9b03      	ldr	r3, [sp, #12]
 8009128:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800912c:	0d1b      	lsrs	r3, r3, #20
 800912e:	051b      	lsls	r3, r3, #20
 8009130:	b12b      	cbz	r3, 800913e <_dtoa_r+0x7de>
 8009132:	9b08      	ldr	r3, [sp, #32]
 8009134:	3301      	adds	r3, #1
 8009136:	9308      	str	r3, [sp, #32]
 8009138:	f108 0801 	add.w	r8, r8, #1
 800913c:	2301      	movs	r3, #1
 800913e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009140:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009142:	2b00      	cmp	r3, #0
 8009144:	f000 81b0 	beq.w	80094a8 <_dtoa_r+0xb48>
 8009148:	6923      	ldr	r3, [r4, #16]
 800914a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800914e:	6918      	ldr	r0, [r3, #16]
 8009150:	f000 fbbc 	bl	80098cc <__hi0bits>
 8009154:	f1c0 0020 	rsb	r0, r0, #32
 8009158:	9b08      	ldr	r3, [sp, #32]
 800915a:	4418      	add	r0, r3
 800915c:	f010 001f 	ands.w	r0, r0, #31
 8009160:	d077      	beq.n	8009252 <_dtoa_r+0x8f2>
 8009162:	f1c0 0320 	rsb	r3, r0, #32
 8009166:	2b04      	cmp	r3, #4
 8009168:	dd6b      	ble.n	8009242 <_dtoa_r+0x8e2>
 800916a:	9b08      	ldr	r3, [sp, #32]
 800916c:	f1c0 001c 	rsb	r0, r0, #28
 8009170:	4403      	add	r3, r0
 8009172:	4480      	add	r8, r0
 8009174:	4406      	add	r6, r0
 8009176:	9308      	str	r3, [sp, #32]
 8009178:	f1b8 0f00 	cmp.w	r8, #0
 800917c:	dd05      	ble.n	800918a <_dtoa_r+0x82a>
 800917e:	4649      	mov	r1, r9
 8009180:	4642      	mov	r2, r8
 8009182:	4658      	mov	r0, fp
 8009184:	f000 fd08 	bl	8009b98 <__lshift>
 8009188:	4681      	mov	r9, r0
 800918a:	9b08      	ldr	r3, [sp, #32]
 800918c:	2b00      	cmp	r3, #0
 800918e:	dd05      	ble.n	800919c <_dtoa_r+0x83c>
 8009190:	4621      	mov	r1, r4
 8009192:	461a      	mov	r2, r3
 8009194:	4658      	mov	r0, fp
 8009196:	f000 fcff 	bl	8009b98 <__lshift>
 800919a:	4604      	mov	r4, r0
 800919c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d059      	beq.n	8009256 <_dtoa_r+0x8f6>
 80091a2:	4621      	mov	r1, r4
 80091a4:	4648      	mov	r0, r9
 80091a6:	f000 fd63 	bl	8009c70 <__mcmp>
 80091aa:	2800      	cmp	r0, #0
 80091ac:	da53      	bge.n	8009256 <_dtoa_r+0x8f6>
 80091ae:	1e7b      	subs	r3, r7, #1
 80091b0:	9304      	str	r3, [sp, #16]
 80091b2:	4649      	mov	r1, r9
 80091b4:	2300      	movs	r3, #0
 80091b6:	220a      	movs	r2, #10
 80091b8:	4658      	mov	r0, fp
 80091ba:	f000 faf7 	bl	80097ac <__multadd>
 80091be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091c0:	4681      	mov	r9, r0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f000 8172 	beq.w	80094ac <_dtoa_r+0xb4c>
 80091c8:	2300      	movs	r3, #0
 80091ca:	4629      	mov	r1, r5
 80091cc:	220a      	movs	r2, #10
 80091ce:	4658      	mov	r0, fp
 80091d0:	f000 faec 	bl	80097ac <__multadd>
 80091d4:	9b00      	ldr	r3, [sp, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	4605      	mov	r5, r0
 80091da:	dc67      	bgt.n	80092ac <_dtoa_r+0x94c>
 80091dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091de:	2b02      	cmp	r3, #2
 80091e0:	dc41      	bgt.n	8009266 <_dtoa_r+0x906>
 80091e2:	e063      	b.n	80092ac <_dtoa_r+0x94c>
 80091e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80091e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80091ea:	e746      	b.n	800907a <_dtoa_r+0x71a>
 80091ec:	9b07      	ldr	r3, [sp, #28]
 80091ee:	1e5c      	subs	r4, r3, #1
 80091f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091f2:	42a3      	cmp	r3, r4
 80091f4:	bfbf      	itttt	lt
 80091f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80091f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80091fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80091fc:	1ae3      	sublt	r3, r4, r3
 80091fe:	bfb4      	ite	lt
 8009200:	18d2      	addlt	r2, r2, r3
 8009202:	1b1c      	subge	r4, r3, r4
 8009204:	9b07      	ldr	r3, [sp, #28]
 8009206:	bfbc      	itt	lt
 8009208:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800920a:	2400      	movlt	r4, #0
 800920c:	2b00      	cmp	r3, #0
 800920e:	bfb5      	itete	lt
 8009210:	eba8 0603 	sublt.w	r6, r8, r3
 8009214:	9b07      	ldrge	r3, [sp, #28]
 8009216:	2300      	movlt	r3, #0
 8009218:	4646      	movge	r6, r8
 800921a:	e730      	b.n	800907e <_dtoa_r+0x71e>
 800921c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800921e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009220:	4646      	mov	r6, r8
 8009222:	e735      	b.n	8009090 <_dtoa_r+0x730>
 8009224:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009226:	e75c      	b.n	80090e2 <_dtoa_r+0x782>
 8009228:	2300      	movs	r3, #0
 800922a:	e788      	b.n	800913e <_dtoa_r+0x7de>
 800922c:	3fe00000 	.word	0x3fe00000
 8009230:	40240000 	.word	0x40240000
 8009234:	40140000 	.word	0x40140000
 8009238:	9b02      	ldr	r3, [sp, #8]
 800923a:	e780      	b.n	800913e <_dtoa_r+0x7de>
 800923c:	2300      	movs	r3, #0
 800923e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009240:	e782      	b.n	8009148 <_dtoa_r+0x7e8>
 8009242:	d099      	beq.n	8009178 <_dtoa_r+0x818>
 8009244:	9a08      	ldr	r2, [sp, #32]
 8009246:	331c      	adds	r3, #28
 8009248:	441a      	add	r2, r3
 800924a:	4498      	add	r8, r3
 800924c:	441e      	add	r6, r3
 800924e:	9208      	str	r2, [sp, #32]
 8009250:	e792      	b.n	8009178 <_dtoa_r+0x818>
 8009252:	4603      	mov	r3, r0
 8009254:	e7f6      	b.n	8009244 <_dtoa_r+0x8e4>
 8009256:	9b07      	ldr	r3, [sp, #28]
 8009258:	9704      	str	r7, [sp, #16]
 800925a:	2b00      	cmp	r3, #0
 800925c:	dc20      	bgt.n	80092a0 <_dtoa_r+0x940>
 800925e:	9300      	str	r3, [sp, #0]
 8009260:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009262:	2b02      	cmp	r3, #2
 8009264:	dd1e      	ble.n	80092a4 <_dtoa_r+0x944>
 8009266:	9b00      	ldr	r3, [sp, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	f47f aec0 	bne.w	8008fee <_dtoa_r+0x68e>
 800926e:	4621      	mov	r1, r4
 8009270:	2205      	movs	r2, #5
 8009272:	4658      	mov	r0, fp
 8009274:	f000 fa9a 	bl	80097ac <__multadd>
 8009278:	4601      	mov	r1, r0
 800927a:	4604      	mov	r4, r0
 800927c:	4648      	mov	r0, r9
 800927e:	f000 fcf7 	bl	8009c70 <__mcmp>
 8009282:	2800      	cmp	r0, #0
 8009284:	f77f aeb3 	ble.w	8008fee <_dtoa_r+0x68e>
 8009288:	4656      	mov	r6, sl
 800928a:	2331      	movs	r3, #49	@ 0x31
 800928c:	f806 3b01 	strb.w	r3, [r6], #1
 8009290:	9b04      	ldr	r3, [sp, #16]
 8009292:	3301      	adds	r3, #1
 8009294:	9304      	str	r3, [sp, #16]
 8009296:	e6ae      	b.n	8008ff6 <_dtoa_r+0x696>
 8009298:	9c07      	ldr	r4, [sp, #28]
 800929a:	9704      	str	r7, [sp, #16]
 800929c:	4625      	mov	r5, r4
 800929e:	e7f3      	b.n	8009288 <_dtoa_r+0x928>
 80092a0:	9b07      	ldr	r3, [sp, #28]
 80092a2:	9300      	str	r3, [sp, #0]
 80092a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	f000 8104 	beq.w	80094b4 <_dtoa_r+0xb54>
 80092ac:	2e00      	cmp	r6, #0
 80092ae:	dd05      	ble.n	80092bc <_dtoa_r+0x95c>
 80092b0:	4629      	mov	r1, r5
 80092b2:	4632      	mov	r2, r6
 80092b4:	4658      	mov	r0, fp
 80092b6:	f000 fc6f 	bl	8009b98 <__lshift>
 80092ba:	4605      	mov	r5, r0
 80092bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d05a      	beq.n	8009378 <_dtoa_r+0xa18>
 80092c2:	6869      	ldr	r1, [r5, #4]
 80092c4:	4658      	mov	r0, fp
 80092c6:	f000 fa0f 	bl	80096e8 <_Balloc>
 80092ca:	4606      	mov	r6, r0
 80092cc:	b928      	cbnz	r0, 80092da <_dtoa_r+0x97a>
 80092ce:	4b84      	ldr	r3, [pc, #528]	@ (80094e0 <_dtoa_r+0xb80>)
 80092d0:	4602      	mov	r2, r0
 80092d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80092d6:	f7ff bb5a 	b.w	800898e <_dtoa_r+0x2e>
 80092da:	692a      	ldr	r2, [r5, #16]
 80092dc:	3202      	adds	r2, #2
 80092de:	0092      	lsls	r2, r2, #2
 80092e0:	f105 010c 	add.w	r1, r5, #12
 80092e4:	300c      	adds	r0, #12
 80092e6:	f001 ff75 	bl	800b1d4 <memcpy>
 80092ea:	2201      	movs	r2, #1
 80092ec:	4631      	mov	r1, r6
 80092ee:	4658      	mov	r0, fp
 80092f0:	f000 fc52 	bl	8009b98 <__lshift>
 80092f4:	f10a 0301 	add.w	r3, sl, #1
 80092f8:	9307      	str	r3, [sp, #28]
 80092fa:	9b00      	ldr	r3, [sp, #0]
 80092fc:	4453      	add	r3, sl
 80092fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009300:	9b02      	ldr	r3, [sp, #8]
 8009302:	f003 0301 	and.w	r3, r3, #1
 8009306:	462f      	mov	r7, r5
 8009308:	930a      	str	r3, [sp, #40]	@ 0x28
 800930a:	4605      	mov	r5, r0
 800930c:	9b07      	ldr	r3, [sp, #28]
 800930e:	4621      	mov	r1, r4
 8009310:	3b01      	subs	r3, #1
 8009312:	4648      	mov	r0, r9
 8009314:	9300      	str	r3, [sp, #0]
 8009316:	f7ff fa99 	bl	800884c <quorem>
 800931a:	4639      	mov	r1, r7
 800931c:	9002      	str	r0, [sp, #8]
 800931e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009322:	4648      	mov	r0, r9
 8009324:	f000 fca4 	bl	8009c70 <__mcmp>
 8009328:	462a      	mov	r2, r5
 800932a:	9008      	str	r0, [sp, #32]
 800932c:	4621      	mov	r1, r4
 800932e:	4658      	mov	r0, fp
 8009330:	f000 fcba 	bl	8009ca8 <__mdiff>
 8009334:	68c2      	ldr	r2, [r0, #12]
 8009336:	4606      	mov	r6, r0
 8009338:	bb02      	cbnz	r2, 800937c <_dtoa_r+0xa1c>
 800933a:	4601      	mov	r1, r0
 800933c:	4648      	mov	r0, r9
 800933e:	f000 fc97 	bl	8009c70 <__mcmp>
 8009342:	4602      	mov	r2, r0
 8009344:	4631      	mov	r1, r6
 8009346:	4658      	mov	r0, fp
 8009348:	920e      	str	r2, [sp, #56]	@ 0x38
 800934a:	f000 fa0d 	bl	8009768 <_Bfree>
 800934e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009350:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009352:	9e07      	ldr	r6, [sp, #28]
 8009354:	ea43 0102 	orr.w	r1, r3, r2
 8009358:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800935a:	4319      	orrs	r1, r3
 800935c:	d110      	bne.n	8009380 <_dtoa_r+0xa20>
 800935e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009362:	d029      	beq.n	80093b8 <_dtoa_r+0xa58>
 8009364:	9b08      	ldr	r3, [sp, #32]
 8009366:	2b00      	cmp	r3, #0
 8009368:	dd02      	ble.n	8009370 <_dtoa_r+0xa10>
 800936a:	9b02      	ldr	r3, [sp, #8]
 800936c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009370:	9b00      	ldr	r3, [sp, #0]
 8009372:	f883 8000 	strb.w	r8, [r3]
 8009376:	e63f      	b.n	8008ff8 <_dtoa_r+0x698>
 8009378:	4628      	mov	r0, r5
 800937a:	e7bb      	b.n	80092f4 <_dtoa_r+0x994>
 800937c:	2201      	movs	r2, #1
 800937e:	e7e1      	b.n	8009344 <_dtoa_r+0x9e4>
 8009380:	9b08      	ldr	r3, [sp, #32]
 8009382:	2b00      	cmp	r3, #0
 8009384:	db04      	blt.n	8009390 <_dtoa_r+0xa30>
 8009386:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009388:	430b      	orrs	r3, r1
 800938a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800938c:	430b      	orrs	r3, r1
 800938e:	d120      	bne.n	80093d2 <_dtoa_r+0xa72>
 8009390:	2a00      	cmp	r2, #0
 8009392:	dded      	ble.n	8009370 <_dtoa_r+0xa10>
 8009394:	4649      	mov	r1, r9
 8009396:	2201      	movs	r2, #1
 8009398:	4658      	mov	r0, fp
 800939a:	f000 fbfd 	bl	8009b98 <__lshift>
 800939e:	4621      	mov	r1, r4
 80093a0:	4681      	mov	r9, r0
 80093a2:	f000 fc65 	bl	8009c70 <__mcmp>
 80093a6:	2800      	cmp	r0, #0
 80093a8:	dc03      	bgt.n	80093b2 <_dtoa_r+0xa52>
 80093aa:	d1e1      	bne.n	8009370 <_dtoa_r+0xa10>
 80093ac:	f018 0f01 	tst.w	r8, #1
 80093b0:	d0de      	beq.n	8009370 <_dtoa_r+0xa10>
 80093b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80093b6:	d1d8      	bne.n	800936a <_dtoa_r+0xa0a>
 80093b8:	9a00      	ldr	r2, [sp, #0]
 80093ba:	2339      	movs	r3, #57	@ 0x39
 80093bc:	7013      	strb	r3, [r2, #0]
 80093be:	4633      	mov	r3, r6
 80093c0:	461e      	mov	r6, r3
 80093c2:	3b01      	subs	r3, #1
 80093c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80093c8:	2a39      	cmp	r2, #57	@ 0x39
 80093ca:	d052      	beq.n	8009472 <_dtoa_r+0xb12>
 80093cc:	3201      	adds	r2, #1
 80093ce:	701a      	strb	r2, [r3, #0]
 80093d0:	e612      	b.n	8008ff8 <_dtoa_r+0x698>
 80093d2:	2a00      	cmp	r2, #0
 80093d4:	dd07      	ble.n	80093e6 <_dtoa_r+0xa86>
 80093d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80093da:	d0ed      	beq.n	80093b8 <_dtoa_r+0xa58>
 80093dc:	9a00      	ldr	r2, [sp, #0]
 80093de:	f108 0301 	add.w	r3, r8, #1
 80093e2:	7013      	strb	r3, [r2, #0]
 80093e4:	e608      	b.n	8008ff8 <_dtoa_r+0x698>
 80093e6:	9b07      	ldr	r3, [sp, #28]
 80093e8:	9a07      	ldr	r2, [sp, #28]
 80093ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 80093ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d028      	beq.n	8009446 <_dtoa_r+0xae6>
 80093f4:	4649      	mov	r1, r9
 80093f6:	2300      	movs	r3, #0
 80093f8:	220a      	movs	r2, #10
 80093fa:	4658      	mov	r0, fp
 80093fc:	f000 f9d6 	bl	80097ac <__multadd>
 8009400:	42af      	cmp	r7, r5
 8009402:	4681      	mov	r9, r0
 8009404:	f04f 0300 	mov.w	r3, #0
 8009408:	f04f 020a 	mov.w	r2, #10
 800940c:	4639      	mov	r1, r7
 800940e:	4658      	mov	r0, fp
 8009410:	d107      	bne.n	8009422 <_dtoa_r+0xac2>
 8009412:	f000 f9cb 	bl	80097ac <__multadd>
 8009416:	4607      	mov	r7, r0
 8009418:	4605      	mov	r5, r0
 800941a:	9b07      	ldr	r3, [sp, #28]
 800941c:	3301      	adds	r3, #1
 800941e:	9307      	str	r3, [sp, #28]
 8009420:	e774      	b.n	800930c <_dtoa_r+0x9ac>
 8009422:	f000 f9c3 	bl	80097ac <__multadd>
 8009426:	4629      	mov	r1, r5
 8009428:	4607      	mov	r7, r0
 800942a:	2300      	movs	r3, #0
 800942c:	220a      	movs	r2, #10
 800942e:	4658      	mov	r0, fp
 8009430:	f000 f9bc 	bl	80097ac <__multadd>
 8009434:	4605      	mov	r5, r0
 8009436:	e7f0      	b.n	800941a <_dtoa_r+0xaba>
 8009438:	9b00      	ldr	r3, [sp, #0]
 800943a:	2b00      	cmp	r3, #0
 800943c:	bfcc      	ite	gt
 800943e:	461e      	movgt	r6, r3
 8009440:	2601      	movle	r6, #1
 8009442:	4456      	add	r6, sl
 8009444:	2700      	movs	r7, #0
 8009446:	4649      	mov	r1, r9
 8009448:	2201      	movs	r2, #1
 800944a:	4658      	mov	r0, fp
 800944c:	f000 fba4 	bl	8009b98 <__lshift>
 8009450:	4621      	mov	r1, r4
 8009452:	4681      	mov	r9, r0
 8009454:	f000 fc0c 	bl	8009c70 <__mcmp>
 8009458:	2800      	cmp	r0, #0
 800945a:	dcb0      	bgt.n	80093be <_dtoa_r+0xa5e>
 800945c:	d102      	bne.n	8009464 <_dtoa_r+0xb04>
 800945e:	f018 0f01 	tst.w	r8, #1
 8009462:	d1ac      	bne.n	80093be <_dtoa_r+0xa5e>
 8009464:	4633      	mov	r3, r6
 8009466:	461e      	mov	r6, r3
 8009468:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800946c:	2a30      	cmp	r2, #48	@ 0x30
 800946e:	d0fa      	beq.n	8009466 <_dtoa_r+0xb06>
 8009470:	e5c2      	b.n	8008ff8 <_dtoa_r+0x698>
 8009472:	459a      	cmp	sl, r3
 8009474:	d1a4      	bne.n	80093c0 <_dtoa_r+0xa60>
 8009476:	9b04      	ldr	r3, [sp, #16]
 8009478:	3301      	adds	r3, #1
 800947a:	9304      	str	r3, [sp, #16]
 800947c:	2331      	movs	r3, #49	@ 0x31
 800947e:	f88a 3000 	strb.w	r3, [sl]
 8009482:	e5b9      	b.n	8008ff8 <_dtoa_r+0x698>
 8009484:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009486:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80094e4 <_dtoa_r+0xb84>
 800948a:	b11b      	cbz	r3, 8009494 <_dtoa_r+0xb34>
 800948c:	f10a 0308 	add.w	r3, sl, #8
 8009490:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009492:	6013      	str	r3, [r2, #0]
 8009494:	4650      	mov	r0, sl
 8009496:	b019      	add	sp, #100	@ 0x64
 8009498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800949c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800949e:	2b01      	cmp	r3, #1
 80094a0:	f77f ae37 	ble.w	8009112 <_dtoa_r+0x7b2>
 80094a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80094a8:	2001      	movs	r0, #1
 80094aa:	e655      	b.n	8009158 <_dtoa_r+0x7f8>
 80094ac:	9b00      	ldr	r3, [sp, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f77f aed6 	ble.w	8009260 <_dtoa_r+0x900>
 80094b4:	4656      	mov	r6, sl
 80094b6:	4621      	mov	r1, r4
 80094b8:	4648      	mov	r0, r9
 80094ba:	f7ff f9c7 	bl	800884c <quorem>
 80094be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80094c2:	f806 8b01 	strb.w	r8, [r6], #1
 80094c6:	9b00      	ldr	r3, [sp, #0]
 80094c8:	eba6 020a 	sub.w	r2, r6, sl
 80094cc:	4293      	cmp	r3, r2
 80094ce:	ddb3      	ble.n	8009438 <_dtoa_r+0xad8>
 80094d0:	4649      	mov	r1, r9
 80094d2:	2300      	movs	r3, #0
 80094d4:	220a      	movs	r2, #10
 80094d6:	4658      	mov	r0, fp
 80094d8:	f000 f968 	bl	80097ac <__multadd>
 80094dc:	4681      	mov	r9, r0
 80094de:	e7ea      	b.n	80094b6 <_dtoa_r+0xb56>
 80094e0:	0800d339 	.word	0x0800d339
 80094e4:	0800d2bd 	.word	0x0800d2bd

080094e8 <_free_r>:
 80094e8:	b538      	push	{r3, r4, r5, lr}
 80094ea:	4605      	mov	r5, r0
 80094ec:	2900      	cmp	r1, #0
 80094ee:	d041      	beq.n	8009574 <_free_r+0x8c>
 80094f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80094f4:	1f0c      	subs	r4, r1, #4
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	bfb8      	it	lt
 80094fa:	18e4      	addlt	r4, r4, r3
 80094fc:	f000 f8e8 	bl	80096d0 <__malloc_lock>
 8009500:	4a1d      	ldr	r2, [pc, #116]	@ (8009578 <_free_r+0x90>)
 8009502:	6813      	ldr	r3, [r2, #0]
 8009504:	b933      	cbnz	r3, 8009514 <_free_r+0x2c>
 8009506:	6063      	str	r3, [r4, #4]
 8009508:	6014      	str	r4, [r2, #0]
 800950a:	4628      	mov	r0, r5
 800950c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009510:	f000 b8e4 	b.w	80096dc <__malloc_unlock>
 8009514:	42a3      	cmp	r3, r4
 8009516:	d908      	bls.n	800952a <_free_r+0x42>
 8009518:	6820      	ldr	r0, [r4, #0]
 800951a:	1821      	adds	r1, r4, r0
 800951c:	428b      	cmp	r3, r1
 800951e:	bf01      	itttt	eq
 8009520:	6819      	ldreq	r1, [r3, #0]
 8009522:	685b      	ldreq	r3, [r3, #4]
 8009524:	1809      	addeq	r1, r1, r0
 8009526:	6021      	streq	r1, [r4, #0]
 8009528:	e7ed      	b.n	8009506 <_free_r+0x1e>
 800952a:	461a      	mov	r2, r3
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	b10b      	cbz	r3, 8009534 <_free_r+0x4c>
 8009530:	42a3      	cmp	r3, r4
 8009532:	d9fa      	bls.n	800952a <_free_r+0x42>
 8009534:	6811      	ldr	r1, [r2, #0]
 8009536:	1850      	adds	r0, r2, r1
 8009538:	42a0      	cmp	r0, r4
 800953a:	d10b      	bne.n	8009554 <_free_r+0x6c>
 800953c:	6820      	ldr	r0, [r4, #0]
 800953e:	4401      	add	r1, r0
 8009540:	1850      	adds	r0, r2, r1
 8009542:	4283      	cmp	r3, r0
 8009544:	6011      	str	r1, [r2, #0]
 8009546:	d1e0      	bne.n	800950a <_free_r+0x22>
 8009548:	6818      	ldr	r0, [r3, #0]
 800954a:	685b      	ldr	r3, [r3, #4]
 800954c:	6053      	str	r3, [r2, #4]
 800954e:	4408      	add	r0, r1
 8009550:	6010      	str	r0, [r2, #0]
 8009552:	e7da      	b.n	800950a <_free_r+0x22>
 8009554:	d902      	bls.n	800955c <_free_r+0x74>
 8009556:	230c      	movs	r3, #12
 8009558:	602b      	str	r3, [r5, #0]
 800955a:	e7d6      	b.n	800950a <_free_r+0x22>
 800955c:	6820      	ldr	r0, [r4, #0]
 800955e:	1821      	adds	r1, r4, r0
 8009560:	428b      	cmp	r3, r1
 8009562:	bf04      	itt	eq
 8009564:	6819      	ldreq	r1, [r3, #0]
 8009566:	685b      	ldreq	r3, [r3, #4]
 8009568:	6063      	str	r3, [r4, #4]
 800956a:	bf04      	itt	eq
 800956c:	1809      	addeq	r1, r1, r0
 800956e:	6021      	streq	r1, [r4, #0]
 8009570:	6054      	str	r4, [r2, #4]
 8009572:	e7ca      	b.n	800950a <_free_r+0x22>
 8009574:	bd38      	pop	{r3, r4, r5, pc}
 8009576:	bf00      	nop
 8009578:	20000710 	.word	0x20000710

0800957c <malloc>:
 800957c:	4b02      	ldr	r3, [pc, #8]	@ (8009588 <malloc+0xc>)
 800957e:	4601      	mov	r1, r0
 8009580:	6818      	ldr	r0, [r3, #0]
 8009582:	f000 b825 	b.w	80095d0 <_malloc_r>
 8009586:	bf00      	nop
 8009588:	2000009c 	.word	0x2000009c

0800958c <sbrk_aligned>:
 800958c:	b570      	push	{r4, r5, r6, lr}
 800958e:	4e0f      	ldr	r6, [pc, #60]	@ (80095cc <sbrk_aligned+0x40>)
 8009590:	460c      	mov	r4, r1
 8009592:	6831      	ldr	r1, [r6, #0]
 8009594:	4605      	mov	r5, r0
 8009596:	b911      	cbnz	r1, 800959e <sbrk_aligned+0x12>
 8009598:	f001 fe0c 	bl	800b1b4 <_sbrk_r>
 800959c:	6030      	str	r0, [r6, #0]
 800959e:	4621      	mov	r1, r4
 80095a0:	4628      	mov	r0, r5
 80095a2:	f001 fe07 	bl	800b1b4 <_sbrk_r>
 80095a6:	1c43      	adds	r3, r0, #1
 80095a8:	d103      	bne.n	80095b2 <sbrk_aligned+0x26>
 80095aa:	f04f 34ff 	mov.w	r4, #4294967295
 80095ae:	4620      	mov	r0, r4
 80095b0:	bd70      	pop	{r4, r5, r6, pc}
 80095b2:	1cc4      	adds	r4, r0, #3
 80095b4:	f024 0403 	bic.w	r4, r4, #3
 80095b8:	42a0      	cmp	r0, r4
 80095ba:	d0f8      	beq.n	80095ae <sbrk_aligned+0x22>
 80095bc:	1a21      	subs	r1, r4, r0
 80095be:	4628      	mov	r0, r5
 80095c0:	f001 fdf8 	bl	800b1b4 <_sbrk_r>
 80095c4:	3001      	adds	r0, #1
 80095c6:	d1f2      	bne.n	80095ae <sbrk_aligned+0x22>
 80095c8:	e7ef      	b.n	80095aa <sbrk_aligned+0x1e>
 80095ca:	bf00      	nop
 80095cc:	2000070c 	.word	0x2000070c

080095d0 <_malloc_r>:
 80095d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095d4:	1ccd      	adds	r5, r1, #3
 80095d6:	f025 0503 	bic.w	r5, r5, #3
 80095da:	3508      	adds	r5, #8
 80095dc:	2d0c      	cmp	r5, #12
 80095de:	bf38      	it	cc
 80095e0:	250c      	movcc	r5, #12
 80095e2:	2d00      	cmp	r5, #0
 80095e4:	4606      	mov	r6, r0
 80095e6:	db01      	blt.n	80095ec <_malloc_r+0x1c>
 80095e8:	42a9      	cmp	r1, r5
 80095ea:	d904      	bls.n	80095f6 <_malloc_r+0x26>
 80095ec:	230c      	movs	r3, #12
 80095ee:	6033      	str	r3, [r6, #0]
 80095f0:	2000      	movs	r0, #0
 80095f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80096cc <_malloc_r+0xfc>
 80095fa:	f000 f869 	bl	80096d0 <__malloc_lock>
 80095fe:	f8d8 3000 	ldr.w	r3, [r8]
 8009602:	461c      	mov	r4, r3
 8009604:	bb44      	cbnz	r4, 8009658 <_malloc_r+0x88>
 8009606:	4629      	mov	r1, r5
 8009608:	4630      	mov	r0, r6
 800960a:	f7ff ffbf 	bl	800958c <sbrk_aligned>
 800960e:	1c43      	adds	r3, r0, #1
 8009610:	4604      	mov	r4, r0
 8009612:	d158      	bne.n	80096c6 <_malloc_r+0xf6>
 8009614:	f8d8 4000 	ldr.w	r4, [r8]
 8009618:	4627      	mov	r7, r4
 800961a:	2f00      	cmp	r7, #0
 800961c:	d143      	bne.n	80096a6 <_malloc_r+0xd6>
 800961e:	2c00      	cmp	r4, #0
 8009620:	d04b      	beq.n	80096ba <_malloc_r+0xea>
 8009622:	6823      	ldr	r3, [r4, #0]
 8009624:	4639      	mov	r1, r7
 8009626:	4630      	mov	r0, r6
 8009628:	eb04 0903 	add.w	r9, r4, r3
 800962c:	f001 fdc2 	bl	800b1b4 <_sbrk_r>
 8009630:	4581      	cmp	r9, r0
 8009632:	d142      	bne.n	80096ba <_malloc_r+0xea>
 8009634:	6821      	ldr	r1, [r4, #0]
 8009636:	1a6d      	subs	r5, r5, r1
 8009638:	4629      	mov	r1, r5
 800963a:	4630      	mov	r0, r6
 800963c:	f7ff ffa6 	bl	800958c <sbrk_aligned>
 8009640:	3001      	adds	r0, #1
 8009642:	d03a      	beq.n	80096ba <_malloc_r+0xea>
 8009644:	6823      	ldr	r3, [r4, #0]
 8009646:	442b      	add	r3, r5
 8009648:	6023      	str	r3, [r4, #0]
 800964a:	f8d8 3000 	ldr.w	r3, [r8]
 800964e:	685a      	ldr	r2, [r3, #4]
 8009650:	bb62      	cbnz	r2, 80096ac <_malloc_r+0xdc>
 8009652:	f8c8 7000 	str.w	r7, [r8]
 8009656:	e00f      	b.n	8009678 <_malloc_r+0xa8>
 8009658:	6822      	ldr	r2, [r4, #0]
 800965a:	1b52      	subs	r2, r2, r5
 800965c:	d420      	bmi.n	80096a0 <_malloc_r+0xd0>
 800965e:	2a0b      	cmp	r2, #11
 8009660:	d917      	bls.n	8009692 <_malloc_r+0xc2>
 8009662:	1961      	adds	r1, r4, r5
 8009664:	42a3      	cmp	r3, r4
 8009666:	6025      	str	r5, [r4, #0]
 8009668:	bf18      	it	ne
 800966a:	6059      	strne	r1, [r3, #4]
 800966c:	6863      	ldr	r3, [r4, #4]
 800966e:	bf08      	it	eq
 8009670:	f8c8 1000 	streq.w	r1, [r8]
 8009674:	5162      	str	r2, [r4, r5]
 8009676:	604b      	str	r3, [r1, #4]
 8009678:	4630      	mov	r0, r6
 800967a:	f000 f82f 	bl	80096dc <__malloc_unlock>
 800967e:	f104 000b 	add.w	r0, r4, #11
 8009682:	1d23      	adds	r3, r4, #4
 8009684:	f020 0007 	bic.w	r0, r0, #7
 8009688:	1ac2      	subs	r2, r0, r3
 800968a:	bf1c      	itt	ne
 800968c:	1a1b      	subne	r3, r3, r0
 800968e:	50a3      	strne	r3, [r4, r2]
 8009690:	e7af      	b.n	80095f2 <_malloc_r+0x22>
 8009692:	6862      	ldr	r2, [r4, #4]
 8009694:	42a3      	cmp	r3, r4
 8009696:	bf0c      	ite	eq
 8009698:	f8c8 2000 	streq.w	r2, [r8]
 800969c:	605a      	strne	r2, [r3, #4]
 800969e:	e7eb      	b.n	8009678 <_malloc_r+0xa8>
 80096a0:	4623      	mov	r3, r4
 80096a2:	6864      	ldr	r4, [r4, #4]
 80096a4:	e7ae      	b.n	8009604 <_malloc_r+0x34>
 80096a6:	463c      	mov	r4, r7
 80096a8:	687f      	ldr	r7, [r7, #4]
 80096aa:	e7b6      	b.n	800961a <_malloc_r+0x4a>
 80096ac:	461a      	mov	r2, r3
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	42a3      	cmp	r3, r4
 80096b2:	d1fb      	bne.n	80096ac <_malloc_r+0xdc>
 80096b4:	2300      	movs	r3, #0
 80096b6:	6053      	str	r3, [r2, #4]
 80096b8:	e7de      	b.n	8009678 <_malloc_r+0xa8>
 80096ba:	230c      	movs	r3, #12
 80096bc:	6033      	str	r3, [r6, #0]
 80096be:	4630      	mov	r0, r6
 80096c0:	f000 f80c 	bl	80096dc <__malloc_unlock>
 80096c4:	e794      	b.n	80095f0 <_malloc_r+0x20>
 80096c6:	6005      	str	r5, [r0, #0]
 80096c8:	e7d6      	b.n	8009678 <_malloc_r+0xa8>
 80096ca:	bf00      	nop
 80096cc:	20000710 	.word	0x20000710

080096d0 <__malloc_lock>:
 80096d0:	4801      	ldr	r0, [pc, #4]	@ (80096d8 <__malloc_lock+0x8>)
 80096d2:	f7ff b8b2 	b.w	800883a <__retarget_lock_acquire_recursive>
 80096d6:	bf00      	nop
 80096d8:	20000708 	.word	0x20000708

080096dc <__malloc_unlock>:
 80096dc:	4801      	ldr	r0, [pc, #4]	@ (80096e4 <__malloc_unlock+0x8>)
 80096de:	f7ff b8ad 	b.w	800883c <__retarget_lock_release_recursive>
 80096e2:	bf00      	nop
 80096e4:	20000708 	.word	0x20000708

080096e8 <_Balloc>:
 80096e8:	b570      	push	{r4, r5, r6, lr}
 80096ea:	69c6      	ldr	r6, [r0, #28]
 80096ec:	4604      	mov	r4, r0
 80096ee:	460d      	mov	r5, r1
 80096f0:	b976      	cbnz	r6, 8009710 <_Balloc+0x28>
 80096f2:	2010      	movs	r0, #16
 80096f4:	f7ff ff42 	bl	800957c <malloc>
 80096f8:	4602      	mov	r2, r0
 80096fa:	61e0      	str	r0, [r4, #28]
 80096fc:	b920      	cbnz	r0, 8009708 <_Balloc+0x20>
 80096fe:	4b18      	ldr	r3, [pc, #96]	@ (8009760 <_Balloc+0x78>)
 8009700:	4818      	ldr	r0, [pc, #96]	@ (8009764 <_Balloc+0x7c>)
 8009702:	216b      	movs	r1, #107	@ 0x6b
 8009704:	f001 fd7c 	bl	800b200 <__assert_func>
 8009708:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800970c:	6006      	str	r6, [r0, #0]
 800970e:	60c6      	str	r6, [r0, #12]
 8009710:	69e6      	ldr	r6, [r4, #28]
 8009712:	68f3      	ldr	r3, [r6, #12]
 8009714:	b183      	cbz	r3, 8009738 <_Balloc+0x50>
 8009716:	69e3      	ldr	r3, [r4, #28]
 8009718:	68db      	ldr	r3, [r3, #12]
 800971a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800971e:	b9b8      	cbnz	r0, 8009750 <_Balloc+0x68>
 8009720:	2101      	movs	r1, #1
 8009722:	fa01 f605 	lsl.w	r6, r1, r5
 8009726:	1d72      	adds	r2, r6, #5
 8009728:	0092      	lsls	r2, r2, #2
 800972a:	4620      	mov	r0, r4
 800972c:	f001 fd86 	bl	800b23c <_calloc_r>
 8009730:	b160      	cbz	r0, 800974c <_Balloc+0x64>
 8009732:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009736:	e00e      	b.n	8009756 <_Balloc+0x6e>
 8009738:	2221      	movs	r2, #33	@ 0x21
 800973a:	2104      	movs	r1, #4
 800973c:	4620      	mov	r0, r4
 800973e:	f001 fd7d 	bl	800b23c <_calloc_r>
 8009742:	69e3      	ldr	r3, [r4, #28]
 8009744:	60f0      	str	r0, [r6, #12]
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d1e4      	bne.n	8009716 <_Balloc+0x2e>
 800974c:	2000      	movs	r0, #0
 800974e:	bd70      	pop	{r4, r5, r6, pc}
 8009750:	6802      	ldr	r2, [r0, #0]
 8009752:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009756:	2300      	movs	r3, #0
 8009758:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800975c:	e7f7      	b.n	800974e <_Balloc+0x66>
 800975e:	bf00      	nop
 8009760:	0800d2ca 	.word	0x0800d2ca
 8009764:	0800d34a 	.word	0x0800d34a

08009768 <_Bfree>:
 8009768:	b570      	push	{r4, r5, r6, lr}
 800976a:	69c6      	ldr	r6, [r0, #28]
 800976c:	4605      	mov	r5, r0
 800976e:	460c      	mov	r4, r1
 8009770:	b976      	cbnz	r6, 8009790 <_Bfree+0x28>
 8009772:	2010      	movs	r0, #16
 8009774:	f7ff ff02 	bl	800957c <malloc>
 8009778:	4602      	mov	r2, r0
 800977a:	61e8      	str	r0, [r5, #28]
 800977c:	b920      	cbnz	r0, 8009788 <_Bfree+0x20>
 800977e:	4b09      	ldr	r3, [pc, #36]	@ (80097a4 <_Bfree+0x3c>)
 8009780:	4809      	ldr	r0, [pc, #36]	@ (80097a8 <_Bfree+0x40>)
 8009782:	218f      	movs	r1, #143	@ 0x8f
 8009784:	f001 fd3c 	bl	800b200 <__assert_func>
 8009788:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800978c:	6006      	str	r6, [r0, #0]
 800978e:	60c6      	str	r6, [r0, #12]
 8009790:	b13c      	cbz	r4, 80097a2 <_Bfree+0x3a>
 8009792:	69eb      	ldr	r3, [r5, #28]
 8009794:	6862      	ldr	r2, [r4, #4]
 8009796:	68db      	ldr	r3, [r3, #12]
 8009798:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800979c:	6021      	str	r1, [r4, #0]
 800979e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80097a2:	bd70      	pop	{r4, r5, r6, pc}
 80097a4:	0800d2ca 	.word	0x0800d2ca
 80097a8:	0800d34a 	.word	0x0800d34a

080097ac <__multadd>:
 80097ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097b0:	690d      	ldr	r5, [r1, #16]
 80097b2:	4607      	mov	r7, r0
 80097b4:	460c      	mov	r4, r1
 80097b6:	461e      	mov	r6, r3
 80097b8:	f101 0c14 	add.w	ip, r1, #20
 80097bc:	2000      	movs	r0, #0
 80097be:	f8dc 3000 	ldr.w	r3, [ip]
 80097c2:	b299      	uxth	r1, r3
 80097c4:	fb02 6101 	mla	r1, r2, r1, r6
 80097c8:	0c1e      	lsrs	r6, r3, #16
 80097ca:	0c0b      	lsrs	r3, r1, #16
 80097cc:	fb02 3306 	mla	r3, r2, r6, r3
 80097d0:	b289      	uxth	r1, r1
 80097d2:	3001      	adds	r0, #1
 80097d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80097d8:	4285      	cmp	r5, r0
 80097da:	f84c 1b04 	str.w	r1, [ip], #4
 80097de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80097e2:	dcec      	bgt.n	80097be <__multadd+0x12>
 80097e4:	b30e      	cbz	r6, 800982a <__multadd+0x7e>
 80097e6:	68a3      	ldr	r3, [r4, #8]
 80097e8:	42ab      	cmp	r3, r5
 80097ea:	dc19      	bgt.n	8009820 <__multadd+0x74>
 80097ec:	6861      	ldr	r1, [r4, #4]
 80097ee:	4638      	mov	r0, r7
 80097f0:	3101      	adds	r1, #1
 80097f2:	f7ff ff79 	bl	80096e8 <_Balloc>
 80097f6:	4680      	mov	r8, r0
 80097f8:	b928      	cbnz	r0, 8009806 <__multadd+0x5a>
 80097fa:	4602      	mov	r2, r0
 80097fc:	4b0c      	ldr	r3, [pc, #48]	@ (8009830 <__multadd+0x84>)
 80097fe:	480d      	ldr	r0, [pc, #52]	@ (8009834 <__multadd+0x88>)
 8009800:	21ba      	movs	r1, #186	@ 0xba
 8009802:	f001 fcfd 	bl	800b200 <__assert_func>
 8009806:	6922      	ldr	r2, [r4, #16]
 8009808:	3202      	adds	r2, #2
 800980a:	f104 010c 	add.w	r1, r4, #12
 800980e:	0092      	lsls	r2, r2, #2
 8009810:	300c      	adds	r0, #12
 8009812:	f001 fcdf 	bl	800b1d4 <memcpy>
 8009816:	4621      	mov	r1, r4
 8009818:	4638      	mov	r0, r7
 800981a:	f7ff ffa5 	bl	8009768 <_Bfree>
 800981e:	4644      	mov	r4, r8
 8009820:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009824:	3501      	adds	r5, #1
 8009826:	615e      	str	r6, [r3, #20]
 8009828:	6125      	str	r5, [r4, #16]
 800982a:	4620      	mov	r0, r4
 800982c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009830:	0800d339 	.word	0x0800d339
 8009834:	0800d34a 	.word	0x0800d34a

08009838 <__s2b>:
 8009838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800983c:	460c      	mov	r4, r1
 800983e:	4615      	mov	r5, r2
 8009840:	461f      	mov	r7, r3
 8009842:	2209      	movs	r2, #9
 8009844:	3308      	adds	r3, #8
 8009846:	4606      	mov	r6, r0
 8009848:	fb93 f3f2 	sdiv	r3, r3, r2
 800984c:	2100      	movs	r1, #0
 800984e:	2201      	movs	r2, #1
 8009850:	429a      	cmp	r2, r3
 8009852:	db09      	blt.n	8009868 <__s2b+0x30>
 8009854:	4630      	mov	r0, r6
 8009856:	f7ff ff47 	bl	80096e8 <_Balloc>
 800985a:	b940      	cbnz	r0, 800986e <__s2b+0x36>
 800985c:	4602      	mov	r2, r0
 800985e:	4b19      	ldr	r3, [pc, #100]	@ (80098c4 <__s2b+0x8c>)
 8009860:	4819      	ldr	r0, [pc, #100]	@ (80098c8 <__s2b+0x90>)
 8009862:	21d3      	movs	r1, #211	@ 0xd3
 8009864:	f001 fccc 	bl	800b200 <__assert_func>
 8009868:	0052      	lsls	r2, r2, #1
 800986a:	3101      	adds	r1, #1
 800986c:	e7f0      	b.n	8009850 <__s2b+0x18>
 800986e:	9b08      	ldr	r3, [sp, #32]
 8009870:	6143      	str	r3, [r0, #20]
 8009872:	2d09      	cmp	r5, #9
 8009874:	f04f 0301 	mov.w	r3, #1
 8009878:	6103      	str	r3, [r0, #16]
 800987a:	dd16      	ble.n	80098aa <__s2b+0x72>
 800987c:	f104 0909 	add.w	r9, r4, #9
 8009880:	46c8      	mov	r8, r9
 8009882:	442c      	add	r4, r5
 8009884:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009888:	4601      	mov	r1, r0
 800988a:	3b30      	subs	r3, #48	@ 0x30
 800988c:	220a      	movs	r2, #10
 800988e:	4630      	mov	r0, r6
 8009890:	f7ff ff8c 	bl	80097ac <__multadd>
 8009894:	45a0      	cmp	r8, r4
 8009896:	d1f5      	bne.n	8009884 <__s2b+0x4c>
 8009898:	f1a5 0408 	sub.w	r4, r5, #8
 800989c:	444c      	add	r4, r9
 800989e:	1b2d      	subs	r5, r5, r4
 80098a0:	1963      	adds	r3, r4, r5
 80098a2:	42bb      	cmp	r3, r7
 80098a4:	db04      	blt.n	80098b0 <__s2b+0x78>
 80098a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098aa:	340a      	adds	r4, #10
 80098ac:	2509      	movs	r5, #9
 80098ae:	e7f6      	b.n	800989e <__s2b+0x66>
 80098b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80098b4:	4601      	mov	r1, r0
 80098b6:	3b30      	subs	r3, #48	@ 0x30
 80098b8:	220a      	movs	r2, #10
 80098ba:	4630      	mov	r0, r6
 80098bc:	f7ff ff76 	bl	80097ac <__multadd>
 80098c0:	e7ee      	b.n	80098a0 <__s2b+0x68>
 80098c2:	bf00      	nop
 80098c4:	0800d339 	.word	0x0800d339
 80098c8:	0800d34a 	.word	0x0800d34a

080098cc <__hi0bits>:
 80098cc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80098d0:	4603      	mov	r3, r0
 80098d2:	bf36      	itet	cc
 80098d4:	0403      	lslcc	r3, r0, #16
 80098d6:	2000      	movcs	r0, #0
 80098d8:	2010      	movcc	r0, #16
 80098da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80098de:	bf3c      	itt	cc
 80098e0:	021b      	lslcc	r3, r3, #8
 80098e2:	3008      	addcc	r0, #8
 80098e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80098e8:	bf3c      	itt	cc
 80098ea:	011b      	lslcc	r3, r3, #4
 80098ec:	3004      	addcc	r0, #4
 80098ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098f2:	bf3c      	itt	cc
 80098f4:	009b      	lslcc	r3, r3, #2
 80098f6:	3002      	addcc	r0, #2
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	db05      	blt.n	8009908 <__hi0bits+0x3c>
 80098fc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009900:	f100 0001 	add.w	r0, r0, #1
 8009904:	bf08      	it	eq
 8009906:	2020      	moveq	r0, #32
 8009908:	4770      	bx	lr

0800990a <__lo0bits>:
 800990a:	6803      	ldr	r3, [r0, #0]
 800990c:	4602      	mov	r2, r0
 800990e:	f013 0007 	ands.w	r0, r3, #7
 8009912:	d00b      	beq.n	800992c <__lo0bits+0x22>
 8009914:	07d9      	lsls	r1, r3, #31
 8009916:	d421      	bmi.n	800995c <__lo0bits+0x52>
 8009918:	0798      	lsls	r0, r3, #30
 800991a:	bf49      	itett	mi
 800991c:	085b      	lsrmi	r3, r3, #1
 800991e:	089b      	lsrpl	r3, r3, #2
 8009920:	2001      	movmi	r0, #1
 8009922:	6013      	strmi	r3, [r2, #0]
 8009924:	bf5c      	itt	pl
 8009926:	6013      	strpl	r3, [r2, #0]
 8009928:	2002      	movpl	r0, #2
 800992a:	4770      	bx	lr
 800992c:	b299      	uxth	r1, r3
 800992e:	b909      	cbnz	r1, 8009934 <__lo0bits+0x2a>
 8009930:	0c1b      	lsrs	r3, r3, #16
 8009932:	2010      	movs	r0, #16
 8009934:	b2d9      	uxtb	r1, r3
 8009936:	b909      	cbnz	r1, 800993c <__lo0bits+0x32>
 8009938:	3008      	adds	r0, #8
 800993a:	0a1b      	lsrs	r3, r3, #8
 800993c:	0719      	lsls	r1, r3, #28
 800993e:	bf04      	itt	eq
 8009940:	091b      	lsreq	r3, r3, #4
 8009942:	3004      	addeq	r0, #4
 8009944:	0799      	lsls	r1, r3, #30
 8009946:	bf04      	itt	eq
 8009948:	089b      	lsreq	r3, r3, #2
 800994a:	3002      	addeq	r0, #2
 800994c:	07d9      	lsls	r1, r3, #31
 800994e:	d403      	bmi.n	8009958 <__lo0bits+0x4e>
 8009950:	085b      	lsrs	r3, r3, #1
 8009952:	f100 0001 	add.w	r0, r0, #1
 8009956:	d003      	beq.n	8009960 <__lo0bits+0x56>
 8009958:	6013      	str	r3, [r2, #0]
 800995a:	4770      	bx	lr
 800995c:	2000      	movs	r0, #0
 800995e:	4770      	bx	lr
 8009960:	2020      	movs	r0, #32
 8009962:	4770      	bx	lr

08009964 <__i2b>:
 8009964:	b510      	push	{r4, lr}
 8009966:	460c      	mov	r4, r1
 8009968:	2101      	movs	r1, #1
 800996a:	f7ff febd 	bl	80096e8 <_Balloc>
 800996e:	4602      	mov	r2, r0
 8009970:	b928      	cbnz	r0, 800997e <__i2b+0x1a>
 8009972:	4b05      	ldr	r3, [pc, #20]	@ (8009988 <__i2b+0x24>)
 8009974:	4805      	ldr	r0, [pc, #20]	@ (800998c <__i2b+0x28>)
 8009976:	f240 1145 	movw	r1, #325	@ 0x145
 800997a:	f001 fc41 	bl	800b200 <__assert_func>
 800997e:	2301      	movs	r3, #1
 8009980:	6144      	str	r4, [r0, #20]
 8009982:	6103      	str	r3, [r0, #16]
 8009984:	bd10      	pop	{r4, pc}
 8009986:	bf00      	nop
 8009988:	0800d339 	.word	0x0800d339
 800998c:	0800d34a 	.word	0x0800d34a

08009990 <__multiply>:
 8009990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009994:	4614      	mov	r4, r2
 8009996:	690a      	ldr	r2, [r1, #16]
 8009998:	6923      	ldr	r3, [r4, #16]
 800999a:	429a      	cmp	r2, r3
 800999c:	bfa8      	it	ge
 800999e:	4623      	movge	r3, r4
 80099a0:	460f      	mov	r7, r1
 80099a2:	bfa4      	itt	ge
 80099a4:	460c      	movge	r4, r1
 80099a6:	461f      	movge	r7, r3
 80099a8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80099ac:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80099b0:	68a3      	ldr	r3, [r4, #8]
 80099b2:	6861      	ldr	r1, [r4, #4]
 80099b4:	eb0a 0609 	add.w	r6, sl, r9
 80099b8:	42b3      	cmp	r3, r6
 80099ba:	b085      	sub	sp, #20
 80099bc:	bfb8      	it	lt
 80099be:	3101      	addlt	r1, #1
 80099c0:	f7ff fe92 	bl	80096e8 <_Balloc>
 80099c4:	b930      	cbnz	r0, 80099d4 <__multiply+0x44>
 80099c6:	4602      	mov	r2, r0
 80099c8:	4b44      	ldr	r3, [pc, #272]	@ (8009adc <__multiply+0x14c>)
 80099ca:	4845      	ldr	r0, [pc, #276]	@ (8009ae0 <__multiply+0x150>)
 80099cc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80099d0:	f001 fc16 	bl	800b200 <__assert_func>
 80099d4:	f100 0514 	add.w	r5, r0, #20
 80099d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80099dc:	462b      	mov	r3, r5
 80099de:	2200      	movs	r2, #0
 80099e0:	4543      	cmp	r3, r8
 80099e2:	d321      	bcc.n	8009a28 <__multiply+0x98>
 80099e4:	f107 0114 	add.w	r1, r7, #20
 80099e8:	f104 0214 	add.w	r2, r4, #20
 80099ec:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80099f0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80099f4:	9302      	str	r3, [sp, #8]
 80099f6:	1b13      	subs	r3, r2, r4
 80099f8:	3b15      	subs	r3, #21
 80099fa:	f023 0303 	bic.w	r3, r3, #3
 80099fe:	3304      	adds	r3, #4
 8009a00:	f104 0715 	add.w	r7, r4, #21
 8009a04:	42ba      	cmp	r2, r7
 8009a06:	bf38      	it	cc
 8009a08:	2304      	movcc	r3, #4
 8009a0a:	9301      	str	r3, [sp, #4]
 8009a0c:	9b02      	ldr	r3, [sp, #8]
 8009a0e:	9103      	str	r1, [sp, #12]
 8009a10:	428b      	cmp	r3, r1
 8009a12:	d80c      	bhi.n	8009a2e <__multiply+0x9e>
 8009a14:	2e00      	cmp	r6, #0
 8009a16:	dd03      	ble.n	8009a20 <__multiply+0x90>
 8009a18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d05b      	beq.n	8009ad8 <__multiply+0x148>
 8009a20:	6106      	str	r6, [r0, #16]
 8009a22:	b005      	add	sp, #20
 8009a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a28:	f843 2b04 	str.w	r2, [r3], #4
 8009a2c:	e7d8      	b.n	80099e0 <__multiply+0x50>
 8009a2e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009a32:	f1ba 0f00 	cmp.w	sl, #0
 8009a36:	d024      	beq.n	8009a82 <__multiply+0xf2>
 8009a38:	f104 0e14 	add.w	lr, r4, #20
 8009a3c:	46a9      	mov	r9, r5
 8009a3e:	f04f 0c00 	mov.w	ip, #0
 8009a42:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009a46:	f8d9 3000 	ldr.w	r3, [r9]
 8009a4a:	fa1f fb87 	uxth.w	fp, r7
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	fb0a 330b 	mla	r3, sl, fp, r3
 8009a54:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009a58:	f8d9 7000 	ldr.w	r7, [r9]
 8009a5c:	4463      	add	r3, ip
 8009a5e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009a62:	fb0a c70b 	mla	r7, sl, fp, ip
 8009a66:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009a70:	4572      	cmp	r2, lr
 8009a72:	f849 3b04 	str.w	r3, [r9], #4
 8009a76:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009a7a:	d8e2      	bhi.n	8009a42 <__multiply+0xb2>
 8009a7c:	9b01      	ldr	r3, [sp, #4]
 8009a7e:	f845 c003 	str.w	ip, [r5, r3]
 8009a82:	9b03      	ldr	r3, [sp, #12]
 8009a84:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009a88:	3104      	adds	r1, #4
 8009a8a:	f1b9 0f00 	cmp.w	r9, #0
 8009a8e:	d021      	beq.n	8009ad4 <__multiply+0x144>
 8009a90:	682b      	ldr	r3, [r5, #0]
 8009a92:	f104 0c14 	add.w	ip, r4, #20
 8009a96:	46ae      	mov	lr, r5
 8009a98:	f04f 0a00 	mov.w	sl, #0
 8009a9c:	f8bc b000 	ldrh.w	fp, [ip]
 8009aa0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009aa4:	fb09 770b 	mla	r7, r9, fp, r7
 8009aa8:	4457      	add	r7, sl
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009ab0:	f84e 3b04 	str.w	r3, [lr], #4
 8009ab4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009ab8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009abc:	f8be 3000 	ldrh.w	r3, [lr]
 8009ac0:	fb09 330a 	mla	r3, r9, sl, r3
 8009ac4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009ac8:	4562      	cmp	r2, ip
 8009aca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ace:	d8e5      	bhi.n	8009a9c <__multiply+0x10c>
 8009ad0:	9f01      	ldr	r7, [sp, #4]
 8009ad2:	51eb      	str	r3, [r5, r7]
 8009ad4:	3504      	adds	r5, #4
 8009ad6:	e799      	b.n	8009a0c <__multiply+0x7c>
 8009ad8:	3e01      	subs	r6, #1
 8009ada:	e79b      	b.n	8009a14 <__multiply+0x84>
 8009adc:	0800d339 	.word	0x0800d339
 8009ae0:	0800d34a 	.word	0x0800d34a

08009ae4 <__pow5mult>:
 8009ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ae8:	4615      	mov	r5, r2
 8009aea:	f012 0203 	ands.w	r2, r2, #3
 8009aee:	4607      	mov	r7, r0
 8009af0:	460e      	mov	r6, r1
 8009af2:	d007      	beq.n	8009b04 <__pow5mult+0x20>
 8009af4:	4c25      	ldr	r4, [pc, #148]	@ (8009b8c <__pow5mult+0xa8>)
 8009af6:	3a01      	subs	r2, #1
 8009af8:	2300      	movs	r3, #0
 8009afa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009afe:	f7ff fe55 	bl	80097ac <__multadd>
 8009b02:	4606      	mov	r6, r0
 8009b04:	10ad      	asrs	r5, r5, #2
 8009b06:	d03d      	beq.n	8009b84 <__pow5mult+0xa0>
 8009b08:	69fc      	ldr	r4, [r7, #28]
 8009b0a:	b97c      	cbnz	r4, 8009b2c <__pow5mult+0x48>
 8009b0c:	2010      	movs	r0, #16
 8009b0e:	f7ff fd35 	bl	800957c <malloc>
 8009b12:	4602      	mov	r2, r0
 8009b14:	61f8      	str	r0, [r7, #28]
 8009b16:	b928      	cbnz	r0, 8009b24 <__pow5mult+0x40>
 8009b18:	4b1d      	ldr	r3, [pc, #116]	@ (8009b90 <__pow5mult+0xac>)
 8009b1a:	481e      	ldr	r0, [pc, #120]	@ (8009b94 <__pow5mult+0xb0>)
 8009b1c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009b20:	f001 fb6e 	bl	800b200 <__assert_func>
 8009b24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009b28:	6004      	str	r4, [r0, #0]
 8009b2a:	60c4      	str	r4, [r0, #12]
 8009b2c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009b30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009b34:	b94c      	cbnz	r4, 8009b4a <__pow5mult+0x66>
 8009b36:	f240 2171 	movw	r1, #625	@ 0x271
 8009b3a:	4638      	mov	r0, r7
 8009b3c:	f7ff ff12 	bl	8009964 <__i2b>
 8009b40:	2300      	movs	r3, #0
 8009b42:	f8c8 0008 	str.w	r0, [r8, #8]
 8009b46:	4604      	mov	r4, r0
 8009b48:	6003      	str	r3, [r0, #0]
 8009b4a:	f04f 0900 	mov.w	r9, #0
 8009b4e:	07eb      	lsls	r3, r5, #31
 8009b50:	d50a      	bpl.n	8009b68 <__pow5mult+0x84>
 8009b52:	4631      	mov	r1, r6
 8009b54:	4622      	mov	r2, r4
 8009b56:	4638      	mov	r0, r7
 8009b58:	f7ff ff1a 	bl	8009990 <__multiply>
 8009b5c:	4631      	mov	r1, r6
 8009b5e:	4680      	mov	r8, r0
 8009b60:	4638      	mov	r0, r7
 8009b62:	f7ff fe01 	bl	8009768 <_Bfree>
 8009b66:	4646      	mov	r6, r8
 8009b68:	106d      	asrs	r5, r5, #1
 8009b6a:	d00b      	beq.n	8009b84 <__pow5mult+0xa0>
 8009b6c:	6820      	ldr	r0, [r4, #0]
 8009b6e:	b938      	cbnz	r0, 8009b80 <__pow5mult+0x9c>
 8009b70:	4622      	mov	r2, r4
 8009b72:	4621      	mov	r1, r4
 8009b74:	4638      	mov	r0, r7
 8009b76:	f7ff ff0b 	bl	8009990 <__multiply>
 8009b7a:	6020      	str	r0, [r4, #0]
 8009b7c:	f8c0 9000 	str.w	r9, [r0]
 8009b80:	4604      	mov	r4, r0
 8009b82:	e7e4      	b.n	8009b4e <__pow5mult+0x6a>
 8009b84:	4630      	mov	r0, r6
 8009b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b8a:	bf00      	nop
 8009b8c:	0800d3a4 	.word	0x0800d3a4
 8009b90:	0800d2ca 	.word	0x0800d2ca
 8009b94:	0800d34a 	.word	0x0800d34a

08009b98 <__lshift>:
 8009b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b9c:	460c      	mov	r4, r1
 8009b9e:	6849      	ldr	r1, [r1, #4]
 8009ba0:	6923      	ldr	r3, [r4, #16]
 8009ba2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009ba6:	68a3      	ldr	r3, [r4, #8]
 8009ba8:	4607      	mov	r7, r0
 8009baa:	4691      	mov	r9, r2
 8009bac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009bb0:	f108 0601 	add.w	r6, r8, #1
 8009bb4:	42b3      	cmp	r3, r6
 8009bb6:	db0b      	blt.n	8009bd0 <__lshift+0x38>
 8009bb8:	4638      	mov	r0, r7
 8009bba:	f7ff fd95 	bl	80096e8 <_Balloc>
 8009bbe:	4605      	mov	r5, r0
 8009bc0:	b948      	cbnz	r0, 8009bd6 <__lshift+0x3e>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	4b28      	ldr	r3, [pc, #160]	@ (8009c68 <__lshift+0xd0>)
 8009bc6:	4829      	ldr	r0, [pc, #164]	@ (8009c6c <__lshift+0xd4>)
 8009bc8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009bcc:	f001 fb18 	bl	800b200 <__assert_func>
 8009bd0:	3101      	adds	r1, #1
 8009bd2:	005b      	lsls	r3, r3, #1
 8009bd4:	e7ee      	b.n	8009bb4 <__lshift+0x1c>
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	f100 0114 	add.w	r1, r0, #20
 8009bdc:	f100 0210 	add.w	r2, r0, #16
 8009be0:	4618      	mov	r0, r3
 8009be2:	4553      	cmp	r3, sl
 8009be4:	db33      	blt.n	8009c4e <__lshift+0xb6>
 8009be6:	6920      	ldr	r0, [r4, #16]
 8009be8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009bec:	f104 0314 	add.w	r3, r4, #20
 8009bf0:	f019 091f 	ands.w	r9, r9, #31
 8009bf4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009bf8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009bfc:	d02b      	beq.n	8009c56 <__lshift+0xbe>
 8009bfe:	f1c9 0e20 	rsb	lr, r9, #32
 8009c02:	468a      	mov	sl, r1
 8009c04:	2200      	movs	r2, #0
 8009c06:	6818      	ldr	r0, [r3, #0]
 8009c08:	fa00 f009 	lsl.w	r0, r0, r9
 8009c0c:	4310      	orrs	r0, r2
 8009c0e:	f84a 0b04 	str.w	r0, [sl], #4
 8009c12:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c16:	459c      	cmp	ip, r3
 8009c18:	fa22 f20e 	lsr.w	r2, r2, lr
 8009c1c:	d8f3      	bhi.n	8009c06 <__lshift+0x6e>
 8009c1e:	ebac 0304 	sub.w	r3, ip, r4
 8009c22:	3b15      	subs	r3, #21
 8009c24:	f023 0303 	bic.w	r3, r3, #3
 8009c28:	3304      	adds	r3, #4
 8009c2a:	f104 0015 	add.w	r0, r4, #21
 8009c2e:	4584      	cmp	ip, r0
 8009c30:	bf38      	it	cc
 8009c32:	2304      	movcc	r3, #4
 8009c34:	50ca      	str	r2, [r1, r3]
 8009c36:	b10a      	cbz	r2, 8009c3c <__lshift+0xa4>
 8009c38:	f108 0602 	add.w	r6, r8, #2
 8009c3c:	3e01      	subs	r6, #1
 8009c3e:	4638      	mov	r0, r7
 8009c40:	612e      	str	r6, [r5, #16]
 8009c42:	4621      	mov	r1, r4
 8009c44:	f7ff fd90 	bl	8009768 <_Bfree>
 8009c48:	4628      	mov	r0, r5
 8009c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c4e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009c52:	3301      	adds	r3, #1
 8009c54:	e7c5      	b.n	8009be2 <__lshift+0x4a>
 8009c56:	3904      	subs	r1, #4
 8009c58:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c5c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009c60:	459c      	cmp	ip, r3
 8009c62:	d8f9      	bhi.n	8009c58 <__lshift+0xc0>
 8009c64:	e7ea      	b.n	8009c3c <__lshift+0xa4>
 8009c66:	bf00      	nop
 8009c68:	0800d339 	.word	0x0800d339
 8009c6c:	0800d34a 	.word	0x0800d34a

08009c70 <__mcmp>:
 8009c70:	690a      	ldr	r2, [r1, #16]
 8009c72:	4603      	mov	r3, r0
 8009c74:	6900      	ldr	r0, [r0, #16]
 8009c76:	1a80      	subs	r0, r0, r2
 8009c78:	b530      	push	{r4, r5, lr}
 8009c7a:	d10e      	bne.n	8009c9a <__mcmp+0x2a>
 8009c7c:	3314      	adds	r3, #20
 8009c7e:	3114      	adds	r1, #20
 8009c80:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009c84:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009c88:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009c8c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009c90:	4295      	cmp	r5, r2
 8009c92:	d003      	beq.n	8009c9c <__mcmp+0x2c>
 8009c94:	d205      	bcs.n	8009ca2 <__mcmp+0x32>
 8009c96:	f04f 30ff 	mov.w	r0, #4294967295
 8009c9a:	bd30      	pop	{r4, r5, pc}
 8009c9c:	42a3      	cmp	r3, r4
 8009c9e:	d3f3      	bcc.n	8009c88 <__mcmp+0x18>
 8009ca0:	e7fb      	b.n	8009c9a <__mcmp+0x2a>
 8009ca2:	2001      	movs	r0, #1
 8009ca4:	e7f9      	b.n	8009c9a <__mcmp+0x2a>
	...

08009ca8 <__mdiff>:
 8009ca8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cac:	4689      	mov	r9, r1
 8009cae:	4606      	mov	r6, r0
 8009cb0:	4611      	mov	r1, r2
 8009cb2:	4648      	mov	r0, r9
 8009cb4:	4614      	mov	r4, r2
 8009cb6:	f7ff ffdb 	bl	8009c70 <__mcmp>
 8009cba:	1e05      	subs	r5, r0, #0
 8009cbc:	d112      	bne.n	8009ce4 <__mdiff+0x3c>
 8009cbe:	4629      	mov	r1, r5
 8009cc0:	4630      	mov	r0, r6
 8009cc2:	f7ff fd11 	bl	80096e8 <_Balloc>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	b928      	cbnz	r0, 8009cd6 <__mdiff+0x2e>
 8009cca:	4b3f      	ldr	r3, [pc, #252]	@ (8009dc8 <__mdiff+0x120>)
 8009ccc:	f240 2137 	movw	r1, #567	@ 0x237
 8009cd0:	483e      	ldr	r0, [pc, #248]	@ (8009dcc <__mdiff+0x124>)
 8009cd2:	f001 fa95 	bl	800b200 <__assert_func>
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009cdc:	4610      	mov	r0, r2
 8009cde:	b003      	add	sp, #12
 8009ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ce4:	bfbc      	itt	lt
 8009ce6:	464b      	movlt	r3, r9
 8009ce8:	46a1      	movlt	r9, r4
 8009cea:	4630      	mov	r0, r6
 8009cec:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009cf0:	bfba      	itte	lt
 8009cf2:	461c      	movlt	r4, r3
 8009cf4:	2501      	movlt	r5, #1
 8009cf6:	2500      	movge	r5, #0
 8009cf8:	f7ff fcf6 	bl	80096e8 <_Balloc>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	b918      	cbnz	r0, 8009d08 <__mdiff+0x60>
 8009d00:	4b31      	ldr	r3, [pc, #196]	@ (8009dc8 <__mdiff+0x120>)
 8009d02:	f240 2145 	movw	r1, #581	@ 0x245
 8009d06:	e7e3      	b.n	8009cd0 <__mdiff+0x28>
 8009d08:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009d0c:	6926      	ldr	r6, [r4, #16]
 8009d0e:	60c5      	str	r5, [r0, #12]
 8009d10:	f109 0310 	add.w	r3, r9, #16
 8009d14:	f109 0514 	add.w	r5, r9, #20
 8009d18:	f104 0e14 	add.w	lr, r4, #20
 8009d1c:	f100 0b14 	add.w	fp, r0, #20
 8009d20:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009d24:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009d28:	9301      	str	r3, [sp, #4]
 8009d2a:	46d9      	mov	r9, fp
 8009d2c:	f04f 0c00 	mov.w	ip, #0
 8009d30:	9b01      	ldr	r3, [sp, #4]
 8009d32:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009d36:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009d3a:	9301      	str	r3, [sp, #4]
 8009d3c:	fa1f f38a 	uxth.w	r3, sl
 8009d40:	4619      	mov	r1, r3
 8009d42:	b283      	uxth	r3, r0
 8009d44:	1acb      	subs	r3, r1, r3
 8009d46:	0c00      	lsrs	r0, r0, #16
 8009d48:	4463      	add	r3, ip
 8009d4a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009d4e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009d52:	b29b      	uxth	r3, r3
 8009d54:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009d58:	4576      	cmp	r6, lr
 8009d5a:	f849 3b04 	str.w	r3, [r9], #4
 8009d5e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009d62:	d8e5      	bhi.n	8009d30 <__mdiff+0x88>
 8009d64:	1b33      	subs	r3, r6, r4
 8009d66:	3b15      	subs	r3, #21
 8009d68:	f023 0303 	bic.w	r3, r3, #3
 8009d6c:	3415      	adds	r4, #21
 8009d6e:	3304      	adds	r3, #4
 8009d70:	42a6      	cmp	r6, r4
 8009d72:	bf38      	it	cc
 8009d74:	2304      	movcc	r3, #4
 8009d76:	441d      	add	r5, r3
 8009d78:	445b      	add	r3, fp
 8009d7a:	461e      	mov	r6, r3
 8009d7c:	462c      	mov	r4, r5
 8009d7e:	4544      	cmp	r4, r8
 8009d80:	d30e      	bcc.n	8009da0 <__mdiff+0xf8>
 8009d82:	f108 0103 	add.w	r1, r8, #3
 8009d86:	1b49      	subs	r1, r1, r5
 8009d88:	f021 0103 	bic.w	r1, r1, #3
 8009d8c:	3d03      	subs	r5, #3
 8009d8e:	45a8      	cmp	r8, r5
 8009d90:	bf38      	it	cc
 8009d92:	2100      	movcc	r1, #0
 8009d94:	440b      	add	r3, r1
 8009d96:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009d9a:	b191      	cbz	r1, 8009dc2 <__mdiff+0x11a>
 8009d9c:	6117      	str	r7, [r2, #16]
 8009d9e:	e79d      	b.n	8009cdc <__mdiff+0x34>
 8009da0:	f854 1b04 	ldr.w	r1, [r4], #4
 8009da4:	46e6      	mov	lr, ip
 8009da6:	0c08      	lsrs	r0, r1, #16
 8009da8:	fa1c fc81 	uxtah	ip, ip, r1
 8009dac:	4471      	add	r1, lr
 8009dae:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009db2:	b289      	uxth	r1, r1
 8009db4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009db8:	f846 1b04 	str.w	r1, [r6], #4
 8009dbc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009dc0:	e7dd      	b.n	8009d7e <__mdiff+0xd6>
 8009dc2:	3f01      	subs	r7, #1
 8009dc4:	e7e7      	b.n	8009d96 <__mdiff+0xee>
 8009dc6:	bf00      	nop
 8009dc8:	0800d339 	.word	0x0800d339
 8009dcc:	0800d34a 	.word	0x0800d34a

08009dd0 <__ulp>:
 8009dd0:	b082      	sub	sp, #8
 8009dd2:	ed8d 0b00 	vstr	d0, [sp]
 8009dd6:	9a01      	ldr	r2, [sp, #4]
 8009dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8009e18 <__ulp+0x48>)
 8009dda:	4013      	ands	r3, r2
 8009ddc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	dc08      	bgt.n	8009df6 <__ulp+0x26>
 8009de4:	425b      	negs	r3, r3
 8009de6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009dea:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009dee:	da04      	bge.n	8009dfa <__ulp+0x2a>
 8009df0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009df4:	4113      	asrs	r3, r2
 8009df6:	2200      	movs	r2, #0
 8009df8:	e008      	b.n	8009e0c <__ulp+0x3c>
 8009dfa:	f1a2 0314 	sub.w	r3, r2, #20
 8009dfe:	2b1e      	cmp	r3, #30
 8009e00:	bfda      	itte	le
 8009e02:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009e06:	40da      	lsrle	r2, r3
 8009e08:	2201      	movgt	r2, #1
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	4610      	mov	r0, r2
 8009e10:	ec41 0b10 	vmov	d0, r0, r1
 8009e14:	b002      	add	sp, #8
 8009e16:	4770      	bx	lr
 8009e18:	7ff00000 	.word	0x7ff00000

08009e1c <__b2d>:
 8009e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e20:	6906      	ldr	r6, [r0, #16]
 8009e22:	f100 0814 	add.w	r8, r0, #20
 8009e26:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009e2a:	1f37      	subs	r7, r6, #4
 8009e2c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009e30:	4610      	mov	r0, r2
 8009e32:	f7ff fd4b 	bl	80098cc <__hi0bits>
 8009e36:	f1c0 0320 	rsb	r3, r0, #32
 8009e3a:	280a      	cmp	r0, #10
 8009e3c:	600b      	str	r3, [r1, #0]
 8009e3e:	491b      	ldr	r1, [pc, #108]	@ (8009eac <__b2d+0x90>)
 8009e40:	dc15      	bgt.n	8009e6e <__b2d+0x52>
 8009e42:	f1c0 0c0b 	rsb	ip, r0, #11
 8009e46:	fa22 f30c 	lsr.w	r3, r2, ip
 8009e4a:	45b8      	cmp	r8, r7
 8009e4c:	ea43 0501 	orr.w	r5, r3, r1
 8009e50:	bf34      	ite	cc
 8009e52:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009e56:	2300      	movcs	r3, #0
 8009e58:	3015      	adds	r0, #21
 8009e5a:	fa02 f000 	lsl.w	r0, r2, r0
 8009e5e:	fa23 f30c 	lsr.w	r3, r3, ip
 8009e62:	4303      	orrs	r3, r0
 8009e64:	461c      	mov	r4, r3
 8009e66:	ec45 4b10 	vmov	d0, r4, r5
 8009e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e6e:	45b8      	cmp	r8, r7
 8009e70:	bf3a      	itte	cc
 8009e72:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009e76:	f1a6 0708 	subcc.w	r7, r6, #8
 8009e7a:	2300      	movcs	r3, #0
 8009e7c:	380b      	subs	r0, #11
 8009e7e:	d012      	beq.n	8009ea6 <__b2d+0x8a>
 8009e80:	f1c0 0120 	rsb	r1, r0, #32
 8009e84:	fa23 f401 	lsr.w	r4, r3, r1
 8009e88:	4082      	lsls	r2, r0
 8009e8a:	4322      	orrs	r2, r4
 8009e8c:	4547      	cmp	r7, r8
 8009e8e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8009e92:	bf8c      	ite	hi
 8009e94:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009e98:	2200      	movls	r2, #0
 8009e9a:	4083      	lsls	r3, r0
 8009e9c:	40ca      	lsrs	r2, r1
 8009e9e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	e7de      	b.n	8009e64 <__b2d+0x48>
 8009ea6:	ea42 0501 	orr.w	r5, r2, r1
 8009eaa:	e7db      	b.n	8009e64 <__b2d+0x48>
 8009eac:	3ff00000 	.word	0x3ff00000

08009eb0 <__d2b>:
 8009eb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009eb4:	460f      	mov	r7, r1
 8009eb6:	2101      	movs	r1, #1
 8009eb8:	ec59 8b10 	vmov	r8, r9, d0
 8009ebc:	4616      	mov	r6, r2
 8009ebe:	f7ff fc13 	bl	80096e8 <_Balloc>
 8009ec2:	4604      	mov	r4, r0
 8009ec4:	b930      	cbnz	r0, 8009ed4 <__d2b+0x24>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	4b23      	ldr	r3, [pc, #140]	@ (8009f58 <__d2b+0xa8>)
 8009eca:	4824      	ldr	r0, [pc, #144]	@ (8009f5c <__d2b+0xac>)
 8009ecc:	f240 310f 	movw	r1, #783	@ 0x30f
 8009ed0:	f001 f996 	bl	800b200 <__assert_func>
 8009ed4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009ed8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009edc:	b10d      	cbz	r5, 8009ee2 <__d2b+0x32>
 8009ede:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ee2:	9301      	str	r3, [sp, #4]
 8009ee4:	f1b8 0300 	subs.w	r3, r8, #0
 8009ee8:	d023      	beq.n	8009f32 <__d2b+0x82>
 8009eea:	4668      	mov	r0, sp
 8009eec:	9300      	str	r3, [sp, #0]
 8009eee:	f7ff fd0c 	bl	800990a <__lo0bits>
 8009ef2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009ef6:	b1d0      	cbz	r0, 8009f2e <__d2b+0x7e>
 8009ef8:	f1c0 0320 	rsb	r3, r0, #32
 8009efc:	fa02 f303 	lsl.w	r3, r2, r3
 8009f00:	430b      	orrs	r3, r1
 8009f02:	40c2      	lsrs	r2, r0
 8009f04:	6163      	str	r3, [r4, #20]
 8009f06:	9201      	str	r2, [sp, #4]
 8009f08:	9b01      	ldr	r3, [sp, #4]
 8009f0a:	61a3      	str	r3, [r4, #24]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	bf0c      	ite	eq
 8009f10:	2201      	moveq	r2, #1
 8009f12:	2202      	movne	r2, #2
 8009f14:	6122      	str	r2, [r4, #16]
 8009f16:	b1a5      	cbz	r5, 8009f42 <__d2b+0x92>
 8009f18:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009f1c:	4405      	add	r5, r0
 8009f1e:	603d      	str	r5, [r7, #0]
 8009f20:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009f24:	6030      	str	r0, [r6, #0]
 8009f26:	4620      	mov	r0, r4
 8009f28:	b003      	add	sp, #12
 8009f2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f2e:	6161      	str	r1, [r4, #20]
 8009f30:	e7ea      	b.n	8009f08 <__d2b+0x58>
 8009f32:	a801      	add	r0, sp, #4
 8009f34:	f7ff fce9 	bl	800990a <__lo0bits>
 8009f38:	9b01      	ldr	r3, [sp, #4]
 8009f3a:	6163      	str	r3, [r4, #20]
 8009f3c:	3020      	adds	r0, #32
 8009f3e:	2201      	movs	r2, #1
 8009f40:	e7e8      	b.n	8009f14 <__d2b+0x64>
 8009f42:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f46:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009f4a:	6038      	str	r0, [r7, #0]
 8009f4c:	6918      	ldr	r0, [r3, #16]
 8009f4e:	f7ff fcbd 	bl	80098cc <__hi0bits>
 8009f52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009f56:	e7e5      	b.n	8009f24 <__d2b+0x74>
 8009f58:	0800d339 	.word	0x0800d339
 8009f5c:	0800d34a 	.word	0x0800d34a

08009f60 <__ratio>:
 8009f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f64:	b085      	sub	sp, #20
 8009f66:	e9cd 1000 	strd	r1, r0, [sp]
 8009f6a:	a902      	add	r1, sp, #8
 8009f6c:	f7ff ff56 	bl	8009e1c <__b2d>
 8009f70:	9800      	ldr	r0, [sp, #0]
 8009f72:	a903      	add	r1, sp, #12
 8009f74:	ec55 4b10 	vmov	r4, r5, d0
 8009f78:	f7ff ff50 	bl	8009e1c <__b2d>
 8009f7c:	9b01      	ldr	r3, [sp, #4]
 8009f7e:	6919      	ldr	r1, [r3, #16]
 8009f80:	9b00      	ldr	r3, [sp, #0]
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	1ac9      	subs	r1, r1, r3
 8009f86:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009f8a:	1a9b      	subs	r3, r3, r2
 8009f8c:	ec5b ab10 	vmov	sl, fp, d0
 8009f90:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	bfce      	itee	gt
 8009f98:	462a      	movgt	r2, r5
 8009f9a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009f9e:	465a      	movle	r2, fp
 8009fa0:	462f      	mov	r7, r5
 8009fa2:	46d9      	mov	r9, fp
 8009fa4:	bfcc      	ite	gt
 8009fa6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009faa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009fae:	464b      	mov	r3, r9
 8009fb0:	4652      	mov	r2, sl
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	4639      	mov	r1, r7
 8009fb6:	f7f6 fc51 	bl	800085c <__aeabi_ddiv>
 8009fba:	ec41 0b10 	vmov	d0, r0, r1
 8009fbe:	b005      	add	sp, #20
 8009fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009fc4 <__copybits>:
 8009fc4:	3901      	subs	r1, #1
 8009fc6:	b570      	push	{r4, r5, r6, lr}
 8009fc8:	1149      	asrs	r1, r1, #5
 8009fca:	6914      	ldr	r4, [r2, #16]
 8009fcc:	3101      	adds	r1, #1
 8009fce:	f102 0314 	add.w	r3, r2, #20
 8009fd2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009fd6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009fda:	1f05      	subs	r5, r0, #4
 8009fdc:	42a3      	cmp	r3, r4
 8009fde:	d30c      	bcc.n	8009ffa <__copybits+0x36>
 8009fe0:	1aa3      	subs	r3, r4, r2
 8009fe2:	3b11      	subs	r3, #17
 8009fe4:	f023 0303 	bic.w	r3, r3, #3
 8009fe8:	3211      	adds	r2, #17
 8009fea:	42a2      	cmp	r2, r4
 8009fec:	bf88      	it	hi
 8009fee:	2300      	movhi	r3, #0
 8009ff0:	4418      	add	r0, r3
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	4288      	cmp	r0, r1
 8009ff6:	d305      	bcc.n	800a004 <__copybits+0x40>
 8009ff8:	bd70      	pop	{r4, r5, r6, pc}
 8009ffa:	f853 6b04 	ldr.w	r6, [r3], #4
 8009ffe:	f845 6f04 	str.w	r6, [r5, #4]!
 800a002:	e7eb      	b.n	8009fdc <__copybits+0x18>
 800a004:	f840 3b04 	str.w	r3, [r0], #4
 800a008:	e7f4      	b.n	8009ff4 <__copybits+0x30>

0800a00a <__any_on>:
 800a00a:	f100 0214 	add.w	r2, r0, #20
 800a00e:	6900      	ldr	r0, [r0, #16]
 800a010:	114b      	asrs	r3, r1, #5
 800a012:	4298      	cmp	r0, r3
 800a014:	b510      	push	{r4, lr}
 800a016:	db11      	blt.n	800a03c <__any_on+0x32>
 800a018:	dd0a      	ble.n	800a030 <__any_on+0x26>
 800a01a:	f011 011f 	ands.w	r1, r1, #31
 800a01e:	d007      	beq.n	800a030 <__any_on+0x26>
 800a020:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a024:	fa24 f001 	lsr.w	r0, r4, r1
 800a028:	fa00 f101 	lsl.w	r1, r0, r1
 800a02c:	428c      	cmp	r4, r1
 800a02e:	d10b      	bne.n	800a048 <__any_on+0x3e>
 800a030:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a034:	4293      	cmp	r3, r2
 800a036:	d803      	bhi.n	800a040 <__any_on+0x36>
 800a038:	2000      	movs	r0, #0
 800a03a:	bd10      	pop	{r4, pc}
 800a03c:	4603      	mov	r3, r0
 800a03e:	e7f7      	b.n	800a030 <__any_on+0x26>
 800a040:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a044:	2900      	cmp	r1, #0
 800a046:	d0f5      	beq.n	800a034 <__any_on+0x2a>
 800a048:	2001      	movs	r0, #1
 800a04a:	e7f6      	b.n	800a03a <__any_on+0x30>

0800a04c <sulp>:
 800a04c:	b570      	push	{r4, r5, r6, lr}
 800a04e:	4604      	mov	r4, r0
 800a050:	460d      	mov	r5, r1
 800a052:	ec45 4b10 	vmov	d0, r4, r5
 800a056:	4616      	mov	r6, r2
 800a058:	f7ff feba 	bl	8009dd0 <__ulp>
 800a05c:	ec51 0b10 	vmov	r0, r1, d0
 800a060:	b17e      	cbz	r6, 800a082 <sulp+0x36>
 800a062:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a066:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	dd09      	ble.n	800a082 <sulp+0x36>
 800a06e:	051b      	lsls	r3, r3, #20
 800a070:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a074:	2400      	movs	r4, #0
 800a076:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a07a:	4622      	mov	r2, r4
 800a07c:	462b      	mov	r3, r5
 800a07e:	f7f6 fac3 	bl	8000608 <__aeabi_dmul>
 800a082:	ec41 0b10 	vmov	d0, r0, r1
 800a086:	bd70      	pop	{r4, r5, r6, pc}

0800a088 <_strtod_l>:
 800a088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08c:	b09f      	sub	sp, #124	@ 0x7c
 800a08e:	460c      	mov	r4, r1
 800a090:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a092:	2200      	movs	r2, #0
 800a094:	921a      	str	r2, [sp, #104]	@ 0x68
 800a096:	9005      	str	r0, [sp, #20]
 800a098:	f04f 0a00 	mov.w	sl, #0
 800a09c:	f04f 0b00 	mov.w	fp, #0
 800a0a0:	460a      	mov	r2, r1
 800a0a2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a0a4:	7811      	ldrb	r1, [r2, #0]
 800a0a6:	292b      	cmp	r1, #43	@ 0x2b
 800a0a8:	d04a      	beq.n	800a140 <_strtod_l+0xb8>
 800a0aa:	d838      	bhi.n	800a11e <_strtod_l+0x96>
 800a0ac:	290d      	cmp	r1, #13
 800a0ae:	d832      	bhi.n	800a116 <_strtod_l+0x8e>
 800a0b0:	2908      	cmp	r1, #8
 800a0b2:	d832      	bhi.n	800a11a <_strtod_l+0x92>
 800a0b4:	2900      	cmp	r1, #0
 800a0b6:	d03b      	beq.n	800a130 <_strtod_l+0xa8>
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a0bc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a0be:	782a      	ldrb	r2, [r5, #0]
 800a0c0:	2a30      	cmp	r2, #48	@ 0x30
 800a0c2:	f040 80b3 	bne.w	800a22c <_strtod_l+0x1a4>
 800a0c6:	786a      	ldrb	r2, [r5, #1]
 800a0c8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a0cc:	2a58      	cmp	r2, #88	@ 0x58
 800a0ce:	d16e      	bne.n	800a1ae <_strtod_l+0x126>
 800a0d0:	9302      	str	r3, [sp, #8]
 800a0d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0d4:	9301      	str	r3, [sp, #4]
 800a0d6:	ab1a      	add	r3, sp, #104	@ 0x68
 800a0d8:	9300      	str	r3, [sp, #0]
 800a0da:	4a8e      	ldr	r2, [pc, #568]	@ (800a314 <_strtod_l+0x28c>)
 800a0dc:	9805      	ldr	r0, [sp, #20]
 800a0de:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a0e0:	a919      	add	r1, sp, #100	@ 0x64
 800a0e2:	f001 f927 	bl	800b334 <__gethex>
 800a0e6:	f010 060f 	ands.w	r6, r0, #15
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	d005      	beq.n	800a0fa <_strtod_l+0x72>
 800a0ee:	2e06      	cmp	r6, #6
 800a0f0:	d128      	bne.n	800a144 <_strtod_l+0xbc>
 800a0f2:	3501      	adds	r5, #1
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	9519      	str	r5, [sp, #100]	@ 0x64
 800a0f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f040 858e 	bne.w	800ac1e <_strtod_l+0xb96>
 800a102:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a104:	b1cb      	cbz	r3, 800a13a <_strtod_l+0xb2>
 800a106:	4652      	mov	r2, sl
 800a108:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a10c:	ec43 2b10 	vmov	d0, r2, r3
 800a110:	b01f      	add	sp, #124	@ 0x7c
 800a112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a116:	2920      	cmp	r1, #32
 800a118:	d1ce      	bne.n	800a0b8 <_strtod_l+0x30>
 800a11a:	3201      	adds	r2, #1
 800a11c:	e7c1      	b.n	800a0a2 <_strtod_l+0x1a>
 800a11e:	292d      	cmp	r1, #45	@ 0x2d
 800a120:	d1ca      	bne.n	800a0b8 <_strtod_l+0x30>
 800a122:	2101      	movs	r1, #1
 800a124:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a126:	1c51      	adds	r1, r2, #1
 800a128:	9119      	str	r1, [sp, #100]	@ 0x64
 800a12a:	7852      	ldrb	r2, [r2, #1]
 800a12c:	2a00      	cmp	r2, #0
 800a12e:	d1c5      	bne.n	800a0bc <_strtod_l+0x34>
 800a130:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a132:	9419      	str	r4, [sp, #100]	@ 0x64
 800a134:	2b00      	cmp	r3, #0
 800a136:	f040 8570 	bne.w	800ac1a <_strtod_l+0xb92>
 800a13a:	4652      	mov	r2, sl
 800a13c:	465b      	mov	r3, fp
 800a13e:	e7e5      	b.n	800a10c <_strtod_l+0x84>
 800a140:	2100      	movs	r1, #0
 800a142:	e7ef      	b.n	800a124 <_strtod_l+0x9c>
 800a144:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a146:	b13a      	cbz	r2, 800a158 <_strtod_l+0xd0>
 800a148:	2135      	movs	r1, #53	@ 0x35
 800a14a:	a81c      	add	r0, sp, #112	@ 0x70
 800a14c:	f7ff ff3a 	bl	8009fc4 <__copybits>
 800a150:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a152:	9805      	ldr	r0, [sp, #20]
 800a154:	f7ff fb08 	bl	8009768 <_Bfree>
 800a158:	3e01      	subs	r6, #1
 800a15a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a15c:	2e04      	cmp	r6, #4
 800a15e:	d806      	bhi.n	800a16e <_strtod_l+0xe6>
 800a160:	e8df f006 	tbb	[pc, r6]
 800a164:	201d0314 	.word	0x201d0314
 800a168:	14          	.byte	0x14
 800a169:	00          	.byte	0x00
 800a16a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a16e:	05e1      	lsls	r1, r4, #23
 800a170:	bf48      	it	mi
 800a172:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a176:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a17a:	0d1b      	lsrs	r3, r3, #20
 800a17c:	051b      	lsls	r3, r3, #20
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1bb      	bne.n	800a0fa <_strtod_l+0x72>
 800a182:	f7fe fb2f 	bl	80087e4 <__errno>
 800a186:	2322      	movs	r3, #34	@ 0x22
 800a188:	6003      	str	r3, [r0, #0]
 800a18a:	e7b6      	b.n	800a0fa <_strtod_l+0x72>
 800a18c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a190:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a194:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a198:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a19c:	e7e7      	b.n	800a16e <_strtod_l+0xe6>
 800a19e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a31c <_strtod_l+0x294>
 800a1a2:	e7e4      	b.n	800a16e <_strtod_l+0xe6>
 800a1a4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a1a8:	f04f 3aff 	mov.w	sl, #4294967295
 800a1ac:	e7df      	b.n	800a16e <_strtod_l+0xe6>
 800a1ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a1b0:	1c5a      	adds	r2, r3, #1
 800a1b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a1b4:	785b      	ldrb	r3, [r3, #1]
 800a1b6:	2b30      	cmp	r3, #48	@ 0x30
 800a1b8:	d0f9      	beq.n	800a1ae <_strtod_l+0x126>
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d09d      	beq.n	800a0fa <_strtod_l+0x72>
 800a1be:	2301      	movs	r3, #1
 800a1c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a1c4:	930c      	str	r3, [sp, #48]	@ 0x30
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	9308      	str	r3, [sp, #32]
 800a1ca:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1cc:	461f      	mov	r7, r3
 800a1ce:	220a      	movs	r2, #10
 800a1d0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a1d2:	7805      	ldrb	r5, [r0, #0]
 800a1d4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a1d8:	b2d9      	uxtb	r1, r3
 800a1da:	2909      	cmp	r1, #9
 800a1dc:	d928      	bls.n	800a230 <_strtod_l+0x1a8>
 800a1de:	494e      	ldr	r1, [pc, #312]	@ (800a318 <_strtod_l+0x290>)
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	f000 ffd5 	bl	800b190 <strncmp>
 800a1e6:	2800      	cmp	r0, #0
 800a1e8:	d032      	beq.n	800a250 <_strtod_l+0x1c8>
 800a1ea:	2000      	movs	r0, #0
 800a1ec:	462a      	mov	r2, r5
 800a1ee:	4681      	mov	r9, r0
 800a1f0:	463d      	mov	r5, r7
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	2a65      	cmp	r2, #101	@ 0x65
 800a1f6:	d001      	beq.n	800a1fc <_strtod_l+0x174>
 800a1f8:	2a45      	cmp	r2, #69	@ 0x45
 800a1fa:	d114      	bne.n	800a226 <_strtod_l+0x19e>
 800a1fc:	b91d      	cbnz	r5, 800a206 <_strtod_l+0x17e>
 800a1fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a200:	4302      	orrs	r2, r0
 800a202:	d095      	beq.n	800a130 <_strtod_l+0xa8>
 800a204:	2500      	movs	r5, #0
 800a206:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a208:	1c62      	adds	r2, r4, #1
 800a20a:	9219      	str	r2, [sp, #100]	@ 0x64
 800a20c:	7862      	ldrb	r2, [r4, #1]
 800a20e:	2a2b      	cmp	r2, #43	@ 0x2b
 800a210:	d077      	beq.n	800a302 <_strtod_l+0x27a>
 800a212:	2a2d      	cmp	r2, #45	@ 0x2d
 800a214:	d07b      	beq.n	800a30e <_strtod_l+0x286>
 800a216:	f04f 0c00 	mov.w	ip, #0
 800a21a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a21e:	2909      	cmp	r1, #9
 800a220:	f240 8082 	bls.w	800a328 <_strtod_l+0x2a0>
 800a224:	9419      	str	r4, [sp, #100]	@ 0x64
 800a226:	f04f 0800 	mov.w	r8, #0
 800a22a:	e0a2      	b.n	800a372 <_strtod_l+0x2ea>
 800a22c:	2300      	movs	r3, #0
 800a22e:	e7c7      	b.n	800a1c0 <_strtod_l+0x138>
 800a230:	2f08      	cmp	r7, #8
 800a232:	bfd5      	itete	le
 800a234:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a236:	9908      	ldrgt	r1, [sp, #32]
 800a238:	fb02 3301 	mlale	r3, r2, r1, r3
 800a23c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a240:	f100 0001 	add.w	r0, r0, #1
 800a244:	bfd4      	ite	le
 800a246:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a248:	9308      	strgt	r3, [sp, #32]
 800a24a:	3701      	adds	r7, #1
 800a24c:	9019      	str	r0, [sp, #100]	@ 0x64
 800a24e:	e7bf      	b.n	800a1d0 <_strtod_l+0x148>
 800a250:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a252:	1c5a      	adds	r2, r3, #1
 800a254:	9219      	str	r2, [sp, #100]	@ 0x64
 800a256:	785a      	ldrb	r2, [r3, #1]
 800a258:	b37f      	cbz	r7, 800a2ba <_strtod_l+0x232>
 800a25a:	4681      	mov	r9, r0
 800a25c:	463d      	mov	r5, r7
 800a25e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a262:	2b09      	cmp	r3, #9
 800a264:	d912      	bls.n	800a28c <_strtod_l+0x204>
 800a266:	2301      	movs	r3, #1
 800a268:	e7c4      	b.n	800a1f4 <_strtod_l+0x16c>
 800a26a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a26c:	1c5a      	adds	r2, r3, #1
 800a26e:	9219      	str	r2, [sp, #100]	@ 0x64
 800a270:	785a      	ldrb	r2, [r3, #1]
 800a272:	3001      	adds	r0, #1
 800a274:	2a30      	cmp	r2, #48	@ 0x30
 800a276:	d0f8      	beq.n	800a26a <_strtod_l+0x1e2>
 800a278:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a27c:	2b08      	cmp	r3, #8
 800a27e:	f200 84d3 	bhi.w	800ac28 <_strtod_l+0xba0>
 800a282:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a284:	930c      	str	r3, [sp, #48]	@ 0x30
 800a286:	4681      	mov	r9, r0
 800a288:	2000      	movs	r0, #0
 800a28a:	4605      	mov	r5, r0
 800a28c:	3a30      	subs	r2, #48	@ 0x30
 800a28e:	f100 0301 	add.w	r3, r0, #1
 800a292:	d02a      	beq.n	800a2ea <_strtod_l+0x262>
 800a294:	4499      	add	r9, r3
 800a296:	eb00 0c05 	add.w	ip, r0, r5
 800a29a:	462b      	mov	r3, r5
 800a29c:	210a      	movs	r1, #10
 800a29e:	4563      	cmp	r3, ip
 800a2a0:	d10d      	bne.n	800a2be <_strtod_l+0x236>
 800a2a2:	1c69      	adds	r1, r5, #1
 800a2a4:	4401      	add	r1, r0
 800a2a6:	4428      	add	r0, r5
 800a2a8:	2808      	cmp	r0, #8
 800a2aa:	dc16      	bgt.n	800a2da <_strtod_l+0x252>
 800a2ac:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a2ae:	230a      	movs	r3, #10
 800a2b0:	fb03 2300 	mla	r3, r3, r0, r2
 800a2b4:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	e018      	b.n	800a2ec <_strtod_l+0x264>
 800a2ba:	4638      	mov	r0, r7
 800a2bc:	e7da      	b.n	800a274 <_strtod_l+0x1ec>
 800a2be:	2b08      	cmp	r3, #8
 800a2c0:	f103 0301 	add.w	r3, r3, #1
 800a2c4:	dc03      	bgt.n	800a2ce <_strtod_l+0x246>
 800a2c6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a2c8:	434e      	muls	r6, r1
 800a2ca:	960a      	str	r6, [sp, #40]	@ 0x28
 800a2cc:	e7e7      	b.n	800a29e <_strtod_l+0x216>
 800a2ce:	2b10      	cmp	r3, #16
 800a2d0:	bfde      	ittt	le
 800a2d2:	9e08      	ldrle	r6, [sp, #32]
 800a2d4:	434e      	mulle	r6, r1
 800a2d6:	9608      	strle	r6, [sp, #32]
 800a2d8:	e7e1      	b.n	800a29e <_strtod_l+0x216>
 800a2da:	280f      	cmp	r0, #15
 800a2dc:	dceb      	bgt.n	800a2b6 <_strtod_l+0x22e>
 800a2de:	9808      	ldr	r0, [sp, #32]
 800a2e0:	230a      	movs	r3, #10
 800a2e2:	fb03 2300 	mla	r3, r3, r0, r2
 800a2e6:	9308      	str	r3, [sp, #32]
 800a2e8:	e7e5      	b.n	800a2b6 <_strtod_l+0x22e>
 800a2ea:	4629      	mov	r1, r5
 800a2ec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a2ee:	1c50      	adds	r0, r2, #1
 800a2f0:	9019      	str	r0, [sp, #100]	@ 0x64
 800a2f2:	7852      	ldrb	r2, [r2, #1]
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	460d      	mov	r5, r1
 800a2f8:	e7b1      	b.n	800a25e <_strtod_l+0x1d6>
 800a2fa:	f04f 0900 	mov.w	r9, #0
 800a2fe:	2301      	movs	r3, #1
 800a300:	e77d      	b.n	800a1fe <_strtod_l+0x176>
 800a302:	f04f 0c00 	mov.w	ip, #0
 800a306:	1ca2      	adds	r2, r4, #2
 800a308:	9219      	str	r2, [sp, #100]	@ 0x64
 800a30a:	78a2      	ldrb	r2, [r4, #2]
 800a30c:	e785      	b.n	800a21a <_strtod_l+0x192>
 800a30e:	f04f 0c01 	mov.w	ip, #1
 800a312:	e7f8      	b.n	800a306 <_strtod_l+0x27e>
 800a314:	0800d4b8 	.word	0x0800d4b8
 800a318:	0800d4a0 	.word	0x0800d4a0
 800a31c:	7ff00000 	.word	0x7ff00000
 800a320:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a322:	1c51      	adds	r1, r2, #1
 800a324:	9119      	str	r1, [sp, #100]	@ 0x64
 800a326:	7852      	ldrb	r2, [r2, #1]
 800a328:	2a30      	cmp	r2, #48	@ 0x30
 800a32a:	d0f9      	beq.n	800a320 <_strtod_l+0x298>
 800a32c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a330:	2908      	cmp	r1, #8
 800a332:	f63f af78 	bhi.w	800a226 <_strtod_l+0x19e>
 800a336:	3a30      	subs	r2, #48	@ 0x30
 800a338:	920e      	str	r2, [sp, #56]	@ 0x38
 800a33a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a33c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a33e:	f04f 080a 	mov.w	r8, #10
 800a342:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a344:	1c56      	adds	r6, r2, #1
 800a346:	9619      	str	r6, [sp, #100]	@ 0x64
 800a348:	7852      	ldrb	r2, [r2, #1]
 800a34a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a34e:	f1be 0f09 	cmp.w	lr, #9
 800a352:	d939      	bls.n	800a3c8 <_strtod_l+0x340>
 800a354:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a356:	1a76      	subs	r6, r6, r1
 800a358:	2e08      	cmp	r6, #8
 800a35a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a35e:	dc03      	bgt.n	800a368 <_strtod_l+0x2e0>
 800a360:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a362:	4588      	cmp	r8, r1
 800a364:	bfa8      	it	ge
 800a366:	4688      	movge	r8, r1
 800a368:	f1bc 0f00 	cmp.w	ip, #0
 800a36c:	d001      	beq.n	800a372 <_strtod_l+0x2ea>
 800a36e:	f1c8 0800 	rsb	r8, r8, #0
 800a372:	2d00      	cmp	r5, #0
 800a374:	d14e      	bne.n	800a414 <_strtod_l+0x38c>
 800a376:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a378:	4308      	orrs	r0, r1
 800a37a:	f47f aebe 	bne.w	800a0fa <_strtod_l+0x72>
 800a37e:	2b00      	cmp	r3, #0
 800a380:	f47f aed6 	bne.w	800a130 <_strtod_l+0xa8>
 800a384:	2a69      	cmp	r2, #105	@ 0x69
 800a386:	d028      	beq.n	800a3da <_strtod_l+0x352>
 800a388:	dc25      	bgt.n	800a3d6 <_strtod_l+0x34e>
 800a38a:	2a49      	cmp	r2, #73	@ 0x49
 800a38c:	d025      	beq.n	800a3da <_strtod_l+0x352>
 800a38e:	2a4e      	cmp	r2, #78	@ 0x4e
 800a390:	f47f aece 	bne.w	800a130 <_strtod_l+0xa8>
 800a394:	499b      	ldr	r1, [pc, #620]	@ (800a604 <_strtod_l+0x57c>)
 800a396:	a819      	add	r0, sp, #100	@ 0x64
 800a398:	f001 f9ee 	bl	800b778 <__match>
 800a39c:	2800      	cmp	r0, #0
 800a39e:	f43f aec7 	beq.w	800a130 <_strtod_l+0xa8>
 800a3a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	2b28      	cmp	r3, #40	@ 0x28
 800a3a8:	d12e      	bne.n	800a408 <_strtod_l+0x380>
 800a3aa:	4997      	ldr	r1, [pc, #604]	@ (800a608 <_strtod_l+0x580>)
 800a3ac:	aa1c      	add	r2, sp, #112	@ 0x70
 800a3ae:	a819      	add	r0, sp, #100	@ 0x64
 800a3b0:	f001 f9f6 	bl	800b7a0 <__hexnan>
 800a3b4:	2805      	cmp	r0, #5
 800a3b6:	d127      	bne.n	800a408 <_strtod_l+0x380>
 800a3b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a3ba:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a3be:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a3c2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a3c6:	e698      	b.n	800a0fa <_strtod_l+0x72>
 800a3c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a3ca:	fb08 2101 	mla	r1, r8, r1, r2
 800a3ce:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a3d2:	920e      	str	r2, [sp, #56]	@ 0x38
 800a3d4:	e7b5      	b.n	800a342 <_strtod_l+0x2ba>
 800a3d6:	2a6e      	cmp	r2, #110	@ 0x6e
 800a3d8:	e7da      	b.n	800a390 <_strtod_l+0x308>
 800a3da:	498c      	ldr	r1, [pc, #560]	@ (800a60c <_strtod_l+0x584>)
 800a3dc:	a819      	add	r0, sp, #100	@ 0x64
 800a3de:	f001 f9cb 	bl	800b778 <__match>
 800a3e2:	2800      	cmp	r0, #0
 800a3e4:	f43f aea4 	beq.w	800a130 <_strtod_l+0xa8>
 800a3e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a3ea:	4989      	ldr	r1, [pc, #548]	@ (800a610 <_strtod_l+0x588>)
 800a3ec:	3b01      	subs	r3, #1
 800a3ee:	a819      	add	r0, sp, #100	@ 0x64
 800a3f0:	9319      	str	r3, [sp, #100]	@ 0x64
 800a3f2:	f001 f9c1 	bl	800b778 <__match>
 800a3f6:	b910      	cbnz	r0, 800a3fe <_strtod_l+0x376>
 800a3f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a3fa:	3301      	adds	r3, #1
 800a3fc:	9319      	str	r3, [sp, #100]	@ 0x64
 800a3fe:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a620 <_strtod_l+0x598>
 800a402:	f04f 0a00 	mov.w	sl, #0
 800a406:	e678      	b.n	800a0fa <_strtod_l+0x72>
 800a408:	4882      	ldr	r0, [pc, #520]	@ (800a614 <_strtod_l+0x58c>)
 800a40a:	f000 fef1 	bl	800b1f0 <nan>
 800a40e:	ec5b ab10 	vmov	sl, fp, d0
 800a412:	e672      	b.n	800a0fa <_strtod_l+0x72>
 800a414:	eba8 0309 	sub.w	r3, r8, r9
 800a418:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a41a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a41c:	2f00      	cmp	r7, #0
 800a41e:	bf08      	it	eq
 800a420:	462f      	moveq	r7, r5
 800a422:	2d10      	cmp	r5, #16
 800a424:	462c      	mov	r4, r5
 800a426:	bfa8      	it	ge
 800a428:	2410      	movge	r4, #16
 800a42a:	f7f6 f873 	bl	8000514 <__aeabi_ui2d>
 800a42e:	2d09      	cmp	r5, #9
 800a430:	4682      	mov	sl, r0
 800a432:	468b      	mov	fp, r1
 800a434:	dc13      	bgt.n	800a45e <_strtod_l+0x3d6>
 800a436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a438:	2b00      	cmp	r3, #0
 800a43a:	f43f ae5e 	beq.w	800a0fa <_strtod_l+0x72>
 800a43e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a440:	dd78      	ble.n	800a534 <_strtod_l+0x4ac>
 800a442:	2b16      	cmp	r3, #22
 800a444:	dc5f      	bgt.n	800a506 <_strtod_l+0x47e>
 800a446:	4974      	ldr	r1, [pc, #464]	@ (800a618 <_strtod_l+0x590>)
 800a448:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a44c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a450:	4652      	mov	r2, sl
 800a452:	465b      	mov	r3, fp
 800a454:	f7f6 f8d8 	bl	8000608 <__aeabi_dmul>
 800a458:	4682      	mov	sl, r0
 800a45a:	468b      	mov	fp, r1
 800a45c:	e64d      	b.n	800a0fa <_strtod_l+0x72>
 800a45e:	4b6e      	ldr	r3, [pc, #440]	@ (800a618 <_strtod_l+0x590>)
 800a460:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a464:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a468:	f7f6 f8ce 	bl	8000608 <__aeabi_dmul>
 800a46c:	4682      	mov	sl, r0
 800a46e:	9808      	ldr	r0, [sp, #32]
 800a470:	468b      	mov	fp, r1
 800a472:	f7f6 f84f 	bl	8000514 <__aeabi_ui2d>
 800a476:	4602      	mov	r2, r0
 800a478:	460b      	mov	r3, r1
 800a47a:	4650      	mov	r0, sl
 800a47c:	4659      	mov	r1, fp
 800a47e:	f7f5 ff0d 	bl	800029c <__adddf3>
 800a482:	2d0f      	cmp	r5, #15
 800a484:	4682      	mov	sl, r0
 800a486:	468b      	mov	fp, r1
 800a488:	ddd5      	ble.n	800a436 <_strtod_l+0x3ae>
 800a48a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a48c:	1b2c      	subs	r4, r5, r4
 800a48e:	441c      	add	r4, r3
 800a490:	2c00      	cmp	r4, #0
 800a492:	f340 8096 	ble.w	800a5c2 <_strtod_l+0x53a>
 800a496:	f014 030f 	ands.w	r3, r4, #15
 800a49a:	d00a      	beq.n	800a4b2 <_strtod_l+0x42a>
 800a49c:	495e      	ldr	r1, [pc, #376]	@ (800a618 <_strtod_l+0x590>)
 800a49e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a4a2:	4652      	mov	r2, sl
 800a4a4:	465b      	mov	r3, fp
 800a4a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4aa:	f7f6 f8ad 	bl	8000608 <__aeabi_dmul>
 800a4ae:	4682      	mov	sl, r0
 800a4b0:	468b      	mov	fp, r1
 800a4b2:	f034 040f 	bics.w	r4, r4, #15
 800a4b6:	d073      	beq.n	800a5a0 <_strtod_l+0x518>
 800a4b8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a4bc:	dd48      	ble.n	800a550 <_strtod_l+0x4c8>
 800a4be:	2400      	movs	r4, #0
 800a4c0:	46a0      	mov	r8, r4
 800a4c2:	940a      	str	r4, [sp, #40]	@ 0x28
 800a4c4:	46a1      	mov	r9, r4
 800a4c6:	9a05      	ldr	r2, [sp, #20]
 800a4c8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a620 <_strtod_l+0x598>
 800a4cc:	2322      	movs	r3, #34	@ 0x22
 800a4ce:	6013      	str	r3, [r2, #0]
 800a4d0:	f04f 0a00 	mov.w	sl, #0
 800a4d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	f43f ae0f 	beq.w	800a0fa <_strtod_l+0x72>
 800a4dc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a4de:	9805      	ldr	r0, [sp, #20]
 800a4e0:	f7ff f942 	bl	8009768 <_Bfree>
 800a4e4:	9805      	ldr	r0, [sp, #20]
 800a4e6:	4649      	mov	r1, r9
 800a4e8:	f7ff f93e 	bl	8009768 <_Bfree>
 800a4ec:	9805      	ldr	r0, [sp, #20]
 800a4ee:	4641      	mov	r1, r8
 800a4f0:	f7ff f93a 	bl	8009768 <_Bfree>
 800a4f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a4f6:	9805      	ldr	r0, [sp, #20]
 800a4f8:	f7ff f936 	bl	8009768 <_Bfree>
 800a4fc:	9805      	ldr	r0, [sp, #20]
 800a4fe:	4621      	mov	r1, r4
 800a500:	f7ff f932 	bl	8009768 <_Bfree>
 800a504:	e5f9      	b.n	800a0fa <_strtod_l+0x72>
 800a506:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a508:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a50c:	4293      	cmp	r3, r2
 800a50e:	dbbc      	blt.n	800a48a <_strtod_l+0x402>
 800a510:	4c41      	ldr	r4, [pc, #260]	@ (800a618 <_strtod_l+0x590>)
 800a512:	f1c5 050f 	rsb	r5, r5, #15
 800a516:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a51a:	4652      	mov	r2, sl
 800a51c:	465b      	mov	r3, fp
 800a51e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a522:	f7f6 f871 	bl	8000608 <__aeabi_dmul>
 800a526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a528:	1b5d      	subs	r5, r3, r5
 800a52a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a52e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a532:	e78f      	b.n	800a454 <_strtod_l+0x3cc>
 800a534:	3316      	adds	r3, #22
 800a536:	dba8      	blt.n	800a48a <_strtod_l+0x402>
 800a538:	4b37      	ldr	r3, [pc, #220]	@ (800a618 <_strtod_l+0x590>)
 800a53a:	eba9 0808 	sub.w	r8, r9, r8
 800a53e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a542:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a546:	4650      	mov	r0, sl
 800a548:	4659      	mov	r1, fp
 800a54a:	f7f6 f987 	bl	800085c <__aeabi_ddiv>
 800a54e:	e783      	b.n	800a458 <_strtod_l+0x3d0>
 800a550:	4b32      	ldr	r3, [pc, #200]	@ (800a61c <_strtod_l+0x594>)
 800a552:	9308      	str	r3, [sp, #32]
 800a554:	2300      	movs	r3, #0
 800a556:	1124      	asrs	r4, r4, #4
 800a558:	4650      	mov	r0, sl
 800a55a:	4659      	mov	r1, fp
 800a55c:	461e      	mov	r6, r3
 800a55e:	2c01      	cmp	r4, #1
 800a560:	dc21      	bgt.n	800a5a6 <_strtod_l+0x51e>
 800a562:	b10b      	cbz	r3, 800a568 <_strtod_l+0x4e0>
 800a564:	4682      	mov	sl, r0
 800a566:	468b      	mov	fp, r1
 800a568:	492c      	ldr	r1, [pc, #176]	@ (800a61c <_strtod_l+0x594>)
 800a56a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a56e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a572:	4652      	mov	r2, sl
 800a574:	465b      	mov	r3, fp
 800a576:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a57a:	f7f6 f845 	bl	8000608 <__aeabi_dmul>
 800a57e:	4b28      	ldr	r3, [pc, #160]	@ (800a620 <_strtod_l+0x598>)
 800a580:	460a      	mov	r2, r1
 800a582:	400b      	ands	r3, r1
 800a584:	4927      	ldr	r1, [pc, #156]	@ (800a624 <_strtod_l+0x59c>)
 800a586:	428b      	cmp	r3, r1
 800a588:	4682      	mov	sl, r0
 800a58a:	d898      	bhi.n	800a4be <_strtod_l+0x436>
 800a58c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a590:	428b      	cmp	r3, r1
 800a592:	bf86      	itte	hi
 800a594:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a628 <_strtod_l+0x5a0>
 800a598:	f04f 3aff 	movhi.w	sl, #4294967295
 800a59c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	9308      	str	r3, [sp, #32]
 800a5a4:	e07a      	b.n	800a69c <_strtod_l+0x614>
 800a5a6:	07e2      	lsls	r2, r4, #31
 800a5a8:	d505      	bpl.n	800a5b6 <_strtod_l+0x52e>
 800a5aa:	9b08      	ldr	r3, [sp, #32]
 800a5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b0:	f7f6 f82a 	bl	8000608 <__aeabi_dmul>
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	9a08      	ldr	r2, [sp, #32]
 800a5b8:	3208      	adds	r2, #8
 800a5ba:	3601      	adds	r6, #1
 800a5bc:	1064      	asrs	r4, r4, #1
 800a5be:	9208      	str	r2, [sp, #32]
 800a5c0:	e7cd      	b.n	800a55e <_strtod_l+0x4d6>
 800a5c2:	d0ed      	beq.n	800a5a0 <_strtod_l+0x518>
 800a5c4:	4264      	negs	r4, r4
 800a5c6:	f014 020f 	ands.w	r2, r4, #15
 800a5ca:	d00a      	beq.n	800a5e2 <_strtod_l+0x55a>
 800a5cc:	4b12      	ldr	r3, [pc, #72]	@ (800a618 <_strtod_l+0x590>)
 800a5ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5d2:	4650      	mov	r0, sl
 800a5d4:	4659      	mov	r1, fp
 800a5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5da:	f7f6 f93f 	bl	800085c <__aeabi_ddiv>
 800a5de:	4682      	mov	sl, r0
 800a5e0:	468b      	mov	fp, r1
 800a5e2:	1124      	asrs	r4, r4, #4
 800a5e4:	d0dc      	beq.n	800a5a0 <_strtod_l+0x518>
 800a5e6:	2c1f      	cmp	r4, #31
 800a5e8:	dd20      	ble.n	800a62c <_strtod_l+0x5a4>
 800a5ea:	2400      	movs	r4, #0
 800a5ec:	46a0      	mov	r8, r4
 800a5ee:	940a      	str	r4, [sp, #40]	@ 0x28
 800a5f0:	46a1      	mov	r9, r4
 800a5f2:	9a05      	ldr	r2, [sp, #20]
 800a5f4:	2322      	movs	r3, #34	@ 0x22
 800a5f6:	f04f 0a00 	mov.w	sl, #0
 800a5fa:	f04f 0b00 	mov.w	fp, #0
 800a5fe:	6013      	str	r3, [r2, #0]
 800a600:	e768      	b.n	800a4d4 <_strtod_l+0x44c>
 800a602:	bf00      	nop
 800a604:	0800d291 	.word	0x0800d291
 800a608:	0800d4a4 	.word	0x0800d4a4
 800a60c:	0800d289 	.word	0x0800d289
 800a610:	0800d2c0 	.word	0x0800d2c0
 800a614:	0800d64d 	.word	0x0800d64d
 800a618:	0800d3d8 	.word	0x0800d3d8
 800a61c:	0800d3b0 	.word	0x0800d3b0
 800a620:	7ff00000 	.word	0x7ff00000
 800a624:	7ca00000 	.word	0x7ca00000
 800a628:	7fefffff 	.word	0x7fefffff
 800a62c:	f014 0310 	ands.w	r3, r4, #16
 800a630:	bf18      	it	ne
 800a632:	236a      	movne	r3, #106	@ 0x6a
 800a634:	4ea9      	ldr	r6, [pc, #676]	@ (800a8dc <_strtod_l+0x854>)
 800a636:	9308      	str	r3, [sp, #32]
 800a638:	4650      	mov	r0, sl
 800a63a:	4659      	mov	r1, fp
 800a63c:	2300      	movs	r3, #0
 800a63e:	07e2      	lsls	r2, r4, #31
 800a640:	d504      	bpl.n	800a64c <_strtod_l+0x5c4>
 800a642:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a646:	f7f5 ffdf 	bl	8000608 <__aeabi_dmul>
 800a64a:	2301      	movs	r3, #1
 800a64c:	1064      	asrs	r4, r4, #1
 800a64e:	f106 0608 	add.w	r6, r6, #8
 800a652:	d1f4      	bne.n	800a63e <_strtod_l+0x5b6>
 800a654:	b10b      	cbz	r3, 800a65a <_strtod_l+0x5d2>
 800a656:	4682      	mov	sl, r0
 800a658:	468b      	mov	fp, r1
 800a65a:	9b08      	ldr	r3, [sp, #32]
 800a65c:	b1b3      	cbz	r3, 800a68c <_strtod_l+0x604>
 800a65e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a662:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a666:	2b00      	cmp	r3, #0
 800a668:	4659      	mov	r1, fp
 800a66a:	dd0f      	ble.n	800a68c <_strtod_l+0x604>
 800a66c:	2b1f      	cmp	r3, #31
 800a66e:	dd55      	ble.n	800a71c <_strtod_l+0x694>
 800a670:	2b34      	cmp	r3, #52	@ 0x34
 800a672:	bfde      	ittt	le
 800a674:	f04f 33ff 	movle.w	r3, #4294967295
 800a678:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a67c:	4093      	lslle	r3, r2
 800a67e:	f04f 0a00 	mov.w	sl, #0
 800a682:	bfcc      	ite	gt
 800a684:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a688:	ea03 0b01 	andle.w	fp, r3, r1
 800a68c:	2200      	movs	r2, #0
 800a68e:	2300      	movs	r3, #0
 800a690:	4650      	mov	r0, sl
 800a692:	4659      	mov	r1, fp
 800a694:	f7f6 fa20 	bl	8000ad8 <__aeabi_dcmpeq>
 800a698:	2800      	cmp	r0, #0
 800a69a:	d1a6      	bne.n	800a5ea <_strtod_l+0x562>
 800a69c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a69e:	9300      	str	r3, [sp, #0]
 800a6a0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a6a2:	9805      	ldr	r0, [sp, #20]
 800a6a4:	462b      	mov	r3, r5
 800a6a6:	463a      	mov	r2, r7
 800a6a8:	f7ff f8c6 	bl	8009838 <__s2b>
 800a6ac:	900a      	str	r0, [sp, #40]	@ 0x28
 800a6ae:	2800      	cmp	r0, #0
 800a6b0:	f43f af05 	beq.w	800a4be <_strtod_l+0x436>
 800a6b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6b6:	2a00      	cmp	r2, #0
 800a6b8:	eba9 0308 	sub.w	r3, r9, r8
 800a6bc:	bfa8      	it	ge
 800a6be:	2300      	movge	r3, #0
 800a6c0:	9312      	str	r3, [sp, #72]	@ 0x48
 800a6c2:	2400      	movs	r4, #0
 800a6c4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a6c8:	9316      	str	r3, [sp, #88]	@ 0x58
 800a6ca:	46a0      	mov	r8, r4
 800a6cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6ce:	9805      	ldr	r0, [sp, #20]
 800a6d0:	6859      	ldr	r1, [r3, #4]
 800a6d2:	f7ff f809 	bl	80096e8 <_Balloc>
 800a6d6:	4681      	mov	r9, r0
 800a6d8:	2800      	cmp	r0, #0
 800a6da:	f43f aef4 	beq.w	800a4c6 <_strtod_l+0x43e>
 800a6de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6e0:	691a      	ldr	r2, [r3, #16]
 800a6e2:	3202      	adds	r2, #2
 800a6e4:	f103 010c 	add.w	r1, r3, #12
 800a6e8:	0092      	lsls	r2, r2, #2
 800a6ea:	300c      	adds	r0, #12
 800a6ec:	f000 fd72 	bl	800b1d4 <memcpy>
 800a6f0:	ec4b ab10 	vmov	d0, sl, fp
 800a6f4:	9805      	ldr	r0, [sp, #20]
 800a6f6:	aa1c      	add	r2, sp, #112	@ 0x70
 800a6f8:	a91b      	add	r1, sp, #108	@ 0x6c
 800a6fa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a6fe:	f7ff fbd7 	bl	8009eb0 <__d2b>
 800a702:	901a      	str	r0, [sp, #104]	@ 0x68
 800a704:	2800      	cmp	r0, #0
 800a706:	f43f aede 	beq.w	800a4c6 <_strtod_l+0x43e>
 800a70a:	9805      	ldr	r0, [sp, #20]
 800a70c:	2101      	movs	r1, #1
 800a70e:	f7ff f929 	bl	8009964 <__i2b>
 800a712:	4680      	mov	r8, r0
 800a714:	b948      	cbnz	r0, 800a72a <_strtod_l+0x6a2>
 800a716:	f04f 0800 	mov.w	r8, #0
 800a71a:	e6d4      	b.n	800a4c6 <_strtod_l+0x43e>
 800a71c:	f04f 32ff 	mov.w	r2, #4294967295
 800a720:	fa02 f303 	lsl.w	r3, r2, r3
 800a724:	ea03 0a0a 	and.w	sl, r3, sl
 800a728:	e7b0      	b.n	800a68c <_strtod_l+0x604>
 800a72a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a72c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a72e:	2d00      	cmp	r5, #0
 800a730:	bfab      	itete	ge
 800a732:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a734:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a736:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a738:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a73a:	bfac      	ite	ge
 800a73c:	18ef      	addge	r7, r5, r3
 800a73e:	1b5e      	sublt	r6, r3, r5
 800a740:	9b08      	ldr	r3, [sp, #32]
 800a742:	1aed      	subs	r5, r5, r3
 800a744:	4415      	add	r5, r2
 800a746:	4b66      	ldr	r3, [pc, #408]	@ (800a8e0 <_strtod_l+0x858>)
 800a748:	3d01      	subs	r5, #1
 800a74a:	429d      	cmp	r5, r3
 800a74c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a750:	da50      	bge.n	800a7f4 <_strtod_l+0x76c>
 800a752:	1b5b      	subs	r3, r3, r5
 800a754:	2b1f      	cmp	r3, #31
 800a756:	eba2 0203 	sub.w	r2, r2, r3
 800a75a:	f04f 0101 	mov.w	r1, #1
 800a75e:	dc3d      	bgt.n	800a7dc <_strtod_l+0x754>
 800a760:	fa01 f303 	lsl.w	r3, r1, r3
 800a764:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a766:	2300      	movs	r3, #0
 800a768:	9310      	str	r3, [sp, #64]	@ 0x40
 800a76a:	18bd      	adds	r5, r7, r2
 800a76c:	9b08      	ldr	r3, [sp, #32]
 800a76e:	42af      	cmp	r7, r5
 800a770:	4416      	add	r6, r2
 800a772:	441e      	add	r6, r3
 800a774:	463b      	mov	r3, r7
 800a776:	bfa8      	it	ge
 800a778:	462b      	movge	r3, r5
 800a77a:	42b3      	cmp	r3, r6
 800a77c:	bfa8      	it	ge
 800a77e:	4633      	movge	r3, r6
 800a780:	2b00      	cmp	r3, #0
 800a782:	bfc2      	ittt	gt
 800a784:	1aed      	subgt	r5, r5, r3
 800a786:	1af6      	subgt	r6, r6, r3
 800a788:	1aff      	subgt	r7, r7, r3
 800a78a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	dd16      	ble.n	800a7be <_strtod_l+0x736>
 800a790:	4641      	mov	r1, r8
 800a792:	9805      	ldr	r0, [sp, #20]
 800a794:	461a      	mov	r2, r3
 800a796:	f7ff f9a5 	bl	8009ae4 <__pow5mult>
 800a79a:	4680      	mov	r8, r0
 800a79c:	2800      	cmp	r0, #0
 800a79e:	d0ba      	beq.n	800a716 <_strtod_l+0x68e>
 800a7a0:	4601      	mov	r1, r0
 800a7a2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a7a4:	9805      	ldr	r0, [sp, #20]
 800a7a6:	f7ff f8f3 	bl	8009990 <__multiply>
 800a7aa:	900e      	str	r0, [sp, #56]	@ 0x38
 800a7ac:	2800      	cmp	r0, #0
 800a7ae:	f43f ae8a 	beq.w	800a4c6 <_strtod_l+0x43e>
 800a7b2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a7b4:	9805      	ldr	r0, [sp, #20]
 800a7b6:	f7fe ffd7 	bl	8009768 <_Bfree>
 800a7ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a7bc:	931a      	str	r3, [sp, #104]	@ 0x68
 800a7be:	2d00      	cmp	r5, #0
 800a7c0:	dc1d      	bgt.n	800a7fe <_strtod_l+0x776>
 800a7c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	dd23      	ble.n	800a810 <_strtod_l+0x788>
 800a7c8:	4649      	mov	r1, r9
 800a7ca:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a7cc:	9805      	ldr	r0, [sp, #20]
 800a7ce:	f7ff f989 	bl	8009ae4 <__pow5mult>
 800a7d2:	4681      	mov	r9, r0
 800a7d4:	b9e0      	cbnz	r0, 800a810 <_strtod_l+0x788>
 800a7d6:	f04f 0900 	mov.w	r9, #0
 800a7da:	e674      	b.n	800a4c6 <_strtod_l+0x43e>
 800a7dc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a7e0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a7e4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a7e8:	35e2      	adds	r5, #226	@ 0xe2
 800a7ea:	fa01 f305 	lsl.w	r3, r1, r5
 800a7ee:	9310      	str	r3, [sp, #64]	@ 0x40
 800a7f0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a7f2:	e7ba      	b.n	800a76a <_strtod_l+0x6e2>
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	9310      	str	r3, [sp, #64]	@ 0x40
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a7fc:	e7b5      	b.n	800a76a <_strtod_l+0x6e2>
 800a7fe:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a800:	9805      	ldr	r0, [sp, #20]
 800a802:	462a      	mov	r2, r5
 800a804:	f7ff f9c8 	bl	8009b98 <__lshift>
 800a808:	901a      	str	r0, [sp, #104]	@ 0x68
 800a80a:	2800      	cmp	r0, #0
 800a80c:	d1d9      	bne.n	800a7c2 <_strtod_l+0x73a>
 800a80e:	e65a      	b.n	800a4c6 <_strtod_l+0x43e>
 800a810:	2e00      	cmp	r6, #0
 800a812:	dd07      	ble.n	800a824 <_strtod_l+0x79c>
 800a814:	4649      	mov	r1, r9
 800a816:	9805      	ldr	r0, [sp, #20]
 800a818:	4632      	mov	r2, r6
 800a81a:	f7ff f9bd 	bl	8009b98 <__lshift>
 800a81e:	4681      	mov	r9, r0
 800a820:	2800      	cmp	r0, #0
 800a822:	d0d8      	beq.n	800a7d6 <_strtod_l+0x74e>
 800a824:	2f00      	cmp	r7, #0
 800a826:	dd08      	ble.n	800a83a <_strtod_l+0x7b2>
 800a828:	4641      	mov	r1, r8
 800a82a:	9805      	ldr	r0, [sp, #20]
 800a82c:	463a      	mov	r2, r7
 800a82e:	f7ff f9b3 	bl	8009b98 <__lshift>
 800a832:	4680      	mov	r8, r0
 800a834:	2800      	cmp	r0, #0
 800a836:	f43f ae46 	beq.w	800a4c6 <_strtod_l+0x43e>
 800a83a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a83c:	9805      	ldr	r0, [sp, #20]
 800a83e:	464a      	mov	r2, r9
 800a840:	f7ff fa32 	bl	8009ca8 <__mdiff>
 800a844:	4604      	mov	r4, r0
 800a846:	2800      	cmp	r0, #0
 800a848:	f43f ae3d 	beq.w	800a4c6 <_strtod_l+0x43e>
 800a84c:	68c3      	ldr	r3, [r0, #12]
 800a84e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a850:	2300      	movs	r3, #0
 800a852:	60c3      	str	r3, [r0, #12]
 800a854:	4641      	mov	r1, r8
 800a856:	f7ff fa0b 	bl	8009c70 <__mcmp>
 800a85a:	2800      	cmp	r0, #0
 800a85c:	da46      	bge.n	800a8ec <_strtod_l+0x864>
 800a85e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a860:	ea53 030a 	orrs.w	r3, r3, sl
 800a864:	d16c      	bne.n	800a940 <_strtod_l+0x8b8>
 800a866:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d168      	bne.n	800a940 <_strtod_l+0x8b8>
 800a86e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a872:	0d1b      	lsrs	r3, r3, #20
 800a874:	051b      	lsls	r3, r3, #20
 800a876:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a87a:	d961      	bls.n	800a940 <_strtod_l+0x8b8>
 800a87c:	6963      	ldr	r3, [r4, #20]
 800a87e:	b913      	cbnz	r3, 800a886 <_strtod_l+0x7fe>
 800a880:	6923      	ldr	r3, [r4, #16]
 800a882:	2b01      	cmp	r3, #1
 800a884:	dd5c      	ble.n	800a940 <_strtod_l+0x8b8>
 800a886:	4621      	mov	r1, r4
 800a888:	2201      	movs	r2, #1
 800a88a:	9805      	ldr	r0, [sp, #20]
 800a88c:	f7ff f984 	bl	8009b98 <__lshift>
 800a890:	4641      	mov	r1, r8
 800a892:	4604      	mov	r4, r0
 800a894:	f7ff f9ec 	bl	8009c70 <__mcmp>
 800a898:	2800      	cmp	r0, #0
 800a89a:	dd51      	ble.n	800a940 <_strtod_l+0x8b8>
 800a89c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a8a0:	9a08      	ldr	r2, [sp, #32]
 800a8a2:	0d1b      	lsrs	r3, r3, #20
 800a8a4:	051b      	lsls	r3, r3, #20
 800a8a6:	2a00      	cmp	r2, #0
 800a8a8:	d06b      	beq.n	800a982 <_strtod_l+0x8fa>
 800a8aa:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a8ae:	d868      	bhi.n	800a982 <_strtod_l+0x8fa>
 800a8b0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a8b4:	f67f ae9d 	bls.w	800a5f2 <_strtod_l+0x56a>
 800a8b8:	4b0a      	ldr	r3, [pc, #40]	@ (800a8e4 <_strtod_l+0x85c>)
 800a8ba:	4650      	mov	r0, sl
 800a8bc:	4659      	mov	r1, fp
 800a8be:	2200      	movs	r2, #0
 800a8c0:	f7f5 fea2 	bl	8000608 <__aeabi_dmul>
 800a8c4:	4b08      	ldr	r3, [pc, #32]	@ (800a8e8 <_strtod_l+0x860>)
 800a8c6:	400b      	ands	r3, r1
 800a8c8:	4682      	mov	sl, r0
 800a8ca:	468b      	mov	fp, r1
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	f47f ae05 	bne.w	800a4dc <_strtod_l+0x454>
 800a8d2:	9a05      	ldr	r2, [sp, #20]
 800a8d4:	2322      	movs	r3, #34	@ 0x22
 800a8d6:	6013      	str	r3, [r2, #0]
 800a8d8:	e600      	b.n	800a4dc <_strtod_l+0x454>
 800a8da:	bf00      	nop
 800a8dc:	0800d4d0 	.word	0x0800d4d0
 800a8e0:	fffffc02 	.word	0xfffffc02
 800a8e4:	39500000 	.word	0x39500000
 800a8e8:	7ff00000 	.word	0x7ff00000
 800a8ec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a8f0:	d165      	bne.n	800a9be <_strtod_l+0x936>
 800a8f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a8f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a8f8:	b35a      	cbz	r2, 800a952 <_strtod_l+0x8ca>
 800a8fa:	4a9f      	ldr	r2, [pc, #636]	@ (800ab78 <_strtod_l+0xaf0>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d12b      	bne.n	800a958 <_strtod_l+0x8d0>
 800a900:	9b08      	ldr	r3, [sp, #32]
 800a902:	4651      	mov	r1, sl
 800a904:	b303      	cbz	r3, 800a948 <_strtod_l+0x8c0>
 800a906:	4b9d      	ldr	r3, [pc, #628]	@ (800ab7c <_strtod_l+0xaf4>)
 800a908:	465a      	mov	r2, fp
 800a90a:	4013      	ands	r3, r2
 800a90c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a910:	f04f 32ff 	mov.w	r2, #4294967295
 800a914:	d81b      	bhi.n	800a94e <_strtod_l+0x8c6>
 800a916:	0d1b      	lsrs	r3, r3, #20
 800a918:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a91c:	fa02 f303 	lsl.w	r3, r2, r3
 800a920:	4299      	cmp	r1, r3
 800a922:	d119      	bne.n	800a958 <_strtod_l+0x8d0>
 800a924:	4b96      	ldr	r3, [pc, #600]	@ (800ab80 <_strtod_l+0xaf8>)
 800a926:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a928:	429a      	cmp	r2, r3
 800a92a:	d102      	bne.n	800a932 <_strtod_l+0x8aa>
 800a92c:	3101      	adds	r1, #1
 800a92e:	f43f adca 	beq.w	800a4c6 <_strtod_l+0x43e>
 800a932:	4b92      	ldr	r3, [pc, #584]	@ (800ab7c <_strtod_l+0xaf4>)
 800a934:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a936:	401a      	ands	r2, r3
 800a938:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a93c:	f04f 0a00 	mov.w	sl, #0
 800a940:	9b08      	ldr	r3, [sp, #32]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d1b8      	bne.n	800a8b8 <_strtod_l+0x830>
 800a946:	e5c9      	b.n	800a4dc <_strtod_l+0x454>
 800a948:	f04f 33ff 	mov.w	r3, #4294967295
 800a94c:	e7e8      	b.n	800a920 <_strtod_l+0x898>
 800a94e:	4613      	mov	r3, r2
 800a950:	e7e6      	b.n	800a920 <_strtod_l+0x898>
 800a952:	ea53 030a 	orrs.w	r3, r3, sl
 800a956:	d0a1      	beq.n	800a89c <_strtod_l+0x814>
 800a958:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a95a:	b1db      	cbz	r3, 800a994 <_strtod_l+0x90c>
 800a95c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a95e:	4213      	tst	r3, r2
 800a960:	d0ee      	beq.n	800a940 <_strtod_l+0x8b8>
 800a962:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a964:	9a08      	ldr	r2, [sp, #32]
 800a966:	4650      	mov	r0, sl
 800a968:	4659      	mov	r1, fp
 800a96a:	b1bb      	cbz	r3, 800a99c <_strtod_l+0x914>
 800a96c:	f7ff fb6e 	bl	800a04c <sulp>
 800a970:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a974:	ec53 2b10 	vmov	r2, r3, d0
 800a978:	f7f5 fc90 	bl	800029c <__adddf3>
 800a97c:	4682      	mov	sl, r0
 800a97e:	468b      	mov	fp, r1
 800a980:	e7de      	b.n	800a940 <_strtod_l+0x8b8>
 800a982:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a986:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a98a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a98e:	f04f 3aff 	mov.w	sl, #4294967295
 800a992:	e7d5      	b.n	800a940 <_strtod_l+0x8b8>
 800a994:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a996:	ea13 0f0a 	tst.w	r3, sl
 800a99a:	e7e1      	b.n	800a960 <_strtod_l+0x8d8>
 800a99c:	f7ff fb56 	bl	800a04c <sulp>
 800a9a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a9a4:	ec53 2b10 	vmov	r2, r3, d0
 800a9a8:	f7f5 fc76 	bl	8000298 <__aeabi_dsub>
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	4682      	mov	sl, r0
 800a9b2:	468b      	mov	fp, r1
 800a9b4:	f7f6 f890 	bl	8000ad8 <__aeabi_dcmpeq>
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	d0c1      	beq.n	800a940 <_strtod_l+0x8b8>
 800a9bc:	e619      	b.n	800a5f2 <_strtod_l+0x56a>
 800a9be:	4641      	mov	r1, r8
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f7ff facd 	bl	8009f60 <__ratio>
 800a9c6:	ec57 6b10 	vmov	r6, r7, d0
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a9d0:	4630      	mov	r0, r6
 800a9d2:	4639      	mov	r1, r7
 800a9d4:	f7f6 f894 	bl	8000b00 <__aeabi_dcmple>
 800a9d8:	2800      	cmp	r0, #0
 800a9da:	d06f      	beq.n	800aabc <_strtod_l+0xa34>
 800a9dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d17a      	bne.n	800aad8 <_strtod_l+0xa50>
 800a9e2:	f1ba 0f00 	cmp.w	sl, #0
 800a9e6:	d158      	bne.n	800aa9a <_strtod_l+0xa12>
 800a9e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d15a      	bne.n	800aaa8 <_strtod_l+0xa20>
 800a9f2:	4b64      	ldr	r3, [pc, #400]	@ (800ab84 <_strtod_l+0xafc>)
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	4630      	mov	r0, r6
 800a9f8:	4639      	mov	r1, r7
 800a9fa:	f7f6 f877 	bl	8000aec <__aeabi_dcmplt>
 800a9fe:	2800      	cmp	r0, #0
 800aa00:	d159      	bne.n	800aab6 <_strtod_l+0xa2e>
 800aa02:	4630      	mov	r0, r6
 800aa04:	4639      	mov	r1, r7
 800aa06:	4b60      	ldr	r3, [pc, #384]	@ (800ab88 <_strtod_l+0xb00>)
 800aa08:	2200      	movs	r2, #0
 800aa0a:	f7f5 fdfd 	bl	8000608 <__aeabi_dmul>
 800aa0e:	4606      	mov	r6, r0
 800aa10:	460f      	mov	r7, r1
 800aa12:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800aa16:	9606      	str	r6, [sp, #24]
 800aa18:	9307      	str	r3, [sp, #28]
 800aa1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa1e:	4d57      	ldr	r5, [pc, #348]	@ (800ab7c <_strtod_l+0xaf4>)
 800aa20:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800aa24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa26:	401d      	ands	r5, r3
 800aa28:	4b58      	ldr	r3, [pc, #352]	@ (800ab8c <_strtod_l+0xb04>)
 800aa2a:	429d      	cmp	r5, r3
 800aa2c:	f040 80b2 	bne.w	800ab94 <_strtod_l+0xb0c>
 800aa30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aa32:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800aa36:	ec4b ab10 	vmov	d0, sl, fp
 800aa3a:	f7ff f9c9 	bl	8009dd0 <__ulp>
 800aa3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa42:	ec51 0b10 	vmov	r0, r1, d0
 800aa46:	f7f5 fddf 	bl	8000608 <__aeabi_dmul>
 800aa4a:	4652      	mov	r2, sl
 800aa4c:	465b      	mov	r3, fp
 800aa4e:	f7f5 fc25 	bl	800029c <__adddf3>
 800aa52:	460b      	mov	r3, r1
 800aa54:	4949      	ldr	r1, [pc, #292]	@ (800ab7c <_strtod_l+0xaf4>)
 800aa56:	4a4e      	ldr	r2, [pc, #312]	@ (800ab90 <_strtod_l+0xb08>)
 800aa58:	4019      	ands	r1, r3
 800aa5a:	4291      	cmp	r1, r2
 800aa5c:	4682      	mov	sl, r0
 800aa5e:	d942      	bls.n	800aae6 <_strtod_l+0xa5e>
 800aa60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800aa62:	4b47      	ldr	r3, [pc, #284]	@ (800ab80 <_strtod_l+0xaf8>)
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d103      	bne.n	800aa70 <_strtod_l+0x9e8>
 800aa68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	f43f ad2b 	beq.w	800a4c6 <_strtod_l+0x43e>
 800aa70:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800ab80 <_strtod_l+0xaf8>
 800aa74:	f04f 3aff 	mov.w	sl, #4294967295
 800aa78:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800aa7a:	9805      	ldr	r0, [sp, #20]
 800aa7c:	f7fe fe74 	bl	8009768 <_Bfree>
 800aa80:	9805      	ldr	r0, [sp, #20]
 800aa82:	4649      	mov	r1, r9
 800aa84:	f7fe fe70 	bl	8009768 <_Bfree>
 800aa88:	9805      	ldr	r0, [sp, #20]
 800aa8a:	4641      	mov	r1, r8
 800aa8c:	f7fe fe6c 	bl	8009768 <_Bfree>
 800aa90:	9805      	ldr	r0, [sp, #20]
 800aa92:	4621      	mov	r1, r4
 800aa94:	f7fe fe68 	bl	8009768 <_Bfree>
 800aa98:	e618      	b.n	800a6cc <_strtod_l+0x644>
 800aa9a:	f1ba 0f01 	cmp.w	sl, #1
 800aa9e:	d103      	bne.n	800aaa8 <_strtod_l+0xa20>
 800aaa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	f43f ada5 	beq.w	800a5f2 <_strtod_l+0x56a>
 800aaa8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800ab58 <_strtod_l+0xad0>
 800aaac:	4f35      	ldr	r7, [pc, #212]	@ (800ab84 <_strtod_l+0xafc>)
 800aaae:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aab2:	2600      	movs	r6, #0
 800aab4:	e7b1      	b.n	800aa1a <_strtod_l+0x992>
 800aab6:	4f34      	ldr	r7, [pc, #208]	@ (800ab88 <_strtod_l+0xb00>)
 800aab8:	2600      	movs	r6, #0
 800aaba:	e7aa      	b.n	800aa12 <_strtod_l+0x98a>
 800aabc:	4b32      	ldr	r3, [pc, #200]	@ (800ab88 <_strtod_l+0xb00>)
 800aabe:	4630      	mov	r0, r6
 800aac0:	4639      	mov	r1, r7
 800aac2:	2200      	movs	r2, #0
 800aac4:	f7f5 fda0 	bl	8000608 <__aeabi_dmul>
 800aac8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aaca:	4606      	mov	r6, r0
 800aacc:	460f      	mov	r7, r1
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d09f      	beq.n	800aa12 <_strtod_l+0x98a>
 800aad2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800aad6:	e7a0      	b.n	800aa1a <_strtod_l+0x992>
 800aad8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800ab60 <_strtod_l+0xad8>
 800aadc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aae0:	ec57 6b17 	vmov	r6, r7, d7
 800aae4:	e799      	b.n	800aa1a <_strtod_l+0x992>
 800aae6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800aaea:	9b08      	ldr	r3, [sp, #32]
 800aaec:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d1c1      	bne.n	800aa78 <_strtod_l+0x9f0>
 800aaf4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aaf8:	0d1b      	lsrs	r3, r3, #20
 800aafa:	051b      	lsls	r3, r3, #20
 800aafc:	429d      	cmp	r5, r3
 800aafe:	d1bb      	bne.n	800aa78 <_strtod_l+0x9f0>
 800ab00:	4630      	mov	r0, r6
 800ab02:	4639      	mov	r1, r7
 800ab04:	f7f6 f8e0 	bl	8000cc8 <__aeabi_d2lz>
 800ab08:	f7f5 fd50 	bl	80005ac <__aeabi_l2d>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	460b      	mov	r3, r1
 800ab10:	4630      	mov	r0, r6
 800ab12:	4639      	mov	r1, r7
 800ab14:	f7f5 fbc0 	bl	8000298 <__aeabi_dsub>
 800ab18:	460b      	mov	r3, r1
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800ab20:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800ab24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab26:	ea46 060a 	orr.w	r6, r6, sl
 800ab2a:	431e      	orrs	r6, r3
 800ab2c:	d06f      	beq.n	800ac0e <_strtod_l+0xb86>
 800ab2e:	a30e      	add	r3, pc, #56	@ (adr r3, 800ab68 <_strtod_l+0xae0>)
 800ab30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab34:	f7f5 ffda 	bl	8000aec <__aeabi_dcmplt>
 800ab38:	2800      	cmp	r0, #0
 800ab3a:	f47f accf 	bne.w	800a4dc <_strtod_l+0x454>
 800ab3e:	a30c      	add	r3, pc, #48	@ (adr r3, 800ab70 <_strtod_l+0xae8>)
 800ab40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab48:	f7f5 ffee 	bl	8000b28 <__aeabi_dcmpgt>
 800ab4c:	2800      	cmp	r0, #0
 800ab4e:	d093      	beq.n	800aa78 <_strtod_l+0x9f0>
 800ab50:	e4c4      	b.n	800a4dc <_strtod_l+0x454>
 800ab52:	bf00      	nop
 800ab54:	f3af 8000 	nop.w
 800ab58:	00000000 	.word	0x00000000
 800ab5c:	bff00000 	.word	0xbff00000
 800ab60:	00000000 	.word	0x00000000
 800ab64:	3ff00000 	.word	0x3ff00000
 800ab68:	94a03595 	.word	0x94a03595
 800ab6c:	3fdfffff 	.word	0x3fdfffff
 800ab70:	35afe535 	.word	0x35afe535
 800ab74:	3fe00000 	.word	0x3fe00000
 800ab78:	000fffff 	.word	0x000fffff
 800ab7c:	7ff00000 	.word	0x7ff00000
 800ab80:	7fefffff 	.word	0x7fefffff
 800ab84:	3ff00000 	.word	0x3ff00000
 800ab88:	3fe00000 	.word	0x3fe00000
 800ab8c:	7fe00000 	.word	0x7fe00000
 800ab90:	7c9fffff 	.word	0x7c9fffff
 800ab94:	9b08      	ldr	r3, [sp, #32]
 800ab96:	b323      	cbz	r3, 800abe2 <_strtod_l+0xb5a>
 800ab98:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ab9c:	d821      	bhi.n	800abe2 <_strtod_l+0xb5a>
 800ab9e:	a328      	add	r3, pc, #160	@ (adr r3, 800ac40 <_strtod_l+0xbb8>)
 800aba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba4:	4630      	mov	r0, r6
 800aba6:	4639      	mov	r1, r7
 800aba8:	f7f5 ffaa 	bl	8000b00 <__aeabi_dcmple>
 800abac:	b1a0      	cbz	r0, 800abd8 <_strtod_l+0xb50>
 800abae:	4639      	mov	r1, r7
 800abb0:	4630      	mov	r0, r6
 800abb2:	f7f6 f801 	bl	8000bb8 <__aeabi_d2uiz>
 800abb6:	2801      	cmp	r0, #1
 800abb8:	bf38      	it	cc
 800abba:	2001      	movcc	r0, #1
 800abbc:	f7f5 fcaa 	bl	8000514 <__aeabi_ui2d>
 800abc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abc2:	4606      	mov	r6, r0
 800abc4:	460f      	mov	r7, r1
 800abc6:	b9fb      	cbnz	r3, 800ac08 <_strtod_l+0xb80>
 800abc8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800abcc:	9014      	str	r0, [sp, #80]	@ 0x50
 800abce:	9315      	str	r3, [sp, #84]	@ 0x54
 800abd0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800abd4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800abd8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800abda:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800abde:	1b5b      	subs	r3, r3, r5
 800abe0:	9311      	str	r3, [sp, #68]	@ 0x44
 800abe2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800abe6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800abea:	f7ff f8f1 	bl	8009dd0 <__ulp>
 800abee:	4650      	mov	r0, sl
 800abf0:	ec53 2b10 	vmov	r2, r3, d0
 800abf4:	4659      	mov	r1, fp
 800abf6:	f7f5 fd07 	bl	8000608 <__aeabi_dmul>
 800abfa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800abfe:	f7f5 fb4d 	bl	800029c <__adddf3>
 800ac02:	4682      	mov	sl, r0
 800ac04:	468b      	mov	fp, r1
 800ac06:	e770      	b.n	800aaea <_strtod_l+0xa62>
 800ac08:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ac0c:	e7e0      	b.n	800abd0 <_strtod_l+0xb48>
 800ac0e:	a30e      	add	r3, pc, #56	@ (adr r3, 800ac48 <_strtod_l+0xbc0>)
 800ac10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac14:	f7f5 ff6a 	bl	8000aec <__aeabi_dcmplt>
 800ac18:	e798      	b.n	800ab4c <_strtod_l+0xac4>
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ac1e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ac20:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ac22:	6013      	str	r3, [r2, #0]
 800ac24:	f7ff ba6d 	b.w	800a102 <_strtod_l+0x7a>
 800ac28:	2a65      	cmp	r2, #101	@ 0x65
 800ac2a:	f43f ab66 	beq.w	800a2fa <_strtod_l+0x272>
 800ac2e:	2a45      	cmp	r2, #69	@ 0x45
 800ac30:	f43f ab63 	beq.w	800a2fa <_strtod_l+0x272>
 800ac34:	2301      	movs	r3, #1
 800ac36:	f7ff bb9e 	b.w	800a376 <_strtod_l+0x2ee>
 800ac3a:	bf00      	nop
 800ac3c:	f3af 8000 	nop.w
 800ac40:	ffc00000 	.word	0xffc00000
 800ac44:	41dfffff 	.word	0x41dfffff
 800ac48:	94a03595 	.word	0x94a03595
 800ac4c:	3fcfffff 	.word	0x3fcfffff

0800ac50 <_strtod_r>:
 800ac50:	4b01      	ldr	r3, [pc, #4]	@ (800ac58 <_strtod_r+0x8>)
 800ac52:	f7ff ba19 	b.w	800a088 <_strtod_l>
 800ac56:	bf00      	nop
 800ac58:	200000ec 	.word	0x200000ec

0800ac5c <_strtol_l.constprop.0>:
 800ac5c:	2b24      	cmp	r3, #36	@ 0x24
 800ac5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac62:	4686      	mov	lr, r0
 800ac64:	4690      	mov	r8, r2
 800ac66:	d801      	bhi.n	800ac6c <_strtol_l.constprop.0+0x10>
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d106      	bne.n	800ac7a <_strtol_l.constprop.0+0x1e>
 800ac6c:	f7fd fdba 	bl	80087e4 <__errno>
 800ac70:	2316      	movs	r3, #22
 800ac72:	6003      	str	r3, [r0, #0]
 800ac74:	2000      	movs	r0, #0
 800ac76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac7a:	4834      	ldr	r0, [pc, #208]	@ (800ad4c <_strtol_l.constprop.0+0xf0>)
 800ac7c:	460d      	mov	r5, r1
 800ac7e:	462a      	mov	r2, r5
 800ac80:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac84:	5d06      	ldrb	r6, [r0, r4]
 800ac86:	f016 0608 	ands.w	r6, r6, #8
 800ac8a:	d1f8      	bne.n	800ac7e <_strtol_l.constprop.0+0x22>
 800ac8c:	2c2d      	cmp	r4, #45	@ 0x2d
 800ac8e:	d12d      	bne.n	800acec <_strtol_l.constprop.0+0x90>
 800ac90:	782c      	ldrb	r4, [r5, #0]
 800ac92:	2601      	movs	r6, #1
 800ac94:	1c95      	adds	r5, r2, #2
 800ac96:	f033 0210 	bics.w	r2, r3, #16
 800ac9a:	d109      	bne.n	800acb0 <_strtol_l.constprop.0+0x54>
 800ac9c:	2c30      	cmp	r4, #48	@ 0x30
 800ac9e:	d12a      	bne.n	800acf6 <_strtol_l.constprop.0+0x9a>
 800aca0:	782a      	ldrb	r2, [r5, #0]
 800aca2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aca6:	2a58      	cmp	r2, #88	@ 0x58
 800aca8:	d125      	bne.n	800acf6 <_strtol_l.constprop.0+0x9a>
 800acaa:	786c      	ldrb	r4, [r5, #1]
 800acac:	2310      	movs	r3, #16
 800acae:	3502      	adds	r5, #2
 800acb0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800acb4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800acb8:	2200      	movs	r2, #0
 800acba:	fbbc f9f3 	udiv	r9, ip, r3
 800acbe:	4610      	mov	r0, r2
 800acc0:	fb03 ca19 	mls	sl, r3, r9, ip
 800acc4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800acc8:	2f09      	cmp	r7, #9
 800acca:	d81b      	bhi.n	800ad04 <_strtol_l.constprop.0+0xa8>
 800accc:	463c      	mov	r4, r7
 800acce:	42a3      	cmp	r3, r4
 800acd0:	dd27      	ble.n	800ad22 <_strtol_l.constprop.0+0xc6>
 800acd2:	1c57      	adds	r7, r2, #1
 800acd4:	d007      	beq.n	800ace6 <_strtol_l.constprop.0+0x8a>
 800acd6:	4581      	cmp	r9, r0
 800acd8:	d320      	bcc.n	800ad1c <_strtol_l.constprop.0+0xc0>
 800acda:	d101      	bne.n	800ace0 <_strtol_l.constprop.0+0x84>
 800acdc:	45a2      	cmp	sl, r4
 800acde:	db1d      	blt.n	800ad1c <_strtol_l.constprop.0+0xc0>
 800ace0:	fb00 4003 	mla	r0, r0, r3, r4
 800ace4:	2201      	movs	r2, #1
 800ace6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800acea:	e7eb      	b.n	800acc4 <_strtol_l.constprop.0+0x68>
 800acec:	2c2b      	cmp	r4, #43	@ 0x2b
 800acee:	bf04      	itt	eq
 800acf0:	782c      	ldrbeq	r4, [r5, #0]
 800acf2:	1c95      	addeq	r5, r2, #2
 800acf4:	e7cf      	b.n	800ac96 <_strtol_l.constprop.0+0x3a>
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d1da      	bne.n	800acb0 <_strtol_l.constprop.0+0x54>
 800acfa:	2c30      	cmp	r4, #48	@ 0x30
 800acfc:	bf0c      	ite	eq
 800acfe:	2308      	moveq	r3, #8
 800ad00:	230a      	movne	r3, #10
 800ad02:	e7d5      	b.n	800acb0 <_strtol_l.constprop.0+0x54>
 800ad04:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ad08:	2f19      	cmp	r7, #25
 800ad0a:	d801      	bhi.n	800ad10 <_strtol_l.constprop.0+0xb4>
 800ad0c:	3c37      	subs	r4, #55	@ 0x37
 800ad0e:	e7de      	b.n	800acce <_strtol_l.constprop.0+0x72>
 800ad10:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ad14:	2f19      	cmp	r7, #25
 800ad16:	d804      	bhi.n	800ad22 <_strtol_l.constprop.0+0xc6>
 800ad18:	3c57      	subs	r4, #87	@ 0x57
 800ad1a:	e7d8      	b.n	800acce <_strtol_l.constprop.0+0x72>
 800ad1c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad20:	e7e1      	b.n	800ace6 <_strtol_l.constprop.0+0x8a>
 800ad22:	1c53      	adds	r3, r2, #1
 800ad24:	d108      	bne.n	800ad38 <_strtol_l.constprop.0+0xdc>
 800ad26:	2322      	movs	r3, #34	@ 0x22
 800ad28:	f8ce 3000 	str.w	r3, [lr]
 800ad2c:	4660      	mov	r0, ip
 800ad2e:	f1b8 0f00 	cmp.w	r8, #0
 800ad32:	d0a0      	beq.n	800ac76 <_strtol_l.constprop.0+0x1a>
 800ad34:	1e69      	subs	r1, r5, #1
 800ad36:	e006      	b.n	800ad46 <_strtol_l.constprop.0+0xea>
 800ad38:	b106      	cbz	r6, 800ad3c <_strtol_l.constprop.0+0xe0>
 800ad3a:	4240      	negs	r0, r0
 800ad3c:	f1b8 0f00 	cmp.w	r8, #0
 800ad40:	d099      	beq.n	800ac76 <_strtol_l.constprop.0+0x1a>
 800ad42:	2a00      	cmp	r2, #0
 800ad44:	d1f6      	bne.n	800ad34 <_strtol_l.constprop.0+0xd8>
 800ad46:	f8c8 1000 	str.w	r1, [r8]
 800ad4a:	e794      	b.n	800ac76 <_strtol_l.constprop.0+0x1a>
 800ad4c:	0800d4f9 	.word	0x0800d4f9

0800ad50 <_strtol_r>:
 800ad50:	f7ff bf84 	b.w	800ac5c <_strtol_l.constprop.0>

0800ad54 <__ssputs_r>:
 800ad54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad58:	688e      	ldr	r6, [r1, #8]
 800ad5a:	461f      	mov	r7, r3
 800ad5c:	42be      	cmp	r6, r7
 800ad5e:	680b      	ldr	r3, [r1, #0]
 800ad60:	4682      	mov	sl, r0
 800ad62:	460c      	mov	r4, r1
 800ad64:	4690      	mov	r8, r2
 800ad66:	d82d      	bhi.n	800adc4 <__ssputs_r+0x70>
 800ad68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ad70:	d026      	beq.n	800adc0 <__ssputs_r+0x6c>
 800ad72:	6965      	ldr	r5, [r4, #20]
 800ad74:	6909      	ldr	r1, [r1, #16]
 800ad76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad7a:	eba3 0901 	sub.w	r9, r3, r1
 800ad7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad82:	1c7b      	adds	r3, r7, #1
 800ad84:	444b      	add	r3, r9
 800ad86:	106d      	asrs	r5, r5, #1
 800ad88:	429d      	cmp	r5, r3
 800ad8a:	bf38      	it	cc
 800ad8c:	461d      	movcc	r5, r3
 800ad8e:	0553      	lsls	r3, r2, #21
 800ad90:	d527      	bpl.n	800ade2 <__ssputs_r+0x8e>
 800ad92:	4629      	mov	r1, r5
 800ad94:	f7fe fc1c 	bl	80095d0 <_malloc_r>
 800ad98:	4606      	mov	r6, r0
 800ad9a:	b360      	cbz	r0, 800adf6 <__ssputs_r+0xa2>
 800ad9c:	6921      	ldr	r1, [r4, #16]
 800ad9e:	464a      	mov	r2, r9
 800ada0:	f000 fa18 	bl	800b1d4 <memcpy>
 800ada4:	89a3      	ldrh	r3, [r4, #12]
 800ada6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800adaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adae:	81a3      	strh	r3, [r4, #12]
 800adb0:	6126      	str	r6, [r4, #16]
 800adb2:	6165      	str	r5, [r4, #20]
 800adb4:	444e      	add	r6, r9
 800adb6:	eba5 0509 	sub.w	r5, r5, r9
 800adba:	6026      	str	r6, [r4, #0]
 800adbc:	60a5      	str	r5, [r4, #8]
 800adbe:	463e      	mov	r6, r7
 800adc0:	42be      	cmp	r6, r7
 800adc2:	d900      	bls.n	800adc6 <__ssputs_r+0x72>
 800adc4:	463e      	mov	r6, r7
 800adc6:	6820      	ldr	r0, [r4, #0]
 800adc8:	4632      	mov	r2, r6
 800adca:	4641      	mov	r1, r8
 800adcc:	f000 f9c6 	bl	800b15c <memmove>
 800add0:	68a3      	ldr	r3, [r4, #8]
 800add2:	1b9b      	subs	r3, r3, r6
 800add4:	60a3      	str	r3, [r4, #8]
 800add6:	6823      	ldr	r3, [r4, #0]
 800add8:	4433      	add	r3, r6
 800adda:	6023      	str	r3, [r4, #0]
 800addc:	2000      	movs	r0, #0
 800adde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ade2:	462a      	mov	r2, r5
 800ade4:	f000 fd89 	bl	800b8fa <_realloc_r>
 800ade8:	4606      	mov	r6, r0
 800adea:	2800      	cmp	r0, #0
 800adec:	d1e0      	bne.n	800adb0 <__ssputs_r+0x5c>
 800adee:	6921      	ldr	r1, [r4, #16]
 800adf0:	4650      	mov	r0, sl
 800adf2:	f7fe fb79 	bl	80094e8 <_free_r>
 800adf6:	230c      	movs	r3, #12
 800adf8:	f8ca 3000 	str.w	r3, [sl]
 800adfc:	89a3      	ldrh	r3, [r4, #12]
 800adfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae02:	81a3      	strh	r3, [r4, #12]
 800ae04:	f04f 30ff 	mov.w	r0, #4294967295
 800ae08:	e7e9      	b.n	800adde <__ssputs_r+0x8a>
	...

0800ae0c <_svfiprintf_r>:
 800ae0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae10:	4698      	mov	r8, r3
 800ae12:	898b      	ldrh	r3, [r1, #12]
 800ae14:	061b      	lsls	r3, r3, #24
 800ae16:	b09d      	sub	sp, #116	@ 0x74
 800ae18:	4607      	mov	r7, r0
 800ae1a:	460d      	mov	r5, r1
 800ae1c:	4614      	mov	r4, r2
 800ae1e:	d510      	bpl.n	800ae42 <_svfiprintf_r+0x36>
 800ae20:	690b      	ldr	r3, [r1, #16]
 800ae22:	b973      	cbnz	r3, 800ae42 <_svfiprintf_r+0x36>
 800ae24:	2140      	movs	r1, #64	@ 0x40
 800ae26:	f7fe fbd3 	bl	80095d0 <_malloc_r>
 800ae2a:	6028      	str	r0, [r5, #0]
 800ae2c:	6128      	str	r0, [r5, #16]
 800ae2e:	b930      	cbnz	r0, 800ae3e <_svfiprintf_r+0x32>
 800ae30:	230c      	movs	r3, #12
 800ae32:	603b      	str	r3, [r7, #0]
 800ae34:	f04f 30ff 	mov.w	r0, #4294967295
 800ae38:	b01d      	add	sp, #116	@ 0x74
 800ae3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae3e:	2340      	movs	r3, #64	@ 0x40
 800ae40:	616b      	str	r3, [r5, #20]
 800ae42:	2300      	movs	r3, #0
 800ae44:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae46:	2320      	movs	r3, #32
 800ae48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae50:	2330      	movs	r3, #48	@ 0x30
 800ae52:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aff0 <_svfiprintf_r+0x1e4>
 800ae56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae5a:	f04f 0901 	mov.w	r9, #1
 800ae5e:	4623      	mov	r3, r4
 800ae60:	469a      	mov	sl, r3
 800ae62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae66:	b10a      	cbz	r2, 800ae6c <_svfiprintf_r+0x60>
 800ae68:	2a25      	cmp	r2, #37	@ 0x25
 800ae6a:	d1f9      	bne.n	800ae60 <_svfiprintf_r+0x54>
 800ae6c:	ebba 0b04 	subs.w	fp, sl, r4
 800ae70:	d00b      	beq.n	800ae8a <_svfiprintf_r+0x7e>
 800ae72:	465b      	mov	r3, fp
 800ae74:	4622      	mov	r2, r4
 800ae76:	4629      	mov	r1, r5
 800ae78:	4638      	mov	r0, r7
 800ae7a:	f7ff ff6b 	bl	800ad54 <__ssputs_r>
 800ae7e:	3001      	adds	r0, #1
 800ae80:	f000 80a7 	beq.w	800afd2 <_svfiprintf_r+0x1c6>
 800ae84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae86:	445a      	add	r2, fp
 800ae88:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae8a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	f000 809f 	beq.w	800afd2 <_svfiprintf_r+0x1c6>
 800ae94:	2300      	movs	r3, #0
 800ae96:	f04f 32ff 	mov.w	r2, #4294967295
 800ae9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae9e:	f10a 0a01 	add.w	sl, sl, #1
 800aea2:	9304      	str	r3, [sp, #16]
 800aea4:	9307      	str	r3, [sp, #28]
 800aea6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aeaa:	931a      	str	r3, [sp, #104]	@ 0x68
 800aeac:	4654      	mov	r4, sl
 800aeae:	2205      	movs	r2, #5
 800aeb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeb4:	484e      	ldr	r0, [pc, #312]	@ (800aff0 <_svfiprintf_r+0x1e4>)
 800aeb6:	f7f5 f993 	bl	80001e0 <memchr>
 800aeba:	9a04      	ldr	r2, [sp, #16]
 800aebc:	b9d8      	cbnz	r0, 800aef6 <_svfiprintf_r+0xea>
 800aebe:	06d0      	lsls	r0, r2, #27
 800aec0:	bf44      	itt	mi
 800aec2:	2320      	movmi	r3, #32
 800aec4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aec8:	0711      	lsls	r1, r2, #28
 800aeca:	bf44      	itt	mi
 800aecc:	232b      	movmi	r3, #43	@ 0x2b
 800aece:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aed2:	f89a 3000 	ldrb.w	r3, [sl]
 800aed6:	2b2a      	cmp	r3, #42	@ 0x2a
 800aed8:	d015      	beq.n	800af06 <_svfiprintf_r+0xfa>
 800aeda:	9a07      	ldr	r2, [sp, #28]
 800aedc:	4654      	mov	r4, sl
 800aede:	2000      	movs	r0, #0
 800aee0:	f04f 0c0a 	mov.w	ip, #10
 800aee4:	4621      	mov	r1, r4
 800aee6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aeea:	3b30      	subs	r3, #48	@ 0x30
 800aeec:	2b09      	cmp	r3, #9
 800aeee:	d94b      	bls.n	800af88 <_svfiprintf_r+0x17c>
 800aef0:	b1b0      	cbz	r0, 800af20 <_svfiprintf_r+0x114>
 800aef2:	9207      	str	r2, [sp, #28]
 800aef4:	e014      	b.n	800af20 <_svfiprintf_r+0x114>
 800aef6:	eba0 0308 	sub.w	r3, r0, r8
 800aefa:	fa09 f303 	lsl.w	r3, r9, r3
 800aefe:	4313      	orrs	r3, r2
 800af00:	9304      	str	r3, [sp, #16]
 800af02:	46a2      	mov	sl, r4
 800af04:	e7d2      	b.n	800aeac <_svfiprintf_r+0xa0>
 800af06:	9b03      	ldr	r3, [sp, #12]
 800af08:	1d19      	adds	r1, r3, #4
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	9103      	str	r1, [sp, #12]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	bfbb      	ittet	lt
 800af12:	425b      	neglt	r3, r3
 800af14:	f042 0202 	orrlt.w	r2, r2, #2
 800af18:	9307      	strge	r3, [sp, #28]
 800af1a:	9307      	strlt	r3, [sp, #28]
 800af1c:	bfb8      	it	lt
 800af1e:	9204      	strlt	r2, [sp, #16]
 800af20:	7823      	ldrb	r3, [r4, #0]
 800af22:	2b2e      	cmp	r3, #46	@ 0x2e
 800af24:	d10a      	bne.n	800af3c <_svfiprintf_r+0x130>
 800af26:	7863      	ldrb	r3, [r4, #1]
 800af28:	2b2a      	cmp	r3, #42	@ 0x2a
 800af2a:	d132      	bne.n	800af92 <_svfiprintf_r+0x186>
 800af2c:	9b03      	ldr	r3, [sp, #12]
 800af2e:	1d1a      	adds	r2, r3, #4
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	9203      	str	r2, [sp, #12]
 800af34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af38:	3402      	adds	r4, #2
 800af3a:	9305      	str	r3, [sp, #20]
 800af3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b000 <_svfiprintf_r+0x1f4>
 800af40:	7821      	ldrb	r1, [r4, #0]
 800af42:	2203      	movs	r2, #3
 800af44:	4650      	mov	r0, sl
 800af46:	f7f5 f94b 	bl	80001e0 <memchr>
 800af4a:	b138      	cbz	r0, 800af5c <_svfiprintf_r+0x150>
 800af4c:	9b04      	ldr	r3, [sp, #16]
 800af4e:	eba0 000a 	sub.w	r0, r0, sl
 800af52:	2240      	movs	r2, #64	@ 0x40
 800af54:	4082      	lsls	r2, r0
 800af56:	4313      	orrs	r3, r2
 800af58:	3401      	adds	r4, #1
 800af5a:	9304      	str	r3, [sp, #16]
 800af5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af60:	4824      	ldr	r0, [pc, #144]	@ (800aff4 <_svfiprintf_r+0x1e8>)
 800af62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af66:	2206      	movs	r2, #6
 800af68:	f7f5 f93a 	bl	80001e0 <memchr>
 800af6c:	2800      	cmp	r0, #0
 800af6e:	d036      	beq.n	800afde <_svfiprintf_r+0x1d2>
 800af70:	4b21      	ldr	r3, [pc, #132]	@ (800aff8 <_svfiprintf_r+0x1ec>)
 800af72:	bb1b      	cbnz	r3, 800afbc <_svfiprintf_r+0x1b0>
 800af74:	9b03      	ldr	r3, [sp, #12]
 800af76:	3307      	adds	r3, #7
 800af78:	f023 0307 	bic.w	r3, r3, #7
 800af7c:	3308      	adds	r3, #8
 800af7e:	9303      	str	r3, [sp, #12]
 800af80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af82:	4433      	add	r3, r6
 800af84:	9309      	str	r3, [sp, #36]	@ 0x24
 800af86:	e76a      	b.n	800ae5e <_svfiprintf_r+0x52>
 800af88:	fb0c 3202 	mla	r2, ip, r2, r3
 800af8c:	460c      	mov	r4, r1
 800af8e:	2001      	movs	r0, #1
 800af90:	e7a8      	b.n	800aee4 <_svfiprintf_r+0xd8>
 800af92:	2300      	movs	r3, #0
 800af94:	3401      	adds	r4, #1
 800af96:	9305      	str	r3, [sp, #20]
 800af98:	4619      	mov	r1, r3
 800af9a:	f04f 0c0a 	mov.w	ip, #10
 800af9e:	4620      	mov	r0, r4
 800afa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800afa4:	3a30      	subs	r2, #48	@ 0x30
 800afa6:	2a09      	cmp	r2, #9
 800afa8:	d903      	bls.n	800afb2 <_svfiprintf_r+0x1a6>
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d0c6      	beq.n	800af3c <_svfiprintf_r+0x130>
 800afae:	9105      	str	r1, [sp, #20]
 800afb0:	e7c4      	b.n	800af3c <_svfiprintf_r+0x130>
 800afb2:	fb0c 2101 	mla	r1, ip, r1, r2
 800afb6:	4604      	mov	r4, r0
 800afb8:	2301      	movs	r3, #1
 800afba:	e7f0      	b.n	800af9e <_svfiprintf_r+0x192>
 800afbc:	ab03      	add	r3, sp, #12
 800afbe:	9300      	str	r3, [sp, #0]
 800afc0:	462a      	mov	r2, r5
 800afc2:	4b0e      	ldr	r3, [pc, #56]	@ (800affc <_svfiprintf_r+0x1f0>)
 800afc4:	a904      	add	r1, sp, #16
 800afc6:	4638      	mov	r0, r7
 800afc8:	f7fc fcc8 	bl	800795c <_printf_float>
 800afcc:	1c42      	adds	r2, r0, #1
 800afce:	4606      	mov	r6, r0
 800afd0:	d1d6      	bne.n	800af80 <_svfiprintf_r+0x174>
 800afd2:	89ab      	ldrh	r3, [r5, #12]
 800afd4:	065b      	lsls	r3, r3, #25
 800afd6:	f53f af2d 	bmi.w	800ae34 <_svfiprintf_r+0x28>
 800afda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800afdc:	e72c      	b.n	800ae38 <_svfiprintf_r+0x2c>
 800afde:	ab03      	add	r3, sp, #12
 800afe0:	9300      	str	r3, [sp, #0]
 800afe2:	462a      	mov	r2, r5
 800afe4:	4b05      	ldr	r3, [pc, #20]	@ (800affc <_svfiprintf_r+0x1f0>)
 800afe6:	a904      	add	r1, sp, #16
 800afe8:	4638      	mov	r0, r7
 800afea:	f7fc ff4f 	bl	8007e8c <_printf_i>
 800afee:	e7ed      	b.n	800afcc <_svfiprintf_r+0x1c0>
 800aff0:	0800d5f9 	.word	0x0800d5f9
 800aff4:	0800d603 	.word	0x0800d603
 800aff8:	0800795d 	.word	0x0800795d
 800affc:	0800ad55 	.word	0x0800ad55
 800b000:	0800d5ff 	.word	0x0800d5ff

0800b004 <__sflush_r>:
 800b004:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b00c:	0716      	lsls	r6, r2, #28
 800b00e:	4605      	mov	r5, r0
 800b010:	460c      	mov	r4, r1
 800b012:	d454      	bmi.n	800b0be <__sflush_r+0xba>
 800b014:	684b      	ldr	r3, [r1, #4]
 800b016:	2b00      	cmp	r3, #0
 800b018:	dc02      	bgt.n	800b020 <__sflush_r+0x1c>
 800b01a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	dd48      	ble.n	800b0b2 <__sflush_r+0xae>
 800b020:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b022:	2e00      	cmp	r6, #0
 800b024:	d045      	beq.n	800b0b2 <__sflush_r+0xae>
 800b026:	2300      	movs	r3, #0
 800b028:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b02c:	682f      	ldr	r7, [r5, #0]
 800b02e:	6a21      	ldr	r1, [r4, #32]
 800b030:	602b      	str	r3, [r5, #0]
 800b032:	d030      	beq.n	800b096 <__sflush_r+0x92>
 800b034:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b036:	89a3      	ldrh	r3, [r4, #12]
 800b038:	0759      	lsls	r1, r3, #29
 800b03a:	d505      	bpl.n	800b048 <__sflush_r+0x44>
 800b03c:	6863      	ldr	r3, [r4, #4]
 800b03e:	1ad2      	subs	r2, r2, r3
 800b040:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b042:	b10b      	cbz	r3, 800b048 <__sflush_r+0x44>
 800b044:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b046:	1ad2      	subs	r2, r2, r3
 800b048:	2300      	movs	r3, #0
 800b04a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b04c:	6a21      	ldr	r1, [r4, #32]
 800b04e:	4628      	mov	r0, r5
 800b050:	47b0      	blx	r6
 800b052:	1c43      	adds	r3, r0, #1
 800b054:	89a3      	ldrh	r3, [r4, #12]
 800b056:	d106      	bne.n	800b066 <__sflush_r+0x62>
 800b058:	6829      	ldr	r1, [r5, #0]
 800b05a:	291d      	cmp	r1, #29
 800b05c:	d82b      	bhi.n	800b0b6 <__sflush_r+0xb2>
 800b05e:	4a2a      	ldr	r2, [pc, #168]	@ (800b108 <__sflush_r+0x104>)
 800b060:	410a      	asrs	r2, r1
 800b062:	07d6      	lsls	r6, r2, #31
 800b064:	d427      	bmi.n	800b0b6 <__sflush_r+0xb2>
 800b066:	2200      	movs	r2, #0
 800b068:	6062      	str	r2, [r4, #4]
 800b06a:	04d9      	lsls	r1, r3, #19
 800b06c:	6922      	ldr	r2, [r4, #16]
 800b06e:	6022      	str	r2, [r4, #0]
 800b070:	d504      	bpl.n	800b07c <__sflush_r+0x78>
 800b072:	1c42      	adds	r2, r0, #1
 800b074:	d101      	bne.n	800b07a <__sflush_r+0x76>
 800b076:	682b      	ldr	r3, [r5, #0]
 800b078:	b903      	cbnz	r3, 800b07c <__sflush_r+0x78>
 800b07a:	6560      	str	r0, [r4, #84]	@ 0x54
 800b07c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b07e:	602f      	str	r7, [r5, #0]
 800b080:	b1b9      	cbz	r1, 800b0b2 <__sflush_r+0xae>
 800b082:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b086:	4299      	cmp	r1, r3
 800b088:	d002      	beq.n	800b090 <__sflush_r+0x8c>
 800b08a:	4628      	mov	r0, r5
 800b08c:	f7fe fa2c 	bl	80094e8 <_free_r>
 800b090:	2300      	movs	r3, #0
 800b092:	6363      	str	r3, [r4, #52]	@ 0x34
 800b094:	e00d      	b.n	800b0b2 <__sflush_r+0xae>
 800b096:	2301      	movs	r3, #1
 800b098:	4628      	mov	r0, r5
 800b09a:	47b0      	blx	r6
 800b09c:	4602      	mov	r2, r0
 800b09e:	1c50      	adds	r0, r2, #1
 800b0a0:	d1c9      	bne.n	800b036 <__sflush_r+0x32>
 800b0a2:	682b      	ldr	r3, [r5, #0]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d0c6      	beq.n	800b036 <__sflush_r+0x32>
 800b0a8:	2b1d      	cmp	r3, #29
 800b0aa:	d001      	beq.n	800b0b0 <__sflush_r+0xac>
 800b0ac:	2b16      	cmp	r3, #22
 800b0ae:	d11e      	bne.n	800b0ee <__sflush_r+0xea>
 800b0b0:	602f      	str	r7, [r5, #0]
 800b0b2:	2000      	movs	r0, #0
 800b0b4:	e022      	b.n	800b0fc <__sflush_r+0xf8>
 800b0b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0ba:	b21b      	sxth	r3, r3
 800b0bc:	e01b      	b.n	800b0f6 <__sflush_r+0xf2>
 800b0be:	690f      	ldr	r7, [r1, #16]
 800b0c0:	2f00      	cmp	r7, #0
 800b0c2:	d0f6      	beq.n	800b0b2 <__sflush_r+0xae>
 800b0c4:	0793      	lsls	r3, r2, #30
 800b0c6:	680e      	ldr	r6, [r1, #0]
 800b0c8:	bf08      	it	eq
 800b0ca:	694b      	ldreq	r3, [r1, #20]
 800b0cc:	600f      	str	r7, [r1, #0]
 800b0ce:	bf18      	it	ne
 800b0d0:	2300      	movne	r3, #0
 800b0d2:	eba6 0807 	sub.w	r8, r6, r7
 800b0d6:	608b      	str	r3, [r1, #8]
 800b0d8:	f1b8 0f00 	cmp.w	r8, #0
 800b0dc:	dde9      	ble.n	800b0b2 <__sflush_r+0xae>
 800b0de:	6a21      	ldr	r1, [r4, #32]
 800b0e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b0e2:	4643      	mov	r3, r8
 800b0e4:	463a      	mov	r2, r7
 800b0e6:	4628      	mov	r0, r5
 800b0e8:	47b0      	blx	r6
 800b0ea:	2800      	cmp	r0, #0
 800b0ec:	dc08      	bgt.n	800b100 <__sflush_r+0xfc>
 800b0ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0f6:	81a3      	strh	r3, [r4, #12]
 800b0f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b100:	4407      	add	r7, r0
 800b102:	eba8 0800 	sub.w	r8, r8, r0
 800b106:	e7e7      	b.n	800b0d8 <__sflush_r+0xd4>
 800b108:	dfbffffe 	.word	0xdfbffffe

0800b10c <_fflush_r>:
 800b10c:	b538      	push	{r3, r4, r5, lr}
 800b10e:	690b      	ldr	r3, [r1, #16]
 800b110:	4605      	mov	r5, r0
 800b112:	460c      	mov	r4, r1
 800b114:	b913      	cbnz	r3, 800b11c <_fflush_r+0x10>
 800b116:	2500      	movs	r5, #0
 800b118:	4628      	mov	r0, r5
 800b11a:	bd38      	pop	{r3, r4, r5, pc}
 800b11c:	b118      	cbz	r0, 800b126 <_fflush_r+0x1a>
 800b11e:	6a03      	ldr	r3, [r0, #32]
 800b120:	b90b      	cbnz	r3, 800b126 <_fflush_r+0x1a>
 800b122:	f7fd fa73 	bl	800860c <__sinit>
 800b126:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d0f3      	beq.n	800b116 <_fflush_r+0xa>
 800b12e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b130:	07d0      	lsls	r0, r2, #31
 800b132:	d404      	bmi.n	800b13e <_fflush_r+0x32>
 800b134:	0599      	lsls	r1, r3, #22
 800b136:	d402      	bmi.n	800b13e <_fflush_r+0x32>
 800b138:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b13a:	f7fd fb7e 	bl	800883a <__retarget_lock_acquire_recursive>
 800b13e:	4628      	mov	r0, r5
 800b140:	4621      	mov	r1, r4
 800b142:	f7ff ff5f 	bl	800b004 <__sflush_r>
 800b146:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b148:	07da      	lsls	r2, r3, #31
 800b14a:	4605      	mov	r5, r0
 800b14c:	d4e4      	bmi.n	800b118 <_fflush_r+0xc>
 800b14e:	89a3      	ldrh	r3, [r4, #12]
 800b150:	059b      	lsls	r3, r3, #22
 800b152:	d4e1      	bmi.n	800b118 <_fflush_r+0xc>
 800b154:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b156:	f7fd fb71 	bl	800883c <__retarget_lock_release_recursive>
 800b15a:	e7dd      	b.n	800b118 <_fflush_r+0xc>

0800b15c <memmove>:
 800b15c:	4288      	cmp	r0, r1
 800b15e:	b510      	push	{r4, lr}
 800b160:	eb01 0402 	add.w	r4, r1, r2
 800b164:	d902      	bls.n	800b16c <memmove+0x10>
 800b166:	4284      	cmp	r4, r0
 800b168:	4623      	mov	r3, r4
 800b16a:	d807      	bhi.n	800b17c <memmove+0x20>
 800b16c:	1e43      	subs	r3, r0, #1
 800b16e:	42a1      	cmp	r1, r4
 800b170:	d008      	beq.n	800b184 <memmove+0x28>
 800b172:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b176:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b17a:	e7f8      	b.n	800b16e <memmove+0x12>
 800b17c:	4402      	add	r2, r0
 800b17e:	4601      	mov	r1, r0
 800b180:	428a      	cmp	r2, r1
 800b182:	d100      	bne.n	800b186 <memmove+0x2a>
 800b184:	bd10      	pop	{r4, pc}
 800b186:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b18a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b18e:	e7f7      	b.n	800b180 <memmove+0x24>

0800b190 <strncmp>:
 800b190:	b510      	push	{r4, lr}
 800b192:	b16a      	cbz	r2, 800b1b0 <strncmp+0x20>
 800b194:	3901      	subs	r1, #1
 800b196:	1884      	adds	r4, r0, r2
 800b198:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b19c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d103      	bne.n	800b1ac <strncmp+0x1c>
 800b1a4:	42a0      	cmp	r0, r4
 800b1a6:	d001      	beq.n	800b1ac <strncmp+0x1c>
 800b1a8:	2a00      	cmp	r2, #0
 800b1aa:	d1f5      	bne.n	800b198 <strncmp+0x8>
 800b1ac:	1ad0      	subs	r0, r2, r3
 800b1ae:	bd10      	pop	{r4, pc}
 800b1b0:	4610      	mov	r0, r2
 800b1b2:	e7fc      	b.n	800b1ae <strncmp+0x1e>

0800b1b4 <_sbrk_r>:
 800b1b4:	b538      	push	{r3, r4, r5, lr}
 800b1b6:	4d06      	ldr	r5, [pc, #24]	@ (800b1d0 <_sbrk_r+0x1c>)
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	4608      	mov	r0, r1
 800b1be:	602b      	str	r3, [r5, #0]
 800b1c0:	f7f7 fe24 	bl	8002e0c <_sbrk>
 800b1c4:	1c43      	adds	r3, r0, #1
 800b1c6:	d102      	bne.n	800b1ce <_sbrk_r+0x1a>
 800b1c8:	682b      	ldr	r3, [r5, #0]
 800b1ca:	b103      	cbz	r3, 800b1ce <_sbrk_r+0x1a>
 800b1cc:	6023      	str	r3, [r4, #0]
 800b1ce:	bd38      	pop	{r3, r4, r5, pc}
 800b1d0:	20000704 	.word	0x20000704

0800b1d4 <memcpy>:
 800b1d4:	440a      	add	r2, r1
 800b1d6:	4291      	cmp	r1, r2
 800b1d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1dc:	d100      	bne.n	800b1e0 <memcpy+0xc>
 800b1de:	4770      	bx	lr
 800b1e0:	b510      	push	{r4, lr}
 800b1e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1ea:	4291      	cmp	r1, r2
 800b1ec:	d1f9      	bne.n	800b1e2 <memcpy+0xe>
 800b1ee:	bd10      	pop	{r4, pc}

0800b1f0 <nan>:
 800b1f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b1f8 <nan+0x8>
 800b1f4:	4770      	bx	lr
 800b1f6:	bf00      	nop
 800b1f8:	00000000 	.word	0x00000000
 800b1fc:	7ff80000 	.word	0x7ff80000

0800b200 <__assert_func>:
 800b200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b202:	4614      	mov	r4, r2
 800b204:	461a      	mov	r2, r3
 800b206:	4b09      	ldr	r3, [pc, #36]	@ (800b22c <__assert_func+0x2c>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	4605      	mov	r5, r0
 800b20c:	68d8      	ldr	r0, [r3, #12]
 800b20e:	b954      	cbnz	r4, 800b226 <__assert_func+0x26>
 800b210:	4b07      	ldr	r3, [pc, #28]	@ (800b230 <__assert_func+0x30>)
 800b212:	461c      	mov	r4, r3
 800b214:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b218:	9100      	str	r1, [sp, #0]
 800b21a:	462b      	mov	r3, r5
 800b21c:	4905      	ldr	r1, [pc, #20]	@ (800b234 <__assert_func+0x34>)
 800b21e:	f000 fba7 	bl	800b970 <fiprintf>
 800b222:	f000 fbb7 	bl	800b994 <abort>
 800b226:	4b04      	ldr	r3, [pc, #16]	@ (800b238 <__assert_func+0x38>)
 800b228:	e7f4      	b.n	800b214 <__assert_func+0x14>
 800b22a:	bf00      	nop
 800b22c:	2000009c 	.word	0x2000009c
 800b230:	0800d64d 	.word	0x0800d64d
 800b234:	0800d61f 	.word	0x0800d61f
 800b238:	0800d612 	.word	0x0800d612

0800b23c <_calloc_r>:
 800b23c:	b570      	push	{r4, r5, r6, lr}
 800b23e:	fba1 5402 	umull	r5, r4, r1, r2
 800b242:	b93c      	cbnz	r4, 800b254 <_calloc_r+0x18>
 800b244:	4629      	mov	r1, r5
 800b246:	f7fe f9c3 	bl	80095d0 <_malloc_r>
 800b24a:	4606      	mov	r6, r0
 800b24c:	b928      	cbnz	r0, 800b25a <_calloc_r+0x1e>
 800b24e:	2600      	movs	r6, #0
 800b250:	4630      	mov	r0, r6
 800b252:	bd70      	pop	{r4, r5, r6, pc}
 800b254:	220c      	movs	r2, #12
 800b256:	6002      	str	r2, [r0, #0]
 800b258:	e7f9      	b.n	800b24e <_calloc_r+0x12>
 800b25a:	462a      	mov	r2, r5
 800b25c:	4621      	mov	r1, r4
 800b25e:	f7fd fa6e 	bl	800873e <memset>
 800b262:	e7f5      	b.n	800b250 <_calloc_r+0x14>

0800b264 <rshift>:
 800b264:	6903      	ldr	r3, [r0, #16]
 800b266:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b26a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b26e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b272:	f100 0414 	add.w	r4, r0, #20
 800b276:	dd45      	ble.n	800b304 <rshift+0xa0>
 800b278:	f011 011f 	ands.w	r1, r1, #31
 800b27c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b280:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b284:	d10c      	bne.n	800b2a0 <rshift+0x3c>
 800b286:	f100 0710 	add.w	r7, r0, #16
 800b28a:	4629      	mov	r1, r5
 800b28c:	42b1      	cmp	r1, r6
 800b28e:	d334      	bcc.n	800b2fa <rshift+0x96>
 800b290:	1a9b      	subs	r3, r3, r2
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	1eea      	subs	r2, r5, #3
 800b296:	4296      	cmp	r6, r2
 800b298:	bf38      	it	cc
 800b29a:	2300      	movcc	r3, #0
 800b29c:	4423      	add	r3, r4
 800b29e:	e015      	b.n	800b2cc <rshift+0x68>
 800b2a0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b2a4:	f1c1 0820 	rsb	r8, r1, #32
 800b2a8:	40cf      	lsrs	r7, r1
 800b2aa:	f105 0e04 	add.w	lr, r5, #4
 800b2ae:	46a1      	mov	r9, r4
 800b2b0:	4576      	cmp	r6, lr
 800b2b2:	46f4      	mov	ip, lr
 800b2b4:	d815      	bhi.n	800b2e2 <rshift+0x7e>
 800b2b6:	1a9a      	subs	r2, r3, r2
 800b2b8:	0092      	lsls	r2, r2, #2
 800b2ba:	3a04      	subs	r2, #4
 800b2bc:	3501      	adds	r5, #1
 800b2be:	42ae      	cmp	r6, r5
 800b2c0:	bf38      	it	cc
 800b2c2:	2200      	movcc	r2, #0
 800b2c4:	18a3      	adds	r3, r4, r2
 800b2c6:	50a7      	str	r7, [r4, r2]
 800b2c8:	b107      	cbz	r7, 800b2cc <rshift+0x68>
 800b2ca:	3304      	adds	r3, #4
 800b2cc:	1b1a      	subs	r2, r3, r4
 800b2ce:	42a3      	cmp	r3, r4
 800b2d0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b2d4:	bf08      	it	eq
 800b2d6:	2300      	moveq	r3, #0
 800b2d8:	6102      	str	r2, [r0, #16]
 800b2da:	bf08      	it	eq
 800b2dc:	6143      	streq	r3, [r0, #20]
 800b2de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b2e2:	f8dc c000 	ldr.w	ip, [ip]
 800b2e6:	fa0c fc08 	lsl.w	ip, ip, r8
 800b2ea:	ea4c 0707 	orr.w	r7, ip, r7
 800b2ee:	f849 7b04 	str.w	r7, [r9], #4
 800b2f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b2f6:	40cf      	lsrs	r7, r1
 800b2f8:	e7da      	b.n	800b2b0 <rshift+0x4c>
 800b2fa:	f851 cb04 	ldr.w	ip, [r1], #4
 800b2fe:	f847 cf04 	str.w	ip, [r7, #4]!
 800b302:	e7c3      	b.n	800b28c <rshift+0x28>
 800b304:	4623      	mov	r3, r4
 800b306:	e7e1      	b.n	800b2cc <rshift+0x68>

0800b308 <__hexdig_fun>:
 800b308:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b30c:	2b09      	cmp	r3, #9
 800b30e:	d802      	bhi.n	800b316 <__hexdig_fun+0xe>
 800b310:	3820      	subs	r0, #32
 800b312:	b2c0      	uxtb	r0, r0
 800b314:	4770      	bx	lr
 800b316:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b31a:	2b05      	cmp	r3, #5
 800b31c:	d801      	bhi.n	800b322 <__hexdig_fun+0x1a>
 800b31e:	3847      	subs	r0, #71	@ 0x47
 800b320:	e7f7      	b.n	800b312 <__hexdig_fun+0xa>
 800b322:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b326:	2b05      	cmp	r3, #5
 800b328:	d801      	bhi.n	800b32e <__hexdig_fun+0x26>
 800b32a:	3827      	subs	r0, #39	@ 0x27
 800b32c:	e7f1      	b.n	800b312 <__hexdig_fun+0xa>
 800b32e:	2000      	movs	r0, #0
 800b330:	4770      	bx	lr
	...

0800b334 <__gethex>:
 800b334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b338:	b085      	sub	sp, #20
 800b33a:	468a      	mov	sl, r1
 800b33c:	9302      	str	r3, [sp, #8]
 800b33e:	680b      	ldr	r3, [r1, #0]
 800b340:	9001      	str	r0, [sp, #4]
 800b342:	4690      	mov	r8, r2
 800b344:	1c9c      	adds	r4, r3, #2
 800b346:	46a1      	mov	r9, r4
 800b348:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b34c:	2830      	cmp	r0, #48	@ 0x30
 800b34e:	d0fa      	beq.n	800b346 <__gethex+0x12>
 800b350:	eba9 0303 	sub.w	r3, r9, r3
 800b354:	f1a3 0b02 	sub.w	fp, r3, #2
 800b358:	f7ff ffd6 	bl	800b308 <__hexdig_fun>
 800b35c:	4605      	mov	r5, r0
 800b35e:	2800      	cmp	r0, #0
 800b360:	d168      	bne.n	800b434 <__gethex+0x100>
 800b362:	49a0      	ldr	r1, [pc, #640]	@ (800b5e4 <__gethex+0x2b0>)
 800b364:	2201      	movs	r2, #1
 800b366:	4648      	mov	r0, r9
 800b368:	f7ff ff12 	bl	800b190 <strncmp>
 800b36c:	4607      	mov	r7, r0
 800b36e:	2800      	cmp	r0, #0
 800b370:	d167      	bne.n	800b442 <__gethex+0x10e>
 800b372:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b376:	4626      	mov	r6, r4
 800b378:	f7ff ffc6 	bl	800b308 <__hexdig_fun>
 800b37c:	2800      	cmp	r0, #0
 800b37e:	d062      	beq.n	800b446 <__gethex+0x112>
 800b380:	4623      	mov	r3, r4
 800b382:	7818      	ldrb	r0, [r3, #0]
 800b384:	2830      	cmp	r0, #48	@ 0x30
 800b386:	4699      	mov	r9, r3
 800b388:	f103 0301 	add.w	r3, r3, #1
 800b38c:	d0f9      	beq.n	800b382 <__gethex+0x4e>
 800b38e:	f7ff ffbb 	bl	800b308 <__hexdig_fun>
 800b392:	fab0 f580 	clz	r5, r0
 800b396:	096d      	lsrs	r5, r5, #5
 800b398:	f04f 0b01 	mov.w	fp, #1
 800b39c:	464a      	mov	r2, r9
 800b39e:	4616      	mov	r6, r2
 800b3a0:	3201      	adds	r2, #1
 800b3a2:	7830      	ldrb	r0, [r6, #0]
 800b3a4:	f7ff ffb0 	bl	800b308 <__hexdig_fun>
 800b3a8:	2800      	cmp	r0, #0
 800b3aa:	d1f8      	bne.n	800b39e <__gethex+0x6a>
 800b3ac:	498d      	ldr	r1, [pc, #564]	@ (800b5e4 <__gethex+0x2b0>)
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	4630      	mov	r0, r6
 800b3b2:	f7ff feed 	bl	800b190 <strncmp>
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	d13f      	bne.n	800b43a <__gethex+0x106>
 800b3ba:	b944      	cbnz	r4, 800b3ce <__gethex+0x9a>
 800b3bc:	1c74      	adds	r4, r6, #1
 800b3be:	4622      	mov	r2, r4
 800b3c0:	4616      	mov	r6, r2
 800b3c2:	3201      	adds	r2, #1
 800b3c4:	7830      	ldrb	r0, [r6, #0]
 800b3c6:	f7ff ff9f 	bl	800b308 <__hexdig_fun>
 800b3ca:	2800      	cmp	r0, #0
 800b3cc:	d1f8      	bne.n	800b3c0 <__gethex+0x8c>
 800b3ce:	1ba4      	subs	r4, r4, r6
 800b3d0:	00a7      	lsls	r7, r4, #2
 800b3d2:	7833      	ldrb	r3, [r6, #0]
 800b3d4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b3d8:	2b50      	cmp	r3, #80	@ 0x50
 800b3da:	d13e      	bne.n	800b45a <__gethex+0x126>
 800b3dc:	7873      	ldrb	r3, [r6, #1]
 800b3de:	2b2b      	cmp	r3, #43	@ 0x2b
 800b3e0:	d033      	beq.n	800b44a <__gethex+0x116>
 800b3e2:	2b2d      	cmp	r3, #45	@ 0x2d
 800b3e4:	d034      	beq.n	800b450 <__gethex+0x11c>
 800b3e6:	1c71      	adds	r1, r6, #1
 800b3e8:	2400      	movs	r4, #0
 800b3ea:	7808      	ldrb	r0, [r1, #0]
 800b3ec:	f7ff ff8c 	bl	800b308 <__hexdig_fun>
 800b3f0:	1e43      	subs	r3, r0, #1
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	2b18      	cmp	r3, #24
 800b3f6:	d830      	bhi.n	800b45a <__gethex+0x126>
 800b3f8:	f1a0 0210 	sub.w	r2, r0, #16
 800b3fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b400:	f7ff ff82 	bl	800b308 <__hexdig_fun>
 800b404:	f100 3cff 	add.w	ip, r0, #4294967295
 800b408:	fa5f fc8c 	uxtb.w	ip, ip
 800b40c:	f1bc 0f18 	cmp.w	ip, #24
 800b410:	f04f 030a 	mov.w	r3, #10
 800b414:	d91e      	bls.n	800b454 <__gethex+0x120>
 800b416:	b104      	cbz	r4, 800b41a <__gethex+0xe6>
 800b418:	4252      	negs	r2, r2
 800b41a:	4417      	add	r7, r2
 800b41c:	f8ca 1000 	str.w	r1, [sl]
 800b420:	b1ed      	cbz	r5, 800b45e <__gethex+0x12a>
 800b422:	f1bb 0f00 	cmp.w	fp, #0
 800b426:	bf0c      	ite	eq
 800b428:	2506      	moveq	r5, #6
 800b42a:	2500      	movne	r5, #0
 800b42c:	4628      	mov	r0, r5
 800b42e:	b005      	add	sp, #20
 800b430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b434:	2500      	movs	r5, #0
 800b436:	462c      	mov	r4, r5
 800b438:	e7b0      	b.n	800b39c <__gethex+0x68>
 800b43a:	2c00      	cmp	r4, #0
 800b43c:	d1c7      	bne.n	800b3ce <__gethex+0x9a>
 800b43e:	4627      	mov	r7, r4
 800b440:	e7c7      	b.n	800b3d2 <__gethex+0x9e>
 800b442:	464e      	mov	r6, r9
 800b444:	462f      	mov	r7, r5
 800b446:	2501      	movs	r5, #1
 800b448:	e7c3      	b.n	800b3d2 <__gethex+0x9e>
 800b44a:	2400      	movs	r4, #0
 800b44c:	1cb1      	adds	r1, r6, #2
 800b44e:	e7cc      	b.n	800b3ea <__gethex+0xb6>
 800b450:	2401      	movs	r4, #1
 800b452:	e7fb      	b.n	800b44c <__gethex+0x118>
 800b454:	fb03 0002 	mla	r0, r3, r2, r0
 800b458:	e7ce      	b.n	800b3f8 <__gethex+0xc4>
 800b45a:	4631      	mov	r1, r6
 800b45c:	e7de      	b.n	800b41c <__gethex+0xe8>
 800b45e:	eba6 0309 	sub.w	r3, r6, r9
 800b462:	3b01      	subs	r3, #1
 800b464:	4629      	mov	r1, r5
 800b466:	2b07      	cmp	r3, #7
 800b468:	dc0a      	bgt.n	800b480 <__gethex+0x14c>
 800b46a:	9801      	ldr	r0, [sp, #4]
 800b46c:	f7fe f93c 	bl	80096e8 <_Balloc>
 800b470:	4604      	mov	r4, r0
 800b472:	b940      	cbnz	r0, 800b486 <__gethex+0x152>
 800b474:	4b5c      	ldr	r3, [pc, #368]	@ (800b5e8 <__gethex+0x2b4>)
 800b476:	4602      	mov	r2, r0
 800b478:	21e4      	movs	r1, #228	@ 0xe4
 800b47a:	485c      	ldr	r0, [pc, #368]	@ (800b5ec <__gethex+0x2b8>)
 800b47c:	f7ff fec0 	bl	800b200 <__assert_func>
 800b480:	3101      	adds	r1, #1
 800b482:	105b      	asrs	r3, r3, #1
 800b484:	e7ef      	b.n	800b466 <__gethex+0x132>
 800b486:	f100 0a14 	add.w	sl, r0, #20
 800b48a:	2300      	movs	r3, #0
 800b48c:	4655      	mov	r5, sl
 800b48e:	469b      	mov	fp, r3
 800b490:	45b1      	cmp	r9, r6
 800b492:	d337      	bcc.n	800b504 <__gethex+0x1d0>
 800b494:	f845 bb04 	str.w	fp, [r5], #4
 800b498:	eba5 050a 	sub.w	r5, r5, sl
 800b49c:	10ad      	asrs	r5, r5, #2
 800b49e:	6125      	str	r5, [r4, #16]
 800b4a0:	4658      	mov	r0, fp
 800b4a2:	f7fe fa13 	bl	80098cc <__hi0bits>
 800b4a6:	016d      	lsls	r5, r5, #5
 800b4a8:	f8d8 6000 	ldr.w	r6, [r8]
 800b4ac:	1a2d      	subs	r5, r5, r0
 800b4ae:	42b5      	cmp	r5, r6
 800b4b0:	dd54      	ble.n	800b55c <__gethex+0x228>
 800b4b2:	1bad      	subs	r5, r5, r6
 800b4b4:	4629      	mov	r1, r5
 800b4b6:	4620      	mov	r0, r4
 800b4b8:	f7fe fda7 	bl	800a00a <__any_on>
 800b4bc:	4681      	mov	r9, r0
 800b4be:	b178      	cbz	r0, 800b4e0 <__gethex+0x1ac>
 800b4c0:	1e6b      	subs	r3, r5, #1
 800b4c2:	1159      	asrs	r1, r3, #5
 800b4c4:	f003 021f 	and.w	r2, r3, #31
 800b4c8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b4cc:	f04f 0901 	mov.w	r9, #1
 800b4d0:	fa09 f202 	lsl.w	r2, r9, r2
 800b4d4:	420a      	tst	r2, r1
 800b4d6:	d003      	beq.n	800b4e0 <__gethex+0x1ac>
 800b4d8:	454b      	cmp	r3, r9
 800b4da:	dc36      	bgt.n	800b54a <__gethex+0x216>
 800b4dc:	f04f 0902 	mov.w	r9, #2
 800b4e0:	4629      	mov	r1, r5
 800b4e2:	4620      	mov	r0, r4
 800b4e4:	f7ff febe 	bl	800b264 <rshift>
 800b4e8:	442f      	add	r7, r5
 800b4ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b4ee:	42bb      	cmp	r3, r7
 800b4f0:	da42      	bge.n	800b578 <__gethex+0x244>
 800b4f2:	9801      	ldr	r0, [sp, #4]
 800b4f4:	4621      	mov	r1, r4
 800b4f6:	f7fe f937 	bl	8009768 <_Bfree>
 800b4fa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	6013      	str	r3, [r2, #0]
 800b500:	25a3      	movs	r5, #163	@ 0xa3
 800b502:	e793      	b.n	800b42c <__gethex+0xf8>
 800b504:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b508:	2a2e      	cmp	r2, #46	@ 0x2e
 800b50a:	d012      	beq.n	800b532 <__gethex+0x1fe>
 800b50c:	2b20      	cmp	r3, #32
 800b50e:	d104      	bne.n	800b51a <__gethex+0x1e6>
 800b510:	f845 bb04 	str.w	fp, [r5], #4
 800b514:	f04f 0b00 	mov.w	fp, #0
 800b518:	465b      	mov	r3, fp
 800b51a:	7830      	ldrb	r0, [r6, #0]
 800b51c:	9303      	str	r3, [sp, #12]
 800b51e:	f7ff fef3 	bl	800b308 <__hexdig_fun>
 800b522:	9b03      	ldr	r3, [sp, #12]
 800b524:	f000 000f 	and.w	r0, r0, #15
 800b528:	4098      	lsls	r0, r3
 800b52a:	ea4b 0b00 	orr.w	fp, fp, r0
 800b52e:	3304      	adds	r3, #4
 800b530:	e7ae      	b.n	800b490 <__gethex+0x15c>
 800b532:	45b1      	cmp	r9, r6
 800b534:	d8ea      	bhi.n	800b50c <__gethex+0x1d8>
 800b536:	492b      	ldr	r1, [pc, #172]	@ (800b5e4 <__gethex+0x2b0>)
 800b538:	9303      	str	r3, [sp, #12]
 800b53a:	2201      	movs	r2, #1
 800b53c:	4630      	mov	r0, r6
 800b53e:	f7ff fe27 	bl	800b190 <strncmp>
 800b542:	9b03      	ldr	r3, [sp, #12]
 800b544:	2800      	cmp	r0, #0
 800b546:	d1e1      	bne.n	800b50c <__gethex+0x1d8>
 800b548:	e7a2      	b.n	800b490 <__gethex+0x15c>
 800b54a:	1ea9      	subs	r1, r5, #2
 800b54c:	4620      	mov	r0, r4
 800b54e:	f7fe fd5c 	bl	800a00a <__any_on>
 800b552:	2800      	cmp	r0, #0
 800b554:	d0c2      	beq.n	800b4dc <__gethex+0x1a8>
 800b556:	f04f 0903 	mov.w	r9, #3
 800b55a:	e7c1      	b.n	800b4e0 <__gethex+0x1ac>
 800b55c:	da09      	bge.n	800b572 <__gethex+0x23e>
 800b55e:	1b75      	subs	r5, r6, r5
 800b560:	4621      	mov	r1, r4
 800b562:	9801      	ldr	r0, [sp, #4]
 800b564:	462a      	mov	r2, r5
 800b566:	f7fe fb17 	bl	8009b98 <__lshift>
 800b56a:	1b7f      	subs	r7, r7, r5
 800b56c:	4604      	mov	r4, r0
 800b56e:	f100 0a14 	add.w	sl, r0, #20
 800b572:	f04f 0900 	mov.w	r9, #0
 800b576:	e7b8      	b.n	800b4ea <__gethex+0x1b6>
 800b578:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b57c:	42bd      	cmp	r5, r7
 800b57e:	dd6f      	ble.n	800b660 <__gethex+0x32c>
 800b580:	1bed      	subs	r5, r5, r7
 800b582:	42ae      	cmp	r6, r5
 800b584:	dc34      	bgt.n	800b5f0 <__gethex+0x2bc>
 800b586:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b58a:	2b02      	cmp	r3, #2
 800b58c:	d022      	beq.n	800b5d4 <__gethex+0x2a0>
 800b58e:	2b03      	cmp	r3, #3
 800b590:	d024      	beq.n	800b5dc <__gethex+0x2a8>
 800b592:	2b01      	cmp	r3, #1
 800b594:	d115      	bne.n	800b5c2 <__gethex+0x28e>
 800b596:	42ae      	cmp	r6, r5
 800b598:	d113      	bne.n	800b5c2 <__gethex+0x28e>
 800b59a:	2e01      	cmp	r6, #1
 800b59c:	d10b      	bne.n	800b5b6 <__gethex+0x282>
 800b59e:	9a02      	ldr	r2, [sp, #8]
 800b5a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b5a4:	6013      	str	r3, [r2, #0]
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	6123      	str	r3, [r4, #16]
 800b5aa:	f8ca 3000 	str.w	r3, [sl]
 800b5ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b5b0:	2562      	movs	r5, #98	@ 0x62
 800b5b2:	601c      	str	r4, [r3, #0]
 800b5b4:	e73a      	b.n	800b42c <__gethex+0xf8>
 800b5b6:	1e71      	subs	r1, r6, #1
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	f7fe fd26 	bl	800a00a <__any_on>
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	d1ed      	bne.n	800b59e <__gethex+0x26a>
 800b5c2:	9801      	ldr	r0, [sp, #4]
 800b5c4:	4621      	mov	r1, r4
 800b5c6:	f7fe f8cf 	bl	8009768 <_Bfree>
 800b5ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	6013      	str	r3, [r2, #0]
 800b5d0:	2550      	movs	r5, #80	@ 0x50
 800b5d2:	e72b      	b.n	800b42c <__gethex+0xf8>
 800b5d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d1f3      	bne.n	800b5c2 <__gethex+0x28e>
 800b5da:	e7e0      	b.n	800b59e <__gethex+0x26a>
 800b5dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d1dd      	bne.n	800b59e <__gethex+0x26a>
 800b5e2:	e7ee      	b.n	800b5c2 <__gethex+0x28e>
 800b5e4:	0800d4a0 	.word	0x0800d4a0
 800b5e8:	0800d339 	.word	0x0800d339
 800b5ec:	0800d64e 	.word	0x0800d64e
 800b5f0:	1e6f      	subs	r7, r5, #1
 800b5f2:	f1b9 0f00 	cmp.w	r9, #0
 800b5f6:	d130      	bne.n	800b65a <__gethex+0x326>
 800b5f8:	b127      	cbz	r7, 800b604 <__gethex+0x2d0>
 800b5fa:	4639      	mov	r1, r7
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	f7fe fd04 	bl	800a00a <__any_on>
 800b602:	4681      	mov	r9, r0
 800b604:	117a      	asrs	r2, r7, #5
 800b606:	2301      	movs	r3, #1
 800b608:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b60c:	f007 071f 	and.w	r7, r7, #31
 800b610:	40bb      	lsls	r3, r7
 800b612:	4213      	tst	r3, r2
 800b614:	4629      	mov	r1, r5
 800b616:	4620      	mov	r0, r4
 800b618:	bf18      	it	ne
 800b61a:	f049 0902 	orrne.w	r9, r9, #2
 800b61e:	f7ff fe21 	bl	800b264 <rshift>
 800b622:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b626:	1b76      	subs	r6, r6, r5
 800b628:	2502      	movs	r5, #2
 800b62a:	f1b9 0f00 	cmp.w	r9, #0
 800b62e:	d047      	beq.n	800b6c0 <__gethex+0x38c>
 800b630:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b634:	2b02      	cmp	r3, #2
 800b636:	d015      	beq.n	800b664 <__gethex+0x330>
 800b638:	2b03      	cmp	r3, #3
 800b63a:	d017      	beq.n	800b66c <__gethex+0x338>
 800b63c:	2b01      	cmp	r3, #1
 800b63e:	d109      	bne.n	800b654 <__gethex+0x320>
 800b640:	f019 0f02 	tst.w	r9, #2
 800b644:	d006      	beq.n	800b654 <__gethex+0x320>
 800b646:	f8da 3000 	ldr.w	r3, [sl]
 800b64a:	ea49 0903 	orr.w	r9, r9, r3
 800b64e:	f019 0f01 	tst.w	r9, #1
 800b652:	d10e      	bne.n	800b672 <__gethex+0x33e>
 800b654:	f045 0510 	orr.w	r5, r5, #16
 800b658:	e032      	b.n	800b6c0 <__gethex+0x38c>
 800b65a:	f04f 0901 	mov.w	r9, #1
 800b65e:	e7d1      	b.n	800b604 <__gethex+0x2d0>
 800b660:	2501      	movs	r5, #1
 800b662:	e7e2      	b.n	800b62a <__gethex+0x2f6>
 800b664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b666:	f1c3 0301 	rsb	r3, r3, #1
 800b66a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b66c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d0f0      	beq.n	800b654 <__gethex+0x320>
 800b672:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b676:	f104 0314 	add.w	r3, r4, #20
 800b67a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b67e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b682:	f04f 0c00 	mov.w	ip, #0
 800b686:	4618      	mov	r0, r3
 800b688:	f853 2b04 	ldr.w	r2, [r3], #4
 800b68c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b690:	d01b      	beq.n	800b6ca <__gethex+0x396>
 800b692:	3201      	adds	r2, #1
 800b694:	6002      	str	r2, [r0, #0]
 800b696:	2d02      	cmp	r5, #2
 800b698:	f104 0314 	add.w	r3, r4, #20
 800b69c:	d13c      	bne.n	800b718 <__gethex+0x3e4>
 800b69e:	f8d8 2000 	ldr.w	r2, [r8]
 800b6a2:	3a01      	subs	r2, #1
 800b6a4:	42b2      	cmp	r2, r6
 800b6a6:	d109      	bne.n	800b6bc <__gethex+0x388>
 800b6a8:	1171      	asrs	r1, r6, #5
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b6b0:	f006 061f 	and.w	r6, r6, #31
 800b6b4:	fa02 f606 	lsl.w	r6, r2, r6
 800b6b8:	421e      	tst	r6, r3
 800b6ba:	d13a      	bne.n	800b732 <__gethex+0x3fe>
 800b6bc:	f045 0520 	orr.w	r5, r5, #32
 800b6c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6c2:	601c      	str	r4, [r3, #0]
 800b6c4:	9b02      	ldr	r3, [sp, #8]
 800b6c6:	601f      	str	r7, [r3, #0]
 800b6c8:	e6b0      	b.n	800b42c <__gethex+0xf8>
 800b6ca:	4299      	cmp	r1, r3
 800b6cc:	f843 cc04 	str.w	ip, [r3, #-4]
 800b6d0:	d8d9      	bhi.n	800b686 <__gethex+0x352>
 800b6d2:	68a3      	ldr	r3, [r4, #8]
 800b6d4:	459b      	cmp	fp, r3
 800b6d6:	db17      	blt.n	800b708 <__gethex+0x3d4>
 800b6d8:	6861      	ldr	r1, [r4, #4]
 800b6da:	9801      	ldr	r0, [sp, #4]
 800b6dc:	3101      	adds	r1, #1
 800b6de:	f7fe f803 	bl	80096e8 <_Balloc>
 800b6e2:	4681      	mov	r9, r0
 800b6e4:	b918      	cbnz	r0, 800b6ee <__gethex+0x3ba>
 800b6e6:	4b1a      	ldr	r3, [pc, #104]	@ (800b750 <__gethex+0x41c>)
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	2184      	movs	r1, #132	@ 0x84
 800b6ec:	e6c5      	b.n	800b47a <__gethex+0x146>
 800b6ee:	6922      	ldr	r2, [r4, #16]
 800b6f0:	3202      	adds	r2, #2
 800b6f2:	f104 010c 	add.w	r1, r4, #12
 800b6f6:	0092      	lsls	r2, r2, #2
 800b6f8:	300c      	adds	r0, #12
 800b6fa:	f7ff fd6b 	bl	800b1d4 <memcpy>
 800b6fe:	4621      	mov	r1, r4
 800b700:	9801      	ldr	r0, [sp, #4]
 800b702:	f7fe f831 	bl	8009768 <_Bfree>
 800b706:	464c      	mov	r4, r9
 800b708:	6923      	ldr	r3, [r4, #16]
 800b70a:	1c5a      	adds	r2, r3, #1
 800b70c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b710:	6122      	str	r2, [r4, #16]
 800b712:	2201      	movs	r2, #1
 800b714:	615a      	str	r2, [r3, #20]
 800b716:	e7be      	b.n	800b696 <__gethex+0x362>
 800b718:	6922      	ldr	r2, [r4, #16]
 800b71a:	455a      	cmp	r2, fp
 800b71c:	dd0b      	ble.n	800b736 <__gethex+0x402>
 800b71e:	2101      	movs	r1, #1
 800b720:	4620      	mov	r0, r4
 800b722:	f7ff fd9f 	bl	800b264 <rshift>
 800b726:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b72a:	3701      	adds	r7, #1
 800b72c:	42bb      	cmp	r3, r7
 800b72e:	f6ff aee0 	blt.w	800b4f2 <__gethex+0x1be>
 800b732:	2501      	movs	r5, #1
 800b734:	e7c2      	b.n	800b6bc <__gethex+0x388>
 800b736:	f016 061f 	ands.w	r6, r6, #31
 800b73a:	d0fa      	beq.n	800b732 <__gethex+0x3fe>
 800b73c:	4453      	add	r3, sl
 800b73e:	f1c6 0620 	rsb	r6, r6, #32
 800b742:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b746:	f7fe f8c1 	bl	80098cc <__hi0bits>
 800b74a:	42b0      	cmp	r0, r6
 800b74c:	dbe7      	blt.n	800b71e <__gethex+0x3ea>
 800b74e:	e7f0      	b.n	800b732 <__gethex+0x3fe>
 800b750:	0800d339 	.word	0x0800d339

0800b754 <L_shift>:
 800b754:	f1c2 0208 	rsb	r2, r2, #8
 800b758:	0092      	lsls	r2, r2, #2
 800b75a:	b570      	push	{r4, r5, r6, lr}
 800b75c:	f1c2 0620 	rsb	r6, r2, #32
 800b760:	6843      	ldr	r3, [r0, #4]
 800b762:	6804      	ldr	r4, [r0, #0]
 800b764:	fa03 f506 	lsl.w	r5, r3, r6
 800b768:	432c      	orrs	r4, r5
 800b76a:	40d3      	lsrs	r3, r2
 800b76c:	6004      	str	r4, [r0, #0]
 800b76e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b772:	4288      	cmp	r0, r1
 800b774:	d3f4      	bcc.n	800b760 <L_shift+0xc>
 800b776:	bd70      	pop	{r4, r5, r6, pc}

0800b778 <__match>:
 800b778:	b530      	push	{r4, r5, lr}
 800b77a:	6803      	ldr	r3, [r0, #0]
 800b77c:	3301      	adds	r3, #1
 800b77e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b782:	b914      	cbnz	r4, 800b78a <__match+0x12>
 800b784:	6003      	str	r3, [r0, #0]
 800b786:	2001      	movs	r0, #1
 800b788:	bd30      	pop	{r4, r5, pc}
 800b78a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b78e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b792:	2d19      	cmp	r5, #25
 800b794:	bf98      	it	ls
 800b796:	3220      	addls	r2, #32
 800b798:	42a2      	cmp	r2, r4
 800b79a:	d0f0      	beq.n	800b77e <__match+0x6>
 800b79c:	2000      	movs	r0, #0
 800b79e:	e7f3      	b.n	800b788 <__match+0x10>

0800b7a0 <__hexnan>:
 800b7a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7a4:	680b      	ldr	r3, [r1, #0]
 800b7a6:	6801      	ldr	r1, [r0, #0]
 800b7a8:	115e      	asrs	r6, r3, #5
 800b7aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b7ae:	f013 031f 	ands.w	r3, r3, #31
 800b7b2:	b087      	sub	sp, #28
 800b7b4:	bf18      	it	ne
 800b7b6:	3604      	addne	r6, #4
 800b7b8:	2500      	movs	r5, #0
 800b7ba:	1f37      	subs	r7, r6, #4
 800b7bc:	4682      	mov	sl, r0
 800b7be:	4690      	mov	r8, r2
 800b7c0:	9301      	str	r3, [sp, #4]
 800b7c2:	f846 5c04 	str.w	r5, [r6, #-4]
 800b7c6:	46b9      	mov	r9, r7
 800b7c8:	463c      	mov	r4, r7
 800b7ca:	9502      	str	r5, [sp, #8]
 800b7cc:	46ab      	mov	fp, r5
 800b7ce:	784a      	ldrb	r2, [r1, #1]
 800b7d0:	1c4b      	adds	r3, r1, #1
 800b7d2:	9303      	str	r3, [sp, #12]
 800b7d4:	b342      	cbz	r2, 800b828 <__hexnan+0x88>
 800b7d6:	4610      	mov	r0, r2
 800b7d8:	9105      	str	r1, [sp, #20]
 800b7da:	9204      	str	r2, [sp, #16]
 800b7dc:	f7ff fd94 	bl	800b308 <__hexdig_fun>
 800b7e0:	2800      	cmp	r0, #0
 800b7e2:	d151      	bne.n	800b888 <__hexnan+0xe8>
 800b7e4:	9a04      	ldr	r2, [sp, #16]
 800b7e6:	9905      	ldr	r1, [sp, #20]
 800b7e8:	2a20      	cmp	r2, #32
 800b7ea:	d818      	bhi.n	800b81e <__hexnan+0x7e>
 800b7ec:	9b02      	ldr	r3, [sp, #8]
 800b7ee:	459b      	cmp	fp, r3
 800b7f0:	dd13      	ble.n	800b81a <__hexnan+0x7a>
 800b7f2:	454c      	cmp	r4, r9
 800b7f4:	d206      	bcs.n	800b804 <__hexnan+0x64>
 800b7f6:	2d07      	cmp	r5, #7
 800b7f8:	dc04      	bgt.n	800b804 <__hexnan+0x64>
 800b7fa:	462a      	mov	r2, r5
 800b7fc:	4649      	mov	r1, r9
 800b7fe:	4620      	mov	r0, r4
 800b800:	f7ff ffa8 	bl	800b754 <L_shift>
 800b804:	4544      	cmp	r4, r8
 800b806:	d952      	bls.n	800b8ae <__hexnan+0x10e>
 800b808:	2300      	movs	r3, #0
 800b80a:	f1a4 0904 	sub.w	r9, r4, #4
 800b80e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b812:	f8cd b008 	str.w	fp, [sp, #8]
 800b816:	464c      	mov	r4, r9
 800b818:	461d      	mov	r5, r3
 800b81a:	9903      	ldr	r1, [sp, #12]
 800b81c:	e7d7      	b.n	800b7ce <__hexnan+0x2e>
 800b81e:	2a29      	cmp	r2, #41	@ 0x29
 800b820:	d157      	bne.n	800b8d2 <__hexnan+0x132>
 800b822:	3102      	adds	r1, #2
 800b824:	f8ca 1000 	str.w	r1, [sl]
 800b828:	f1bb 0f00 	cmp.w	fp, #0
 800b82c:	d051      	beq.n	800b8d2 <__hexnan+0x132>
 800b82e:	454c      	cmp	r4, r9
 800b830:	d206      	bcs.n	800b840 <__hexnan+0xa0>
 800b832:	2d07      	cmp	r5, #7
 800b834:	dc04      	bgt.n	800b840 <__hexnan+0xa0>
 800b836:	462a      	mov	r2, r5
 800b838:	4649      	mov	r1, r9
 800b83a:	4620      	mov	r0, r4
 800b83c:	f7ff ff8a 	bl	800b754 <L_shift>
 800b840:	4544      	cmp	r4, r8
 800b842:	d936      	bls.n	800b8b2 <__hexnan+0x112>
 800b844:	f1a8 0204 	sub.w	r2, r8, #4
 800b848:	4623      	mov	r3, r4
 800b84a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b84e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b852:	429f      	cmp	r7, r3
 800b854:	d2f9      	bcs.n	800b84a <__hexnan+0xaa>
 800b856:	1b3b      	subs	r3, r7, r4
 800b858:	f023 0303 	bic.w	r3, r3, #3
 800b85c:	3304      	adds	r3, #4
 800b85e:	3401      	adds	r4, #1
 800b860:	3e03      	subs	r6, #3
 800b862:	42b4      	cmp	r4, r6
 800b864:	bf88      	it	hi
 800b866:	2304      	movhi	r3, #4
 800b868:	4443      	add	r3, r8
 800b86a:	2200      	movs	r2, #0
 800b86c:	f843 2b04 	str.w	r2, [r3], #4
 800b870:	429f      	cmp	r7, r3
 800b872:	d2fb      	bcs.n	800b86c <__hexnan+0xcc>
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	b91b      	cbnz	r3, 800b880 <__hexnan+0xe0>
 800b878:	4547      	cmp	r7, r8
 800b87a:	d128      	bne.n	800b8ce <__hexnan+0x12e>
 800b87c:	2301      	movs	r3, #1
 800b87e:	603b      	str	r3, [r7, #0]
 800b880:	2005      	movs	r0, #5
 800b882:	b007      	add	sp, #28
 800b884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b888:	3501      	adds	r5, #1
 800b88a:	2d08      	cmp	r5, #8
 800b88c:	f10b 0b01 	add.w	fp, fp, #1
 800b890:	dd06      	ble.n	800b8a0 <__hexnan+0x100>
 800b892:	4544      	cmp	r4, r8
 800b894:	d9c1      	bls.n	800b81a <__hexnan+0x7a>
 800b896:	2300      	movs	r3, #0
 800b898:	f844 3c04 	str.w	r3, [r4, #-4]
 800b89c:	2501      	movs	r5, #1
 800b89e:	3c04      	subs	r4, #4
 800b8a0:	6822      	ldr	r2, [r4, #0]
 800b8a2:	f000 000f 	and.w	r0, r0, #15
 800b8a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b8aa:	6020      	str	r0, [r4, #0]
 800b8ac:	e7b5      	b.n	800b81a <__hexnan+0x7a>
 800b8ae:	2508      	movs	r5, #8
 800b8b0:	e7b3      	b.n	800b81a <__hexnan+0x7a>
 800b8b2:	9b01      	ldr	r3, [sp, #4]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d0dd      	beq.n	800b874 <__hexnan+0xd4>
 800b8b8:	f1c3 0320 	rsb	r3, r3, #32
 800b8bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b8c0:	40da      	lsrs	r2, r3
 800b8c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b8c6:	4013      	ands	r3, r2
 800b8c8:	f846 3c04 	str.w	r3, [r6, #-4]
 800b8cc:	e7d2      	b.n	800b874 <__hexnan+0xd4>
 800b8ce:	3f04      	subs	r7, #4
 800b8d0:	e7d0      	b.n	800b874 <__hexnan+0xd4>
 800b8d2:	2004      	movs	r0, #4
 800b8d4:	e7d5      	b.n	800b882 <__hexnan+0xe2>

0800b8d6 <__ascii_mbtowc>:
 800b8d6:	b082      	sub	sp, #8
 800b8d8:	b901      	cbnz	r1, 800b8dc <__ascii_mbtowc+0x6>
 800b8da:	a901      	add	r1, sp, #4
 800b8dc:	b142      	cbz	r2, 800b8f0 <__ascii_mbtowc+0x1a>
 800b8de:	b14b      	cbz	r3, 800b8f4 <__ascii_mbtowc+0x1e>
 800b8e0:	7813      	ldrb	r3, [r2, #0]
 800b8e2:	600b      	str	r3, [r1, #0]
 800b8e4:	7812      	ldrb	r2, [r2, #0]
 800b8e6:	1e10      	subs	r0, r2, #0
 800b8e8:	bf18      	it	ne
 800b8ea:	2001      	movne	r0, #1
 800b8ec:	b002      	add	sp, #8
 800b8ee:	4770      	bx	lr
 800b8f0:	4610      	mov	r0, r2
 800b8f2:	e7fb      	b.n	800b8ec <__ascii_mbtowc+0x16>
 800b8f4:	f06f 0001 	mvn.w	r0, #1
 800b8f8:	e7f8      	b.n	800b8ec <__ascii_mbtowc+0x16>

0800b8fa <_realloc_r>:
 800b8fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8fe:	4680      	mov	r8, r0
 800b900:	4615      	mov	r5, r2
 800b902:	460c      	mov	r4, r1
 800b904:	b921      	cbnz	r1, 800b910 <_realloc_r+0x16>
 800b906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b90a:	4611      	mov	r1, r2
 800b90c:	f7fd be60 	b.w	80095d0 <_malloc_r>
 800b910:	b92a      	cbnz	r2, 800b91e <_realloc_r+0x24>
 800b912:	f7fd fde9 	bl	80094e8 <_free_r>
 800b916:	2400      	movs	r4, #0
 800b918:	4620      	mov	r0, r4
 800b91a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b91e:	f000 f840 	bl	800b9a2 <_malloc_usable_size_r>
 800b922:	4285      	cmp	r5, r0
 800b924:	4606      	mov	r6, r0
 800b926:	d802      	bhi.n	800b92e <_realloc_r+0x34>
 800b928:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b92c:	d8f4      	bhi.n	800b918 <_realloc_r+0x1e>
 800b92e:	4629      	mov	r1, r5
 800b930:	4640      	mov	r0, r8
 800b932:	f7fd fe4d 	bl	80095d0 <_malloc_r>
 800b936:	4607      	mov	r7, r0
 800b938:	2800      	cmp	r0, #0
 800b93a:	d0ec      	beq.n	800b916 <_realloc_r+0x1c>
 800b93c:	42b5      	cmp	r5, r6
 800b93e:	462a      	mov	r2, r5
 800b940:	4621      	mov	r1, r4
 800b942:	bf28      	it	cs
 800b944:	4632      	movcs	r2, r6
 800b946:	f7ff fc45 	bl	800b1d4 <memcpy>
 800b94a:	4621      	mov	r1, r4
 800b94c:	4640      	mov	r0, r8
 800b94e:	f7fd fdcb 	bl	80094e8 <_free_r>
 800b952:	463c      	mov	r4, r7
 800b954:	e7e0      	b.n	800b918 <_realloc_r+0x1e>

0800b956 <__ascii_wctomb>:
 800b956:	4603      	mov	r3, r0
 800b958:	4608      	mov	r0, r1
 800b95a:	b141      	cbz	r1, 800b96e <__ascii_wctomb+0x18>
 800b95c:	2aff      	cmp	r2, #255	@ 0xff
 800b95e:	d904      	bls.n	800b96a <__ascii_wctomb+0x14>
 800b960:	228a      	movs	r2, #138	@ 0x8a
 800b962:	601a      	str	r2, [r3, #0]
 800b964:	f04f 30ff 	mov.w	r0, #4294967295
 800b968:	4770      	bx	lr
 800b96a:	700a      	strb	r2, [r1, #0]
 800b96c:	2001      	movs	r0, #1
 800b96e:	4770      	bx	lr

0800b970 <fiprintf>:
 800b970:	b40e      	push	{r1, r2, r3}
 800b972:	b503      	push	{r0, r1, lr}
 800b974:	4601      	mov	r1, r0
 800b976:	ab03      	add	r3, sp, #12
 800b978:	4805      	ldr	r0, [pc, #20]	@ (800b990 <fiprintf+0x20>)
 800b97a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b97e:	6800      	ldr	r0, [r0, #0]
 800b980:	9301      	str	r3, [sp, #4]
 800b982:	f000 f83f 	bl	800ba04 <_vfiprintf_r>
 800b986:	b002      	add	sp, #8
 800b988:	f85d eb04 	ldr.w	lr, [sp], #4
 800b98c:	b003      	add	sp, #12
 800b98e:	4770      	bx	lr
 800b990:	2000009c 	.word	0x2000009c

0800b994 <abort>:
 800b994:	b508      	push	{r3, lr}
 800b996:	2006      	movs	r0, #6
 800b998:	f000 fa08 	bl	800bdac <raise>
 800b99c:	2001      	movs	r0, #1
 800b99e:	f7f7 f9bd 	bl	8002d1c <_exit>

0800b9a2 <_malloc_usable_size_r>:
 800b9a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9a6:	1f18      	subs	r0, r3, #4
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	bfbc      	itt	lt
 800b9ac:	580b      	ldrlt	r3, [r1, r0]
 800b9ae:	18c0      	addlt	r0, r0, r3
 800b9b0:	4770      	bx	lr

0800b9b2 <__sfputc_r>:
 800b9b2:	6893      	ldr	r3, [r2, #8]
 800b9b4:	3b01      	subs	r3, #1
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	b410      	push	{r4}
 800b9ba:	6093      	str	r3, [r2, #8]
 800b9bc:	da08      	bge.n	800b9d0 <__sfputc_r+0x1e>
 800b9be:	6994      	ldr	r4, [r2, #24]
 800b9c0:	42a3      	cmp	r3, r4
 800b9c2:	db01      	blt.n	800b9c8 <__sfputc_r+0x16>
 800b9c4:	290a      	cmp	r1, #10
 800b9c6:	d103      	bne.n	800b9d0 <__sfputc_r+0x1e>
 800b9c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9cc:	f000 b932 	b.w	800bc34 <__swbuf_r>
 800b9d0:	6813      	ldr	r3, [r2, #0]
 800b9d2:	1c58      	adds	r0, r3, #1
 800b9d4:	6010      	str	r0, [r2, #0]
 800b9d6:	7019      	strb	r1, [r3, #0]
 800b9d8:	4608      	mov	r0, r1
 800b9da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9de:	4770      	bx	lr

0800b9e0 <__sfputs_r>:
 800b9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9e2:	4606      	mov	r6, r0
 800b9e4:	460f      	mov	r7, r1
 800b9e6:	4614      	mov	r4, r2
 800b9e8:	18d5      	adds	r5, r2, r3
 800b9ea:	42ac      	cmp	r4, r5
 800b9ec:	d101      	bne.n	800b9f2 <__sfputs_r+0x12>
 800b9ee:	2000      	movs	r0, #0
 800b9f0:	e007      	b.n	800ba02 <__sfputs_r+0x22>
 800b9f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9f6:	463a      	mov	r2, r7
 800b9f8:	4630      	mov	r0, r6
 800b9fa:	f7ff ffda 	bl	800b9b2 <__sfputc_r>
 800b9fe:	1c43      	adds	r3, r0, #1
 800ba00:	d1f3      	bne.n	800b9ea <__sfputs_r+0xa>
 800ba02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ba04 <_vfiprintf_r>:
 800ba04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba08:	460d      	mov	r5, r1
 800ba0a:	b09d      	sub	sp, #116	@ 0x74
 800ba0c:	4614      	mov	r4, r2
 800ba0e:	4698      	mov	r8, r3
 800ba10:	4606      	mov	r6, r0
 800ba12:	b118      	cbz	r0, 800ba1c <_vfiprintf_r+0x18>
 800ba14:	6a03      	ldr	r3, [r0, #32]
 800ba16:	b90b      	cbnz	r3, 800ba1c <_vfiprintf_r+0x18>
 800ba18:	f7fc fdf8 	bl	800860c <__sinit>
 800ba1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba1e:	07d9      	lsls	r1, r3, #31
 800ba20:	d405      	bmi.n	800ba2e <_vfiprintf_r+0x2a>
 800ba22:	89ab      	ldrh	r3, [r5, #12]
 800ba24:	059a      	lsls	r2, r3, #22
 800ba26:	d402      	bmi.n	800ba2e <_vfiprintf_r+0x2a>
 800ba28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba2a:	f7fc ff06 	bl	800883a <__retarget_lock_acquire_recursive>
 800ba2e:	89ab      	ldrh	r3, [r5, #12]
 800ba30:	071b      	lsls	r3, r3, #28
 800ba32:	d501      	bpl.n	800ba38 <_vfiprintf_r+0x34>
 800ba34:	692b      	ldr	r3, [r5, #16]
 800ba36:	b99b      	cbnz	r3, 800ba60 <_vfiprintf_r+0x5c>
 800ba38:	4629      	mov	r1, r5
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	f000 f938 	bl	800bcb0 <__swsetup_r>
 800ba40:	b170      	cbz	r0, 800ba60 <_vfiprintf_r+0x5c>
 800ba42:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ba44:	07dc      	lsls	r4, r3, #31
 800ba46:	d504      	bpl.n	800ba52 <_vfiprintf_r+0x4e>
 800ba48:	f04f 30ff 	mov.w	r0, #4294967295
 800ba4c:	b01d      	add	sp, #116	@ 0x74
 800ba4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba52:	89ab      	ldrh	r3, [r5, #12]
 800ba54:	0598      	lsls	r0, r3, #22
 800ba56:	d4f7      	bmi.n	800ba48 <_vfiprintf_r+0x44>
 800ba58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ba5a:	f7fc feef 	bl	800883c <__retarget_lock_release_recursive>
 800ba5e:	e7f3      	b.n	800ba48 <_vfiprintf_r+0x44>
 800ba60:	2300      	movs	r3, #0
 800ba62:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba64:	2320      	movs	r3, #32
 800ba66:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ba6a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba6e:	2330      	movs	r3, #48	@ 0x30
 800ba70:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bc20 <_vfiprintf_r+0x21c>
 800ba74:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ba78:	f04f 0901 	mov.w	r9, #1
 800ba7c:	4623      	mov	r3, r4
 800ba7e:	469a      	mov	sl, r3
 800ba80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba84:	b10a      	cbz	r2, 800ba8a <_vfiprintf_r+0x86>
 800ba86:	2a25      	cmp	r2, #37	@ 0x25
 800ba88:	d1f9      	bne.n	800ba7e <_vfiprintf_r+0x7a>
 800ba8a:	ebba 0b04 	subs.w	fp, sl, r4
 800ba8e:	d00b      	beq.n	800baa8 <_vfiprintf_r+0xa4>
 800ba90:	465b      	mov	r3, fp
 800ba92:	4622      	mov	r2, r4
 800ba94:	4629      	mov	r1, r5
 800ba96:	4630      	mov	r0, r6
 800ba98:	f7ff ffa2 	bl	800b9e0 <__sfputs_r>
 800ba9c:	3001      	adds	r0, #1
 800ba9e:	f000 80a7 	beq.w	800bbf0 <_vfiprintf_r+0x1ec>
 800baa2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800baa4:	445a      	add	r2, fp
 800baa6:	9209      	str	r2, [sp, #36]	@ 0x24
 800baa8:	f89a 3000 	ldrb.w	r3, [sl]
 800baac:	2b00      	cmp	r3, #0
 800baae:	f000 809f 	beq.w	800bbf0 <_vfiprintf_r+0x1ec>
 800bab2:	2300      	movs	r3, #0
 800bab4:	f04f 32ff 	mov.w	r2, #4294967295
 800bab8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800babc:	f10a 0a01 	add.w	sl, sl, #1
 800bac0:	9304      	str	r3, [sp, #16]
 800bac2:	9307      	str	r3, [sp, #28]
 800bac4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bac8:	931a      	str	r3, [sp, #104]	@ 0x68
 800baca:	4654      	mov	r4, sl
 800bacc:	2205      	movs	r2, #5
 800bace:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bad2:	4853      	ldr	r0, [pc, #332]	@ (800bc20 <_vfiprintf_r+0x21c>)
 800bad4:	f7f4 fb84 	bl	80001e0 <memchr>
 800bad8:	9a04      	ldr	r2, [sp, #16]
 800bada:	b9d8      	cbnz	r0, 800bb14 <_vfiprintf_r+0x110>
 800badc:	06d1      	lsls	r1, r2, #27
 800bade:	bf44      	itt	mi
 800bae0:	2320      	movmi	r3, #32
 800bae2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bae6:	0713      	lsls	r3, r2, #28
 800bae8:	bf44      	itt	mi
 800baea:	232b      	movmi	r3, #43	@ 0x2b
 800baec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800baf0:	f89a 3000 	ldrb.w	r3, [sl]
 800baf4:	2b2a      	cmp	r3, #42	@ 0x2a
 800baf6:	d015      	beq.n	800bb24 <_vfiprintf_r+0x120>
 800baf8:	9a07      	ldr	r2, [sp, #28]
 800bafa:	4654      	mov	r4, sl
 800bafc:	2000      	movs	r0, #0
 800bafe:	f04f 0c0a 	mov.w	ip, #10
 800bb02:	4621      	mov	r1, r4
 800bb04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb08:	3b30      	subs	r3, #48	@ 0x30
 800bb0a:	2b09      	cmp	r3, #9
 800bb0c:	d94b      	bls.n	800bba6 <_vfiprintf_r+0x1a2>
 800bb0e:	b1b0      	cbz	r0, 800bb3e <_vfiprintf_r+0x13a>
 800bb10:	9207      	str	r2, [sp, #28]
 800bb12:	e014      	b.n	800bb3e <_vfiprintf_r+0x13a>
 800bb14:	eba0 0308 	sub.w	r3, r0, r8
 800bb18:	fa09 f303 	lsl.w	r3, r9, r3
 800bb1c:	4313      	orrs	r3, r2
 800bb1e:	9304      	str	r3, [sp, #16]
 800bb20:	46a2      	mov	sl, r4
 800bb22:	e7d2      	b.n	800baca <_vfiprintf_r+0xc6>
 800bb24:	9b03      	ldr	r3, [sp, #12]
 800bb26:	1d19      	adds	r1, r3, #4
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	9103      	str	r1, [sp, #12]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	bfbb      	ittet	lt
 800bb30:	425b      	neglt	r3, r3
 800bb32:	f042 0202 	orrlt.w	r2, r2, #2
 800bb36:	9307      	strge	r3, [sp, #28]
 800bb38:	9307      	strlt	r3, [sp, #28]
 800bb3a:	bfb8      	it	lt
 800bb3c:	9204      	strlt	r2, [sp, #16]
 800bb3e:	7823      	ldrb	r3, [r4, #0]
 800bb40:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb42:	d10a      	bne.n	800bb5a <_vfiprintf_r+0x156>
 800bb44:	7863      	ldrb	r3, [r4, #1]
 800bb46:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb48:	d132      	bne.n	800bbb0 <_vfiprintf_r+0x1ac>
 800bb4a:	9b03      	ldr	r3, [sp, #12]
 800bb4c:	1d1a      	adds	r2, r3, #4
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	9203      	str	r2, [sp, #12]
 800bb52:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bb56:	3402      	adds	r4, #2
 800bb58:	9305      	str	r3, [sp, #20]
 800bb5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bc30 <_vfiprintf_r+0x22c>
 800bb5e:	7821      	ldrb	r1, [r4, #0]
 800bb60:	2203      	movs	r2, #3
 800bb62:	4650      	mov	r0, sl
 800bb64:	f7f4 fb3c 	bl	80001e0 <memchr>
 800bb68:	b138      	cbz	r0, 800bb7a <_vfiprintf_r+0x176>
 800bb6a:	9b04      	ldr	r3, [sp, #16]
 800bb6c:	eba0 000a 	sub.w	r0, r0, sl
 800bb70:	2240      	movs	r2, #64	@ 0x40
 800bb72:	4082      	lsls	r2, r0
 800bb74:	4313      	orrs	r3, r2
 800bb76:	3401      	adds	r4, #1
 800bb78:	9304      	str	r3, [sp, #16]
 800bb7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb7e:	4829      	ldr	r0, [pc, #164]	@ (800bc24 <_vfiprintf_r+0x220>)
 800bb80:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bb84:	2206      	movs	r2, #6
 800bb86:	f7f4 fb2b 	bl	80001e0 <memchr>
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	d03f      	beq.n	800bc0e <_vfiprintf_r+0x20a>
 800bb8e:	4b26      	ldr	r3, [pc, #152]	@ (800bc28 <_vfiprintf_r+0x224>)
 800bb90:	bb1b      	cbnz	r3, 800bbda <_vfiprintf_r+0x1d6>
 800bb92:	9b03      	ldr	r3, [sp, #12]
 800bb94:	3307      	adds	r3, #7
 800bb96:	f023 0307 	bic.w	r3, r3, #7
 800bb9a:	3308      	adds	r3, #8
 800bb9c:	9303      	str	r3, [sp, #12]
 800bb9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bba0:	443b      	add	r3, r7
 800bba2:	9309      	str	r3, [sp, #36]	@ 0x24
 800bba4:	e76a      	b.n	800ba7c <_vfiprintf_r+0x78>
 800bba6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbaa:	460c      	mov	r4, r1
 800bbac:	2001      	movs	r0, #1
 800bbae:	e7a8      	b.n	800bb02 <_vfiprintf_r+0xfe>
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	3401      	adds	r4, #1
 800bbb4:	9305      	str	r3, [sp, #20]
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	f04f 0c0a 	mov.w	ip, #10
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbc2:	3a30      	subs	r2, #48	@ 0x30
 800bbc4:	2a09      	cmp	r2, #9
 800bbc6:	d903      	bls.n	800bbd0 <_vfiprintf_r+0x1cc>
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d0c6      	beq.n	800bb5a <_vfiprintf_r+0x156>
 800bbcc:	9105      	str	r1, [sp, #20]
 800bbce:	e7c4      	b.n	800bb5a <_vfiprintf_r+0x156>
 800bbd0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbd4:	4604      	mov	r4, r0
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	e7f0      	b.n	800bbbc <_vfiprintf_r+0x1b8>
 800bbda:	ab03      	add	r3, sp, #12
 800bbdc:	9300      	str	r3, [sp, #0]
 800bbde:	462a      	mov	r2, r5
 800bbe0:	4b12      	ldr	r3, [pc, #72]	@ (800bc2c <_vfiprintf_r+0x228>)
 800bbe2:	a904      	add	r1, sp, #16
 800bbe4:	4630      	mov	r0, r6
 800bbe6:	f7fb feb9 	bl	800795c <_printf_float>
 800bbea:	4607      	mov	r7, r0
 800bbec:	1c78      	adds	r0, r7, #1
 800bbee:	d1d6      	bne.n	800bb9e <_vfiprintf_r+0x19a>
 800bbf0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bbf2:	07d9      	lsls	r1, r3, #31
 800bbf4:	d405      	bmi.n	800bc02 <_vfiprintf_r+0x1fe>
 800bbf6:	89ab      	ldrh	r3, [r5, #12]
 800bbf8:	059a      	lsls	r2, r3, #22
 800bbfa:	d402      	bmi.n	800bc02 <_vfiprintf_r+0x1fe>
 800bbfc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bbfe:	f7fc fe1d 	bl	800883c <__retarget_lock_release_recursive>
 800bc02:	89ab      	ldrh	r3, [r5, #12]
 800bc04:	065b      	lsls	r3, r3, #25
 800bc06:	f53f af1f 	bmi.w	800ba48 <_vfiprintf_r+0x44>
 800bc0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc0c:	e71e      	b.n	800ba4c <_vfiprintf_r+0x48>
 800bc0e:	ab03      	add	r3, sp, #12
 800bc10:	9300      	str	r3, [sp, #0]
 800bc12:	462a      	mov	r2, r5
 800bc14:	4b05      	ldr	r3, [pc, #20]	@ (800bc2c <_vfiprintf_r+0x228>)
 800bc16:	a904      	add	r1, sp, #16
 800bc18:	4630      	mov	r0, r6
 800bc1a:	f7fc f937 	bl	8007e8c <_printf_i>
 800bc1e:	e7e4      	b.n	800bbea <_vfiprintf_r+0x1e6>
 800bc20:	0800d5f9 	.word	0x0800d5f9
 800bc24:	0800d603 	.word	0x0800d603
 800bc28:	0800795d 	.word	0x0800795d
 800bc2c:	0800b9e1 	.word	0x0800b9e1
 800bc30:	0800d5ff 	.word	0x0800d5ff

0800bc34 <__swbuf_r>:
 800bc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc36:	460e      	mov	r6, r1
 800bc38:	4614      	mov	r4, r2
 800bc3a:	4605      	mov	r5, r0
 800bc3c:	b118      	cbz	r0, 800bc46 <__swbuf_r+0x12>
 800bc3e:	6a03      	ldr	r3, [r0, #32]
 800bc40:	b90b      	cbnz	r3, 800bc46 <__swbuf_r+0x12>
 800bc42:	f7fc fce3 	bl	800860c <__sinit>
 800bc46:	69a3      	ldr	r3, [r4, #24]
 800bc48:	60a3      	str	r3, [r4, #8]
 800bc4a:	89a3      	ldrh	r3, [r4, #12]
 800bc4c:	071a      	lsls	r2, r3, #28
 800bc4e:	d501      	bpl.n	800bc54 <__swbuf_r+0x20>
 800bc50:	6923      	ldr	r3, [r4, #16]
 800bc52:	b943      	cbnz	r3, 800bc66 <__swbuf_r+0x32>
 800bc54:	4621      	mov	r1, r4
 800bc56:	4628      	mov	r0, r5
 800bc58:	f000 f82a 	bl	800bcb0 <__swsetup_r>
 800bc5c:	b118      	cbz	r0, 800bc66 <__swbuf_r+0x32>
 800bc5e:	f04f 37ff 	mov.w	r7, #4294967295
 800bc62:	4638      	mov	r0, r7
 800bc64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc66:	6823      	ldr	r3, [r4, #0]
 800bc68:	6922      	ldr	r2, [r4, #16]
 800bc6a:	1a98      	subs	r0, r3, r2
 800bc6c:	6963      	ldr	r3, [r4, #20]
 800bc6e:	b2f6      	uxtb	r6, r6
 800bc70:	4283      	cmp	r3, r0
 800bc72:	4637      	mov	r7, r6
 800bc74:	dc05      	bgt.n	800bc82 <__swbuf_r+0x4e>
 800bc76:	4621      	mov	r1, r4
 800bc78:	4628      	mov	r0, r5
 800bc7a:	f7ff fa47 	bl	800b10c <_fflush_r>
 800bc7e:	2800      	cmp	r0, #0
 800bc80:	d1ed      	bne.n	800bc5e <__swbuf_r+0x2a>
 800bc82:	68a3      	ldr	r3, [r4, #8]
 800bc84:	3b01      	subs	r3, #1
 800bc86:	60a3      	str	r3, [r4, #8]
 800bc88:	6823      	ldr	r3, [r4, #0]
 800bc8a:	1c5a      	adds	r2, r3, #1
 800bc8c:	6022      	str	r2, [r4, #0]
 800bc8e:	701e      	strb	r6, [r3, #0]
 800bc90:	6962      	ldr	r2, [r4, #20]
 800bc92:	1c43      	adds	r3, r0, #1
 800bc94:	429a      	cmp	r2, r3
 800bc96:	d004      	beq.n	800bca2 <__swbuf_r+0x6e>
 800bc98:	89a3      	ldrh	r3, [r4, #12]
 800bc9a:	07db      	lsls	r3, r3, #31
 800bc9c:	d5e1      	bpl.n	800bc62 <__swbuf_r+0x2e>
 800bc9e:	2e0a      	cmp	r6, #10
 800bca0:	d1df      	bne.n	800bc62 <__swbuf_r+0x2e>
 800bca2:	4621      	mov	r1, r4
 800bca4:	4628      	mov	r0, r5
 800bca6:	f7ff fa31 	bl	800b10c <_fflush_r>
 800bcaa:	2800      	cmp	r0, #0
 800bcac:	d0d9      	beq.n	800bc62 <__swbuf_r+0x2e>
 800bcae:	e7d6      	b.n	800bc5e <__swbuf_r+0x2a>

0800bcb0 <__swsetup_r>:
 800bcb0:	b538      	push	{r3, r4, r5, lr}
 800bcb2:	4b29      	ldr	r3, [pc, #164]	@ (800bd58 <__swsetup_r+0xa8>)
 800bcb4:	4605      	mov	r5, r0
 800bcb6:	6818      	ldr	r0, [r3, #0]
 800bcb8:	460c      	mov	r4, r1
 800bcba:	b118      	cbz	r0, 800bcc4 <__swsetup_r+0x14>
 800bcbc:	6a03      	ldr	r3, [r0, #32]
 800bcbe:	b90b      	cbnz	r3, 800bcc4 <__swsetup_r+0x14>
 800bcc0:	f7fc fca4 	bl	800860c <__sinit>
 800bcc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcc8:	0719      	lsls	r1, r3, #28
 800bcca:	d422      	bmi.n	800bd12 <__swsetup_r+0x62>
 800bccc:	06da      	lsls	r2, r3, #27
 800bcce:	d407      	bmi.n	800bce0 <__swsetup_r+0x30>
 800bcd0:	2209      	movs	r2, #9
 800bcd2:	602a      	str	r2, [r5, #0]
 800bcd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcd8:	81a3      	strh	r3, [r4, #12]
 800bcda:	f04f 30ff 	mov.w	r0, #4294967295
 800bcde:	e033      	b.n	800bd48 <__swsetup_r+0x98>
 800bce0:	0758      	lsls	r0, r3, #29
 800bce2:	d512      	bpl.n	800bd0a <__swsetup_r+0x5a>
 800bce4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bce6:	b141      	cbz	r1, 800bcfa <__swsetup_r+0x4a>
 800bce8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bcec:	4299      	cmp	r1, r3
 800bcee:	d002      	beq.n	800bcf6 <__swsetup_r+0x46>
 800bcf0:	4628      	mov	r0, r5
 800bcf2:	f7fd fbf9 	bl	80094e8 <_free_r>
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	6363      	str	r3, [r4, #52]	@ 0x34
 800bcfa:	89a3      	ldrh	r3, [r4, #12]
 800bcfc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bd00:	81a3      	strh	r3, [r4, #12]
 800bd02:	2300      	movs	r3, #0
 800bd04:	6063      	str	r3, [r4, #4]
 800bd06:	6923      	ldr	r3, [r4, #16]
 800bd08:	6023      	str	r3, [r4, #0]
 800bd0a:	89a3      	ldrh	r3, [r4, #12]
 800bd0c:	f043 0308 	orr.w	r3, r3, #8
 800bd10:	81a3      	strh	r3, [r4, #12]
 800bd12:	6923      	ldr	r3, [r4, #16]
 800bd14:	b94b      	cbnz	r3, 800bd2a <__swsetup_r+0x7a>
 800bd16:	89a3      	ldrh	r3, [r4, #12]
 800bd18:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bd1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bd20:	d003      	beq.n	800bd2a <__swsetup_r+0x7a>
 800bd22:	4621      	mov	r1, r4
 800bd24:	4628      	mov	r0, r5
 800bd26:	f000 f883 	bl	800be30 <__smakebuf_r>
 800bd2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd2e:	f013 0201 	ands.w	r2, r3, #1
 800bd32:	d00a      	beq.n	800bd4a <__swsetup_r+0x9a>
 800bd34:	2200      	movs	r2, #0
 800bd36:	60a2      	str	r2, [r4, #8]
 800bd38:	6962      	ldr	r2, [r4, #20]
 800bd3a:	4252      	negs	r2, r2
 800bd3c:	61a2      	str	r2, [r4, #24]
 800bd3e:	6922      	ldr	r2, [r4, #16]
 800bd40:	b942      	cbnz	r2, 800bd54 <__swsetup_r+0xa4>
 800bd42:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bd46:	d1c5      	bne.n	800bcd4 <__swsetup_r+0x24>
 800bd48:	bd38      	pop	{r3, r4, r5, pc}
 800bd4a:	0799      	lsls	r1, r3, #30
 800bd4c:	bf58      	it	pl
 800bd4e:	6962      	ldrpl	r2, [r4, #20]
 800bd50:	60a2      	str	r2, [r4, #8]
 800bd52:	e7f4      	b.n	800bd3e <__swsetup_r+0x8e>
 800bd54:	2000      	movs	r0, #0
 800bd56:	e7f7      	b.n	800bd48 <__swsetup_r+0x98>
 800bd58:	2000009c 	.word	0x2000009c

0800bd5c <_raise_r>:
 800bd5c:	291f      	cmp	r1, #31
 800bd5e:	b538      	push	{r3, r4, r5, lr}
 800bd60:	4605      	mov	r5, r0
 800bd62:	460c      	mov	r4, r1
 800bd64:	d904      	bls.n	800bd70 <_raise_r+0x14>
 800bd66:	2316      	movs	r3, #22
 800bd68:	6003      	str	r3, [r0, #0]
 800bd6a:	f04f 30ff 	mov.w	r0, #4294967295
 800bd6e:	bd38      	pop	{r3, r4, r5, pc}
 800bd70:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bd72:	b112      	cbz	r2, 800bd7a <_raise_r+0x1e>
 800bd74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd78:	b94b      	cbnz	r3, 800bd8e <_raise_r+0x32>
 800bd7a:	4628      	mov	r0, r5
 800bd7c:	f000 f830 	bl	800bde0 <_getpid_r>
 800bd80:	4622      	mov	r2, r4
 800bd82:	4601      	mov	r1, r0
 800bd84:	4628      	mov	r0, r5
 800bd86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd8a:	f000 b817 	b.w	800bdbc <_kill_r>
 800bd8e:	2b01      	cmp	r3, #1
 800bd90:	d00a      	beq.n	800bda8 <_raise_r+0x4c>
 800bd92:	1c59      	adds	r1, r3, #1
 800bd94:	d103      	bne.n	800bd9e <_raise_r+0x42>
 800bd96:	2316      	movs	r3, #22
 800bd98:	6003      	str	r3, [r0, #0]
 800bd9a:	2001      	movs	r0, #1
 800bd9c:	e7e7      	b.n	800bd6e <_raise_r+0x12>
 800bd9e:	2100      	movs	r1, #0
 800bda0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bda4:	4620      	mov	r0, r4
 800bda6:	4798      	blx	r3
 800bda8:	2000      	movs	r0, #0
 800bdaa:	e7e0      	b.n	800bd6e <_raise_r+0x12>

0800bdac <raise>:
 800bdac:	4b02      	ldr	r3, [pc, #8]	@ (800bdb8 <raise+0xc>)
 800bdae:	4601      	mov	r1, r0
 800bdb0:	6818      	ldr	r0, [r3, #0]
 800bdb2:	f7ff bfd3 	b.w	800bd5c <_raise_r>
 800bdb6:	bf00      	nop
 800bdb8:	2000009c 	.word	0x2000009c

0800bdbc <_kill_r>:
 800bdbc:	b538      	push	{r3, r4, r5, lr}
 800bdbe:	4d07      	ldr	r5, [pc, #28]	@ (800bddc <_kill_r+0x20>)
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	4604      	mov	r4, r0
 800bdc4:	4608      	mov	r0, r1
 800bdc6:	4611      	mov	r1, r2
 800bdc8:	602b      	str	r3, [r5, #0]
 800bdca:	f7f6 ff97 	bl	8002cfc <_kill>
 800bdce:	1c43      	adds	r3, r0, #1
 800bdd0:	d102      	bne.n	800bdd8 <_kill_r+0x1c>
 800bdd2:	682b      	ldr	r3, [r5, #0]
 800bdd4:	b103      	cbz	r3, 800bdd8 <_kill_r+0x1c>
 800bdd6:	6023      	str	r3, [r4, #0]
 800bdd8:	bd38      	pop	{r3, r4, r5, pc}
 800bdda:	bf00      	nop
 800bddc:	20000704 	.word	0x20000704

0800bde0 <_getpid_r>:
 800bde0:	f7f6 bf84 	b.w	8002cec <_getpid>

0800bde4 <__swhatbuf_r>:
 800bde4:	b570      	push	{r4, r5, r6, lr}
 800bde6:	460c      	mov	r4, r1
 800bde8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdec:	2900      	cmp	r1, #0
 800bdee:	b096      	sub	sp, #88	@ 0x58
 800bdf0:	4615      	mov	r5, r2
 800bdf2:	461e      	mov	r6, r3
 800bdf4:	da0d      	bge.n	800be12 <__swhatbuf_r+0x2e>
 800bdf6:	89a3      	ldrh	r3, [r4, #12]
 800bdf8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bdfc:	f04f 0100 	mov.w	r1, #0
 800be00:	bf14      	ite	ne
 800be02:	2340      	movne	r3, #64	@ 0x40
 800be04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800be08:	2000      	movs	r0, #0
 800be0a:	6031      	str	r1, [r6, #0]
 800be0c:	602b      	str	r3, [r5, #0]
 800be0e:	b016      	add	sp, #88	@ 0x58
 800be10:	bd70      	pop	{r4, r5, r6, pc}
 800be12:	466a      	mov	r2, sp
 800be14:	f000 f848 	bl	800bea8 <_fstat_r>
 800be18:	2800      	cmp	r0, #0
 800be1a:	dbec      	blt.n	800bdf6 <__swhatbuf_r+0x12>
 800be1c:	9901      	ldr	r1, [sp, #4]
 800be1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800be22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800be26:	4259      	negs	r1, r3
 800be28:	4159      	adcs	r1, r3
 800be2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be2e:	e7eb      	b.n	800be08 <__swhatbuf_r+0x24>

0800be30 <__smakebuf_r>:
 800be30:	898b      	ldrh	r3, [r1, #12]
 800be32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be34:	079d      	lsls	r5, r3, #30
 800be36:	4606      	mov	r6, r0
 800be38:	460c      	mov	r4, r1
 800be3a:	d507      	bpl.n	800be4c <__smakebuf_r+0x1c>
 800be3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800be40:	6023      	str	r3, [r4, #0]
 800be42:	6123      	str	r3, [r4, #16]
 800be44:	2301      	movs	r3, #1
 800be46:	6163      	str	r3, [r4, #20]
 800be48:	b003      	add	sp, #12
 800be4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be4c:	ab01      	add	r3, sp, #4
 800be4e:	466a      	mov	r2, sp
 800be50:	f7ff ffc8 	bl	800bde4 <__swhatbuf_r>
 800be54:	9f00      	ldr	r7, [sp, #0]
 800be56:	4605      	mov	r5, r0
 800be58:	4639      	mov	r1, r7
 800be5a:	4630      	mov	r0, r6
 800be5c:	f7fd fbb8 	bl	80095d0 <_malloc_r>
 800be60:	b948      	cbnz	r0, 800be76 <__smakebuf_r+0x46>
 800be62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be66:	059a      	lsls	r2, r3, #22
 800be68:	d4ee      	bmi.n	800be48 <__smakebuf_r+0x18>
 800be6a:	f023 0303 	bic.w	r3, r3, #3
 800be6e:	f043 0302 	orr.w	r3, r3, #2
 800be72:	81a3      	strh	r3, [r4, #12]
 800be74:	e7e2      	b.n	800be3c <__smakebuf_r+0xc>
 800be76:	89a3      	ldrh	r3, [r4, #12]
 800be78:	6020      	str	r0, [r4, #0]
 800be7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be7e:	81a3      	strh	r3, [r4, #12]
 800be80:	9b01      	ldr	r3, [sp, #4]
 800be82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800be86:	b15b      	cbz	r3, 800bea0 <__smakebuf_r+0x70>
 800be88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be8c:	4630      	mov	r0, r6
 800be8e:	f000 f81d 	bl	800becc <_isatty_r>
 800be92:	b128      	cbz	r0, 800bea0 <__smakebuf_r+0x70>
 800be94:	89a3      	ldrh	r3, [r4, #12]
 800be96:	f023 0303 	bic.w	r3, r3, #3
 800be9a:	f043 0301 	orr.w	r3, r3, #1
 800be9e:	81a3      	strh	r3, [r4, #12]
 800bea0:	89a3      	ldrh	r3, [r4, #12]
 800bea2:	431d      	orrs	r5, r3
 800bea4:	81a5      	strh	r5, [r4, #12]
 800bea6:	e7cf      	b.n	800be48 <__smakebuf_r+0x18>

0800bea8 <_fstat_r>:
 800bea8:	b538      	push	{r3, r4, r5, lr}
 800beaa:	4d07      	ldr	r5, [pc, #28]	@ (800bec8 <_fstat_r+0x20>)
 800beac:	2300      	movs	r3, #0
 800beae:	4604      	mov	r4, r0
 800beb0:	4608      	mov	r0, r1
 800beb2:	4611      	mov	r1, r2
 800beb4:	602b      	str	r3, [r5, #0]
 800beb6:	f7f6 ff81 	bl	8002dbc <_fstat>
 800beba:	1c43      	adds	r3, r0, #1
 800bebc:	d102      	bne.n	800bec4 <_fstat_r+0x1c>
 800bebe:	682b      	ldr	r3, [r5, #0]
 800bec0:	b103      	cbz	r3, 800bec4 <_fstat_r+0x1c>
 800bec2:	6023      	str	r3, [r4, #0]
 800bec4:	bd38      	pop	{r3, r4, r5, pc}
 800bec6:	bf00      	nop
 800bec8:	20000704 	.word	0x20000704

0800becc <_isatty_r>:
 800becc:	b538      	push	{r3, r4, r5, lr}
 800bece:	4d06      	ldr	r5, [pc, #24]	@ (800bee8 <_isatty_r+0x1c>)
 800bed0:	2300      	movs	r3, #0
 800bed2:	4604      	mov	r4, r0
 800bed4:	4608      	mov	r0, r1
 800bed6:	602b      	str	r3, [r5, #0]
 800bed8:	f7f6 ff80 	bl	8002ddc <_isatty>
 800bedc:	1c43      	adds	r3, r0, #1
 800bede:	d102      	bne.n	800bee6 <_isatty_r+0x1a>
 800bee0:	682b      	ldr	r3, [r5, #0]
 800bee2:	b103      	cbz	r3, 800bee6 <_isatty_r+0x1a>
 800bee4:	6023      	str	r3, [r4, #0]
 800bee6:	bd38      	pop	{r3, r4, r5, pc}
 800bee8:	20000704 	.word	0x20000704

0800beec <fmod>:
 800beec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beee:	ed2d 8b02 	vpush	{d8}
 800bef2:	ec57 6b10 	vmov	r6, r7, d0
 800bef6:	ec55 4b11 	vmov	r4, r5, d1
 800befa:	f000 f9fb 	bl	800c2f4 <__ieee754_fmod>
 800befe:	4622      	mov	r2, r4
 800bf00:	462b      	mov	r3, r5
 800bf02:	4630      	mov	r0, r6
 800bf04:	4639      	mov	r1, r7
 800bf06:	eeb0 8a40 	vmov.f32	s16, s0
 800bf0a:	eef0 8a60 	vmov.f32	s17, s1
 800bf0e:	f7f4 fe15 	bl	8000b3c <__aeabi_dcmpun>
 800bf12:	b990      	cbnz	r0, 800bf3a <fmod+0x4e>
 800bf14:	2200      	movs	r2, #0
 800bf16:	2300      	movs	r3, #0
 800bf18:	4620      	mov	r0, r4
 800bf1a:	4629      	mov	r1, r5
 800bf1c:	f7f4 fddc 	bl	8000ad8 <__aeabi_dcmpeq>
 800bf20:	b158      	cbz	r0, 800bf3a <fmod+0x4e>
 800bf22:	f7fc fc5f 	bl	80087e4 <__errno>
 800bf26:	2321      	movs	r3, #33	@ 0x21
 800bf28:	6003      	str	r3, [r0, #0]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	4610      	mov	r0, r2
 800bf30:	4619      	mov	r1, r3
 800bf32:	f7f4 fc93 	bl	800085c <__aeabi_ddiv>
 800bf36:	ec41 0b18 	vmov	d8, r0, r1
 800bf3a:	eeb0 0a48 	vmov.f32	s0, s16
 800bf3e:	eef0 0a68 	vmov.f32	s1, s17
 800bf42:	ecbd 8b02 	vpop	{d8}
 800bf46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bf48 <sin>:
 800bf48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf4a:	ec53 2b10 	vmov	r2, r3, d0
 800bf4e:	4826      	ldr	r0, [pc, #152]	@ (800bfe8 <sin+0xa0>)
 800bf50:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bf54:	4281      	cmp	r1, r0
 800bf56:	d807      	bhi.n	800bf68 <sin+0x20>
 800bf58:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800bfe0 <sin+0x98>
 800bf5c:	2000      	movs	r0, #0
 800bf5e:	b005      	add	sp, #20
 800bf60:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf64:	f000 b90c 	b.w	800c180 <__kernel_sin>
 800bf68:	4820      	ldr	r0, [pc, #128]	@ (800bfec <sin+0xa4>)
 800bf6a:	4281      	cmp	r1, r0
 800bf6c:	d908      	bls.n	800bf80 <sin+0x38>
 800bf6e:	4610      	mov	r0, r2
 800bf70:	4619      	mov	r1, r3
 800bf72:	f7f4 f991 	bl	8000298 <__aeabi_dsub>
 800bf76:	ec41 0b10 	vmov	d0, r0, r1
 800bf7a:	b005      	add	sp, #20
 800bf7c:	f85d fb04 	ldr.w	pc, [sp], #4
 800bf80:	4668      	mov	r0, sp
 800bf82:	f000 fac1 	bl	800c508 <__ieee754_rem_pio2>
 800bf86:	f000 0003 	and.w	r0, r0, #3
 800bf8a:	2801      	cmp	r0, #1
 800bf8c:	d00c      	beq.n	800bfa8 <sin+0x60>
 800bf8e:	2802      	cmp	r0, #2
 800bf90:	d011      	beq.n	800bfb6 <sin+0x6e>
 800bf92:	b9e8      	cbnz	r0, 800bfd0 <sin+0x88>
 800bf94:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bf98:	ed9d 0b00 	vldr	d0, [sp]
 800bf9c:	2001      	movs	r0, #1
 800bf9e:	f000 f8ef 	bl	800c180 <__kernel_sin>
 800bfa2:	ec51 0b10 	vmov	r0, r1, d0
 800bfa6:	e7e6      	b.n	800bf76 <sin+0x2e>
 800bfa8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bfac:	ed9d 0b00 	vldr	d0, [sp]
 800bfb0:	f000 f81e 	bl	800bff0 <__kernel_cos>
 800bfb4:	e7f5      	b.n	800bfa2 <sin+0x5a>
 800bfb6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bfba:	ed9d 0b00 	vldr	d0, [sp]
 800bfbe:	2001      	movs	r0, #1
 800bfc0:	f000 f8de 	bl	800c180 <__kernel_sin>
 800bfc4:	ec53 2b10 	vmov	r2, r3, d0
 800bfc8:	4610      	mov	r0, r2
 800bfca:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800bfce:	e7d2      	b.n	800bf76 <sin+0x2e>
 800bfd0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bfd4:	ed9d 0b00 	vldr	d0, [sp]
 800bfd8:	f000 f80a 	bl	800bff0 <__kernel_cos>
 800bfdc:	e7f2      	b.n	800bfc4 <sin+0x7c>
 800bfde:	bf00      	nop
	...
 800bfe8:	3fe921fb 	.word	0x3fe921fb
 800bfec:	7fefffff 	.word	0x7fefffff

0800bff0 <__kernel_cos>:
 800bff0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bff4:	ec57 6b10 	vmov	r6, r7, d0
 800bff8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800bffc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800c000:	ed8d 1b00 	vstr	d1, [sp]
 800c004:	d206      	bcs.n	800c014 <__kernel_cos+0x24>
 800c006:	4630      	mov	r0, r6
 800c008:	4639      	mov	r1, r7
 800c00a:	f7f4 fdad 	bl	8000b68 <__aeabi_d2iz>
 800c00e:	2800      	cmp	r0, #0
 800c010:	f000 8088 	beq.w	800c124 <__kernel_cos+0x134>
 800c014:	4632      	mov	r2, r6
 800c016:	463b      	mov	r3, r7
 800c018:	4630      	mov	r0, r6
 800c01a:	4639      	mov	r1, r7
 800c01c:	f7f4 faf4 	bl	8000608 <__aeabi_dmul>
 800c020:	4b51      	ldr	r3, [pc, #324]	@ (800c168 <__kernel_cos+0x178>)
 800c022:	2200      	movs	r2, #0
 800c024:	4604      	mov	r4, r0
 800c026:	460d      	mov	r5, r1
 800c028:	f7f4 faee 	bl	8000608 <__aeabi_dmul>
 800c02c:	a340      	add	r3, pc, #256	@ (adr r3, 800c130 <__kernel_cos+0x140>)
 800c02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c032:	4682      	mov	sl, r0
 800c034:	468b      	mov	fp, r1
 800c036:	4620      	mov	r0, r4
 800c038:	4629      	mov	r1, r5
 800c03a:	f7f4 fae5 	bl	8000608 <__aeabi_dmul>
 800c03e:	a33e      	add	r3, pc, #248	@ (adr r3, 800c138 <__kernel_cos+0x148>)
 800c040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c044:	f7f4 f92a 	bl	800029c <__adddf3>
 800c048:	4622      	mov	r2, r4
 800c04a:	462b      	mov	r3, r5
 800c04c:	f7f4 fadc 	bl	8000608 <__aeabi_dmul>
 800c050:	a33b      	add	r3, pc, #236	@ (adr r3, 800c140 <__kernel_cos+0x150>)
 800c052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c056:	f7f4 f91f 	bl	8000298 <__aeabi_dsub>
 800c05a:	4622      	mov	r2, r4
 800c05c:	462b      	mov	r3, r5
 800c05e:	f7f4 fad3 	bl	8000608 <__aeabi_dmul>
 800c062:	a339      	add	r3, pc, #228	@ (adr r3, 800c148 <__kernel_cos+0x158>)
 800c064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c068:	f7f4 f918 	bl	800029c <__adddf3>
 800c06c:	4622      	mov	r2, r4
 800c06e:	462b      	mov	r3, r5
 800c070:	f7f4 faca 	bl	8000608 <__aeabi_dmul>
 800c074:	a336      	add	r3, pc, #216	@ (adr r3, 800c150 <__kernel_cos+0x160>)
 800c076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c07a:	f7f4 f90d 	bl	8000298 <__aeabi_dsub>
 800c07e:	4622      	mov	r2, r4
 800c080:	462b      	mov	r3, r5
 800c082:	f7f4 fac1 	bl	8000608 <__aeabi_dmul>
 800c086:	a334      	add	r3, pc, #208	@ (adr r3, 800c158 <__kernel_cos+0x168>)
 800c088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08c:	f7f4 f906 	bl	800029c <__adddf3>
 800c090:	4622      	mov	r2, r4
 800c092:	462b      	mov	r3, r5
 800c094:	f7f4 fab8 	bl	8000608 <__aeabi_dmul>
 800c098:	4622      	mov	r2, r4
 800c09a:	462b      	mov	r3, r5
 800c09c:	f7f4 fab4 	bl	8000608 <__aeabi_dmul>
 800c0a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0a4:	4604      	mov	r4, r0
 800c0a6:	460d      	mov	r5, r1
 800c0a8:	4630      	mov	r0, r6
 800c0aa:	4639      	mov	r1, r7
 800c0ac:	f7f4 faac 	bl	8000608 <__aeabi_dmul>
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	4629      	mov	r1, r5
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	f7f4 f8ee 	bl	8000298 <__aeabi_dsub>
 800c0bc:	4b2b      	ldr	r3, [pc, #172]	@ (800c16c <__kernel_cos+0x17c>)
 800c0be:	4598      	cmp	r8, r3
 800c0c0:	4606      	mov	r6, r0
 800c0c2:	460f      	mov	r7, r1
 800c0c4:	d810      	bhi.n	800c0e8 <__kernel_cos+0xf8>
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	460b      	mov	r3, r1
 800c0ca:	4650      	mov	r0, sl
 800c0cc:	4659      	mov	r1, fp
 800c0ce:	f7f4 f8e3 	bl	8000298 <__aeabi_dsub>
 800c0d2:	460b      	mov	r3, r1
 800c0d4:	4926      	ldr	r1, [pc, #152]	@ (800c170 <__kernel_cos+0x180>)
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	2000      	movs	r0, #0
 800c0da:	f7f4 f8dd 	bl	8000298 <__aeabi_dsub>
 800c0de:	ec41 0b10 	vmov	d0, r0, r1
 800c0e2:	b003      	add	sp, #12
 800c0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0e8:	4b22      	ldr	r3, [pc, #136]	@ (800c174 <__kernel_cos+0x184>)
 800c0ea:	4921      	ldr	r1, [pc, #132]	@ (800c170 <__kernel_cos+0x180>)
 800c0ec:	4598      	cmp	r8, r3
 800c0ee:	bf8c      	ite	hi
 800c0f0:	4d21      	ldrhi	r5, [pc, #132]	@ (800c178 <__kernel_cos+0x188>)
 800c0f2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800c0f6:	2400      	movs	r4, #0
 800c0f8:	4622      	mov	r2, r4
 800c0fa:	462b      	mov	r3, r5
 800c0fc:	2000      	movs	r0, #0
 800c0fe:	f7f4 f8cb 	bl	8000298 <__aeabi_dsub>
 800c102:	4622      	mov	r2, r4
 800c104:	4680      	mov	r8, r0
 800c106:	4689      	mov	r9, r1
 800c108:	462b      	mov	r3, r5
 800c10a:	4650      	mov	r0, sl
 800c10c:	4659      	mov	r1, fp
 800c10e:	f7f4 f8c3 	bl	8000298 <__aeabi_dsub>
 800c112:	4632      	mov	r2, r6
 800c114:	463b      	mov	r3, r7
 800c116:	f7f4 f8bf 	bl	8000298 <__aeabi_dsub>
 800c11a:	4602      	mov	r2, r0
 800c11c:	460b      	mov	r3, r1
 800c11e:	4640      	mov	r0, r8
 800c120:	4649      	mov	r1, r9
 800c122:	e7da      	b.n	800c0da <__kernel_cos+0xea>
 800c124:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800c160 <__kernel_cos+0x170>
 800c128:	e7db      	b.n	800c0e2 <__kernel_cos+0xf2>
 800c12a:	bf00      	nop
 800c12c:	f3af 8000 	nop.w
 800c130:	be8838d4 	.word	0xbe8838d4
 800c134:	bda8fae9 	.word	0xbda8fae9
 800c138:	bdb4b1c4 	.word	0xbdb4b1c4
 800c13c:	3e21ee9e 	.word	0x3e21ee9e
 800c140:	809c52ad 	.word	0x809c52ad
 800c144:	3e927e4f 	.word	0x3e927e4f
 800c148:	19cb1590 	.word	0x19cb1590
 800c14c:	3efa01a0 	.word	0x3efa01a0
 800c150:	16c15177 	.word	0x16c15177
 800c154:	3f56c16c 	.word	0x3f56c16c
 800c158:	5555554c 	.word	0x5555554c
 800c15c:	3fa55555 	.word	0x3fa55555
 800c160:	00000000 	.word	0x00000000
 800c164:	3ff00000 	.word	0x3ff00000
 800c168:	3fe00000 	.word	0x3fe00000
 800c16c:	3fd33332 	.word	0x3fd33332
 800c170:	3ff00000 	.word	0x3ff00000
 800c174:	3fe90000 	.word	0x3fe90000
 800c178:	3fd20000 	.word	0x3fd20000
 800c17c:	00000000 	.word	0x00000000

0800c180 <__kernel_sin>:
 800c180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c184:	ec55 4b10 	vmov	r4, r5, d0
 800c188:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c18c:	b085      	sub	sp, #20
 800c18e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800c192:	ed8d 1b02 	vstr	d1, [sp, #8]
 800c196:	4680      	mov	r8, r0
 800c198:	d205      	bcs.n	800c1a6 <__kernel_sin+0x26>
 800c19a:	4620      	mov	r0, r4
 800c19c:	4629      	mov	r1, r5
 800c19e:	f7f4 fce3 	bl	8000b68 <__aeabi_d2iz>
 800c1a2:	2800      	cmp	r0, #0
 800c1a4:	d052      	beq.n	800c24c <__kernel_sin+0xcc>
 800c1a6:	4622      	mov	r2, r4
 800c1a8:	462b      	mov	r3, r5
 800c1aa:	4620      	mov	r0, r4
 800c1ac:	4629      	mov	r1, r5
 800c1ae:	f7f4 fa2b 	bl	8000608 <__aeabi_dmul>
 800c1b2:	4682      	mov	sl, r0
 800c1b4:	468b      	mov	fp, r1
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	460b      	mov	r3, r1
 800c1ba:	4620      	mov	r0, r4
 800c1bc:	4629      	mov	r1, r5
 800c1be:	f7f4 fa23 	bl	8000608 <__aeabi_dmul>
 800c1c2:	a342      	add	r3, pc, #264	@ (adr r3, 800c2cc <__kernel_sin+0x14c>)
 800c1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c8:	e9cd 0100 	strd	r0, r1, [sp]
 800c1cc:	4650      	mov	r0, sl
 800c1ce:	4659      	mov	r1, fp
 800c1d0:	f7f4 fa1a 	bl	8000608 <__aeabi_dmul>
 800c1d4:	a33f      	add	r3, pc, #252	@ (adr r3, 800c2d4 <__kernel_sin+0x154>)
 800c1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1da:	f7f4 f85d 	bl	8000298 <__aeabi_dsub>
 800c1de:	4652      	mov	r2, sl
 800c1e0:	465b      	mov	r3, fp
 800c1e2:	f7f4 fa11 	bl	8000608 <__aeabi_dmul>
 800c1e6:	a33d      	add	r3, pc, #244	@ (adr r3, 800c2dc <__kernel_sin+0x15c>)
 800c1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ec:	f7f4 f856 	bl	800029c <__adddf3>
 800c1f0:	4652      	mov	r2, sl
 800c1f2:	465b      	mov	r3, fp
 800c1f4:	f7f4 fa08 	bl	8000608 <__aeabi_dmul>
 800c1f8:	a33a      	add	r3, pc, #232	@ (adr r3, 800c2e4 <__kernel_sin+0x164>)
 800c1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fe:	f7f4 f84b 	bl	8000298 <__aeabi_dsub>
 800c202:	4652      	mov	r2, sl
 800c204:	465b      	mov	r3, fp
 800c206:	f7f4 f9ff 	bl	8000608 <__aeabi_dmul>
 800c20a:	a338      	add	r3, pc, #224	@ (adr r3, 800c2ec <__kernel_sin+0x16c>)
 800c20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c210:	f7f4 f844 	bl	800029c <__adddf3>
 800c214:	4606      	mov	r6, r0
 800c216:	460f      	mov	r7, r1
 800c218:	f1b8 0f00 	cmp.w	r8, #0
 800c21c:	d11b      	bne.n	800c256 <__kernel_sin+0xd6>
 800c21e:	4602      	mov	r2, r0
 800c220:	460b      	mov	r3, r1
 800c222:	4650      	mov	r0, sl
 800c224:	4659      	mov	r1, fp
 800c226:	f7f4 f9ef 	bl	8000608 <__aeabi_dmul>
 800c22a:	a325      	add	r3, pc, #148	@ (adr r3, 800c2c0 <__kernel_sin+0x140>)
 800c22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c230:	f7f4 f832 	bl	8000298 <__aeabi_dsub>
 800c234:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c238:	f7f4 f9e6 	bl	8000608 <__aeabi_dmul>
 800c23c:	4602      	mov	r2, r0
 800c23e:	460b      	mov	r3, r1
 800c240:	4620      	mov	r0, r4
 800c242:	4629      	mov	r1, r5
 800c244:	f7f4 f82a 	bl	800029c <__adddf3>
 800c248:	4604      	mov	r4, r0
 800c24a:	460d      	mov	r5, r1
 800c24c:	ec45 4b10 	vmov	d0, r4, r5
 800c250:	b005      	add	sp, #20
 800c252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c25a:	4b1b      	ldr	r3, [pc, #108]	@ (800c2c8 <__kernel_sin+0x148>)
 800c25c:	2200      	movs	r2, #0
 800c25e:	f7f4 f9d3 	bl	8000608 <__aeabi_dmul>
 800c262:	4632      	mov	r2, r6
 800c264:	4680      	mov	r8, r0
 800c266:	4689      	mov	r9, r1
 800c268:	463b      	mov	r3, r7
 800c26a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c26e:	f7f4 f9cb 	bl	8000608 <__aeabi_dmul>
 800c272:	4602      	mov	r2, r0
 800c274:	460b      	mov	r3, r1
 800c276:	4640      	mov	r0, r8
 800c278:	4649      	mov	r1, r9
 800c27a:	f7f4 f80d 	bl	8000298 <__aeabi_dsub>
 800c27e:	4652      	mov	r2, sl
 800c280:	465b      	mov	r3, fp
 800c282:	f7f4 f9c1 	bl	8000608 <__aeabi_dmul>
 800c286:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c28a:	f7f4 f805 	bl	8000298 <__aeabi_dsub>
 800c28e:	a30c      	add	r3, pc, #48	@ (adr r3, 800c2c0 <__kernel_sin+0x140>)
 800c290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c294:	4606      	mov	r6, r0
 800c296:	460f      	mov	r7, r1
 800c298:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c29c:	f7f4 f9b4 	bl	8000608 <__aeabi_dmul>
 800c2a0:	4602      	mov	r2, r0
 800c2a2:	460b      	mov	r3, r1
 800c2a4:	4630      	mov	r0, r6
 800c2a6:	4639      	mov	r1, r7
 800c2a8:	f7f3 fff8 	bl	800029c <__adddf3>
 800c2ac:	4602      	mov	r2, r0
 800c2ae:	460b      	mov	r3, r1
 800c2b0:	4620      	mov	r0, r4
 800c2b2:	4629      	mov	r1, r5
 800c2b4:	f7f3 fff0 	bl	8000298 <__aeabi_dsub>
 800c2b8:	e7c6      	b.n	800c248 <__kernel_sin+0xc8>
 800c2ba:	bf00      	nop
 800c2bc:	f3af 8000 	nop.w
 800c2c0:	55555549 	.word	0x55555549
 800c2c4:	3fc55555 	.word	0x3fc55555
 800c2c8:	3fe00000 	.word	0x3fe00000
 800c2cc:	5acfd57c 	.word	0x5acfd57c
 800c2d0:	3de5d93a 	.word	0x3de5d93a
 800c2d4:	8a2b9ceb 	.word	0x8a2b9ceb
 800c2d8:	3e5ae5e6 	.word	0x3e5ae5e6
 800c2dc:	57b1fe7d 	.word	0x57b1fe7d
 800c2e0:	3ec71de3 	.word	0x3ec71de3
 800c2e4:	19c161d5 	.word	0x19c161d5
 800c2e8:	3f2a01a0 	.word	0x3f2a01a0
 800c2ec:	1110f8a6 	.word	0x1110f8a6
 800c2f0:	3f811111 	.word	0x3f811111

0800c2f4 <__ieee754_fmod>:
 800c2f4:	ec53 2b11 	vmov	r2, r3, d1
 800c2f8:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 800c2fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c300:	ea52 040c 	orrs.w	r4, r2, ip
 800c304:	ec51 0b10 	vmov	r0, r1, d0
 800c308:	461e      	mov	r6, r3
 800c30a:	4617      	mov	r7, r2
 800c30c:	4696      	mov	lr, r2
 800c30e:	d00c      	beq.n	800c32a <__ieee754_fmod+0x36>
 800c310:	4c77      	ldr	r4, [pc, #476]	@ (800c4f0 <__ieee754_fmod+0x1fc>)
 800c312:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800c316:	45a0      	cmp	r8, r4
 800c318:	4689      	mov	r9, r1
 800c31a:	d806      	bhi.n	800c32a <__ieee754_fmod+0x36>
 800c31c:	4254      	negs	r4, r2
 800c31e:	4d75      	ldr	r5, [pc, #468]	@ (800c4f4 <__ieee754_fmod+0x200>)
 800c320:	4314      	orrs	r4, r2
 800c322:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800c326:	42ac      	cmp	r4, r5
 800c328:	d909      	bls.n	800c33e <__ieee754_fmod+0x4a>
 800c32a:	f7f4 f96d 	bl	8000608 <__aeabi_dmul>
 800c32e:	4602      	mov	r2, r0
 800c330:	460b      	mov	r3, r1
 800c332:	f7f4 fa93 	bl	800085c <__aeabi_ddiv>
 800c336:	ec41 0b10 	vmov	d0, r0, r1
 800c33a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c33e:	45e0      	cmp	r8, ip
 800c340:	4682      	mov	sl, r0
 800c342:	4604      	mov	r4, r0
 800c344:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800c348:	dc09      	bgt.n	800c35e <__ieee754_fmod+0x6a>
 800c34a:	dbf4      	blt.n	800c336 <__ieee754_fmod+0x42>
 800c34c:	4282      	cmp	r2, r0
 800c34e:	d8f2      	bhi.n	800c336 <__ieee754_fmod+0x42>
 800c350:	d105      	bne.n	800c35e <__ieee754_fmod+0x6a>
 800c352:	4b69      	ldr	r3, [pc, #420]	@ (800c4f8 <__ieee754_fmod+0x204>)
 800c354:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800c358:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c35c:	e7eb      	b.n	800c336 <__ieee754_fmod+0x42>
 800c35e:	4a65      	ldr	r2, [pc, #404]	@ (800c4f4 <__ieee754_fmod+0x200>)
 800c360:	ea19 0f02 	tst.w	r9, r2
 800c364:	d148      	bne.n	800c3f8 <__ieee754_fmod+0x104>
 800c366:	f1b8 0f00 	cmp.w	r8, #0
 800c36a:	d13d      	bne.n	800c3e8 <__ieee754_fmod+0xf4>
 800c36c:	4963      	ldr	r1, [pc, #396]	@ (800c4fc <__ieee754_fmod+0x208>)
 800c36e:	4653      	mov	r3, sl
 800c370:	2b00      	cmp	r3, #0
 800c372:	dc36      	bgt.n	800c3e2 <__ieee754_fmod+0xee>
 800c374:	4216      	tst	r6, r2
 800c376:	d14f      	bne.n	800c418 <__ieee754_fmod+0x124>
 800c378:	f1bc 0f00 	cmp.w	ip, #0
 800c37c:	d144      	bne.n	800c408 <__ieee754_fmod+0x114>
 800c37e:	4a5f      	ldr	r2, [pc, #380]	@ (800c4fc <__ieee754_fmod+0x208>)
 800c380:	463b      	mov	r3, r7
 800c382:	2b00      	cmp	r3, #0
 800c384:	dc3d      	bgt.n	800c402 <__ieee754_fmod+0x10e>
 800c386:	485e      	ldr	r0, [pc, #376]	@ (800c500 <__ieee754_fmod+0x20c>)
 800c388:	4281      	cmp	r1, r0
 800c38a:	db4a      	blt.n	800c422 <__ieee754_fmod+0x12e>
 800c38c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c390:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c394:	485a      	ldr	r0, [pc, #360]	@ (800c500 <__ieee754_fmod+0x20c>)
 800c396:	4282      	cmp	r2, r0
 800c398:	db57      	blt.n	800c44a <__ieee754_fmod+0x156>
 800c39a:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800c39e:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800c3a2:	1a89      	subs	r1, r1, r2
 800c3a4:	1b98      	subs	r0, r3, r6
 800c3a6:	eba4 070e 	sub.w	r7, r4, lr
 800c3aa:	2900      	cmp	r1, #0
 800c3ac:	d162      	bne.n	800c474 <__ieee754_fmod+0x180>
 800c3ae:	4574      	cmp	r4, lr
 800c3b0:	bf38      	it	cc
 800c3b2:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800c3b6:	2800      	cmp	r0, #0
 800c3b8:	bfa4      	itt	ge
 800c3ba:	463c      	movge	r4, r7
 800c3bc:	4603      	movge	r3, r0
 800c3be:	ea53 0104 	orrs.w	r1, r3, r4
 800c3c2:	d0c6      	beq.n	800c352 <__ieee754_fmod+0x5e>
 800c3c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c3c8:	db69      	blt.n	800c49e <__ieee754_fmod+0x1aa>
 800c3ca:	494d      	ldr	r1, [pc, #308]	@ (800c500 <__ieee754_fmod+0x20c>)
 800c3cc:	428a      	cmp	r2, r1
 800c3ce:	db6c      	blt.n	800c4aa <__ieee754_fmod+0x1b6>
 800c3d0:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800c3d4:	432b      	orrs	r3, r5
 800c3d6:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800c3da:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c3de:	4620      	mov	r0, r4
 800c3e0:	e7a9      	b.n	800c336 <__ieee754_fmod+0x42>
 800c3e2:	3901      	subs	r1, #1
 800c3e4:	005b      	lsls	r3, r3, #1
 800c3e6:	e7c3      	b.n	800c370 <__ieee754_fmod+0x7c>
 800c3e8:	4945      	ldr	r1, [pc, #276]	@ (800c500 <__ieee754_fmod+0x20c>)
 800c3ea:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	ddc0      	ble.n	800c374 <__ieee754_fmod+0x80>
 800c3f2:	3901      	subs	r1, #1
 800c3f4:	005b      	lsls	r3, r3, #1
 800c3f6:	e7fa      	b.n	800c3ee <__ieee754_fmod+0xfa>
 800c3f8:	ea4f 5128 	mov.w	r1, r8, asr #20
 800c3fc:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800c400:	e7b8      	b.n	800c374 <__ieee754_fmod+0x80>
 800c402:	3a01      	subs	r2, #1
 800c404:	005b      	lsls	r3, r3, #1
 800c406:	e7bc      	b.n	800c382 <__ieee754_fmod+0x8e>
 800c408:	4a3d      	ldr	r2, [pc, #244]	@ (800c500 <__ieee754_fmod+0x20c>)
 800c40a:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800c40e:	2b00      	cmp	r3, #0
 800c410:	ddb9      	ble.n	800c386 <__ieee754_fmod+0x92>
 800c412:	3a01      	subs	r2, #1
 800c414:	005b      	lsls	r3, r3, #1
 800c416:	e7fa      	b.n	800c40e <__ieee754_fmod+0x11a>
 800c418:	ea4f 522c 	mov.w	r2, ip, asr #20
 800c41c:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800c420:	e7b1      	b.n	800c386 <__ieee754_fmod+0x92>
 800c422:	1a40      	subs	r0, r0, r1
 800c424:	281f      	cmp	r0, #31
 800c426:	dc0a      	bgt.n	800c43e <__ieee754_fmod+0x14a>
 800c428:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 800c42c:	fa08 f800 	lsl.w	r8, r8, r0
 800c430:	fa2a f303 	lsr.w	r3, sl, r3
 800c434:	ea43 0308 	orr.w	r3, r3, r8
 800c438:	fa0a f400 	lsl.w	r4, sl, r0
 800c43c:	e7aa      	b.n	800c394 <__ieee754_fmod+0xa0>
 800c43e:	4b31      	ldr	r3, [pc, #196]	@ (800c504 <__ieee754_fmod+0x210>)
 800c440:	1a5b      	subs	r3, r3, r1
 800c442:	fa0a f303 	lsl.w	r3, sl, r3
 800c446:	2400      	movs	r4, #0
 800c448:	e7a4      	b.n	800c394 <__ieee754_fmod+0xa0>
 800c44a:	1a80      	subs	r0, r0, r2
 800c44c:	281f      	cmp	r0, #31
 800c44e:	dc0a      	bgt.n	800c466 <__ieee754_fmod+0x172>
 800c450:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 800c454:	fa0c fc00 	lsl.w	ip, ip, r0
 800c458:	fa27 f606 	lsr.w	r6, r7, r6
 800c45c:	ea46 060c 	orr.w	r6, r6, ip
 800c460:	fa07 fe00 	lsl.w	lr, r7, r0
 800c464:	e79d      	b.n	800c3a2 <__ieee754_fmod+0xae>
 800c466:	4e27      	ldr	r6, [pc, #156]	@ (800c504 <__ieee754_fmod+0x210>)
 800c468:	1ab6      	subs	r6, r6, r2
 800c46a:	fa07 f606 	lsl.w	r6, r7, r6
 800c46e:	f04f 0e00 	mov.w	lr, #0
 800c472:	e796      	b.n	800c3a2 <__ieee754_fmod+0xae>
 800c474:	4574      	cmp	r4, lr
 800c476:	bf38      	it	cc
 800c478:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800c47c:	2800      	cmp	r0, #0
 800c47e:	da05      	bge.n	800c48c <__ieee754_fmod+0x198>
 800c480:	0fe0      	lsrs	r0, r4, #31
 800c482:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800c486:	0064      	lsls	r4, r4, #1
 800c488:	3901      	subs	r1, #1
 800c48a:	e78b      	b.n	800c3a4 <__ieee754_fmod+0xb0>
 800c48c:	ea50 0307 	orrs.w	r3, r0, r7
 800c490:	f43f af5f 	beq.w	800c352 <__ieee754_fmod+0x5e>
 800c494:	0ffb      	lsrs	r3, r7, #31
 800c496:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800c49a:	007c      	lsls	r4, r7, #1
 800c49c:	e7f4      	b.n	800c488 <__ieee754_fmod+0x194>
 800c49e:	0fe1      	lsrs	r1, r4, #31
 800c4a0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800c4a4:	0064      	lsls	r4, r4, #1
 800c4a6:	3a01      	subs	r2, #1
 800c4a8:	e78c      	b.n	800c3c4 <__ieee754_fmod+0xd0>
 800c4aa:	1a89      	subs	r1, r1, r2
 800c4ac:	2914      	cmp	r1, #20
 800c4ae:	dc0a      	bgt.n	800c4c6 <__ieee754_fmod+0x1d2>
 800c4b0:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800c4b4:	fa03 f202 	lsl.w	r2, r3, r2
 800c4b8:	40cc      	lsrs	r4, r1
 800c4ba:	4322      	orrs	r2, r4
 800c4bc:	410b      	asrs	r3, r1
 800c4be:	ea43 0105 	orr.w	r1, r3, r5
 800c4c2:	4610      	mov	r0, r2
 800c4c4:	e737      	b.n	800c336 <__ieee754_fmod+0x42>
 800c4c6:	291f      	cmp	r1, #31
 800c4c8:	dc07      	bgt.n	800c4da <__ieee754_fmod+0x1e6>
 800c4ca:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800c4ce:	40cc      	lsrs	r4, r1
 800c4d0:	fa03 f202 	lsl.w	r2, r3, r2
 800c4d4:	4322      	orrs	r2, r4
 800c4d6:	462b      	mov	r3, r5
 800c4d8:	e7f1      	b.n	800c4be <__ieee754_fmod+0x1ca>
 800c4da:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800c4de:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800c4e2:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800c4e6:	32e2      	adds	r2, #226	@ 0xe2
 800c4e8:	fa43 f202 	asr.w	r2, r3, r2
 800c4ec:	e7f3      	b.n	800c4d6 <__ieee754_fmod+0x1e2>
 800c4ee:	bf00      	nop
 800c4f0:	7fefffff 	.word	0x7fefffff
 800c4f4:	7ff00000 	.word	0x7ff00000
 800c4f8:	0800d6b0 	.word	0x0800d6b0
 800c4fc:	fffffbed 	.word	0xfffffbed
 800c500:	fffffc02 	.word	0xfffffc02
 800c504:	fffffbe2 	.word	0xfffffbe2

0800c508 <__ieee754_rem_pio2>:
 800c508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c50c:	ec57 6b10 	vmov	r6, r7, d0
 800c510:	4bc5      	ldr	r3, [pc, #788]	@ (800c828 <__ieee754_rem_pio2+0x320>)
 800c512:	b08d      	sub	sp, #52	@ 0x34
 800c514:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c518:	4598      	cmp	r8, r3
 800c51a:	4604      	mov	r4, r0
 800c51c:	9704      	str	r7, [sp, #16]
 800c51e:	d807      	bhi.n	800c530 <__ieee754_rem_pio2+0x28>
 800c520:	2200      	movs	r2, #0
 800c522:	2300      	movs	r3, #0
 800c524:	ed80 0b00 	vstr	d0, [r0]
 800c528:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800c52c:	2500      	movs	r5, #0
 800c52e:	e028      	b.n	800c582 <__ieee754_rem_pio2+0x7a>
 800c530:	4bbe      	ldr	r3, [pc, #760]	@ (800c82c <__ieee754_rem_pio2+0x324>)
 800c532:	4598      	cmp	r8, r3
 800c534:	d878      	bhi.n	800c628 <__ieee754_rem_pio2+0x120>
 800c536:	9b04      	ldr	r3, [sp, #16]
 800c538:	4dbd      	ldr	r5, [pc, #756]	@ (800c830 <__ieee754_rem_pio2+0x328>)
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	4630      	mov	r0, r6
 800c53e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800c7f0 <__ieee754_rem_pio2+0x2e8>)
 800c540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c544:	4639      	mov	r1, r7
 800c546:	dd38      	ble.n	800c5ba <__ieee754_rem_pio2+0xb2>
 800c548:	f7f3 fea6 	bl	8000298 <__aeabi_dsub>
 800c54c:	45a8      	cmp	r8, r5
 800c54e:	4606      	mov	r6, r0
 800c550:	460f      	mov	r7, r1
 800c552:	d01a      	beq.n	800c58a <__ieee754_rem_pio2+0x82>
 800c554:	a3a8      	add	r3, pc, #672	@ (adr r3, 800c7f8 <__ieee754_rem_pio2+0x2f0>)
 800c556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55a:	f7f3 fe9d 	bl	8000298 <__aeabi_dsub>
 800c55e:	4602      	mov	r2, r0
 800c560:	460b      	mov	r3, r1
 800c562:	4680      	mov	r8, r0
 800c564:	4689      	mov	r9, r1
 800c566:	4630      	mov	r0, r6
 800c568:	4639      	mov	r1, r7
 800c56a:	f7f3 fe95 	bl	8000298 <__aeabi_dsub>
 800c56e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800c7f8 <__ieee754_rem_pio2+0x2f0>)
 800c570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c574:	f7f3 fe90 	bl	8000298 <__aeabi_dsub>
 800c578:	e9c4 8900 	strd	r8, r9, [r4]
 800c57c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c580:	2501      	movs	r5, #1
 800c582:	4628      	mov	r0, r5
 800c584:	b00d      	add	sp, #52	@ 0x34
 800c586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c58a:	a39d      	add	r3, pc, #628	@ (adr r3, 800c800 <__ieee754_rem_pio2+0x2f8>)
 800c58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c590:	f7f3 fe82 	bl	8000298 <__aeabi_dsub>
 800c594:	a39c      	add	r3, pc, #624	@ (adr r3, 800c808 <__ieee754_rem_pio2+0x300>)
 800c596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59a:	4606      	mov	r6, r0
 800c59c:	460f      	mov	r7, r1
 800c59e:	f7f3 fe7b 	bl	8000298 <__aeabi_dsub>
 800c5a2:	4602      	mov	r2, r0
 800c5a4:	460b      	mov	r3, r1
 800c5a6:	4680      	mov	r8, r0
 800c5a8:	4689      	mov	r9, r1
 800c5aa:	4630      	mov	r0, r6
 800c5ac:	4639      	mov	r1, r7
 800c5ae:	f7f3 fe73 	bl	8000298 <__aeabi_dsub>
 800c5b2:	a395      	add	r3, pc, #596	@ (adr r3, 800c808 <__ieee754_rem_pio2+0x300>)
 800c5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b8:	e7dc      	b.n	800c574 <__ieee754_rem_pio2+0x6c>
 800c5ba:	f7f3 fe6f 	bl	800029c <__adddf3>
 800c5be:	45a8      	cmp	r8, r5
 800c5c0:	4606      	mov	r6, r0
 800c5c2:	460f      	mov	r7, r1
 800c5c4:	d018      	beq.n	800c5f8 <__ieee754_rem_pio2+0xf0>
 800c5c6:	a38c      	add	r3, pc, #560	@ (adr r3, 800c7f8 <__ieee754_rem_pio2+0x2f0>)
 800c5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5cc:	f7f3 fe66 	bl	800029c <__adddf3>
 800c5d0:	4602      	mov	r2, r0
 800c5d2:	460b      	mov	r3, r1
 800c5d4:	4680      	mov	r8, r0
 800c5d6:	4689      	mov	r9, r1
 800c5d8:	4630      	mov	r0, r6
 800c5da:	4639      	mov	r1, r7
 800c5dc:	f7f3 fe5c 	bl	8000298 <__aeabi_dsub>
 800c5e0:	a385      	add	r3, pc, #532	@ (adr r3, 800c7f8 <__ieee754_rem_pio2+0x2f0>)
 800c5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e6:	f7f3 fe59 	bl	800029c <__adddf3>
 800c5ea:	f04f 35ff 	mov.w	r5, #4294967295
 800c5ee:	e9c4 8900 	strd	r8, r9, [r4]
 800c5f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c5f6:	e7c4      	b.n	800c582 <__ieee754_rem_pio2+0x7a>
 800c5f8:	a381      	add	r3, pc, #516	@ (adr r3, 800c800 <__ieee754_rem_pio2+0x2f8>)
 800c5fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5fe:	f7f3 fe4d 	bl	800029c <__adddf3>
 800c602:	a381      	add	r3, pc, #516	@ (adr r3, 800c808 <__ieee754_rem_pio2+0x300>)
 800c604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c608:	4606      	mov	r6, r0
 800c60a:	460f      	mov	r7, r1
 800c60c:	f7f3 fe46 	bl	800029c <__adddf3>
 800c610:	4602      	mov	r2, r0
 800c612:	460b      	mov	r3, r1
 800c614:	4680      	mov	r8, r0
 800c616:	4689      	mov	r9, r1
 800c618:	4630      	mov	r0, r6
 800c61a:	4639      	mov	r1, r7
 800c61c:	f7f3 fe3c 	bl	8000298 <__aeabi_dsub>
 800c620:	a379      	add	r3, pc, #484	@ (adr r3, 800c808 <__ieee754_rem_pio2+0x300>)
 800c622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c626:	e7de      	b.n	800c5e6 <__ieee754_rem_pio2+0xde>
 800c628:	4b82      	ldr	r3, [pc, #520]	@ (800c834 <__ieee754_rem_pio2+0x32c>)
 800c62a:	4598      	cmp	r8, r3
 800c62c:	f200 80d1 	bhi.w	800c7d2 <__ieee754_rem_pio2+0x2ca>
 800c630:	f000 f966 	bl	800c900 <fabs>
 800c634:	ec57 6b10 	vmov	r6, r7, d0
 800c638:	a375      	add	r3, pc, #468	@ (adr r3, 800c810 <__ieee754_rem_pio2+0x308>)
 800c63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c63e:	4630      	mov	r0, r6
 800c640:	4639      	mov	r1, r7
 800c642:	f7f3 ffe1 	bl	8000608 <__aeabi_dmul>
 800c646:	4b7c      	ldr	r3, [pc, #496]	@ (800c838 <__ieee754_rem_pio2+0x330>)
 800c648:	2200      	movs	r2, #0
 800c64a:	f7f3 fe27 	bl	800029c <__adddf3>
 800c64e:	f7f4 fa8b 	bl	8000b68 <__aeabi_d2iz>
 800c652:	4605      	mov	r5, r0
 800c654:	f7f3 ff6e 	bl	8000534 <__aeabi_i2d>
 800c658:	4602      	mov	r2, r0
 800c65a:	460b      	mov	r3, r1
 800c65c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c660:	a363      	add	r3, pc, #396	@ (adr r3, 800c7f0 <__ieee754_rem_pio2+0x2e8>)
 800c662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c666:	f7f3 ffcf 	bl	8000608 <__aeabi_dmul>
 800c66a:	4602      	mov	r2, r0
 800c66c:	460b      	mov	r3, r1
 800c66e:	4630      	mov	r0, r6
 800c670:	4639      	mov	r1, r7
 800c672:	f7f3 fe11 	bl	8000298 <__aeabi_dsub>
 800c676:	a360      	add	r3, pc, #384	@ (adr r3, 800c7f8 <__ieee754_rem_pio2+0x2f0>)
 800c678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c67c:	4682      	mov	sl, r0
 800c67e:	468b      	mov	fp, r1
 800c680:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c684:	f7f3 ffc0 	bl	8000608 <__aeabi_dmul>
 800c688:	2d1f      	cmp	r5, #31
 800c68a:	4606      	mov	r6, r0
 800c68c:	460f      	mov	r7, r1
 800c68e:	dc0c      	bgt.n	800c6aa <__ieee754_rem_pio2+0x1a2>
 800c690:	4b6a      	ldr	r3, [pc, #424]	@ (800c83c <__ieee754_rem_pio2+0x334>)
 800c692:	1e6a      	subs	r2, r5, #1
 800c694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c698:	4543      	cmp	r3, r8
 800c69a:	d006      	beq.n	800c6aa <__ieee754_rem_pio2+0x1a2>
 800c69c:	4632      	mov	r2, r6
 800c69e:	463b      	mov	r3, r7
 800c6a0:	4650      	mov	r0, sl
 800c6a2:	4659      	mov	r1, fp
 800c6a4:	f7f3 fdf8 	bl	8000298 <__aeabi_dsub>
 800c6a8:	e00e      	b.n	800c6c8 <__ieee754_rem_pio2+0x1c0>
 800c6aa:	463b      	mov	r3, r7
 800c6ac:	4632      	mov	r2, r6
 800c6ae:	4650      	mov	r0, sl
 800c6b0:	4659      	mov	r1, fp
 800c6b2:	f7f3 fdf1 	bl	8000298 <__aeabi_dsub>
 800c6b6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c6ba:	9305      	str	r3, [sp, #20]
 800c6bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c6c0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800c6c4:	2b10      	cmp	r3, #16
 800c6c6:	dc02      	bgt.n	800c6ce <__ieee754_rem_pio2+0x1c6>
 800c6c8:	e9c4 0100 	strd	r0, r1, [r4]
 800c6cc:	e039      	b.n	800c742 <__ieee754_rem_pio2+0x23a>
 800c6ce:	a34c      	add	r3, pc, #304	@ (adr r3, 800c800 <__ieee754_rem_pio2+0x2f8>)
 800c6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6d8:	f7f3 ff96 	bl	8000608 <__aeabi_dmul>
 800c6dc:	4606      	mov	r6, r0
 800c6de:	460f      	mov	r7, r1
 800c6e0:	4602      	mov	r2, r0
 800c6e2:	460b      	mov	r3, r1
 800c6e4:	4650      	mov	r0, sl
 800c6e6:	4659      	mov	r1, fp
 800c6e8:	f7f3 fdd6 	bl	8000298 <__aeabi_dsub>
 800c6ec:	4602      	mov	r2, r0
 800c6ee:	460b      	mov	r3, r1
 800c6f0:	4680      	mov	r8, r0
 800c6f2:	4689      	mov	r9, r1
 800c6f4:	4650      	mov	r0, sl
 800c6f6:	4659      	mov	r1, fp
 800c6f8:	f7f3 fdce 	bl	8000298 <__aeabi_dsub>
 800c6fc:	4632      	mov	r2, r6
 800c6fe:	463b      	mov	r3, r7
 800c700:	f7f3 fdca 	bl	8000298 <__aeabi_dsub>
 800c704:	a340      	add	r3, pc, #256	@ (adr r3, 800c808 <__ieee754_rem_pio2+0x300>)
 800c706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c70a:	4606      	mov	r6, r0
 800c70c:	460f      	mov	r7, r1
 800c70e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c712:	f7f3 ff79 	bl	8000608 <__aeabi_dmul>
 800c716:	4632      	mov	r2, r6
 800c718:	463b      	mov	r3, r7
 800c71a:	f7f3 fdbd 	bl	8000298 <__aeabi_dsub>
 800c71e:	4602      	mov	r2, r0
 800c720:	460b      	mov	r3, r1
 800c722:	4606      	mov	r6, r0
 800c724:	460f      	mov	r7, r1
 800c726:	4640      	mov	r0, r8
 800c728:	4649      	mov	r1, r9
 800c72a:	f7f3 fdb5 	bl	8000298 <__aeabi_dsub>
 800c72e:	9a05      	ldr	r2, [sp, #20]
 800c730:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c734:	1ad3      	subs	r3, r2, r3
 800c736:	2b31      	cmp	r3, #49	@ 0x31
 800c738:	dc20      	bgt.n	800c77c <__ieee754_rem_pio2+0x274>
 800c73a:	e9c4 0100 	strd	r0, r1, [r4]
 800c73e:	46c2      	mov	sl, r8
 800c740:	46cb      	mov	fp, r9
 800c742:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c746:	4650      	mov	r0, sl
 800c748:	4642      	mov	r2, r8
 800c74a:	464b      	mov	r3, r9
 800c74c:	4659      	mov	r1, fp
 800c74e:	f7f3 fda3 	bl	8000298 <__aeabi_dsub>
 800c752:	463b      	mov	r3, r7
 800c754:	4632      	mov	r2, r6
 800c756:	f7f3 fd9f 	bl	8000298 <__aeabi_dsub>
 800c75a:	9b04      	ldr	r3, [sp, #16]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c762:	f6bf af0e 	bge.w	800c582 <__ieee754_rem_pio2+0x7a>
 800c766:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800c76a:	6063      	str	r3, [r4, #4]
 800c76c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c770:	f8c4 8000 	str.w	r8, [r4]
 800c774:	60a0      	str	r0, [r4, #8]
 800c776:	60e3      	str	r3, [r4, #12]
 800c778:	426d      	negs	r5, r5
 800c77a:	e702      	b.n	800c582 <__ieee754_rem_pio2+0x7a>
 800c77c:	a326      	add	r3, pc, #152	@ (adr r3, 800c818 <__ieee754_rem_pio2+0x310>)
 800c77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c782:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c786:	f7f3 ff3f 	bl	8000608 <__aeabi_dmul>
 800c78a:	4606      	mov	r6, r0
 800c78c:	460f      	mov	r7, r1
 800c78e:	4602      	mov	r2, r0
 800c790:	460b      	mov	r3, r1
 800c792:	4640      	mov	r0, r8
 800c794:	4649      	mov	r1, r9
 800c796:	f7f3 fd7f 	bl	8000298 <__aeabi_dsub>
 800c79a:	4602      	mov	r2, r0
 800c79c:	460b      	mov	r3, r1
 800c79e:	4682      	mov	sl, r0
 800c7a0:	468b      	mov	fp, r1
 800c7a2:	4640      	mov	r0, r8
 800c7a4:	4649      	mov	r1, r9
 800c7a6:	f7f3 fd77 	bl	8000298 <__aeabi_dsub>
 800c7aa:	4632      	mov	r2, r6
 800c7ac:	463b      	mov	r3, r7
 800c7ae:	f7f3 fd73 	bl	8000298 <__aeabi_dsub>
 800c7b2:	a31b      	add	r3, pc, #108	@ (adr r3, 800c820 <__ieee754_rem_pio2+0x318>)
 800c7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b8:	4606      	mov	r6, r0
 800c7ba:	460f      	mov	r7, r1
 800c7bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7c0:	f7f3 ff22 	bl	8000608 <__aeabi_dmul>
 800c7c4:	4632      	mov	r2, r6
 800c7c6:	463b      	mov	r3, r7
 800c7c8:	f7f3 fd66 	bl	8000298 <__aeabi_dsub>
 800c7cc:	4606      	mov	r6, r0
 800c7ce:	460f      	mov	r7, r1
 800c7d0:	e764      	b.n	800c69c <__ieee754_rem_pio2+0x194>
 800c7d2:	4b1b      	ldr	r3, [pc, #108]	@ (800c840 <__ieee754_rem_pio2+0x338>)
 800c7d4:	4598      	cmp	r8, r3
 800c7d6:	d935      	bls.n	800c844 <__ieee754_rem_pio2+0x33c>
 800c7d8:	4632      	mov	r2, r6
 800c7da:	463b      	mov	r3, r7
 800c7dc:	4630      	mov	r0, r6
 800c7de:	4639      	mov	r1, r7
 800c7e0:	f7f3 fd5a 	bl	8000298 <__aeabi_dsub>
 800c7e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c7e8:	e9c4 0100 	strd	r0, r1, [r4]
 800c7ec:	e69e      	b.n	800c52c <__ieee754_rem_pio2+0x24>
 800c7ee:	bf00      	nop
 800c7f0:	54400000 	.word	0x54400000
 800c7f4:	3ff921fb 	.word	0x3ff921fb
 800c7f8:	1a626331 	.word	0x1a626331
 800c7fc:	3dd0b461 	.word	0x3dd0b461
 800c800:	1a600000 	.word	0x1a600000
 800c804:	3dd0b461 	.word	0x3dd0b461
 800c808:	2e037073 	.word	0x2e037073
 800c80c:	3ba3198a 	.word	0x3ba3198a
 800c810:	6dc9c883 	.word	0x6dc9c883
 800c814:	3fe45f30 	.word	0x3fe45f30
 800c818:	2e000000 	.word	0x2e000000
 800c81c:	3ba3198a 	.word	0x3ba3198a
 800c820:	252049c1 	.word	0x252049c1
 800c824:	397b839a 	.word	0x397b839a
 800c828:	3fe921fb 	.word	0x3fe921fb
 800c82c:	4002d97b 	.word	0x4002d97b
 800c830:	3ff921fb 	.word	0x3ff921fb
 800c834:	413921fb 	.word	0x413921fb
 800c838:	3fe00000 	.word	0x3fe00000
 800c83c:	0800d6c0 	.word	0x0800d6c0
 800c840:	7fefffff 	.word	0x7fefffff
 800c844:	ea4f 5528 	mov.w	r5, r8, asr #20
 800c848:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800c84c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800c850:	4630      	mov	r0, r6
 800c852:	460f      	mov	r7, r1
 800c854:	f7f4 f988 	bl	8000b68 <__aeabi_d2iz>
 800c858:	f7f3 fe6c 	bl	8000534 <__aeabi_i2d>
 800c85c:	4602      	mov	r2, r0
 800c85e:	460b      	mov	r3, r1
 800c860:	4630      	mov	r0, r6
 800c862:	4639      	mov	r1, r7
 800c864:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c868:	f7f3 fd16 	bl	8000298 <__aeabi_dsub>
 800c86c:	4b22      	ldr	r3, [pc, #136]	@ (800c8f8 <__ieee754_rem_pio2+0x3f0>)
 800c86e:	2200      	movs	r2, #0
 800c870:	f7f3 feca 	bl	8000608 <__aeabi_dmul>
 800c874:	460f      	mov	r7, r1
 800c876:	4606      	mov	r6, r0
 800c878:	f7f4 f976 	bl	8000b68 <__aeabi_d2iz>
 800c87c:	f7f3 fe5a 	bl	8000534 <__aeabi_i2d>
 800c880:	4602      	mov	r2, r0
 800c882:	460b      	mov	r3, r1
 800c884:	4630      	mov	r0, r6
 800c886:	4639      	mov	r1, r7
 800c888:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c88c:	f7f3 fd04 	bl	8000298 <__aeabi_dsub>
 800c890:	4b19      	ldr	r3, [pc, #100]	@ (800c8f8 <__ieee754_rem_pio2+0x3f0>)
 800c892:	2200      	movs	r2, #0
 800c894:	f7f3 feb8 	bl	8000608 <__aeabi_dmul>
 800c898:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800c89c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800c8a0:	f04f 0803 	mov.w	r8, #3
 800c8a4:	2600      	movs	r6, #0
 800c8a6:	2700      	movs	r7, #0
 800c8a8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c8ac:	4632      	mov	r2, r6
 800c8ae:	463b      	mov	r3, r7
 800c8b0:	46c2      	mov	sl, r8
 800c8b2:	f108 38ff 	add.w	r8, r8, #4294967295
 800c8b6:	f7f4 f90f 	bl	8000ad8 <__aeabi_dcmpeq>
 800c8ba:	2800      	cmp	r0, #0
 800c8bc:	d1f4      	bne.n	800c8a8 <__ieee754_rem_pio2+0x3a0>
 800c8be:	4b0f      	ldr	r3, [pc, #60]	@ (800c8fc <__ieee754_rem_pio2+0x3f4>)
 800c8c0:	9301      	str	r3, [sp, #4]
 800c8c2:	2302      	movs	r3, #2
 800c8c4:	9300      	str	r3, [sp, #0]
 800c8c6:	462a      	mov	r2, r5
 800c8c8:	4653      	mov	r3, sl
 800c8ca:	4621      	mov	r1, r4
 800c8cc:	a806      	add	r0, sp, #24
 800c8ce:	f000 f81f 	bl	800c910 <__kernel_rem_pio2>
 800c8d2:	9b04      	ldr	r3, [sp, #16]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	4605      	mov	r5, r0
 800c8d8:	f6bf ae53 	bge.w	800c582 <__ieee754_rem_pio2+0x7a>
 800c8dc:	e9d4 2100 	ldrd	r2, r1, [r4]
 800c8e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c8e4:	e9c4 2300 	strd	r2, r3, [r4]
 800c8e8:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800c8ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c8f0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c8f4:	e740      	b.n	800c778 <__ieee754_rem_pio2+0x270>
 800c8f6:	bf00      	nop
 800c8f8:	41700000 	.word	0x41700000
 800c8fc:	0800d740 	.word	0x0800d740

0800c900 <fabs>:
 800c900:	ec51 0b10 	vmov	r0, r1, d0
 800c904:	4602      	mov	r2, r0
 800c906:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c90a:	ec43 2b10 	vmov	d0, r2, r3
 800c90e:	4770      	bx	lr

0800c910 <__kernel_rem_pio2>:
 800c910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c914:	ed2d 8b02 	vpush	{d8}
 800c918:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800c91c:	f112 0f14 	cmn.w	r2, #20
 800c920:	9306      	str	r3, [sp, #24]
 800c922:	9104      	str	r1, [sp, #16]
 800c924:	4bbe      	ldr	r3, [pc, #760]	@ (800cc20 <__kernel_rem_pio2+0x310>)
 800c926:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800c928:	9008      	str	r0, [sp, #32]
 800c92a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c92e:	9300      	str	r3, [sp, #0]
 800c930:	9b06      	ldr	r3, [sp, #24]
 800c932:	f103 33ff 	add.w	r3, r3, #4294967295
 800c936:	bfa8      	it	ge
 800c938:	1ed4      	subge	r4, r2, #3
 800c93a:	9305      	str	r3, [sp, #20]
 800c93c:	bfb2      	itee	lt
 800c93e:	2400      	movlt	r4, #0
 800c940:	2318      	movge	r3, #24
 800c942:	fb94 f4f3 	sdivge	r4, r4, r3
 800c946:	f06f 0317 	mvn.w	r3, #23
 800c94a:	fb04 3303 	mla	r3, r4, r3, r3
 800c94e:	eb03 0b02 	add.w	fp, r3, r2
 800c952:	9b00      	ldr	r3, [sp, #0]
 800c954:	9a05      	ldr	r2, [sp, #20]
 800c956:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800cc10 <__kernel_rem_pio2+0x300>
 800c95a:	eb03 0802 	add.w	r8, r3, r2
 800c95e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800c960:	1aa7      	subs	r7, r4, r2
 800c962:	ae20      	add	r6, sp, #128	@ 0x80
 800c964:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c968:	2500      	movs	r5, #0
 800c96a:	4545      	cmp	r5, r8
 800c96c:	dd13      	ble.n	800c996 <__kernel_rem_pio2+0x86>
 800c96e:	9b06      	ldr	r3, [sp, #24]
 800c970:	aa20      	add	r2, sp, #128	@ 0x80
 800c972:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c976:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800c97a:	f04f 0800 	mov.w	r8, #0
 800c97e:	9b00      	ldr	r3, [sp, #0]
 800c980:	4598      	cmp	r8, r3
 800c982:	dc31      	bgt.n	800c9e8 <__kernel_rem_pio2+0xd8>
 800c984:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800cc10 <__kernel_rem_pio2+0x300>
 800c988:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c98c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c990:	462f      	mov	r7, r5
 800c992:	2600      	movs	r6, #0
 800c994:	e01b      	b.n	800c9ce <__kernel_rem_pio2+0xbe>
 800c996:	42ef      	cmn	r7, r5
 800c998:	d407      	bmi.n	800c9aa <__kernel_rem_pio2+0x9a>
 800c99a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c99e:	f7f3 fdc9 	bl	8000534 <__aeabi_i2d>
 800c9a2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c9a6:	3501      	adds	r5, #1
 800c9a8:	e7df      	b.n	800c96a <__kernel_rem_pio2+0x5a>
 800c9aa:	ec51 0b18 	vmov	r0, r1, d8
 800c9ae:	e7f8      	b.n	800c9a2 <__kernel_rem_pio2+0x92>
 800c9b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9b4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c9b8:	f7f3 fe26 	bl	8000608 <__aeabi_dmul>
 800c9bc:	4602      	mov	r2, r0
 800c9be:	460b      	mov	r3, r1
 800c9c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c9c4:	f7f3 fc6a 	bl	800029c <__adddf3>
 800c9c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c9cc:	3601      	adds	r6, #1
 800c9ce:	9b05      	ldr	r3, [sp, #20]
 800c9d0:	429e      	cmp	r6, r3
 800c9d2:	f1a7 0708 	sub.w	r7, r7, #8
 800c9d6:	ddeb      	ble.n	800c9b0 <__kernel_rem_pio2+0xa0>
 800c9d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c9dc:	f108 0801 	add.w	r8, r8, #1
 800c9e0:	ecaa 7b02 	vstmia	sl!, {d7}
 800c9e4:	3508      	adds	r5, #8
 800c9e6:	e7ca      	b.n	800c97e <__kernel_rem_pio2+0x6e>
 800c9e8:	9b00      	ldr	r3, [sp, #0]
 800c9ea:	f8dd 8000 	ldr.w	r8, [sp]
 800c9ee:	aa0c      	add	r2, sp, #48	@ 0x30
 800c9f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c9f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9f6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800c9f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c9fc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c9fe:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800ca02:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ca04:	ab98      	add	r3, sp, #608	@ 0x260
 800ca06:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ca0a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800ca0e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ca12:	ac0c      	add	r4, sp, #48	@ 0x30
 800ca14:	ab70      	add	r3, sp, #448	@ 0x1c0
 800ca16:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800ca1a:	46a1      	mov	r9, r4
 800ca1c:	46c2      	mov	sl, r8
 800ca1e:	f1ba 0f00 	cmp.w	sl, #0
 800ca22:	f1a5 0508 	sub.w	r5, r5, #8
 800ca26:	dc77      	bgt.n	800cb18 <__kernel_rem_pio2+0x208>
 800ca28:	4658      	mov	r0, fp
 800ca2a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800ca2e:	f000 fac7 	bl	800cfc0 <scalbn>
 800ca32:	ec57 6b10 	vmov	r6, r7, d0
 800ca36:	2200      	movs	r2, #0
 800ca38:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800ca3c:	4630      	mov	r0, r6
 800ca3e:	4639      	mov	r1, r7
 800ca40:	f7f3 fde2 	bl	8000608 <__aeabi_dmul>
 800ca44:	ec41 0b10 	vmov	d0, r0, r1
 800ca48:	f000 fb3a 	bl	800d0c0 <floor>
 800ca4c:	4b75      	ldr	r3, [pc, #468]	@ (800cc24 <__kernel_rem_pio2+0x314>)
 800ca4e:	ec51 0b10 	vmov	r0, r1, d0
 800ca52:	2200      	movs	r2, #0
 800ca54:	f7f3 fdd8 	bl	8000608 <__aeabi_dmul>
 800ca58:	4602      	mov	r2, r0
 800ca5a:	460b      	mov	r3, r1
 800ca5c:	4630      	mov	r0, r6
 800ca5e:	4639      	mov	r1, r7
 800ca60:	f7f3 fc1a 	bl	8000298 <__aeabi_dsub>
 800ca64:	460f      	mov	r7, r1
 800ca66:	4606      	mov	r6, r0
 800ca68:	f7f4 f87e 	bl	8000b68 <__aeabi_d2iz>
 800ca6c:	9002      	str	r0, [sp, #8]
 800ca6e:	f7f3 fd61 	bl	8000534 <__aeabi_i2d>
 800ca72:	4602      	mov	r2, r0
 800ca74:	460b      	mov	r3, r1
 800ca76:	4630      	mov	r0, r6
 800ca78:	4639      	mov	r1, r7
 800ca7a:	f7f3 fc0d 	bl	8000298 <__aeabi_dsub>
 800ca7e:	f1bb 0f00 	cmp.w	fp, #0
 800ca82:	4606      	mov	r6, r0
 800ca84:	460f      	mov	r7, r1
 800ca86:	dd6c      	ble.n	800cb62 <__kernel_rem_pio2+0x252>
 800ca88:	f108 31ff 	add.w	r1, r8, #4294967295
 800ca8c:	ab0c      	add	r3, sp, #48	@ 0x30
 800ca8e:	9d02      	ldr	r5, [sp, #8]
 800ca90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ca94:	f1cb 0018 	rsb	r0, fp, #24
 800ca98:	fa43 f200 	asr.w	r2, r3, r0
 800ca9c:	4415      	add	r5, r2
 800ca9e:	4082      	lsls	r2, r0
 800caa0:	1a9b      	subs	r3, r3, r2
 800caa2:	aa0c      	add	r2, sp, #48	@ 0x30
 800caa4:	9502      	str	r5, [sp, #8]
 800caa6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800caaa:	f1cb 0217 	rsb	r2, fp, #23
 800caae:	fa43 f902 	asr.w	r9, r3, r2
 800cab2:	f1b9 0f00 	cmp.w	r9, #0
 800cab6:	dd64      	ble.n	800cb82 <__kernel_rem_pio2+0x272>
 800cab8:	9b02      	ldr	r3, [sp, #8]
 800caba:	2200      	movs	r2, #0
 800cabc:	3301      	adds	r3, #1
 800cabe:	9302      	str	r3, [sp, #8]
 800cac0:	4615      	mov	r5, r2
 800cac2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800cac6:	4590      	cmp	r8, r2
 800cac8:	f300 80b8 	bgt.w	800cc3c <__kernel_rem_pio2+0x32c>
 800cacc:	f1bb 0f00 	cmp.w	fp, #0
 800cad0:	dd07      	ble.n	800cae2 <__kernel_rem_pio2+0x1d2>
 800cad2:	f1bb 0f01 	cmp.w	fp, #1
 800cad6:	f000 80bf 	beq.w	800cc58 <__kernel_rem_pio2+0x348>
 800cada:	f1bb 0f02 	cmp.w	fp, #2
 800cade:	f000 80c6 	beq.w	800cc6e <__kernel_rem_pio2+0x35e>
 800cae2:	f1b9 0f02 	cmp.w	r9, #2
 800cae6:	d14c      	bne.n	800cb82 <__kernel_rem_pio2+0x272>
 800cae8:	4632      	mov	r2, r6
 800caea:	463b      	mov	r3, r7
 800caec:	494e      	ldr	r1, [pc, #312]	@ (800cc28 <__kernel_rem_pio2+0x318>)
 800caee:	2000      	movs	r0, #0
 800caf0:	f7f3 fbd2 	bl	8000298 <__aeabi_dsub>
 800caf4:	4606      	mov	r6, r0
 800caf6:	460f      	mov	r7, r1
 800caf8:	2d00      	cmp	r5, #0
 800cafa:	d042      	beq.n	800cb82 <__kernel_rem_pio2+0x272>
 800cafc:	4658      	mov	r0, fp
 800cafe:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800cc18 <__kernel_rem_pio2+0x308>
 800cb02:	f000 fa5d 	bl	800cfc0 <scalbn>
 800cb06:	4630      	mov	r0, r6
 800cb08:	4639      	mov	r1, r7
 800cb0a:	ec53 2b10 	vmov	r2, r3, d0
 800cb0e:	f7f3 fbc3 	bl	8000298 <__aeabi_dsub>
 800cb12:	4606      	mov	r6, r0
 800cb14:	460f      	mov	r7, r1
 800cb16:	e034      	b.n	800cb82 <__kernel_rem_pio2+0x272>
 800cb18:	4b44      	ldr	r3, [pc, #272]	@ (800cc2c <__kernel_rem_pio2+0x31c>)
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb20:	f7f3 fd72 	bl	8000608 <__aeabi_dmul>
 800cb24:	f7f4 f820 	bl	8000b68 <__aeabi_d2iz>
 800cb28:	f7f3 fd04 	bl	8000534 <__aeabi_i2d>
 800cb2c:	4b40      	ldr	r3, [pc, #256]	@ (800cc30 <__kernel_rem_pio2+0x320>)
 800cb2e:	2200      	movs	r2, #0
 800cb30:	4606      	mov	r6, r0
 800cb32:	460f      	mov	r7, r1
 800cb34:	f7f3 fd68 	bl	8000608 <__aeabi_dmul>
 800cb38:	4602      	mov	r2, r0
 800cb3a:	460b      	mov	r3, r1
 800cb3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb40:	f7f3 fbaa 	bl	8000298 <__aeabi_dsub>
 800cb44:	f7f4 f810 	bl	8000b68 <__aeabi_d2iz>
 800cb48:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cb4c:	f849 0b04 	str.w	r0, [r9], #4
 800cb50:	4639      	mov	r1, r7
 800cb52:	4630      	mov	r0, r6
 800cb54:	f7f3 fba2 	bl	800029c <__adddf3>
 800cb58:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cb5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb60:	e75d      	b.n	800ca1e <__kernel_rem_pio2+0x10e>
 800cb62:	d107      	bne.n	800cb74 <__kernel_rem_pio2+0x264>
 800cb64:	f108 33ff 	add.w	r3, r8, #4294967295
 800cb68:	aa0c      	add	r2, sp, #48	@ 0x30
 800cb6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb6e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800cb72:	e79e      	b.n	800cab2 <__kernel_rem_pio2+0x1a2>
 800cb74:	4b2f      	ldr	r3, [pc, #188]	@ (800cc34 <__kernel_rem_pio2+0x324>)
 800cb76:	2200      	movs	r2, #0
 800cb78:	f7f3 ffcc 	bl	8000b14 <__aeabi_dcmpge>
 800cb7c:	2800      	cmp	r0, #0
 800cb7e:	d143      	bne.n	800cc08 <__kernel_rem_pio2+0x2f8>
 800cb80:	4681      	mov	r9, r0
 800cb82:	2200      	movs	r2, #0
 800cb84:	2300      	movs	r3, #0
 800cb86:	4630      	mov	r0, r6
 800cb88:	4639      	mov	r1, r7
 800cb8a:	f7f3 ffa5 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	f000 80bf 	beq.w	800cd12 <__kernel_rem_pio2+0x402>
 800cb94:	f108 33ff 	add.w	r3, r8, #4294967295
 800cb98:	2200      	movs	r2, #0
 800cb9a:	9900      	ldr	r1, [sp, #0]
 800cb9c:	428b      	cmp	r3, r1
 800cb9e:	da6e      	bge.n	800cc7e <__kernel_rem_pio2+0x36e>
 800cba0:	2a00      	cmp	r2, #0
 800cba2:	f000 8089 	beq.w	800ccb8 <__kernel_rem_pio2+0x3a8>
 800cba6:	f108 38ff 	add.w	r8, r8, #4294967295
 800cbaa:	ab0c      	add	r3, sp, #48	@ 0x30
 800cbac:	f1ab 0b18 	sub.w	fp, fp, #24
 800cbb0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d0f6      	beq.n	800cba6 <__kernel_rem_pio2+0x296>
 800cbb8:	4658      	mov	r0, fp
 800cbba:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800cc18 <__kernel_rem_pio2+0x308>
 800cbbe:	f000 f9ff 	bl	800cfc0 <scalbn>
 800cbc2:	f108 0301 	add.w	r3, r8, #1
 800cbc6:	00da      	lsls	r2, r3, #3
 800cbc8:	9205      	str	r2, [sp, #20]
 800cbca:	ec55 4b10 	vmov	r4, r5, d0
 800cbce:	aa70      	add	r2, sp, #448	@ 0x1c0
 800cbd0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800cc2c <__kernel_rem_pio2+0x31c>
 800cbd4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800cbd8:	4646      	mov	r6, r8
 800cbda:	f04f 0a00 	mov.w	sl, #0
 800cbde:	2e00      	cmp	r6, #0
 800cbe0:	f280 80cf 	bge.w	800cd82 <__kernel_rem_pio2+0x472>
 800cbe4:	4644      	mov	r4, r8
 800cbe6:	2c00      	cmp	r4, #0
 800cbe8:	f2c0 80fd 	blt.w	800cde6 <__kernel_rem_pio2+0x4d6>
 800cbec:	4b12      	ldr	r3, [pc, #72]	@ (800cc38 <__kernel_rem_pio2+0x328>)
 800cbee:	461f      	mov	r7, r3
 800cbf0:	ab70      	add	r3, sp, #448	@ 0x1c0
 800cbf2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cbf6:	9306      	str	r3, [sp, #24]
 800cbf8:	f04f 0a00 	mov.w	sl, #0
 800cbfc:	f04f 0b00 	mov.w	fp, #0
 800cc00:	2600      	movs	r6, #0
 800cc02:	eba8 0504 	sub.w	r5, r8, r4
 800cc06:	e0e2      	b.n	800cdce <__kernel_rem_pio2+0x4be>
 800cc08:	f04f 0902 	mov.w	r9, #2
 800cc0c:	e754      	b.n	800cab8 <__kernel_rem_pio2+0x1a8>
 800cc0e:	bf00      	nop
	...
 800cc1c:	3ff00000 	.word	0x3ff00000
 800cc20:	0800d888 	.word	0x0800d888
 800cc24:	40200000 	.word	0x40200000
 800cc28:	3ff00000 	.word	0x3ff00000
 800cc2c:	3e700000 	.word	0x3e700000
 800cc30:	41700000 	.word	0x41700000
 800cc34:	3fe00000 	.word	0x3fe00000
 800cc38:	0800d848 	.word	0x0800d848
 800cc3c:	f854 3b04 	ldr.w	r3, [r4], #4
 800cc40:	b945      	cbnz	r5, 800cc54 <__kernel_rem_pio2+0x344>
 800cc42:	b123      	cbz	r3, 800cc4e <__kernel_rem_pio2+0x33e>
 800cc44:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800cc48:	f844 3c04 	str.w	r3, [r4, #-4]
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	3201      	adds	r2, #1
 800cc50:	461d      	mov	r5, r3
 800cc52:	e738      	b.n	800cac6 <__kernel_rem_pio2+0x1b6>
 800cc54:	1acb      	subs	r3, r1, r3
 800cc56:	e7f7      	b.n	800cc48 <__kernel_rem_pio2+0x338>
 800cc58:	f108 32ff 	add.w	r2, r8, #4294967295
 800cc5c:	ab0c      	add	r3, sp, #48	@ 0x30
 800cc5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc62:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cc66:	a90c      	add	r1, sp, #48	@ 0x30
 800cc68:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cc6c:	e739      	b.n	800cae2 <__kernel_rem_pio2+0x1d2>
 800cc6e:	f108 32ff 	add.w	r2, r8, #4294967295
 800cc72:	ab0c      	add	r3, sp, #48	@ 0x30
 800cc74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc78:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cc7c:	e7f3      	b.n	800cc66 <__kernel_rem_pio2+0x356>
 800cc7e:	a90c      	add	r1, sp, #48	@ 0x30
 800cc80:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cc84:	3b01      	subs	r3, #1
 800cc86:	430a      	orrs	r2, r1
 800cc88:	e787      	b.n	800cb9a <__kernel_rem_pio2+0x28a>
 800cc8a:	3401      	adds	r4, #1
 800cc8c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cc90:	2a00      	cmp	r2, #0
 800cc92:	d0fa      	beq.n	800cc8a <__kernel_rem_pio2+0x37a>
 800cc94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc96:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cc9a:	eb0d 0503 	add.w	r5, sp, r3
 800cc9e:	9b06      	ldr	r3, [sp, #24]
 800cca0:	aa20      	add	r2, sp, #128	@ 0x80
 800cca2:	4443      	add	r3, r8
 800cca4:	f108 0701 	add.w	r7, r8, #1
 800cca8:	3d98      	subs	r5, #152	@ 0x98
 800ccaa:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800ccae:	4444      	add	r4, r8
 800ccb0:	42bc      	cmp	r4, r7
 800ccb2:	da04      	bge.n	800ccbe <__kernel_rem_pio2+0x3ae>
 800ccb4:	46a0      	mov	r8, r4
 800ccb6:	e6a2      	b.n	800c9fe <__kernel_rem_pio2+0xee>
 800ccb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ccba:	2401      	movs	r4, #1
 800ccbc:	e7e6      	b.n	800cc8c <__kernel_rem_pio2+0x37c>
 800ccbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ccc0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800ccc4:	f7f3 fc36 	bl	8000534 <__aeabi_i2d>
 800ccc8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800cf90 <__kernel_rem_pio2+0x680>
 800cccc:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ccd0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ccd4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ccd8:	46b2      	mov	sl, r6
 800ccda:	f04f 0800 	mov.w	r8, #0
 800ccde:	9b05      	ldr	r3, [sp, #20]
 800cce0:	4598      	cmp	r8, r3
 800cce2:	dd05      	ble.n	800ccf0 <__kernel_rem_pio2+0x3e0>
 800cce4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cce8:	3701      	adds	r7, #1
 800ccea:	eca5 7b02 	vstmia	r5!, {d7}
 800ccee:	e7df      	b.n	800ccb0 <__kernel_rem_pio2+0x3a0>
 800ccf0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800ccf4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ccf8:	f7f3 fc86 	bl	8000608 <__aeabi_dmul>
 800ccfc:	4602      	mov	r2, r0
 800ccfe:	460b      	mov	r3, r1
 800cd00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd04:	f7f3 faca 	bl	800029c <__adddf3>
 800cd08:	f108 0801 	add.w	r8, r8, #1
 800cd0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd10:	e7e5      	b.n	800ccde <__kernel_rem_pio2+0x3ce>
 800cd12:	f1cb 0000 	rsb	r0, fp, #0
 800cd16:	ec47 6b10 	vmov	d0, r6, r7
 800cd1a:	f000 f951 	bl	800cfc0 <scalbn>
 800cd1e:	ec55 4b10 	vmov	r4, r5, d0
 800cd22:	4b9d      	ldr	r3, [pc, #628]	@ (800cf98 <__kernel_rem_pio2+0x688>)
 800cd24:	2200      	movs	r2, #0
 800cd26:	4620      	mov	r0, r4
 800cd28:	4629      	mov	r1, r5
 800cd2a:	f7f3 fef3 	bl	8000b14 <__aeabi_dcmpge>
 800cd2e:	b300      	cbz	r0, 800cd72 <__kernel_rem_pio2+0x462>
 800cd30:	4b9a      	ldr	r3, [pc, #616]	@ (800cf9c <__kernel_rem_pio2+0x68c>)
 800cd32:	2200      	movs	r2, #0
 800cd34:	4620      	mov	r0, r4
 800cd36:	4629      	mov	r1, r5
 800cd38:	f7f3 fc66 	bl	8000608 <__aeabi_dmul>
 800cd3c:	f7f3 ff14 	bl	8000b68 <__aeabi_d2iz>
 800cd40:	4606      	mov	r6, r0
 800cd42:	f7f3 fbf7 	bl	8000534 <__aeabi_i2d>
 800cd46:	4b94      	ldr	r3, [pc, #592]	@ (800cf98 <__kernel_rem_pio2+0x688>)
 800cd48:	2200      	movs	r2, #0
 800cd4a:	f7f3 fc5d 	bl	8000608 <__aeabi_dmul>
 800cd4e:	460b      	mov	r3, r1
 800cd50:	4602      	mov	r2, r0
 800cd52:	4629      	mov	r1, r5
 800cd54:	4620      	mov	r0, r4
 800cd56:	f7f3 fa9f 	bl	8000298 <__aeabi_dsub>
 800cd5a:	f7f3 ff05 	bl	8000b68 <__aeabi_d2iz>
 800cd5e:	ab0c      	add	r3, sp, #48	@ 0x30
 800cd60:	f10b 0b18 	add.w	fp, fp, #24
 800cd64:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800cd68:	f108 0801 	add.w	r8, r8, #1
 800cd6c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800cd70:	e722      	b.n	800cbb8 <__kernel_rem_pio2+0x2a8>
 800cd72:	4620      	mov	r0, r4
 800cd74:	4629      	mov	r1, r5
 800cd76:	f7f3 fef7 	bl	8000b68 <__aeabi_d2iz>
 800cd7a:	ab0c      	add	r3, sp, #48	@ 0x30
 800cd7c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800cd80:	e71a      	b.n	800cbb8 <__kernel_rem_pio2+0x2a8>
 800cd82:	ab0c      	add	r3, sp, #48	@ 0x30
 800cd84:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cd88:	f7f3 fbd4 	bl	8000534 <__aeabi_i2d>
 800cd8c:	4622      	mov	r2, r4
 800cd8e:	462b      	mov	r3, r5
 800cd90:	f7f3 fc3a 	bl	8000608 <__aeabi_dmul>
 800cd94:	4652      	mov	r2, sl
 800cd96:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800cd9a:	465b      	mov	r3, fp
 800cd9c:	4620      	mov	r0, r4
 800cd9e:	4629      	mov	r1, r5
 800cda0:	f7f3 fc32 	bl	8000608 <__aeabi_dmul>
 800cda4:	3e01      	subs	r6, #1
 800cda6:	4604      	mov	r4, r0
 800cda8:	460d      	mov	r5, r1
 800cdaa:	e718      	b.n	800cbde <__kernel_rem_pio2+0x2ce>
 800cdac:	9906      	ldr	r1, [sp, #24]
 800cdae:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800cdb2:	9106      	str	r1, [sp, #24]
 800cdb4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800cdb8:	f7f3 fc26 	bl	8000608 <__aeabi_dmul>
 800cdbc:	4602      	mov	r2, r0
 800cdbe:	460b      	mov	r3, r1
 800cdc0:	4650      	mov	r0, sl
 800cdc2:	4659      	mov	r1, fp
 800cdc4:	f7f3 fa6a 	bl	800029c <__adddf3>
 800cdc8:	3601      	adds	r6, #1
 800cdca:	4682      	mov	sl, r0
 800cdcc:	468b      	mov	fp, r1
 800cdce:	9b00      	ldr	r3, [sp, #0]
 800cdd0:	429e      	cmp	r6, r3
 800cdd2:	dc01      	bgt.n	800cdd8 <__kernel_rem_pio2+0x4c8>
 800cdd4:	42b5      	cmp	r5, r6
 800cdd6:	dae9      	bge.n	800cdac <__kernel_rem_pio2+0x49c>
 800cdd8:	ab48      	add	r3, sp, #288	@ 0x120
 800cdda:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800cdde:	e9c5 ab00 	strd	sl, fp, [r5]
 800cde2:	3c01      	subs	r4, #1
 800cde4:	e6ff      	b.n	800cbe6 <__kernel_rem_pio2+0x2d6>
 800cde6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800cde8:	2b02      	cmp	r3, #2
 800cdea:	dc0b      	bgt.n	800ce04 <__kernel_rem_pio2+0x4f4>
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	dc39      	bgt.n	800ce64 <__kernel_rem_pio2+0x554>
 800cdf0:	d05d      	beq.n	800ceae <__kernel_rem_pio2+0x59e>
 800cdf2:	9b02      	ldr	r3, [sp, #8]
 800cdf4:	f003 0007 	and.w	r0, r3, #7
 800cdf8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800cdfc:	ecbd 8b02 	vpop	{d8}
 800ce00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce04:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800ce06:	2b03      	cmp	r3, #3
 800ce08:	d1f3      	bne.n	800cdf2 <__kernel_rem_pio2+0x4e2>
 800ce0a:	9b05      	ldr	r3, [sp, #20]
 800ce0c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ce10:	eb0d 0403 	add.w	r4, sp, r3
 800ce14:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800ce18:	4625      	mov	r5, r4
 800ce1a:	46c2      	mov	sl, r8
 800ce1c:	f1ba 0f00 	cmp.w	sl, #0
 800ce20:	f1a5 0508 	sub.w	r5, r5, #8
 800ce24:	dc6b      	bgt.n	800cefe <__kernel_rem_pio2+0x5ee>
 800ce26:	4645      	mov	r5, r8
 800ce28:	2d01      	cmp	r5, #1
 800ce2a:	f1a4 0408 	sub.w	r4, r4, #8
 800ce2e:	f300 8087 	bgt.w	800cf40 <__kernel_rem_pio2+0x630>
 800ce32:	9c05      	ldr	r4, [sp, #20]
 800ce34:	ab48      	add	r3, sp, #288	@ 0x120
 800ce36:	441c      	add	r4, r3
 800ce38:	2000      	movs	r0, #0
 800ce3a:	2100      	movs	r1, #0
 800ce3c:	f1b8 0f01 	cmp.w	r8, #1
 800ce40:	f300 809c 	bgt.w	800cf7c <__kernel_rem_pio2+0x66c>
 800ce44:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800ce48:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800ce4c:	f1b9 0f00 	cmp.w	r9, #0
 800ce50:	f040 80a6 	bne.w	800cfa0 <__kernel_rem_pio2+0x690>
 800ce54:	9b04      	ldr	r3, [sp, #16]
 800ce56:	e9c3 7800 	strd	r7, r8, [r3]
 800ce5a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800ce5e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ce62:	e7c6      	b.n	800cdf2 <__kernel_rem_pio2+0x4e2>
 800ce64:	9d05      	ldr	r5, [sp, #20]
 800ce66:	ab48      	add	r3, sp, #288	@ 0x120
 800ce68:	441d      	add	r5, r3
 800ce6a:	4644      	mov	r4, r8
 800ce6c:	2000      	movs	r0, #0
 800ce6e:	2100      	movs	r1, #0
 800ce70:	2c00      	cmp	r4, #0
 800ce72:	da35      	bge.n	800cee0 <__kernel_rem_pio2+0x5d0>
 800ce74:	f1b9 0f00 	cmp.w	r9, #0
 800ce78:	d038      	beq.n	800ceec <__kernel_rem_pio2+0x5dc>
 800ce7a:	4602      	mov	r2, r0
 800ce7c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ce80:	9c04      	ldr	r4, [sp, #16]
 800ce82:	e9c4 2300 	strd	r2, r3, [r4]
 800ce86:	4602      	mov	r2, r0
 800ce88:	460b      	mov	r3, r1
 800ce8a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800ce8e:	f7f3 fa03 	bl	8000298 <__aeabi_dsub>
 800ce92:	ad4a      	add	r5, sp, #296	@ 0x128
 800ce94:	2401      	movs	r4, #1
 800ce96:	45a0      	cmp	r8, r4
 800ce98:	da2b      	bge.n	800cef2 <__kernel_rem_pio2+0x5e2>
 800ce9a:	f1b9 0f00 	cmp.w	r9, #0
 800ce9e:	d002      	beq.n	800cea6 <__kernel_rem_pio2+0x596>
 800cea0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cea4:	4619      	mov	r1, r3
 800cea6:	9b04      	ldr	r3, [sp, #16]
 800cea8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ceac:	e7a1      	b.n	800cdf2 <__kernel_rem_pio2+0x4e2>
 800ceae:	9c05      	ldr	r4, [sp, #20]
 800ceb0:	ab48      	add	r3, sp, #288	@ 0x120
 800ceb2:	441c      	add	r4, r3
 800ceb4:	2000      	movs	r0, #0
 800ceb6:	2100      	movs	r1, #0
 800ceb8:	f1b8 0f00 	cmp.w	r8, #0
 800cebc:	da09      	bge.n	800ced2 <__kernel_rem_pio2+0x5c2>
 800cebe:	f1b9 0f00 	cmp.w	r9, #0
 800cec2:	d002      	beq.n	800ceca <__kernel_rem_pio2+0x5ba>
 800cec4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cec8:	4619      	mov	r1, r3
 800ceca:	9b04      	ldr	r3, [sp, #16]
 800cecc:	e9c3 0100 	strd	r0, r1, [r3]
 800ced0:	e78f      	b.n	800cdf2 <__kernel_rem_pio2+0x4e2>
 800ced2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ced6:	f7f3 f9e1 	bl	800029c <__adddf3>
 800ceda:	f108 38ff 	add.w	r8, r8, #4294967295
 800cede:	e7eb      	b.n	800ceb8 <__kernel_rem_pio2+0x5a8>
 800cee0:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800cee4:	f7f3 f9da 	bl	800029c <__adddf3>
 800cee8:	3c01      	subs	r4, #1
 800ceea:	e7c1      	b.n	800ce70 <__kernel_rem_pio2+0x560>
 800ceec:	4602      	mov	r2, r0
 800ceee:	460b      	mov	r3, r1
 800cef0:	e7c6      	b.n	800ce80 <__kernel_rem_pio2+0x570>
 800cef2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800cef6:	f7f3 f9d1 	bl	800029c <__adddf3>
 800cefa:	3401      	adds	r4, #1
 800cefc:	e7cb      	b.n	800ce96 <__kernel_rem_pio2+0x586>
 800cefe:	ed95 7b00 	vldr	d7, [r5]
 800cf02:	ed8d 7b00 	vstr	d7, [sp]
 800cf06:	ed95 7b02 	vldr	d7, [r5, #8]
 800cf0a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf0e:	ec53 2b17 	vmov	r2, r3, d7
 800cf12:	ed8d 7b06 	vstr	d7, [sp, #24]
 800cf16:	f7f3 f9c1 	bl	800029c <__adddf3>
 800cf1a:	4602      	mov	r2, r0
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	4606      	mov	r6, r0
 800cf20:	460f      	mov	r7, r1
 800cf22:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf26:	f7f3 f9b7 	bl	8000298 <__aeabi_dsub>
 800cf2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800cf2e:	f7f3 f9b5 	bl	800029c <__adddf3>
 800cf32:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cf36:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800cf3a:	e9c5 6700 	strd	r6, r7, [r5]
 800cf3e:	e76d      	b.n	800ce1c <__kernel_rem_pio2+0x50c>
 800cf40:	ed94 7b00 	vldr	d7, [r4]
 800cf44:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800cf48:	ec51 0b17 	vmov	r0, r1, d7
 800cf4c:	4652      	mov	r2, sl
 800cf4e:	465b      	mov	r3, fp
 800cf50:	ed8d 7b00 	vstr	d7, [sp]
 800cf54:	f7f3 f9a2 	bl	800029c <__adddf3>
 800cf58:	4602      	mov	r2, r0
 800cf5a:	460b      	mov	r3, r1
 800cf5c:	4606      	mov	r6, r0
 800cf5e:	460f      	mov	r7, r1
 800cf60:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf64:	f7f3 f998 	bl	8000298 <__aeabi_dsub>
 800cf68:	4652      	mov	r2, sl
 800cf6a:	465b      	mov	r3, fp
 800cf6c:	f7f3 f996 	bl	800029c <__adddf3>
 800cf70:	3d01      	subs	r5, #1
 800cf72:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cf76:	e9c4 6700 	strd	r6, r7, [r4]
 800cf7a:	e755      	b.n	800ce28 <__kernel_rem_pio2+0x518>
 800cf7c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cf80:	f7f3 f98c 	bl	800029c <__adddf3>
 800cf84:	f108 38ff 	add.w	r8, r8, #4294967295
 800cf88:	e758      	b.n	800ce3c <__kernel_rem_pio2+0x52c>
 800cf8a:	bf00      	nop
 800cf8c:	f3af 8000 	nop.w
	...
 800cf98:	41700000 	.word	0x41700000
 800cf9c:	3e700000 	.word	0x3e700000
 800cfa0:	9b04      	ldr	r3, [sp, #16]
 800cfa2:	9a04      	ldr	r2, [sp, #16]
 800cfa4:	601f      	str	r7, [r3, #0]
 800cfa6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800cfaa:	605c      	str	r4, [r3, #4]
 800cfac:	609d      	str	r5, [r3, #8]
 800cfae:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cfb2:	60d3      	str	r3, [r2, #12]
 800cfb4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cfb8:	6110      	str	r0, [r2, #16]
 800cfba:	6153      	str	r3, [r2, #20]
 800cfbc:	e719      	b.n	800cdf2 <__kernel_rem_pio2+0x4e2>
 800cfbe:	bf00      	nop

0800cfc0 <scalbn>:
 800cfc0:	b570      	push	{r4, r5, r6, lr}
 800cfc2:	ec55 4b10 	vmov	r4, r5, d0
 800cfc6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800cfca:	4606      	mov	r6, r0
 800cfcc:	462b      	mov	r3, r5
 800cfce:	b991      	cbnz	r1, 800cff6 <scalbn+0x36>
 800cfd0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800cfd4:	4323      	orrs	r3, r4
 800cfd6:	d03d      	beq.n	800d054 <scalbn+0x94>
 800cfd8:	4b35      	ldr	r3, [pc, #212]	@ (800d0b0 <scalbn+0xf0>)
 800cfda:	4620      	mov	r0, r4
 800cfdc:	4629      	mov	r1, r5
 800cfde:	2200      	movs	r2, #0
 800cfe0:	f7f3 fb12 	bl	8000608 <__aeabi_dmul>
 800cfe4:	4b33      	ldr	r3, [pc, #204]	@ (800d0b4 <scalbn+0xf4>)
 800cfe6:	429e      	cmp	r6, r3
 800cfe8:	4604      	mov	r4, r0
 800cfea:	460d      	mov	r5, r1
 800cfec:	da0f      	bge.n	800d00e <scalbn+0x4e>
 800cfee:	a328      	add	r3, pc, #160	@ (adr r3, 800d090 <scalbn+0xd0>)
 800cff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cff4:	e01e      	b.n	800d034 <scalbn+0x74>
 800cff6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800cffa:	4291      	cmp	r1, r2
 800cffc:	d10b      	bne.n	800d016 <scalbn+0x56>
 800cffe:	4622      	mov	r2, r4
 800d000:	4620      	mov	r0, r4
 800d002:	4629      	mov	r1, r5
 800d004:	f7f3 f94a 	bl	800029c <__adddf3>
 800d008:	4604      	mov	r4, r0
 800d00a:	460d      	mov	r5, r1
 800d00c:	e022      	b.n	800d054 <scalbn+0x94>
 800d00e:	460b      	mov	r3, r1
 800d010:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800d014:	3936      	subs	r1, #54	@ 0x36
 800d016:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800d01a:	4296      	cmp	r6, r2
 800d01c:	dd0d      	ble.n	800d03a <scalbn+0x7a>
 800d01e:	2d00      	cmp	r5, #0
 800d020:	a11d      	add	r1, pc, #116	@ (adr r1, 800d098 <scalbn+0xd8>)
 800d022:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d026:	da02      	bge.n	800d02e <scalbn+0x6e>
 800d028:	a11d      	add	r1, pc, #116	@ (adr r1, 800d0a0 <scalbn+0xe0>)
 800d02a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d02e:	a31a      	add	r3, pc, #104	@ (adr r3, 800d098 <scalbn+0xd8>)
 800d030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d034:	f7f3 fae8 	bl	8000608 <__aeabi_dmul>
 800d038:	e7e6      	b.n	800d008 <scalbn+0x48>
 800d03a:	1872      	adds	r2, r6, r1
 800d03c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800d040:	428a      	cmp	r2, r1
 800d042:	dcec      	bgt.n	800d01e <scalbn+0x5e>
 800d044:	2a00      	cmp	r2, #0
 800d046:	dd08      	ble.n	800d05a <scalbn+0x9a>
 800d048:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d04c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d050:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d054:	ec45 4b10 	vmov	d0, r4, r5
 800d058:	bd70      	pop	{r4, r5, r6, pc}
 800d05a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800d05e:	da08      	bge.n	800d072 <scalbn+0xb2>
 800d060:	2d00      	cmp	r5, #0
 800d062:	a10b      	add	r1, pc, #44	@ (adr r1, 800d090 <scalbn+0xd0>)
 800d064:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d068:	dac1      	bge.n	800cfee <scalbn+0x2e>
 800d06a:	a10f      	add	r1, pc, #60	@ (adr r1, 800d0a8 <scalbn+0xe8>)
 800d06c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d070:	e7bd      	b.n	800cfee <scalbn+0x2e>
 800d072:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800d076:	3236      	adds	r2, #54	@ 0x36
 800d078:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800d07c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d080:	4620      	mov	r0, r4
 800d082:	4b0d      	ldr	r3, [pc, #52]	@ (800d0b8 <scalbn+0xf8>)
 800d084:	4629      	mov	r1, r5
 800d086:	2200      	movs	r2, #0
 800d088:	e7d4      	b.n	800d034 <scalbn+0x74>
 800d08a:	bf00      	nop
 800d08c:	f3af 8000 	nop.w
 800d090:	c2f8f359 	.word	0xc2f8f359
 800d094:	01a56e1f 	.word	0x01a56e1f
 800d098:	8800759c 	.word	0x8800759c
 800d09c:	7e37e43c 	.word	0x7e37e43c
 800d0a0:	8800759c 	.word	0x8800759c
 800d0a4:	fe37e43c 	.word	0xfe37e43c
 800d0a8:	c2f8f359 	.word	0xc2f8f359
 800d0ac:	81a56e1f 	.word	0x81a56e1f
 800d0b0:	43500000 	.word	0x43500000
 800d0b4:	ffff3cb0 	.word	0xffff3cb0
 800d0b8:	3c900000 	.word	0x3c900000
 800d0bc:	00000000 	.word	0x00000000

0800d0c0 <floor>:
 800d0c0:	ec51 0b10 	vmov	r0, r1, d0
 800d0c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d0c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0cc:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800d0d0:	2e13      	cmp	r6, #19
 800d0d2:	460c      	mov	r4, r1
 800d0d4:	4605      	mov	r5, r0
 800d0d6:	4680      	mov	r8, r0
 800d0d8:	dc34      	bgt.n	800d144 <floor+0x84>
 800d0da:	2e00      	cmp	r6, #0
 800d0dc:	da17      	bge.n	800d10e <floor+0x4e>
 800d0de:	a332      	add	r3, pc, #200	@ (adr r3, 800d1a8 <floor+0xe8>)
 800d0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e4:	f7f3 f8da 	bl	800029c <__adddf3>
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	f7f3 fd1c 	bl	8000b28 <__aeabi_dcmpgt>
 800d0f0:	b150      	cbz	r0, 800d108 <floor+0x48>
 800d0f2:	2c00      	cmp	r4, #0
 800d0f4:	da55      	bge.n	800d1a2 <floor+0xe2>
 800d0f6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800d0fa:	432c      	orrs	r4, r5
 800d0fc:	2500      	movs	r5, #0
 800d0fe:	42ac      	cmp	r4, r5
 800d100:	4c2b      	ldr	r4, [pc, #172]	@ (800d1b0 <floor+0xf0>)
 800d102:	bf08      	it	eq
 800d104:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800d108:	4621      	mov	r1, r4
 800d10a:	4628      	mov	r0, r5
 800d10c:	e023      	b.n	800d156 <floor+0x96>
 800d10e:	4f29      	ldr	r7, [pc, #164]	@ (800d1b4 <floor+0xf4>)
 800d110:	4137      	asrs	r7, r6
 800d112:	ea01 0307 	and.w	r3, r1, r7
 800d116:	4303      	orrs	r3, r0
 800d118:	d01d      	beq.n	800d156 <floor+0x96>
 800d11a:	a323      	add	r3, pc, #140	@ (adr r3, 800d1a8 <floor+0xe8>)
 800d11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d120:	f7f3 f8bc 	bl	800029c <__adddf3>
 800d124:	2200      	movs	r2, #0
 800d126:	2300      	movs	r3, #0
 800d128:	f7f3 fcfe 	bl	8000b28 <__aeabi_dcmpgt>
 800d12c:	2800      	cmp	r0, #0
 800d12e:	d0eb      	beq.n	800d108 <floor+0x48>
 800d130:	2c00      	cmp	r4, #0
 800d132:	bfbe      	ittt	lt
 800d134:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800d138:	4133      	asrlt	r3, r6
 800d13a:	18e4      	addlt	r4, r4, r3
 800d13c:	ea24 0407 	bic.w	r4, r4, r7
 800d140:	2500      	movs	r5, #0
 800d142:	e7e1      	b.n	800d108 <floor+0x48>
 800d144:	2e33      	cmp	r6, #51	@ 0x33
 800d146:	dd0a      	ble.n	800d15e <floor+0x9e>
 800d148:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800d14c:	d103      	bne.n	800d156 <floor+0x96>
 800d14e:	4602      	mov	r2, r0
 800d150:	460b      	mov	r3, r1
 800d152:	f7f3 f8a3 	bl	800029c <__adddf3>
 800d156:	ec41 0b10 	vmov	d0, r0, r1
 800d15a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d15e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800d162:	f04f 37ff 	mov.w	r7, #4294967295
 800d166:	40df      	lsrs	r7, r3
 800d168:	4207      	tst	r7, r0
 800d16a:	d0f4      	beq.n	800d156 <floor+0x96>
 800d16c:	a30e      	add	r3, pc, #56	@ (adr r3, 800d1a8 <floor+0xe8>)
 800d16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d172:	f7f3 f893 	bl	800029c <__adddf3>
 800d176:	2200      	movs	r2, #0
 800d178:	2300      	movs	r3, #0
 800d17a:	f7f3 fcd5 	bl	8000b28 <__aeabi_dcmpgt>
 800d17e:	2800      	cmp	r0, #0
 800d180:	d0c2      	beq.n	800d108 <floor+0x48>
 800d182:	2c00      	cmp	r4, #0
 800d184:	da0a      	bge.n	800d19c <floor+0xdc>
 800d186:	2e14      	cmp	r6, #20
 800d188:	d101      	bne.n	800d18e <floor+0xce>
 800d18a:	3401      	adds	r4, #1
 800d18c:	e006      	b.n	800d19c <floor+0xdc>
 800d18e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800d192:	2301      	movs	r3, #1
 800d194:	40b3      	lsls	r3, r6
 800d196:	441d      	add	r5, r3
 800d198:	4545      	cmp	r5, r8
 800d19a:	d3f6      	bcc.n	800d18a <floor+0xca>
 800d19c:	ea25 0507 	bic.w	r5, r5, r7
 800d1a0:	e7b2      	b.n	800d108 <floor+0x48>
 800d1a2:	2500      	movs	r5, #0
 800d1a4:	462c      	mov	r4, r5
 800d1a6:	e7af      	b.n	800d108 <floor+0x48>
 800d1a8:	8800759c 	.word	0x8800759c
 800d1ac:	7e37e43c 	.word	0x7e37e43c
 800d1b0:	bff00000 	.word	0xbff00000
 800d1b4:	000fffff 	.word	0x000fffff

0800d1b8 <_init>:
 800d1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1ba:	bf00      	nop
 800d1bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1be:	bc08      	pop	{r3}
 800d1c0:	469e      	mov	lr, r3
 800d1c2:	4770      	bx	lr

0800d1c4 <_fini>:
 800d1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1c6:	bf00      	nop
 800d1c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d1ca:	bc08      	pop	{r3}
 800d1cc:	469e      	mov	lr, r3
 800d1ce:	4770      	bx	lr
