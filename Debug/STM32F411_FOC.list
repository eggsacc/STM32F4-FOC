
STM32F411_FOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c630  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000488  0800c7d0  0800c7d0  0000d7d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc58  0800cc58  0000e258  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cc58  0800cc58  0000dc58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc60  0800cc60  0000e258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc60  0800cc60  0000dc60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cc64  0800cc64  0000dc64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000258  20000000  0800cc68  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  20000258  0800cec0  0000e258  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000076c  0800cec0  0000e76c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e258  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016007  00000000  00000000  0000e288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003137  00000000  00000000  0002428f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  000273c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef5  00000000  00000000  000286e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a36f  00000000  00000000  000295dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000184e3  00000000  00000000  0004394c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f8e7  00000000  00000000  0005be2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb716  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065e8  00000000  00000000  000fb75c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00101d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000258 	.word	0x20000258
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c7b8 	.word	0x0800c7b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000025c 	.word	0x2000025c
 80001dc:	0800c7b8 	.word	0x0800c7b8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <micros>:
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

__STATIC_INLINE uint32_t micros(void){
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8001034:	4b07      	ldr	r3, [pc, #28]	@ (8001054 <micros+0x24>)
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	4b07      	ldr	r3, [pc, #28]	@ (8001058 <micros+0x28>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4907      	ldr	r1, [pc, #28]	@ (800105c <micros+0x2c>)
 800103e:	fba1 1303 	umull	r1, r3, r1, r3
 8001042:	0c9b      	lsrs	r3, r3, #18
 8001044:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001048:	4618      	mov	r0, r3
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e0001000 	.word	0xe0001000
 8001058:	20000084 	.word	0x20000084
 800105c:	431bde83 	.word	0x431bde83

08001060 <AS5600_ReadRegister>:

/*
 * Static low level functions to read/write to registers
 */
__STATIC_INLINE HAL_StatusTypeDef AS5600_ReadRegister(AS5600 *dev, uint8_t reg, uint8_t *data)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af04      	add	r7, sp, #16
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	460b      	mov	r3, r1
 800106a:	607a      	str	r2, [r7, #4]
 800106c:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(dev->i2cHandle, AS5600_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	6818      	ldr	r0, [r3, #0]
 8001072:	7afb      	ldrb	r3, [r7, #11]
 8001074:	b29a      	uxth	r2, r3
 8001076:	2364      	movs	r3, #100	@ 0x64
 8001078:	9302      	str	r3, [sp, #8]
 800107a:	2301      	movs	r3, #1
 800107c:	9301      	str	r3, [sp, #4]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2301      	movs	r3, #1
 8001084:	216c      	movs	r1, #108	@ 0x6c
 8001086:	f003 fbe3 	bl	8004850 <HAL_I2C_Mem_Read>
 800108a:	4603      	mov	r3, r0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <AS5600_ReadRegisters>:

__STATIC_INLINE HAL_StatusTypeDef AS5600_ReadRegisters(AS5600 *dev, uint8_t reg, uint8_t *data, uint8_t length)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af04      	add	r7, sp, #16
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	461a      	mov	r2, r3
 80010a0:	460b      	mov	r3, r1
 80010a2:	72fb      	strb	r3, [r7, #11]
 80010a4:	4613      	mov	r3, r2
 80010a6:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(dev->i2cHandle, AS5600_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, data, length, 100);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	7afb      	ldrb	r3, [r7, #11]
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	7abb      	ldrb	r3, [r7, #10]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	2164      	movs	r1, #100	@ 0x64
 80010b6:	9102      	str	r1, [sp, #8]
 80010b8:	9301      	str	r3, [sp, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2301      	movs	r3, #1
 80010c0:	216c      	movs	r1, #108	@ 0x6c
 80010c2:	f003 fbc5 	bl	8004850 <HAL_I2C_Mem_Read>
 80010c6:	4603      	mov	r3, r0
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <AS5600_ReadRegisters_DMA>:
{
	return HAL_I2C_Mem_Read_DMA(dev->i2cHandle, AS5600_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, data, 1);
}

__STATIC_INLINE HAL_StatusTypeDef AS5600_ReadRegisters_DMA(AS5600 *dev, uint8_t reg, uint8_t *data, uint8_t length)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af02      	add	r7, sp, #8
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	461a      	mov	r2, r3
 80010dc:	460b      	mov	r3, r1
 80010de:	72fb      	strb	r3, [r7, #11]
 80010e0:	4613      	mov	r3, r2
 80010e2:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read_DMA(dev->i2cHandle, AS5600_I2C_ADD, reg, I2C_MEMADD_SIZE_8BIT, data, length);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	7afb      	ldrb	r3, [r7, #11]
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	7abb      	ldrb	r3, [r7, #10]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2301      	movs	r3, #1
 80010f8:	216c      	movs	r1, #108	@ 0x6c
 80010fa:	f003 fddb 	bl	8004cb4 <HAL_I2C_Mem_Read_DMA>
 80010fe:	4603      	mov	r3, r0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <AS5600_CheckSensor>:

__STATIC_INLINE HAL_StatusTypeDef AS5600_CheckSensor(AS5600* dev, uint32_t trials)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
	return HAL_I2C_IsDeviceReady(dev->i2cHandle, AS5600_I2C_ADD, trials, 1000);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6818      	ldr	r0, [r3, #0]
 8001116:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	216c      	movs	r1, #108	@ 0x6c
 800111e:	f003 ff59 	bl	8004fd4 <HAL_I2C_IsDeviceReady>
 8001122:	4603      	mov	r3, r0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <AS5600_ZeroAngle>:
/*
 * @brief Zeroes the sensor value.
 * @param[in] AS5600* sensor
 */
void AS5600_ZeroAngle(AS5600* dev)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
	dev->total_angle_rad = 0;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	609a      	str	r2, [r3, #8]
	dev->prev_raw_angle = AS5600_GetRawAngle_Blocking(dev);
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f000 f84d 	bl	80011dc <AS5600_GetRawAngle_Blocking>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	809a      	strh	r2, [r3, #4]
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <AS5600_Init>:
/*
 * Initialization
 * Pass the struct to each function as pointer
 */
uint8_t AS5600_Init(AS5600* dev, I2C_HandleTypeDef* i2c_handle)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b084      	sub	sp, #16
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	6039      	str	r1, [r7, #0]
	uint8_t init_status = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	73fb      	strb	r3, [r7, #15]

	/* Set struct params */
	dev->i2cHandle = i2c_handle;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	601a      	str	r2, [r3, #0]
	dev->total_angle_rad = 0;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	f04f 0200 	mov.w	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
	dev->prev_time_us = micros();
 800116e:	f7ff ff5f 	bl	8001030 <micros>
 8001172:	4602      	mov	r2, r0
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	60da      	str	r2, [r3, #12]
	dev->regdata[0] = 0;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	719a      	strb	r2, [r3, #6]
	dev->regdata[1] = 0;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2200      	movs	r2, #0
 8001182:	71da      	strb	r2, [r3, #7]

	HAL_StatusTypeDef sensor_status = AS5600_CheckSensor(dev, 10);
 8001184:	210a      	movs	r1, #10
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffbe 	bl	8001108 <AS5600_CheckSensor>
 800118c:	4603      	mov	r3, r0
 800118e:	73bb      	strb	r3, [r7, #14]

	if(sensor_status != HAL_OK)
 8001190:	7bbb      	ldrb	r3, [r7, #14]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d007      	beq.n	80011a6 <AS5600_Init+0x54>
	{
		dev->i2cHandle = NULL;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	601a      	str	r2, [r3, #0]
		return (init_status | AS5600_READY_MSK);
 800119c:	7bfb      	ldrb	r3, [r7, #15]
 800119e:	f043 0301 	orr.w	r3, r3, #1
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	e016      	b.n	80011d4 <AS5600_Init+0x82>
	}

	/* Check magnet strength */
	uint8_t magnet_status = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	737b      	strb	r3, [r7, #13]

	AS5600_ReadRegister(dev, MAGNET_STATUS_REG, &magnet_status);
 80011aa:	f107 030d 	add.w	r3, r7, #13
 80011ae:	461a      	mov	r2, r3
 80011b0:	210b      	movs	r1, #11
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ff54 	bl	8001060 <AS5600_ReadRegister>
	if((magnet_status & MAGNET_OK_MSK) == 0)
 80011b8:	7b7b      	ldrb	r3, [r7, #13]
 80011ba:	f003 0320 	and.w	r3, r3, #32
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d107      	bne.n	80011d2 <AS5600_Init+0x80>
	{
		dev->i2cHandle = NULL;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
		return (init_status | magnet_status);
 80011c8:	7b7a      	ldrb	r2, [r7, #13]
 80011ca:	7bfb      	ldrb	r3, [r7, #15]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	e000      	b.n	80011d4 <AS5600_Init+0x82>
	}

	return init_status;
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <AS5600_GetRawAngle_Blocking>:

/*
 * @brief Blocking function to read AS5600 sensor raw angle
 */
uint16_t AS5600_GetRawAngle_Blocking(AS5600* dev)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = AS5600_ReadRegisters(dev, RAW_ANGLE_MSB_REG, dev->regdata, 2);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	1d9a      	adds	r2, r3, #6
 80011e8:	2302      	movs	r3, #2
 80011ea:	210c      	movs	r1, #12
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ff51 	bl	8001094 <AS5600_ReadRegisters>
 80011f2:	4603      	mov	r3, r0
 80011f4:	73fb      	strb	r3, [r7, #15]

	if(status != HAL_OK)
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <AS5600_GetRawAngle_Blocking+0x24>
	{
		return 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	e00e      	b.n	800121e <AS5600_GetRawAngle_Blocking+0x42>
	}

	uint16_t raw_angle = (((dev->regdata[0] & 0x0F) << 8) | dev->regdata[1]);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	799b      	ldrb	r3, [r3, #6]
 8001204:	b21b      	sxth	r3, r3
 8001206:	021b      	lsls	r3, r3, #8
 8001208:	b21b      	sxth	r3, r3
 800120a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800120e:	b21a      	sxth	r2, r3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	79db      	ldrb	r3, [r3, #7]
 8001214:	b21b      	sxth	r3, r3
 8001216:	4313      	orrs	r3, r2
 8001218:	b21b      	sxth	r3, r3
 800121a:	81bb      	strh	r3, [r7, #12]
	return raw_angle;
 800121c:	89bb      	ldrh	r3, [r7, #12]
}
 800121e:	4618      	mov	r0, r3
 8001220:	3710      	adds	r7, #16
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <AS5600_UpdateAngle_DMA>:

/*
 * @brief Callback to start DMA transaction & update angle value
 */
void AS5600_UpdateAngle_DMA(AS5600 *dev)
{
 8001228:	b5b0      	push	{r4, r5, r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	if(dev == NULL) {
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	f000 8096 	beq.w	8001364 <AS5600_UpdateAngle_DMA+0x13c>
		return;
	}

	HAL_StatusTypeDef status = AS5600_ReadRegisters_DMA(dev, RAW_ANGLE_MSB_REG, dev->regdata, 2);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	1d9a      	adds	r2, r3, #6
 800123c:	2302      	movs	r3, #2
 800123e:	210c      	movs	r1, #12
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff45 	bl	80010d0 <AS5600_ReadRegisters_DMA>
 8001246:	4603      	mov	r3, r0
 8001248:	73fb      	strb	r3, [r7, #15]

	/* Return early if register read fails */
	if(status != HAL_OK) {
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	2b00      	cmp	r3, #0
 800124e:	f040 808b 	bne.w	8001368 <AS5600_UpdateAngle_DMA+0x140>
		return;
	}

	/* Mask & shift 4 MSB left by 8 and concatenate with 8 LSBs */
	uint16_t raw_angle = (((dev->regdata[0] & 0x0F) << 8) | dev->regdata[1]);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	799b      	ldrb	r3, [r3, #6]
 8001256:	b21b      	sxth	r3, r3
 8001258:	021b      	lsls	r3, r3, #8
 800125a:	b21b      	sxth	r3, r3
 800125c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001260:	b21a      	sxth	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	79db      	ldrb	r3, [r3, #7]
 8001266:	b21b      	sxth	r3, r3
 8001268:	4313      	orrs	r3, r2
 800126a:	b21b      	sxth	r3, r3
 800126c:	81bb      	strh	r3, [r7, #12]

	/* Calculate angle delta from previous angle */
	int16_t delta = raw_angle - dev->prev_raw_angle;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	889b      	ldrh	r3, [r3, #4]
 8001272:	89ba      	ldrh	r2, [r7, #12]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	b29b      	uxth	r3, r3
 8001278:	817b      	strh	r3, [r7, #10]

	/*
	 * Positive large delta -> negative overflow
	 * Negative large delta -> positive overflow
	 */
	if(delta > HALF_MAX_RESOLUTION) {
 800127a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800127e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001282:	db23      	blt.n	80012cc <AS5600_UpdateAngle_DMA+0xa4>
		dev->total_angle_rad -= (MAX_RESOLUTION - delta) * BIT_TO_RAD;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff f965 	bl	8000558 <__aeabi_f2d>
 800128e:	4604      	mov	r4, r0
 8001290:	460d      	mov	r5, r1
 8001292:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001296:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 800129a:	330f      	adds	r3, #15
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff f949 	bl	8000534 <__aeabi_i2d>
 80012a2:	a333      	add	r3, pc, #204	@ (adr r3, 8001370 <AS5600_UpdateAngle_DMA+0x148>)
 80012a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a8:	f7ff f9ae 	bl	8000608 <__aeabi_dmul>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4620      	mov	r0, r4
 80012b2:	4629      	mov	r1, r5
 80012b4:	f7fe fff0 	bl	8000298 <__aeabi_dsub>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4610      	mov	r0, r2
 80012be:	4619      	mov	r1, r3
 80012c0:	f7ff fc9a 	bl	8000bf8 <__aeabi_d2f>
 80012c4:	4602      	mov	r2, r0
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	609a      	str	r2, [r3, #8]
 80012ca:	e047      	b.n	800135c <AS5600_UpdateAngle_DMA+0x134>
	}
	else if(delta < -HALF_MAX_RESOLUTION) {
 80012cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012d0:	f513 6f00 	cmn.w	r3, #2048	@ 0x800
 80012d4:	dc22      	bgt.n	800131c <AS5600_UpdateAngle_DMA+0xf4>
		dev->total_angle_rad += (MAX_RESOLUTION + delta) * BIT_TO_RAD;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f93c 	bl	8000558 <__aeabi_f2d>
 80012e0:	4604      	mov	r4, r0
 80012e2:	460d      	mov	r5, r1
 80012e4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80012e8:	f603 73ff 	addw	r3, r3, #4095	@ 0xfff
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff f921 	bl	8000534 <__aeabi_i2d>
 80012f2:	a31f      	add	r3, pc, #124	@ (adr r3, 8001370 <AS5600_UpdateAngle_DMA+0x148>)
 80012f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f8:	f7ff f986 	bl	8000608 <__aeabi_dmul>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4620      	mov	r0, r4
 8001302:	4629      	mov	r1, r5
 8001304:	f7fe ffca 	bl	800029c <__adddf3>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f7ff fc72 	bl	8000bf8 <__aeabi_d2f>
 8001314:	4602      	mov	r2, r0
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	e01f      	b.n	800135c <AS5600_UpdateAngle_DMA+0x134>
	}
	else {
		dev->total_angle_rad += delta * BIT_TO_RAD;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f919 	bl	8000558 <__aeabi_f2d>
 8001326:	4604      	mov	r4, r0
 8001328:	460d      	mov	r5, r1
 800132a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f900 	bl	8000534 <__aeabi_i2d>
 8001334:	a30e      	add	r3, pc, #56	@ (adr r3, 8001370 <AS5600_UpdateAngle_DMA+0x148>)
 8001336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133a:	f7ff f965 	bl	8000608 <__aeabi_dmul>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4620      	mov	r0, r4
 8001344:	4629      	mov	r1, r5
 8001346:	f7fe ffa9 	bl	800029c <__adddf3>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4610      	mov	r0, r2
 8001350:	4619      	mov	r1, r3
 8001352:	f7ff fc51 	bl	8000bf8 <__aeabi_d2f>
 8001356:	4602      	mov	r2, r0
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	609a      	str	r2, [r3, #8]
	}

	dev->prev_raw_angle = raw_angle;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	89ba      	ldrh	r2, [r7, #12]
 8001360:	809a      	strh	r2, [r3, #4]
 8001362:	e002      	b.n	800136a <AS5600_UpdateAngle_DMA+0x142>
		return;
 8001364:	bf00      	nop
 8001366:	e000      	b.n	800136a <AS5600_UpdateAngle_DMA+0x142>
		return;
 8001368:	bf00      	nop
}
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bdb0      	pop	{r4, r5, r7, pc}
 8001370:	8b5cd7aa 	.word	0x8b5cd7aa
 8001374:	3f59238d 	.word	0x3f59238d

08001378 <AS5600_GetAngle>:

float AS5600_GetAngle(AS5600* dev)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
	return dev->total_angle_rad;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	689b      	ldr	r3, [r3, #8]
 8001384:	ee07 3a90 	vmov	s15, r3
}
 8001388:	eeb0 0a67 	vmov.f32	s0, s15
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <CLPositionControl>:
 * @param[in] float target_pos (in radians)
 * @note Returns if sensor not attached
 * @note Uses P control of PID
 */
void CLPositionControl(BLDCMotor* motor, float target_pos)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	ed87 0a00 	vstr	s0, [r7]
	/* Check if motor has an encoder */
	if(motor->sensor == NULL)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d031      	beq.n	800140e <CLPositionControl+0x78>
	{
		return;
	}

	/* Sets the PID controller to P-mode */
	if(motor->pid.mode != P)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d003      	beq.n	80013bc <CLPositionControl+0x26>
	{
		motor->pid.mode = P;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
	}
//	float Kp = 0.8;
	motor->vars.shaft_angle = AS5600_GetAngle(motor->sensor);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ffd9 	bl	8001378 <AS5600_GetAngle>
 80013c6:	eef0 7a40 	vmov.f32	s15, s0
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	edc3 7a05 	vstr	s15, [r3, #20]
	motor->dq.Uq = PID_Compute(&(motor->pid), target_pos, motor->sensor_dir * motor->vars.shaft_angle);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f993 3000 	ldrsb.w	r3, [r3]
 80013dc:	ee07 3a90 	vmov	s15, r3
 80013e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80013ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ee:	eef0 0a67 	vmov.f32	s1, s15
 80013f2:	ed97 0a00 	vldr	s0, [r7]
 80013f6:	4610      	mov	r0, r2
 80013f8:	f001 f852 	bl	80024a0 <PID_Compute>
 80013fc:	eef0 7a40 	vmov.f32	s15, s0
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
//	motor->dq.Uq = Kp * (target_pos - (motor->sensor_dir * motor->vars.shaft_angle));
	SetTorque(motor);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 f9fa 	bl	8001800 <SetTorque>
 800140c:	e000      	b.n	8001410 <CLPositionControl+0x7a>
		return;
 800140e:	bf00      	nop
}
 8001410:	3708      	adds	r7, #8
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <_cos>:
/*
 * @brief Cosine approximation
 * @param[in] angle(radians)
 * @return cos(angle)
 */
__STATIC_INLINE float _cos(float angle) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	ed87 0a01 	vstr	s0, [r7, #4]
  float _angle = angle + _PI_2;
 8001422:	edd7 7a01 	vldr	s15, [r7, #4]
 8001426:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001470 <_cos+0x58>
 800142a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800142e:	edc7 7a03 	vstr	s15, [r7, #12]
  _angle = _angle > _2PI ? _angle - _2PI : _angle;
 8001432:	edd7 7a03 	vldr	s15, [r7, #12]
 8001436:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001474 <_cos+0x5c>
 800143a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800143e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001442:	dd06      	ble.n	8001452 <_cos+0x3a>
 8001444:	edd7 7a03 	vldr	s15, [r7, #12]
 8001448:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001474 <_cos+0x5c>
 800144c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001450:	e001      	b.n	8001456 <_cos+0x3e>
 8001452:	edd7 7a03 	vldr	s15, [r7, #12]
 8001456:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(_angle);
 800145a:	ed97 0a03 	vldr	s0, [r7, #12]
 800145e:	f000 faad 	bl	80019bc <_sin>
 8001462:	eef0 7a40 	vmov.f32	s15, s0
}
 8001466:	eeb0 0a67 	vmov.f32	s0, s15
 800146a:	3710      	adds	r7, #16
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	3fc90fdb 	.word	0x3fc90fdb
 8001474:	40c90fdb 	.word	0x40c90fdb

08001478 <_normalizeAngle>:
/*
 * @brief Normalize angle to [0, 2pi]
 * @param[in] angle(radians)
 * @return normalized_angle
 */
__STATIC_INLINE float _normalizeAngle(float angle){
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff f868 	bl	8000558 <__aeabi_f2d>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	ed9f 1b12 	vldr	d1, [pc, #72]	@ 80014d8 <_normalizeAngle+0x60>
 8001490:	ec43 2b10 	vmov	d0, r2, r3
 8001494:	f00b f85a 	bl	800c54c <fmod>
 8001498:	ec53 2b10 	vmov	r2, r3, d0
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	f7ff fbaa 	bl	8000bf8 <__aeabi_d2f>
 80014a4:	4603      	mov	r3, r0
 80014a6:	60fb      	str	r3, [r7, #12]

  /* Add 2pi to negative values to make positive */
  return a >= 0 ? a : (a + _2PI);
 80014a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b4:	db02      	blt.n	80014bc <_normalizeAngle+0x44>
 80014b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ba:	e005      	b.n	80014c8 <_normalizeAngle+0x50>
 80014bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80014c0:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80014e0 <_normalizeAngle+0x68>
 80014c4:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 80014c8:	eeb0 0a67 	vmov.f32	s0, s15
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	f3af 8000 	nop.w
 80014d8:	60000000 	.word	0x60000000
 80014dc:	401921fb 	.word	0x401921fb
 80014e0:	40c90fdb 	.word	0x40c90fdb

080014e4 <_electricalAngle>:
 * @brief Calculates electrical angle from rotor angle
 * @param[in] shaft_angle(radians)
 * @param[in] pole_pairs
 * @return electrical angle
 */
__STATIC_INLINE float _electricalAngle(float shaft_angle, uint8_t pole_pairs){
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80014ee:	4603      	mov	r3, r0
 80014f0:	70fb      	strb	r3, [r7, #3]
  return shaft_angle * pole_pairs;
 80014f2:	78fb      	ldrb	r3, [r7, #3]
 80014f4:	ee07 3a90 	vmov	s15, r3
 80014f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001500:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001504:	eeb0 0a67 	vmov.f32	s0, s15
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <PWM_Start_3_Channel>:
/*
 * @brief Starts PWM channels 1, 2, 3 of specified timer.
 * @param[in] TIM_HandleTypeDef timer
 */
void PWM_Start_3_Channel(TIM_HandleTypeDef* timer)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(timer, TIM_CHANNEL_1);
 800151a:	2100      	movs	r1, #0
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f004 fff9 	bl	8006514 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer, TIM_CHANNEL_2);
 8001522:	2104      	movs	r1, #4
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f004 fff5 	bl	8006514 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(timer, TIM_CHANNEL_3);
 800152a:	2108      	movs	r1, #8
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f004 fff1 	bl	8006514 <HAL_TIM_PWM_Start>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <SetPWM>:
 * @scope static
 * @brief Set pwm duty cycle of timer channels
 * @param[in] BLDCMotor* motor
 */
__STATIC_INLINE void SetPWM(BLDCMotor* motor)
{
 800153a:	b480      	push	{r7}
 800153c:	b085      	sub	sp, #20
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
	uint32_t ARR = motor->timer->Instance->ARR;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800154a:	60fb      	str	r3, [r7, #12]
	motor->timer->Instance->CCR1 = (motor->pv.Ua / motor->supply_voltage) * ARR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	edd3 7a02 	vldr	s15, [r3, #8]
 8001558:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	ee07 3a90 	vmov	s15, r3
 8001562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001574:	ee17 2a90 	vmov	r2, s15
 8001578:	635a      	str	r2, [r3, #52]	@ 0x34
	motor->timer->Instance->CCR2 = (motor->pv.Ub / motor->supply_voltage) * ARR;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	edd3 7a02 	vldr	s15, [r3, #8]
 8001586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	ee07 3a90 	vmov	s15, r3
 8001590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001594:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015a2:	ee17 2a90 	vmov	r2, s15
 80015a6:	639a      	str	r2, [r3, #56]	@ 0x38
	motor->timer->Instance->CCR3 = (motor->pv.Uc / motor->supply_voltage) * ARR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	edd3 6a0d 	vldr	s13, [r3, #52]	@ 0x34
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	edd3 7a02 	vldr	s15, [r3, #8]
 80015b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	ee07 3a90 	vmov	s15, r3
 80015be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015d0:	ee17 2a90 	vmov	r2, s15
 80015d4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80015d6:	bf00      	nop
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <BLDC_UpdateMotorADC_DMA>:

/*
 * @brief Update motor struct ADC values from ADC buffer
 */
void BLDC_UpdateMotorADC_DMA()
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
	if(BLDCMotorArray[0] != NULL)
 80015e8:	4b10      	ldr	r3, [pc, #64]	@ (800162c <BLDC_UpdateMotorADC_DMA+0x48>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d009      	beq.n	8001604 <BLDC_UpdateMotorADC_DMA+0x20>
	{
		BLDCMotorArray[0]->vars.phase_current[0] = ADC_buff[0];
 80015f0:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <BLDC_UpdateMotorADC_DMA+0x48>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001630 <BLDC_UpdateMotorADC_DMA+0x4c>)
 80015f6:	6812      	ldr	r2, [r2, #0]
 80015f8:	61da      	str	r2, [r3, #28]
		BLDCMotorArray[0]->vars.phase_current[1] = ADC_buff[1];
 80015fa:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <BLDC_UpdateMotorADC_DMA+0x48>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a0c      	ldr	r2, [pc, #48]	@ (8001630 <BLDC_UpdateMotorADC_DMA+0x4c>)
 8001600:	6852      	ldr	r2, [r2, #4]
 8001602:	621a      	str	r2, [r3, #32]
	}
	if(BLDCMotorArray[1] != NULL)
 8001604:	4b09      	ldr	r3, [pc, #36]	@ (800162c <BLDC_UpdateMotorADC_DMA+0x48>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d009      	beq.n	8001620 <BLDC_UpdateMotorADC_DMA+0x3c>
	{
		BLDCMotorArray[1]->vars.phase_current[0] = ADC_buff[2];
 800160c:	4b07      	ldr	r3, [pc, #28]	@ (800162c <BLDC_UpdateMotorADC_DMA+0x48>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	4a07      	ldr	r2, [pc, #28]	@ (8001630 <BLDC_UpdateMotorADC_DMA+0x4c>)
 8001612:	6892      	ldr	r2, [r2, #8]
 8001614:	61da      	str	r2, [r3, #28]
		BLDCMotorArray[1]->vars.phase_current[1] = ADC_buff[3];
 8001616:	4b05      	ldr	r3, [pc, #20]	@ (800162c <BLDC_UpdateMotorADC_DMA+0x48>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	4a05      	ldr	r2, [pc, #20]	@ (8001630 <BLDC_UpdateMotorADC_DMA+0x4c>)
 800161c:	68d2      	ldr	r2, [r2, #12]
 800161e:	621a      	str	r2, [r3, #32]
	}
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000274 	.word	0x20000274
 8001630:	2000027c 	.word	0x2000027c

08001634 <Var_t_Init>:
 * @scope Static
 * @brief Initializers for motor sub-structs
 * @retval Struct_t struct
 */
static Var_t Var_t_Init()
{
 8001634:	b490      	push	{r4, r7}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	Var_t vars = {
 800163c:	f107 0308 	add.w	r3, r7, #8
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
		.prev_us = 0,
		.phase_current[0] = 0,
		.phase_current[1] = 0
	};

	return vars;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	461c      	mov	r4, r3
 800164e:	f107 0308 	add.w	r3, r7, #8
 8001652:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001654:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	3718      	adds	r7, #24
 800165c:	46bd      	mov	sp, r7
 800165e:	bc90      	pop	{r4, r7}
 8001660:	4770      	bx	lr

08001662 <DQ_t_Init>:

static DQ_t DQ_t_Init()
{
 8001662:	b480      	push	{r7}
 8001664:	b087      	sub	sp, #28
 8001666:	af00      	add	r7, sp, #0
	DQ_t dq = {
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
		.Ud = 0,
		.Uq = 0
	};

	return dq;
 8001674:	f107 0310 	add.w	r3, r7, #16
 8001678:	f107 0208 	add.w	r2, r7, #8
 800167c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001680:	e883 0003 	stmia.w	r3, {r0, r1}
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	ee07 2a10 	vmov	s14, r2
 800168c:	ee07 3a90 	vmov	s15, r3
}
 8001690:	eeb0 0a47 	vmov.f32	s0, s14
 8001694:	eef0 0a67 	vmov.f32	s1, s15
 8001698:	371c      	adds	r7, #28
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <PV_t_Init>:

static PV_t PV_t_Init()
{
 80016a2:	b480      	push	{r7}
 80016a4:	b08b      	sub	sp, #44	@ 0x2c
 80016a6:	af00      	add	r7, sp, #0
	PV_t pv = {
 80016a8:	f04f 0300 	mov.w	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	f04f 0300 	mov.w	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	61bb      	str	r3, [r7, #24]
		.Ua = 0,
		.Ub = 0,
		.Uc = 0
	};

	return pv;
 80016ba:	f107 031c 	add.w	r3, r7, #28
 80016be:	f107 0210 	add.w	r2, r7, #16
 80016c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80016c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80016c8:	69f9      	ldr	r1, [r7, #28]
 80016ca:	6a3a      	ldr	r2, [r7, #32]
 80016cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ce:	ee06 1a90 	vmov	s13, r1
 80016d2:	ee07 2a10 	vmov	s14, r2
 80016d6:	ee07 3a90 	vmov	s15, r3
}
 80016da:	eeb0 0a66 	vmov.f32	s0, s13
 80016de:	eef0 0a47 	vmov.f32	s1, s14
 80016e2:	eeb0 1a67 	vmov.f32	s2, s15
 80016e6:	372c      	adds	r7, #44	@ 0x2c
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <BLDCMotor_Init>:
 * - Voltage limit is 3V by default.
 *
 * @retval BLDCMotor motor
 */
void BLDCMotor_Init(BLDCMotor* motor, TIM_HandleTypeDef* timer, uint8_t pole_pairs)
{
 80016f0:	b5b0      	push	{r4, r5, r7, lr}
 80016f2:	b092      	sub	sp, #72	@ 0x48
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6478      	str	r0, [r7, #68]	@ 0x44
 80016f8:	6439      	str	r1, [r7, #64]	@ 0x40
 80016fa:	4613      	mov	r3, r2
 80016fc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	/* Store motor in motor array, to be referenced by other functions globally */
	if(BLDCMotorArray[0] == NULL)
 8001700:	4b3c      	ldr	r3, [pc, #240]	@ (80017f4 <BLDCMotor_Init+0x104>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d103      	bne.n	8001710 <BLDCMotor_Init+0x20>
	{
		BLDCMotorArray[0] = motor;
 8001708:	4a3a      	ldr	r2, [pc, #232]	@ (80017f4 <BLDCMotor_Init+0x104>)
 800170a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	e006      	b.n	800171e <BLDCMotor_Init+0x2e>
	}
	else if(BLDCMotorArray[1] == NULL)
 8001710:	4b38      	ldr	r3, [pc, #224]	@ (80017f4 <BLDCMotor_Init+0x104>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d168      	bne.n	80017ea <BLDCMotor_Init+0xfa>
	{
		BLDCMotorArray[1] = motor;
 8001718:	4a36      	ldr	r2, [pc, #216]	@ (80017f4 <BLDCMotor_Init+0x104>)
 800171a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800171c:	6053      	str	r3, [r2, #4]
	else
	{
		return;
	}

	motor->sensor_dir = 1;
 800171e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001720:	2201      	movs	r2, #1
 8001722:	701a      	strb	r2, [r3, #0]
	motor->pole_pairs = pole_pairs;
 8001724:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001726:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800172a:	705a      	strb	r2, [r3, #1]
	motor->vars.phase_current[0] = 0;
 800172c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
	motor->vars.phase_current[1] = 0;
 8001732:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]
	motor->voltage_limit = 3;
 8001738:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800173a:	4a2f      	ldr	r2, [pc, #188]	@ (80017f8 <BLDCMotor_Init+0x108>)
 800173c:	605a      	str	r2, [r3, #4]
	motor->supply_voltage = 12;
 800173e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001740:	4a2e      	ldr	r2, [pc, #184]	@ (80017fc <BLDCMotor_Init+0x10c>)
 8001742:	609a      	str	r2, [r3, #8]

	motor->target_velocity = 0;
 8001744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	60da      	str	r2, [r3, #12]
	motor->target_pos = 0;
 800174c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	611a      	str	r2, [r3, #16]

	motor->vars = Var_t_Init();
 8001754:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8001756:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff ff6a 	bl	8001634 <Var_t_Init>
 8001760:	3414      	adds	r4, #20
 8001762:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001766:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001768:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	motor->dq = DQ_t_Init();
 800176c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800176e:	f7ff ff78 	bl	8001662 <DQ_t_Init>
 8001772:	eeb0 7a40 	vmov.f32	s14, s0
 8001776:	eef0 7a60 	vmov.f32	s15, s1
 800177a:	ed84 7a09 	vstr	s14, [r4, #36]	@ 0x24
 800177e:	edc4 7a0a 	vstr	s15, [r4, #40]	@ 0x28
	motor->pv = PV_t_Init();
 8001782:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8001784:	f7ff ff8d 	bl	80016a2 <PV_t_Init>
 8001788:	eef0 6a40 	vmov.f32	s13, s0
 800178c:	eeb0 7a60 	vmov.f32	s14, s1
 8001790:	eef0 7a41 	vmov.f32	s15, s2
 8001794:	edc4 6a0b 	vstr	s13, [r4, #44]	@ 0x2c
 8001798:	ed84 7a0c 	vstr	s14, [r4, #48]	@ 0x30
 800179c:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
	motor->pid = PID_Init();
 80017a0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80017a2:	463b      	mov	r3, r7
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 fe57 	bl	8002458 <PID_Init>
 80017aa:	3438      	adds	r4, #56	@ 0x38
 80017ac:	463d      	mov	r5, r7
 80017ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017b6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80017ba:	e884 0003 	stmia.w	r4, {r0, r1}
	motor->lpf = LPF_Init();
 80017be:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80017c0:	463b      	mov	r3, r7
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 f97a 	bl	8001abc <LPF_Init>
 80017c8:	f104 0360 	add.w	r3, r4, #96	@ 0x60
 80017cc:	463a      	mov	r2, r7
 80017ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80017d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	motor->control = none;
 80017d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
	motor->sensor = NULL;
 80017dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017de:	2200      	movs	r2, #0
 80017e0:	671a      	str	r2, [r3, #112]	@ 0x70
	motor->timer = timer;
 80017e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80017e6:	675a      	str	r2, [r3, #116]	@ 0x74
 80017e8:	e000      	b.n	80017ec <BLDCMotor_Init+0xfc>
		return;
 80017ea:	bf00      	nop

}
 80017ec:	3748      	adds	r7, #72	@ 0x48
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bdb0      	pop	{r4, r5, r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000274 	.word	0x20000274
 80017f8:	40400000 	.word	0x40400000
 80017fc:	41400000 	.word	0x41400000

08001800 <SetTorque>:
/*
 * @brief Inverse Clarke & Park transformations to calculate phase voltages
 * @param[in] BLDCMotor* motor
 * @note Calls setpwm()
 */
void SetTorque(BLDCMotor* motor) {
 8001800:	b580      	push	{r7, lr}
 8001802:	ed2d 8b02 	vpush	{d8}
 8001806:	b088      	sub	sp, #32
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	/* Constrain Uq to within voltage range */
	motor->dq.Uq = _constrain(motor->dq.Uq, -motor->voltage_limit, motor->voltage_limit);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	edd3 7a01 	vldr	s15, [r3, #4]
 8001818:	eef1 7a67 	vneg.f32	s15, s15
 800181c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001824:	d505      	bpl.n	8001832 <SetTorque+0x32>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	edd3 7a01 	vldr	s15, [r3, #4]
 800182c:	eef1 7a67 	vneg.f32	s15, s15
 8001830:	e011      	b.n	8001856 <SetTorque+0x56>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	edd3 7a01 	vldr	s15, [r3, #4]
 800183e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001846:	dd03      	ble.n	8001850 <SetTorque+0x50>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	edd3 7a01 	vldr	s15, [r3, #4]
 800184e:	e002      	b.n	8001856 <SetTorque+0x56>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
    /* Normalize electric angle */
	/* Note that _normalizeAngle() works with floats, not fix16 */
    float el_angle = _normalizeAngle(_electricalAngle(motor->vars.shaft_angle, motor->pole_pairs));
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	785b      	ldrb	r3, [r3, #1]
 8001866:	4618      	mov	r0, r3
 8001868:	eeb0 0a67 	vmov.f32	s0, s15
 800186c:	f7ff fe3a 	bl	80014e4 <_electricalAngle>
 8001870:	eef0 7a40 	vmov.f32	s15, s0
 8001874:	eeb0 0a67 	vmov.f32	s0, s15
 8001878:	f7ff fdfe 	bl	8001478 <_normalizeAngle>
 800187c:	ed87 0a07 	vstr	s0, [r7, #28]

	/* Inverse park transform */
	float Ualpha = motor->dq.Uq * _cos(el_angle);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
 8001886:	ed97 0a07 	vldr	s0, [r7, #28]
 800188a:	f7ff fdc5 	bl	8001418 <_cos>
 800188e:	eef0 7a40 	vmov.f32	s15, s0
 8001892:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001896:	edc7 7a06 	vstr	s15, [r7, #24]
	float Ubeta = motor->dq.Uq * _sin(el_angle);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	ed93 8a09 	vldr	s16, [r3, #36]	@ 0x24
 80018a0:	ed97 0a07 	vldr	s0, [r7, #28]
 80018a4:	f000 f88a 	bl	80019bc <_sin>
 80018a8:	eef0 7a40 	vmov.f32	s15, s0
 80018ac:	ee68 7a27 	vmul.f32	s15, s16, s15
 80018b0:	edc7 7a05 	vstr	s15, [r7, #20]

	float half_supply_v = motor->supply_voltage / 2.0f;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80018ba:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80018be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c2:	edc7 7a04 	vstr	s15, [r7, #16]
	float sqrt3_beta = Ubeta * _SQRT3;
 80018c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80018ca:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001944 <SetTorque+0x144>
 80018ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d2:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Inverse Clarke transform */
	motor->pv.Ua = Ualpha + half_supply_v;
 80018d6:	ed97 7a06 	vldr	s14, [r7, #24]
 80018da:	edd7 7a04 	vldr	s15, [r7, #16]
 80018de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	motor->pv.Ub = ((sqrt3_beta - Ualpha) / 2.0f) + half_supply_v;
 80018e8:	ed97 7a03 	vldr	s14, [r7, #12]
 80018ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80018f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80018f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	motor->pv.Uc = ((-Ualpha - sqrt3_beta) / 2.0f) + half_supply_v;
 800190a:	edd7 7a06 	vldr	s15, [r7, #24]
 800190e:	eeb1 7a67 	vneg.f32	s14, s15
 8001912:	edd7 7a03 	vldr	s15, [r7, #12]
 8001916:	ee77 7a67 	vsub.f32	s15, s14, s15
 800191a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800191e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001922:	edd7 7a04 	vldr	s15, [r7, #16]
 8001926:	ee77 7a27 	vadd.f32	s15, s14, s15
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	SetPWM(motor);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff fe02 	bl	800153a <SetPWM>
}
 8001936:	bf00      	nop
 8001938:	3720      	adds	r7, #32
 800193a:	46bd      	mov	sp, r7
 800193c:	ecbd 8b02 	vpop	{d8}
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	3fddb3d7 	.word	0x3fddb3d7

08001948 <LinkSensor>:
 * @param[in] BLDCMotor* motor
 * @param[in] AS5600* sensor
 * @param[in] I2C_HandleTypeDef *i2c_handle
 */
void LinkSensor(BLDCMotor* motor, AS5600* sensor, I2C_HandleTypeDef *i2c_handle)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
	uint8_t init_stat = AS5600_Init(sensor, i2c_handle);
 8001954:	6879      	ldr	r1, [r7, #4]
 8001956:	68b8      	ldr	r0, [r7, #8]
 8001958:	f7ff fbfb 	bl	8001152 <AS5600_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	75fb      	strb	r3, [r7, #23]

	/* Check if sensor link successful */
	if(init_stat != 0)
 8001960:	7dfb      	ldrb	r3, [r7, #23]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <LinkSensor+0x26>
	{
		motor->sensor = NULL;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	671a      	str	r2, [r3, #112]	@ 0x70
		return;
 800196c:	e021      	b.n	80019b2 <LinkSensor+0x6a>
	}

	motor->sensor = sensor;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	68ba      	ldr	r2, [r7, #8]
 8001972:	671a      	str	r2, [r3, #112]	@ 0x70

	motor->dq.Uq = motor->voltage_limit;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	625a      	str	r2, [r3, #36]	@ 0x24
	motor->vars.shaft_angle = _3PI_2;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4a0e      	ldr	r2, [pc, #56]	@ (80019b8 <LinkSensor+0x70>)
 8001980:	615a      	str	r2, [r3, #20]
	SetTorque(motor);
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f7ff ff3c 	bl	8001800 <SetTorque>
	HAL_Delay(1500);
 8001988:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800198c:	f001 fb42 	bl	8003014 <HAL_Delay>
	AS5600_ZeroAngle(sensor);
 8001990:	68b8      	ldr	r0, [r7, #8]
 8001992:	f7ff fbcb 	bl	800112c <AS5600_ZeroAngle>
	motor->dq.Uq = 0;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	625a      	str	r2, [r3, #36]	@ 0x24
	motor->vars.shaft_angle = 0;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	615a      	str	r2, [r3, #20]
	SetTorque(motor);
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f7ff ff2a 	bl	8001800 <SetTorque>

	AS5600_UpdateAngle_DMA(sensor);
 80019ac:	68b8      	ldr	r0, [r7, #8]
 80019ae:	f7ff fc3b 	bl	8001228 <AS5600_UpdateAngle_DMA>
}
 80019b2:	3718      	adds	r7, #24
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	4096cbe4 	.word	0x4096cbe4

080019bc <_sin>:
/*
 * @brief Sine approximation using look-up table & linear interpolation
 * @param[in] angle(radians)
 * @return sin(angle)
 */
float _sin(float angle){
 80019bc:	b480      	push	{r7}
 80019be:	b087      	sub	sp, #28
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	ed87 0a01 	vstr	s0, [r7, #4]

   int32_t first, second;
   uint16_t index = (uint16_t)(angle / _2PI * 65536.0f);
 80019c6:	ed97 7a01 	vldr	s14, [r7, #4]
 80019ca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8001aac <_sin+0xf0>
 80019ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019d2:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8001ab0 <_sin+0xf4>
 80019d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019de:	ee17 3a90 	vmov	r3, s15
 80019e2:	81fb      	strh	r3, [r7, #14]
   int frac = index & 0xff;
 80019e4:	89fb      	ldrh	r3, [r7, #14]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	60bb      	str	r3, [r7, #8]
   index = (index >> 8) & 0xff;
 80019ea:	89fb      	ldrh	r3, [r7, #14]
 80019ec:	0a1b      	lsrs	r3, r3, #8
 80019ee:	81fb      	strh	r3, [r7, #14]

   if (index < 64){
 80019f0:	89fb      	ldrh	r3, [r7, #14]
 80019f2:	2b3f      	cmp	r3, #63	@ 0x3f
 80019f4:	d80b      	bhi.n	8001a0e <_sin+0x52>
     first = (int32_t)sineLUT[index];
 80019f6:	89fb      	ldrh	r3, [r7, #14]
 80019f8:	4a2e      	ldr	r2, [pc, #184]	@ (8001ab4 <_sin+0xf8>)
 80019fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019fe:	617b      	str	r3, [r7, #20]
     second = (int32_t)sineLUT[index + 1];
 8001a00:	89fb      	ldrh	r3, [r7, #14]
 8001a02:	3301      	adds	r3, #1
 8001a04:	4a2b      	ldr	r2, [pc, #172]	@ (8001ab4 <_sin+0xf8>)
 8001a06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a0a:	613b      	str	r3, [r7, #16]
 8001a0c:	e033      	b.n	8001a76 <_sin+0xba>
   }
   else if (index < 128){
 8001a0e:	89fb      	ldrh	r3, [r7, #14]
 8001a10:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a12:	d80e      	bhi.n	8001a32 <_sin+0x76>
     first = (int32_t)sineLUT[128 - index];
 8001a14:	89fb      	ldrh	r3, [r7, #14]
 8001a16:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001a1a:	4a26      	ldr	r2, [pc, #152]	@ (8001ab4 <_sin+0xf8>)
 8001a1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a20:	617b      	str	r3, [r7, #20]
     second = (int32_t)sineLUT[127 - index];
 8001a22:	89fb      	ldrh	r3, [r7, #14]
 8001a24:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8001a28:	4a22      	ldr	r2, [pc, #136]	@ (8001ab4 <_sin+0xf8>)
 8001a2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	e021      	b.n	8001a76 <_sin+0xba>
   }
   else if (index < 192){
 8001a32:	89fb      	ldrh	r3, [r7, #14]
 8001a34:	2bbf      	cmp	r3, #191	@ 0xbf
 8001a36:	d80e      	bhi.n	8001a56 <_sin+0x9a>
     first = -(int32_t)sineLUT[index - 128];
 8001a38:	89fb      	ldrh	r3, [r7, #14]
 8001a3a:	3b80      	subs	r3, #128	@ 0x80
 8001a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ab4 <_sin+0xf8>)
 8001a3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a42:	425b      	negs	r3, r3
 8001a44:	617b      	str	r3, [r7, #20]
     second = -(int32_t)sineLUT[index - 127];
 8001a46:	89fb      	ldrh	r3, [r7, #14]
 8001a48:	3b7f      	subs	r3, #127	@ 0x7f
 8001a4a:	4a1a      	ldr	r2, [pc, #104]	@ (8001ab4 <_sin+0xf8>)
 8001a4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a50:	425b      	negs	r3, r3
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	e00f      	b.n	8001a76 <_sin+0xba>
   }
   else {
     first = -(int32_t)sineLUT[256 - index];
 8001a56:	89fb      	ldrh	r3, [r7, #14]
 8001a58:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8001a5c:	4a15      	ldr	r2, [pc, #84]	@ (8001ab4 <_sin+0xf8>)
 8001a5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a62:	425b      	negs	r3, r3
 8001a64:	617b      	str	r3, [r7, #20]
     second = -(int32_t)sineLUT[255 - index];
 8001a66:	89fb      	ldrh	r3, [r7, #14]
 8001a68:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8001a6c:	4a11      	ldr	r2, [pc, #68]	@ (8001ab4 <_sin+0xf8>)
 8001a6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a72:	425b      	negs	r3, r3
 8001a74:	613b      	str	r3, [r7, #16]
   }

   return (first + (((second - first) * frac) >> 8)) / 32768.0f;
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	fb02 f303 	mul.w	r3, r2, r3
 8001a82:	121a      	asrs	r2, r3, #8
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	4413      	add	r3, r2
 8001a88:	ee07 3a90 	vmov	s15, r3
 8001a8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a90:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001ab8 <_sin+0xfc>
 8001a94:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001a98:	eef0 7a66 	vmov.f32	s15, s13
 }
 8001a9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001aa0:	371c      	adds	r7, #28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	40c90fdb 	.word	0x40c90fdb
 8001ab0:	47800000 	.word	0x47800000
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	47000000 	.word	0x47000000

08001abc <LPF_Init>:

/*
 * @brief LPF struct initialization function
 */
LPF_t LPF_Init()
{
 8001abc:	b490      	push	{r4, r7}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	LPF_t lpf_dev = {
 8001ac4:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <LPF_Init+0x30>)
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
			.prev_data = 0,
			.prev_us = 0,
			.time_const = 0.1
	};

	return lpf_dev;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	461c      	mov	r4, r3
 8001ad6:	f107 030c 	add.w	r3, r7, #12
 8001ada:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001ade:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc90      	pop	{r4, r7}
 8001aea:	4770      	bx	lr
 8001aec:	3dcccccd 	.word	0x3dcccccd

08001af0 <DWT_Init>:
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
 8001af4:	4b08      	ldr	r3, [pc, #32]	@ (8001b18 <DWT_Init+0x28>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	4a07      	ldr	r2, [pc, #28]	@ (8001b18 <DWT_Init+0x28>)
 8001afa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001afe:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
 8001b00:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <DWT_Init+0x2c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a05      	ldr	r2, [pc, #20]	@ (8001b1c <DWT_Init+0x2c>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6013      	str	r3, [r2, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000edf0 	.word	0xe000edf0
 8001b1c:	e0001000 	.word	0xe0001000

08001b20 <micros>:
__STATIC_INLINE uint32_t micros(void){
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8001b24:	4b07      	ldr	r3, [pc, #28]	@ (8001b44 <micros+0x24>)
 8001b26:	685a      	ldr	r2, [r3, #4]
 8001b28:	4b07      	ldr	r3, [pc, #28]	@ (8001b48 <micros+0x28>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4907      	ldr	r1, [pc, #28]	@ (8001b4c <micros+0x2c>)
 8001b2e:	fba1 1303 	umull	r1, r3, r1, r3
 8001b32:	0c9b      	lsrs	r3, r3, #18
 8001b34:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e0001000 	.word	0xe0001000
 8001b48:	20000084 	.word	0x20000084
 8001b4c:	431bde83 	.word	0x431bde83

08001b50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b0a2      	sub	sp, #136	@ 0x88
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b56:	f001 f9eb 	bl	8002f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b5a:	f000 f875 	bl	8001c48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b5e:	f000 fb4f 	bl	8002200 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b62:	f000 fb0f 	bl	8002184 <MX_DMA_Init>
  MX_I2C1_Init();
 8001b66:	f000 f955 	bl	8001e14 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001b6a:	f000 f9af 	bl	8001ecc <MX_TIM2_Init>
  MX_I2C2_Init();
 8001b6e:	f000 f97f 	bl	8001e70 <MX_I2C2_Init>
  MX_TIM3_Init();
 8001b72:	f000 fa19 	bl	8001fa8 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8001b76:	f000 fadb 	bl	8002130 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001b7a:	f000 f8cd 	bl	8001d18 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001b7e:	f000 fa81 	bl	8002084 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  /* Start PWM channels */
  PWM_Start_3_Channel(&htim2);
 8001b82:	4827      	ldr	r0, [pc, #156]	@ (8001c20 <main+0xd0>)
 8001b84:	f7ff fcc5 	bl	8001512 <PWM_Start_3_Channel>

  /* DWT timer init (for micros) */
  DWT_Init();
 8001b88:	f7ff ffb2 	bl	8001af0 <DWT_Init>
  /* Create sensor & motor object */
  AS5600 s1;
  BLDCMotor m1;

  /* Init motor object */
  BLDCMotor_Init(&m1, &htim2, 7);
 8001b8c:	463b      	mov	r3, r7
 8001b8e:	2207      	movs	r2, #7
 8001b90:	4923      	ldr	r1, [pc, #140]	@ (8001c20 <main+0xd0>)
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fdac 	bl	80016f0 <BLDCMotor_Init>
  LinkSensor(&m1, &s1, &hi2c1);
 8001b98:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8001b9c:	463b      	mov	r3, r7
 8001b9e:	4a21      	ldr	r2, [pc, #132]	@ (8001c24 <main+0xd4>)
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f7ff fed1 	bl	8001948 <LinkSensor>
  m1.supply_voltage = 12;
 8001ba6:	4b20      	ldr	r3, [pc, #128]	@ (8001c28 <main+0xd8>)
 8001ba8:	60bb      	str	r3, [r7, #8]
  m1.voltage_limit = 3;
 8001baa:	4b20      	ldr	r3, [pc, #128]	@ (8001c2c <main+0xdc>)
 8001bac:	607b      	str	r3, [r7, #4]
  m1.sensor_dir = -1;
 8001bae:	23ff      	movs	r3, #255	@ 0xff
 8001bb0:	703b      	strb	r3, [r7, #0]
  //SerialCommander_Init(&m1, NULL, &huart1);

#ifdef ADC_ENABLED
  	HAL_ADC_Start_DMA(&hadc1, ADC_buff, 4);
 8001bb2:	2204      	movs	r2, #4
 8001bb4:	491e      	ldr	r1, [pc, #120]	@ (8001c30 <main+0xe0>)
 8001bb6:	481f      	ldr	r0, [pc, #124]	@ (8001c34 <main+0xe4>)
 8001bb8:	f001 fa94 	bl	80030e4 <HAL_ADC_Start_DMA>
#endif

  	/* Start tim4 periodic callback */
  HAL_TIM_Base_Start_IT(&htim4);
 8001bbc:	481e      	ldr	r0, [pc, #120]	@ (8001c38 <main+0xe8>)
 8001bbe:	f004 fba9 	bl	8006314 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  timestamp = micros();
 8001bc2:	f7ff ffad 	bl	8001b20 <micros>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8001c3c <main+0xec>)
 8001bca:	6013      	str	r3, [r2, #0]
	  CLPositionControl(&m1, 2);
 8001bcc:	463b      	mov	r3, r7
 8001bce:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fbdf 	bl	8001396 <CLPositionControl>
	  freq = 1 / ((micros() - timestamp) * 0.000001);
 8001bd8:	f7ff ffa2 	bl	8001b20 <micros>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	4b17      	ldr	r3, [pc, #92]	@ (8001c3c <main+0xec>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe fc95 	bl	8000514 <__aeabi_ui2d>
 8001bea:	a30b      	add	r3, pc, #44	@ (adr r3, 8001c18 <main+0xc8>)
 8001bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf0:	f7fe fd0a 	bl	8000608 <__aeabi_dmul>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	f04f 0000 	mov.w	r0, #0
 8001bfc:	4910      	ldr	r1, [pc, #64]	@ (8001c40 <main+0xf0>)
 8001bfe:	f7fe fe2d 	bl	800085c <__aeabi_ddiv>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f7fe fff5 	bl	8000bf8 <__aeabi_d2f>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4a0c      	ldr	r2, [pc, #48]	@ (8001c44 <main+0xf4>)
 8001c12:	6013      	str	r3, [r2, #0]
	  timestamp = micros();
 8001c14:	bf00      	nop
 8001c16:	e7d4      	b.n	8001bc2 <main+0x72>
 8001c18:	a0b5ed8d 	.word	0xa0b5ed8d
 8001c1c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001c20:	2000049c 	.word	0x2000049c
 8001c24:	20000334 	.word	0x20000334
 8001c28:	41400000 	.word	0x41400000
 8001c2c:	40400000 	.word	0x40400000
 8001c30:	2000027c 	.word	0x2000027c
 8001c34:	2000028c 	.word	0x2000028c
 8001c38:	2000052c 	.word	0x2000052c
 8001c3c:	200005c0 	.word	0x200005c0
 8001c40:	3ff00000 	.word	0x3ff00000
 8001c44:	200005c4 	.word	0x200005c4

08001c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b094      	sub	sp, #80	@ 0x50
 8001c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c4e:	f107 0320 	add.w	r3, r7, #32
 8001c52:	2230      	movs	r2, #48	@ 0x30
 8001c54:	2100      	movs	r1, #0
 8001c56:	4618      	mov	r0, r3
 8001c58:	f007 f89f 	bl	8008d9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c5c:	f107 030c 	add.w	r3, r7, #12
 8001c60:	2200      	movs	r2, #0
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	605a      	str	r2, [r3, #4]
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	60da      	str	r2, [r3, #12]
 8001c6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	4b27      	ldr	r3, [pc, #156]	@ (8001d10 <SystemClock_Config+0xc8>)
 8001c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c74:	4a26      	ldr	r2, [pc, #152]	@ (8001d10 <SystemClock_Config+0xc8>)
 8001c76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c7c:	4b24      	ldr	r3, [pc, #144]	@ (8001d10 <SystemClock_Config+0xc8>)
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c88:	2300      	movs	r3, #0
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	4b21      	ldr	r3, [pc, #132]	@ (8001d14 <SystemClock_Config+0xcc>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a20      	ldr	r2, [pc, #128]	@ (8001d14 <SystemClock_Config+0xcc>)
 8001c92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	4b1e      	ldr	r3, [pc, #120]	@ (8001d14 <SystemClock_Config+0xcc>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ca8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cb2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001cb8:	2319      	movs	r3, #25
 8001cba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001cbc:	23c0      	movs	r3, #192	@ 0xc0
 8001cbe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001cc4:	2304      	movs	r3, #4
 8001cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cc8:	f107 0320 	add.w	r3, r7, #32
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f003 fec9 	bl	8005a64 <HAL_RCC_OscConfig>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001cd8:	f000 fba0 	bl	800241c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cdc:	230f      	movs	r3, #15
 8001cde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ce8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001cf2:	f107 030c 	add.w	r3, r7, #12
 8001cf6:	2103      	movs	r1, #3
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f004 f92b 	bl	8005f54 <HAL_RCC_ClockConfig>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d04:	f000 fb8a 	bl	800241c <Error_Handler>
  }
}
 8001d08:	bf00      	nop
 8001d0a:	3750      	adds	r7, #80	@ 0x50
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40007000 	.word	0x40007000

08001d18 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d1e:	463b      	mov	r3, r7
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001d2a:	4b37      	ldr	r3, [pc, #220]	@ (8001e08 <MX_ADC1_Init+0xf0>)
 8001d2c:	4a37      	ldr	r2, [pc, #220]	@ (8001e0c <MX_ADC1_Init+0xf4>)
 8001d2e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001d30:	4b35      	ldr	r3, [pc, #212]	@ (8001e08 <MX_ADC1_Init+0xf0>)
 8001d32:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001d36:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001d38:	4b33      	ldr	r3, [pc, #204]	@ (8001e08 <MX_ADC1_Init+0xf0>)
 8001d3a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001d3e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001d40:	4b31      	ldr	r3, [pc, #196]	@ (8001e08 <MX_ADC1_Init+0xf0>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d46:	4b30      	ldr	r3, [pc, #192]	@ (8001e08 <MX_ADC1_Init+0xf0>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d4c:	4b2e      	ldr	r3, [pc, #184]	@ (8001e08 <MX_ADC1_Init+0xf0>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d54:	4b2c      	ldr	r3, [pc, #176]	@ (8001e08 <MX_ADC1_Init+0xf0>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d5a:	4b2b      	ldr	r3, [pc, #172]	@ (8001e08 <MX_ADC1_Init+0xf0>)
 8001d5c:	4a2c      	ldr	r2, [pc, #176]	@ (8001e10 <MX_ADC1_Init+0xf8>)
 8001d5e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d60:	4b29      	ldr	r3, [pc, #164]	@ (8001e08 <MX_ADC1_Init+0xf0>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001d66:	4b28      	ldr	r3, [pc, #160]	@ (8001e08 <MX_ADC1_Init+0xf0>)
 8001d68:	2204      	movs	r2, #4
 8001d6a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001d6c:	4b26      	ldr	r3, [pc, #152]	@ (8001e08 <MX_ADC1_Init+0xf0>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001d74:	4b24      	ldr	r3, [pc, #144]	@ (8001e08 <MX_ADC1_Init+0xf0>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d7a:	4823      	ldr	r0, [pc, #140]	@ (8001e08 <MX_ADC1_Init+0xf0>)
 8001d7c:	f001 f96e 	bl	800305c <HAL_ADC_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001d86:	f000 fb49 	bl	800241c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d96:	463b      	mov	r3, r7
 8001d98:	4619      	mov	r1, r3
 8001d9a:	481b      	ldr	r0, [pc, #108]	@ (8001e08 <MX_ADC1_Init+0xf0>)
 8001d9c:	f001 faa6 	bl	80032ec <HAL_ADC_ConfigChannel>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001da6:	f000 fb39 	bl	800241c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001daa:	2301      	movs	r3, #1
 8001dac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001dae:	2302      	movs	r3, #2
 8001db0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001db2:	463b      	mov	r3, r7
 8001db4:	4619      	mov	r1, r3
 8001db6:	4814      	ldr	r0, [pc, #80]	@ (8001e08 <MX_ADC1_Init+0xf0>)
 8001db8:	f001 fa98 	bl	80032ec <HAL_ADC_ConfigChannel>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8001dc2:	f000 fb2b 	bl	800241c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dce:	463b      	mov	r3, r7
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	480d      	ldr	r0, [pc, #52]	@ (8001e08 <MX_ADC1_Init+0xf0>)
 8001dd4:	f001 fa8a 	bl	80032ec <HAL_ADC_ConfigChannel>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8001dde:	f000 fb1d 	bl	800241c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001de2:	2304      	movs	r3, #4
 8001de4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001de6:	2304      	movs	r3, #4
 8001de8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dea:	463b      	mov	r3, r7
 8001dec:	4619      	mov	r1, r3
 8001dee:	4806      	ldr	r0, [pc, #24]	@ (8001e08 <MX_ADC1_Init+0xf0>)
 8001df0:	f001 fa7c 	bl	80032ec <HAL_ADC_ConfigChannel>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8001dfa:	f000 fb0f 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	2000028c 	.word	0x2000028c
 8001e0c:	40012000 	.word	0x40012000
 8001e10:	0f000001 	.word	0x0f000001

08001e14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001e18:	4b12      	ldr	r3, [pc, #72]	@ (8001e64 <MX_I2C1_Init+0x50>)
 8001e1a:	4a13      	ldr	r2, [pc, #76]	@ (8001e68 <MX_I2C1_Init+0x54>)
 8001e1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001e1e:	4b11      	ldr	r3, [pc, #68]	@ (8001e64 <MX_I2C1_Init+0x50>)
 8001e20:	4a12      	ldr	r2, [pc, #72]	@ (8001e6c <MX_I2C1_Init+0x58>)
 8001e22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e24:	4b0f      	ldr	r3, [pc, #60]	@ (8001e64 <MX_I2C1_Init+0x50>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e64 <MX_I2C1_Init+0x50>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e30:	4b0c      	ldr	r3, [pc, #48]	@ (8001e64 <MX_I2C1_Init+0x50>)
 8001e32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e38:	4b0a      	ldr	r3, [pc, #40]	@ (8001e64 <MX_I2C1_Init+0x50>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001e3e:	4b09      	ldr	r3, [pc, #36]	@ (8001e64 <MX_I2C1_Init+0x50>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e44:	4b07      	ldr	r3, [pc, #28]	@ (8001e64 <MX_I2C1_Init+0x50>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e4a:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <MX_I2C1_Init+0x50>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e50:	4804      	ldr	r0, [pc, #16]	@ (8001e64 <MX_I2C1_Init+0x50>)
 8001e52:	f002 fbb9 	bl	80045c8 <HAL_I2C_Init>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e5c:	f000 fade 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000334 	.word	0x20000334
 8001e68:	40005400 	.word	0x40005400
 8001e6c:	000186a0 	.word	0x000186a0

08001e70 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e74:	4b12      	ldr	r3, [pc, #72]	@ (8001ec0 <MX_I2C2_Init+0x50>)
 8001e76:	4a13      	ldr	r2, [pc, #76]	@ (8001ec4 <MX_I2C2_Init+0x54>)
 8001e78:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001e7a:	4b11      	ldr	r3, [pc, #68]	@ (8001ec0 <MX_I2C2_Init+0x50>)
 8001e7c:	4a12      	ldr	r2, [pc, #72]	@ (8001ec8 <MX_I2C2_Init+0x58>)
 8001e7e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001e80:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec0 <MX_I2C2_Init+0x50>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001e86:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec0 <MX_I2C2_Init+0x50>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ec0 <MX_I2C2_Init+0x50>)
 8001e8e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001e92:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e94:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec0 <MX_I2C2_Init+0x50>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001e9a:	4b09      	ldr	r3, [pc, #36]	@ (8001ec0 <MX_I2C2_Init+0x50>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ea0:	4b07      	ldr	r3, [pc, #28]	@ (8001ec0 <MX_I2C2_Init+0x50>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ea6:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <MX_I2C2_Init+0x50>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001eac:	4804      	ldr	r0, [pc, #16]	@ (8001ec0 <MX_I2C2_Init+0x50>)
 8001eae:	f002 fb8b 	bl	80045c8 <HAL_I2C_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001eb8:	f000 fab0 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20000388 	.word	0x20000388
 8001ec4:	40005800 	.word	0x40005800
 8001ec8:	000186a0 	.word	0x000186a0

08001ecc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b08a      	sub	sp, #40	@ 0x28
 8001ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed2:	f107 0320 	add.w	r3, r7, #32
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
 8001eda:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001edc:	1d3b      	adds	r3, r7, #4
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	60da      	str	r2, [r3, #12]
 8001ee8:	611a      	str	r2, [r3, #16]
 8001eea:	615a      	str	r2, [r3, #20]
 8001eec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001eee:	4b2d      	ldr	r3, [pc, #180]	@ (8001fa4 <MX_TIM2_Init+0xd8>)
 8001ef0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ef4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8001ef6:	4b2b      	ldr	r3, [pc, #172]	@ (8001fa4 <MX_TIM2_Init+0xd8>)
 8001ef8:	220a      	movs	r2, #10
 8001efa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efc:	4b29      	ldr	r3, [pc, #164]	@ (8001fa4 <MX_TIM2_Init+0xd8>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001f02:	4b28      	ldr	r3, [pc, #160]	@ (8001fa4 <MX_TIM2_Init+0xd8>)
 8001f04:	22ff      	movs	r2, #255	@ 0xff
 8001f06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f08:	4b26      	ldr	r3, [pc, #152]	@ (8001fa4 <MX_TIM2_Init+0xd8>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f0e:	4b25      	ldr	r3, [pc, #148]	@ (8001fa4 <MX_TIM2_Init+0xd8>)
 8001f10:	2280      	movs	r2, #128	@ 0x80
 8001f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f14:	4823      	ldr	r0, [pc, #140]	@ (8001fa4 <MX_TIM2_Init+0xd8>)
 8001f16:	f004 faae 	bl	8006476 <HAL_TIM_PWM_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001f20:	f000 fa7c 	bl	800241c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f24:	2300      	movs	r3, #0
 8001f26:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f2c:	f107 0320 	add.w	r3, r7, #32
 8001f30:	4619      	mov	r1, r3
 8001f32:	481c      	ldr	r0, [pc, #112]	@ (8001fa4 <MX_TIM2_Init+0xd8>)
 8001f34:	f005 f812 	bl	8006f5c <HAL_TIMEx_MasterConfigSynchronization>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001f3e:	f000 fa6d 	bl	800241c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f42:	2360      	movs	r3, #96	@ 0x60
 8001f44:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f52:	1d3b      	adds	r3, r7, #4
 8001f54:	2200      	movs	r2, #0
 8001f56:	4619      	mov	r1, r3
 8001f58:	4812      	ldr	r0, [pc, #72]	@ (8001fa4 <MX_TIM2_Init+0xd8>)
 8001f5a:	f004 fcd7 	bl	800690c <HAL_TIM_PWM_ConfigChannel>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8001f64:	f000 fa5a 	bl	800241c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001f68:	1d3b      	adds	r3, r7, #4
 8001f6a:	2204      	movs	r2, #4
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	480d      	ldr	r0, [pc, #52]	@ (8001fa4 <MX_TIM2_Init+0xd8>)
 8001f70:	f004 fccc 	bl	800690c <HAL_TIM_PWM_ConfigChannel>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d001      	beq.n	8001f7e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001f7a:	f000 fa4f 	bl	800241c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	2208      	movs	r2, #8
 8001f82:	4619      	mov	r1, r3
 8001f84:	4807      	ldr	r0, [pc, #28]	@ (8001fa4 <MX_TIM2_Init+0xd8>)
 8001f86:	f004 fcc1 	bl	800690c <HAL_TIM_PWM_ConfigChannel>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_TIM2_Init+0xc8>
  {
    Error_Handler();
 8001f90:	f000 fa44 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f94:	4803      	ldr	r0, [pc, #12]	@ (8001fa4 <MX_TIM2_Init+0xd8>)
 8001f96:	f000 fd99 	bl	8002acc <HAL_TIM_MspPostInit>

}
 8001f9a:	bf00      	nop
 8001f9c:	3728      	adds	r7, #40	@ 0x28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	2000049c 	.word	0x2000049c

08001fa8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b08a      	sub	sp, #40	@ 0x28
 8001fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fae:	f107 0320 	add.w	r3, r7, #32
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fb8:	1d3b      	adds	r3, r7, #4
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]
 8001fc0:	609a      	str	r2, [r3, #8]
 8001fc2:	60da      	str	r2, [r3, #12]
 8001fc4:	611a      	str	r2, [r3, #16]
 8001fc6:	615a      	str	r2, [r3, #20]
 8001fc8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fca:	4b2c      	ldr	r3, [pc, #176]	@ (800207c <MX_TIM3_Init+0xd4>)
 8001fcc:	4a2c      	ldr	r2, [pc, #176]	@ (8002080 <MX_TIM3_Init+0xd8>)
 8001fce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10;
 8001fd0:	4b2a      	ldr	r3, [pc, #168]	@ (800207c <MX_TIM3_Init+0xd4>)
 8001fd2:	220a      	movs	r2, #10
 8001fd4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd6:	4b29      	ldr	r3, [pc, #164]	@ (800207c <MX_TIM3_Init+0xd4>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8001fdc:	4b27      	ldr	r3, [pc, #156]	@ (800207c <MX_TIM3_Init+0xd4>)
 8001fde:	22ff      	movs	r2, #255	@ 0xff
 8001fe0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe2:	4b26      	ldr	r3, [pc, #152]	@ (800207c <MX_TIM3_Init+0xd4>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fe8:	4b24      	ldr	r3, [pc, #144]	@ (800207c <MX_TIM3_Init+0xd4>)
 8001fea:	2280      	movs	r2, #128	@ 0x80
 8001fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001fee:	4823      	ldr	r0, [pc, #140]	@ (800207c <MX_TIM3_Init+0xd4>)
 8001ff0:	f004 fa41 	bl	8006476 <HAL_TIM_PWM_Init>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001ffa:	f000 fa0f 	bl	800241c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ffe:	2300      	movs	r3, #0
 8002000:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002002:	2300      	movs	r3, #0
 8002004:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002006:	f107 0320 	add.w	r3, r7, #32
 800200a:	4619      	mov	r1, r3
 800200c:	481b      	ldr	r0, [pc, #108]	@ (800207c <MX_TIM3_Init+0xd4>)
 800200e:	f004 ffa5 	bl	8006f5c <HAL_TIMEx_MasterConfigSynchronization>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8002018:	f000 fa00 	bl	800241c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800201c:	2360      	movs	r3, #96	@ 0x60
 800201e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002024:	2300      	movs	r3, #0
 8002026:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800202c:	1d3b      	adds	r3, r7, #4
 800202e:	2200      	movs	r2, #0
 8002030:	4619      	mov	r1, r3
 8002032:	4812      	ldr	r0, [pc, #72]	@ (800207c <MX_TIM3_Init+0xd4>)
 8002034:	f004 fc6a 	bl	800690c <HAL_TIM_PWM_ConfigChannel>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800203e:	f000 f9ed 	bl	800241c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002042:	1d3b      	adds	r3, r7, #4
 8002044:	2204      	movs	r2, #4
 8002046:	4619      	mov	r1, r3
 8002048:	480c      	ldr	r0, [pc, #48]	@ (800207c <MX_TIM3_Init+0xd4>)
 800204a:	f004 fc5f 	bl	800690c <HAL_TIM_PWM_ConfigChannel>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002054:	f000 f9e2 	bl	800241c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002058:	1d3b      	adds	r3, r7, #4
 800205a:	2208      	movs	r2, #8
 800205c:	4619      	mov	r1, r3
 800205e:	4807      	ldr	r0, [pc, #28]	@ (800207c <MX_TIM3_Init+0xd4>)
 8002060:	f004 fc54 	bl	800690c <HAL_TIM_PWM_ConfigChannel>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_TIM3_Init+0xc6>
  {
    Error_Handler();
 800206a:	f000 f9d7 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800206e:	4803      	ldr	r0, [pc, #12]	@ (800207c <MX_TIM3_Init+0xd4>)
 8002070:	f000 fd2c 	bl	8002acc <HAL_TIM_MspPostInit>

}
 8002074:	bf00      	nop
 8002076:	3728      	adds	r7, #40	@ 0x28
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	200004e4 	.word	0x200004e4
 8002080:	40000400 	.word	0x40000400

08002084 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08a      	sub	sp, #40	@ 0x28
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800208a:	f107 0320 	add.w	r3, r7, #32
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	609a      	str	r2, [r3, #8]
 800209e:	60da      	str	r2, [r3, #12]
 80020a0:	611a      	str	r2, [r3, #16]
 80020a2:	615a      	str	r2, [r3, #20]
 80020a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020a6:	4b20      	ldr	r3, [pc, #128]	@ (8002128 <MX_TIM4_Init+0xa4>)
 80020a8:	4a20      	ldr	r2, [pc, #128]	@ (800212c <MX_TIM4_Init+0xa8>)
 80020aa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 95;
 80020ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002128 <MX_TIM4_Init+0xa4>)
 80020ae:	225f      	movs	r2, #95	@ 0x5f
 80020b0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002128 <MX_TIM4_Init+0xa4>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 499;
 80020b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002128 <MX_TIM4_Init+0xa4>)
 80020ba:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80020be:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020c0:	4b19      	ldr	r3, [pc, #100]	@ (8002128 <MX_TIM4_Init+0xa4>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80020c6:	4b18      	ldr	r3, [pc, #96]	@ (8002128 <MX_TIM4_Init+0xa4>)
 80020c8:	2280      	movs	r2, #128	@ 0x80
 80020ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 80020cc:	4816      	ldr	r0, [pc, #88]	@ (8002128 <MX_TIM4_Init+0xa4>)
 80020ce:	f004 f983 	bl	80063d8 <HAL_TIM_OC_Init>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80020d8:	f000 f9a0 	bl	800241c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020dc:	2300      	movs	r3, #0
 80020de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020e4:	f107 0320 	add.w	r3, r7, #32
 80020e8:	4619      	mov	r1, r3
 80020ea:	480f      	ldr	r0, [pc, #60]	@ (8002128 <MX_TIM4_Init+0xa4>)
 80020ec:	f004 ff36 	bl	8006f5c <HAL_TIMEx_MasterConfigSynchronization>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80020f6:	f000 f991 	bl	800241c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80020fa:	2300      	movs	r3, #0
 80020fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020fe:	2300      	movs	r3, #0
 8002100:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	2200      	movs	r2, #0
 800210e:	4619      	mov	r1, r3
 8002110:	4805      	ldr	r0, [pc, #20]	@ (8002128 <MX_TIM4_Init+0xa4>)
 8002112:	f004 fb9f 	bl	8006854 <HAL_TIM_OC_ConfigChannel>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800211c:	f000 f97e 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002120:	bf00      	nop
 8002122:	3728      	adds	r7, #40	@ 0x28
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	2000052c 	.word	0x2000052c
 800212c:	40000800 	.word	0x40000800

08002130 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002134:	4b11      	ldr	r3, [pc, #68]	@ (800217c <MX_USART1_UART_Init+0x4c>)
 8002136:	4a12      	ldr	r2, [pc, #72]	@ (8002180 <MX_USART1_UART_Init+0x50>)
 8002138:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800213a:	4b10      	ldr	r3, [pc, #64]	@ (800217c <MX_USART1_UART_Init+0x4c>)
 800213c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002140:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002142:	4b0e      	ldr	r3, [pc, #56]	@ (800217c <MX_USART1_UART_Init+0x4c>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002148:	4b0c      	ldr	r3, [pc, #48]	@ (800217c <MX_USART1_UART_Init+0x4c>)
 800214a:	2200      	movs	r2, #0
 800214c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800214e:	4b0b      	ldr	r3, [pc, #44]	@ (800217c <MX_USART1_UART_Init+0x4c>)
 8002150:	2200      	movs	r2, #0
 8002152:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002154:	4b09      	ldr	r3, [pc, #36]	@ (800217c <MX_USART1_UART_Init+0x4c>)
 8002156:	220c      	movs	r2, #12
 8002158:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800215a:	4b08      	ldr	r3, [pc, #32]	@ (800217c <MX_USART1_UART_Init+0x4c>)
 800215c:	2200      	movs	r2, #0
 800215e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002160:	4b06      	ldr	r3, [pc, #24]	@ (800217c <MX_USART1_UART_Init+0x4c>)
 8002162:	2200      	movs	r2, #0
 8002164:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002166:	4805      	ldr	r0, [pc, #20]	@ (800217c <MX_USART1_UART_Init+0x4c>)
 8002168:	f004 ff7a 	bl	8007060 <HAL_UART_Init>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002172:	f000 f953 	bl	800241c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	20000574 	.word	0x20000574
 8002180:	40011000 	.word	0x40011000

08002184 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	4b1b      	ldr	r3, [pc, #108]	@ (80021fc <MX_DMA_Init+0x78>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002192:	4a1a      	ldr	r2, [pc, #104]	@ (80021fc <MX_DMA_Init+0x78>)
 8002194:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002198:	6313      	str	r3, [r2, #48]	@ 0x30
 800219a:	4b18      	ldr	r3, [pc, #96]	@ (80021fc <MX_DMA_Init+0x78>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	603b      	str	r3, [r7, #0]
 80021aa:	4b14      	ldr	r3, [pc, #80]	@ (80021fc <MX_DMA_Init+0x78>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ae:	4a13      	ldr	r2, [pc, #76]	@ (80021fc <MX_DMA_Init+0x78>)
 80021b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021b6:	4b11      	ldr	r3, [pc, #68]	@ (80021fc <MX_DMA_Init+0x78>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021be:	603b      	str	r3, [r7, #0]
 80021c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80021c2:	2200      	movs	r2, #0
 80021c4:	2100      	movs	r1, #0
 80021c6:	200b      	movs	r0, #11
 80021c8:	f001 fc1b 	bl	8003a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80021cc:	200b      	movs	r0, #11
 80021ce:	f001 fc34 	bl	8003a3a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80021d2:	2200      	movs	r2, #0
 80021d4:	2100      	movs	r1, #0
 80021d6:	200c      	movs	r0, #12
 80021d8:	f001 fc13 	bl	8003a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80021dc:	200c      	movs	r0, #12
 80021de:	f001 fc2c 	bl	8003a3a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80021e2:	2200      	movs	r2, #0
 80021e4:	2100      	movs	r1, #0
 80021e6:	2038      	movs	r0, #56	@ 0x38
 80021e8:	f001 fc0b 	bl	8003a02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80021ec:	2038      	movs	r0, #56	@ 0x38
 80021ee:	f001 fc24 	bl	8003a3a <HAL_NVIC_EnableIRQ>

}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800

08002200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b08a      	sub	sp, #40	@ 0x28
 8002204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002206:	f107 0314 	add.w	r3, r7, #20
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	605a      	str	r2, [r3, #4]
 8002210:	609a      	str	r2, [r3, #8]
 8002212:	60da      	str	r2, [r3, #12]
 8002214:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	4b27      	ldr	r3, [pc, #156]	@ (80022b8 <MX_GPIO_Init+0xb8>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221e:	4a26      	ldr	r2, [pc, #152]	@ (80022b8 <MX_GPIO_Init+0xb8>)
 8002220:	f043 0304 	orr.w	r3, r3, #4
 8002224:	6313      	str	r3, [r2, #48]	@ 0x30
 8002226:	4b24      	ldr	r3, [pc, #144]	@ (80022b8 <MX_GPIO_Init+0xb8>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	4b20      	ldr	r3, [pc, #128]	@ (80022b8 <MX_GPIO_Init+0xb8>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223a:	4a1f      	ldr	r2, [pc, #124]	@ (80022b8 <MX_GPIO_Init+0xb8>)
 800223c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002240:	6313      	str	r3, [r2, #48]	@ 0x30
 8002242:	4b1d      	ldr	r3, [pc, #116]	@ (80022b8 <MX_GPIO_Init+0xb8>)
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800224e:	2300      	movs	r3, #0
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	4b19      	ldr	r3, [pc, #100]	@ (80022b8 <MX_GPIO_Init+0xb8>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	4a18      	ldr	r2, [pc, #96]	@ (80022b8 <MX_GPIO_Init+0xb8>)
 8002258:	f043 0301 	orr.w	r3, r3, #1
 800225c:	6313      	str	r3, [r2, #48]	@ 0x30
 800225e:	4b16      	ldr	r3, [pc, #88]	@ (80022b8 <MX_GPIO_Init+0xb8>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	60bb      	str	r3, [r7, #8]
 8002268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	607b      	str	r3, [r7, #4]
 800226e:	4b12      	ldr	r3, [pc, #72]	@ (80022b8 <MX_GPIO_Init+0xb8>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002272:	4a11      	ldr	r2, [pc, #68]	@ (80022b8 <MX_GPIO_Init+0xb8>)
 8002274:	f043 0302 	orr.w	r3, r3, #2
 8002278:	6313      	str	r3, [r2, #48]	@ 0x30
 800227a:	4b0f      	ldr	r3, [pc, #60]	@ (80022b8 <MX_GPIO_Init+0xb8>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	607b      	str	r3, [r7, #4]
 8002284:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002286:	2200      	movs	r2, #0
 8002288:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800228c:	480b      	ldr	r0, [pc, #44]	@ (80022bc <MX_GPIO_Init+0xbc>)
 800228e:	f002 f981 	bl	8004594 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002292:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002296:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002298:	2301      	movs	r3, #1
 800229a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a0:	2300      	movs	r3, #0
 80022a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	4619      	mov	r1, r3
 80022aa:	4804      	ldr	r0, [pc, #16]	@ (80022bc <MX_GPIO_Init+0xbc>)
 80022ac:	f001 ffee 	bl	800428c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80022b0:	bf00      	nop
 80022b2:	3728      	adds	r7, #40	@ 0x28
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40020800 	.word	0x40020800

080022c0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
	/* Set ADC DMA ready flag */
	EVENT_FLAGS |= ADC_DMA_FLAG;
 80022c8:	4b06      	ldr	r3, [pc, #24]	@ (80022e4 <HAL_ADC_ConvCpltCallback+0x24>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	f043 0304 	orr.w	r3, r3, #4
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	4b04      	ldr	r3, [pc, #16]	@ (80022e4 <HAL_ADC_ConvCpltCallback+0x24>)
 80022d4:	701a      	strb	r2, [r3, #0]
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	200005bc 	.word	0x200005bc

080022e8 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
	/* Set I2C receive complete flags  */
	if(hi2c->Instance == I2C1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0e      	ldr	r2, [pc, #56]	@ (8002330 <HAL_I2C_MemRxCpltCallback+0x48>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d107      	bne.n	800230a <HAL_I2C_MemRxCpltCallback+0x22>
	{
		EVENT_FLAGS |= I2C1_DMA_FLAG;
 80022fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002334 <HAL_I2C_MemRxCpltCallback+0x4c>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	b2da      	uxtb	r2, r3
 8002304:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <HAL_I2C_MemRxCpltCallback+0x4c>)
 8002306:	701a      	strb	r2, [r3, #0]
	}
	else if(hi2c->Instance == I2C2)
	{
		EVENT_FLAGS |= I2C2_DMA_FLAG;
	}
}
 8002308:	e00b      	b.n	8002322 <HAL_I2C_MemRxCpltCallback+0x3a>
	else if(hi2c->Instance == I2C2)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a0a      	ldr	r2, [pc, #40]	@ (8002338 <HAL_I2C_MemRxCpltCallback+0x50>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d106      	bne.n	8002322 <HAL_I2C_MemRxCpltCallback+0x3a>
		EVENT_FLAGS |= I2C2_DMA_FLAG;
 8002314:	4b07      	ldr	r3, [pc, #28]	@ (8002334 <HAL_I2C_MemRxCpltCallback+0x4c>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	f043 0302 	orr.w	r3, r3, #2
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4b05      	ldr	r3, [pc, #20]	@ (8002334 <HAL_I2C_MemRxCpltCallback+0x4c>)
 8002320:	701a      	strb	r2, [r3, #0]
}
 8002322:	bf00      	nop
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	40005400 	.word	0x40005400
 8002334:	200005bc 	.word	0x200005bc
 8002338:	40005800 	.word	0x40005800

0800233c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a2e      	ldr	r2, [pc, #184]	@ (8002404 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d157      	bne.n	80023fe <HAL_TIM_PeriodElapsedCallback+0xc2>
    {

    	/* ADC conversion only if ADC enabled */
#ifdef ADC_ENABLED

        if(EVENT_FLAGS & ADC_DMA_FLAG)
 800234e:	4b2e      	ldr	r3, [pc, #184]	@ (8002408 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00d      	beq.n	8002376 <HAL_TIM_PeriodElapsedCallback+0x3a>
        {
        	EVENT_FLAGS ^= ADC_DMA_FLAG;
 800235a:	4b2b      	ldr	r3, [pc, #172]	@ (8002408 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	f083 0304 	eor.w	r3, r3, #4
 8002362:	b2da      	uxtb	r2, r3
 8002364:	4b28      	ldr	r3, [pc, #160]	@ (8002408 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002366:	701a      	strb	r2, [r3, #0]
        	HAL_ADC_Start_DMA(&hadc1, ADC_buff, 4);
 8002368:	2204      	movs	r2, #4
 800236a:	4928      	ldr	r1, [pc, #160]	@ (800240c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800236c:	4828      	ldr	r0, [pc, #160]	@ (8002410 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800236e:	f000 feb9 	bl	80030e4 <HAL_ADC_Start_DMA>
        	BLDC_UpdateMotorADC_DMA();
 8002372:	f7ff f937 	bl	80015e4 <BLDC_UpdateMotorADC_DMA>
        }

#endif

        /* Check I2C ch1 data receive complete */
        if(EVENT_FLAGS & I2C1_DMA_FLAG)
 8002376:	4b24      	ldr	r3, [pc, #144]	@ (8002408 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b00      	cmp	r3, #0
 8002380:	d015      	beq.n	80023ae <HAL_TIM_PeriodElapsedCallback+0x72>
        {
        	if(BLDCMotorArray[0] != NULL && BLDCMotorArray[0]->sensor != NULL)
 8002382:	4b24      	ldr	r3, [pc, #144]	@ (8002414 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d011      	beq.n	80023ae <HAL_TIM_PeriodElapsedCallback+0x72>
 800238a:	4b22      	ldr	r3, [pc, #136]	@ (8002414 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00c      	beq.n	80023ae <HAL_TIM_PeriodElapsedCallback+0x72>
        	{
        		EVENT_FLAGS ^= I2C1_DMA_FLAG;
 8002394:	4b1c      	ldr	r3, [pc, #112]	@ (8002408 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	f083 0301 	eor.w	r3, r3, #1
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4b1a      	ldr	r3, [pc, #104]	@ (8002408 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80023a0:	701a      	strb	r2, [r3, #0]

        		/* Start new DMA read */
        		AS5600_UpdateAngle_DMA(BLDCMotorArray[0]->sensor);
 80023a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002414 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7fe ff3d 	bl	8001228 <AS5600_UpdateAngle_DMA>
        	}
        }

        /* Check I2C ch2 data receive complete */
        if(EVENT_FLAGS & I2C2_DMA_FLAG)
 80023ae:	4b16      	ldr	r3, [pc, #88]	@ (8002408 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d015      	beq.n	80023e6 <HAL_TIM_PeriodElapsedCallback+0xaa>
        {
             if(BLDCMotorArray[1] != NULL && BLDCMotorArray[1]->sensor != NULL)
 80023ba:	4b16      	ldr	r3, [pc, #88]	@ (8002414 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d011      	beq.n	80023e6 <HAL_TIM_PeriodElapsedCallback+0xaa>
 80023c2:	4b14      	ldr	r3, [pc, #80]	@ (8002414 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d00c      	beq.n	80023e6 <HAL_TIM_PeriodElapsedCallback+0xaa>
             {
            	EVENT_FLAGS ^= I2C2_DMA_FLAG;
 80023cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002408 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	f083 0302 	eor.w	r3, r3, #2
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002408 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80023d8:	701a      	strb	r2, [r3, #0]

            	/* Start new DMA read */
                AS5600_UpdateAngle_DMA(BLDCMotorArray[1]->sensor);
 80023da:	4b0e      	ldr	r3, [pc, #56]	@ (8002414 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe ff21 	bl	8001228 <AS5600_UpdateAngle_DMA>
        }

        /* UART debug, only sends debug metrics every 100 periods (~20hz) */
#ifdef UART_DEBUG

        if(UART_Debug_CallbackCounter >= 100)
 80023e6:	4b0c      	ldr	r3, [pc, #48]	@ (8002418 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2b63      	cmp	r3, #99	@ 0x63
 80023ec:	d806      	bhi.n	80023fc <HAL_TIM_PeriodElapsedCallback+0xc0>
        {
        	return;
        }
        else
        {
        	UART_Debug_CallbackCounter++;
 80023ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002418 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	3301      	adds	r3, #1
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	4b08      	ldr	r3, [pc, #32]	@ (8002418 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80023f8:	701a      	strb	r2, [r3, #0]
 80023fa:	e000      	b.n	80023fe <HAL_TIM_PeriodElapsedCallback+0xc2>
        	return;
 80023fc:	bf00      	nop
        }
#endif

    }
}
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	40000800 	.word	0x40000800
 8002408:	200005bc 	.word	0x200005bc
 800240c:	2000027c 	.word	0x2000027c
 8002410:	2000028c 	.word	0x2000028c
 8002414:	20000274 	.word	0x20000274
 8002418:	200005bd 	.word	0x200005bd

0800241c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002420:	b672      	cpsid	i
}
 8002422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002424:	bf00      	nop
 8002426:	e7fd      	b.n	8002424 <Error_Handler+0x8>

08002428 <micros>:
__STATIC_INLINE uint32_t micros(void){
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 800242c:	4b07      	ldr	r3, [pc, #28]	@ (800244c <micros+0x24>)
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	4b07      	ldr	r3, [pc, #28]	@ (8002450 <micros+0x28>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4907      	ldr	r1, [pc, #28]	@ (8002454 <micros+0x2c>)
 8002436:	fba1 1303 	umull	r1, r3, r1, r3
 800243a:	0c9b      	lsrs	r3, r3, #18
 800243c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002440:	4618      	mov	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e0001000 	.word	0xe0001000
 8002450:	20000084 	.word	0x20000084
 8002454:	431bde83 	.word	0x431bde83

08002458 <PID_Init>:
 * @params[in] float ki
 * @params[in] float kd
 * @retval PID structure
 */
PID_t PID_Init()
{
 8002458:	b4b0      	push	{r4, r5, r7}
 800245a:	b08d      	sub	sp, #52	@ 0x34
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
	PID_t PID_dev =
 8002460:	4b0e      	ldr	r3, [pc, #56]	@ (800249c <PID_Init+0x44>)
 8002462:	f107 0408 	add.w	r4, r7, #8
 8002466:	461d      	mov	r5, r3
 8002468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800246a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800246c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800246e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002470:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002474:	e884 0003 	stmia.w	r4, {r0, r1}
		.upper_bound = 10,
		.timestamp_us = 0,
		.mode = P
	};

	return PID_dev;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	461d      	mov	r5, r3
 800247c:	f107 0408 	add.w	r4, r7, #8
 8002480:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002482:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002484:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002486:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002488:	e894 0003 	ldmia.w	r4, {r0, r1}
 800248c:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	3734      	adds	r7, #52	@ 0x34
 8002494:	46bd      	mov	sp, r7
 8002496:	bcb0      	pop	{r4, r5, r7}
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	0800c7d0 	.word	0x0800c7d0

080024a0 <PID_Compute>:
 * @param[in] float setpoint
 * @param[in] float input value
 * @retval float PID output
 */
float PID_Compute(PID_t* PID_dev, float setpoint, float input)
{
 80024a0:	b5b0      	push	{r4, r5, r7, lr}
 80024a2:	b08c      	sub	sp, #48	@ 0x30
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80024ac:	edc7 0a01 	vstr	s1, [r7, #4]
	uint32_t now_us = micros();
 80024b0:	f7ff ffba 	bl	8002428 <micros>
 80024b4:	6238      	str	r0, [r7, #32]

	float error = setpoint - input;
 80024b6:	ed97 7a02 	vldr	s14, [r7, #8]
 80024ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80024be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024c2:	edc7 7a07 	vstr	s15, [r7, #28]

	/* Save time delta as uint32_t first to handle overflows naturally */
	uint32_t dt_us = now_us - PID_dev->timestamp_us;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	6a3a      	ldr	r2, [r7, #32]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	61bb      	str	r3, [r7, #24]
	float dt = dt_us * 0.000001;
 80024d0:	69b8      	ldr	r0, [r7, #24]
 80024d2:	f7fe f81f 	bl	8000514 <__aeabi_ui2d>
 80024d6:	a372      	add	r3, pc, #456	@ (adr r3, 80026a0 <PID_Compute+0x200>)
 80024d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024dc:	f7fe f894 	bl	8000608 <__aeabi_dmul>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4610      	mov	r0, r2
 80024e6:	4619      	mov	r1, r3
 80024e8:	f7fe fb86 	bl	8000bf8 <__aeabi_d2f>
 80024ec:	4603      	mov	r3, r0
 80024ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Proportional term calculation */
	float p_term = PID_dev->kp * error;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	edd3 7a00 	vldr	s15, [r3]
 80024f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80024fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024fe:	edc7 7a05 	vstr	s15, [r7, #20]

	/* If time delta is unreasonable, only return proportional term since it is not time-based */
	if(PID_dev->mode == P || dt <= 0 || dt > 0.2)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002508:	2b00      	cmp	r3, #0
 800250a:	d011      	beq.n	8002530 <PID_Compute+0x90>
 800250c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8002510:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002518:	d90a      	bls.n	8002530 <PID_Compute+0x90>
 800251a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800251c:	f7fe f81c 	bl	8000558 <__aeabi_f2d>
 8002520:	a361      	add	r3, pc, #388	@ (adr r3, 80026a8 <PID_Compute+0x208>)
 8002522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002526:	f7fe faff 	bl	8000b28 <__aeabi_dcmpgt>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <PID_Compute+0x9c>
	{
		PID_dev->timestamp_us = now_us;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a3a      	ldr	r2, [r7, #32]
 8002534:	621a      	str	r2, [r3, #32]
		return p_term;
 8002536:	edd7 7a05 	vldr	s15, [r7, #20]
 800253a:	e09d      	b.n	8002678 <PID_Compute+0x1d8>
	}

	/* Integral term calculation */
	float i_term = 0;
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	62bb      	str	r3, [r7, #40]	@ 0x28

	if(PID_dev->mode == PI)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002548:	2b01      	cmp	r3, #1
 800254a:	d13e      	bne.n	80025ca <PID_Compute+0x12a>
	{
		/* Accumulate integral value using Riemann midpoint rule */
		PID_dev->integral += PID_dev->ki * dt * 0.5f * (error + PID_dev->last_error);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	edd3 6a01 	vldr	s13, [r3, #4]
 8002558:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800255c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002560:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8002564:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	ed93 6a04 	vldr	s12, [r3, #16]
 800256e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002572:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002576:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800257a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	edc3 7a03 	vstr	s15, [r3, #12]
		PID_dev->integral = _constrain(PID_dev->integral, PID_dev->lower_bound, PID_dev->upper_bound);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	ed93 7a03 	vldr	s14, [r3, #12]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002590:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002598:	d502      	bpl.n	80025a0 <PID_Compute+0x100>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	e00f      	b.n	80025c0 <PID_Compute+0x120>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	edd3 7a07 	vldr	s15, [r3, #28]
 80025ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b4:	dd02      	ble.n	80025bc <PID_Compute+0x11c>
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	e001      	b.n	80025c0 <PID_Compute+0x120>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	60d3      	str	r3, [r2, #12]
		i_term = PID_dev->integral;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	}

	/* Derivative term calculation */
	float d_term = 0;
 80025ca:	f04f 0300 	mov.w	r3, #0
 80025ce:	627b      	str	r3, [r7, #36]	@ 0x24

	if(PID_dev->mode == PID)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d13e      	bne.n	8002658 <PID_Compute+0x1b8>
	{
		/* If dt is too small, set to a reasonable value to avoid division by extremely small numbers */
		if(dt < 0.00001f)
 80025da:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80025de:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8002698 <PID_Compute+0x1f8>
 80025e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ea:	d501      	bpl.n	80025f0 <PID_Compute+0x150>
		{
			dt = 0.00001f;
 80025ec:	4b2b      	ldr	r3, [pc, #172]	@ (800269c <PID_Compute+0x1fc>)
 80025ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}

		/* Check error difference & apply simple LPF */
		d_term = (error - PID_dev->last_error) / dt;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	edd3 7a04 	vldr	s15, [r3, #16]
 80025f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80025fa:	ee77 6a67 	vsub.f32	s13, s14, s15
 80025fe:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002602:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002606:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		d_term = PID_LPF_ALPHA * d_term + (1 - PID_LPF_ALPHA) * PID_dev->last_derivative;
 800260a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800260c:	f7fd ffa4 	bl	8000558 <__aeabi_f2d>
 8002610:	a31d      	add	r3, pc, #116	@ (adr r3, 8002688 <PID_Compute+0x1e8>)
 8002612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002616:	f7fd fff7 	bl	8000608 <__aeabi_dmul>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4614      	mov	r4, r2
 8002620:	461d      	mov	r5, r3
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fd ff96 	bl	8000558 <__aeabi_f2d>
 800262c:	a318      	add	r3, pc, #96	@ (adr r3, 8002690 <PID_Compute+0x1f0>)
 800262e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002632:	f7fd ffe9 	bl	8000608 <__aeabi_dmul>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	4620      	mov	r0, r4
 800263c:	4629      	mov	r1, r5
 800263e:	f7fd fe2d 	bl	800029c <__adddf3>
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	4610      	mov	r0, r2
 8002648:	4619      	mov	r1, r3
 800264a:	f7fe fad5 	bl	8000bf8 <__aeabi_d2f>
 800264e:	4603      	mov	r3, r0
 8002650:	627b      	str	r3, [r7, #36]	@ 0x24
		PID_dev->last_derivative = d_term;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002656:	615a      	str	r2, [r3, #20]
	}

	PID_dev->last_error = error;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	69fa      	ldr	r2, [r7, #28]
 800265c:	611a      	str	r2, [r3, #16]
	PID_dev->timestamp_us = now_us;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6a3a      	ldr	r2, [r7, #32]
 8002662:	621a      	str	r2, [r3, #32]

	return p_term + i_term + d_term;
 8002664:	ed97 7a05 	vldr	s14, [r7, #20]
 8002668:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800266c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002670:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002674:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002678:	eeb0 0a67 	vmov.f32	s0, s15
 800267c:	3730      	adds	r7, #48	@ 0x30
 800267e:	46bd      	mov	sp, r7
 8002680:	bdb0      	pop	{r4, r5, r7, pc}
 8002682:	bf00      	nop
 8002684:	f3af 8000 	nop.w
 8002688:	9999999a 	.word	0x9999999a
 800268c:	3fb99999 	.word	0x3fb99999
 8002690:	cccccccd 	.word	0xcccccccd
 8002694:	3feccccc 	.word	0x3feccccc
 8002698:	3727c5ac 	.word	0x3727c5ac
 800269c:	3727c5ac 	.word	0x3727c5ac
 80026a0:	a0b5ed8d 	.word	0xa0b5ed8d
 80026a4:	3eb0c6f7 	.word	0x3eb0c6f7
 80026a8:	9999999a 	.word	0x9999999a
 80026ac:	3fc99999 	.word	0x3fc99999

080026b0 <HAL_UARTEx_RxEventCallback>:
/*
 * @brief DMA receive to idle interrupt callback function
 * @note Sets the receive flag to 1 and append null terminator to end of string
 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	807b      	strh	r3, [r7, #2]
	/* Indicate incoming data */
	serial_dev.rx_flag = 1;
 80026bc:	4b0a      	ldr	r3, [pc, #40]	@ (80026e8 <HAL_UARTEx_RxEventCallback+0x38>)
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

	/* Insert null terminator for C string */
	if(Size > 15)
 80026c4:	887b      	ldrh	r3, [r7, #2]
 80026c6:	2b0f      	cmp	r3, #15
 80026c8:	d903      	bls.n	80026d2 <HAL_UARTEx_RxEventCallback+0x22>
	{
		serial_dev.rx_buff[15] = '\0';
 80026ca:	4b07      	ldr	r3, [pc, #28]	@ (80026e8 <HAL_UARTEx_RxEventCallback+0x38>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	76da      	strb	r2, [r3, #27]
	}
	else
	{
		serial_dev.rx_buff[Size] = '\0';
	}
}
 80026d0:	e004      	b.n	80026dc <HAL_UARTEx_RxEventCallback+0x2c>
		serial_dev.rx_buff[Size] = '\0';
 80026d2:	887b      	ldrh	r3, [r7, #2]
 80026d4:	4a04      	ldr	r2, [pc, #16]	@ (80026e8 <HAL_UARTEx_RxEventCallback+0x38>)
 80026d6:	4413      	add	r3, r2
 80026d8:	2200      	movs	r2, #0
 80026da:	731a      	strb	r2, [r3, #12]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	200005c8 	.word	0x200005c8

080026ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	607b      	str	r3, [r7, #4]
 80026f6:	4b10      	ldr	r3, [pc, #64]	@ (8002738 <HAL_MspInit+0x4c>)
 80026f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fa:	4a0f      	ldr	r2, [pc, #60]	@ (8002738 <HAL_MspInit+0x4c>)
 80026fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002700:	6453      	str	r3, [r2, #68]	@ 0x44
 8002702:	4b0d      	ldr	r3, [pc, #52]	@ (8002738 <HAL_MspInit+0x4c>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002706:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800270a:	607b      	str	r3, [r7, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	603b      	str	r3, [r7, #0]
 8002712:	4b09      	ldr	r3, [pc, #36]	@ (8002738 <HAL_MspInit+0x4c>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002716:	4a08      	ldr	r2, [pc, #32]	@ (8002738 <HAL_MspInit+0x4c>)
 8002718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800271c:	6413      	str	r3, [r2, #64]	@ 0x40
 800271e:	4b06      	ldr	r3, [pc, #24]	@ (8002738 <HAL_MspInit+0x4c>)
 8002720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40023800 	.word	0x40023800

0800273c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08a      	sub	sp, #40	@ 0x28
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002744:	f107 0314 	add.w	r3, r7, #20
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a2f      	ldr	r2, [pc, #188]	@ (8002818 <HAL_ADC_MspInit+0xdc>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d157      	bne.n	800280e <HAL_ADC_MspInit+0xd2>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
 8002762:	4b2e      	ldr	r3, [pc, #184]	@ (800281c <HAL_ADC_MspInit+0xe0>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002766:	4a2d      	ldr	r2, [pc, #180]	@ (800281c <HAL_ADC_MspInit+0xe0>)
 8002768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800276c:	6453      	str	r3, [r2, #68]	@ 0x44
 800276e:	4b2b      	ldr	r3, [pc, #172]	@ (800281c <HAL_ADC_MspInit+0xe0>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002772:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002776:	613b      	str	r3, [r7, #16]
 8002778:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	4b27      	ldr	r3, [pc, #156]	@ (800281c <HAL_ADC_MspInit+0xe0>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002782:	4a26      	ldr	r2, [pc, #152]	@ (800281c <HAL_ADC_MspInit+0xe0>)
 8002784:	f043 0301 	orr.w	r3, r3, #1
 8002788:	6313      	str	r3, [r2, #48]	@ 0x30
 800278a:	4b24      	ldr	r3, [pc, #144]	@ (800281c <HAL_ADC_MspInit+0xe0>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8002796:	231b      	movs	r3, #27
 8002798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800279a:	2303      	movs	r3, #3
 800279c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a2:	f107 0314 	add.w	r3, r7, #20
 80027a6:	4619      	mov	r1, r3
 80027a8:	481d      	ldr	r0, [pc, #116]	@ (8002820 <HAL_ADC_MspInit+0xe4>)
 80027aa:	f001 fd6f 	bl	800428c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80027ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002824 <HAL_ADC_MspInit+0xe8>)
 80027b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002828 <HAL_ADC_MspInit+0xec>)
 80027b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80027b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002824 <HAL_ADC_MspInit+0xe8>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002824 <HAL_ADC_MspInit+0xe8>)
 80027bc:	2200      	movs	r2, #0
 80027be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80027c0:	4b18      	ldr	r3, [pc, #96]	@ (8002824 <HAL_ADC_MspInit+0xe8>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80027c6:	4b17      	ldr	r3, [pc, #92]	@ (8002824 <HAL_ADC_MspInit+0xe8>)
 80027c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80027cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027ce:	4b15      	ldr	r3, [pc, #84]	@ (8002824 <HAL_ADC_MspInit+0xe8>)
 80027d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027d6:	4b13      	ldr	r3, [pc, #76]	@ (8002824 <HAL_ADC_MspInit+0xe8>)
 80027d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80027de:	4b11      	ldr	r3, [pc, #68]	@ (8002824 <HAL_ADC_MspInit+0xe8>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80027e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002824 <HAL_ADC_MspInit+0xe8>)
 80027e6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80027ea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002824 <HAL_ADC_MspInit+0xe8>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80027f2:	480c      	ldr	r0, [pc, #48]	@ (8002824 <HAL_ADC_MspInit+0xe8>)
 80027f4:	f001 f93c 	bl	8003a70 <HAL_DMA_Init>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80027fe:	f7ff fe0d 	bl	800241c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a07      	ldr	r2, [pc, #28]	@ (8002824 <HAL_ADC_MspInit+0xe8>)
 8002806:	639a      	str	r2, [r3, #56]	@ 0x38
 8002808:	4a06      	ldr	r2, [pc, #24]	@ (8002824 <HAL_ADC_MspInit+0xe8>)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800280e:	bf00      	nop
 8002810:	3728      	adds	r7, #40	@ 0x28
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40012000 	.word	0x40012000
 800281c:	40023800 	.word	0x40023800
 8002820:	40020000 	.word	0x40020000
 8002824:	200002d4 	.word	0x200002d4
 8002828:	40026410 	.word	0x40026410

0800282c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08c      	sub	sp, #48	@ 0x30
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002834:	f107 031c 	add.w	r3, r7, #28
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a69      	ldr	r2, [pc, #420]	@ (80029f0 <HAL_I2C_MspInit+0x1c4>)
 800284a:	4293      	cmp	r3, r2
 800284c:	f040 8088 	bne.w	8002960 <HAL_I2C_MspInit+0x134>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002850:	2300      	movs	r3, #0
 8002852:	61bb      	str	r3, [r7, #24]
 8002854:	4b67      	ldr	r3, [pc, #412]	@ (80029f4 <HAL_I2C_MspInit+0x1c8>)
 8002856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002858:	4a66      	ldr	r2, [pc, #408]	@ (80029f4 <HAL_I2C_MspInit+0x1c8>)
 800285a:	f043 0302 	orr.w	r3, r3, #2
 800285e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002860:	4b64      	ldr	r3, [pc, #400]	@ (80029f4 <HAL_I2C_MspInit+0x1c8>)
 8002862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	61bb      	str	r3, [r7, #24]
 800286a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800286c:	23c0      	movs	r3, #192	@ 0xc0
 800286e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002870:	2312      	movs	r3, #18
 8002872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002874:	2300      	movs	r3, #0
 8002876:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002878:	2303      	movs	r3, #3
 800287a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800287c:	2304      	movs	r3, #4
 800287e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002880:	f107 031c 	add.w	r3, r7, #28
 8002884:	4619      	mov	r1, r3
 8002886:	485c      	ldr	r0, [pc, #368]	@ (80029f8 <HAL_I2C_MspInit+0x1cc>)
 8002888:	f001 fd00 	bl	800428c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	4b58      	ldr	r3, [pc, #352]	@ (80029f4 <HAL_I2C_MspInit+0x1c8>)
 8002892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002894:	4a57      	ldr	r2, [pc, #348]	@ (80029f4 <HAL_I2C_MspInit+0x1c8>)
 8002896:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800289a:	6413      	str	r3, [r2, #64]	@ 0x40
 800289c:	4b55      	ldr	r3, [pc, #340]	@ (80029f4 <HAL_I2C_MspInit+0x1c8>)
 800289e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028a4:	617b      	str	r3, [r7, #20]
 80028a6:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80028a8:	4b54      	ldr	r3, [pc, #336]	@ (80029fc <HAL_I2C_MspInit+0x1d0>)
 80028aa:	4a55      	ldr	r2, [pc, #340]	@ (8002a00 <HAL_I2C_MspInit+0x1d4>)
 80028ac:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80028ae:	4b53      	ldr	r3, [pc, #332]	@ (80029fc <HAL_I2C_MspInit+0x1d0>)
 80028b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80028b4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028b6:	4b51      	ldr	r3, [pc, #324]	@ (80029fc <HAL_I2C_MspInit+0x1d0>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028bc:	4b4f      	ldr	r3, [pc, #316]	@ (80029fc <HAL_I2C_MspInit+0x1d0>)
 80028be:	2200      	movs	r2, #0
 80028c0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028c2:	4b4e      	ldr	r3, [pc, #312]	@ (80029fc <HAL_I2C_MspInit+0x1d0>)
 80028c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028c8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028ca:	4b4c      	ldr	r3, [pc, #304]	@ (80029fc <HAL_I2C_MspInit+0x1d0>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028d0:	4b4a      	ldr	r3, [pc, #296]	@ (80029fc <HAL_I2C_MspInit+0x1d0>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80028d6:	4b49      	ldr	r3, [pc, #292]	@ (80029fc <HAL_I2C_MspInit+0x1d0>)
 80028d8:	2200      	movs	r2, #0
 80028da:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028dc:	4b47      	ldr	r3, [pc, #284]	@ (80029fc <HAL_I2C_MspInit+0x1d0>)
 80028de:	2200      	movs	r2, #0
 80028e0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028e2:	4b46      	ldr	r3, [pc, #280]	@ (80029fc <HAL_I2C_MspInit+0x1d0>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80028e8:	4844      	ldr	r0, [pc, #272]	@ (80029fc <HAL_I2C_MspInit+0x1d0>)
 80028ea:	f001 f8c1 	bl	8003a70 <HAL_DMA_Init>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 80028f4:	f7ff fd92 	bl	800241c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a40      	ldr	r2, [pc, #256]	@ (80029fc <HAL_I2C_MspInit+0x1d0>)
 80028fc:	639a      	str	r2, [r3, #56]	@ 0x38
 80028fe:	4a3f      	ldr	r2, [pc, #252]	@ (80029fc <HAL_I2C_MspInit+0x1d0>)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8002904:	4b3f      	ldr	r3, [pc, #252]	@ (8002a04 <HAL_I2C_MspInit+0x1d8>)
 8002906:	4a40      	ldr	r2, [pc, #256]	@ (8002a08 <HAL_I2C_MspInit+0x1dc>)
 8002908:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 800290a:	4b3e      	ldr	r3, [pc, #248]	@ (8002a04 <HAL_I2C_MspInit+0x1d8>)
 800290c:	2200      	movs	r2, #0
 800290e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002910:	4b3c      	ldr	r3, [pc, #240]	@ (8002a04 <HAL_I2C_MspInit+0x1d8>)
 8002912:	2240      	movs	r2, #64	@ 0x40
 8002914:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002916:	4b3b      	ldr	r3, [pc, #236]	@ (8002a04 <HAL_I2C_MspInit+0x1d8>)
 8002918:	2200      	movs	r2, #0
 800291a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800291c:	4b39      	ldr	r3, [pc, #228]	@ (8002a04 <HAL_I2C_MspInit+0x1d8>)
 800291e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002922:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002924:	4b37      	ldr	r3, [pc, #220]	@ (8002a04 <HAL_I2C_MspInit+0x1d8>)
 8002926:	2200      	movs	r2, #0
 8002928:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800292a:	4b36      	ldr	r3, [pc, #216]	@ (8002a04 <HAL_I2C_MspInit+0x1d8>)
 800292c:	2200      	movs	r2, #0
 800292e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002930:	4b34      	ldr	r3, [pc, #208]	@ (8002a04 <HAL_I2C_MspInit+0x1d8>)
 8002932:	2200      	movs	r2, #0
 8002934:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002936:	4b33      	ldr	r3, [pc, #204]	@ (8002a04 <HAL_I2C_MspInit+0x1d8>)
 8002938:	2200      	movs	r2, #0
 800293a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800293c:	4b31      	ldr	r3, [pc, #196]	@ (8002a04 <HAL_I2C_MspInit+0x1d8>)
 800293e:	2200      	movs	r2, #0
 8002940:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002942:	4830      	ldr	r0, [pc, #192]	@ (8002a04 <HAL_I2C_MspInit+0x1d8>)
 8002944:	f001 f894 	bl	8003a70 <HAL_DMA_Init>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d001      	beq.n	8002952 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 800294e:	f7ff fd65 	bl	800241c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a2b      	ldr	r2, [pc, #172]	@ (8002a04 <HAL_I2C_MspInit+0x1d8>)
 8002956:	635a      	str	r2, [r3, #52]	@ 0x34
 8002958:	4a2a      	ldr	r2, [pc, #168]	@ (8002a04 <HAL_I2C_MspInit+0x1d8>)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6393      	str	r3, [r2, #56]	@ 0x38
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 800295e:	e042      	b.n	80029e6 <HAL_I2C_MspInit+0x1ba>
  else if(hi2c->Instance==I2C2)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a29      	ldr	r2, [pc, #164]	@ (8002a0c <HAL_I2C_MspInit+0x1e0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d13d      	bne.n	80029e6 <HAL_I2C_MspInit+0x1ba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800296a:	2300      	movs	r3, #0
 800296c:	613b      	str	r3, [r7, #16]
 800296e:	4b21      	ldr	r3, [pc, #132]	@ (80029f4 <HAL_I2C_MspInit+0x1c8>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	4a20      	ldr	r2, [pc, #128]	@ (80029f4 <HAL_I2C_MspInit+0x1c8>)
 8002974:	f043 0302 	orr.w	r3, r3, #2
 8002978:	6313      	str	r3, [r2, #48]	@ 0x30
 800297a:	4b1e      	ldr	r3, [pc, #120]	@ (80029f4 <HAL_I2C_MspInit+0x1c8>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002986:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800298a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800298c:	2312      	movs	r3, #18
 800298e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002990:	2300      	movs	r3, #0
 8002992:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002994:	2303      	movs	r3, #3
 8002996:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002998:	2304      	movs	r3, #4
 800299a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800299c:	f107 031c 	add.w	r3, r7, #28
 80029a0:	4619      	mov	r1, r3
 80029a2:	4815      	ldr	r0, [pc, #84]	@ (80029f8 <HAL_I2C_MspInit+0x1cc>)
 80029a4:	f001 fc72 	bl	800428c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80029a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029ae:	2312      	movs	r3, #18
 80029b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b2:	2300      	movs	r3, #0
 80029b4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b6:	2303      	movs	r3, #3
 80029b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80029ba:	2309      	movs	r3, #9
 80029bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029be:	f107 031c 	add.w	r3, r7, #28
 80029c2:	4619      	mov	r1, r3
 80029c4:	480c      	ldr	r0, [pc, #48]	@ (80029f8 <HAL_I2C_MspInit+0x1cc>)
 80029c6:	f001 fc61 	bl	800428c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	4b09      	ldr	r3, [pc, #36]	@ (80029f4 <HAL_I2C_MspInit+0x1c8>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d2:	4a08      	ldr	r2, [pc, #32]	@ (80029f4 <HAL_I2C_MspInit+0x1c8>)
 80029d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029da:	4b06      	ldr	r3, [pc, #24]	@ (80029f4 <HAL_I2C_MspInit+0x1c8>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	68fb      	ldr	r3, [r7, #12]
}
 80029e6:	bf00      	nop
 80029e8:	3730      	adds	r7, #48	@ 0x30
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40005400 	.word	0x40005400
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40020400 	.word	0x40020400
 80029fc:	200003dc 	.word	0x200003dc
 8002a00:	40026010 	.word	0x40026010
 8002a04:	2000043c 	.word	0x2000043c
 8002a08:	40026028 	.word	0x40026028
 8002a0c:	40005800 	.word	0x40005800

08002a10 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a20:	d10e      	bne.n	8002a40 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	4b13      	ldr	r3, [pc, #76]	@ (8002a74 <HAL_TIM_PWM_MspInit+0x64>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2a:	4a12      	ldr	r2, [pc, #72]	@ (8002a74 <HAL_TIM_PWM_MspInit+0x64>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a32:	4b10      	ldr	r3, [pc, #64]	@ (8002a74 <HAL_TIM_PWM_MspInit+0x64>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002a3e:	e012      	b.n	8002a66 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a0c      	ldr	r2, [pc, #48]	@ (8002a78 <HAL_TIM_PWM_MspInit+0x68>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d10d      	bne.n	8002a66 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	4b09      	ldr	r3, [pc, #36]	@ (8002a74 <HAL_TIM_PWM_MspInit+0x64>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a52:	4a08      	ldr	r2, [pc, #32]	@ (8002a74 <HAL_TIM_PWM_MspInit+0x64>)
 8002a54:	f043 0302 	orr.w	r3, r3, #2
 8002a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a5a:	4b06      	ldr	r3, [pc, #24]	@ (8002a74 <HAL_TIM_PWM_MspInit+0x64>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	60bb      	str	r3, [r7, #8]
 8002a64:	68bb      	ldr	r3, [r7, #8]
}
 8002a66:	bf00      	nop
 8002a68:	3714      	adds	r7, #20
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40000400 	.word	0x40000400

08002a7c <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM4)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a0e      	ldr	r2, [pc, #56]	@ (8002ac4 <HAL_TIM_OC_MspInit+0x48>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d115      	bne.n	8002aba <HAL_TIM_OC_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac8 <HAL_TIM_OC_MspInit+0x4c>)
 8002a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a96:	4a0c      	ldr	r2, [pc, #48]	@ (8002ac8 <HAL_TIM_OC_MspInit+0x4c>)
 8002a98:	f043 0304 	orr.w	r3, r3, #4
 8002a9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac8 <HAL_TIM_OC_MspInit+0x4c>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa2:	f003 0304 	and.w	r3, r3, #4
 8002aa6:	60fb      	str	r3, [r7, #12]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002aaa:	2200      	movs	r2, #0
 8002aac:	2100      	movs	r1, #0
 8002aae:	201e      	movs	r0, #30
 8002ab0:	f000 ffa7 	bl	8003a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002ab4:	201e      	movs	r0, #30
 8002ab6:	f000 ffc0 	bl	8003a3a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM4_MspInit 1 */

  }

}
 8002aba:	bf00      	nop
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	40000800 	.word	0x40000800
 8002ac8:	40023800 	.word	0x40023800

08002acc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08a      	sub	sp, #40	@ 0x28
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad4:	f107 0314 	add.w	r3, r7, #20
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]
 8002adc:	605a      	str	r2, [r3, #4]
 8002ade:	609a      	str	r2, [r3, #8]
 8002ae0:	60da      	str	r2, [r3, #12]
 8002ae2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aec:	d13c      	bne.n	8002b68 <HAL_TIM_MspPostInit+0x9c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aee:	2300      	movs	r3, #0
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	4b31      	ldr	r3, [pc, #196]	@ (8002bb8 <HAL_TIM_MspPostInit+0xec>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	4a30      	ldr	r2, [pc, #192]	@ (8002bb8 <HAL_TIM_MspPostInit+0xec>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002afe:	4b2e      	ldr	r3, [pc, #184]	@ (8002bb8 <HAL_TIM_MspPostInit+0xec>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	613b      	str	r3, [r7, #16]
 8002b08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb8 <HAL_TIM_MspPostInit+0xec>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b12:	4a29      	ldr	r2, [pc, #164]	@ (8002bb8 <HAL_TIM_MspPostInit+0xec>)
 8002b14:	f043 0302 	orr.w	r3, r3, #2
 8002b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b1a:	4b27      	ldr	r3, [pc, #156]	@ (8002bb8 <HAL_TIM_MspPostInit+0xec>)
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 8002b26:	2324      	movs	r3, #36	@ 0x24
 8002b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b32:	2300      	movs	r3, #0
 8002b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b36:	2301      	movs	r3, #1
 8002b38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3a:	f107 0314 	add.w	r3, r7, #20
 8002b3e:	4619      	mov	r1, r3
 8002b40:	481e      	ldr	r0, [pc, #120]	@ (8002bbc <HAL_TIM_MspPostInit+0xf0>)
 8002b42:	f001 fba3 	bl	800428c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b46:	2308      	movs	r3, #8
 8002b48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b52:	2300      	movs	r3, #0
 8002b54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b56:	2301      	movs	r3, #1
 8002b58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b5a:	f107 0314 	add.w	r3, r7, #20
 8002b5e:	4619      	mov	r1, r3
 8002b60:	4817      	ldr	r0, [pc, #92]	@ (8002bc0 <HAL_TIM_MspPostInit+0xf4>)
 8002b62:	f001 fb93 	bl	800428c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b66:	e022      	b.n	8002bae <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a15      	ldr	r2, [pc, #84]	@ (8002bc4 <HAL_TIM_MspPostInit+0xf8>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d11d      	bne.n	8002bae <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	4b10      	ldr	r3, [pc, #64]	@ (8002bb8 <HAL_TIM_MspPostInit+0xec>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b7a:	4a0f      	ldr	r2, [pc, #60]	@ (8002bb8 <HAL_TIM_MspPostInit+0xec>)
 8002b7c:	f043 0302 	orr.w	r3, r3, #2
 8002b80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b82:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb8 <HAL_TIM_MspPostInit+0xec>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	60bb      	str	r3, [r7, #8]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5;
 8002b8e:	2331      	movs	r3, #49	@ 0x31
 8002b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b92:	2302      	movs	r3, #2
 8002b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba2:	f107 0314 	add.w	r3, r7, #20
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4805      	ldr	r0, [pc, #20]	@ (8002bc0 <HAL_TIM_MspPostInit+0xf4>)
 8002baa:	f001 fb6f 	bl	800428c <HAL_GPIO_Init>
}
 8002bae:	bf00      	nop
 8002bb0:	3728      	adds	r7, #40	@ 0x28
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	40020000 	.word	0x40020000
 8002bc0:	40020400 	.word	0x40020400
 8002bc4:	40000400 	.word	0x40000400

08002bc8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b08a      	sub	sp, #40	@ 0x28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd0:	f107 0314 	add.w	r3, r7, #20
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a1d      	ldr	r2, [pc, #116]	@ (8002c5c <HAL_UART_MspInit+0x94>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d134      	bne.n	8002c54 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bea:	2300      	movs	r3, #0
 8002bec:	613b      	str	r3, [r7, #16]
 8002bee:	4b1c      	ldr	r3, [pc, #112]	@ (8002c60 <HAL_UART_MspInit+0x98>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c60 <HAL_UART_MspInit+0x98>)
 8002bf4:	f043 0310 	orr.w	r3, r3, #16
 8002bf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bfa:	4b19      	ldr	r3, [pc, #100]	@ (8002c60 <HAL_UART_MspInit+0x98>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfe:	f003 0310 	and.w	r3, r3, #16
 8002c02:	613b      	str	r3, [r7, #16]
 8002c04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	60fb      	str	r3, [r7, #12]
 8002c0a:	4b15      	ldr	r3, [pc, #84]	@ (8002c60 <HAL_UART_MspInit+0x98>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	4a14      	ldr	r2, [pc, #80]	@ (8002c60 <HAL_UART_MspInit+0x98>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c16:	4b12      	ldr	r3, [pc, #72]	@ (8002c60 <HAL_UART_MspInit+0x98>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c22:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c30:	2303      	movs	r3, #3
 8002c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c34:	2307      	movs	r3, #7
 8002c36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c38:	f107 0314 	add.w	r3, r7, #20
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4809      	ldr	r0, [pc, #36]	@ (8002c64 <HAL_UART_MspInit+0x9c>)
 8002c40:	f001 fb24 	bl	800428c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c44:	2200      	movs	r2, #0
 8002c46:	2100      	movs	r1, #0
 8002c48:	2025      	movs	r0, #37	@ 0x25
 8002c4a:	f000 feda 	bl	8003a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c4e:	2025      	movs	r0, #37	@ 0x25
 8002c50:	f000 fef3 	bl	8003a3a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002c54:	bf00      	nop
 8002c56:	3728      	adds	r7, #40	@ 0x28
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40011000 	.word	0x40011000
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40020000 	.word	0x40020000

08002c68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c6c:	bf00      	nop
 8002c6e:	e7fd      	b.n	8002c6c <NMI_Handler+0x4>

08002c70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c74:	bf00      	nop
 8002c76:	e7fd      	b.n	8002c74 <HardFault_Handler+0x4>

08002c78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c7c:	bf00      	nop
 8002c7e:	e7fd      	b.n	8002c7c <MemManage_Handler+0x4>

08002c80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c84:	bf00      	nop
 8002c86:	e7fd      	b.n	8002c84 <BusFault_Handler+0x4>

08002c88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c8c:	bf00      	nop
 8002c8e:	e7fd      	b.n	8002c8c <UsageFault_Handler+0x4>

08002c90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cb0:	bf00      	nop
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cbe:	f000 f989 	bl	8002fd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cc2:	bf00      	nop
 8002cc4:	bd80      	pop	{r7, pc}
	...

08002cc8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002ccc:	4802      	ldr	r0, [pc, #8]	@ (8002cd8 <DMA1_Stream0_IRQHandler+0x10>)
 8002cce:	f001 f867 	bl	8003da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	200003dc 	.word	0x200003dc

08002cdc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002ce0:	4802      	ldr	r0, [pc, #8]	@ (8002cec <DMA1_Stream1_IRQHandler+0x10>)
 8002ce2:	f001 f85d 	bl	8003da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	2000043c 	.word	0x2000043c

08002cf0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002cf4:	4802      	ldr	r0, [pc, #8]	@ (8002d00 <TIM4_IRQHandler+0x10>)
 8002cf6:	f003 fcbd 	bl	8006674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002cfa:	bf00      	nop
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	2000052c 	.word	0x2000052c

08002d04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002d08:	4802      	ldr	r0, [pc, #8]	@ (8002d14 <USART1_IRQHandler+0x10>)
 8002d0a:	f004 f9f9 	bl	8007100 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	20000574 	.word	0x20000574

08002d18 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d1c:	4802      	ldr	r0, [pc, #8]	@ (8002d28 <DMA2_Stream0_IRQHandler+0x10>)
 8002d1e:	f001 f83f 	bl	8003da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	200002d4 	.word	0x200002d4

08002d2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	af00      	add	r7, sp, #0
  return 1;
 8002d30:	2301      	movs	r3, #1
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <_kill>:

int _kill(int pid, int sig)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d46:	f006 f87b 	bl	8008e40 <__errno>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2216      	movs	r2, #22
 8002d4e:	601a      	str	r2, [r3, #0]
  return -1;
 8002d50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3708      	adds	r7, #8
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <_exit>:

void _exit (int status)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d64:	f04f 31ff 	mov.w	r1, #4294967295
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff ffe7 	bl	8002d3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d6e:	bf00      	nop
 8002d70:	e7fd      	b.n	8002d6e <_exit+0x12>

08002d72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b086      	sub	sp, #24
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
 8002d82:	e00a      	b.n	8002d9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d84:	f3af 8000 	nop.w
 8002d88:	4601      	mov	r1, r0
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	60ba      	str	r2, [r7, #8]
 8002d90:	b2ca      	uxtb	r2, r1
 8002d92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	3301      	adds	r3, #1
 8002d98:	617b      	str	r3, [r7, #20]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	dbf0      	blt.n	8002d84 <_read+0x12>
  }

  return len;
 8002da2:	687b      	ldr	r3, [r7, #4]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}

08002dac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	e009      	b.n	8002dd2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	60ba      	str	r2, [r7, #8]
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	617b      	str	r3, [r7, #20]
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	dbf1      	blt.n	8002dbe <_write+0x12>
  }
  return len;
 8002dda:	687b      	ldr	r3, [r7, #4]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3718      	adds	r7, #24
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <_close>:

int _close(int file)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002dec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e0c:	605a      	str	r2, [r3, #4]
  return 0;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <_isatty>:

int _isatty(int file)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e24:	2301      	movs	r3, #1
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e32:	b480      	push	{r7}
 8002e34:	b085      	sub	sp, #20
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	60f8      	str	r0, [r7, #12]
 8002e3a:	60b9      	str	r1, [r7, #8]
 8002e3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e54:	4a14      	ldr	r2, [pc, #80]	@ (8002ea8 <_sbrk+0x5c>)
 8002e56:	4b15      	ldr	r3, [pc, #84]	@ (8002eac <_sbrk+0x60>)
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e60:	4b13      	ldr	r3, [pc, #76]	@ (8002eb0 <_sbrk+0x64>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d102      	bne.n	8002e6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e68:	4b11      	ldr	r3, [pc, #68]	@ (8002eb0 <_sbrk+0x64>)
 8002e6a:	4a12      	ldr	r2, [pc, #72]	@ (8002eb4 <_sbrk+0x68>)
 8002e6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e6e:	4b10      	ldr	r3, [pc, #64]	@ (8002eb0 <_sbrk+0x64>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4413      	add	r3, r2
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d207      	bcs.n	8002e8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e7c:	f005 ffe0 	bl	8008e40 <__errno>
 8002e80:	4603      	mov	r3, r0
 8002e82:	220c      	movs	r2, #12
 8002e84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e86:	f04f 33ff 	mov.w	r3, #4294967295
 8002e8a:	e009      	b.n	8002ea0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e8c:	4b08      	ldr	r3, [pc, #32]	@ (8002eb0 <_sbrk+0x64>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e92:	4b07      	ldr	r3, [pc, #28]	@ (8002eb0 <_sbrk+0x64>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4413      	add	r3, r2
 8002e9a:	4a05      	ldr	r2, [pc, #20]	@ (8002eb0 <_sbrk+0x64>)
 8002e9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20020000 	.word	0x20020000
 8002eac:	00000400 	.word	0x00000400
 8002eb0:	20000618 	.word	0x20000618
 8002eb4:	20000770 	.word	0x20000770

08002eb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ebc:	4b06      	ldr	r3, [pc, #24]	@ (8002ed8 <SystemInit+0x20>)
 8002ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec2:	4a05      	ldr	r2, [pc, #20]	@ (8002ed8 <SystemInit+0x20>)
 8002ec4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ec8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ecc:	bf00      	nop
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	e000ed00 	.word	0xe000ed00

08002edc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002edc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ee0:	f7ff ffea 	bl	8002eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ee4:	480c      	ldr	r0, [pc, #48]	@ (8002f18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ee6:	490d      	ldr	r1, [pc, #52]	@ (8002f1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8002f20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002eec:	e002      	b.n	8002ef4 <LoopCopyDataInit>

08002eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ef2:	3304      	adds	r3, #4

08002ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ef8:	d3f9      	bcc.n	8002eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002efa:	4a0a      	ldr	r2, [pc, #40]	@ (8002f24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002efc:	4c0a      	ldr	r4, [pc, #40]	@ (8002f28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f00:	e001      	b.n	8002f06 <LoopFillZerobss>

08002f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f04:	3204      	adds	r2, #4

08002f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f08:	d3fb      	bcc.n	8002f02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f0a:	f005 ff9f 	bl	8008e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f0e:	f7fe fe1f 	bl	8001b50 <main>
  bx  lr    
 8002f12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002f14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f1c:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 8002f20:	0800cc68 	.word	0x0800cc68
  ldr r2, =_sbss
 8002f24:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8002f28:	2000076c 	.word	0x2000076c

08002f2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f2c:	e7fe      	b.n	8002f2c <ADC_IRQHandler>
	...

08002f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f34:	4b0e      	ldr	r3, [pc, #56]	@ (8002f70 <HAL_Init+0x40>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a0d      	ldr	r2, [pc, #52]	@ (8002f70 <HAL_Init+0x40>)
 8002f3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f40:	4b0b      	ldr	r3, [pc, #44]	@ (8002f70 <HAL_Init+0x40>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a0a      	ldr	r2, [pc, #40]	@ (8002f70 <HAL_Init+0x40>)
 8002f46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f4c:	4b08      	ldr	r3, [pc, #32]	@ (8002f70 <HAL_Init+0x40>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a07      	ldr	r2, [pc, #28]	@ (8002f70 <HAL_Init+0x40>)
 8002f52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f58:	2003      	movs	r0, #3
 8002f5a:	f000 fd47 	bl	80039ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f5e:	200f      	movs	r0, #15
 8002f60:	f000 f808 	bl	8002f74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f64:	f7ff fbc2 	bl	80026ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40023c00 	.word	0x40023c00

08002f74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f7c:	4b12      	ldr	r3, [pc, #72]	@ (8002fc8 <HAL_InitTick+0x54>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	4b12      	ldr	r3, [pc, #72]	@ (8002fcc <HAL_InitTick+0x58>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	4619      	mov	r1, r3
 8002f86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 fd5f 	bl	8003a56 <HAL_SYSTICK_Config>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e00e      	b.n	8002fc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b0f      	cmp	r3, #15
 8002fa6:	d80a      	bhi.n	8002fbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002fa8:	2200      	movs	r2, #0
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb0:	f000 fd27 	bl	8003a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fb4:	4a06      	ldr	r2, [pc, #24]	@ (8002fd0 <HAL_InitTick+0x5c>)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	e000      	b.n	8002fc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20000084 	.word	0x20000084
 8002fcc:	2000008c 	.word	0x2000008c
 8002fd0:	20000088 	.word	0x20000088

08002fd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fd8:	4b06      	ldr	r3, [pc, #24]	@ (8002ff4 <HAL_IncTick+0x20>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4b06      	ldr	r3, [pc, #24]	@ (8002ff8 <HAL_IncTick+0x24>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	4a04      	ldr	r2, [pc, #16]	@ (8002ff8 <HAL_IncTick+0x24>)
 8002fe6:	6013      	str	r3, [r2, #0]
}
 8002fe8:	bf00      	nop
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	2000008c 	.word	0x2000008c
 8002ff8:	2000061c 	.word	0x2000061c

08002ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8003000:	4b03      	ldr	r3, [pc, #12]	@ (8003010 <HAL_GetTick+0x14>)
 8003002:	681b      	ldr	r3, [r3, #0]
}
 8003004:	4618      	mov	r0, r3
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	2000061c 	.word	0x2000061c

08003014 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800301c:	f7ff ffee 	bl	8002ffc <HAL_GetTick>
 8003020:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302c:	d005      	beq.n	800303a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800302e:	4b0a      	ldr	r3, [pc, #40]	@ (8003058 <HAL_Delay+0x44>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	461a      	mov	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4413      	add	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800303a:	bf00      	nop
 800303c:	f7ff ffde 	bl	8002ffc <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	429a      	cmp	r2, r3
 800304a:	d8f7      	bhi.n	800303c <HAL_Delay+0x28>
  {
  }
}
 800304c:	bf00      	nop
 800304e:	bf00      	nop
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	2000008c 	.word	0x2000008c

0800305c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003064:	2300      	movs	r3, #0
 8003066:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e033      	b.n	80030da <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003076:	2b00      	cmp	r3, #0
 8003078:	d109      	bne.n	800308e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7ff fb5e 	bl	800273c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003092:	f003 0310 	and.w	r3, r3, #16
 8003096:	2b00      	cmp	r3, #0
 8003098:	d118      	bne.n	80030cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80030a2:	f023 0302 	bic.w	r3, r3, #2
 80030a6:	f043 0202 	orr.w	r2, r3, #2
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fa4e 	bl	8003550 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030be:	f023 0303 	bic.w	r3, r3, #3
 80030c2:	f043 0201 	orr.w	r2, r3, #1
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80030ca:	e001      	b.n	80030d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <HAL_ADC_Start_DMA+0x1e>
 80030fe:	2302      	movs	r3, #2
 8003100:	e0ce      	b.n	80032a0 <HAL_ADC_Start_DMA+0x1bc>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 0301 	and.w	r3, r3, #1
 8003114:	2b01      	cmp	r3, #1
 8003116:	d018      	beq.n	800314a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f042 0201 	orr.w	r2, r2, #1
 8003126:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003128:	4b5f      	ldr	r3, [pc, #380]	@ (80032a8 <HAL_ADC_Start_DMA+0x1c4>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a5f      	ldr	r2, [pc, #380]	@ (80032ac <HAL_ADC_Start_DMA+0x1c8>)
 800312e:	fba2 2303 	umull	r2, r3, r2, r3
 8003132:	0c9a      	lsrs	r2, r3, #18
 8003134:	4613      	mov	r3, r2
 8003136:	005b      	lsls	r3, r3, #1
 8003138:	4413      	add	r3, r2
 800313a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800313c:	e002      	b.n	8003144 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	3b01      	subs	r3, #1
 8003142:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d1f9      	bne.n	800313e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003154:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003158:	d107      	bne.n	800316a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003168:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f003 0301 	and.w	r3, r3, #1
 8003174:	2b01      	cmp	r3, #1
 8003176:	f040 8086 	bne.w	8003286 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003182:	f023 0301 	bic.w	r3, r3, #1
 8003186:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003198:	2b00      	cmp	r3, #0
 800319a:	d007      	beq.n	80031ac <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80031a4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031b8:	d106      	bne.n	80031c8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031be:	f023 0206 	bic.w	r2, r3, #6
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	645a      	str	r2, [r3, #68]	@ 0x44
 80031c6:	e002      	b.n	80031ce <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031d6:	4b36      	ldr	r3, [pc, #216]	@ (80032b0 <HAL_ADC_Start_DMA+0x1cc>)
 80031d8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031de:	4a35      	ldr	r2, [pc, #212]	@ (80032b4 <HAL_ADC_Start_DMA+0x1d0>)
 80031e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e6:	4a34      	ldr	r2, [pc, #208]	@ (80032b8 <HAL_ADC_Start_DMA+0x1d4>)
 80031e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ee:	4a33      	ldr	r2, [pc, #204]	@ (80032bc <HAL_ADC_Start_DMA+0x1d8>)
 80031f0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80031fa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685a      	ldr	r2, [r3, #4]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800320a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800321a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	334c      	adds	r3, #76	@ 0x4c
 8003226:	4619      	mov	r1, r3
 8003228:	68ba      	ldr	r2, [r7, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f000 fcce 	bl	8003bcc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 031f 	and.w	r3, r3, #31
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10f      	bne.n	800325c <HAL_ADC_Start_DMA+0x178>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d129      	bne.n	800329e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689a      	ldr	r2, [r3, #8]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003258:	609a      	str	r2, [r3, #8]
 800325a:	e020      	b.n	800329e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a17      	ldr	r2, [pc, #92]	@ (80032c0 <HAL_ADC_Start_DMA+0x1dc>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d11b      	bne.n	800329e <HAL_ADC_Start_DMA+0x1ba>
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	d114      	bne.n	800329e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	e00b      	b.n	800329e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328a:	f043 0210 	orr.w	r2, r3, #16
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003296:	f043 0201 	orr.w	r2, r3, #1
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3718      	adds	r7, #24
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	20000084 	.word	0x20000084
 80032ac:	431bde83 	.word	0x431bde83
 80032b0:	40012300 	.word	0x40012300
 80032b4:	08003749 	.word	0x08003749
 80032b8:	08003803 	.word	0x08003803
 80032bc:	0800381f 	.word	0x0800381f
 80032c0:	40012000 	.word	0x40012000

080032c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <HAL_ADC_ConfigChannel+0x1c>
 8003304:	2302      	movs	r3, #2
 8003306:	e113      	b.n	8003530 <HAL_ADC_ConfigChannel+0x244>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b09      	cmp	r3, #9
 8003316:	d925      	bls.n	8003364 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	68d9      	ldr	r1, [r3, #12]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	b29b      	uxth	r3, r3
 8003324:	461a      	mov	r2, r3
 8003326:	4613      	mov	r3, r2
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	4413      	add	r3, r2
 800332c:	3b1e      	subs	r3, #30
 800332e:	2207      	movs	r2, #7
 8003330:	fa02 f303 	lsl.w	r3, r2, r3
 8003334:	43da      	mvns	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	400a      	ands	r2, r1
 800333c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	68d9      	ldr	r1, [r3, #12]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	b29b      	uxth	r3, r3
 800334e:	4618      	mov	r0, r3
 8003350:	4603      	mov	r3, r0
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	4403      	add	r3, r0
 8003356:	3b1e      	subs	r3, #30
 8003358:	409a      	lsls	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	60da      	str	r2, [r3, #12]
 8003362:	e022      	b.n	80033aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6919      	ldr	r1, [r3, #16]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	b29b      	uxth	r3, r3
 8003370:	461a      	mov	r2, r3
 8003372:	4613      	mov	r3, r2
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	4413      	add	r3, r2
 8003378:	2207      	movs	r2, #7
 800337a:	fa02 f303 	lsl.w	r3, r2, r3
 800337e:	43da      	mvns	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	400a      	ands	r2, r1
 8003386:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6919      	ldr	r1, [r3, #16]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	b29b      	uxth	r3, r3
 8003398:	4618      	mov	r0, r3
 800339a:	4603      	mov	r3, r0
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	4403      	add	r3, r0
 80033a0:	409a      	lsls	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b06      	cmp	r3, #6
 80033b0:	d824      	bhi.n	80033fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685a      	ldr	r2, [r3, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	4413      	add	r3, r2
 80033c2:	3b05      	subs	r3, #5
 80033c4:	221f      	movs	r2, #31
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43da      	mvns	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	400a      	ands	r2, r1
 80033d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	b29b      	uxth	r3, r3
 80033e0:	4618      	mov	r0, r3
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	4613      	mov	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	4413      	add	r3, r2
 80033ec:	3b05      	subs	r3, #5
 80033ee:	fa00 f203 	lsl.w	r2, r0, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80033fa:	e04c      	b.n	8003496 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b0c      	cmp	r3, #12
 8003402:	d824      	bhi.n	800344e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	3b23      	subs	r3, #35	@ 0x23
 8003416:	221f      	movs	r2, #31
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	43da      	mvns	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	400a      	ands	r2, r1
 8003424:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	b29b      	uxth	r3, r3
 8003432:	4618      	mov	r0, r3
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	685a      	ldr	r2, [r3, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	3b23      	subs	r3, #35	@ 0x23
 8003440:	fa00 f203 	lsl.w	r2, r0, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	631a      	str	r2, [r3, #48]	@ 0x30
 800344c:	e023      	b.n	8003496 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	3b41      	subs	r3, #65	@ 0x41
 8003460:	221f      	movs	r2, #31
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43da      	mvns	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	400a      	ands	r2, r1
 800346e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	b29b      	uxth	r3, r3
 800347c:	4618      	mov	r0, r3
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	3b41      	subs	r3, #65	@ 0x41
 800348a:	fa00 f203 	lsl.w	r2, r0, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003496:	4b29      	ldr	r3, [pc, #164]	@ (800353c <HAL_ADC_ConfigChannel+0x250>)
 8003498:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a28      	ldr	r2, [pc, #160]	@ (8003540 <HAL_ADC_ConfigChannel+0x254>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d10f      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x1d8>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b12      	cmp	r3, #18
 80034aa:	d10b      	bne.n	80034c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003540 <HAL_ADC_ConfigChannel+0x254>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d12b      	bne.n	8003526 <HAL_ADC_ConfigChannel+0x23a>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003544 <HAL_ADC_ConfigChannel+0x258>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d003      	beq.n	80034e0 <HAL_ADC_ConfigChannel+0x1f4>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b11      	cmp	r3, #17
 80034de:	d122      	bne.n	8003526 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a11      	ldr	r2, [pc, #68]	@ (8003544 <HAL_ADC_ConfigChannel+0x258>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d111      	bne.n	8003526 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003502:	4b11      	ldr	r3, [pc, #68]	@ (8003548 <HAL_ADC_ConfigChannel+0x25c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a11      	ldr	r2, [pc, #68]	@ (800354c <HAL_ADC_ConfigChannel+0x260>)
 8003508:	fba2 2303 	umull	r2, r3, r2, r3
 800350c:	0c9a      	lsrs	r2, r3, #18
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003518:	e002      	b.n	8003520 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	3b01      	subs	r3, #1
 800351e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d1f9      	bne.n	800351a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3714      	adds	r7, #20
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	40012300 	.word	0x40012300
 8003540:	40012000 	.word	0x40012000
 8003544:	10000012 	.word	0x10000012
 8003548:	20000084 	.word	0x20000084
 800354c:	431bde83 	.word	0x431bde83

08003550 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003558:	4b79      	ldr	r3, [pc, #484]	@ (8003740 <ADC_Init+0x1f0>)
 800355a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	685a      	ldr	r2, [r3, #4]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	431a      	orrs	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003584:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6859      	ldr	r1, [r3, #4]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	021a      	lsls	r2, r3, #8
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80035a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6899      	ldr	r1, [r3, #8]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e2:	4a58      	ldr	r2, [pc, #352]	@ (8003744 <ADC_Init+0x1f4>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d022      	beq.n	800362e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80035f6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6899      	ldr	r1, [r3, #8]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	689a      	ldr	r2, [r3, #8]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003618:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	6899      	ldr	r1, [r3, #8]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	e00f      	b.n	800364e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800363c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800364c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 0202 	bic.w	r2, r2, #2
 800365c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6899      	ldr	r1, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	7e1b      	ldrb	r3, [r3, #24]
 8003668:	005a      	lsls	r2, r3, #1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d01b      	beq.n	80036b4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800368a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800369a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6859      	ldr	r1, [r3, #4]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a6:	3b01      	subs	r3, #1
 80036a8:	035a      	lsls	r2, r3, #13
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	605a      	str	r2, [r3, #4]
 80036b2:	e007      	b.n	80036c4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036c2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80036d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	3b01      	subs	r3, #1
 80036e0:	051a      	lsls	r2, r3, #20
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80036f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	6899      	ldr	r1, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003706:	025a      	lsls	r2, r3, #9
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	430a      	orrs	r2, r1
 800370e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800371e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6899      	ldr	r1, [r3, #8]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	029a      	lsls	r2, r3, #10
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	609a      	str	r2, [r3, #8]
}
 8003734:	bf00      	nop
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	40012300 	.word	0x40012300
 8003744:	0f000001 	.word	0x0f000001

08003748 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003754:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800375e:	2b00      	cmp	r3, #0
 8003760:	d13c      	bne.n	80037dc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003766:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d12b      	bne.n	80037d4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003780:	2b00      	cmp	r3, #0
 8003782:	d127      	bne.n	80037d4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800378e:	2b00      	cmp	r3, #0
 8003790:	d006      	beq.n	80037a0 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800379c:	2b00      	cmp	r3, #0
 800379e:	d119      	bne.n	80037d4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0220 	bic.w	r2, r2, #32
 80037ae:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d105      	bne.n	80037d4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037cc:	f043 0201 	orr.w	r2, r3, #1
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f7fe fd73 	bl	80022c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80037da:	e00e      	b.n	80037fa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f7ff fd75 	bl	80032d8 <HAL_ADC_ErrorCallback>
}
 80037ee:	e004      	b.n	80037fa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	4798      	blx	r3
}
 80037fa:	bf00      	nop
 80037fc:	3710      	adds	r7, #16
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}

08003802 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b084      	sub	sp, #16
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f7ff fd57 	bl	80032c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003816:	bf00      	nop
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b084      	sub	sp, #16
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800382a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2240      	movs	r2, #64	@ 0x40
 8003830:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003836:	f043 0204 	orr.w	r2, r3, #4
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	f7ff fd4a 	bl	80032d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003844:	bf00      	nop
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800385c:	4b0c      	ldr	r3, [pc, #48]	@ (8003890 <__NVIC_SetPriorityGrouping+0x44>)
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003862:	68ba      	ldr	r2, [r7, #8]
 8003864:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003868:	4013      	ands	r3, r2
 800386a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003874:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003878:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800387c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800387e:	4a04      	ldr	r2, [pc, #16]	@ (8003890 <__NVIC_SetPriorityGrouping+0x44>)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	60d3      	str	r3, [r2, #12]
}
 8003884:	bf00      	nop
 8003886:	3714      	adds	r7, #20
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	e000ed00 	.word	0xe000ed00

08003894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003898:	4b04      	ldr	r3, [pc, #16]	@ (80038ac <__NVIC_GetPriorityGrouping+0x18>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	0a1b      	lsrs	r3, r3, #8
 800389e:	f003 0307 	and.w	r3, r3, #7
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	e000ed00 	.word	0xe000ed00

080038b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	db0b      	blt.n	80038da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	f003 021f 	and.w	r2, r3, #31
 80038c8:	4907      	ldr	r1, [pc, #28]	@ (80038e8 <__NVIC_EnableIRQ+0x38>)
 80038ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	2001      	movs	r0, #1
 80038d2:	fa00 f202 	lsl.w	r2, r0, r2
 80038d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038da:	bf00      	nop
 80038dc:	370c      	adds	r7, #12
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	e000e100 	.word	0xe000e100

080038ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4603      	mov	r3, r0
 80038f4:	6039      	str	r1, [r7, #0]
 80038f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	db0a      	blt.n	8003916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	b2da      	uxtb	r2, r3
 8003904:	490c      	ldr	r1, [pc, #48]	@ (8003938 <__NVIC_SetPriority+0x4c>)
 8003906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390a:	0112      	lsls	r2, r2, #4
 800390c:	b2d2      	uxtb	r2, r2
 800390e:	440b      	add	r3, r1
 8003910:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003914:	e00a      	b.n	800392c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	b2da      	uxtb	r2, r3
 800391a:	4908      	ldr	r1, [pc, #32]	@ (800393c <__NVIC_SetPriority+0x50>)
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	3b04      	subs	r3, #4
 8003924:	0112      	lsls	r2, r2, #4
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	440b      	add	r3, r1
 800392a:	761a      	strb	r2, [r3, #24]
}
 800392c:	bf00      	nop
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	e000e100 	.word	0xe000e100
 800393c:	e000ed00 	.word	0xe000ed00

08003940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003940:	b480      	push	{r7}
 8003942:	b089      	sub	sp, #36	@ 0x24
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f1c3 0307 	rsb	r3, r3, #7
 800395a:	2b04      	cmp	r3, #4
 800395c:	bf28      	it	cs
 800395e:	2304      	movcs	r3, #4
 8003960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	3304      	adds	r3, #4
 8003966:	2b06      	cmp	r3, #6
 8003968:	d902      	bls.n	8003970 <NVIC_EncodePriority+0x30>
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	3b03      	subs	r3, #3
 800396e:	e000      	b.n	8003972 <NVIC_EncodePriority+0x32>
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003974:	f04f 32ff 	mov.w	r2, #4294967295
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	fa02 f303 	lsl.w	r3, r2, r3
 800397e:	43da      	mvns	r2, r3
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	401a      	ands	r2, r3
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003988:	f04f 31ff 	mov.w	r1, #4294967295
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	fa01 f303 	lsl.w	r3, r1, r3
 8003992:	43d9      	mvns	r1, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003998:	4313      	orrs	r3, r2
         );
}
 800399a:	4618      	mov	r0, r3
 800399c:	3724      	adds	r7, #36	@ 0x24
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
	...

080039a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039b8:	d301      	bcc.n	80039be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039ba:	2301      	movs	r3, #1
 80039bc:	e00f      	b.n	80039de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039be:	4a0a      	ldr	r2, [pc, #40]	@ (80039e8 <SysTick_Config+0x40>)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039c6:	210f      	movs	r1, #15
 80039c8:	f04f 30ff 	mov.w	r0, #4294967295
 80039cc:	f7ff ff8e 	bl	80038ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039d0:	4b05      	ldr	r3, [pc, #20]	@ (80039e8 <SysTick_Config+0x40>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80039d6:	4b04      	ldr	r3, [pc, #16]	@ (80039e8 <SysTick_Config+0x40>)
 80039d8:	2207      	movs	r2, #7
 80039da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	e000e010 	.word	0xe000e010

080039ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff ff29 	bl	800384c <__NVIC_SetPriorityGrouping>
}
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b086      	sub	sp, #24
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	4603      	mov	r3, r0
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	607a      	str	r2, [r7, #4]
 8003a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a14:	f7ff ff3e 	bl	8003894 <__NVIC_GetPriorityGrouping>
 8003a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	68b9      	ldr	r1, [r7, #8]
 8003a1e:	6978      	ldr	r0, [r7, #20]
 8003a20:	f7ff ff8e 	bl	8003940 <NVIC_EncodePriority>
 8003a24:	4602      	mov	r2, r0
 8003a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff ff5d 	bl	80038ec <__NVIC_SetPriority>
}
 8003a32:	bf00      	nop
 8003a34:	3718      	adds	r7, #24
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	4603      	mov	r3, r0
 8003a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff ff31 	bl	80038b0 <__NVIC_EnableIRQ>
}
 8003a4e:	bf00      	nop
 8003a50:	3708      	adds	r7, #8
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff ffa2 	bl	80039a8 <SysTick_Config>
 8003a64:	4603      	mov	r3, r0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b086      	sub	sp, #24
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003a7c:	f7ff fabe 	bl	8002ffc <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d101      	bne.n	8003a8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e099      	b.n	8003bc0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 0201 	bic.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003aac:	e00f      	b.n	8003ace <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003aae:	f7ff faa5 	bl	8002ffc <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b05      	cmp	r3, #5
 8003aba:	d908      	bls.n	8003ace <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2220      	movs	r2, #32
 8003ac0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2203      	movs	r2, #3
 8003ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e078      	b.n	8003bc0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0301 	and.w	r3, r3, #1
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1e8      	bne.n	8003aae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	4b38      	ldr	r3, [pc, #224]	@ (8003bc8 <HAL_DMA_Init+0x158>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003afa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d107      	bne.n	8003b38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b30:	4313      	orrs	r3, r2
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	697a      	ldr	r2, [r7, #20]
 8003b3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f023 0307 	bic.w	r3, r3, #7
 8003b4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d117      	bne.n	8003b92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00e      	beq.n	8003b92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 fb0d 	bl	8004194 <DMA_CheckFifoParam>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d008      	beq.n	8003b92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2240      	movs	r2, #64	@ 0x40
 8003b84:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e016      	b.n	8003bc0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	697a      	ldr	r2, [r7, #20]
 8003b98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fac4 	bl	8004128 <DMA_CalcBaseAndBitshift>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba8:	223f      	movs	r2, #63	@ 0x3f
 8003baa:	409a      	lsls	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	f010803f 	.word	0xf010803f

08003bcc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b086      	sub	sp, #24
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
 8003bd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d101      	bne.n	8003bf2 <HAL_DMA_Start_IT+0x26>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e040      	b.n	8003c74 <HAL_DMA_Start_IT+0xa8>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d12f      	bne.n	8003c66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2202      	movs	r2, #2
 8003c0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	68b9      	ldr	r1, [r7, #8]
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 fa56 	bl	80040cc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c24:	223f      	movs	r2, #63	@ 0x3f
 8003c26:	409a      	lsls	r2, r3
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f042 0216 	orr.w	r2, r2, #22
 8003c3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d007      	beq.n	8003c54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f042 0208 	orr.w	r2, r2, #8
 8003c52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]
 8003c64:	e005      	b.n	8003c72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003c6e:	2302      	movs	r3, #2
 8003c70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003c72:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003c8a:	f7ff f9b7 	bl	8002ffc <HAL_GetTick>
 8003c8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d008      	beq.n	8003cae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2280      	movs	r2, #128	@ 0x80
 8003ca0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e052      	b.n	8003d54 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0216 	bic.w	r2, r2, #22
 8003cbc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	695a      	ldr	r2, [r3, #20]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003ccc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d103      	bne.n	8003cde <HAL_DMA_Abort+0x62>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d007      	beq.n	8003cee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0208 	bic.w	r2, r2, #8
 8003cec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0201 	bic.w	r2, r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003cfe:	e013      	b.n	8003d28 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d00:	f7ff f97c 	bl	8002ffc <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b05      	cmp	r3, #5
 8003d0c:	d90c      	bls.n	8003d28 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2203      	movs	r2, #3
 8003d18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003d24:	2303      	movs	r3, #3
 8003d26:	e015      	b.n	8003d54 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1e4      	bne.n	8003d00 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d3a:	223f      	movs	r2, #63	@ 0x3f
 8003d3c:	409a      	lsls	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2201      	movs	r2, #1
 8003d46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d004      	beq.n	8003d7a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2280      	movs	r2, #128	@ 0x80
 8003d74:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e00c      	b.n	8003d94 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2205      	movs	r2, #5
 8003d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f022 0201 	bic.w	r2, r2, #1
 8003d90:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	370c      	adds	r7, #12
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003dac:	4b8e      	ldr	r3, [pc, #568]	@ (8003fe8 <HAL_DMA_IRQHandler+0x248>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a8e      	ldr	r2, [pc, #568]	@ (8003fec <HAL_DMA_IRQHandler+0x24c>)
 8003db2:	fba2 2303 	umull	r2, r3, r2, r3
 8003db6:	0a9b      	lsrs	r3, r3, #10
 8003db8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dca:	2208      	movs	r2, #8
 8003dcc:	409a      	lsls	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d01a      	beq.n	8003e0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 0304 	and.w	r3, r3, #4
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d013      	beq.n	8003e0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f022 0204 	bic.w	r2, r2, #4
 8003df2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df8:	2208      	movs	r2, #8
 8003dfa:	409a      	lsls	r2, r3
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e04:	f043 0201 	orr.w	r2, r3, #1
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e10:	2201      	movs	r2, #1
 8003e12:	409a      	lsls	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4013      	ands	r3, r2
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d012      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00b      	beq.n	8003e42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2e:	2201      	movs	r2, #1
 8003e30:	409a      	lsls	r2, r3
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e3a:	f043 0202 	orr.w	r2, r3, #2
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e46:	2204      	movs	r2, #4
 8003e48:	409a      	lsls	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d012      	beq.n	8003e78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00b      	beq.n	8003e78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e64:	2204      	movs	r2, #4
 8003e66:	409a      	lsls	r2, r3
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e70:	f043 0204 	orr.w	r2, r3, #4
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e7c:	2210      	movs	r2, #16
 8003e7e:	409a      	lsls	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4013      	ands	r3, r2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d043      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d03c      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e9a:	2210      	movs	r2, #16
 8003e9c:	409a      	lsls	r2, r3
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d018      	beq.n	8003ee2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d108      	bne.n	8003ed0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d024      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	4798      	blx	r3
 8003ece:	e01f      	b.n	8003f10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d01b      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	4798      	blx	r3
 8003ee0:	e016      	b.n	8003f10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d107      	bne.n	8003f00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f022 0208 	bic.w	r2, r2, #8
 8003efe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f14:	2220      	movs	r2, #32
 8003f16:	409a      	lsls	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 808f 	beq.w	8004040 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0310 	and.w	r3, r3, #16
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f000 8087 	beq.w	8004040 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f36:	2220      	movs	r2, #32
 8003f38:	409a      	lsls	r2, r3
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b05      	cmp	r3, #5
 8003f48:	d136      	bne.n	8003fb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0216 	bic.w	r2, r2, #22
 8003f58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695a      	ldr	r2, [r3, #20]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d103      	bne.n	8003f7a <HAL_DMA_IRQHandler+0x1da>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d007      	beq.n	8003f8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 0208 	bic.w	r2, r2, #8
 8003f88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f8e:	223f      	movs	r2, #63	@ 0x3f
 8003f90:	409a      	lsls	r2, r3
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d07e      	beq.n	80040ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	4798      	blx	r3
        }
        return;
 8003fb6:	e079      	b.n	80040ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d01d      	beq.n	8004002 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d10d      	bne.n	8003ff0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d031      	beq.n	8004040 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	4798      	blx	r3
 8003fe4:	e02c      	b.n	8004040 <HAL_DMA_IRQHandler+0x2a0>
 8003fe6:	bf00      	nop
 8003fe8:	20000084 	.word	0x20000084
 8003fec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d023      	beq.n	8004040 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	4798      	blx	r3
 8004000:	e01e      	b.n	8004040 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10f      	bne.n	8004030 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f022 0210 	bic.w	r2, r2, #16
 800401e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004044:	2b00      	cmp	r3, #0
 8004046:	d032      	beq.n	80040ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d022      	beq.n	800409a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2205      	movs	r2, #5
 8004058:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 0201 	bic.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	3301      	adds	r3, #1
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	429a      	cmp	r2, r3
 8004076:	d307      	bcc.n	8004088 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f2      	bne.n	800406c <HAL_DMA_IRQHandler+0x2cc>
 8004086:	e000      	b.n	800408a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004088:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d005      	beq.n	80040ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	4798      	blx	r3
 80040aa:	e000      	b.n	80040ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80040ac:	bf00      	nop
    }
  }
}
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80040e8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2b40      	cmp	r3, #64	@ 0x40
 80040f8:	d108      	bne.n	800410c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68ba      	ldr	r2, [r7, #8]
 8004108:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800410a:	e007      	b.n	800411c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68ba      	ldr	r2, [r7, #8]
 8004112:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	60da      	str	r2, [r3, #12]
}
 800411c:	bf00      	nop
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	b2db      	uxtb	r3, r3
 8004136:	3b10      	subs	r3, #16
 8004138:	4a14      	ldr	r2, [pc, #80]	@ (800418c <DMA_CalcBaseAndBitshift+0x64>)
 800413a:	fba2 2303 	umull	r2, r3, r2, r3
 800413e:	091b      	lsrs	r3, r3, #4
 8004140:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004142:	4a13      	ldr	r2, [pc, #76]	@ (8004190 <DMA_CalcBaseAndBitshift+0x68>)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4413      	add	r3, r2
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	461a      	mov	r2, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2b03      	cmp	r3, #3
 8004154:	d909      	bls.n	800416a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800415e:	f023 0303 	bic.w	r3, r3, #3
 8004162:	1d1a      	adds	r2, r3, #4
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	659a      	str	r2, [r3, #88]	@ 0x58
 8004168:	e007      	b.n	800417a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004172:	f023 0303 	bic.w	r3, r3, #3
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800417e:	4618      	mov	r0, r3
 8004180:	3714      	adds	r7, #20
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	aaaaaaab 	.word	0xaaaaaaab
 8004190:	0800c810 	.word	0x0800c810

08004194 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800419c:	2300      	movs	r3, #0
 800419e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d11f      	bne.n	80041ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	d856      	bhi.n	8004262 <DMA_CheckFifoParam+0xce>
 80041b4:	a201      	add	r2, pc, #4	@ (adr r2, 80041bc <DMA_CheckFifoParam+0x28>)
 80041b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ba:	bf00      	nop
 80041bc:	080041cd 	.word	0x080041cd
 80041c0:	080041df 	.word	0x080041df
 80041c4:	080041cd 	.word	0x080041cd
 80041c8:	08004263 	.word	0x08004263
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d046      	beq.n	8004266 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041dc:	e043      	b.n	8004266 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80041e6:	d140      	bne.n	800426a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041ec:	e03d      	b.n	800426a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	699b      	ldr	r3, [r3, #24]
 80041f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041f6:	d121      	bne.n	800423c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b03      	cmp	r3, #3
 80041fc:	d837      	bhi.n	800426e <DMA_CheckFifoParam+0xda>
 80041fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004204 <DMA_CheckFifoParam+0x70>)
 8004200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004204:	08004215 	.word	0x08004215
 8004208:	0800421b 	.word	0x0800421b
 800420c:	08004215 	.word	0x08004215
 8004210:	0800422d 	.word	0x0800422d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	73fb      	strb	r3, [r7, #15]
      break;
 8004218:	e030      	b.n	800427c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d025      	beq.n	8004272 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800422a:	e022      	b.n	8004272 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004230:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004234:	d11f      	bne.n	8004276 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800423a:	e01c      	b.n	8004276 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2b02      	cmp	r3, #2
 8004240:	d903      	bls.n	800424a <DMA_CheckFifoParam+0xb6>
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2b03      	cmp	r3, #3
 8004246:	d003      	beq.n	8004250 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004248:	e018      	b.n	800427c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	73fb      	strb	r3, [r7, #15]
      break;
 800424e:	e015      	b.n	800427c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004254:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00e      	beq.n	800427a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	73fb      	strb	r3, [r7, #15]
      break;
 8004260:	e00b      	b.n	800427a <DMA_CheckFifoParam+0xe6>
      break;
 8004262:	bf00      	nop
 8004264:	e00a      	b.n	800427c <DMA_CheckFifoParam+0xe8>
      break;
 8004266:	bf00      	nop
 8004268:	e008      	b.n	800427c <DMA_CheckFifoParam+0xe8>
      break;
 800426a:	bf00      	nop
 800426c:	e006      	b.n	800427c <DMA_CheckFifoParam+0xe8>
      break;
 800426e:	bf00      	nop
 8004270:	e004      	b.n	800427c <DMA_CheckFifoParam+0xe8>
      break;
 8004272:	bf00      	nop
 8004274:	e002      	b.n	800427c <DMA_CheckFifoParam+0xe8>
      break;   
 8004276:	bf00      	nop
 8004278:	e000      	b.n	800427c <DMA_CheckFifoParam+0xe8>
      break;
 800427a:	bf00      	nop
    }
  } 
  
  return status; 
 800427c:	7bfb      	ldrb	r3, [r7, #15]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop

0800428c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800428c:	b480      	push	{r7}
 800428e:	b089      	sub	sp, #36	@ 0x24
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004296:	2300      	movs	r3, #0
 8004298:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800429a:	2300      	movs	r3, #0
 800429c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800429e:	2300      	movs	r3, #0
 80042a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042a2:	2300      	movs	r3, #0
 80042a4:	61fb      	str	r3, [r7, #28]
 80042a6:	e159      	b.n	800455c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042a8:	2201      	movs	r2, #1
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	4013      	ands	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042bc:	693a      	ldr	r2, [r7, #16]
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	f040 8148 	bne.w	8004556 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d005      	beq.n	80042de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d130      	bne.n	8004340 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	2203      	movs	r2, #3
 80042ea:	fa02 f303 	lsl.w	r3, r2, r3
 80042ee:	43db      	mvns	r3, r3
 80042f0:	69ba      	ldr	r2, [r7, #24]
 80042f2:	4013      	ands	r3, r2
 80042f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	68da      	ldr	r2, [r3, #12]
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	4313      	orrs	r3, r2
 8004306:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	69ba      	ldr	r2, [r7, #24]
 800430c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004314:	2201      	movs	r2, #1
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	fa02 f303 	lsl.w	r3, r2, r3
 800431c:	43db      	mvns	r3, r3
 800431e:	69ba      	ldr	r2, [r7, #24]
 8004320:	4013      	ands	r3, r2
 8004322:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	091b      	lsrs	r3, r3, #4
 800432a:	f003 0201 	and.w	r2, r3, #1
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	fa02 f303 	lsl.w	r3, r2, r3
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	4313      	orrs	r3, r2
 8004338:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f003 0303 	and.w	r3, r3, #3
 8004348:	2b03      	cmp	r3, #3
 800434a:	d017      	beq.n	800437c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	005b      	lsls	r3, r3, #1
 8004356:	2203      	movs	r2, #3
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	43db      	mvns	r3, r3
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	4013      	ands	r3, r2
 8004362:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	4313      	orrs	r3, r2
 8004374:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f003 0303 	and.w	r3, r3, #3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d123      	bne.n	80043d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	08da      	lsrs	r2, r3, #3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3208      	adds	r2, #8
 8004390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004394:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	220f      	movs	r2, #15
 80043a0:	fa02 f303 	lsl.w	r3, r2, r3
 80043a4:	43db      	mvns	r3, r3
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	4013      	ands	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	4313      	orrs	r3, r2
 80043c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	08da      	lsrs	r2, r3, #3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	3208      	adds	r2, #8
 80043ca:	69b9      	ldr	r1, [r7, #24]
 80043cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	2203      	movs	r2, #3
 80043dc:	fa02 f303 	lsl.w	r3, r2, r3
 80043e0:	43db      	mvns	r3, r3
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	4013      	ands	r3, r2
 80043e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f003 0203 	and.w	r2, r3, #3
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 80a2 	beq.w	8004556 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	4b57      	ldr	r3, [pc, #348]	@ (8004574 <HAL_GPIO_Init+0x2e8>)
 8004418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800441a:	4a56      	ldr	r2, [pc, #344]	@ (8004574 <HAL_GPIO_Init+0x2e8>)
 800441c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004420:	6453      	str	r3, [r2, #68]	@ 0x44
 8004422:	4b54      	ldr	r3, [pc, #336]	@ (8004574 <HAL_GPIO_Init+0x2e8>)
 8004424:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004426:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800442e:	4a52      	ldr	r2, [pc, #328]	@ (8004578 <HAL_GPIO_Init+0x2ec>)
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	089b      	lsrs	r3, r3, #2
 8004434:	3302      	adds	r3, #2
 8004436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800443a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	f003 0303 	and.w	r3, r3, #3
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	220f      	movs	r2, #15
 8004446:	fa02 f303 	lsl.w	r3, r2, r3
 800444a:	43db      	mvns	r3, r3
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	4013      	ands	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a49      	ldr	r2, [pc, #292]	@ (800457c <HAL_GPIO_Init+0x2f0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d019      	beq.n	800448e <HAL_GPIO_Init+0x202>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a48      	ldr	r2, [pc, #288]	@ (8004580 <HAL_GPIO_Init+0x2f4>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d013      	beq.n	800448a <HAL_GPIO_Init+0x1fe>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a47      	ldr	r2, [pc, #284]	@ (8004584 <HAL_GPIO_Init+0x2f8>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d00d      	beq.n	8004486 <HAL_GPIO_Init+0x1fa>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a46      	ldr	r2, [pc, #280]	@ (8004588 <HAL_GPIO_Init+0x2fc>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d007      	beq.n	8004482 <HAL_GPIO_Init+0x1f6>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a45      	ldr	r2, [pc, #276]	@ (800458c <HAL_GPIO_Init+0x300>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d101      	bne.n	800447e <HAL_GPIO_Init+0x1f2>
 800447a:	2304      	movs	r3, #4
 800447c:	e008      	b.n	8004490 <HAL_GPIO_Init+0x204>
 800447e:	2307      	movs	r3, #7
 8004480:	e006      	b.n	8004490 <HAL_GPIO_Init+0x204>
 8004482:	2303      	movs	r3, #3
 8004484:	e004      	b.n	8004490 <HAL_GPIO_Init+0x204>
 8004486:	2302      	movs	r3, #2
 8004488:	e002      	b.n	8004490 <HAL_GPIO_Init+0x204>
 800448a:	2301      	movs	r3, #1
 800448c:	e000      	b.n	8004490 <HAL_GPIO_Init+0x204>
 800448e:	2300      	movs	r3, #0
 8004490:	69fa      	ldr	r2, [r7, #28]
 8004492:	f002 0203 	and.w	r2, r2, #3
 8004496:	0092      	lsls	r2, r2, #2
 8004498:	4093      	lsls	r3, r2
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4313      	orrs	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80044a0:	4935      	ldr	r1, [pc, #212]	@ (8004578 <HAL_GPIO_Init+0x2ec>)
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	089b      	lsrs	r3, r3, #2
 80044a6:	3302      	adds	r3, #2
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044ae:	4b38      	ldr	r3, [pc, #224]	@ (8004590 <HAL_GPIO_Init+0x304>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	43db      	mvns	r3, r3
 80044b8:	69ba      	ldr	r2, [r7, #24]
 80044ba:	4013      	ands	r3, r2
 80044bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044d2:	4a2f      	ldr	r2, [pc, #188]	@ (8004590 <HAL_GPIO_Init+0x304>)
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044d8:	4b2d      	ldr	r3, [pc, #180]	@ (8004590 <HAL_GPIO_Init+0x304>)
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	43db      	mvns	r3, r3
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	4013      	ands	r3, r2
 80044e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044fc:	4a24      	ldr	r2, [pc, #144]	@ (8004590 <HAL_GPIO_Init+0x304>)
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004502:	4b23      	ldr	r3, [pc, #140]	@ (8004590 <HAL_GPIO_Init+0x304>)
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	43db      	mvns	r3, r3
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	4013      	ands	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800451e:	69ba      	ldr	r2, [r7, #24]
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	4313      	orrs	r3, r2
 8004524:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004526:	4a1a      	ldr	r2, [pc, #104]	@ (8004590 <HAL_GPIO_Init+0x304>)
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800452c:	4b18      	ldr	r3, [pc, #96]	@ (8004590 <HAL_GPIO_Init+0x304>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	43db      	mvns	r3, r3
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	4013      	ands	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d003      	beq.n	8004550 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004550:	4a0f      	ldr	r2, [pc, #60]	@ (8004590 <HAL_GPIO_Init+0x304>)
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	3301      	adds	r3, #1
 800455a:	61fb      	str	r3, [r7, #28]
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	2b0f      	cmp	r3, #15
 8004560:	f67f aea2 	bls.w	80042a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004564:	bf00      	nop
 8004566:	bf00      	nop
 8004568:	3724      	adds	r7, #36	@ 0x24
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	40023800 	.word	0x40023800
 8004578:	40013800 	.word	0x40013800
 800457c:	40020000 	.word	0x40020000
 8004580:	40020400 	.word	0x40020400
 8004584:	40020800 	.word	0x40020800
 8004588:	40020c00 	.word	0x40020c00
 800458c:	40021000 	.word	0x40021000
 8004590:	40013c00 	.word	0x40013c00

08004594 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	460b      	mov	r3, r1
 800459e:	807b      	strh	r3, [r7, #2]
 80045a0:	4613      	mov	r3, r2
 80045a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80045a4:	787b      	ldrb	r3, [r7, #1]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045aa:	887a      	ldrh	r2, [r7, #2]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80045b0:	e003      	b.n	80045ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80045b2:	887b      	ldrh	r3, [r7, #2]
 80045b4:	041a      	lsls	r2, r3, #16
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	619a      	str	r2, [r3, #24]
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
	...

080045c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e12b      	b.n	8004832 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d106      	bne.n	80045f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7fe f91c 	bl	800282c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2224      	movs	r2, #36	@ 0x24
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0201 	bic.w	r2, r2, #1
 800460a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800461a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800462a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800462c:	f001 fe4a 	bl	80062c4 <HAL_RCC_GetPCLK1Freq>
 8004630:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	4a81      	ldr	r2, [pc, #516]	@ (800483c <HAL_I2C_Init+0x274>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d807      	bhi.n	800464c <HAL_I2C_Init+0x84>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4a80      	ldr	r2, [pc, #512]	@ (8004840 <HAL_I2C_Init+0x278>)
 8004640:	4293      	cmp	r3, r2
 8004642:	bf94      	ite	ls
 8004644:	2301      	movls	r3, #1
 8004646:	2300      	movhi	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	e006      	b.n	800465a <HAL_I2C_Init+0x92>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4a7d      	ldr	r2, [pc, #500]	@ (8004844 <HAL_I2C_Init+0x27c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	bf94      	ite	ls
 8004654:	2301      	movls	r3, #1
 8004656:	2300      	movhi	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e0e7      	b.n	8004832 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4a78      	ldr	r2, [pc, #480]	@ (8004848 <HAL_I2C_Init+0x280>)
 8004666:	fba2 2303 	umull	r2, r3, r2, r3
 800466a:	0c9b      	lsrs	r3, r3, #18
 800466c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	430a      	orrs	r2, r1
 8004680:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	4a6a      	ldr	r2, [pc, #424]	@ (800483c <HAL_I2C_Init+0x274>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d802      	bhi.n	800469c <HAL_I2C_Init+0xd4>
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	3301      	adds	r3, #1
 800469a:	e009      	b.n	80046b0 <HAL_I2C_Init+0xe8>
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80046a2:	fb02 f303 	mul.w	r3, r2, r3
 80046a6:	4a69      	ldr	r2, [pc, #420]	@ (800484c <HAL_I2C_Init+0x284>)
 80046a8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ac:	099b      	lsrs	r3, r3, #6
 80046ae:	3301      	adds	r3, #1
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6812      	ldr	r2, [r2, #0]
 80046b4:	430b      	orrs	r3, r1
 80046b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	69db      	ldr	r3, [r3, #28]
 80046be:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80046c2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	495c      	ldr	r1, [pc, #368]	@ (800483c <HAL_I2C_Init+0x274>)
 80046cc:	428b      	cmp	r3, r1
 80046ce:	d819      	bhi.n	8004704 <HAL_I2C_Init+0x13c>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	1e59      	subs	r1, r3, #1
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	fbb1 f3f3 	udiv	r3, r1, r3
 80046de:	1c59      	adds	r1, r3, #1
 80046e0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80046e4:	400b      	ands	r3, r1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d00a      	beq.n	8004700 <HAL_I2C_Init+0x138>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	1e59      	subs	r1, r3, #1
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80046f8:	3301      	adds	r3, #1
 80046fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046fe:	e051      	b.n	80047a4 <HAL_I2C_Init+0x1dc>
 8004700:	2304      	movs	r3, #4
 8004702:	e04f      	b.n	80047a4 <HAL_I2C_Init+0x1dc>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d111      	bne.n	8004730 <HAL_I2C_Init+0x168>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	1e58      	subs	r0, r3, #1
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6859      	ldr	r1, [r3, #4]
 8004714:	460b      	mov	r3, r1
 8004716:	005b      	lsls	r3, r3, #1
 8004718:	440b      	add	r3, r1
 800471a:	fbb0 f3f3 	udiv	r3, r0, r3
 800471e:	3301      	adds	r3, #1
 8004720:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004724:	2b00      	cmp	r3, #0
 8004726:	bf0c      	ite	eq
 8004728:	2301      	moveq	r3, #1
 800472a:	2300      	movne	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	e012      	b.n	8004756 <HAL_I2C_Init+0x18e>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	1e58      	subs	r0, r3, #1
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6859      	ldr	r1, [r3, #4]
 8004738:	460b      	mov	r3, r1
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	440b      	add	r3, r1
 800473e:	0099      	lsls	r1, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	fbb0 f3f3 	udiv	r3, r0, r3
 8004746:	3301      	adds	r3, #1
 8004748:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800474c:	2b00      	cmp	r3, #0
 800474e:	bf0c      	ite	eq
 8004750:	2301      	moveq	r3, #1
 8004752:	2300      	movne	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <HAL_I2C_Init+0x196>
 800475a:	2301      	movs	r3, #1
 800475c:	e022      	b.n	80047a4 <HAL_I2C_Init+0x1dc>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10e      	bne.n	8004784 <HAL_I2C_Init+0x1bc>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	1e58      	subs	r0, r3, #1
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6859      	ldr	r1, [r3, #4]
 800476e:	460b      	mov	r3, r1
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	440b      	add	r3, r1
 8004774:	fbb0 f3f3 	udiv	r3, r0, r3
 8004778:	3301      	adds	r3, #1
 800477a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800477e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004782:	e00f      	b.n	80047a4 <HAL_I2C_Init+0x1dc>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	1e58      	subs	r0, r3, #1
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6859      	ldr	r1, [r3, #4]
 800478c:	460b      	mov	r3, r1
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	440b      	add	r3, r1
 8004792:	0099      	lsls	r1, r3, #2
 8004794:	440b      	add	r3, r1
 8004796:	fbb0 f3f3 	udiv	r3, r0, r3
 800479a:	3301      	adds	r3, #1
 800479c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80047a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	6809      	ldr	r1, [r1, #0]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	69da      	ldr	r2, [r3, #28]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	431a      	orrs	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80047d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6911      	ldr	r1, [r2, #16]
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	68d2      	ldr	r2, [r2, #12]
 80047de:	4311      	orrs	r1, r2
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	6812      	ldr	r2, [r2, #0]
 80047e4:	430b      	orrs	r3, r1
 80047e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	695a      	ldr	r2, [r3, #20]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	431a      	orrs	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0201 	orr.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2220      	movs	r2, #32
 800481e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	000186a0 	.word	0x000186a0
 8004840:	001e847f 	.word	0x001e847f
 8004844:	003d08ff 	.word	0x003d08ff
 8004848:	431bde83 	.word	0x431bde83
 800484c:	10624dd3 	.word	0x10624dd3

08004850 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b08c      	sub	sp, #48	@ 0x30
 8004854:	af02      	add	r7, sp, #8
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	4608      	mov	r0, r1
 800485a:	4611      	mov	r1, r2
 800485c:	461a      	mov	r2, r3
 800485e:	4603      	mov	r3, r0
 8004860:	817b      	strh	r3, [r7, #10]
 8004862:	460b      	mov	r3, r1
 8004864:	813b      	strh	r3, [r7, #8]
 8004866:	4613      	mov	r3, r2
 8004868:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800486a:	f7fe fbc7 	bl	8002ffc <HAL_GetTick>
 800486e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004876:	b2db      	uxtb	r3, r3
 8004878:	2b20      	cmp	r3, #32
 800487a:	f040 8214 	bne.w	8004ca6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800487e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004880:	9300      	str	r3, [sp, #0]
 8004882:	2319      	movs	r3, #25
 8004884:	2201      	movs	r2, #1
 8004886:	497b      	ldr	r1, [pc, #492]	@ (8004a74 <HAL_I2C_Mem_Read+0x224>)
 8004888:	68f8      	ldr	r0, [r7, #12]
 800488a:	f000 fefd 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004894:	2302      	movs	r3, #2
 8004896:	e207      	b.n	8004ca8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d101      	bne.n	80048a6 <HAL_I2C_Mem_Read+0x56>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e200      	b.n	8004ca8 <HAL_I2C_Mem_Read+0x458>
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d007      	beq.n	80048cc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f042 0201 	orr.w	r2, r2, #1
 80048ca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048da:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2222      	movs	r2, #34	@ 0x22
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2240      	movs	r2, #64	@ 0x40
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80048fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004902:	b29a      	uxth	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	4a5b      	ldr	r2, [pc, #364]	@ (8004a78 <HAL_I2C_Mem_Read+0x228>)
 800490c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800490e:	88f8      	ldrh	r0, [r7, #6]
 8004910:	893a      	ldrh	r2, [r7, #8]
 8004912:	8979      	ldrh	r1, [r7, #10]
 8004914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004916:	9301      	str	r3, [sp, #4]
 8004918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	4603      	mov	r3, r0
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f000 fcae 	bl	8005280 <I2C_RequestMemoryRead>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d001      	beq.n	800492e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e1bc      	b.n	8004ca8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004932:	2b00      	cmp	r3, #0
 8004934:	d113      	bne.n	800495e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004936:	2300      	movs	r3, #0
 8004938:	623b      	str	r3, [r7, #32]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	623b      	str	r3, [r7, #32]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	623b      	str	r3, [r7, #32]
 800494a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	e190      	b.n	8004c80 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004962:	2b01      	cmp	r3, #1
 8004964:	d11b      	bne.n	800499e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004974:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004976:	2300      	movs	r3, #0
 8004978:	61fb      	str	r3, [r7, #28]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	61fb      	str	r3, [r7, #28]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	61fb      	str	r3, [r7, #28]
 800498a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	e170      	b.n	8004c80 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d11b      	bne.n	80049de <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c6:	2300      	movs	r3, #0
 80049c8:	61bb      	str	r3, [r7, #24]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	61bb      	str	r3, [r7, #24]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	61bb      	str	r3, [r7, #24]
 80049da:	69bb      	ldr	r3, [r7, #24]
 80049dc:	e150      	b.n	8004c80 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049de:	2300      	movs	r3, #0
 80049e0:	617b      	str	r3, [r7, #20]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	617b      	str	r3, [r7, #20]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	617b      	str	r3, [r7, #20]
 80049f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80049f4:	e144      	b.n	8004c80 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049fa:	2b03      	cmp	r3, #3
 80049fc:	f200 80f1 	bhi.w	8004be2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d123      	bne.n	8004a50 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a0a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004a0c:	68f8      	ldr	r0, [r7, #12]
 8004a0e:	f000 ff9d 	bl	800594c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e145      	b.n	8004ca8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691a      	ldr	r2, [r3, #16]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	3b01      	subs	r3, #1
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a4e:	e117      	b.n	8004c80 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a54:	2b02      	cmp	r3, #2
 8004a56:	d14e      	bne.n	8004af6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a5e:	2200      	movs	r2, #0
 8004a60:	4906      	ldr	r1, [pc, #24]	@ (8004a7c <HAL_I2C_Mem_Read+0x22c>)
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f000 fe10 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d008      	beq.n	8004a80 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e11a      	b.n	8004ca8 <HAL_I2C_Mem_Read+0x458>
 8004a72:	bf00      	nop
 8004a74:	00100002 	.word	0x00100002
 8004a78:	ffff0000 	.word	0xffff0000
 8004a7c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691a      	ldr	r2, [r3, #16]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9a:	b2d2      	uxtb	r2, r2
 8004a9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa2:	1c5a      	adds	r2, r3, #1
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aac:	3b01      	subs	r3, #1
 8004aae:	b29a      	uxth	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	3b01      	subs	r3, #1
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	691a      	ldr	r2, [r3, #16]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004acc:	b2d2      	uxtb	r2, r2
 8004ace:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad4:	1c5a      	adds	r2, r3, #1
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004af4:	e0c4      	b.n	8004c80 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004afc:	2200      	movs	r2, #0
 8004afe:	496c      	ldr	r1, [pc, #432]	@ (8004cb0 <HAL_I2C_Mem_Read+0x460>)
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 fdc1 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e0cb      	b.n	8004ca8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	691a      	ldr	r2, [r3, #16]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b32:	1c5a      	adds	r2, r3, #1
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b3c:	3b01      	subs	r3, #1
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b58:	2200      	movs	r2, #0
 8004b5a:	4955      	ldr	r1, [pc, #340]	@ (8004cb0 <HAL_I2C_Mem_Read+0x460>)
 8004b5c:	68f8      	ldr	r0, [r7, #12]
 8004b5e:	f000 fd93 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d001      	beq.n	8004b6c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e09d      	b.n	8004ca8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	691a      	ldr	r2, [r3, #16]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b86:	b2d2      	uxtb	r2, r2
 8004b88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8e:	1c5a      	adds	r2, r3, #1
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	691a      	ldr	r2, [r3, #16]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb8:	b2d2      	uxtb	r2, r2
 8004bba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bc0:	1c5a      	adds	r2, r3, #1
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004be0:	e04e      	b.n	8004c80 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004be4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f000 feb0 	bl	800594c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e058      	b.n	8004ca8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c00:	b2d2      	uxtb	r2, r2
 8004c02:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c08:	1c5a      	adds	r2, r3, #1
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c12:	3b01      	subs	r3, #1
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	3b01      	subs	r3, #1
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	f003 0304 	and.w	r3, r3, #4
 8004c32:	2b04      	cmp	r3, #4
 8004c34:	d124      	bne.n	8004c80 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d107      	bne.n	8004c4e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c4c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	691a      	ldr	r2, [r3, #16]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c58:	b2d2      	uxtb	r2, r2
 8004c5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c60:	1c5a      	adds	r2, r3, #1
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f47f aeb6 	bne.w	80049f6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2220      	movs	r2, #32
 8004c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	e000      	b.n	8004ca8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004ca6:	2302      	movs	r3, #2
  }
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3728      	adds	r7, #40	@ 0x28
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	00010004 	.word	0x00010004

08004cb4 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b08c      	sub	sp, #48	@ 0x30
 8004cb8:	af02      	add	r7, sp, #8
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	4608      	mov	r0, r1
 8004cbe:	4611      	mov	r1, r2
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	817b      	strh	r3, [r7, #10]
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	813b      	strh	r3, [r7, #8]
 8004cca:	4613      	mov	r3, r2
 8004ccc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cce:	f7fe f995 	bl	8002ffc <HAL_GetTick>
 8004cd2:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b20      	cmp	r3, #32
 8004ce2:	f040 8172 	bne.w	8004fca <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004ce6:	4b93      	ldr	r3, [pc, #588]	@ (8004f34 <HAL_I2C_Mem_Read_DMA+0x280>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	08db      	lsrs	r3, r3, #3
 8004cec:	4a92      	ldr	r2, [pc, #584]	@ (8004f38 <HAL_I2C_Mem_Read_DMA+0x284>)
 8004cee:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf2:	0a1a      	lsrs	r2, r3, #8
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	009b      	lsls	r3, r3, #2
 8004cf8:	4413      	add	r3, r2
 8004cfa:	009a      	lsls	r2, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	3b01      	subs	r3, #1
 8004d04:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d112      	bne.n	8004d32 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2220      	movs	r2, #32
 8004d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d26:	f043 0220 	orr.w	r2, r3, #32
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8004d2e:	2302      	movs	r3, #2
 8004d30:	e14c      	b.n	8004fcc <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d0df      	beq.n	8004d00 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d101      	bne.n	8004d4e <HAL_I2C_Mem_Read_DMA+0x9a>
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	e13e      	b.n	8004fcc <HAL_I2C_Mem_Read_DMA+0x318>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d007      	beq.n	8004d74 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0201 	orr.w	r2, r2, #1
 8004d72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2222      	movs	r2, #34	@ 0x22
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2240      	movs	r2, #64	@ 0x40
 8004d90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d9e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004da4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	4a62      	ldr	r2, [pc, #392]	@ (8004f3c <HAL_I2C_Mem_Read_DMA+0x288>)
 8004db4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8004db6:	897a      	ldrh	r2, [r7, #10]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8004dbc:	893a      	ldrh	r2, [r7, #8]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004dc2:	88fa      	ldrh	r2, [r7, #6]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 80cc 	beq.w	8004f70 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d02d      	beq.n	8004e3c <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de4:	4a56      	ldr	r2, [pc, #344]	@ (8004f40 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8004de6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dec:	4a55      	ldr	r2, [pc, #340]	@ (8004f44 <HAL_I2C_Mem_Read_DMA+0x290>)
 8004dee:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004df4:	2200      	movs	r2, #0
 8004df6:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e04:	2200      	movs	r2, #0
 8004e06:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3310      	adds	r3, #16
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e20:	461a      	mov	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e26:	f7fe fed1 	bl	8003bcc <HAL_DMA_Start_IT>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004e30:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f040 8087 	bne.w	8004f48 <HAL_I2C_Mem_Read_DMA+0x294>
 8004e3a:	e013      	b.n	8004e64 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e50:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e0b3      	b.n	8004fcc <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004e64:	88f8      	ldrh	r0, [r7, #6]
 8004e66:	893a      	ldrh	r2, [r7, #8]
 8004e68:	8979      	ldrh	r1, [r7, #10]
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e6c:	9301      	str	r3, [sp, #4]
 8004e6e:	2323      	movs	r3, #35	@ 0x23
 8004e70:	9300      	str	r3, [sp, #0]
 8004e72:	4603      	mov	r3, r0
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	f000 fa03 	bl	8005280 <I2C_RequestMemoryRead>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d023      	beq.n	8004ec8 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fe ff69 	bl	8003d5c <HAL_DMA_Abort_IT>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e94:	2200      	movs	r2, #0
 8004e96:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ea6:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 0201 	bic.w	r2, r2, #1
 8004ec2:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e081      	b.n	8004fcc <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d108      	bne.n	8004ee2 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	e007      	b.n	8004ef2 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004ef0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	61bb      	str	r3, [r7, #24]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	61bb      	str	r3, [r7, #24]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	61bb      	str	r3, [r7, #24]
 8004f06:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685a      	ldr	r2, [r3, #4]
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f1e:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f2e:	605a      	str	r2, [r3, #4]
 8004f30:	e049      	b.n	8004fc6 <HAL_I2C_Mem_Read_DMA+0x312>
 8004f32:	bf00      	nop
 8004f34:	20000084 	.word	0x20000084
 8004f38:	14f8b589 	.word	0x14f8b589
 8004f3c:	ffff0000 	.word	0xffff0000
 8004f40:	08005451 	.word	0x08005451
 8004f44:	0800560f 	.word	0x0800560f
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5c:	f043 0210 	orr.w	r2, r3, #16
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e02d      	b.n	8004fcc <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004f70:	88f8      	ldrh	r0, [r7, #6]
 8004f72:	893a      	ldrh	r2, [r7, #8]
 8004f74:	8979      	ldrh	r1, [r7, #10]
 8004f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f78:	9301      	str	r3, [sp, #4]
 8004f7a:	2323      	movs	r3, #35	@ 0x23
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	4603      	mov	r3, r0
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 f97d 	bl	8005280 <I2C_RequestMemoryRead>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d001      	beq.n	8004f90 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e01d      	b.n	8004fcc <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f90:	2300      	movs	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	617b      	str	r3, [r7, #20]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	617b      	str	r3, [r7, #20]
 8004fa4:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fb4:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2220      	movs	r2, #32
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	e000      	b.n	8004fcc <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8004fca:	2302      	movs	r3, #2
  }
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3728      	adds	r7, #40	@ 0x28
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}

08004fd4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b08a      	sub	sp, #40	@ 0x28
 8004fd8:	af02      	add	r7, sp, #8
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	607a      	str	r2, [r7, #4]
 8004fde:	603b      	str	r3, [r7, #0]
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004fe4:	f7fe f80a 	bl	8002ffc <HAL_GetTick>
 8004fe8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004fea:	2300      	movs	r3, #0
 8004fec:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b20      	cmp	r3, #32
 8004ff8:	f040 8111 	bne.w	800521e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ffc:	69fb      	ldr	r3, [r7, #28]
 8004ffe:	9300      	str	r3, [sp, #0]
 8005000:	2319      	movs	r3, #25
 8005002:	2201      	movs	r2, #1
 8005004:	4988      	ldr	r1, [pc, #544]	@ (8005228 <HAL_I2C_IsDeviceReady+0x254>)
 8005006:	68f8      	ldr	r0, [r7, #12]
 8005008:	f000 fb3e 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d001      	beq.n	8005016 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005012:	2302      	movs	r3, #2
 8005014:	e104      	b.n	8005220 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <HAL_I2C_IsDeviceReady+0x50>
 8005020:	2302      	movs	r3, #2
 8005022:	e0fd      	b.n	8005220 <HAL_I2C_IsDeviceReady+0x24c>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b01      	cmp	r3, #1
 8005038:	d007      	beq.n	800504a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f042 0201 	orr.w	r2, r2, #1
 8005048:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005058:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2224      	movs	r2, #36	@ 0x24
 800505e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	4a70      	ldr	r2, [pc, #448]	@ (800522c <HAL_I2C_IsDeviceReady+0x258>)
 800506c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800507c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2200      	movs	r2, #0
 8005086:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 fafc 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00d      	beq.n	80050b2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050a4:	d103      	bne.n	80050ae <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050ac:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80050ae:	2303      	movs	r3, #3
 80050b0:	e0b6      	b.n	8005220 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050b2:	897b      	ldrh	r3, [r7, #10]
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	461a      	mov	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80050c0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80050c2:	f7fd ff9b 	bl	8002ffc <HAL_GetTick>
 80050c6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b02      	cmp	r3, #2
 80050d4:	bf0c      	ite	eq
 80050d6:	2301      	moveq	r3, #1
 80050d8:	2300      	movne	r3, #0
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050ec:	bf0c      	ite	eq
 80050ee:	2301      	moveq	r3, #1
 80050f0:	2300      	movne	r3, #0
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80050f6:	e025      	b.n	8005144 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80050f8:	f7fd ff80 	bl	8002ffc <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	683a      	ldr	r2, [r7, #0]
 8005104:	429a      	cmp	r2, r3
 8005106:	d302      	bcc.n	800510e <HAL_I2C_IsDeviceReady+0x13a>
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d103      	bne.n	8005116 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	22a0      	movs	r2, #160	@ 0xa0
 8005112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b02      	cmp	r3, #2
 8005122:	bf0c      	ite	eq
 8005124:	2301      	moveq	r3, #1
 8005126:	2300      	movne	r3, #0
 8005128:	b2db      	uxtb	r3, r3
 800512a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005136:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800513a:	bf0c      	ite	eq
 800513c:	2301      	moveq	r3, #1
 800513e:	2300      	movne	r3, #0
 8005140:	b2db      	uxtb	r3, r3
 8005142:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2ba0      	cmp	r3, #160	@ 0xa0
 800514e:	d005      	beq.n	800515c <HAL_I2C_IsDeviceReady+0x188>
 8005150:	7dfb      	ldrb	r3, [r7, #23]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d102      	bne.n	800515c <HAL_I2C_IsDeviceReady+0x188>
 8005156:	7dbb      	ldrb	r3, [r7, #22]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0cd      	beq.n	80050f8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2220      	movs	r2, #32
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	f003 0302 	and.w	r3, r3, #2
 800516e:	2b02      	cmp	r3, #2
 8005170:	d129      	bne.n	80051c6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005180:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005182:	2300      	movs	r3, #0
 8005184:	613b      	str	r3, [r7, #16]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	613b      	str	r3, [r7, #16]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	613b      	str	r3, [r7, #16]
 8005196:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	2319      	movs	r3, #25
 800519e:	2201      	movs	r2, #1
 80051a0:	4921      	ldr	r1, [pc, #132]	@ (8005228 <HAL_I2C_IsDeviceReady+0x254>)
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 fa70 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 80051a8:	4603      	mov	r3, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d001      	beq.n	80051b2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	e036      	b.n	8005220 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2220      	movs	r2, #32
 80051b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80051c2:	2300      	movs	r3, #0
 80051c4:	e02c      	b.n	8005220 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051d4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80051de:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	2319      	movs	r3, #25
 80051e6:	2201      	movs	r2, #1
 80051e8:	490f      	ldr	r1, [pc, #60]	@ (8005228 <HAL_I2C_IsDeviceReady+0x254>)
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f000 fa4c 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e012      	b.n	8005220 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	3301      	adds	r3, #1
 80051fe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	429a      	cmp	r2, r3
 8005206:	f4ff af32 	bcc.w	800506e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2220      	movs	r2, #32
 800520e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e000      	b.n	8005220 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800521e:	2302      	movs	r3, #2
  }
}
 8005220:	4618      	mov	r0, r3
 8005222:	3720      	adds	r7, #32
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	00100002 	.word	0x00100002
 800522c:	ffff0000 	.word	0xffff0000

08005230 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005274:	bf00      	nop
 8005276:	370c      	adds	r7, #12
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr

08005280 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b088      	sub	sp, #32
 8005284:	af02      	add	r7, sp, #8
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	4608      	mov	r0, r1
 800528a:	4611      	mov	r1, r2
 800528c:	461a      	mov	r2, r3
 800528e:	4603      	mov	r3, r0
 8005290:	817b      	strh	r3, [r7, #10]
 8005292:	460b      	mov	r3, r1
 8005294:	813b      	strh	r3, [r7, #8]
 8005296:	4613      	mov	r3, r2
 8005298:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80052a8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f000 f9de 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00d      	beq.n	80052ee <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052e0:	d103      	bne.n	80052ea <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80052e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e0aa      	b.n	8005444 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80052ee:	897b      	ldrh	r3, [r7, #10]
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	461a      	mov	r2, r3
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80052fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005300:	6a3a      	ldr	r2, [r7, #32]
 8005302:	4952      	ldr	r1, [pc, #328]	@ (800544c <I2C_RequestMemoryRead+0x1cc>)
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 fa39 	bl	800577c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800530a:	4603      	mov	r3, r0
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e097      	b.n	8005444 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005314:	2300      	movs	r3, #0
 8005316:	617b      	str	r3, [r7, #20]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	617b      	str	r3, [r7, #20]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	617b      	str	r3, [r7, #20]
 8005328:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800532a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800532c:	6a39      	ldr	r1, [r7, #32]
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f000 fac4 	bl	80058bc <I2C_WaitOnTXEFlagUntilTimeout>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00d      	beq.n	8005356 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800533e:	2b04      	cmp	r3, #4
 8005340:	d107      	bne.n	8005352 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005350:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e076      	b.n	8005444 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005356:	88fb      	ldrh	r3, [r7, #6]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d105      	bne.n	8005368 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800535c:	893b      	ldrh	r3, [r7, #8]
 800535e:	b2da      	uxtb	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	611a      	str	r2, [r3, #16]
 8005366:	e021      	b.n	80053ac <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005368:	893b      	ldrh	r3, [r7, #8]
 800536a:	0a1b      	lsrs	r3, r3, #8
 800536c:	b29b      	uxth	r3, r3
 800536e:	b2da      	uxtb	r2, r3
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005376:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005378:	6a39      	ldr	r1, [r7, #32]
 800537a:	68f8      	ldr	r0, [r7, #12]
 800537c:	f000 fa9e 	bl	80058bc <I2C_WaitOnTXEFlagUntilTimeout>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00d      	beq.n	80053a2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538a:	2b04      	cmp	r3, #4
 800538c:	d107      	bne.n	800539e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800539c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e050      	b.n	8005444 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053a2:	893b      	ldrh	r3, [r7, #8]
 80053a4:	b2da      	uxtb	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053ae:	6a39      	ldr	r1, [r7, #32]
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f000 fa83 	bl	80058bc <I2C_WaitOnTXEFlagUntilTimeout>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00d      	beq.n	80053d8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c0:	2b04      	cmp	r3, #4
 80053c2:	d107      	bne.n	80053d4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053d2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	e035      	b.n	8005444 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053e6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80053e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 f947 	bl	8005688 <I2C_WaitOnFlagUntilTimeout>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00d      	beq.n	800541c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800540a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800540e:	d103      	bne.n	8005418 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005416:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e013      	b.n	8005444 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800541c:	897b      	ldrh	r3, [r7, #10]
 800541e:	b2db      	uxtb	r3, r3
 8005420:	f043 0301 	orr.w	r3, r3, #1
 8005424:	b2da      	uxtb	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800542c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800542e:	6a3a      	ldr	r2, [r7, #32]
 8005430:	4906      	ldr	r1, [pc, #24]	@ (800544c <I2C_RequestMemoryRead+0x1cc>)
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f000 f9a2 	bl	800577c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e000      	b.n	8005444 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3718      	adds	r7, #24
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	00010002 	.word	0x00010002

08005450 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b086      	sub	sp, #24
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800545c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005464:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800546c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005472:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005482:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005488:	2b00      	cmp	r3, #0
 800548a:	d003      	beq.n	8005494 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005490:	2200      	movs	r2, #0
 8005492:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005498:	2b00      	cmp	r3, #0
 800549a:	d003      	beq.n	80054a4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054a0:	2200      	movs	r2, #0
 80054a2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80054a4:	7cfb      	ldrb	r3, [r7, #19]
 80054a6:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80054aa:	2b21      	cmp	r3, #33	@ 0x21
 80054ac:	d007      	beq.n	80054be <I2C_DMAXferCplt+0x6e>
 80054ae:	7cfb      	ldrb	r3, [r7, #19]
 80054b0:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80054b4:	2b22      	cmp	r3, #34	@ 0x22
 80054b6:	d131      	bne.n	800551c <I2C_DMAXferCplt+0xcc>
 80054b8:	7cbb      	ldrb	r3, [r7, #18]
 80054ba:	2b20      	cmp	r3, #32
 80054bc:	d12e      	bne.n	800551c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054cc:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	2200      	movs	r2, #0
 80054d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80054d4:	7cfb      	ldrb	r3, [r7, #19]
 80054d6:	2b29      	cmp	r3, #41	@ 0x29
 80054d8:	d10a      	bne.n	80054f0 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	2221      	movs	r2, #33	@ 0x21
 80054de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	2228      	movs	r2, #40	@ 0x28
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80054e8:	6978      	ldr	r0, [r7, #20]
 80054ea:	f7ff feab 	bl	8005244 <HAL_I2C_SlaveTxCpltCallback>
 80054ee:	e00c      	b.n	800550a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80054f0:	7cfb      	ldrb	r3, [r7, #19]
 80054f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80054f4:	d109      	bne.n	800550a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2222      	movs	r2, #34	@ 0x22
 80054fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	2228      	movs	r2, #40	@ 0x28
 8005500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005504:	6978      	ldr	r0, [r7, #20]
 8005506:	f7ff fea7 	bl	8005258 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8005518:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800551a:	e074      	b.n	8005606 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005522:	b2db      	uxtb	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	d06e      	beq.n	8005606 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800552c:	b29b      	uxth	r3, r3
 800552e:	2b01      	cmp	r3, #1
 8005530:	d107      	bne.n	8005542 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005540:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005550:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005558:	d009      	beq.n	800556e <I2C_DMAXferCplt+0x11e>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2b08      	cmp	r3, #8
 800555e:	d006      	beq.n	800556e <I2C_DMAXferCplt+0x11e>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005566:	d002      	beq.n	800556e <I2C_DMAXferCplt+0x11e>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2b20      	cmp	r3, #32
 800556c:	d107      	bne.n	800557e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800557c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685a      	ldr	r2, [r3, #4]
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800558c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800559c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	2200      	movs	r2, #0
 80055a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d003      	beq.n	80055b4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80055ac:	6978      	ldr	r0, [r7, #20]
 80055ae:	f7ff fe5d 	bl	800526c <HAL_I2C_ErrorCallback>
}
 80055b2:	e028      	b.n	8005606 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	2220      	movs	r2, #32
 80055b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b40      	cmp	r3, #64	@ 0x40
 80055c6:	d10a      	bne.n	80055de <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	2200      	movs	r2, #0
 80055d4:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80055d6:	6978      	ldr	r0, [r7, #20]
 80055d8:	f7fc fe86 	bl	80022e8 <HAL_I2C_MemRxCpltCallback>
}
 80055dc:	e013      	b.n	8005606 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2b08      	cmp	r3, #8
 80055ea:	d002      	beq.n	80055f2 <I2C_DMAXferCplt+0x1a2>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2b20      	cmp	r3, #32
 80055f0:	d103      	bne.n	80055fa <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2200      	movs	r2, #0
 80055f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80055f8:	e002      	b.n	8005600 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	2212      	movs	r2, #18
 80055fe:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005600:	6978      	ldr	r0, [r7, #20]
 8005602:	f7ff fe15 	bl	8005230 <HAL_I2C_MasterRxCpltCallback>
}
 8005606:	bf00      	nop
 8005608:	3718      	adds	r7, #24
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b084      	sub	sp, #16
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800561a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005620:	2b00      	cmp	r3, #0
 8005622:	d003      	beq.n	800562c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005628:	2200      	movs	r2, #0
 800562a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005630:	2b00      	cmp	r3, #0
 8005632:	d003      	beq.n	800563c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005638:	2200      	movs	r2, #0
 800563a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f7fe fd39 	bl	80040b4 <HAL_DMA_GetError>
 8005642:	4603      	mov	r3, r0
 8005644:	2b02      	cmp	r3, #2
 8005646:	d01b      	beq.n	8005680 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005656:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2220      	movs	r2, #32
 8005662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005672:	f043 0210 	orr.w	r2, r3, #16
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800567a:	68f8      	ldr	r0, [r7, #12]
 800567c:	f7ff fdf6 	bl	800526c <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005680:	bf00      	nop
 8005682:	3710      	adds	r7, #16
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	60f8      	str	r0, [r7, #12]
 8005690:	60b9      	str	r1, [r7, #8]
 8005692:	603b      	str	r3, [r7, #0]
 8005694:	4613      	mov	r3, r2
 8005696:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005698:	e048      	b.n	800572c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a0:	d044      	beq.n	800572c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056a2:	f7fd fcab 	bl	8002ffc <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	683a      	ldr	r2, [r7, #0]
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d302      	bcc.n	80056b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d139      	bne.n	800572c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	0c1b      	lsrs	r3, r3, #16
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d10d      	bne.n	80056de <I2C_WaitOnFlagUntilTimeout+0x56>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	695b      	ldr	r3, [r3, #20]
 80056c8:	43da      	mvns	r2, r3
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	4013      	ands	r3, r2
 80056ce:	b29b      	uxth	r3, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	bf0c      	ite	eq
 80056d4:	2301      	moveq	r3, #1
 80056d6:	2300      	movne	r3, #0
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	461a      	mov	r2, r3
 80056dc:	e00c      	b.n	80056f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	43da      	mvns	r2, r3
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	4013      	ands	r3, r2
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	bf0c      	ite	eq
 80056f0:	2301      	moveq	r3, #1
 80056f2:	2300      	movne	r3, #0
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	461a      	mov	r2, r3
 80056f8:	79fb      	ldrb	r3, [r7, #7]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d116      	bne.n	800572c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2200      	movs	r2, #0
 8005702:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2220      	movs	r2, #32
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005718:	f043 0220 	orr.w	r2, r3, #32
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e023      	b.n	8005774 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	0c1b      	lsrs	r3, r3, #16
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b01      	cmp	r3, #1
 8005734:	d10d      	bne.n	8005752 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	43da      	mvns	r2, r3
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	4013      	ands	r3, r2
 8005742:	b29b      	uxth	r3, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	bf0c      	ite	eq
 8005748:	2301      	moveq	r3, #1
 800574a:	2300      	movne	r3, #0
 800574c:	b2db      	uxtb	r3, r3
 800574e:	461a      	mov	r2, r3
 8005750:	e00c      	b.n	800576c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	699b      	ldr	r3, [r3, #24]
 8005758:	43da      	mvns	r2, r3
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	4013      	ands	r3, r2
 800575e:	b29b      	uxth	r3, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	bf0c      	ite	eq
 8005764:	2301      	moveq	r3, #1
 8005766:	2300      	movne	r3, #0
 8005768:	b2db      	uxtb	r3, r3
 800576a:	461a      	mov	r2, r3
 800576c:	79fb      	ldrb	r3, [r7, #7]
 800576e:	429a      	cmp	r2, r3
 8005770:	d093      	beq.n	800569a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
 8005788:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800578a:	e071      	b.n	8005870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	695b      	ldr	r3, [r3, #20]
 8005792:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005796:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800579a:	d123      	bne.n	80057e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2220      	movs	r2, #32
 80057c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d0:	f043 0204 	orr.w	r2, r3, #4
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e067      	b.n	80058b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ea:	d041      	beq.n	8005870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057ec:	f7fd fc06 	bl	8002ffc <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d302      	bcc.n	8005802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d136      	bne.n	8005870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	0c1b      	lsrs	r3, r3, #16
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b01      	cmp	r3, #1
 800580a:	d10c      	bne.n	8005826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	43da      	mvns	r2, r3
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	4013      	ands	r3, r2
 8005818:	b29b      	uxth	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	bf14      	ite	ne
 800581e:	2301      	movne	r3, #1
 8005820:	2300      	moveq	r3, #0
 8005822:	b2db      	uxtb	r3, r3
 8005824:	e00b      	b.n	800583e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	43da      	mvns	r2, r3
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	4013      	ands	r3, r2
 8005832:	b29b      	uxth	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	bf14      	ite	ne
 8005838:	2301      	movne	r3, #1
 800583a:	2300      	moveq	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d016      	beq.n	8005870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2220      	movs	r2, #32
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585c:	f043 0220 	orr.w	r2, r3, #32
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e021      	b.n	80058b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	0c1b      	lsrs	r3, r3, #16
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b01      	cmp	r3, #1
 8005878:	d10c      	bne.n	8005894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	43da      	mvns	r2, r3
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	4013      	ands	r3, r2
 8005886:	b29b      	uxth	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	bf14      	ite	ne
 800588c:	2301      	movne	r3, #1
 800588e:	2300      	moveq	r3, #0
 8005890:	b2db      	uxtb	r3, r3
 8005892:	e00b      	b.n	80058ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	43da      	mvns	r2, r3
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	4013      	ands	r3, r2
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	bf14      	ite	ne
 80058a6:	2301      	movne	r3, #1
 80058a8:	2300      	moveq	r3, #0
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f47f af6d 	bne.w	800578c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058c8:	e034      	b.n	8005934 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 f89b 	bl	8005a06 <I2C_IsAcknowledgeFailed>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e034      	b.n	8005944 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e0:	d028      	beq.n	8005934 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058e2:	f7fd fb8b 	bl	8002ffc <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	429a      	cmp	r2, r3
 80058f0:	d302      	bcc.n	80058f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d11d      	bne.n	8005934 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005902:	2b80      	cmp	r3, #128	@ 0x80
 8005904:	d016      	beq.n	8005934 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2220      	movs	r2, #32
 8005910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005920:	f043 0220 	orr.w	r2, r3, #32
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e007      	b.n	8005944 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	695b      	ldr	r3, [r3, #20]
 800593a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800593e:	2b80      	cmp	r3, #128	@ 0x80
 8005940:	d1c3      	bne.n	80058ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005958:	e049      	b.n	80059ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	f003 0310 	and.w	r3, r3, #16
 8005964:	2b10      	cmp	r3, #16
 8005966:	d119      	bne.n	800599c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f06f 0210 	mvn.w	r2, #16
 8005970:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2220      	movs	r2, #32
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e030      	b.n	80059fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800599c:	f7fd fb2e 	bl	8002ffc <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d302      	bcc.n	80059b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d11d      	bne.n	80059ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059bc:	2b40      	cmp	r3, #64	@ 0x40
 80059be:	d016      	beq.n	80059ee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2220      	movs	r2, #32
 80059ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059da:	f043 0220 	orr.w	r2, r3, #32
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e007      	b.n	80059fe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f8:	2b40      	cmp	r3, #64	@ 0x40
 80059fa:	d1ae      	bne.n	800595a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3710      	adds	r7, #16
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}

08005a06 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b083      	sub	sp, #12
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a1c:	d11b      	bne.n	8005a56 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a26:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2220      	movs	r2, #32
 8005a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a42:	f043 0204 	orr.w	r2, r3, #4
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e000      	b.n	8005a58 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d101      	bne.n	8005a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e267      	b.n	8005f46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d075      	beq.n	8005b6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005a82:	4b88      	ldr	r3, [pc, #544]	@ (8005ca4 <HAL_RCC_OscConfig+0x240>)
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f003 030c 	and.w	r3, r3, #12
 8005a8a:	2b04      	cmp	r3, #4
 8005a8c:	d00c      	beq.n	8005aa8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a8e:	4b85      	ldr	r3, [pc, #532]	@ (8005ca4 <HAL_RCC_OscConfig+0x240>)
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005a96:	2b08      	cmp	r3, #8
 8005a98:	d112      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a9a:	4b82      	ldr	r3, [pc, #520]	@ (8005ca4 <HAL_RCC_OscConfig+0x240>)
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005aa2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005aa6:	d10b      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aa8:	4b7e      	ldr	r3, [pc, #504]	@ (8005ca4 <HAL_RCC_OscConfig+0x240>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d05b      	beq.n	8005b6c <HAL_RCC_OscConfig+0x108>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d157      	bne.n	8005b6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e242      	b.n	8005f46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ac8:	d106      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x74>
 8005aca:	4b76      	ldr	r3, [pc, #472]	@ (8005ca4 <HAL_RCC_OscConfig+0x240>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a75      	ldr	r2, [pc, #468]	@ (8005ca4 <HAL_RCC_OscConfig+0x240>)
 8005ad0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ad4:	6013      	str	r3, [r2, #0]
 8005ad6:	e01d      	b.n	8005b14 <HAL_RCC_OscConfig+0xb0>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ae0:	d10c      	bne.n	8005afc <HAL_RCC_OscConfig+0x98>
 8005ae2:	4b70      	ldr	r3, [pc, #448]	@ (8005ca4 <HAL_RCC_OscConfig+0x240>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a6f      	ldr	r2, [pc, #444]	@ (8005ca4 <HAL_RCC_OscConfig+0x240>)
 8005ae8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005aec:	6013      	str	r3, [r2, #0]
 8005aee:	4b6d      	ldr	r3, [pc, #436]	@ (8005ca4 <HAL_RCC_OscConfig+0x240>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a6c      	ldr	r2, [pc, #432]	@ (8005ca4 <HAL_RCC_OscConfig+0x240>)
 8005af4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005af8:	6013      	str	r3, [r2, #0]
 8005afa:	e00b      	b.n	8005b14 <HAL_RCC_OscConfig+0xb0>
 8005afc:	4b69      	ldr	r3, [pc, #420]	@ (8005ca4 <HAL_RCC_OscConfig+0x240>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a68      	ldr	r2, [pc, #416]	@ (8005ca4 <HAL_RCC_OscConfig+0x240>)
 8005b02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b06:	6013      	str	r3, [r2, #0]
 8005b08:	4b66      	ldr	r3, [pc, #408]	@ (8005ca4 <HAL_RCC_OscConfig+0x240>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a65      	ldr	r2, [pc, #404]	@ (8005ca4 <HAL_RCC_OscConfig+0x240>)
 8005b0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d013      	beq.n	8005b44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b1c:	f7fd fa6e 	bl	8002ffc <HAL_GetTick>
 8005b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b22:	e008      	b.n	8005b36 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b24:	f7fd fa6a 	bl	8002ffc <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b64      	cmp	r3, #100	@ 0x64
 8005b30:	d901      	bls.n	8005b36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e207      	b.n	8005f46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b36:	4b5b      	ldr	r3, [pc, #364]	@ (8005ca4 <HAL_RCC_OscConfig+0x240>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d0f0      	beq.n	8005b24 <HAL_RCC_OscConfig+0xc0>
 8005b42:	e014      	b.n	8005b6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b44:	f7fd fa5a 	bl	8002ffc <HAL_GetTick>
 8005b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b4a:	e008      	b.n	8005b5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b4c:	f7fd fa56 	bl	8002ffc <HAL_GetTick>
 8005b50:	4602      	mov	r2, r0
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	1ad3      	subs	r3, r2, r3
 8005b56:	2b64      	cmp	r3, #100	@ 0x64
 8005b58:	d901      	bls.n	8005b5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e1f3      	b.n	8005f46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b5e:	4b51      	ldr	r3, [pc, #324]	@ (8005ca4 <HAL_RCC_OscConfig+0x240>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1f0      	bne.n	8005b4c <HAL_RCC_OscConfig+0xe8>
 8005b6a:	e000      	b.n	8005b6e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d063      	beq.n	8005c42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005b7a:	4b4a      	ldr	r3, [pc, #296]	@ (8005ca4 <HAL_RCC_OscConfig+0x240>)
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f003 030c 	and.w	r3, r3, #12
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00b      	beq.n	8005b9e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b86:	4b47      	ldr	r3, [pc, #284]	@ (8005ca4 <HAL_RCC_OscConfig+0x240>)
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005b8e:	2b08      	cmp	r3, #8
 8005b90:	d11c      	bne.n	8005bcc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b92:	4b44      	ldr	r3, [pc, #272]	@ (8005ca4 <HAL_RCC_OscConfig+0x240>)
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d116      	bne.n	8005bcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b9e:	4b41      	ldr	r3, [pc, #260]	@ (8005ca4 <HAL_RCC_OscConfig+0x240>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0302 	and.w	r3, r3, #2
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d005      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x152>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d001      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e1c7      	b.n	8005f46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bb6:	4b3b      	ldr	r3, [pc, #236]	@ (8005ca4 <HAL_RCC_OscConfig+0x240>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	4937      	ldr	r1, [pc, #220]	@ (8005ca4 <HAL_RCC_OscConfig+0x240>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bca:	e03a      	b.n	8005c42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d020      	beq.n	8005c16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bd4:	4b34      	ldr	r3, [pc, #208]	@ (8005ca8 <HAL_RCC_OscConfig+0x244>)
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bda:	f7fd fa0f 	bl	8002ffc <HAL_GetTick>
 8005bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005be0:	e008      	b.n	8005bf4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005be2:	f7fd fa0b 	bl	8002ffc <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d901      	bls.n	8005bf4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e1a8      	b.n	8005f46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bf4:	4b2b      	ldr	r3, [pc, #172]	@ (8005ca4 <HAL_RCC_OscConfig+0x240>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0302 	and.w	r3, r3, #2
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d0f0      	beq.n	8005be2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c00:	4b28      	ldr	r3, [pc, #160]	@ (8005ca4 <HAL_RCC_OscConfig+0x240>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	691b      	ldr	r3, [r3, #16]
 8005c0c:	00db      	lsls	r3, r3, #3
 8005c0e:	4925      	ldr	r1, [pc, #148]	@ (8005ca4 <HAL_RCC_OscConfig+0x240>)
 8005c10:	4313      	orrs	r3, r2
 8005c12:	600b      	str	r3, [r1, #0]
 8005c14:	e015      	b.n	8005c42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c16:	4b24      	ldr	r3, [pc, #144]	@ (8005ca8 <HAL_RCC_OscConfig+0x244>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c1c:	f7fd f9ee 	bl	8002ffc <HAL_GetTick>
 8005c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c22:	e008      	b.n	8005c36 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c24:	f7fd f9ea 	bl	8002ffc <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d901      	bls.n	8005c36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e187      	b.n	8005f46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c36:	4b1b      	ldr	r3, [pc, #108]	@ (8005ca4 <HAL_RCC_OscConfig+0x240>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f003 0302 	and.w	r3, r3, #2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1f0      	bne.n	8005c24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f003 0308 	and.w	r3, r3, #8
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d036      	beq.n	8005cbc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d016      	beq.n	8005c84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c56:	4b15      	ldr	r3, [pc, #84]	@ (8005cac <HAL_RCC_OscConfig+0x248>)
 8005c58:	2201      	movs	r2, #1
 8005c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c5c:	f7fd f9ce 	bl	8002ffc <HAL_GetTick>
 8005c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c62:	e008      	b.n	8005c76 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c64:	f7fd f9ca 	bl	8002ffc <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d901      	bls.n	8005c76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e167      	b.n	8005f46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c76:	4b0b      	ldr	r3, [pc, #44]	@ (8005ca4 <HAL_RCC_OscConfig+0x240>)
 8005c78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c7a:	f003 0302 	and.w	r3, r3, #2
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0f0      	beq.n	8005c64 <HAL_RCC_OscConfig+0x200>
 8005c82:	e01b      	b.n	8005cbc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c84:	4b09      	ldr	r3, [pc, #36]	@ (8005cac <HAL_RCC_OscConfig+0x248>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c8a:	f7fd f9b7 	bl	8002ffc <HAL_GetTick>
 8005c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c90:	e00e      	b.n	8005cb0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c92:	f7fd f9b3 	bl	8002ffc <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d907      	bls.n	8005cb0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	e150      	b.n	8005f46 <HAL_RCC_OscConfig+0x4e2>
 8005ca4:	40023800 	.word	0x40023800
 8005ca8:	42470000 	.word	0x42470000
 8005cac:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cb0:	4b88      	ldr	r3, [pc, #544]	@ (8005ed4 <HAL_RCC_OscConfig+0x470>)
 8005cb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005cb4:	f003 0302 	and.w	r3, r3, #2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1ea      	bne.n	8005c92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0304 	and.w	r3, r3, #4
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f000 8097 	beq.w	8005df8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cce:	4b81      	ldr	r3, [pc, #516]	@ (8005ed4 <HAL_RCC_OscConfig+0x470>)
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10f      	bne.n	8005cfa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cda:	2300      	movs	r3, #0
 8005cdc:	60bb      	str	r3, [r7, #8]
 8005cde:	4b7d      	ldr	r3, [pc, #500]	@ (8005ed4 <HAL_RCC_OscConfig+0x470>)
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce2:	4a7c      	ldr	r2, [pc, #496]	@ (8005ed4 <HAL_RCC_OscConfig+0x470>)
 8005ce4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ce8:	6413      	str	r3, [r2, #64]	@ 0x40
 8005cea:	4b7a      	ldr	r3, [pc, #488]	@ (8005ed4 <HAL_RCC_OscConfig+0x470>)
 8005cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cf2:	60bb      	str	r3, [r7, #8]
 8005cf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cfa:	4b77      	ldr	r3, [pc, #476]	@ (8005ed8 <HAL_RCC_OscConfig+0x474>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d118      	bne.n	8005d38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d06:	4b74      	ldr	r3, [pc, #464]	@ (8005ed8 <HAL_RCC_OscConfig+0x474>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a73      	ldr	r2, [pc, #460]	@ (8005ed8 <HAL_RCC_OscConfig+0x474>)
 8005d0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d12:	f7fd f973 	bl	8002ffc <HAL_GetTick>
 8005d16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d18:	e008      	b.n	8005d2c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d1a:	f7fd f96f 	bl	8002ffc <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d901      	bls.n	8005d2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e10c      	b.n	8005f46 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d2c:	4b6a      	ldr	r3, [pc, #424]	@ (8005ed8 <HAL_RCC_OscConfig+0x474>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d0f0      	beq.n	8005d1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d106      	bne.n	8005d4e <HAL_RCC_OscConfig+0x2ea>
 8005d40:	4b64      	ldr	r3, [pc, #400]	@ (8005ed4 <HAL_RCC_OscConfig+0x470>)
 8005d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d44:	4a63      	ldr	r2, [pc, #396]	@ (8005ed4 <HAL_RCC_OscConfig+0x470>)
 8005d46:	f043 0301 	orr.w	r3, r3, #1
 8005d4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d4c:	e01c      	b.n	8005d88 <HAL_RCC_OscConfig+0x324>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	2b05      	cmp	r3, #5
 8005d54:	d10c      	bne.n	8005d70 <HAL_RCC_OscConfig+0x30c>
 8005d56:	4b5f      	ldr	r3, [pc, #380]	@ (8005ed4 <HAL_RCC_OscConfig+0x470>)
 8005d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d5a:	4a5e      	ldr	r2, [pc, #376]	@ (8005ed4 <HAL_RCC_OscConfig+0x470>)
 8005d5c:	f043 0304 	orr.w	r3, r3, #4
 8005d60:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d62:	4b5c      	ldr	r3, [pc, #368]	@ (8005ed4 <HAL_RCC_OscConfig+0x470>)
 8005d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d66:	4a5b      	ldr	r2, [pc, #364]	@ (8005ed4 <HAL_RCC_OscConfig+0x470>)
 8005d68:	f043 0301 	orr.w	r3, r3, #1
 8005d6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d6e:	e00b      	b.n	8005d88 <HAL_RCC_OscConfig+0x324>
 8005d70:	4b58      	ldr	r3, [pc, #352]	@ (8005ed4 <HAL_RCC_OscConfig+0x470>)
 8005d72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d74:	4a57      	ldr	r2, [pc, #348]	@ (8005ed4 <HAL_RCC_OscConfig+0x470>)
 8005d76:	f023 0301 	bic.w	r3, r3, #1
 8005d7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d7c:	4b55      	ldr	r3, [pc, #340]	@ (8005ed4 <HAL_RCC_OscConfig+0x470>)
 8005d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d80:	4a54      	ldr	r2, [pc, #336]	@ (8005ed4 <HAL_RCC_OscConfig+0x470>)
 8005d82:	f023 0304 	bic.w	r3, r3, #4
 8005d86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d015      	beq.n	8005dbc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d90:	f7fd f934 	bl	8002ffc <HAL_GetTick>
 8005d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d96:	e00a      	b.n	8005dae <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d98:	f7fd f930 	bl	8002ffc <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e0cb      	b.n	8005f46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dae:	4b49      	ldr	r3, [pc, #292]	@ (8005ed4 <HAL_RCC_OscConfig+0x470>)
 8005db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0ee      	beq.n	8005d98 <HAL_RCC_OscConfig+0x334>
 8005dba:	e014      	b.n	8005de6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dbc:	f7fd f91e 	bl	8002ffc <HAL_GetTick>
 8005dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dc2:	e00a      	b.n	8005dda <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dc4:	f7fd f91a 	bl	8002ffc <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e0b5      	b.n	8005f46 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dda:	4b3e      	ldr	r3, [pc, #248]	@ (8005ed4 <HAL_RCC_OscConfig+0x470>)
 8005ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1ee      	bne.n	8005dc4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005de6:	7dfb      	ldrb	r3, [r7, #23]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d105      	bne.n	8005df8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dec:	4b39      	ldr	r3, [pc, #228]	@ (8005ed4 <HAL_RCC_OscConfig+0x470>)
 8005dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005df0:	4a38      	ldr	r2, [pc, #224]	@ (8005ed4 <HAL_RCC_OscConfig+0x470>)
 8005df2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005df6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	699b      	ldr	r3, [r3, #24]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 80a1 	beq.w	8005f44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e02:	4b34      	ldr	r3, [pc, #208]	@ (8005ed4 <HAL_RCC_OscConfig+0x470>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f003 030c 	and.w	r3, r3, #12
 8005e0a:	2b08      	cmp	r3, #8
 8005e0c:	d05c      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d141      	bne.n	8005e9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e16:	4b31      	ldr	r3, [pc, #196]	@ (8005edc <HAL_RCC_OscConfig+0x478>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e1c:	f7fd f8ee 	bl	8002ffc <HAL_GetTick>
 8005e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e22:	e008      	b.n	8005e36 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e24:	f7fd f8ea 	bl	8002ffc <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d901      	bls.n	8005e36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e087      	b.n	8005f46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e36:	4b27      	ldr	r3, [pc, #156]	@ (8005ed4 <HAL_RCC_OscConfig+0x470>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1f0      	bne.n	8005e24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	69da      	ldr	r2, [r3, #28]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	431a      	orrs	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e50:	019b      	lsls	r3, r3, #6
 8005e52:	431a      	orrs	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e58:	085b      	lsrs	r3, r3, #1
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	041b      	lsls	r3, r3, #16
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e64:	061b      	lsls	r3, r3, #24
 8005e66:	491b      	ldr	r1, [pc, #108]	@ (8005ed4 <HAL_RCC_OscConfig+0x470>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8005edc <HAL_RCC_OscConfig+0x478>)
 8005e6e:	2201      	movs	r2, #1
 8005e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e72:	f7fd f8c3 	bl	8002ffc <HAL_GetTick>
 8005e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e78:	e008      	b.n	8005e8c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e7a:	f7fd f8bf 	bl	8002ffc <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d901      	bls.n	8005e8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e05c      	b.n	8005f46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e8c:	4b11      	ldr	r3, [pc, #68]	@ (8005ed4 <HAL_RCC_OscConfig+0x470>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d0f0      	beq.n	8005e7a <HAL_RCC_OscConfig+0x416>
 8005e98:	e054      	b.n	8005f44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e9a:	4b10      	ldr	r3, [pc, #64]	@ (8005edc <HAL_RCC_OscConfig+0x478>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ea0:	f7fd f8ac 	bl	8002ffc <HAL_GetTick>
 8005ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ea6:	e008      	b.n	8005eba <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ea8:	f7fd f8a8 	bl	8002ffc <HAL_GetTick>
 8005eac:	4602      	mov	r2, r0
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b02      	cmp	r3, #2
 8005eb4:	d901      	bls.n	8005eba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	e045      	b.n	8005f46 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005eba:	4b06      	ldr	r3, [pc, #24]	@ (8005ed4 <HAL_RCC_OscConfig+0x470>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1f0      	bne.n	8005ea8 <HAL_RCC_OscConfig+0x444>
 8005ec6:	e03d      	b.n	8005f44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d107      	bne.n	8005ee0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e038      	b.n	8005f46 <HAL_RCC_OscConfig+0x4e2>
 8005ed4:	40023800 	.word	0x40023800
 8005ed8:	40007000 	.word	0x40007000
 8005edc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8005f50 <HAL_RCC_OscConfig+0x4ec>)
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d028      	beq.n	8005f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d121      	bne.n	8005f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d11a      	bne.n	8005f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f0a:	68fa      	ldr	r2, [r7, #12]
 8005f0c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005f10:	4013      	ands	r3, r2
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005f16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d111      	bne.n	8005f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f26:	085b      	lsrs	r3, r3, #1
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d107      	bne.n	8005f40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d001      	beq.n	8005f44 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e000      	b.n	8005f46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3718      	adds	r7, #24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	40023800 	.word	0x40023800

08005f54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e0cc      	b.n	8006102 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f68:	4b68      	ldr	r3, [pc, #416]	@ (800610c <HAL_RCC_ClockConfig+0x1b8>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0307 	and.w	r3, r3, #7
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d90c      	bls.n	8005f90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f76:	4b65      	ldr	r3, [pc, #404]	@ (800610c <HAL_RCC_ClockConfig+0x1b8>)
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	b2d2      	uxtb	r2, r2
 8005f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f7e:	4b63      	ldr	r3, [pc, #396]	@ (800610c <HAL_RCC_ClockConfig+0x1b8>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0307 	and.w	r3, r3, #7
 8005f86:	683a      	ldr	r2, [r7, #0]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d001      	beq.n	8005f90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e0b8      	b.n	8006102 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0302 	and.w	r3, r3, #2
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d020      	beq.n	8005fde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0304 	and.w	r3, r3, #4
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d005      	beq.n	8005fb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005fa8:	4b59      	ldr	r3, [pc, #356]	@ (8006110 <HAL_RCC_ClockConfig+0x1bc>)
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	4a58      	ldr	r2, [pc, #352]	@ (8006110 <HAL_RCC_ClockConfig+0x1bc>)
 8005fae:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005fb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0308 	and.w	r3, r3, #8
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d005      	beq.n	8005fcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005fc0:	4b53      	ldr	r3, [pc, #332]	@ (8006110 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	4a52      	ldr	r2, [pc, #328]	@ (8006110 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005fca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fcc:	4b50      	ldr	r3, [pc, #320]	@ (8006110 <HAL_RCC_ClockConfig+0x1bc>)
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	494d      	ldr	r1, [pc, #308]	@ (8006110 <HAL_RCC_ClockConfig+0x1bc>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d044      	beq.n	8006074 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d107      	bne.n	8006002 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ff2:	4b47      	ldr	r3, [pc, #284]	@ (8006110 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d119      	bne.n	8006032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e07f      	b.n	8006102 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	2b02      	cmp	r3, #2
 8006008:	d003      	beq.n	8006012 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800600e:	2b03      	cmp	r3, #3
 8006010:	d107      	bne.n	8006022 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006012:	4b3f      	ldr	r3, [pc, #252]	@ (8006110 <HAL_RCC_ClockConfig+0x1bc>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d109      	bne.n	8006032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e06f      	b.n	8006102 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006022:	4b3b      	ldr	r3, [pc, #236]	@ (8006110 <HAL_RCC_ClockConfig+0x1bc>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	2b00      	cmp	r3, #0
 800602c:	d101      	bne.n	8006032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e067      	b.n	8006102 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006032:	4b37      	ldr	r3, [pc, #220]	@ (8006110 <HAL_RCC_ClockConfig+0x1bc>)
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f023 0203 	bic.w	r2, r3, #3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	4934      	ldr	r1, [pc, #208]	@ (8006110 <HAL_RCC_ClockConfig+0x1bc>)
 8006040:	4313      	orrs	r3, r2
 8006042:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006044:	f7fc ffda 	bl	8002ffc <HAL_GetTick>
 8006048:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800604a:	e00a      	b.n	8006062 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800604c:	f7fc ffd6 	bl	8002ffc <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	f241 3288 	movw	r2, #5000	@ 0x1388
 800605a:	4293      	cmp	r3, r2
 800605c:	d901      	bls.n	8006062 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e04f      	b.n	8006102 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006062:	4b2b      	ldr	r3, [pc, #172]	@ (8006110 <HAL_RCC_ClockConfig+0x1bc>)
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f003 020c 	and.w	r2, r3, #12
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	009b      	lsls	r3, r3, #2
 8006070:	429a      	cmp	r2, r3
 8006072:	d1eb      	bne.n	800604c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006074:	4b25      	ldr	r3, [pc, #148]	@ (800610c <HAL_RCC_ClockConfig+0x1b8>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0307 	and.w	r3, r3, #7
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	429a      	cmp	r2, r3
 8006080:	d20c      	bcs.n	800609c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006082:	4b22      	ldr	r3, [pc, #136]	@ (800610c <HAL_RCC_ClockConfig+0x1b8>)
 8006084:	683a      	ldr	r2, [r7, #0]
 8006086:	b2d2      	uxtb	r2, r2
 8006088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800608a:	4b20      	ldr	r3, [pc, #128]	@ (800610c <HAL_RCC_ClockConfig+0x1b8>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0307 	and.w	r3, r3, #7
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	429a      	cmp	r2, r3
 8006096:	d001      	beq.n	800609c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e032      	b.n	8006102 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0304 	and.w	r3, r3, #4
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d008      	beq.n	80060ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060a8:	4b19      	ldr	r3, [pc, #100]	@ (8006110 <HAL_RCC_ClockConfig+0x1bc>)
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	4916      	ldr	r1, [pc, #88]	@ (8006110 <HAL_RCC_ClockConfig+0x1bc>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0308 	and.w	r3, r3, #8
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d009      	beq.n	80060da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80060c6:	4b12      	ldr	r3, [pc, #72]	@ (8006110 <HAL_RCC_ClockConfig+0x1bc>)
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	00db      	lsls	r3, r3, #3
 80060d4:	490e      	ldr	r1, [pc, #56]	@ (8006110 <HAL_RCC_ClockConfig+0x1bc>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80060da:	f000 f821 	bl	8006120 <HAL_RCC_GetSysClockFreq>
 80060de:	4602      	mov	r2, r0
 80060e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006110 <HAL_RCC_ClockConfig+0x1bc>)
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	091b      	lsrs	r3, r3, #4
 80060e6:	f003 030f 	and.w	r3, r3, #15
 80060ea:	490a      	ldr	r1, [pc, #40]	@ (8006114 <HAL_RCC_ClockConfig+0x1c0>)
 80060ec:	5ccb      	ldrb	r3, [r1, r3]
 80060ee:	fa22 f303 	lsr.w	r3, r2, r3
 80060f2:	4a09      	ldr	r2, [pc, #36]	@ (8006118 <HAL_RCC_ClockConfig+0x1c4>)
 80060f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80060f6:	4b09      	ldr	r3, [pc, #36]	@ (800611c <HAL_RCC_ClockConfig+0x1c8>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7fc ff3a 	bl	8002f74 <HAL_InitTick>

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	40023c00 	.word	0x40023c00
 8006110:	40023800 	.word	0x40023800
 8006114:	0800c7f8 	.word	0x0800c7f8
 8006118:	20000084 	.word	0x20000084
 800611c:	20000088 	.word	0x20000088

08006120 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006124:	b090      	sub	sp, #64	@ 0x40
 8006126:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006128:	2300      	movs	r3, #0
 800612a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800612c:	2300      	movs	r3, #0
 800612e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006130:	2300      	movs	r3, #0
 8006132:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006134:	2300      	movs	r3, #0
 8006136:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006138:	4b59      	ldr	r3, [pc, #356]	@ (80062a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f003 030c 	and.w	r3, r3, #12
 8006140:	2b08      	cmp	r3, #8
 8006142:	d00d      	beq.n	8006160 <HAL_RCC_GetSysClockFreq+0x40>
 8006144:	2b08      	cmp	r3, #8
 8006146:	f200 80a1 	bhi.w	800628c <HAL_RCC_GetSysClockFreq+0x16c>
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <HAL_RCC_GetSysClockFreq+0x34>
 800614e:	2b04      	cmp	r3, #4
 8006150:	d003      	beq.n	800615a <HAL_RCC_GetSysClockFreq+0x3a>
 8006152:	e09b      	b.n	800628c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006154:	4b53      	ldr	r3, [pc, #332]	@ (80062a4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006156:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006158:	e09b      	b.n	8006292 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800615a:	4b53      	ldr	r3, [pc, #332]	@ (80062a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800615c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800615e:	e098      	b.n	8006292 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006160:	4b4f      	ldr	r3, [pc, #316]	@ (80062a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006168:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800616a:	4b4d      	ldr	r3, [pc, #308]	@ (80062a0 <HAL_RCC_GetSysClockFreq+0x180>)
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d028      	beq.n	80061c8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006176:	4b4a      	ldr	r3, [pc, #296]	@ (80062a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	099b      	lsrs	r3, r3, #6
 800617c:	2200      	movs	r2, #0
 800617e:	623b      	str	r3, [r7, #32]
 8006180:	627a      	str	r2, [r7, #36]	@ 0x24
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006188:	2100      	movs	r1, #0
 800618a:	4b47      	ldr	r3, [pc, #284]	@ (80062a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800618c:	fb03 f201 	mul.w	r2, r3, r1
 8006190:	2300      	movs	r3, #0
 8006192:	fb00 f303 	mul.w	r3, r0, r3
 8006196:	4413      	add	r3, r2
 8006198:	4a43      	ldr	r2, [pc, #268]	@ (80062a8 <HAL_RCC_GetSysClockFreq+0x188>)
 800619a:	fba0 1202 	umull	r1, r2, r0, r2
 800619e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061a0:	460a      	mov	r2, r1
 80061a2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80061a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061a6:	4413      	add	r3, r2
 80061a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ac:	2200      	movs	r2, #0
 80061ae:	61bb      	str	r3, [r7, #24]
 80061b0:	61fa      	str	r2, [r7, #28]
 80061b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80061ba:	f7fa fd6d 	bl	8000c98 <__aeabi_uldivmod>
 80061be:	4602      	mov	r2, r0
 80061c0:	460b      	mov	r3, r1
 80061c2:	4613      	mov	r3, r2
 80061c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061c6:	e053      	b.n	8006270 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061c8:	4b35      	ldr	r3, [pc, #212]	@ (80062a0 <HAL_RCC_GetSysClockFreq+0x180>)
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	099b      	lsrs	r3, r3, #6
 80061ce:	2200      	movs	r2, #0
 80061d0:	613b      	str	r3, [r7, #16]
 80061d2:	617a      	str	r2, [r7, #20]
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80061da:	f04f 0b00 	mov.w	fp, #0
 80061de:	4652      	mov	r2, sl
 80061e0:	465b      	mov	r3, fp
 80061e2:	f04f 0000 	mov.w	r0, #0
 80061e6:	f04f 0100 	mov.w	r1, #0
 80061ea:	0159      	lsls	r1, r3, #5
 80061ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061f0:	0150      	lsls	r0, r2, #5
 80061f2:	4602      	mov	r2, r0
 80061f4:	460b      	mov	r3, r1
 80061f6:	ebb2 080a 	subs.w	r8, r2, sl
 80061fa:	eb63 090b 	sbc.w	r9, r3, fp
 80061fe:	f04f 0200 	mov.w	r2, #0
 8006202:	f04f 0300 	mov.w	r3, #0
 8006206:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800620a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800620e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006212:	ebb2 0408 	subs.w	r4, r2, r8
 8006216:	eb63 0509 	sbc.w	r5, r3, r9
 800621a:	f04f 0200 	mov.w	r2, #0
 800621e:	f04f 0300 	mov.w	r3, #0
 8006222:	00eb      	lsls	r3, r5, #3
 8006224:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006228:	00e2      	lsls	r2, r4, #3
 800622a:	4614      	mov	r4, r2
 800622c:	461d      	mov	r5, r3
 800622e:	eb14 030a 	adds.w	r3, r4, sl
 8006232:	603b      	str	r3, [r7, #0]
 8006234:	eb45 030b 	adc.w	r3, r5, fp
 8006238:	607b      	str	r3, [r7, #4]
 800623a:	f04f 0200 	mov.w	r2, #0
 800623e:	f04f 0300 	mov.w	r3, #0
 8006242:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006246:	4629      	mov	r1, r5
 8006248:	028b      	lsls	r3, r1, #10
 800624a:	4621      	mov	r1, r4
 800624c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006250:	4621      	mov	r1, r4
 8006252:	028a      	lsls	r2, r1, #10
 8006254:	4610      	mov	r0, r2
 8006256:	4619      	mov	r1, r3
 8006258:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800625a:	2200      	movs	r2, #0
 800625c:	60bb      	str	r3, [r7, #8]
 800625e:	60fa      	str	r2, [r7, #12]
 8006260:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006264:	f7fa fd18 	bl	8000c98 <__aeabi_uldivmod>
 8006268:	4602      	mov	r2, r0
 800626a:	460b      	mov	r3, r1
 800626c:	4613      	mov	r3, r2
 800626e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006270:	4b0b      	ldr	r3, [pc, #44]	@ (80062a0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	0c1b      	lsrs	r3, r3, #16
 8006276:	f003 0303 	and.w	r3, r3, #3
 800627a:	3301      	adds	r3, #1
 800627c:	005b      	lsls	r3, r3, #1
 800627e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006280:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006284:	fbb2 f3f3 	udiv	r3, r2, r3
 8006288:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800628a:	e002      	b.n	8006292 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800628c:	4b05      	ldr	r3, [pc, #20]	@ (80062a4 <HAL_RCC_GetSysClockFreq+0x184>)
 800628e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006290:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006294:	4618      	mov	r0, r3
 8006296:	3740      	adds	r7, #64	@ 0x40
 8006298:	46bd      	mov	sp, r7
 800629a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800629e:	bf00      	nop
 80062a0:	40023800 	.word	0x40023800
 80062a4:	00f42400 	.word	0x00f42400
 80062a8:	017d7840 	.word	0x017d7840

080062ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062ac:	b480      	push	{r7}
 80062ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062b0:	4b03      	ldr	r3, [pc, #12]	@ (80062c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80062b2:	681b      	ldr	r3, [r3, #0]
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	20000084 	.word	0x20000084

080062c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80062c8:	f7ff fff0 	bl	80062ac <HAL_RCC_GetHCLKFreq>
 80062cc:	4602      	mov	r2, r0
 80062ce:	4b05      	ldr	r3, [pc, #20]	@ (80062e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	0a9b      	lsrs	r3, r3, #10
 80062d4:	f003 0307 	and.w	r3, r3, #7
 80062d8:	4903      	ldr	r1, [pc, #12]	@ (80062e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80062da:	5ccb      	ldrb	r3, [r1, r3]
 80062dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	40023800 	.word	0x40023800
 80062e8:	0800c808 	.word	0x0800c808

080062ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80062f0:	f7ff ffdc 	bl	80062ac <HAL_RCC_GetHCLKFreq>
 80062f4:	4602      	mov	r2, r0
 80062f6:	4b05      	ldr	r3, [pc, #20]	@ (800630c <HAL_RCC_GetPCLK2Freq+0x20>)
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	0b5b      	lsrs	r3, r3, #13
 80062fc:	f003 0307 	and.w	r3, r3, #7
 8006300:	4903      	ldr	r1, [pc, #12]	@ (8006310 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006302:	5ccb      	ldrb	r3, [r1, r3]
 8006304:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006308:	4618      	mov	r0, r3
 800630a:	bd80      	pop	{r7, pc}
 800630c:	40023800 	.word	0x40023800
 8006310:	0800c808 	.word	0x0800c808

08006314 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006314:	b480      	push	{r7}
 8006316:	b085      	sub	sp, #20
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006322:	b2db      	uxtb	r3, r3
 8006324:	2b01      	cmp	r3, #1
 8006326:	d001      	beq.n	800632c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e044      	b.n	80063b6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2202      	movs	r2, #2
 8006330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68da      	ldr	r2, [r3, #12]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0201 	orr.w	r2, r2, #1
 8006342:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a1e      	ldr	r2, [pc, #120]	@ (80063c4 <HAL_TIM_Base_Start_IT+0xb0>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d018      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0x6c>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006356:	d013      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0x6c>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a1a      	ldr	r2, [pc, #104]	@ (80063c8 <HAL_TIM_Base_Start_IT+0xb4>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d00e      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0x6c>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a19      	ldr	r2, [pc, #100]	@ (80063cc <HAL_TIM_Base_Start_IT+0xb8>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d009      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0x6c>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a17      	ldr	r2, [pc, #92]	@ (80063d0 <HAL_TIM_Base_Start_IT+0xbc>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d004      	beq.n	8006380 <HAL_TIM_Base_Start_IT+0x6c>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a16      	ldr	r2, [pc, #88]	@ (80063d4 <HAL_TIM_Base_Start_IT+0xc0>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d111      	bne.n	80063a4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f003 0307 	and.w	r3, r3, #7
 800638a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2b06      	cmp	r3, #6
 8006390:	d010      	beq.n	80063b4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f042 0201 	orr.w	r2, r2, #1
 80063a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063a2:	e007      	b.n	80063b4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f042 0201 	orr.w	r2, r2, #1
 80063b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3714      	adds	r7, #20
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr
 80063c2:	bf00      	nop
 80063c4:	40010000 	.word	0x40010000
 80063c8:	40000400 	.word	0x40000400
 80063cc:	40000800 	.word	0x40000800
 80063d0:	40000c00 	.word	0x40000c00
 80063d4:	40014000 	.word	0x40014000

080063d8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e041      	b.n	800646e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d106      	bne.n	8006404 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f7fc fb3c 	bl	8002a7c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2202      	movs	r2, #2
 8006408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	3304      	adds	r3, #4
 8006414:	4619      	mov	r1, r3
 8006416:	4610      	mov	r0, r2
 8006418:	f000 fb62 	bl	8006ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2201      	movs	r2, #1
 8006458:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3708      	adds	r7, #8
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b082      	sub	sp, #8
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e041      	b.n	800650c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800648e:	b2db      	uxtb	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	d106      	bne.n	80064a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f7fc fab7 	bl	8002a10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2202      	movs	r2, #2
 80064a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	3304      	adds	r3, #4
 80064b2:	4619      	mov	r1, r3
 80064b4:	4610      	mov	r0, r2
 80064b6:	f000 fb13 	bl	8006ae0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2201      	movs	r2, #1
 80064be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2201      	movs	r2, #1
 80064fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	3708      	adds	r7, #8
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}

08006514 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d109      	bne.n	8006538 <HAL_TIM_PWM_Start+0x24>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b01      	cmp	r3, #1
 800652e:	bf14      	ite	ne
 8006530:	2301      	movne	r3, #1
 8006532:	2300      	moveq	r3, #0
 8006534:	b2db      	uxtb	r3, r3
 8006536:	e022      	b.n	800657e <HAL_TIM_PWM_Start+0x6a>
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	2b04      	cmp	r3, #4
 800653c:	d109      	bne.n	8006552 <HAL_TIM_PWM_Start+0x3e>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b01      	cmp	r3, #1
 8006548:	bf14      	ite	ne
 800654a:	2301      	movne	r3, #1
 800654c:	2300      	moveq	r3, #0
 800654e:	b2db      	uxtb	r3, r3
 8006550:	e015      	b.n	800657e <HAL_TIM_PWM_Start+0x6a>
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	2b08      	cmp	r3, #8
 8006556:	d109      	bne.n	800656c <HAL_TIM_PWM_Start+0x58>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800655e:	b2db      	uxtb	r3, r3
 8006560:	2b01      	cmp	r3, #1
 8006562:	bf14      	ite	ne
 8006564:	2301      	movne	r3, #1
 8006566:	2300      	moveq	r3, #0
 8006568:	b2db      	uxtb	r3, r3
 800656a:	e008      	b.n	800657e <HAL_TIM_PWM_Start+0x6a>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b01      	cmp	r3, #1
 8006576:	bf14      	ite	ne
 8006578:	2301      	movne	r3, #1
 800657a:	2300      	moveq	r3, #0
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d001      	beq.n	8006586 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e068      	b.n	8006658 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d104      	bne.n	8006596 <HAL_TIM_PWM_Start+0x82>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2202      	movs	r2, #2
 8006590:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006594:	e013      	b.n	80065be <HAL_TIM_PWM_Start+0xaa>
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	2b04      	cmp	r3, #4
 800659a:	d104      	bne.n	80065a6 <HAL_TIM_PWM_Start+0x92>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2202      	movs	r2, #2
 80065a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065a4:	e00b      	b.n	80065be <HAL_TIM_PWM_Start+0xaa>
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2b08      	cmp	r3, #8
 80065aa:	d104      	bne.n	80065b6 <HAL_TIM_PWM_Start+0xa2>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2202      	movs	r2, #2
 80065b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065b4:	e003      	b.n	80065be <HAL_TIM_PWM_Start+0xaa>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2202      	movs	r2, #2
 80065ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	2201      	movs	r2, #1
 80065c4:	6839      	ldr	r1, [r7, #0]
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 fca2 	bl	8006f10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a23      	ldr	r2, [pc, #140]	@ (8006660 <HAL_TIM_PWM_Start+0x14c>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d107      	bne.n	80065e6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80065e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a1d      	ldr	r2, [pc, #116]	@ (8006660 <HAL_TIM_PWM_Start+0x14c>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d018      	beq.n	8006622 <HAL_TIM_PWM_Start+0x10e>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065f8:	d013      	beq.n	8006622 <HAL_TIM_PWM_Start+0x10e>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a19      	ldr	r2, [pc, #100]	@ (8006664 <HAL_TIM_PWM_Start+0x150>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d00e      	beq.n	8006622 <HAL_TIM_PWM_Start+0x10e>
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a17      	ldr	r2, [pc, #92]	@ (8006668 <HAL_TIM_PWM_Start+0x154>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d009      	beq.n	8006622 <HAL_TIM_PWM_Start+0x10e>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a16      	ldr	r2, [pc, #88]	@ (800666c <HAL_TIM_PWM_Start+0x158>)
 8006614:	4293      	cmp	r3, r2
 8006616:	d004      	beq.n	8006622 <HAL_TIM_PWM_Start+0x10e>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a14      	ldr	r2, [pc, #80]	@ (8006670 <HAL_TIM_PWM_Start+0x15c>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d111      	bne.n	8006646 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f003 0307 	and.w	r3, r3, #7
 800662c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2b06      	cmp	r3, #6
 8006632:	d010      	beq.n	8006656 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f042 0201 	orr.w	r2, r2, #1
 8006642:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006644:	e007      	b.n	8006656 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f042 0201 	orr.w	r2, r2, #1
 8006654:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	40010000 	.word	0x40010000
 8006664:	40000400 	.word	0x40000400
 8006668:	40000800 	.word	0x40000800
 800666c:	40000c00 	.word	0x40000c00
 8006670:	40014000 	.word	0x40014000

08006674 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d020      	beq.n	80066d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f003 0302 	and.w	r3, r3, #2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d01b      	beq.n	80066d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f06f 0202 	mvn.w	r2, #2
 80066a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2201      	movs	r2, #1
 80066ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	f003 0303 	and.w	r3, r3, #3
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d003      	beq.n	80066c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f9f0 	bl	8006aa4 <HAL_TIM_IC_CaptureCallback>
 80066c4:	e005      	b.n	80066d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f9e2 	bl	8006a90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f000 f9f3 	bl	8006ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	f003 0304 	and.w	r3, r3, #4
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d020      	beq.n	8006724 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d01b      	beq.n	8006724 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f06f 0204 	mvn.w	r2, #4
 80066f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2202      	movs	r2, #2
 80066fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f9ca 	bl	8006aa4 <HAL_TIM_IC_CaptureCallback>
 8006710:	e005      	b.n	800671e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f9bc 	bl	8006a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 f9cd 	bl	8006ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f003 0308 	and.w	r3, r3, #8
 800672a:	2b00      	cmp	r3, #0
 800672c:	d020      	beq.n	8006770 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f003 0308 	and.w	r3, r3, #8
 8006734:	2b00      	cmp	r3, #0
 8006736:	d01b      	beq.n	8006770 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f06f 0208 	mvn.w	r2, #8
 8006740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2204      	movs	r2, #4
 8006746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	f003 0303 	and.w	r3, r3, #3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d003      	beq.n	800675e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 f9a4 	bl	8006aa4 <HAL_TIM_IC_CaptureCallback>
 800675c:	e005      	b.n	800676a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 f996 	bl	8006a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 f9a7 	bl	8006ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	f003 0310 	and.w	r3, r3, #16
 8006776:	2b00      	cmp	r3, #0
 8006778:	d020      	beq.n	80067bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f003 0310 	and.w	r3, r3, #16
 8006780:	2b00      	cmp	r3, #0
 8006782:	d01b      	beq.n	80067bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f06f 0210 	mvn.w	r2, #16
 800678c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2208      	movs	r2, #8
 8006792:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	69db      	ldr	r3, [r3, #28]
 800679a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f97e 	bl	8006aa4 <HAL_TIM_IC_CaptureCallback>
 80067a8:	e005      	b.n	80067b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 f970 	bl	8006a90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f000 f981 	bl	8006ab8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	f003 0301 	and.w	r3, r3, #1
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00c      	beq.n	80067e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	f003 0301 	and.w	r3, r3, #1
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d007      	beq.n	80067e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f06f 0201 	mvn.w	r2, #1
 80067d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f7fb fdae 	bl	800233c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00c      	beq.n	8006804 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d007      	beq.n	8006804 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80067fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 fc24 	bl	800704c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00c      	beq.n	8006828 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006814:	2b00      	cmp	r3, #0
 8006816:	d007      	beq.n	8006828 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006820:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f952 	bl	8006acc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	f003 0320 	and.w	r3, r3, #32
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00c      	beq.n	800684c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	f003 0320 	and.w	r3, r3, #32
 8006838:	2b00      	cmp	r3, #0
 800683a:	d007      	beq.n	800684c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f06f 0220 	mvn.w	r2, #32
 8006844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fbf6 	bl	8007038 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800684c:	bf00      	nop
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006860:	2300      	movs	r3, #0
 8006862:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800686a:	2b01      	cmp	r3, #1
 800686c:	d101      	bne.n	8006872 <HAL_TIM_OC_ConfigChannel+0x1e>
 800686e:	2302      	movs	r3, #2
 8006870:	e048      	b.n	8006904 <HAL_TIM_OC_ConfigChannel+0xb0>
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2201      	movs	r2, #1
 8006876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2b0c      	cmp	r3, #12
 800687e:	d839      	bhi.n	80068f4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8006880:	a201      	add	r2, pc, #4	@ (adr r2, 8006888 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006886:	bf00      	nop
 8006888:	080068bd 	.word	0x080068bd
 800688c:	080068f5 	.word	0x080068f5
 8006890:	080068f5 	.word	0x080068f5
 8006894:	080068f5 	.word	0x080068f5
 8006898:	080068cb 	.word	0x080068cb
 800689c:	080068f5 	.word	0x080068f5
 80068a0:	080068f5 	.word	0x080068f5
 80068a4:	080068f5 	.word	0x080068f5
 80068a8:	080068d9 	.word	0x080068d9
 80068ac:	080068f5 	.word	0x080068f5
 80068b0:	080068f5 	.word	0x080068f5
 80068b4:	080068f5 	.word	0x080068f5
 80068b8:	080068e7 	.word	0x080068e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68b9      	ldr	r1, [r7, #8]
 80068c2:	4618      	mov	r0, r3
 80068c4:	f000 f998 	bl	8006bf8 <TIM_OC1_SetConfig>
      break;
 80068c8:	e017      	b.n	80068fa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68b9      	ldr	r1, [r7, #8]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 f9f7 	bl	8006cc4 <TIM_OC2_SetConfig>
      break;
 80068d6:	e010      	b.n	80068fa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68b9      	ldr	r1, [r7, #8]
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 fa5c 	bl	8006d9c <TIM_OC3_SetConfig>
      break;
 80068e4:	e009      	b.n	80068fa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	68b9      	ldr	r1, [r7, #8]
 80068ec:	4618      	mov	r0, r3
 80068ee:	f000 fabf 	bl	8006e70 <TIM_OC4_SetConfig>
      break;
 80068f2:	e002      	b.n	80068fa <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	75fb      	strb	r3, [r7, #23]
      break;
 80068f8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006902:	7dfb      	ldrb	r3, [r7, #23]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3718      	adds	r7, #24
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006918:	2300      	movs	r3, #0
 800691a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006922:	2b01      	cmp	r3, #1
 8006924:	d101      	bne.n	800692a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006926:	2302      	movs	r3, #2
 8006928:	e0ae      	b.n	8006a88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b0c      	cmp	r3, #12
 8006936:	f200 809f 	bhi.w	8006a78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800693a:	a201      	add	r2, pc, #4	@ (adr r2, 8006940 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800693c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006940:	08006975 	.word	0x08006975
 8006944:	08006a79 	.word	0x08006a79
 8006948:	08006a79 	.word	0x08006a79
 800694c:	08006a79 	.word	0x08006a79
 8006950:	080069b5 	.word	0x080069b5
 8006954:	08006a79 	.word	0x08006a79
 8006958:	08006a79 	.word	0x08006a79
 800695c:	08006a79 	.word	0x08006a79
 8006960:	080069f7 	.word	0x080069f7
 8006964:	08006a79 	.word	0x08006a79
 8006968:	08006a79 	.word	0x08006a79
 800696c:	08006a79 	.word	0x08006a79
 8006970:	08006a37 	.word	0x08006a37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68b9      	ldr	r1, [r7, #8]
 800697a:	4618      	mov	r0, r3
 800697c:	f000 f93c 	bl	8006bf8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	699a      	ldr	r2, [r3, #24]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f042 0208 	orr.w	r2, r2, #8
 800698e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	699a      	ldr	r2, [r3, #24]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f022 0204 	bic.w	r2, r2, #4
 800699e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6999      	ldr	r1, [r3, #24]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	691a      	ldr	r2, [r3, #16]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	619a      	str	r2, [r3, #24]
      break;
 80069b2:	e064      	b.n	8006a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68b9      	ldr	r1, [r7, #8]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 f982 	bl	8006cc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	699a      	ldr	r2, [r3, #24]
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	699a      	ldr	r2, [r3, #24]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6999      	ldr	r1, [r3, #24]
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	021a      	lsls	r2, r3, #8
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	430a      	orrs	r2, r1
 80069f2:	619a      	str	r2, [r3, #24]
      break;
 80069f4:	e043      	b.n	8006a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68b9      	ldr	r1, [r7, #8]
 80069fc:	4618      	mov	r0, r3
 80069fe:	f000 f9cd 	bl	8006d9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	69da      	ldr	r2, [r3, #28]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f042 0208 	orr.w	r2, r2, #8
 8006a10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	69da      	ldr	r2, [r3, #28]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f022 0204 	bic.w	r2, r2, #4
 8006a20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	69d9      	ldr	r1, [r3, #28]
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	691a      	ldr	r2, [r3, #16]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	430a      	orrs	r2, r1
 8006a32:	61da      	str	r2, [r3, #28]
      break;
 8006a34:	e023      	b.n	8006a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68b9      	ldr	r1, [r7, #8]
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f000 fa17 	bl	8006e70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	69da      	ldr	r2, [r3, #28]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	69da      	ldr	r2, [r3, #28]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	69d9      	ldr	r1, [r3, #28]
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	021a      	lsls	r2, r3, #8
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	430a      	orrs	r2, r1
 8006a74:	61da      	str	r2, [r3, #28]
      break;
 8006a76:	e002      	b.n	8006a7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3718      	adds	r7, #24
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006aac:	bf00      	nop
 8006aae:	370c      	adds	r7, #12
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ac0:	bf00      	nop
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4a3a      	ldr	r2, [pc, #232]	@ (8006bdc <TIM_Base_SetConfig+0xfc>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d00f      	beq.n	8006b18 <TIM_Base_SetConfig+0x38>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006afe:	d00b      	beq.n	8006b18 <TIM_Base_SetConfig+0x38>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a37      	ldr	r2, [pc, #220]	@ (8006be0 <TIM_Base_SetConfig+0x100>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d007      	beq.n	8006b18 <TIM_Base_SetConfig+0x38>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a36      	ldr	r2, [pc, #216]	@ (8006be4 <TIM_Base_SetConfig+0x104>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d003      	beq.n	8006b18 <TIM_Base_SetConfig+0x38>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a35      	ldr	r2, [pc, #212]	@ (8006be8 <TIM_Base_SetConfig+0x108>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d108      	bne.n	8006b2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a2b      	ldr	r2, [pc, #172]	@ (8006bdc <TIM_Base_SetConfig+0xfc>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d01b      	beq.n	8006b6a <TIM_Base_SetConfig+0x8a>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b38:	d017      	beq.n	8006b6a <TIM_Base_SetConfig+0x8a>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a28      	ldr	r2, [pc, #160]	@ (8006be0 <TIM_Base_SetConfig+0x100>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d013      	beq.n	8006b6a <TIM_Base_SetConfig+0x8a>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a27      	ldr	r2, [pc, #156]	@ (8006be4 <TIM_Base_SetConfig+0x104>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d00f      	beq.n	8006b6a <TIM_Base_SetConfig+0x8a>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a26      	ldr	r2, [pc, #152]	@ (8006be8 <TIM_Base_SetConfig+0x108>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d00b      	beq.n	8006b6a <TIM_Base_SetConfig+0x8a>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a25      	ldr	r2, [pc, #148]	@ (8006bec <TIM_Base_SetConfig+0x10c>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d007      	beq.n	8006b6a <TIM_Base_SetConfig+0x8a>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a24      	ldr	r2, [pc, #144]	@ (8006bf0 <TIM_Base_SetConfig+0x110>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d003      	beq.n	8006b6a <TIM_Base_SetConfig+0x8a>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a23      	ldr	r2, [pc, #140]	@ (8006bf4 <TIM_Base_SetConfig+0x114>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d108      	bne.n	8006b7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	695b      	ldr	r3, [r3, #20]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	689a      	ldr	r2, [r3, #8]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a0e      	ldr	r2, [pc, #56]	@ (8006bdc <TIM_Base_SetConfig+0xfc>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d103      	bne.n	8006bb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	691a      	ldr	r2, [r3, #16]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	f003 0301 	and.w	r3, r3, #1
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d105      	bne.n	8006bce <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	f023 0201 	bic.w	r2, r3, #1
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	611a      	str	r2, [r3, #16]
  }
}
 8006bce:	bf00      	nop
 8006bd0:	3714      	adds	r7, #20
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	40010000 	.word	0x40010000
 8006be0:	40000400 	.word	0x40000400
 8006be4:	40000800 	.word	0x40000800
 8006be8:	40000c00 	.word	0x40000c00
 8006bec:	40014000 	.word	0x40014000
 8006bf0:	40014400 	.word	0x40014400
 8006bf4:	40014800 	.word	0x40014800

08006bf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b087      	sub	sp, #28
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
 8006c0c:	f023 0201 	bic.w	r2, r3, #1
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	f023 0303 	bic.w	r3, r3, #3
 8006c2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	f023 0302 	bic.w	r3, r3, #2
 8006c40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a1c      	ldr	r2, [pc, #112]	@ (8006cc0 <TIM_OC1_SetConfig+0xc8>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d10c      	bne.n	8006c6e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	f023 0308 	bic.w	r3, r3, #8
 8006c5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	f023 0304 	bic.w	r3, r3, #4
 8006c6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a13      	ldr	r2, [pc, #76]	@ (8006cc0 <TIM_OC1_SetConfig+0xc8>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d111      	bne.n	8006c9a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	693a      	ldr	r2, [r7, #16]
 8006c8c:	4313      	orrs	r3, r2
 8006c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	685a      	ldr	r2, [r3, #4]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	621a      	str	r2, [r3, #32]
}
 8006cb4:	bf00      	nop
 8006cb6:	371c      	adds	r7, #28
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	40010000 	.word	0x40010000

08006cc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6a1b      	ldr	r3, [r3, #32]
 8006cd8:	f023 0210 	bic.w	r2, r3, #16
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	699b      	ldr	r3, [r3, #24]
 8006cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	021b      	lsls	r3, r3, #8
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	f023 0320 	bic.w	r3, r3, #32
 8006d0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	011b      	lsls	r3, r3, #4
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a1e      	ldr	r2, [pc, #120]	@ (8006d98 <TIM_OC2_SetConfig+0xd4>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d10d      	bne.n	8006d40 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006d2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	68db      	ldr	r3, [r3, #12]
 8006d30:	011b      	lsls	r3, r3, #4
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a15      	ldr	r2, [pc, #84]	@ (8006d98 <TIM_OC2_SetConfig+0xd4>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d113      	bne.n	8006d70 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	695b      	ldr	r3, [r3, #20]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	693a      	ldr	r2, [r7, #16]
 8006d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	685a      	ldr	r2, [r3, #4]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	621a      	str	r2, [r3, #32]
}
 8006d8a:	bf00      	nop
 8006d8c:	371c      	adds	r7, #28
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr
 8006d96:	bf00      	nop
 8006d98:	40010000 	.word	0x40010000

08006d9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a1b      	ldr	r3, [r3, #32]
 8006db0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	69db      	ldr	r3, [r3, #28]
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f023 0303 	bic.w	r3, r3, #3
 8006dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	021b      	lsls	r3, r3, #8
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a1d      	ldr	r2, [pc, #116]	@ (8006e6c <TIM_OC3_SetConfig+0xd0>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d10d      	bne.n	8006e16 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006e00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	021b      	lsls	r3, r3, #8
 8006e08:	697a      	ldr	r2, [r7, #20]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006e14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a14      	ldr	r2, [pc, #80]	@ (8006e6c <TIM_OC3_SetConfig+0xd0>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d113      	bne.n	8006e46 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	695b      	ldr	r3, [r3, #20]
 8006e32:	011b      	lsls	r3, r3, #4
 8006e34:	693a      	ldr	r2, [r7, #16]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	011b      	lsls	r3, r3, #4
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	693a      	ldr	r2, [r7, #16]
 8006e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	685a      	ldr	r2, [r3, #4]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	621a      	str	r2, [r3, #32]
}
 8006e60:	bf00      	nop
 8006e62:	371c      	adds	r7, #28
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr
 8006e6c:	40010000 	.word	0x40010000

08006e70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6a1b      	ldr	r3, [r3, #32]
 8006e7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a1b      	ldr	r3, [r3, #32]
 8006e84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	69db      	ldr	r3, [r3, #28]
 8006e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006ea6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	021b      	lsls	r3, r3, #8
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006eba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	031b      	lsls	r3, r3, #12
 8006ec2:	693a      	ldr	r2, [r7, #16]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4a10      	ldr	r2, [pc, #64]	@ (8006f0c <TIM_OC4_SetConfig+0x9c>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d109      	bne.n	8006ee4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006ed6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	695b      	ldr	r3, [r3, #20]
 8006edc:	019b      	lsls	r3, r3, #6
 8006ede:	697a      	ldr	r2, [r7, #20]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	685a      	ldr	r2, [r3, #4]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	621a      	str	r2, [r3, #32]
}
 8006efe:	bf00      	nop
 8006f00:	371c      	adds	r7, #28
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	40010000 	.word	0x40010000

08006f10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b087      	sub	sp, #28
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60f8      	str	r0, [r7, #12]
 8006f18:	60b9      	str	r1, [r7, #8]
 8006f1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f003 031f 	and.w	r3, r3, #31
 8006f22:	2201      	movs	r2, #1
 8006f24:	fa02 f303 	lsl.w	r3, r2, r3
 8006f28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6a1a      	ldr	r2, [r3, #32]
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	43db      	mvns	r3, r3
 8006f32:	401a      	ands	r2, r3
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6a1a      	ldr	r2, [r3, #32]
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	f003 031f 	and.w	r3, r3, #31
 8006f42:	6879      	ldr	r1, [r7, #4]
 8006f44:	fa01 f303 	lsl.w	r3, r1, r3
 8006f48:	431a      	orrs	r2, r3
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	621a      	str	r2, [r3, #32]
}
 8006f4e:	bf00      	nop
 8006f50:	371c      	adds	r7, #28
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr
	...

08006f5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d101      	bne.n	8006f74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f70:	2302      	movs	r3, #2
 8006f72:	e050      	b.n	8007016 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2202      	movs	r2, #2
 8006f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	689b      	ldr	r3, [r3, #8]
 8006f92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a1c      	ldr	r2, [pc, #112]	@ (8007024 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d018      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fc0:	d013      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a18      	ldr	r2, [pc, #96]	@ (8007028 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d00e      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a16      	ldr	r2, [pc, #88]	@ (800702c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d009      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a15      	ldr	r2, [pc, #84]	@ (8007030 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d004      	beq.n	8006fea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a13      	ldr	r2, [pc, #76]	@ (8007034 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d10c      	bne.n	8007004 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ff0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3714      	adds	r7, #20
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	40010000 	.word	0x40010000
 8007028:	40000400 	.word	0x40000400
 800702c:	40000800 	.word	0x40000800
 8007030:	40000c00 	.word	0x40000c00
 8007034:	40014000 	.word	0x40014000

08007038 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007040:	bf00      	nop
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007054:	bf00      	nop
 8007056:	370c      	adds	r7, #12
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr

08007060 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d101      	bne.n	8007072 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e042      	b.n	80070f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007078:	b2db      	uxtb	r3, r3
 800707a:	2b00      	cmp	r3, #0
 800707c:	d106      	bne.n	800708c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7fb fd9e 	bl	8002bc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2224      	movs	r2, #36	@ 0x24
 8007090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80070a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f000 fc79 	bl	800799c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	691a      	ldr	r2, [r3, #16]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80070b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	695a      	ldr	r2, [r3, #20]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80070c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	68da      	ldr	r2, [r3, #12]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80070d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2220      	movs	r2, #32
 80070e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2220      	movs	r2, #32
 80070ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2200      	movs	r2, #0
 80070f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b0ba      	sub	sp, #232	@ 0xe8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007126:	2300      	movs	r3, #0
 8007128:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800712c:	2300      	movs	r3, #0
 800712e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007136:	f003 030f 	and.w	r3, r3, #15
 800713a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800713e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10f      	bne.n	8007166 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800714a:	f003 0320 	and.w	r3, r3, #32
 800714e:	2b00      	cmp	r3, #0
 8007150:	d009      	beq.n	8007166 <HAL_UART_IRQHandler+0x66>
 8007152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007156:	f003 0320 	and.w	r3, r3, #32
 800715a:	2b00      	cmp	r3, #0
 800715c:	d003      	beq.n	8007166 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fb5d 	bl	800781e <UART_Receive_IT>
      return;
 8007164:	e25b      	b.n	800761e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007166:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800716a:	2b00      	cmp	r3, #0
 800716c:	f000 80de 	beq.w	800732c <HAL_UART_IRQHandler+0x22c>
 8007170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007174:	f003 0301 	and.w	r3, r3, #1
 8007178:	2b00      	cmp	r3, #0
 800717a:	d106      	bne.n	800718a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800717c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007180:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007184:	2b00      	cmp	r3, #0
 8007186:	f000 80d1 	beq.w	800732c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800718a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00b      	beq.n	80071ae <HAL_UART_IRQHandler+0xae>
 8007196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800719a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d005      	beq.n	80071ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071a6:	f043 0201 	orr.w	r2, r3, #1
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071b2:	f003 0304 	and.w	r3, r3, #4
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d00b      	beq.n	80071d2 <HAL_UART_IRQHandler+0xd2>
 80071ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071be:	f003 0301 	and.w	r3, r3, #1
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d005      	beq.n	80071d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ca:	f043 0202 	orr.w	r2, r3, #2
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071d6:	f003 0302 	and.w	r3, r3, #2
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00b      	beq.n	80071f6 <HAL_UART_IRQHandler+0xf6>
 80071de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d005      	beq.n	80071f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071ee:	f043 0204 	orr.w	r2, r3, #4
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80071f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071fa:	f003 0308 	and.w	r3, r3, #8
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d011      	beq.n	8007226 <HAL_UART_IRQHandler+0x126>
 8007202:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007206:	f003 0320 	and.w	r3, r3, #32
 800720a:	2b00      	cmp	r3, #0
 800720c:	d105      	bne.n	800721a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800720e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007212:	f003 0301 	and.w	r3, r3, #1
 8007216:	2b00      	cmp	r3, #0
 8007218:	d005      	beq.n	8007226 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800721e:	f043 0208 	orr.w	r2, r3, #8
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800722a:	2b00      	cmp	r3, #0
 800722c:	f000 81f2 	beq.w	8007614 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007230:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007234:	f003 0320 	and.w	r3, r3, #32
 8007238:	2b00      	cmp	r3, #0
 800723a:	d008      	beq.n	800724e <HAL_UART_IRQHandler+0x14e>
 800723c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007240:	f003 0320 	and.w	r3, r3, #32
 8007244:	2b00      	cmp	r3, #0
 8007246:	d002      	beq.n	800724e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fae8 	bl	800781e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	695b      	ldr	r3, [r3, #20]
 8007254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007258:	2b40      	cmp	r3, #64	@ 0x40
 800725a:	bf0c      	ite	eq
 800725c:	2301      	moveq	r3, #1
 800725e:	2300      	movne	r3, #0
 8007260:	b2db      	uxtb	r3, r3
 8007262:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800726a:	f003 0308 	and.w	r3, r3, #8
 800726e:	2b00      	cmp	r3, #0
 8007270:	d103      	bne.n	800727a <HAL_UART_IRQHandler+0x17a>
 8007272:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007276:	2b00      	cmp	r3, #0
 8007278:	d04f      	beq.n	800731a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f9f0 	bl	8007660 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800728a:	2b40      	cmp	r3, #64	@ 0x40
 800728c:	d141      	bne.n	8007312 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3314      	adds	r3, #20
 8007294:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007298:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800729c:	e853 3f00 	ldrex	r3, [r3]
 80072a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80072a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80072a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	3314      	adds	r3, #20
 80072b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80072ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80072be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80072c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80072ca:	e841 2300 	strex	r3, r2, [r1]
 80072ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80072d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1d9      	bne.n	800728e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d013      	beq.n	800730a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072e6:	4a7e      	ldr	r2, [pc, #504]	@ (80074e0 <HAL_UART_IRQHandler+0x3e0>)
 80072e8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7fc fd34 	bl	8003d5c <HAL_DMA_Abort_IT>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d016      	beq.n	8007328 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007300:	687a      	ldr	r2, [r7, #4]
 8007302:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007304:	4610      	mov	r0, r2
 8007306:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007308:	e00e      	b.n	8007328 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f99e 	bl	800764c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007310:	e00a      	b.n	8007328 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 f99a 	bl	800764c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007318:	e006      	b.n	8007328 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 f996 	bl	800764c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007326:	e175      	b.n	8007614 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007328:	bf00      	nop
    return;
 800732a:	e173      	b.n	8007614 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007330:	2b01      	cmp	r3, #1
 8007332:	f040 814f 	bne.w	80075d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800733a:	f003 0310 	and.w	r3, r3, #16
 800733e:	2b00      	cmp	r3, #0
 8007340:	f000 8148 	beq.w	80075d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007348:	f003 0310 	and.w	r3, r3, #16
 800734c:	2b00      	cmp	r3, #0
 800734e:	f000 8141 	beq.w	80075d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007352:	2300      	movs	r3, #0
 8007354:	60bb      	str	r3, [r7, #8]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	60bb      	str	r3, [r7, #8]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	60bb      	str	r3, [r7, #8]
 8007366:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	695b      	ldr	r3, [r3, #20]
 800736e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007372:	2b40      	cmp	r3, #64	@ 0x40
 8007374:	f040 80b6 	bne.w	80074e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007384:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007388:	2b00      	cmp	r3, #0
 800738a:	f000 8145 	beq.w	8007618 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007392:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007396:	429a      	cmp	r2, r3
 8007398:	f080 813e 	bcs.w	8007618 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80073a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073a8:	69db      	ldr	r3, [r3, #28]
 80073aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073ae:	f000 8088 	beq.w	80074c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	330c      	adds	r3, #12
 80073b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80073c0:	e853 3f00 	ldrex	r3, [r3]
 80073c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80073c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80073cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	330c      	adds	r3, #12
 80073da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80073de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80073e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80073ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80073ee:	e841 2300 	strex	r3, r2, [r1]
 80073f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80073f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1d9      	bne.n	80073b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	3314      	adds	r3, #20
 8007404:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007406:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007408:	e853 3f00 	ldrex	r3, [r3]
 800740c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800740e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007410:	f023 0301 	bic.w	r3, r3, #1
 8007414:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	3314      	adds	r3, #20
 800741e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007422:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007426:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007428:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800742a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800742e:	e841 2300 	strex	r3, r2, [r1]
 8007432:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007434:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1e1      	bne.n	80073fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	3314      	adds	r3, #20
 8007440:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007442:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007444:	e853 3f00 	ldrex	r3, [r3]
 8007448:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800744a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800744c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007450:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	3314      	adds	r3, #20
 800745a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800745e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007460:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007462:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007464:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007466:	e841 2300 	strex	r3, r2, [r1]
 800746a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800746c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1e3      	bne.n	800743a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2220      	movs	r2, #32
 8007476:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2200      	movs	r2, #0
 800747e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	330c      	adds	r3, #12
 8007486:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007488:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800748a:	e853 3f00 	ldrex	r3, [r3]
 800748e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007490:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007492:	f023 0310 	bic.w	r3, r3, #16
 8007496:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	330c      	adds	r3, #12
 80074a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80074a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80074a6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80074aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80074ac:	e841 2300 	strex	r3, r2, [r1]
 80074b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80074b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d1e3      	bne.n	8007480 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074bc:	4618      	mov	r0, r3
 80074be:	f7fc fbdd 	bl	8003c7c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2202      	movs	r2, #2
 80074c6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	1ad3      	subs	r3, r2, r3
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	4619      	mov	r1, r3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f7fb f8e9 	bl	80026b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074de:	e09b      	b.n	8007618 <HAL_UART_IRQHandler+0x518>
 80074e0:	08007727 	.word	0x08007727
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f000 808e 	beq.w	800761c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007500:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007504:	2b00      	cmp	r3, #0
 8007506:	f000 8089 	beq.w	800761c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	330c      	adds	r3, #12
 8007510:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007514:	e853 3f00 	ldrex	r3, [r3]
 8007518:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800751a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800751c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007520:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	330c      	adds	r3, #12
 800752a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800752e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007530:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007532:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007534:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007536:	e841 2300 	strex	r3, r2, [r1]
 800753a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800753c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1e3      	bne.n	800750a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3314      	adds	r3, #20
 8007548:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754c:	e853 3f00 	ldrex	r3, [r3]
 8007550:	623b      	str	r3, [r7, #32]
   return(result);
 8007552:	6a3b      	ldr	r3, [r7, #32]
 8007554:	f023 0301 	bic.w	r3, r3, #1
 8007558:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3314      	adds	r3, #20
 8007562:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007566:	633a      	str	r2, [r7, #48]	@ 0x30
 8007568:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800756c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800756e:	e841 2300 	strex	r3, r2, [r1]
 8007572:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007576:	2b00      	cmp	r3, #0
 8007578:	d1e3      	bne.n	8007542 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2220      	movs	r2, #32
 800757e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	330c      	adds	r3, #12
 800758e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007590:	693b      	ldr	r3, [r7, #16]
 8007592:	e853 3f00 	ldrex	r3, [r3]
 8007596:	60fb      	str	r3, [r7, #12]
   return(result);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f023 0310 	bic.w	r3, r3, #16
 800759e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	330c      	adds	r3, #12
 80075a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80075ac:	61fa      	str	r2, [r7, #28]
 80075ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b0:	69b9      	ldr	r1, [r7, #24]
 80075b2:	69fa      	ldr	r2, [r7, #28]
 80075b4:	e841 2300 	strex	r3, r2, [r1]
 80075b8:	617b      	str	r3, [r7, #20]
   return(result);
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d1e3      	bne.n	8007588 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2202      	movs	r2, #2
 80075c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80075ca:	4619      	mov	r1, r3
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f7fb f86f 	bl	80026b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075d2:	e023      	b.n	800761c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80075d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d009      	beq.n	80075f4 <HAL_UART_IRQHandler+0x4f4>
 80075e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d003      	beq.n	80075f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f000 f8ae 	bl	800774e <UART_Transmit_IT>
    return;
 80075f2:	e014      	b.n	800761e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00e      	beq.n	800761e <HAL_UART_IRQHandler+0x51e>
 8007600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007608:	2b00      	cmp	r3, #0
 800760a:	d008      	beq.n	800761e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f8ee 	bl	80077ee <UART_EndTransmit_IT>
    return;
 8007612:	e004      	b.n	800761e <HAL_UART_IRQHandler+0x51e>
    return;
 8007614:	bf00      	nop
 8007616:	e002      	b.n	800761e <HAL_UART_IRQHandler+0x51e>
      return;
 8007618:	bf00      	nop
 800761a:	e000      	b.n	800761e <HAL_UART_IRQHandler+0x51e>
      return;
 800761c:	bf00      	nop
  }
}
 800761e:	37e8      	adds	r7, #232	@ 0xe8
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr

08007638 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007654:	bf00      	nop
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007660:	b480      	push	{r7}
 8007662:	b095      	sub	sp, #84	@ 0x54
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	330c      	adds	r3, #12
 800766e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007672:	e853 3f00 	ldrex	r3, [r3]
 8007676:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800767e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	330c      	adds	r3, #12
 8007686:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007688:	643a      	str	r2, [r7, #64]	@ 0x40
 800768a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800768e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007690:	e841 2300 	strex	r3, r2, [r1]
 8007694:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1e5      	bne.n	8007668 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	3314      	adds	r3, #20
 80076a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a4:	6a3b      	ldr	r3, [r7, #32]
 80076a6:	e853 3f00 	ldrex	r3, [r3]
 80076aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	f023 0301 	bic.w	r3, r3, #1
 80076b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	3314      	adds	r3, #20
 80076ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076be:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076c4:	e841 2300 	strex	r3, r2, [r1]
 80076c8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80076ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1e5      	bne.n	800769c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d119      	bne.n	800770c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	330c      	adds	r3, #12
 80076de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	e853 3f00 	ldrex	r3, [r3]
 80076e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	f023 0310 	bic.w	r3, r3, #16
 80076ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	330c      	adds	r3, #12
 80076f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076f8:	61ba      	str	r2, [r7, #24]
 80076fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076fc:	6979      	ldr	r1, [r7, #20]
 80076fe:	69ba      	ldr	r2, [r7, #24]
 8007700:	e841 2300 	strex	r3, r2, [r1]
 8007704:	613b      	str	r3, [r7, #16]
   return(result);
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d1e5      	bne.n	80076d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2220      	movs	r2, #32
 8007710:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800771a:	bf00      	nop
 800771c:	3754      	adds	r7, #84	@ 0x54
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b084      	sub	sp, #16
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007732:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f7ff ff83 	bl	800764c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007746:	bf00      	nop
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800774e:	b480      	push	{r7}
 8007750:	b085      	sub	sp, #20
 8007752:	af00      	add	r7, sp, #0
 8007754:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b21      	cmp	r3, #33	@ 0x21
 8007760:	d13e      	bne.n	80077e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800776a:	d114      	bne.n	8007796 <UART_Transmit_IT+0x48>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d110      	bne.n	8007796 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a1b      	ldr	r3, [r3, #32]
 8007778:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	881b      	ldrh	r3, [r3, #0]
 800777e:	461a      	mov	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007788:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	1c9a      	adds	r2, r3, #2
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	621a      	str	r2, [r3, #32]
 8007794:	e008      	b.n	80077a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	1c59      	adds	r1, r3, #1
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	6211      	str	r1, [r2, #32]
 80077a0:	781a      	ldrb	r2, [r3, #0]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	3b01      	subs	r3, #1
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	4619      	mov	r1, r3
 80077b6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10f      	bne.n	80077dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68da      	ldr	r2, [r3, #12]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80077ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68da      	ldr	r2, [r3, #12]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80077da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80077dc:	2300      	movs	r3, #0
 80077de:	e000      	b.n	80077e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80077e0:	2302      	movs	r3, #2
  }
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr

080077ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b082      	sub	sp, #8
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68da      	ldr	r2, [r3, #12]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007804:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2220      	movs	r2, #32
 800780a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7ff ff08 	bl	8007624 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}

0800781e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800781e:	b580      	push	{r7, lr}
 8007820:	b08c      	sub	sp, #48	@ 0x30
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800782c:	b2db      	uxtb	r3, r3
 800782e:	2b22      	cmp	r3, #34	@ 0x22
 8007830:	f040 80ae 	bne.w	8007990 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800783c:	d117      	bne.n	800786e <UART_Receive_IT+0x50>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d113      	bne.n	800786e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007846:	2300      	movs	r3, #0
 8007848:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800784e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	b29b      	uxth	r3, r3
 8007858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800785c:	b29a      	uxth	r2, r3
 800785e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007860:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007866:	1c9a      	adds	r2, r3, #2
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	629a      	str	r2, [r3, #40]	@ 0x28
 800786c:	e026      	b.n	80078bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007872:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007874:	2300      	movs	r3, #0
 8007876:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007880:	d007      	beq.n	8007892 <UART_Receive_IT+0x74>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d10a      	bne.n	80078a0 <UART_Receive_IT+0x82>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	691b      	ldr	r3, [r3, #16]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d106      	bne.n	80078a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	b2da      	uxtb	r2, r3
 800789a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800789c:	701a      	strb	r2, [r3, #0]
 800789e:	e008      	b.n	80078b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078ac:	b2da      	uxtb	r2, r3
 80078ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b6:	1c5a      	adds	r2, r3, #1
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	3b01      	subs	r3, #1
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	687a      	ldr	r2, [r7, #4]
 80078c8:	4619      	mov	r1, r3
 80078ca:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d15d      	bne.n	800798c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68da      	ldr	r2, [r3, #12]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f022 0220 	bic.w	r2, r2, #32
 80078de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68da      	ldr	r2, [r3, #12]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80078ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	695a      	ldr	r2, [r3, #20]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f022 0201 	bic.w	r2, r2, #1
 80078fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2220      	movs	r2, #32
 8007904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007912:	2b01      	cmp	r3, #1
 8007914:	d135      	bne.n	8007982 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	330c      	adds	r3, #12
 8007922:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	e853 3f00 	ldrex	r3, [r3]
 800792a:	613b      	str	r3, [r7, #16]
   return(result);
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	f023 0310 	bic.w	r3, r3, #16
 8007932:	627b      	str	r3, [r7, #36]	@ 0x24
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	330c      	adds	r3, #12
 800793a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800793c:	623a      	str	r2, [r7, #32]
 800793e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007940:	69f9      	ldr	r1, [r7, #28]
 8007942:	6a3a      	ldr	r2, [r7, #32]
 8007944:	e841 2300 	strex	r3, r2, [r1]
 8007948:	61bb      	str	r3, [r7, #24]
   return(result);
 800794a:	69bb      	ldr	r3, [r7, #24]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1e5      	bne.n	800791c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 0310 	and.w	r3, r3, #16
 800795a:	2b10      	cmp	r3, #16
 800795c:	d10a      	bne.n	8007974 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800795e:	2300      	movs	r3, #0
 8007960:	60fb      	str	r3, [r7, #12]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	60fb      	str	r3, [r7, #12]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	60fb      	str	r3, [r7, #12]
 8007972:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007978:	4619      	mov	r1, r3
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f7fa fe98 	bl	80026b0 <HAL_UARTEx_RxEventCallback>
 8007980:	e002      	b.n	8007988 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f7ff fe58 	bl	8007638 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007988:	2300      	movs	r3, #0
 800798a:	e002      	b.n	8007992 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800798c:	2300      	movs	r3, #0
 800798e:	e000      	b.n	8007992 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007990:	2302      	movs	r3, #2
  }
}
 8007992:	4618      	mov	r0, r3
 8007994:	3730      	adds	r7, #48	@ 0x30
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
	...

0800799c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800799c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079a0:	b0c0      	sub	sp, #256	@ 0x100
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	691b      	ldr	r3, [r3, #16]
 80079b0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80079b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079b8:	68d9      	ldr	r1, [r3, #12]
 80079ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	ea40 0301 	orr.w	r3, r0, r1
 80079c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80079c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ca:	689a      	ldr	r2, [r3, #8]
 80079cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	431a      	orrs	r2, r3
 80079d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	431a      	orrs	r2, r3
 80079dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079e0:	69db      	ldr	r3, [r3, #28]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80079e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	68db      	ldr	r3, [r3, #12]
 80079f0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80079f4:	f021 010c 	bic.w	r1, r1, #12
 80079f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007a02:	430b      	orrs	r3, r1
 8007a04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a16:	6999      	ldr	r1, [r3, #24]
 8007a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	ea40 0301 	orr.w	r3, r0, r1
 8007a22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	4b8f      	ldr	r3, [pc, #572]	@ (8007c68 <UART_SetConfig+0x2cc>)
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d005      	beq.n	8007a3c <UART_SetConfig+0xa0>
 8007a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	4b8d      	ldr	r3, [pc, #564]	@ (8007c6c <UART_SetConfig+0x2d0>)
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d104      	bne.n	8007a46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a3c:	f7fe fc56 	bl	80062ec <HAL_RCC_GetPCLK2Freq>
 8007a40:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007a44:	e003      	b.n	8007a4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a46:	f7fe fc3d 	bl	80062c4 <HAL_RCC_GetPCLK1Freq>
 8007a4a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a52:	69db      	ldr	r3, [r3, #28]
 8007a54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a58:	f040 810c 	bne.w	8007c74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a60:	2200      	movs	r2, #0
 8007a62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a66:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007a6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007a6e:	4622      	mov	r2, r4
 8007a70:	462b      	mov	r3, r5
 8007a72:	1891      	adds	r1, r2, r2
 8007a74:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007a76:	415b      	adcs	r3, r3
 8007a78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007a7e:	4621      	mov	r1, r4
 8007a80:	eb12 0801 	adds.w	r8, r2, r1
 8007a84:	4629      	mov	r1, r5
 8007a86:	eb43 0901 	adc.w	r9, r3, r1
 8007a8a:	f04f 0200 	mov.w	r2, #0
 8007a8e:	f04f 0300 	mov.w	r3, #0
 8007a92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a9e:	4690      	mov	r8, r2
 8007aa0:	4699      	mov	r9, r3
 8007aa2:	4623      	mov	r3, r4
 8007aa4:	eb18 0303 	adds.w	r3, r8, r3
 8007aa8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007aac:	462b      	mov	r3, r5
 8007aae:	eb49 0303 	adc.w	r3, r9, r3
 8007ab2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007ac2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007ac6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007aca:	460b      	mov	r3, r1
 8007acc:	18db      	adds	r3, r3, r3
 8007ace:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ad0:	4613      	mov	r3, r2
 8007ad2:	eb42 0303 	adc.w	r3, r2, r3
 8007ad6:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ad8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007adc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007ae0:	f7f9 f8da 	bl	8000c98 <__aeabi_uldivmod>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4b61      	ldr	r3, [pc, #388]	@ (8007c70 <UART_SetConfig+0x2d4>)
 8007aea:	fba3 2302 	umull	r2, r3, r3, r2
 8007aee:	095b      	lsrs	r3, r3, #5
 8007af0:	011c      	lsls	r4, r3, #4
 8007af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007af6:	2200      	movs	r2, #0
 8007af8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007afc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007b00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007b04:	4642      	mov	r2, r8
 8007b06:	464b      	mov	r3, r9
 8007b08:	1891      	adds	r1, r2, r2
 8007b0a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007b0c:	415b      	adcs	r3, r3
 8007b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007b14:	4641      	mov	r1, r8
 8007b16:	eb12 0a01 	adds.w	sl, r2, r1
 8007b1a:	4649      	mov	r1, r9
 8007b1c:	eb43 0b01 	adc.w	fp, r3, r1
 8007b20:	f04f 0200 	mov.w	r2, #0
 8007b24:	f04f 0300 	mov.w	r3, #0
 8007b28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007b2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007b30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b34:	4692      	mov	sl, r2
 8007b36:	469b      	mov	fp, r3
 8007b38:	4643      	mov	r3, r8
 8007b3a:	eb1a 0303 	adds.w	r3, sl, r3
 8007b3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b42:	464b      	mov	r3, r9
 8007b44:	eb4b 0303 	adc.w	r3, fp, r3
 8007b48:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b58:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007b5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007b60:	460b      	mov	r3, r1
 8007b62:	18db      	adds	r3, r3, r3
 8007b64:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b66:	4613      	mov	r3, r2
 8007b68:	eb42 0303 	adc.w	r3, r2, r3
 8007b6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007b72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007b76:	f7f9 f88f 	bl	8000c98 <__aeabi_uldivmod>
 8007b7a:	4602      	mov	r2, r0
 8007b7c:	460b      	mov	r3, r1
 8007b7e:	4611      	mov	r1, r2
 8007b80:	4b3b      	ldr	r3, [pc, #236]	@ (8007c70 <UART_SetConfig+0x2d4>)
 8007b82:	fba3 2301 	umull	r2, r3, r3, r1
 8007b86:	095b      	lsrs	r3, r3, #5
 8007b88:	2264      	movs	r2, #100	@ 0x64
 8007b8a:	fb02 f303 	mul.w	r3, r2, r3
 8007b8e:	1acb      	subs	r3, r1, r3
 8007b90:	00db      	lsls	r3, r3, #3
 8007b92:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007b96:	4b36      	ldr	r3, [pc, #216]	@ (8007c70 <UART_SetConfig+0x2d4>)
 8007b98:	fba3 2302 	umull	r2, r3, r3, r2
 8007b9c:	095b      	lsrs	r3, r3, #5
 8007b9e:	005b      	lsls	r3, r3, #1
 8007ba0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007ba4:	441c      	add	r4, r3
 8007ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007baa:	2200      	movs	r2, #0
 8007bac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007bb0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007bb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007bb8:	4642      	mov	r2, r8
 8007bba:	464b      	mov	r3, r9
 8007bbc:	1891      	adds	r1, r2, r2
 8007bbe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007bc0:	415b      	adcs	r3, r3
 8007bc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007bc8:	4641      	mov	r1, r8
 8007bca:	1851      	adds	r1, r2, r1
 8007bcc:	6339      	str	r1, [r7, #48]	@ 0x30
 8007bce:	4649      	mov	r1, r9
 8007bd0:	414b      	adcs	r3, r1
 8007bd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bd4:	f04f 0200 	mov.w	r2, #0
 8007bd8:	f04f 0300 	mov.w	r3, #0
 8007bdc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007be0:	4659      	mov	r1, fp
 8007be2:	00cb      	lsls	r3, r1, #3
 8007be4:	4651      	mov	r1, sl
 8007be6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bea:	4651      	mov	r1, sl
 8007bec:	00ca      	lsls	r2, r1, #3
 8007bee:	4610      	mov	r0, r2
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	4642      	mov	r2, r8
 8007bf6:	189b      	adds	r3, r3, r2
 8007bf8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007bfc:	464b      	mov	r3, r9
 8007bfe:	460a      	mov	r2, r1
 8007c00:	eb42 0303 	adc.w	r3, r2, r3
 8007c04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007c14:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007c18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	18db      	adds	r3, r3, r3
 8007c20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c22:	4613      	mov	r3, r2
 8007c24:	eb42 0303 	adc.w	r3, r2, r3
 8007c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007c2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007c32:	f7f9 f831 	bl	8000c98 <__aeabi_uldivmod>
 8007c36:	4602      	mov	r2, r0
 8007c38:	460b      	mov	r3, r1
 8007c3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007c70 <UART_SetConfig+0x2d4>)
 8007c3c:	fba3 1302 	umull	r1, r3, r3, r2
 8007c40:	095b      	lsrs	r3, r3, #5
 8007c42:	2164      	movs	r1, #100	@ 0x64
 8007c44:	fb01 f303 	mul.w	r3, r1, r3
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	00db      	lsls	r3, r3, #3
 8007c4c:	3332      	adds	r3, #50	@ 0x32
 8007c4e:	4a08      	ldr	r2, [pc, #32]	@ (8007c70 <UART_SetConfig+0x2d4>)
 8007c50:	fba2 2303 	umull	r2, r3, r2, r3
 8007c54:	095b      	lsrs	r3, r3, #5
 8007c56:	f003 0207 	and.w	r2, r3, #7
 8007c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4422      	add	r2, r4
 8007c62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007c64:	e106      	b.n	8007e74 <UART_SetConfig+0x4d8>
 8007c66:	bf00      	nop
 8007c68:	40011000 	.word	0x40011000
 8007c6c:	40011400 	.word	0x40011400
 8007c70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c7e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007c82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007c86:	4642      	mov	r2, r8
 8007c88:	464b      	mov	r3, r9
 8007c8a:	1891      	adds	r1, r2, r2
 8007c8c:	6239      	str	r1, [r7, #32]
 8007c8e:	415b      	adcs	r3, r3
 8007c90:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c96:	4641      	mov	r1, r8
 8007c98:	1854      	adds	r4, r2, r1
 8007c9a:	4649      	mov	r1, r9
 8007c9c:	eb43 0501 	adc.w	r5, r3, r1
 8007ca0:	f04f 0200 	mov.w	r2, #0
 8007ca4:	f04f 0300 	mov.w	r3, #0
 8007ca8:	00eb      	lsls	r3, r5, #3
 8007caa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007cae:	00e2      	lsls	r2, r4, #3
 8007cb0:	4614      	mov	r4, r2
 8007cb2:	461d      	mov	r5, r3
 8007cb4:	4643      	mov	r3, r8
 8007cb6:	18e3      	adds	r3, r4, r3
 8007cb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007cbc:	464b      	mov	r3, r9
 8007cbe:	eb45 0303 	adc.w	r3, r5, r3
 8007cc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007cd2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007cd6:	f04f 0200 	mov.w	r2, #0
 8007cda:	f04f 0300 	mov.w	r3, #0
 8007cde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007ce2:	4629      	mov	r1, r5
 8007ce4:	008b      	lsls	r3, r1, #2
 8007ce6:	4621      	mov	r1, r4
 8007ce8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cec:	4621      	mov	r1, r4
 8007cee:	008a      	lsls	r2, r1, #2
 8007cf0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007cf4:	f7f8 ffd0 	bl	8000c98 <__aeabi_uldivmod>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	4b60      	ldr	r3, [pc, #384]	@ (8007e80 <UART_SetConfig+0x4e4>)
 8007cfe:	fba3 2302 	umull	r2, r3, r3, r2
 8007d02:	095b      	lsrs	r3, r3, #5
 8007d04:	011c      	lsls	r4, r3, #4
 8007d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007d10:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007d14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007d18:	4642      	mov	r2, r8
 8007d1a:	464b      	mov	r3, r9
 8007d1c:	1891      	adds	r1, r2, r2
 8007d1e:	61b9      	str	r1, [r7, #24]
 8007d20:	415b      	adcs	r3, r3
 8007d22:	61fb      	str	r3, [r7, #28]
 8007d24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d28:	4641      	mov	r1, r8
 8007d2a:	1851      	adds	r1, r2, r1
 8007d2c:	6139      	str	r1, [r7, #16]
 8007d2e:	4649      	mov	r1, r9
 8007d30:	414b      	adcs	r3, r1
 8007d32:	617b      	str	r3, [r7, #20]
 8007d34:	f04f 0200 	mov.w	r2, #0
 8007d38:	f04f 0300 	mov.w	r3, #0
 8007d3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007d40:	4659      	mov	r1, fp
 8007d42:	00cb      	lsls	r3, r1, #3
 8007d44:	4651      	mov	r1, sl
 8007d46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d4a:	4651      	mov	r1, sl
 8007d4c:	00ca      	lsls	r2, r1, #3
 8007d4e:	4610      	mov	r0, r2
 8007d50:	4619      	mov	r1, r3
 8007d52:	4603      	mov	r3, r0
 8007d54:	4642      	mov	r2, r8
 8007d56:	189b      	adds	r3, r3, r2
 8007d58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007d5c:	464b      	mov	r3, r9
 8007d5e:	460a      	mov	r2, r1
 8007d60:	eb42 0303 	adc.w	r3, r2, r3
 8007d64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007d72:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007d74:	f04f 0200 	mov.w	r2, #0
 8007d78:	f04f 0300 	mov.w	r3, #0
 8007d7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007d80:	4649      	mov	r1, r9
 8007d82:	008b      	lsls	r3, r1, #2
 8007d84:	4641      	mov	r1, r8
 8007d86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d8a:	4641      	mov	r1, r8
 8007d8c:	008a      	lsls	r2, r1, #2
 8007d8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007d92:	f7f8 ff81 	bl	8000c98 <__aeabi_uldivmod>
 8007d96:	4602      	mov	r2, r0
 8007d98:	460b      	mov	r3, r1
 8007d9a:	4611      	mov	r1, r2
 8007d9c:	4b38      	ldr	r3, [pc, #224]	@ (8007e80 <UART_SetConfig+0x4e4>)
 8007d9e:	fba3 2301 	umull	r2, r3, r3, r1
 8007da2:	095b      	lsrs	r3, r3, #5
 8007da4:	2264      	movs	r2, #100	@ 0x64
 8007da6:	fb02 f303 	mul.w	r3, r2, r3
 8007daa:	1acb      	subs	r3, r1, r3
 8007dac:	011b      	lsls	r3, r3, #4
 8007dae:	3332      	adds	r3, #50	@ 0x32
 8007db0:	4a33      	ldr	r2, [pc, #204]	@ (8007e80 <UART_SetConfig+0x4e4>)
 8007db2:	fba2 2303 	umull	r2, r3, r2, r3
 8007db6:	095b      	lsrs	r3, r3, #5
 8007db8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007dbc:	441c      	add	r4, r3
 8007dbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	673b      	str	r3, [r7, #112]	@ 0x70
 8007dc6:	677a      	str	r2, [r7, #116]	@ 0x74
 8007dc8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007dcc:	4642      	mov	r2, r8
 8007dce:	464b      	mov	r3, r9
 8007dd0:	1891      	adds	r1, r2, r2
 8007dd2:	60b9      	str	r1, [r7, #8]
 8007dd4:	415b      	adcs	r3, r3
 8007dd6:	60fb      	str	r3, [r7, #12]
 8007dd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ddc:	4641      	mov	r1, r8
 8007dde:	1851      	adds	r1, r2, r1
 8007de0:	6039      	str	r1, [r7, #0]
 8007de2:	4649      	mov	r1, r9
 8007de4:	414b      	adcs	r3, r1
 8007de6:	607b      	str	r3, [r7, #4]
 8007de8:	f04f 0200 	mov.w	r2, #0
 8007dec:	f04f 0300 	mov.w	r3, #0
 8007df0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007df4:	4659      	mov	r1, fp
 8007df6:	00cb      	lsls	r3, r1, #3
 8007df8:	4651      	mov	r1, sl
 8007dfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007dfe:	4651      	mov	r1, sl
 8007e00:	00ca      	lsls	r2, r1, #3
 8007e02:	4610      	mov	r0, r2
 8007e04:	4619      	mov	r1, r3
 8007e06:	4603      	mov	r3, r0
 8007e08:	4642      	mov	r2, r8
 8007e0a:	189b      	adds	r3, r3, r2
 8007e0c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e0e:	464b      	mov	r3, r9
 8007e10:	460a      	mov	r2, r1
 8007e12:	eb42 0303 	adc.w	r3, r2, r3
 8007e16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e22:	667a      	str	r2, [r7, #100]	@ 0x64
 8007e24:	f04f 0200 	mov.w	r2, #0
 8007e28:	f04f 0300 	mov.w	r3, #0
 8007e2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007e30:	4649      	mov	r1, r9
 8007e32:	008b      	lsls	r3, r1, #2
 8007e34:	4641      	mov	r1, r8
 8007e36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e3a:	4641      	mov	r1, r8
 8007e3c:	008a      	lsls	r2, r1, #2
 8007e3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007e42:	f7f8 ff29 	bl	8000c98 <__aeabi_uldivmod>
 8007e46:	4602      	mov	r2, r0
 8007e48:	460b      	mov	r3, r1
 8007e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8007e80 <UART_SetConfig+0x4e4>)
 8007e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8007e50:	095b      	lsrs	r3, r3, #5
 8007e52:	2164      	movs	r1, #100	@ 0x64
 8007e54:	fb01 f303 	mul.w	r3, r1, r3
 8007e58:	1ad3      	subs	r3, r2, r3
 8007e5a:	011b      	lsls	r3, r3, #4
 8007e5c:	3332      	adds	r3, #50	@ 0x32
 8007e5e:	4a08      	ldr	r2, [pc, #32]	@ (8007e80 <UART_SetConfig+0x4e4>)
 8007e60:	fba2 2303 	umull	r2, r3, r2, r3
 8007e64:	095b      	lsrs	r3, r3, #5
 8007e66:	f003 020f 	and.w	r2, r3, #15
 8007e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4422      	add	r2, r4
 8007e72:	609a      	str	r2, [r3, #8]
}
 8007e74:	bf00      	nop
 8007e76:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e80:	51eb851f 	.word	0x51eb851f

08007e84 <__cvt>:
 8007e84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e88:	ec57 6b10 	vmov	r6, r7, d0
 8007e8c:	2f00      	cmp	r7, #0
 8007e8e:	460c      	mov	r4, r1
 8007e90:	4619      	mov	r1, r3
 8007e92:	463b      	mov	r3, r7
 8007e94:	bfbb      	ittet	lt
 8007e96:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007e9a:	461f      	movlt	r7, r3
 8007e9c:	2300      	movge	r3, #0
 8007e9e:	232d      	movlt	r3, #45	@ 0x2d
 8007ea0:	700b      	strb	r3, [r1, #0]
 8007ea2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ea4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007ea8:	4691      	mov	r9, r2
 8007eaa:	f023 0820 	bic.w	r8, r3, #32
 8007eae:	bfbc      	itt	lt
 8007eb0:	4632      	movlt	r2, r6
 8007eb2:	4616      	movlt	r6, r2
 8007eb4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007eb8:	d005      	beq.n	8007ec6 <__cvt+0x42>
 8007eba:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007ebe:	d100      	bne.n	8007ec2 <__cvt+0x3e>
 8007ec0:	3401      	adds	r4, #1
 8007ec2:	2102      	movs	r1, #2
 8007ec4:	e000      	b.n	8007ec8 <__cvt+0x44>
 8007ec6:	2103      	movs	r1, #3
 8007ec8:	ab03      	add	r3, sp, #12
 8007eca:	9301      	str	r3, [sp, #4]
 8007ecc:	ab02      	add	r3, sp, #8
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	ec47 6b10 	vmov	d0, r6, r7
 8007ed4:	4653      	mov	r3, sl
 8007ed6:	4622      	mov	r2, r4
 8007ed8:	f001 f86e 	bl	8008fb8 <_dtoa_r>
 8007edc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007ee0:	4605      	mov	r5, r0
 8007ee2:	d119      	bne.n	8007f18 <__cvt+0x94>
 8007ee4:	f019 0f01 	tst.w	r9, #1
 8007ee8:	d00e      	beq.n	8007f08 <__cvt+0x84>
 8007eea:	eb00 0904 	add.w	r9, r0, r4
 8007eee:	2200      	movs	r2, #0
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	4639      	mov	r1, r7
 8007ef6:	f7f8 fdef 	bl	8000ad8 <__aeabi_dcmpeq>
 8007efa:	b108      	cbz	r0, 8007f00 <__cvt+0x7c>
 8007efc:	f8cd 900c 	str.w	r9, [sp, #12]
 8007f00:	2230      	movs	r2, #48	@ 0x30
 8007f02:	9b03      	ldr	r3, [sp, #12]
 8007f04:	454b      	cmp	r3, r9
 8007f06:	d31e      	bcc.n	8007f46 <__cvt+0xc2>
 8007f08:	9b03      	ldr	r3, [sp, #12]
 8007f0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f0c:	1b5b      	subs	r3, r3, r5
 8007f0e:	4628      	mov	r0, r5
 8007f10:	6013      	str	r3, [r2, #0]
 8007f12:	b004      	add	sp, #16
 8007f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f18:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007f1c:	eb00 0904 	add.w	r9, r0, r4
 8007f20:	d1e5      	bne.n	8007eee <__cvt+0x6a>
 8007f22:	7803      	ldrb	r3, [r0, #0]
 8007f24:	2b30      	cmp	r3, #48	@ 0x30
 8007f26:	d10a      	bne.n	8007f3e <__cvt+0xba>
 8007f28:	2200      	movs	r2, #0
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	4630      	mov	r0, r6
 8007f2e:	4639      	mov	r1, r7
 8007f30:	f7f8 fdd2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f34:	b918      	cbnz	r0, 8007f3e <__cvt+0xba>
 8007f36:	f1c4 0401 	rsb	r4, r4, #1
 8007f3a:	f8ca 4000 	str.w	r4, [sl]
 8007f3e:	f8da 3000 	ldr.w	r3, [sl]
 8007f42:	4499      	add	r9, r3
 8007f44:	e7d3      	b.n	8007eee <__cvt+0x6a>
 8007f46:	1c59      	adds	r1, r3, #1
 8007f48:	9103      	str	r1, [sp, #12]
 8007f4a:	701a      	strb	r2, [r3, #0]
 8007f4c:	e7d9      	b.n	8007f02 <__cvt+0x7e>

08007f4e <__exponent>:
 8007f4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f50:	2900      	cmp	r1, #0
 8007f52:	bfba      	itte	lt
 8007f54:	4249      	neglt	r1, r1
 8007f56:	232d      	movlt	r3, #45	@ 0x2d
 8007f58:	232b      	movge	r3, #43	@ 0x2b
 8007f5a:	2909      	cmp	r1, #9
 8007f5c:	7002      	strb	r2, [r0, #0]
 8007f5e:	7043      	strb	r3, [r0, #1]
 8007f60:	dd29      	ble.n	8007fb6 <__exponent+0x68>
 8007f62:	f10d 0307 	add.w	r3, sp, #7
 8007f66:	461d      	mov	r5, r3
 8007f68:	270a      	movs	r7, #10
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007f70:	fb07 1416 	mls	r4, r7, r6, r1
 8007f74:	3430      	adds	r4, #48	@ 0x30
 8007f76:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007f7a:	460c      	mov	r4, r1
 8007f7c:	2c63      	cmp	r4, #99	@ 0x63
 8007f7e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f82:	4631      	mov	r1, r6
 8007f84:	dcf1      	bgt.n	8007f6a <__exponent+0x1c>
 8007f86:	3130      	adds	r1, #48	@ 0x30
 8007f88:	1e94      	subs	r4, r2, #2
 8007f8a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007f8e:	1c41      	adds	r1, r0, #1
 8007f90:	4623      	mov	r3, r4
 8007f92:	42ab      	cmp	r3, r5
 8007f94:	d30a      	bcc.n	8007fac <__exponent+0x5e>
 8007f96:	f10d 0309 	add.w	r3, sp, #9
 8007f9a:	1a9b      	subs	r3, r3, r2
 8007f9c:	42ac      	cmp	r4, r5
 8007f9e:	bf88      	it	hi
 8007fa0:	2300      	movhi	r3, #0
 8007fa2:	3302      	adds	r3, #2
 8007fa4:	4403      	add	r3, r0
 8007fa6:	1a18      	subs	r0, r3, r0
 8007fa8:	b003      	add	sp, #12
 8007faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fac:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007fb0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007fb4:	e7ed      	b.n	8007f92 <__exponent+0x44>
 8007fb6:	2330      	movs	r3, #48	@ 0x30
 8007fb8:	3130      	adds	r1, #48	@ 0x30
 8007fba:	7083      	strb	r3, [r0, #2]
 8007fbc:	70c1      	strb	r1, [r0, #3]
 8007fbe:	1d03      	adds	r3, r0, #4
 8007fc0:	e7f1      	b.n	8007fa6 <__exponent+0x58>
	...

08007fc4 <_printf_float>:
 8007fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fc8:	b08d      	sub	sp, #52	@ 0x34
 8007fca:	460c      	mov	r4, r1
 8007fcc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007fd0:	4616      	mov	r6, r2
 8007fd2:	461f      	mov	r7, r3
 8007fd4:	4605      	mov	r5, r0
 8007fd6:	f000 fee9 	bl	8008dac <_localeconv_r>
 8007fda:	6803      	ldr	r3, [r0, #0]
 8007fdc:	9304      	str	r3, [sp, #16]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7f8 f94e 	bl	8000280 <strlen>
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fe8:	f8d8 3000 	ldr.w	r3, [r8]
 8007fec:	9005      	str	r0, [sp, #20]
 8007fee:	3307      	adds	r3, #7
 8007ff0:	f023 0307 	bic.w	r3, r3, #7
 8007ff4:	f103 0208 	add.w	r2, r3, #8
 8007ff8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007ffc:	f8d4 b000 	ldr.w	fp, [r4]
 8008000:	f8c8 2000 	str.w	r2, [r8]
 8008004:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008008:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800800c:	9307      	str	r3, [sp, #28]
 800800e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008012:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008016:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800801a:	4b9c      	ldr	r3, [pc, #624]	@ (800828c <_printf_float+0x2c8>)
 800801c:	f04f 32ff 	mov.w	r2, #4294967295
 8008020:	f7f8 fd8c 	bl	8000b3c <__aeabi_dcmpun>
 8008024:	bb70      	cbnz	r0, 8008084 <_printf_float+0xc0>
 8008026:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800802a:	4b98      	ldr	r3, [pc, #608]	@ (800828c <_printf_float+0x2c8>)
 800802c:	f04f 32ff 	mov.w	r2, #4294967295
 8008030:	f7f8 fd66 	bl	8000b00 <__aeabi_dcmple>
 8008034:	bb30      	cbnz	r0, 8008084 <_printf_float+0xc0>
 8008036:	2200      	movs	r2, #0
 8008038:	2300      	movs	r3, #0
 800803a:	4640      	mov	r0, r8
 800803c:	4649      	mov	r1, r9
 800803e:	f7f8 fd55 	bl	8000aec <__aeabi_dcmplt>
 8008042:	b110      	cbz	r0, 800804a <_printf_float+0x86>
 8008044:	232d      	movs	r3, #45	@ 0x2d
 8008046:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800804a:	4a91      	ldr	r2, [pc, #580]	@ (8008290 <_printf_float+0x2cc>)
 800804c:	4b91      	ldr	r3, [pc, #580]	@ (8008294 <_printf_float+0x2d0>)
 800804e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008052:	bf8c      	ite	hi
 8008054:	4690      	movhi	r8, r2
 8008056:	4698      	movls	r8, r3
 8008058:	2303      	movs	r3, #3
 800805a:	6123      	str	r3, [r4, #16]
 800805c:	f02b 0304 	bic.w	r3, fp, #4
 8008060:	6023      	str	r3, [r4, #0]
 8008062:	f04f 0900 	mov.w	r9, #0
 8008066:	9700      	str	r7, [sp, #0]
 8008068:	4633      	mov	r3, r6
 800806a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800806c:	4621      	mov	r1, r4
 800806e:	4628      	mov	r0, r5
 8008070:	f000 f9d2 	bl	8008418 <_printf_common>
 8008074:	3001      	adds	r0, #1
 8008076:	f040 808d 	bne.w	8008194 <_printf_float+0x1d0>
 800807a:	f04f 30ff 	mov.w	r0, #4294967295
 800807e:	b00d      	add	sp, #52	@ 0x34
 8008080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008084:	4642      	mov	r2, r8
 8008086:	464b      	mov	r3, r9
 8008088:	4640      	mov	r0, r8
 800808a:	4649      	mov	r1, r9
 800808c:	f7f8 fd56 	bl	8000b3c <__aeabi_dcmpun>
 8008090:	b140      	cbz	r0, 80080a4 <_printf_float+0xe0>
 8008092:	464b      	mov	r3, r9
 8008094:	2b00      	cmp	r3, #0
 8008096:	bfbc      	itt	lt
 8008098:	232d      	movlt	r3, #45	@ 0x2d
 800809a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800809e:	4a7e      	ldr	r2, [pc, #504]	@ (8008298 <_printf_float+0x2d4>)
 80080a0:	4b7e      	ldr	r3, [pc, #504]	@ (800829c <_printf_float+0x2d8>)
 80080a2:	e7d4      	b.n	800804e <_printf_float+0x8a>
 80080a4:	6863      	ldr	r3, [r4, #4]
 80080a6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80080aa:	9206      	str	r2, [sp, #24]
 80080ac:	1c5a      	adds	r2, r3, #1
 80080ae:	d13b      	bne.n	8008128 <_printf_float+0x164>
 80080b0:	2306      	movs	r3, #6
 80080b2:	6063      	str	r3, [r4, #4]
 80080b4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80080b8:	2300      	movs	r3, #0
 80080ba:	6022      	str	r2, [r4, #0]
 80080bc:	9303      	str	r3, [sp, #12]
 80080be:	ab0a      	add	r3, sp, #40	@ 0x28
 80080c0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80080c4:	ab09      	add	r3, sp, #36	@ 0x24
 80080c6:	9300      	str	r3, [sp, #0]
 80080c8:	6861      	ldr	r1, [r4, #4]
 80080ca:	ec49 8b10 	vmov	d0, r8, r9
 80080ce:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80080d2:	4628      	mov	r0, r5
 80080d4:	f7ff fed6 	bl	8007e84 <__cvt>
 80080d8:	9b06      	ldr	r3, [sp, #24]
 80080da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80080dc:	2b47      	cmp	r3, #71	@ 0x47
 80080de:	4680      	mov	r8, r0
 80080e0:	d129      	bne.n	8008136 <_printf_float+0x172>
 80080e2:	1cc8      	adds	r0, r1, #3
 80080e4:	db02      	blt.n	80080ec <_printf_float+0x128>
 80080e6:	6863      	ldr	r3, [r4, #4]
 80080e8:	4299      	cmp	r1, r3
 80080ea:	dd41      	ble.n	8008170 <_printf_float+0x1ac>
 80080ec:	f1aa 0a02 	sub.w	sl, sl, #2
 80080f0:	fa5f fa8a 	uxtb.w	sl, sl
 80080f4:	3901      	subs	r1, #1
 80080f6:	4652      	mov	r2, sl
 80080f8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80080fc:	9109      	str	r1, [sp, #36]	@ 0x24
 80080fe:	f7ff ff26 	bl	8007f4e <__exponent>
 8008102:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008104:	1813      	adds	r3, r2, r0
 8008106:	2a01      	cmp	r2, #1
 8008108:	4681      	mov	r9, r0
 800810a:	6123      	str	r3, [r4, #16]
 800810c:	dc02      	bgt.n	8008114 <_printf_float+0x150>
 800810e:	6822      	ldr	r2, [r4, #0]
 8008110:	07d2      	lsls	r2, r2, #31
 8008112:	d501      	bpl.n	8008118 <_printf_float+0x154>
 8008114:	3301      	adds	r3, #1
 8008116:	6123      	str	r3, [r4, #16]
 8008118:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800811c:	2b00      	cmp	r3, #0
 800811e:	d0a2      	beq.n	8008066 <_printf_float+0xa2>
 8008120:	232d      	movs	r3, #45	@ 0x2d
 8008122:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008126:	e79e      	b.n	8008066 <_printf_float+0xa2>
 8008128:	9a06      	ldr	r2, [sp, #24]
 800812a:	2a47      	cmp	r2, #71	@ 0x47
 800812c:	d1c2      	bne.n	80080b4 <_printf_float+0xf0>
 800812e:	2b00      	cmp	r3, #0
 8008130:	d1c0      	bne.n	80080b4 <_printf_float+0xf0>
 8008132:	2301      	movs	r3, #1
 8008134:	e7bd      	b.n	80080b2 <_printf_float+0xee>
 8008136:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800813a:	d9db      	bls.n	80080f4 <_printf_float+0x130>
 800813c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008140:	d118      	bne.n	8008174 <_printf_float+0x1b0>
 8008142:	2900      	cmp	r1, #0
 8008144:	6863      	ldr	r3, [r4, #4]
 8008146:	dd0b      	ble.n	8008160 <_printf_float+0x19c>
 8008148:	6121      	str	r1, [r4, #16]
 800814a:	b913      	cbnz	r3, 8008152 <_printf_float+0x18e>
 800814c:	6822      	ldr	r2, [r4, #0]
 800814e:	07d0      	lsls	r0, r2, #31
 8008150:	d502      	bpl.n	8008158 <_printf_float+0x194>
 8008152:	3301      	adds	r3, #1
 8008154:	440b      	add	r3, r1
 8008156:	6123      	str	r3, [r4, #16]
 8008158:	65a1      	str	r1, [r4, #88]	@ 0x58
 800815a:	f04f 0900 	mov.w	r9, #0
 800815e:	e7db      	b.n	8008118 <_printf_float+0x154>
 8008160:	b913      	cbnz	r3, 8008168 <_printf_float+0x1a4>
 8008162:	6822      	ldr	r2, [r4, #0]
 8008164:	07d2      	lsls	r2, r2, #31
 8008166:	d501      	bpl.n	800816c <_printf_float+0x1a8>
 8008168:	3302      	adds	r3, #2
 800816a:	e7f4      	b.n	8008156 <_printf_float+0x192>
 800816c:	2301      	movs	r3, #1
 800816e:	e7f2      	b.n	8008156 <_printf_float+0x192>
 8008170:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008174:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008176:	4299      	cmp	r1, r3
 8008178:	db05      	blt.n	8008186 <_printf_float+0x1c2>
 800817a:	6823      	ldr	r3, [r4, #0]
 800817c:	6121      	str	r1, [r4, #16]
 800817e:	07d8      	lsls	r0, r3, #31
 8008180:	d5ea      	bpl.n	8008158 <_printf_float+0x194>
 8008182:	1c4b      	adds	r3, r1, #1
 8008184:	e7e7      	b.n	8008156 <_printf_float+0x192>
 8008186:	2900      	cmp	r1, #0
 8008188:	bfd4      	ite	le
 800818a:	f1c1 0202 	rsble	r2, r1, #2
 800818e:	2201      	movgt	r2, #1
 8008190:	4413      	add	r3, r2
 8008192:	e7e0      	b.n	8008156 <_printf_float+0x192>
 8008194:	6823      	ldr	r3, [r4, #0]
 8008196:	055a      	lsls	r2, r3, #21
 8008198:	d407      	bmi.n	80081aa <_printf_float+0x1e6>
 800819a:	6923      	ldr	r3, [r4, #16]
 800819c:	4642      	mov	r2, r8
 800819e:	4631      	mov	r1, r6
 80081a0:	4628      	mov	r0, r5
 80081a2:	47b8      	blx	r7
 80081a4:	3001      	adds	r0, #1
 80081a6:	d12b      	bne.n	8008200 <_printf_float+0x23c>
 80081a8:	e767      	b.n	800807a <_printf_float+0xb6>
 80081aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80081ae:	f240 80dd 	bls.w	800836c <_printf_float+0x3a8>
 80081b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80081b6:	2200      	movs	r2, #0
 80081b8:	2300      	movs	r3, #0
 80081ba:	f7f8 fc8d 	bl	8000ad8 <__aeabi_dcmpeq>
 80081be:	2800      	cmp	r0, #0
 80081c0:	d033      	beq.n	800822a <_printf_float+0x266>
 80081c2:	4a37      	ldr	r2, [pc, #220]	@ (80082a0 <_printf_float+0x2dc>)
 80081c4:	2301      	movs	r3, #1
 80081c6:	4631      	mov	r1, r6
 80081c8:	4628      	mov	r0, r5
 80081ca:	47b8      	blx	r7
 80081cc:	3001      	adds	r0, #1
 80081ce:	f43f af54 	beq.w	800807a <_printf_float+0xb6>
 80081d2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80081d6:	4543      	cmp	r3, r8
 80081d8:	db02      	blt.n	80081e0 <_printf_float+0x21c>
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	07d8      	lsls	r0, r3, #31
 80081de:	d50f      	bpl.n	8008200 <_printf_float+0x23c>
 80081e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081e4:	4631      	mov	r1, r6
 80081e6:	4628      	mov	r0, r5
 80081e8:	47b8      	blx	r7
 80081ea:	3001      	adds	r0, #1
 80081ec:	f43f af45 	beq.w	800807a <_printf_float+0xb6>
 80081f0:	f04f 0900 	mov.w	r9, #0
 80081f4:	f108 38ff 	add.w	r8, r8, #4294967295
 80081f8:	f104 0a1a 	add.w	sl, r4, #26
 80081fc:	45c8      	cmp	r8, r9
 80081fe:	dc09      	bgt.n	8008214 <_printf_float+0x250>
 8008200:	6823      	ldr	r3, [r4, #0]
 8008202:	079b      	lsls	r3, r3, #30
 8008204:	f100 8103 	bmi.w	800840e <_printf_float+0x44a>
 8008208:	68e0      	ldr	r0, [r4, #12]
 800820a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800820c:	4298      	cmp	r0, r3
 800820e:	bfb8      	it	lt
 8008210:	4618      	movlt	r0, r3
 8008212:	e734      	b.n	800807e <_printf_float+0xba>
 8008214:	2301      	movs	r3, #1
 8008216:	4652      	mov	r2, sl
 8008218:	4631      	mov	r1, r6
 800821a:	4628      	mov	r0, r5
 800821c:	47b8      	blx	r7
 800821e:	3001      	adds	r0, #1
 8008220:	f43f af2b 	beq.w	800807a <_printf_float+0xb6>
 8008224:	f109 0901 	add.w	r9, r9, #1
 8008228:	e7e8      	b.n	80081fc <_printf_float+0x238>
 800822a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800822c:	2b00      	cmp	r3, #0
 800822e:	dc39      	bgt.n	80082a4 <_printf_float+0x2e0>
 8008230:	4a1b      	ldr	r2, [pc, #108]	@ (80082a0 <_printf_float+0x2dc>)
 8008232:	2301      	movs	r3, #1
 8008234:	4631      	mov	r1, r6
 8008236:	4628      	mov	r0, r5
 8008238:	47b8      	blx	r7
 800823a:	3001      	adds	r0, #1
 800823c:	f43f af1d 	beq.w	800807a <_printf_float+0xb6>
 8008240:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008244:	ea59 0303 	orrs.w	r3, r9, r3
 8008248:	d102      	bne.n	8008250 <_printf_float+0x28c>
 800824a:	6823      	ldr	r3, [r4, #0]
 800824c:	07d9      	lsls	r1, r3, #31
 800824e:	d5d7      	bpl.n	8008200 <_printf_float+0x23c>
 8008250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008254:	4631      	mov	r1, r6
 8008256:	4628      	mov	r0, r5
 8008258:	47b8      	blx	r7
 800825a:	3001      	adds	r0, #1
 800825c:	f43f af0d 	beq.w	800807a <_printf_float+0xb6>
 8008260:	f04f 0a00 	mov.w	sl, #0
 8008264:	f104 0b1a 	add.w	fp, r4, #26
 8008268:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800826a:	425b      	negs	r3, r3
 800826c:	4553      	cmp	r3, sl
 800826e:	dc01      	bgt.n	8008274 <_printf_float+0x2b0>
 8008270:	464b      	mov	r3, r9
 8008272:	e793      	b.n	800819c <_printf_float+0x1d8>
 8008274:	2301      	movs	r3, #1
 8008276:	465a      	mov	r2, fp
 8008278:	4631      	mov	r1, r6
 800827a:	4628      	mov	r0, r5
 800827c:	47b8      	blx	r7
 800827e:	3001      	adds	r0, #1
 8008280:	f43f aefb 	beq.w	800807a <_printf_float+0xb6>
 8008284:	f10a 0a01 	add.w	sl, sl, #1
 8008288:	e7ee      	b.n	8008268 <_printf_float+0x2a4>
 800828a:	bf00      	nop
 800828c:	7fefffff 	.word	0x7fefffff
 8008290:	0800c81c 	.word	0x0800c81c
 8008294:	0800c818 	.word	0x0800c818
 8008298:	0800c824 	.word	0x0800c824
 800829c:	0800c820 	.word	0x0800c820
 80082a0:	0800c828 	.word	0x0800c828
 80082a4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80082a6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80082aa:	4553      	cmp	r3, sl
 80082ac:	bfa8      	it	ge
 80082ae:	4653      	movge	r3, sl
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	4699      	mov	r9, r3
 80082b4:	dc36      	bgt.n	8008324 <_printf_float+0x360>
 80082b6:	f04f 0b00 	mov.w	fp, #0
 80082ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082be:	f104 021a 	add.w	r2, r4, #26
 80082c2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80082c4:	9306      	str	r3, [sp, #24]
 80082c6:	eba3 0309 	sub.w	r3, r3, r9
 80082ca:	455b      	cmp	r3, fp
 80082cc:	dc31      	bgt.n	8008332 <_printf_float+0x36e>
 80082ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082d0:	459a      	cmp	sl, r3
 80082d2:	dc3a      	bgt.n	800834a <_printf_float+0x386>
 80082d4:	6823      	ldr	r3, [r4, #0]
 80082d6:	07da      	lsls	r2, r3, #31
 80082d8:	d437      	bmi.n	800834a <_printf_float+0x386>
 80082da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082dc:	ebaa 0903 	sub.w	r9, sl, r3
 80082e0:	9b06      	ldr	r3, [sp, #24]
 80082e2:	ebaa 0303 	sub.w	r3, sl, r3
 80082e6:	4599      	cmp	r9, r3
 80082e8:	bfa8      	it	ge
 80082ea:	4699      	movge	r9, r3
 80082ec:	f1b9 0f00 	cmp.w	r9, #0
 80082f0:	dc33      	bgt.n	800835a <_printf_float+0x396>
 80082f2:	f04f 0800 	mov.w	r8, #0
 80082f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082fa:	f104 0b1a 	add.w	fp, r4, #26
 80082fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008300:	ebaa 0303 	sub.w	r3, sl, r3
 8008304:	eba3 0309 	sub.w	r3, r3, r9
 8008308:	4543      	cmp	r3, r8
 800830a:	f77f af79 	ble.w	8008200 <_printf_float+0x23c>
 800830e:	2301      	movs	r3, #1
 8008310:	465a      	mov	r2, fp
 8008312:	4631      	mov	r1, r6
 8008314:	4628      	mov	r0, r5
 8008316:	47b8      	blx	r7
 8008318:	3001      	adds	r0, #1
 800831a:	f43f aeae 	beq.w	800807a <_printf_float+0xb6>
 800831e:	f108 0801 	add.w	r8, r8, #1
 8008322:	e7ec      	b.n	80082fe <_printf_float+0x33a>
 8008324:	4642      	mov	r2, r8
 8008326:	4631      	mov	r1, r6
 8008328:	4628      	mov	r0, r5
 800832a:	47b8      	blx	r7
 800832c:	3001      	adds	r0, #1
 800832e:	d1c2      	bne.n	80082b6 <_printf_float+0x2f2>
 8008330:	e6a3      	b.n	800807a <_printf_float+0xb6>
 8008332:	2301      	movs	r3, #1
 8008334:	4631      	mov	r1, r6
 8008336:	4628      	mov	r0, r5
 8008338:	9206      	str	r2, [sp, #24]
 800833a:	47b8      	blx	r7
 800833c:	3001      	adds	r0, #1
 800833e:	f43f ae9c 	beq.w	800807a <_printf_float+0xb6>
 8008342:	9a06      	ldr	r2, [sp, #24]
 8008344:	f10b 0b01 	add.w	fp, fp, #1
 8008348:	e7bb      	b.n	80082c2 <_printf_float+0x2fe>
 800834a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800834e:	4631      	mov	r1, r6
 8008350:	4628      	mov	r0, r5
 8008352:	47b8      	blx	r7
 8008354:	3001      	adds	r0, #1
 8008356:	d1c0      	bne.n	80082da <_printf_float+0x316>
 8008358:	e68f      	b.n	800807a <_printf_float+0xb6>
 800835a:	9a06      	ldr	r2, [sp, #24]
 800835c:	464b      	mov	r3, r9
 800835e:	4442      	add	r2, r8
 8008360:	4631      	mov	r1, r6
 8008362:	4628      	mov	r0, r5
 8008364:	47b8      	blx	r7
 8008366:	3001      	adds	r0, #1
 8008368:	d1c3      	bne.n	80082f2 <_printf_float+0x32e>
 800836a:	e686      	b.n	800807a <_printf_float+0xb6>
 800836c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008370:	f1ba 0f01 	cmp.w	sl, #1
 8008374:	dc01      	bgt.n	800837a <_printf_float+0x3b6>
 8008376:	07db      	lsls	r3, r3, #31
 8008378:	d536      	bpl.n	80083e8 <_printf_float+0x424>
 800837a:	2301      	movs	r3, #1
 800837c:	4642      	mov	r2, r8
 800837e:	4631      	mov	r1, r6
 8008380:	4628      	mov	r0, r5
 8008382:	47b8      	blx	r7
 8008384:	3001      	adds	r0, #1
 8008386:	f43f ae78 	beq.w	800807a <_printf_float+0xb6>
 800838a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800838e:	4631      	mov	r1, r6
 8008390:	4628      	mov	r0, r5
 8008392:	47b8      	blx	r7
 8008394:	3001      	adds	r0, #1
 8008396:	f43f ae70 	beq.w	800807a <_printf_float+0xb6>
 800839a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800839e:	2200      	movs	r2, #0
 80083a0:	2300      	movs	r3, #0
 80083a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083a6:	f7f8 fb97 	bl	8000ad8 <__aeabi_dcmpeq>
 80083aa:	b9c0      	cbnz	r0, 80083de <_printf_float+0x41a>
 80083ac:	4653      	mov	r3, sl
 80083ae:	f108 0201 	add.w	r2, r8, #1
 80083b2:	4631      	mov	r1, r6
 80083b4:	4628      	mov	r0, r5
 80083b6:	47b8      	blx	r7
 80083b8:	3001      	adds	r0, #1
 80083ba:	d10c      	bne.n	80083d6 <_printf_float+0x412>
 80083bc:	e65d      	b.n	800807a <_printf_float+0xb6>
 80083be:	2301      	movs	r3, #1
 80083c0:	465a      	mov	r2, fp
 80083c2:	4631      	mov	r1, r6
 80083c4:	4628      	mov	r0, r5
 80083c6:	47b8      	blx	r7
 80083c8:	3001      	adds	r0, #1
 80083ca:	f43f ae56 	beq.w	800807a <_printf_float+0xb6>
 80083ce:	f108 0801 	add.w	r8, r8, #1
 80083d2:	45d0      	cmp	r8, sl
 80083d4:	dbf3      	blt.n	80083be <_printf_float+0x3fa>
 80083d6:	464b      	mov	r3, r9
 80083d8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80083dc:	e6df      	b.n	800819e <_printf_float+0x1da>
 80083de:	f04f 0800 	mov.w	r8, #0
 80083e2:	f104 0b1a 	add.w	fp, r4, #26
 80083e6:	e7f4      	b.n	80083d2 <_printf_float+0x40e>
 80083e8:	2301      	movs	r3, #1
 80083ea:	4642      	mov	r2, r8
 80083ec:	e7e1      	b.n	80083b2 <_printf_float+0x3ee>
 80083ee:	2301      	movs	r3, #1
 80083f0:	464a      	mov	r2, r9
 80083f2:	4631      	mov	r1, r6
 80083f4:	4628      	mov	r0, r5
 80083f6:	47b8      	blx	r7
 80083f8:	3001      	adds	r0, #1
 80083fa:	f43f ae3e 	beq.w	800807a <_printf_float+0xb6>
 80083fe:	f108 0801 	add.w	r8, r8, #1
 8008402:	68e3      	ldr	r3, [r4, #12]
 8008404:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008406:	1a5b      	subs	r3, r3, r1
 8008408:	4543      	cmp	r3, r8
 800840a:	dcf0      	bgt.n	80083ee <_printf_float+0x42a>
 800840c:	e6fc      	b.n	8008208 <_printf_float+0x244>
 800840e:	f04f 0800 	mov.w	r8, #0
 8008412:	f104 0919 	add.w	r9, r4, #25
 8008416:	e7f4      	b.n	8008402 <_printf_float+0x43e>

08008418 <_printf_common>:
 8008418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800841c:	4616      	mov	r6, r2
 800841e:	4698      	mov	r8, r3
 8008420:	688a      	ldr	r2, [r1, #8]
 8008422:	690b      	ldr	r3, [r1, #16]
 8008424:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008428:	4293      	cmp	r3, r2
 800842a:	bfb8      	it	lt
 800842c:	4613      	movlt	r3, r2
 800842e:	6033      	str	r3, [r6, #0]
 8008430:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008434:	4607      	mov	r7, r0
 8008436:	460c      	mov	r4, r1
 8008438:	b10a      	cbz	r2, 800843e <_printf_common+0x26>
 800843a:	3301      	adds	r3, #1
 800843c:	6033      	str	r3, [r6, #0]
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	0699      	lsls	r1, r3, #26
 8008442:	bf42      	ittt	mi
 8008444:	6833      	ldrmi	r3, [r6, #0]
 8008446:	3302      	addmi	r3, #2
 8008448:	6033      	strmi	r3, [r6, #0]
 800844a:	6825      	ldr	r5, [r4, #0]
 800844c:	f015 0506 	ands.w	r5, r5, #6
 8008450:	d106      	bne.n	8008460 <_printf_common+0x48>
 8008452:	f104 0a19 	add.w	sl, r4, #25
 8008456:	68e3      	ldr	r3, [r4, #12]
 8008458:	6832      	ldr	r2, [r6, #0]
 800845a:	1a9b      	subs	r3, r3, r2
 800845c:	42ab      	cmp	r3, r5
 800845e:	dc26      	bgt.n	80084ae <_printf_common+0x96>
 8008460:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008464:	6822      	ldr	r2, [r4, #0]
 8008466:	3b00      	subs	r3, #0
 8008468:	bf18      	it	ne
 800846a:	2301      	movne	r3, #1
 800846c:	0692      	lsls	r2, r2, #26
 800846e:	d42b      	bmi.n	80084c8 <_printf_common+0xb0>
 8008470:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008474:	4641      	mov	r1, r8
 8008476:	4638      	mov	r0, r7
 8008478:	47c8      	blx	r9
 800847a:	3001      	adds	r0, #1
 800847c:	d01e      	beq.n	80084bc <_printf_common+0xa4>
 800847e:	6823      	ldr	r3, [r4, #0]
 8008480:	6922      	ldr	r2, [r4, #16]
 8008482:	f003 0306 	and.w	r3, r3, #6
 8008486:	2b04      	cmp	r3, #4
 8008488:	bf02      	ittt	eq
 800848a:	68e5      	ldreq	r5, [r4, #12]
 800848c:	6833      	ldreq	r3, [r6, #0]
 800848e:	1aed      	subeq	r5, r5, r3
 8008490:	68a3      	ldr	r3, [r4, #8]
 8008492:	bf0c      	ite	eq
 8008494:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008498:	2500      	movne	r5, #0
 800849a:	4293      	cmp	r3, r2
 800849c:	bfc4      	itt	gt
 800849e:	1a9b      	subgt	r3, r3, r2
 80084a0:	18ed      	addgt	r5, r5, r3
 80084a2:	2600      	movs	r6, #0
 80084a4:	341a      	adds	r4, #26
 80084a6:	42b5      	cmp	r5, r6
 80084a8:	d11a      	bne.n	80084e0 <_printf_common+0xc8>
 80084aa:	2000      	movs	r0, #0
 80084ac:	e008      	b.n	80084c0 <_printf_common+0xa8>
 80084ae:	2301      	movs	r3, #1
 80084b0:	4652      	mov	r2, sl
 80084b2:	4641      	mov	r1, r8
 80084b4:	4638      	mov	r0, r7
 80084b6:	47c8      	blx	r9
 80084b8:	3001      	adds	r0, #1
 80084ba:	d103      	bne.n	80084c4 <_printf_common+0xac>
 80084bc:	f04f 30ff 	mov.w	r0, #4294967295
 80084c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084c4:	3501      	adds	r5, #1
 80084c6:	e7c6      	b.n	8008456 <_printf_common+0x3e>
 80084c8:	18e1      	adds	r1, r4, r3
 80084ca:	1c5a      	adds	r2, r3, #1
 80084cc:	2030      	movs	r0, #48	@ 0x30
 80084ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80084d2:	4422      	add	r2, r4
 80084d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80084d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80084dc:	3302      	adds	r3, #2
 80084de:	e7c7      	b.n	8008470 <_printf_common+0x58>
 80084e0:	2301      	movs	r3, #1
 80084e2:	4622      	mov	r2, r4
 80084e4:	4641      	mov	r1, r8
 80084e6:	4638      	mov	r0, r7
 80084e8:	47c8      	blx	r9
 80084ea:	3001      	adds	r0, #1
 80084ec:	d0e6      	beq.n	80084bc <_printf_common+0xa4>
 80084ee:	3601      	adds	r6, #1
 80084f0:	e7d9      	b.n	80084a6 <_printf_common+0x8e>
	...

080084f4 <_printf_i>:
 80084f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084f8:	7e0f      	ldrb	r7, [r1, #24]
 80084fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80084fc:	2f78      	cmp	r7, #120	@ 0x78
 80084fe:	4691      	mov	r9, r2
 8008500:	4680      	mov	r8, r0
 8008502:	460c      	mov	r4, r1
 8008504:	469a      	mov	sl, r3
 8008506:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800850a:	d807      	bhi.n	800851c <_printf_i+0x28>
 800850c:	2f62      	cmp	r7, #98	@ 0x62
 800850e:	d80a      	bhi.n	8008526 <_printf_i+0x32>
 8008510:	2f00      	cmp	r7, #0
 8008512:	f000 80d1 	beq.w	80086b8 <_printf_i+0x1c4>
 8008516:	2f58      	cmp	r7, #88	@ 0x58
 8008518:	f000 80b8 	beq.w	800868c <_printf_i+0x198>
 800851c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008520:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008524:	e03a      	b.n	800859c <_printf_i+0xa8>
 8008526:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800852a:	2b15      	cmp	r3, #21
 800852c:	d8f6      	bhi.n	800851c <_printf_i+0x28>
 800852e:	a101      	add	r1, pc, #4	@ (adr r1, 8008534 <_printf_i+0x40>)
 8008530:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008534:	0800858d 	.word	0x0800858d
 8008538:	080085a1 	.word	0x080085a1
 800853c:	0800851d 	.word	0x0800851d
 8008540:	0800851d 	.word	0x0800851d
 8008544:	0800851d 	.word	0x0800851d
 8008548:	0800851d 	.word	0x0800851d
 800854c:	080085a1 	.word	0x080085a1
 8008550:	0800851d 	.word	0x0800851d
 8008554:	0800851d 	.word	0x0800851d
 8008558:	0800851d 	.word	0x0800851d
 800855c:	0800851d 	.word	0x0800851d
 8008560:	0800869f 	.word	0x0800869f
 8008564:	080085cb 	.word	0x080085cb
 8008568:	08008659 	.word	0x08008659
 800856c:	0800851d 	.word	0x0800851d
 8008570:	0800851d 	.word	0x0800851d
 8008574:	080086c1 	.word	0x080086c1
 8008578:	0800851d 	.word	0x0800851d
 800857c:	080085cb 	.word	0x080085cb
 8008580:	0800851d 	.word	0x0800851d
 8008584:	0800851d 	.word	0x0800851d
 8008588:	08008661 	.word	0x08008661
 800858c:	6833      	ldr	r3, [r6, #0]
 800858e:	1d1a      	adds	r2, r3, #4
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	6032      	str	r2, [r6, #0]
 8008594:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008598:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800859c:	2301      	movs	r3, #1
 800859e:	e09c      	b.n	80086da <_printf_i+0x1e6>
 80085a0:	6833      	ldr	r3, [r6, #0]
 80085a2:	6820      	ldr	r0, [r4, #0]
 80085a4:	1d19      	adds	r1, r3, #4
 80085a6:	6031      	str	r1, [r6, #0]
 80085a8:	0606      	lsls	r6, r0, #24
 80085aa:	d501      	bpl.n	80085b0 <_printf_i+0xbc>
 80085ac:	681d      	ldr	r5, [r3, #0]
 80085ae:	e003      	b.n	80085b8 <_printf_i+0xc4>
 80085b0:	0645      	lsls	r5, r0, #25
 80085b2:	d5fb      	bpl.n	80085ac <_printf_i+0xb8>
 80085b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80085b8:	2d00      	cmp	r5, #0
 80085ba:	da03      	bge.n	80085c4 <_printf_i+0xd0>
 80085bc:	232d      	movs	r3, #45	@ 0x2d
 80085be:	426d      	negs	r5, r5
 80085c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80085c4:	4858      	ldr	r0, [pc, #352]	@ (8008728 <_printf_i+0x234>)
 80085c6:	230a      	movs	r3, #10
 80085c8:	e011      	b.n	80085ee <_printf_i+0xfa>
 80085ca:	6821      	ldr	r1, [r4, #0]
 80085cc:	6833      	ldr	r3, [r6, #0]
 80085ce:	0608      	lsls	r0, r1, #24
 80085d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80085d4:	d402      	bmi.n	80085dc <_printf_i+0xe8>
 80085d6:	0649      	lsls	r1, r1, #25
 80085d8:	bf48      	it	mi
 80085da:	b2ad      	uxthmi	r5, r5
 80085dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80085de:	4852      	ldr	r0, [pc, #328]	@ (8008728 <_printf_i+0x234>)
 80085e0:	6033      	str	r3, [r6, #0]
 80085e2:	bf14      	ite	ne
 80085e4:	230a      	movne	r3, #10
 80085e6:	2308      	moveq	r3, #8
 80085e8:	2100      	movs	r1, #0
 80085ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80085ee:	6866      	ldr	r6, [r4, #4]
 80085f0:	60a6      	str	r6, [r4, #8]
 80085f2:	2e00      	cmp	r6, #0
 80085f4:	db05      	blt.n	8008602 <_printf_i+0x10e>
 80085f6:	6821      	ldr	r1, [r4, #0]
 80085f8:	432e      	orrs	r6, r5
 80085fa:	f021 0104 	bic.w	r1, r1, #4
 80085fe:	6021      	str	r1, [r4, #0]
 8008600:	d04b      	beq.n	800869a <_printf_i+0x1a6>
 8008602:	4616      	mov	r6, r2
 8008604:	fbb5 f1f3 	udiv	r1, r5, r3
 8008608:	fb03 5711 	mls	r7, r3, r1, r5
 800860c:	5dc7      	ldrb	r7, [r0, r7]
 800860e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008612:	462f      	mov	r7, r5
 8008614:	42bb      	cmp	r3, r7
 8008616:	460d      	mov	r5, r1
 8008618:	d9f4      	bls.n	8008604 <_printf_i+0x110>
 800861a:	2b08      	cmp	r3, #8
 800861c:	d10b      	bne.n	8008636 <_printf_i+0x142>
 800861e:	6823      	ldr	r3, [r4, #0]
 8008620:	07df      	lsls	r7, r3, #31
 8008622:	d508      	bpl.n	8008636 <_printf_i+0x142>
 8008624:	6923      	ldr	r3, [r4, #16]
 8008626:	6861      	ldr	r1, [r4, #4]
 8008628:	4299      	cmp	r1, r3
 800862a:	bfde      	ittt	le
 800862c:	2330      	movle	r3, #48	@ 0x30
 800862e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008632:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008636:	1b92      	subs	r2, r2, r6
 8008638:	6122      	str	r2, [r4, #16]
 800863a:	f8cd a000 	str.w	sl, [sp]
 800863e:	464b      	mov	r3, r9
 8008640:	aa03      	add	r2, sp, #12
 8008642:	4621      	mov	r1, r4
 8008644:	4640      	mov	r0, r8
 8008646:	f7ff fee7 	bl	8008418 <_printf_common>
 800864a:	3001      	adds	r0, #1
 800864c:	d14a      	bne.n	80086e4 <_printf_i+0x1f0>
 800864e:	f04f 30ff 	mov.w	r0, #4294967295
 8008652:	b004      	add	sp, #16
 8008654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008658:	6823      	ldr	r3, [r4, #0]
 800865a:	f043 0320 	orr.w	r3, r3, #32
 800865e:	6023      	str	r3, [r4, #0]
 8008660:	4832      	ldr	r0, [pc, #200]	@ (800872c <_printf_i+0x238>)
 8008662:	2778      	movs	r7, #120	@ 0x78
 8008664:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008668:	6823      	ldr	r3, [r4, #0]
 800866a:	6831      	ldr	r1, [r6, #0]
 800866c:	061f      	lsls	r7, r3, #24
 800866e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008672:	d402      	bmi.n	800867a <_printf_i+0x186>
 8008674:	065f      	lsls	r7, r3, #25
 8008676:	bf48      	it	mi
 8008678:	b2ad      	uxthmi	r5, r5
 800867a:	6031      	str	r1, [r6, #0]
 800867c:	07d9      	lsls	r1, r3, #31
 800867e:	bf44      	itt	mi
 8008680:	f043 0320 	orrmi.w	r3, r3, #32
 8008684:	6023      	strmi	r3, [r4, #0]
 8008686:	b11d      	cbz	r5, 8008690 <_printf_i+0x19c>
 8008688:	2310      	movs	r3, #16
 800868a:	e7ad      	b.n	80085e8 <_printf_i+0xf4>
 800868c:	4826      	ldr	r0, [pc, #152]	@ (8008728 <_printf_i+0x234>)
 800868e:	e7e9      	b.n	8008664 <_printf_i+0x170>
 8008690:	6823      	ldr	r3, [r4, #0]
 8008692:	f023 0320 	bic.w	r3, r3, #32
 8008696:	6023      	str	r3, [r4, #0]
 8008698:	e7f6      	b.n	8008688 <_printf_i+0x194>
 800869a:	4616      	mov	r6, r2
 800869c:	e7bd      	b.n	800861a <_printf_i+0x126>
 800869e:	6833      	ldr	r3, [r6, #0]
 80086a0:	6825      	ldr	r5, [r4, #0]
 80086a2:	6961      	ldr	r1, [r4, #20]
 80086a4:	1d18      	adds	r0, r3, #4
 80086a6:	6030      	str	r0, [r6, #0]
 80086a8:	062e      	lsls	r6, r5, #24
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	d501      	bpl.n	80086b2 <_printf_i+0x1be>
 80086ae:	6019      	str	r1, [r3, #0]
 80086b0:	e002      	b.n	80086b8 <_printf_i+0x1c4>
 80086b2:	0668      	lsls	r0, r5, #25
 80086b4:	d5fb      	bpl.n	80086ae <_printf_i+0x1ba>
 80086b6:	8019      	strh	r1, [r3, #0]
 80086b8:	2300      	movs	r3, #0
 80086ba:	6123      	str	r3, [r4, #16]
 80086bc:	4616      	mov	r6, r2
 80086be:	e7bc      	b.n	800863a <_printf_i+0x146>
 80086c0:	6833      	ldr	r3, [r6, #0]
 80086c2:	1d1a      	adds	r2, r3, #4
 80086c4:	6032      	str	r2, [r6, #0]
 80086c6:	681e      	ldr	r6, [r3, #0]
 80086c8:	6862      	ldr	r2, [r4, #4]
 80086ca:	2100      	movs	r1, #0
 80086cc:	4630      	mov	r0, r6
 80086ce:	f7f7 fd87 	bl	80001e0 <memchr>
 80086d2:	b108      	cbz	r0, 80086d8 <_printf_i+0x1e4>
 80086d4:	1b80      	subs	r0, r0, r6
 80086d6:	6060      	str	r0, [r4, #4]
 80086d8:	6863      	ldr	r3, [r4, #4]
 80086da:	6123      	str	r3, [r4, #16]
 80086dc:	2300      	movs	r3, #0
 80086de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086e2:	e7aa      	b.n	800863a <_printf_i+0x146>
 80086e4:	6923      	ldr	r3, [r4, #16]
 80086e6:	4632      	mov	r2, r6
 80086e8:	4649      	mov	r1, r9
 80086ea:	4640      	mov	r0, r8
 80086ec:	47d0      	blx	sl
 80086ee:	3001      	adds	r0, #1
 80086f0:	d0ad      	beq.n	800864e <_printf_i+0x15a>
 80086f2:	6823      	ldr	r3, [r4, #0]
 80086f4:	079b      	lsls	r3, r3, #30
 80086f6:	d413      	bmi.n	8008720 <_printf_i+0x22c>
 80086f8:	68e0      	ldr	r0, [r4, #12]
 80086fa:	9b03      	ldr	r3, [sp, #12]
 80086fc:	4298      	cmp	r0, r3
 80086fe:	bfb8      	it	lt
 8008700:	4618      	movlt	r0, r3
 8008702:	e7a6      	b.n	8008652 <_printf_i+0x15e>
 8008704:	2301      	movs	r3, #1
 8008706:	4632      	mov	r2, r6
 8008708:	4649      	mov	r1, r9
 800870a:	4640      	mov	r0, r8
 800870c:	47d0      	blx	sl
 800870e:	3001      	adds	r0, #1
 8008710:	d09d      	beq.n	800864e <_printf_i+0x15a>
 8008712:	3501      	adds	r5, #1
 8008714:	68e3      	ldr	r3, [r4, #12]
 8008716:	9903      	ldr	r1, [sp, #12]
 8008718:	1a5b      	subs	r3, r3, r1
 800871a:	42ab      	cmp	r3, r5
 800871c:	dcf2      	bgt.n	8008704 <_printf_i+0x210>
 800871e:	e7eb      	b.n	80086f8 <_printf_i+0x204>
 8008720:	2500      	movs	r5, #0
 8008722:	f104 0619 	add.w	r6, r4, #25
 8008726:	e7f5      	b.n	8008714 <_printf_i+0x220>
 8008728:	0800c82a 	.word	0x0800c82a
 800872c:	0800c83b 	.word	0x0800c83b

08008730 <_scanf_float>:
 8008730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008734:	b087      	sub	sp, #28
 8008736:	4691      	mov	r9, r2
 8008738:	9303      	str	r3, [sp, #12]
 800873a:	688b      	ldr	r3, [r1, #8]
 800873c:	1e5a      	subs	r2, r3, #1
 800873e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008742:	bf81      	itttt	hi
 8008744:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008748:	eb03 0b05 	addhi.w	fp, r3, r5
 800874c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008750:	608b      	strhi	r3, [r1, #8]
 8008752:	680b      	ldr	r3, [r1, #0]
 8008754:	460a      	mov	r2, r1
 8008756:	f04f 0500 	mov.w	r5, #0
 800875a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800875e:	f842 3b1c 	str.w	r3, [r2], #28
 8008762:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008766:	4680      	mov	r8, r0
 8008768:	460c      	mov	r4, r1
 800876a:	bf98      	it	ls
 800876c:	f04f 0b00 	movls.w	fp, #0
 8008770:	9201      	str	r2, [sp, #4]
 8008772:	4616      	mov	r6, r2
 8008774:	46aa      	mov	sl, r5
 8008776:	462f      	mov	r7, r5
 8008778:	9502      	str	r5, [sp, #8]
 800877a:	68a2      	ldr	r2, [r4, #8]
 800877c:	b15a      	cbz	r2, 8008796 <_scanf_float+0x66>
 800877e:	f8d9 3000 	ldr.w	r3, [r9]
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	2b4e      	cmp	r3, #78	@ 0x4e
 8008786:	d863      	bhi.n	8008850 <_scanf_float+0x120>
 8008788:	2b40      	cmp	r3, #64	@ 0x40
 800878a:	d83b      	bhi.n	8008804 <_scanf_float+0xd4>
 800878c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008790:	b2c8      	uxtb	r0, r1
 8008792:	280e      	cmp	r0, #14
 8008794:	d939      	bls.n	800880a <_scanf_float+0xda>
 8008796:	b11f      	cbz	r7, 80087a0 <_scanf_float+0x70>
 8008798:	6823      	ldr	r3, [r4, #0]
 800879a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800879e:	6023      	str	r3, [r4, #0]
 80087a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087a4:	f1ba 0f01 	cmp.w	sl, #1
 80087a8:	f200 8114 	bhi.w	80089d4 <_scanf_float+0x2a4>
 80087ac:	9b01      	ldr	r3, [sp, #4]
 80087ae:	429e      	cmp	r6, r3
 80087b0:	f200 8105 	bhi.w	80089be <_scanf_float+0x28e>
 80087b4:	2001      	movs	r0, #1
 80087b6:	b007      	add	sp, #28
 80087b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087bc:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80087c0:	2a0d      	cmp	r2, #13
 80087c2:	d8e8      	bhi.n	8008796 <_scanf_float+0x66>
 80087c4:	a101      	add	r1, pc, #4	@ (adr r1, 80087cc <_scanf_float+0x9c>)
 80087c6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80087ca:	bf00      	nop
 80087cc:	08008915 	.word	0x08008915
 80087d0:	08008797 	.word	0x08008797
 80087d4:	08008797 	.word	0x08008797
 80087d8:	08008797 	.word	0x08008797
 80087dc:	08008971 	.word	0x08008971
 80087e0:	0800894b 	.word	0x0800894b
 80087e4:	08008797 	.word	0x08008797
 80087e8:	08008797 	.word	0x08008797
 80087ec:	08008923 	.word	0x08008923
 80087f0:	08008797 	.word	0x08008797
 80087f4:	08008797 	.word	0x08008797
 80087f8:	08008797 	.word	0x08008797
 80087fc:	08008797 	.word	0x08008797
 8008800:	080088df 	.word	0x080088df
 8008804:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008808:	e7da      	b.n	80087c0 <_scanf_float+0x90>
 800880a:	290e      	cmp	r1, #14
 800880c:	d8c3      	bhi.n	8008796 <_scanf_float+0x66>
 800880e:	a001      	add	r0, pc, #4	@ (adr r0, 8008814 <_scanf_float+0xe4>)
 8008810:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008814:	080088cf 	.word	0x080088cf
 8008818:	08008797 	.word	0x08008797
 800881c:	080088cf 	.word	0x080088cf
 8008820:	0800895f 	.word	0x0800895f
 8008824:	08008797 	.word	0x08008797
 8008828:	08008871 	.word	0x08008871
 800882c:	080088b5 	.word	0x080088b5
 8008830:	080088b5 	.word	0x080088b5
 8008834:	080088b5 	.word	0x080088b5
 8008838:	080088b5 	.word	0x080088b5
 800883c:	080088b5 	.word	0x080088b5
 8008840:	080088b5 	.word	0x080088b5
 8008844:	080088b5 	.word	0x080088b5
 8008848:	080088b5 	.word	0x080088b5
 800884c:	080088b5 	.word	0x080088b5
 8008850:	2b6e      	cmp	r3, #110	@ 0x6e
 8008852:	d809      	bhi.n	8008868 <_scanf_float+0x138>
 8008854:	2b60      	cmp	r3, #96	@ 0x60
 8008856:	d8b1      	bhi.n	80087bc <_scanf_float+0x8c>
 8008858:	2b54      	cmp	r3, #84	@ 0x54
 800885a:	d07b      	beq.n	8008954 <_scanf_float+0x224>
 800885c:	2b59      	cmp	r3, #89	@ 0x59
 800885e:	d19a      	bne.n	8008796 <_scanf_float+0x66>
 8008860:	2d07      	cmp	r5, #7
 8008862:	d198      	bne.n	8008796 <_scanf_float+0x66>
 8008864:	2508      	movs	r5, #8
 8008866:	e02f      	b.n	80088c8 <_scanf_float+0x198>
 8008868:	2b74      	cmp	r3, #116	@ 0x74
 800886a:	d073      	beq.n	8008954 <_scanf_float+0x224>
 800886c:	2b79      	cmp	r3, #121	@ 0x79
 800886e:	e7f6      	b.n	800885e <_scanf_float+0x12e>
 8008870:	6821      	ldr	r1, [r4, #0]
 8008872:	05c8      	lsls	r0, r1, #23
 8008874:	d51e      	bpl.n	80088b4 <_scanf_float+0x184>
 8008876:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800887a:	6021      	str	r1, [r4, #0]
 800887c:	3701      	adds	r7, #1
 800887e:	f1bb 0f00 	cmp.w	fp, #0
 8008882:	d003      	beq.n	800888c <_scanf_float+0x15c>
 8008884:	3201      	adds	r2, #1
 8008886:	f10b 3bff 	add.w	fp, fp, #4294967295
 800888a:	60a2      	str	r2, [r4, #8]
 800888c:	68a3      	ldr	r3, [r4, #8]
 800888e:	3b01      	subs	r3, #1
 8008890:	60a3      	str	r3, [r4, #8]
 8008892:	6923      	ldr	r3, [r4, #16]
 8008894:	3301      	adds	r3, #1
 8008896:	6123      	str	r3, [r4, #16]
 8008898:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800889c:	3b01      	subs	r3, #1
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f8c9 3004 	str.w	r3, [r9, #4]
 80088a4:	f340 8082 	ble.w	80089ac <_scanf_float+0x27c>
 80088a8:	f8d9 3000 	ldr.w	r3, [r9]
 80088ac:	3301      	adds	r3, #1
 80088ae:	f8c9 3000 	str.w	r3, [r9]
 80088b2:	e762      	b.n	800877a <_scanf_float+0x4a>
 80088b4:	eb1a 0105 	adds.w	r1, sl, r5
 80088b8:	f47f af6d 	bne.w	8008796 <_scanf_float+0x66>
 80088bc:	6822      	ldr	r2, [r4, #0]
 80088be:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80088c2:	6022      	str	r2, [r4, #0]
 80088c4:	460d      	mov	r5, r1
 80088c6:	468a      	mov	sl, r1
 80088c8:	f806 3b01 	strb.w	r3, [r6], #1
 80088cc:	e7de      	b.n	800888c <_scanf_float+0x15c>
 80088ce:	6822      	ldr	r2, [r4, #0]
 80088d0:	0610      	lsls	r0, r2, #24
 80088d2:	f57f af60 	bpl.w	8008796 <_scanf_float+0x66>
 80088d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80088da:	6022      	str	r2, [r4, #0]
 80088dc:	e7f4      	b.n	80088c8 <_scanf_float+0x198>
 80088de:	f1ba 0f00 	cmp.w	sl, #0
 80088e2:	d10c      	bne.n	80088fe <_scanf_float+0x1ce>
 80088e4:	b977      	cbnz	r7, 8008904 <_scanf_float+0x1d4>
 80088e6:	6822      	ldr	r2, [r4, #0]
 80088e8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80088ec:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80088f0:	d108      	bne.n	8008904 <_scanf_float+0x1d4>
 80088f2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80088f6:	6022      	str	r2, [r4, #0]
 80088f8:	f04f 0a01 	mov.w	sl, #1
 80088fc:	e7e4      	b.n	80088c8 <_scanf_float+0x198>
 80088fe:	f1ba 0f02 	cmp.w	sl, #2
 8008902:	d050      	beq.n	80089a6 <_scanf_float+0x276>
 8008904:	2d01      	cmp	r5, #1
 8008906:	d002      	beq.n	800890e <_scanf_float+0x1de>
 8008908:	2d04      	cmp	r5, #4
 800890a:	f47f af44 	bne.w	8008796 <_scanf_float+0x66>
 800890e:	3501      	adds	r5, #1
 8008910:	b2ed      	uxtb	r5, r5
 8008912:	e7d9      	b.n	80088c8 <_scanf_float+0x198>
 8008914:	f1ba 0f01 	cmp.w	sl, #1
 8008918:	f47f af3d 	bne.w	8008796 <_scanf_float+0x66>
 800891c:	f04f 0a02 	mov.w	sl, #2
 8008920:	e7d2      	b.n	80088c8 <_scanf_float+0x198>
 8008922:	b975      	cbnz	r5, 8008942 <_scanf_float+0x212>
 8008924:	2f00      	cmp	r7, #0
 8008926:	f47f af37 	bne.w	8008798 <_scanf_float+0x68>
 800892a:	6822      	ldr	r2, [r4, #0]
 800892c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008930:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008934:	f040 8103 	bne.w	8008b3e <_scanf_float+0x40e>
 8008938:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800893c:	6022      	str	r2, [r4, #0]
 800893e:	2501      	movs	r5, #1
 8008940:	e7c2      	b.n	80088c8 <_scanf_float+0x198>
 8008942:	2d03      	cmp	r5, #3
 8008944:	d0e3      	beq.n	800890e <_scanf_float+0x1de>
 8008946:	2d05      	cmp	r5, #5
 8008948:	e7df      	b.n	800890a <_scanf_float+0x1da>
 800894a:	2d02      	cmp	r5, #2
 800894c:	f47f af23 	bne.w	8008796 <_scanf_float+0x66>
 8008950:	2503      	movs	r5, #3
 8008952:	e7b9      	b.n	80088c8 <_scanf_float+0x198>
 8008954:	2d06      	cmp	r5, #6
 8008956:	f47f af1e 	bne.w	8008796 <_scanf_float+0x66>
 800895a:	2507      	movs	r5, #7
 800895c:	e7b4      	b.n	80088c8 <_scanf_float+0x198>
 800895e:	6822      	ldr	r2, [r4, #0]
 8008960:	0591      	lsls	r1, r2, #22
 8008962:	f57f af18 	bpl.w	8008796 <_scanf_float+0x66>
 8008966:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800896a:	6022      	str	r2, [r4, #0]
 800896c:	9702      	str	r7, [sp, #8]
 800896e:	e7ab      	b.n	80088c8 <_scanf_float+0x198>
 8008970:	6822      	ldr	r2, [r4, #0]
 8008972:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008976:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800897a:	d005      	beq.n	8008988 <_scanf_float+0x258>
 800897c:	0550      	lsls	r0, r2, #21
 800897e:	f57f af0a 	bpl.w	8008796 <_scanf_float+0x66>
 8008982:	2f00      	cmp	r7, #0
 8008984:	f000 80db 	beq.w	8008b3e <_scanf_float+0x40e>
 8008988:	0591      	lsls	r1, r2, #22
 800898a:	bf58      	it	pl
 800898c:	9902      	ldrpl	r1, [sp, #8]
 800898e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008992:	bf58      	it	pl
 8008994:	1a79      	subpl	r1, r7, r1
 8008996:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800899a:	bf58      	it	pl
 800899c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80089a0:	6022      	str	r2, [r4, #0]
 80089a2:	2700      	movs	r7, #0
 80089a4:	e790      	b.n	80088c8 <_scanf_float+0x198>
 80089a6:	f04f 0a03 	mov.w	sl, #3
 80089aa:	e78d      	b.n	80088c8 <_scanf_float+0x198>
 80089ac:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80089b0:	4649      	mov	r1, r9
 80089b2:	4640      	mov	r0, r8
 80089b4:	4798      	blx	r3
 80089b6:	2800      	cmp	r0, #0
 80089b8:	f43f aedf 	beq.w	800877a <_scanf_float+0x4a>
 80089bc:	e6eb      	b.n	8008796 <_scanf_float+0x66>
 80089be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80089c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80089c6:	464a      	mov	r2, r9
 80089c8:	4640      	mov	r0, r8
 80089ca:	4798      	blx	r3
 80089cc:	6923      	ldr	r3, [r4, #16]
 80089ce:	3b01      	subs	r3, #1
 80089d0:	6123      	str	r3, [r4, #16]
 80089d2:	e6eb      	b.n	80087ac <_scanf_float+0x7c>
 80089d4:	1e6b      	subs	r3, r5, #1
 80089d6:	2b06      	cmp	r3, #6
 80089d8:	d824      	bhi.n	8008a24 <_scanf_float+0x2f4>
 80089da:	2d02      	cmp	r5, #2
 80089dc:	d836      	bhi.n	8008a4c <_scanf_float+0x31c>
 80089de:	9b01      	ldr	r3, [sp, #4]
 80089e0:	429e      	cmp	r6, r3
 80089e2:	f67f aee7 	bls.w	80087b4 <_scanf_float+0x84>
 80089e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80089ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80089ee:	464a      	mov	r2, r9
 80089f0:	4640      	mov	r0, r8
 80089f2:	4798      	blx	r3
 80089f4:	6923      	ldr	r3, [r4, #16]
 80089f6:	3b01      	subs	r3, #1
 80089f8:	6123      	str	r3, [r4, #16]
 80089fa:	e7f0      	b.n	80089de <_scanf_float+0x2ae>
 80089fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008a00:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008a04:	464a      	mov	r2, r9
 8008a06:	4640      	mov	r0, r8
 8008a08:	4798      	blx	r3
 8008a0a:	6923      	ldr	r3, [r4, #16]
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	6123      	str	r3, [r4, #16]
 8008a10:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a14:	fa5f fa8a 	uxtb.w	sl, sl
 8008a18:	f1ba 0f02 	cmp.w	sl, #2
 8008a1c:	d1ee      	bne.n	80089fc <_scanf_float+0x2cc>
 8008a1e:	3d03      	subs	r5, #3
 8008a20:	b2ed      	uxtb	r5, r5
 8008a22:	1b76      	subs	r6, r6, r5
 8008a24:	6823      	ldr	r3, [r4, #0]
 8008a26:	05da      	lsls	r2, r3, #23
 8008a28:	d530      	bpl.n	8008a8c <_scanf_float+0x35c>
 8008a2a:	055b      	lsls	r3, r3, #21
 8008a2c:	d511      	bpl.n	8008a52 <_scanf_float+0x322>
 8008a2e:	9b01      	ldr	r3, [sp, #4]
 8008a30:	429e      	cmp	r6, r3
 8008a32:	f67f aebf 	bls.w	80087b4 <_scanf_float+0x84>
 8008a36:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008a3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a3e:	464a      	mov	r2, r9
 8008a40:	4640      	mov	r0, r8
 8008a42:	4798      	blx	r3
 8008a44:	6923      	ldr	r3, [r4, #16]
 8008a46:	3b01      	subs	r3, #1
 8008a48:	6123      	str	r3, [r4, #16]
 8008a4a:	e7f0      	b.n	8008a2e <_scanf_float+0x2fe>
 8008a4c:	46aa      	mov	sl, r5
 8008a4e:	46b3      	mov	fp, r6
 8008a50:	e7de      	b.n	8008a10 <_scanf_float+0x2e0>
 8008a52:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008a56:	6923      	ldr	r3, [r4, #16]
 8008a58:	2965      	cmp	r1, #101	@ 0x65
 8008a5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008a5e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008a62:	6123      	str	r3, [r4, #16]
 8008a64:	d00c      	beq.n	8008a80 <_scanf_float+0x350>
 8008a66:	2945      	cmp	r1, #69	@ 0x45
 8008a68:	d00a      	beq.n	8008a80 <_scanf_float+0x350>
 8008a6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008a6e:	464a      	mov	r2, r9
 8008a70:	4640      	mov	r0, r8
 8008a72:	4798      	blx	r3
 8008a74:	6923      	ldr	r3, [r4, #16]
 8008a76:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008a7a:	3b01      	subs	r3, #1
 8008a7c:	1eb5      	subs	r5, r6, #2
 8008a7e:	6123      	str	r3, [r4, #16]
 8008a80:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008a84:	464a      	mov	r2, r9
 8008a86:	4640      	mov	r0, r8
 8008a88:	4798      	blx	r3
 8008a8a:	462e      	mov	r6, r5
 8008a8c:	6822      	ldr	r2, [r4, #0]
 8008a8e:	f012 0210 	ands.w	r2, r2, #16
 8008a92:	d001      	beq.n	8008a98 <_scanf_float+0x368>
 8008a94:	2000      	movs	r0, #0
 8008a96:	e68e      	b.n	80087b6 <_scanf_float+0x86>
 8008a98:	7032      	strb	r2, [r6, #0]
 8008a9a:	6823      	ldr	r3, [r4, #0]
 8008a9c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008aa0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008aa4:	d125      	bne.n	8008af2 <_scanf_float+0x3c2>
 8008aa6:	9b02      	ldr	r3, [sp, #8]
 8008aa8:	429f      	cmp	r7, r3
 8008aaa:	d00a      	beq.n	8008ac2 <_scanf_float+0x392>
 8008aac:	1bda      	subs	r2, r3, r7
 8008aae:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008ab2:	429e      	cmp	r6, r3
 8008ab4:	bf28      	it	cs
 8008ab6:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008aba:	4922      	ldr	r1, [pc, #136]	@ (8008b44 <_scanf_float+0x414>)
 8008abc:	4630      	mov	r0, r6
 8008abe:	f000 f907 	bl	8008cd0 <siprintf>
 8008ac2:	9901      	ldr	r1, [sp, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	4640      	mov	r0, r8
 8008ac8:	f002 fbf2 	bl	800b2b0 <_strtod_r>
 8008acc:	9b03      	ldr	r3, [sp, #12]
 8008ace:	6821      	ldr	r1, [r4, #0]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f011 0f02 	tst.w	r1, #2
 8008ad6:	ec57 6b10 	vmov	r6, r7, d0
 8008ada:	f103 0204 	add.w	r2, r3, #4
 8008ade:	d015      	beq.n	8008b0c <_scanf_float+0x3dc>
 8008ae0:	9903      	ldr	r1, [sp, #12]
 8008ae2:	600a      	str	r2, [r1, #0]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	e9c3 6700 	strd	r6, r7, [r3]
 8008aea:	68e3      	ldr	r3, [r4, #12]
 8008aec:	3301      	adds	r3, #1
 8008aee:	60e3      	str	r3, [r4, #12]
 8008af0:	e7d0      	b.n	8008a94 <_scanf_float+0x364>
 8008af2:	9b04      	ldr	r3, [sp, #16]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d0e4      	beq.n	8008ac2 <_scanf_float+0x392>
 8008af8:	9905      	ldr	r1, [sp, #20]
 8008afa:	230a      	movs	r3, #10
 8008afc:	3101      	adds	r1, #1
 8008afe:	4640      	mov	r0, r8
 8008b00:	f002 fc56 	bl	800b3b0 <_strtol_r>
 8008b04:	9b04      	ldr	r3, [sp, #16]
 8008b06:	9e05      	ldr	r6, [sp, #20]
 8008b08:	1ac2      	subs	r2, r0, r3
 8008b0a:	e7d0      	b.n	8008aae <_scanf_float+0x37e>
 8008b0c:	f011 0f04 	tst.w	r1, #4
 8008b10:	9903      	ldr	r1, [sp, #12]
 8008b12:	600a      	str	r2, [r1, #0]
 8008b14:	d1e6      	bne.n	8008ae4 <_scanf_float+0x3b4>
 8008b16:	681d      	ldr	r5, [r3, #0]
 8008b18:	4632      	mov	r2, r6
 8008b1a:	463b      	mov	r3, r7
 8008b1c:	4630      	mov	r0, r6
 8008b1e:	4639      	mov	r1, r7
 8008b20:	f7f8 f80c 	bl	8000b3c <__aeabi_dcmpun>
 8008b24:	b128      	cbz	r0, 8008b32 <_scanf_float+0x402>
 8008b26:	4808      	ldr	r0, [pc, #32]	@ (8008b48 <_scanf_float+0x418>)
 8008b28:	f000 f9b8 	bl	8008e9c <nanf>
 8008b2c:	ed85 0a00 	vstr	s0, [r5]
 8008b30:	e7db      	b.n	8008aea <_scanf_float+0x3ba>
 8008b32:	4630      	mov	r0, r6
 8008b34:	4639      	mov	r1, r7
 8008b36:	f7f8 f85f 	bl	8000bf8 <__aeabi_d2f>
 8008b3a:	6028      	str	r0, [r5, #0]
 8008b3c:	e7d5      	b.n	8008aea <_scanf_float+0x3ba>
 8008b3e:	2700      	movs	r7, #0
 8008b40:	e62e      	b.n	80087a0 <_scanf_float+0x70>
 8008b42:	bf00      	nop
 8008b44:	0800c84c 	.word	0x0800c84c
 8008b48:	0800c98d 	.word	0x0800c98d

08008b4c <std>:
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	b510      	push	{r4, lr}
 8008b50:	4604      	mov	r4, r0
 8008b52:	e9c0 3300 	strd	r3, r3, [r0]
 8008b56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008b5a:	6083      	str	r3, [r0, #8]
 8008b5c:	8181      	strh	r1, [r0, #12]
 8008b5e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008b60:	81c2      	strh	r2, [r0, #14]
 8008b62:	6183      	str	r3, [r0, #24]
 8008b64:	4619      	mov	r1, r3
 8008b66:	2208      	movs	r2, #8
 8008b68:	305c      	adds	r0, #92	@ 0x5c
 8008b6a:	f000 f916 	bl	8008d9a <memset>
 8008b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8008ba4 <std+0x58>)
 8008b70:	6263      	str	r3, [r4, #36]	@ 0x24
 8008b72:	4b0d      	ldr	r3, [pc, #52]	@ (8008ba8 <std+0x5c>)
 8008b74:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008b76:	4b0d      	ldr	r3, [pc, #52]	@ (8008bac <std+0x60>)
 8008b78:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8008bb0 <std+0x64>)
 8008b7c:	6323      	str	r3, [r4, #48]	@ 0x30
 8008b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8008bb4 <std+0x68>)
 8008b80:	6224      	str	r4, [r4, #32]
 8008b82:	429c      	cmp	r4, r3
 8008b84:	d006      	beq.n	8008b94 <std+0x48>
 8008b86:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008b8a:	4294      	cmp	r4, r2
 8008b8c:	d002      	beq.n	8008b94 <std+0x48>
 8008b8e:	33d0      	adds	r3, #208	@ 0xd0
 8008b90:	429c      	cmp	r4, r3
 8008b92:	d105      	bne.n	8008ba0 <std+0x54>
 8008b94:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b9c:	f000 b97a 	b.w	8008e94 <__retarget_lock_init_recursive>
 8008ba0:	bd10      	pop	{r4, pc}
 8008ba2:	bf00      	nop
 8008ba4:	08008d15 	.word	0x08008d15
 8008ba8:	08008d37 	.word	0x08008d37
 8008bac:	08008d6f 	.word	0x08008d6f
 8008bb0:	08008d93 	.word	0x08008d93
 8008bb4:	20000620 	.word	0x20000620

08008bb8 <stdio_exit_handler>:
 8008bb8:	4a02      	ldr	r2, [pc, #8]	@ (8008bc4 <stdio_exit_handler+0xc>)
 8008bba:	4903      	ldr	r1, [pc, #12]	@ (8008bc8 <stdio_exit_handler+0x10>)
 8008bbc:	4803      	ldr	r0, [pc, #12]	@ (8008bcc <stdio_exit_handler+0x14>)
 8008bbe:	f000 b869 	b.w	8008c94 <_fwalk_sglue>
 8008bc2:	bf00      	nop
 8008bc4:	20000090 	.word	0x20000090
 8008bc8:	0800b76d 	.word	0x0800b76d
 8008bcc:	200000a0 	.word	0x200000a0

08008bd0 <cleanup_stdio>:
 8008bd0:	6841      	ldr	r1, [r0, #4]
 8008bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8008c04 <cleanup_stdio+0x34>)
 8008bd4:	4299      	cmp	r1, r3
 8008bd6:	b510      	push	{r4, lr}
 8008bd8:	4604      	mov	r4, r0
 8008bda:	d001      	beq.n	8008be0 <cleanup_stdio+0x10>
 8008bdc:	f002 fdc6 	bl	800b76c <_fflush_r>
 8008be0:	68a1      	ldr	r1, [r4, #8]
 8008be2:	4b09      	ldr	r3, [pc, #36]	@ (8008c08 <cleanup_stdio+0x38>)
 8008be4:	4299      	cmp	r1, r3
 8008be6:	d002      	beq.n	8008bee <cleanup_stdio+0x1e>
 8008be8:	4620      	mov	r0, r4
 8008bea:	f002 fdbf 	bl	800b76c <_fflush_r>
 8008bee:	68e1      	ldr	r1, [r4, #12]
 8008bf0:	4b06      	ldr	r3, [pc, #24]	@ (8008c0c <cleanup_stdio+0x3c>)
 8008bf2:	4299      	cmp	r1, r3
 8008bf4:	d004      	beq.n	8008c00 <cleanup_stdio+0x30>
 8008bf6:	4620      	mov	r0, r4
 8008bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bfc:	f002 bdb6 	b.w	800b76c <_fflush_r>
 8008c00:	bd10      	pop	{r4, pc}
 8008c02:	bf00      	nop
 8008c04:	20000620 	.word	0x20000620
 8008c08:	20000688 	.word	0x20000688
 8008c0c:	200006f0 	.word	0x200006f0

08008c10 <global_stdio_init.part.0>:
 8008c10:	b510      	push	{r4, lr}
 8008c12:	4b0b      	ldr	r3, [pc, #44]	@ (8008c40 <global_stdio_init.part.0+0x30>)
 8008c14:	4c0b      	ldr	r4, [pc, #44]	@ (8008c44 <global_stdio_init.part.0+0x34>)
 8008c16:	4a0c      	ldr	r2, [pc, #48]	@ (8008c48 <global_stdio_init.part.0+0x38>)
 8008c18:	601a      	str	r2, [r3, #0]
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	2104      	movs	r1, #4
 8008c20:	f7ff ff94 	bl	8008b4c <std>
 8008c24:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008c28:	2201      	movs	r2, #1
 8008c2a:	2109      	movs	r1, #9
 8008c2c:	f7ff ff8e 	bl	8008b4c <std>
 8008c30:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008c34:	2202      	movs	r2, #2
 8008c36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c3a:	2112      	movs	r1, #18
 8008c3c:	f7ff bf86 	b.w	8008b4c <std>
 8008c40:	20000758 	.word	0x20000758
 8008c44:	20000620 	.word	0x20000620
 8008c48:	08008bb9 	.word	0x08008bb9

08008c4c <__sfp_lock_acquire>:
 8008c4c:	4801      	ldr	r0, [pc, #4]	@ (8008c54 <__sfp_lock_acquire+0x8>)
 8008c4e:	f000 b922 	b.w	8008e96 <__retarget_lock_acquire_recursive>
 8008c52:	bf00      	nop
 8008c54:	20000761 	.word	0x20000761

08008c58 <__sfp_lock_release>:
 8008c58:	4801      	ldr	r0, [pc, #4]	@ (8008c60 <__sfp_lock_release+0x8>)
 8008c5a:	f000 b91d 	b.w	8008e98 <__retarget_lock_release_recursive>
 8008c5e:	bf00      	nop
 8008c60:	20000761 	.word	0x20000761

08008c64 <__sinit>:
 8008c64:	b510      	push	{r4, lr}
 8008c66:	4604      	mov	r4, r0
 8008c68:	f7ff fff0 	bl	8008c4c <__sfp_lock_acquire>
 8008c6c:	6a23      	ldr	r3, [r4, #32]
 8008c6e:	b11b      	cbz	r3, 8008c78 <__sinit+0x14>
 8008c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c74:	f7ff bff0 	b.w	8008c58 <__sfp_lock_release>
 8008c78:	4b04      	ldr	r3, [pc, #16]	@ (8008c8c <__sinit+0x28>)
 8008c7a:	6223      	str	r3, [r4, #32]
 8008c7c:	4b04      	ldr	r3, [pc, #16]	@ (8008c90 <__sinit+0x2c>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1f5      	bne.n	8008c70 <__sinit+0xc>
 8008c84:	f7ff ffc4 	bl	8008c10 <global_stdio_init.part.0>
 8008c88:	e7f2      	b.n	8008c70 <__sinit+0xc>
 8008c8a:	bf00      	nop
 8008c8c:	08008bd1 	.word	0x08008bd1
 8008c90:	20000758 	.word	0x20000758

08008c94 <_fwalk_sglue>:
 8008c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c98:	4607      	mov	r7, r0
 8008c9a:	4688      	mov	r8, r1
 8008c9c:	4614      	mov	r4, r2
 8008c9e:	2600      	movs	r6, #0
 8008ca0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ca4:	f1b9 0901 	subs.w	r9, r9, #1
 8008ca8:	d505      	bpl.n	8008cb6 <_fwalk_sglue+0x22>
 8008caa:	6824      	ldr	r4, [r4, #0]
 8008cac:	2c00      	cmp	r4, #0
 8008cae:	d1f7      	bne.n	8008ca0 <_fwalk_sglue+0xc>
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cb6:	89ab      	ldrh	r3, [r5, #12]
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d907      	bls.n	8008ccc <_fwalk_sglue+0x38>
 8008cbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	d003      	beq.n	8008ccc <_fwalk_sglue+0x38>
 8008cc4:	4629      	mov	r1, r5
 8008cc6:	4638      	mov	r0, r7
 8008cc8:	47c0      	blx	r8
 8008cca:	4306      	orrs	r6, r0
 8008ccc:	3568      	adds	r5, #104	@ 0x68
 8008cce:	e7e9      	b.n	8008ca4 <_fwalk_sglue+0x10>

08008cd0 <siprintf>:
 8008cd0:	b40e      	push	{r1, r2, r3}
 8008cd2:	b510      	push	{r4, lr}
 8008cd4:	b09d      	sub	sp, #116	@ 0x74
 8008cd6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008cd8:	9002      	str	r0, [sp, #8]
 8008cda:	9006      	str	r0, [sp, #24]
 8008cdc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008ce0:	480a      	ldr	r0, [pc, #40]	@ (8008d0c <siprintf+0x3c>)
 8008ce2:	9107      	str	r1, [sp, #28]
 8008ce4:	9104      	str	r1, [sp, #16]
 8008ce6:	490a      	ldr	r1, [pc, #40]	@ (8008d10 <siprintf+0x40>)
 8008ce8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cec:	9105      	str	r1, [sp, #20]
 8008cee:	2400      	movs	r4, #0
 8008cf0:	a902      	add	r1, sp, #8
 8008cf2:	6800      	ldr	r0, [r0, #0]
 8008cf4:	9301      	str	r3, [sp, #4]
 8008cf6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008cf8:	f002 fbb8 	bl	800b46c <_svfiprintf_r>
 8008cfc:	9b02      	ldr	r3, [sp, #8]
 8008cfe:	701c      	strb	r4, [r3, #0]
 8008d00:	b01d      	add	sp, #116	@ 0x74
 8008d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d06:	b003      	add	sp, #12
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	2000009c 	.word	0x2000009c
 8008d10:	ffff0208 	.word	0xffff0208

08008d14 <__sread>:
 8008d14:	b510      	push	{r4, lr}
 8008d16:	460c      	mov	r4, r1
 8008d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d1c:	f000 f86c 	bl	8008df8 <_read_r>
 8008d20:	2800      	cmp	r0, #0
 8008d22:	bfab      	itete	ge
 8008d24:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008d26:	89a3      	ldrhlt	r3, [r4, #12]
 8008d28:	181b      	addge	r3, r3, r0
 8008d2a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008d2e:	bfac      	ite	ge
 8008d30:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008d32:	81a3      	strhlt	r3, [r4, #12]
 8008d34:	bd10      	pop	{r4, pc}

08008d36 <__swrite>:
 8008d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d3a:	461f      	mov	r7, r3
 8008d3c:	898b      	ldrh	r3, [r1, #12]
 8008d3e:	05db      	lsls	r3, r3, #23
 8008d40:	4605      	mov	r5, r0
 8008d42:	460c      	mov	r4, r1
 8008d44:	4616      	mov	r6, r2
 8008d46:	d505      	bpl.n	8008d54 <__swrite+0x1e>
 8008d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d4c:	2302      	movs	r3, #2
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f000 f840 	bl	8008dd4 <_lseek_r>
 8008d54:	89a3      	ldrh	r3, [r4, #12]
 8008d56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d5a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008d5e:	81a3      	strh	r3, [r4, #12]
 8008d60:	4632      	mov	r2, r6
 8008d62:	463b      	mov	r3, r7
 8008d64:	4628      	mov	r0, r5
 8008d66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d6a:	f000 b857 	b.w	8008e1c <_write_r>

08008d6e <__sseek>:
 8008d6e:	b510      	push	{r4, lr}
 8008d70:	460c      	mov	r4, r1
 8008d72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d76:	f000 f82d 	bl	8008dd4 <_lseek_r>
 8008d7a:	1c43      	adds	r3, r0, #1
 8008d7c:	89a3      	ldrh	r3, [r4, #12]
 8008d7e:	bf15      	itete	ne
 8008d80:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008d82:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008d86:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008d8a:	81a3      	strheq	r3, [r4, #12]
 8008d8c:	bf18      	it	ne
 8008d8e:	81a3      	strhne	r3, [r4, #12]
 8008d90:	bd10      	pop	{r4, pc}

08008d92 <__sclose>:
 8008d92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d96:	f000 b80d 	b.w	8008db4 <_close_r>

08008d9a <memset>:
 8008d9a:	4402      	add	r2, r0
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d100      	bne.n	8008da4 <memset+0xa>
 8008da2:	4770      	bx	lr
 8008da4:	f803 1b01 	strb.w	r1, [r3], #1
 8008da8:	e7f9      	b.n	8008d9e <memset+0x4>
	...

08008dac <_localeconv_r>:
 8008dac:	4800      	ldr	r0, [pc, #0]	@ (8008db0 <_localeconv_r+0x4>)
 8008dae:	4770      	bx	lr
 8008db0:	200001dc 	.word	0x200001dc

08008db4 <_close_r>:
 8008db4:	b538      	push	{r3, r4, r5, lr}
 8008db6:	4d06      	ldr	r5, [pc, #24]	@ (8008dd0 <_close_r+0x1c>)
 8008db8:	2300      	movs	r3, #0
 8008dba:	4604      	mov	r4, r0
 8008dbc:	4608      	mov	r0, r1
 8008dbe:	602b      	str	r3, [r5, #0]
 8008dc0:	f7fa f810 	bl	8002de4 <_close>
 8008dc4:	1c43      	adds	r3, r0, #1
 8008dc6:	d102      	bne.n	8008dce <_close_r+0x1a>
 8008dc8:	682b      	ldr	r3, [r5, #0]
 8008dca:	b103      	cbz	r3, 8008dce <_close_r+0x1a>
 8008dcc:	6023      	str	r3, [r4, #0]
 8008dce:	bd38      	pop	{r3, r4, r5, pc}
 8008dd0:	2000075c 	.word	0x2000075c

08008dd4 <_lseek_r>:
 8008dd4:	b538      	push	{r3, r4, r5, lr}
 8008dd6:	4d07      	ldr	r5, [pc, #28]	@ (8008df4 <_lseek_r+0x20>)
 8008dd8:	4604      	mov	r4, r0
 8008dda:	4608      	mov	r0, r1
 8008ddc:	4611      	mov	r1, r2
 8008dde:	2200      	movs	r2, #0
 8008de0:	602a      	str	r2, [r5, #0]
 8008de2:	461a      	mov	r2, r3
 8008de4:	f7fa f825 	bl	8002e32 <_lseek>
 8008de8:	1c43      	adds	r3, r0, #1
 8008dea:	d102      	bne.n	8008df2 <_lseek_r+0x1e>
 8008dec:	682b      	ldr	r3, [r5, #0]
 8008dee:	b103      	cbz	r3, 8008df2 <_lseek_r+0x1e>
 8008df0:	6023      	str	r3, [r4, #0]
 8008df2:	bd38      	pop	{r3, r4, r5, pc}
 8008df4:	2000075c 	.word	0x2000075c

08008df8 <_read_r>:
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	4d07      	ldr	r5, [pc, #28]	@ (8008e18 <_read_r+0x20>)
 8008dfc:	4604      	mov	r4, r0
 8008dfe:	4608      	mov	r0, r1
 8008e00:	4611      	mov	r1, r2
 8008e02:	2200      	movs	r2, #0
 8008e04:	602a      	str	r2, [r5, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	f7f9 ffb3 	bl	8002d72 <_read>
 8008e0c:	1c43      	adds	r3, r0, #1
 8008e0e:	d102      	bne.n	8008e16 <_read_r+0x1e>
 8008e10:	682b      	ldr	r3, [r5, #0]
 8008e12:	b103      	cbz	r3, 8008e16 <_read_r+0x1e>
 8008e14:	6023      	str	r3, [r4, #0]
 8008e16:	bd38      	pop	{r3, r4, r5, pc}
 8008e18:	2000075c 	.word	0x2000075c

08008e1c <_write_r>:
 8008e1c:	b538      	push	{r3, r4, r5, lr}
 8008e1e:	4d07      	ldr	r5, [pc, #28]	@ (8008e3c <_write_r+0x20>)
 8008e20:	4604      	mov	r4, r0
 8008e22:	4608      	mov	r0, r1
 8008e24:	4611      	mov	r1, r2
 8008e26:	2200      	movs	r2, #0
 8008e28:	602a      	str	r2, [r5, #0]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	f7f9 ffbe 	bl	8002dac <_write>
 8008e30:	1c43      	adds	r3, r0, #1
 8008e32:	d102      	bne.n	8008e3a <_write_r+0x1e>
 8008e34:	682b      	ldr	r3, [r5, #0]
 8008e36:	b103      	cbz	r3, 8008e3a <_write_r+0x1e>
 8008e38:	6023      	str	r3, [r4, #0]
 8008e3a:	bd38      	pop	{r3, r4, r5, pc}
 8008e3c:	2000075c 	.word	0x2000075c

08008e40 <__errno>:
 8008e40:	4b01      	ldr	r3, [pc, #4]	@ (8008e48 <__errno+0x8>)
 8008e42:	6818      	ldr	r0, [r3, #0]
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	2000009c 	.word	0x2000009c

08008e4c <__libc_init_array>:
 8008e4c:	b570      	push	{r4, r5, r6, lr}
 8008e4e:	4d0d      	ldr	r5, [pc, #52]	@ (8008e84 <__libc_init_array+0x38>)
 8008e50:	4c0d      	ldr	r4, [pc, #52]	@ (8008e88 <__libc_init_array+0x3c>)
 8008e52:	1b64      	subs	r4, r4, r5
 8008e54:	10a4      	asrs	r4, r4, #2
 8008e56:	2600      	movs	r6, #0
 8008e58:	42a6      	cmp	r6, r4
 8008e5a:	d109      	bne.n	8008e70 <__libc_init_array+0x24>
 8008e5c:	4d0b      	ldr	r5, [pc, #44]	@ (8008e8c <__libc_init_array+0x40>)
 8008e5e:	4c0c      	ldr	r4, [pc, #48]	@ (8008e90 <__libc_init_array+0x44>)
 8008e60:	f003 fcaa 	bl	800c7b8 <_init>
 8008e64:	1b64      	subs	r4, r4, r5
 8008e66:	10a4      	asrs	r4, r4, #2
 8008e68:	2600      	movs	r6, #0
 8008e6a:	42a6      	cmp	r6, r4
 8008e6c:	d105      	bne.n	8008e7a <__libc_init_array+0x2e>
 8008e6e:	bd70      	pop	{r4, r5, r6, pc}
 8008e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e74:	4798      	blx	r3
 8008e76:	3601      	adds	r6, #1
 8008e78:	e7ee      	b.n	8008e58 <__libc_init_array+0xc>
 8008e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e7e:	4798      	blx	r3
 8008e80:	3601      	adds	r6, #1
 8008e82:	e7f2      	b.n	8008e6a <__libc_init_array+0x1e>
 8008e84:	0800cc60 	.word	0x0800cc60
 8008e88:	0800cc60 	.word	0x0800cc60
 8008e8c:	0800cc60 	.word	0x0800cc60
 8008e90:	0800cc64 	.word	0x0800cc64

08008e94 <__retarget_lock_init_recursive>:
 8008e94:	4770      	bx	lr

08008e96 <__retarget_lock_acquire_recursive>:
 8008e96:	4770      	bx	lr

08008e98 <__retarget_lock_release_recursive>:
 8008e98:	4770      	bx	lr
	...

08008e9c <nanf>:
 8008e9c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008ea4 <nanf+0x8>
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	7fc00000 	.word	0x7fc00000

08008ea8 <quorem>:
 8008ea8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eac:	6903      	ldr	r3, [r0, #16]
 8008eae:	690c      	ldr	r4, [r1, #16]
 8008eb0:	42a3      	cmp	r3, r4
 8008eb2:	4607      	mov	r7, r0
 8008eb4:	db7e      	blt.n	8008fb4 <quorem+0x10c>
 8008eb6:	3c01      	subs	r4, #1
 8008eb8:	f101 0814 	add.w	r8, r1, #20
 8008ebc:	00a3      	lsls	r3, r4, #2
 8008ebe:	f100 0514 	add.w	r5, r0, #20
 8008ec2:	9300      	str	r3, [sp, #0]
 8008ec4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ec8:	9301      	str	r3, [sp, #4]
 8008eca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ece:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008eda:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ede:	d32e      	bcc.n	8008f3e <quorem+0x96>
 8008ee0:	f04f 0a00 	mov.w	sl, #0
 8008ee4:	46c4      	mov	ip, r8
 8008ee6:	46ae      	mov	lr, r5
 8008ee8:	46d3      	mov	fp, sl
 8008eea:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008eee:	b298      	uxth	r0, r3
 8008ef0:	fb06 a000 	mla	r0, r6, r0, sl
 8008ef4:	0c02      	lsrs	r2, r0, #16
 8008ef6:	0c1b      	lsrs	r3, r3, #16
 8008ef8:	fb06 2303 	mla	r3, r6, r3, r2
 8008efc:	f8de 2000 	ldr.w	r2, [lr]
 8008f00:	b280      	uxth	r0, r0
 8008f02:	b292      	uxth	r2, r2
 8008f04:	1a12      	subs	r2, r2, r0
 8008f06:	445a      	add	r2, fp
 8008f08:	f8de 0000 	ldr.w	r0, [lr]
 8008f0c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008f16:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008f1a:	b292      	uxth	r2, r2
 8008f1c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008f20:	45e1      	cmp	r9, ip
 8008f22:	f84e 2b04 	str.w	r2, [lr], #4
 8008f26:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008f2a:	d2de      	bcs.n	8008eea <quorem+0x42>
 8008f2c:	9b00      	ldr	r3, [sp, #0]
 8008f2e:	58eb      	ldr	r3, [r5, r3]
 8008f30:	b92b      	cbnz	r3, 8008f3e <quorem+0x96>
 8008f32:	9b01      	ldr	r3, [sp, #4]
 8008f34:	3b04      	subs	r3, #4
 8008f36:	429d      	cmp	r5, r3
 8008f38:	461a      	mov	r2, r3
 8008f3a:	d32f      	bcc.n	8008f9c <quorem+0xf4>
 8008f3c:	613c      	str	r4, [r7, #16]
 8008f3e:	4638      	mov	r0, r7
 8008f40:	f001 f9c6 	bl	800a2d0 <__mcmp>
 8008f44:	2800      	cmp	r0, #0
 8008f46:	db25      	blt.n	8008f94 <quorem+0xec>
 8008f48:	4629      	mov	r1, r5
 8008f4a:	2000      	movs	r0, #0
 8008f4c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f50:	f8d1 c000 	ldr.w	ip, [r1]
 8008f54:	fa1f fe82 	uxth.w	lr, r2
 8008f58:	fa1f f38c 	uxth.w	r3, ip
 8008f5c:	eba3 030e 	sub.w	r3, r3, lr
 8008f60:	4403      	add	r3, r0
 8008f62:	0c12      	lsrs	r2, r2, #16
 8008f64:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008f68:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f72:	45c1      	cmp	r9, r8
 8008f74:	f841 3b04 	str.w	r3, [r1], #4
 8008f78:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008f7c:	d2e6      	bcs.n	8008f4c <quorem+0xa4>
 8008f7e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f86:	b922      	cbnz	r2, 8008f92 <quorem+0xea>
 8008f88:	3b04      	subs	r3, #4
 8008f8a:	429d      	cmp	r5, r3
 8008f8c:	461a      	mov	r2, r3
 8008f8e:	d30b      	bcc.n	8008fa8 <quorem+0x100>
 8008f90:	613c      	str	r4, [r7, #16]
 8008f92:	3601      	adds	r6, #1
 8008f94:	4630      	mov	r0, r6
 8008f96:	b003      	add	sp, #12
 8008f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f9c:	6812      	ldr	r2, [r2, #0]
 8008f9e:	3b04      	subs	r3, #4
 8008fa0:	2a00      	cmp	r2, #0
 8008fa2:	d1cb      	bne.n	8008f3c <quorem+0x94>
 8008fa4:	3c01      	subs	r4, #1
 8008fa6:	e7c6      	b.n	8008f36 <quorem+0x8e>
 8008fa8:	6812      	ldr	r2, [r2, #0]
 8008faa:	3b04      	subs	r3, #4
 8008fac:	2a00      	cmp	r2, #0
 8008fae:	d1ef      	bne.n	8008f90 <quorem+0xe8>
 8008fb0:	3c01      	subs	r4, #1
 8008fb2:	e7ea      	b.n	8008f8a <quorem+0xe2>
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	e7ee      	b.n	8008f96 <quorem+0xee>

08008fb8 <_dtoa_r>:
 8008fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fbc:	69c7      	ldr	r7, [r0, #28]
 8008fbe:	b097      	sub	sp, #92	@ 0x5c
 8008fc0:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008fc4:	ec55 4b10 	vmov	r4, r5, d0
 8008fc8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008fca:	9107      	str	r1, [sp, #28]
 8008fcc:	4681      	mov	r9, r0
 8008fce:	920c      	str	r2, [sp, #48]	@ 0x30
 8008fd0:	9311      	str	r3, [sp, #68]	@ 0x44
 8008fd2:	b97f      	cbnz	r7, 8008ff4 <_dtoa_r+0x3c>
 8008fd4:	2010      	movs	r0, #16
 8008fd6:	f000 fe09 	bl	8009bec <malloc>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	f8c9 001c 	str.w	r0, [r9, #28]
 8008fe0:	b920      	cbnz	r0, 8008fec <_dtoa_r+0x34>
 8008fe2:	4ba9      	ldr	r3, [pc, #676]	@ (8009288 <_dtoa_r+0x2d0>)
 8008fe4:	21ef      	movs	r1, #239	@ 0xef
 8008fe6:	48a9      	ldr	r0, [pc, #676]	@ (800928c <_dtoa_r+0x2d4>)
 8008fe8:	f002 fc3a 	bl	800b860 <__assert_func>
 8008fec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008ff0:	6007      	str	r7, [r0, #0]
 8008ff2:	60c7      	str	r7, [r0, #12]
 8008ff4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008ff8:	6819      	ldr	r1, [r3, #0]
 8008ffa:	b159      	cbz	r1, 8009014 <_dtoa_r+0x5c>
 8008ffc:	685a      	ldr	r2, [r3, #4]
 8008ffe:	604a      	str	r2, [r1, #4]
 8009000:	2301      	movs	r3, #1
 8009002:	4093      	lsls	r3, r2
 8009004:	608b      	str	r3, [r1, #8]
 8009006:	4648      	mov	r0, r9
 8009008:	f000 fee6 	bl	8009dd8 <_Bfree>
 800900c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009010:	2200      	movs	r2, #0
 8009012:	601a      	str	r2, [r3, #0]
 8009014:	1e2b      	subs	r3, r5, #0
 8009016:	bfb9      	ittee	lt
 8009018:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800901c:	9305      	strlt	r3, [sp, #20]
 800901e:	2300      	movge	r3, #0
 8009020:	6033      	strge	r3, [r6, #0]
 8009022:	9f05      	ldr	r7, [sp, #20]
 8009024:	4b9a      	ldr	r3, [pc, #616]	@ (8009290 <_dtoa_r+0x2d8>)
 8009026:	bfbc      	itt	lt
 8009028:	2201      	movlt	r2, #1
 800902a:	6032      	strlt	r2, [r6, #0]
 800902c:	43bb      	bics	r3, r7
 800902e:	d112      	bne.n	8009056 <_dtoa_r+0x9e>
 8009030:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009032:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009036:	6013      	str	r3, [r2, #0]
 8009038:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800903c:	4323      	orrs	r3, r4
 800903e:	f000 855a 	beq.w	8009af6 <_dtoa_r+0xb3e>
 8009042:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009044:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80092a4 <_dtoa_r+0x2ec>
 8009048:	2b00      	cmp	r3, #0
 800904a:	f000 855c 	beq.w	8009b06 <_dtoa_r+0xb4e>
 800904e:	f10a 0303 	add.w	r3, sl, #3
 8009052:	f000 bd56 	b.w	8009b02 <_dtoa_r+0xb4a>
 8009056:	ed9d 7b04 	vldr	d7, [sp, #16]
 800905a:	2200      	movs	r2, #0
 800905c:	ec51 0b17 	vmov	r0, r1, d7
 8009060:	2300      	movs	r3, #0
 8009062:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009066:	f7f7 fd37 	bl	8000ad8 <__aeabi_dcmpeq>
 800906a:	4680      	mov	r8, r0
 800906c:	b158      	cbz	r0, 8009086 <_dtoa_r+0xce>
 800906e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009070:	2301      	movs	r3, #1
 8009072:	6013      	str	r3, [r2, #0]
 8009074:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009076:	b113      	cbz	r3, 800907e <_dtoa_r+0xc6>
 8009078:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800907a:	4b86      	ldr	r3, [pc, #536]	@ (8009294 <_dtoa_r+0x2dc>)
 800907c:	6013      	str	r3, [r2, #0]
 800907e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80092a8 <_dtoa_r+0x2f0>
 8009082:	f000 bd40 	b.w	8009b06 <_dtoa_r+0xb4e>
 8009086:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800908a:	aa14      	add	r2, sp, #80	@ 0x50
 800908c:	a915      	add	r1, sp, #84	@ 0x54
 800908e:	4648      	mov	r0, r9
 8009090:	f001 fa3e 	bl	800a510 <__d2b>
 8009094:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009098:	9002      	str	r0, [sp, #8]
 800909a:	2e00      	cmp	r6, #0
 800909c:	d078      	beq.n	8009190 <_dtoa_r+0x1d8>
 800909e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090a0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80090a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80090ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80090b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80090b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80090b8:	4619      	mov	r1, r3
 80090ba:	2200      	movs	r2, #0
 80090bc:	4b76      	ldr	r3, [pc, #472]	@ (8009298 <_dtoa_r+0x2e0>)
 80090be:	f7f7 f8eb 	bl	8000298 <__aeabi_dsub>
 80090c2:	a36b      	add	r3, pc, #428	@ (adr r3, 8009270 <_dtoa_r+0x2b8>)
 80090c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c8:	f7f7 fa9e 	bl	8000608 <__aeabi_dmul>
 80090cc:	a36a      	add	r3, pc, #424	@ (adr r3, 8009278 <_dtoa_r+0x2c0>)
 80090ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d2:	f7f7 f8e3 	bl	800029c <__adddf3>
 80090d6:	4604      	mov	r4, r0
 80090d8:	4630      	mov	r0, r6
 80090da:	460d      	mov	r5, r1
 80090dc:	f7f7 fa2a 	bl	8000534 <__aeabi_i2d>
 80090e0:	a367      	add	r3, pc, #412	@ (adr r3, 8009280 <_dtoa_r+0x2c8>)
 80090e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e6:	f7f7 fa8f 	bl	8000608 <__aeabi_dmul>
 80090ea:	4602      	mov	r2, r0
 80090ec:	460b      	mov	r3, r1
 80090ee:	4620      	mov	r0, r4
 80090f0:	4629      	mov	r1, r5
 80090f2:	f7f7 f8d3 	bl	800029c <__adddf3>
 80090f6:	4604      	mov	r4, r0
 80090f8:	460d      	mov	r5, r1
 80090fa:	f7f7 fd35 	bl	8000b68 <__aeabi_d2iz>
 80090fe:	2200      	movs	r2, #0
 8009100:	4607      	mov	r7, r0
 8009102:	2300      	movs	r3, #0
 8009104:	4620      	mov	r0, r4
 8009106:	4629      	mov	r1, r5
 8009108:	f7f7 fcf0 	bl	8000aec <__aeabi_dcmplt>
 800910c:	b140      	cbz	r0, 8009120 <_dtoa_r+0x168>
 800910e:	4638      	mov	r0, r7
 8009110:	f7f7 fa10 	bl	8000534 <__aeabi_i2d>
 8009114:	4622      	mov	r2, r4
 8009116:	462b      	mov	r3, r5
 8009118:	f7f7 fcde 	bl	8000ad8 <__aeabi_dcmpeq>
 800911c:	b900      	cbnz	r0, 8009120 <_dtoa_r+0x168>
 800911e:	3f01      	subs	r7, #1
 8009120:	2f16      	cmp	r7, #22
 8009122:	d852      	bhi.n	80091ca <_dtoa_r+0x212>
 8009124:	4b5d      	ldr	r3, [pc, #372]	@ (800929c <_dtoa_r+0x2e4>)
 8009126:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800912a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009132:	f7f7 fcdb 	bl	8000aec <__aeabi_dcmplt>
 8009136:	2800      	cmp	r0, #0
 8009138:	d049      	beq.n	80091ce <_dtoa_r+0x216>
 800913a:	3f01      	subs	r7, #1
 800913c:	2300      	movs	r3, #0
 800913e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009140:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009142:	1b9b      	subs	r3, r3, r6
 8009144:	1e5a      	subs	r2, r3, #1
 8009146:	bf45      	ittet	mi
 8009148:	f1c3 0301 	rsbmi	r3, r3, #1
 800914c:	9300      	strmi	r3, [sp, #0]
 800914e:	2300      	movpl	r3, #0
 8009150:	2300      	movmi	r3, #0
 8009152:	9206      	str	r2, [sp, #24]
 8009154:	bf54      	ite	pl
 8009156:	9300      	strpl	r3, [sp, #0]
 8009158:	9306      	strmi	r3, [sp, #24]
 800915a:	2f00      	cmp	r7, #0
 800915c:	db39      	blt.n	80091d2 <_dtoa_r+0x21a>
 800915e:	9b06      	ldr	r3, [sp, #24]
 8009160:	970d      	str	r7, [sp, #52]	@ 0x34
 8009162:	443b      	add	r3, r7
 8009164:	9306      	str	r3, [sp, #24]
 8009166:	2300      	movs	r3, #0
 8009168:	9308      	str	r3, [sp, #32]
 800916a:	9b07      	ldr	r3, [sp, #28]
 800916c:	2b09      	cmp	r3, #9
 800916e:	d863      	bhi.n	8009238 <_dtoa_r+0x280>
 8009170:	2b05      	cmp	r3, #5
 8009172:	bfc4      	itt	gt
 8009174:	3b04      	subgt	r3, #4
 8009176:	9307      	strgt	r3, [sp, #28]
 8009178:	9b07      	ldr	r3, [sp, #28]
 800917a:	f1a3 0302 	sub.w	r3, r3, #2
 800917e:	bfcc      	ite	gt
 8009180:	2400      	movgt	r4, #0
 8009182:	2401      	movle	r4, #1
 8009184:	2b03      	cmp	r3, #3
 8009186:	d863      	bhi.n	8009250 <_dtoa_r+0x298>
 8009188:	e8df f003 	tbb	[pc, r3]
 800918c:	2b375452 	.word	0x2b375452
 8009190:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009194:	441e      	add	r6, r3
 8009196:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800919a:	2b20      	cmp	r3, #32
 800919c:	bfc1      	itttt	gt
 800919e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80091a2:	409f      	lslgt	r7, r3
 80091a4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80091a8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80091ac:	bfd6      	itet	le
 80091ae:	f1c3 0320 	rsble	r3, r3, #32
 80091b2:	ea47 0003 	orrgt.w	r0, r7, r3
 80091b6:	fa04 f003 	lslle.w	r0, r4, r3
 80091ba:	f7f7 f9ab 	bl	8000514 <__aeabi_ui2d>
 80091be:	2201      	movs	r2, #1
 80091c0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80091c4:	3e01      	subs	r6, #1
 80091c6:	9212      	str	r2, [sp, #72]	@ 0x48
 80091c8:	e776      	b.n	80090b8 <_dtoa_r+0x100>
 80091ca:	2301      	movs	r3, #1
 80091cc:	e7b7      	b.n	800913e <_dtoa_r+0x186>
 80091ce:	9010      	str	r0, [sp, #64]	@ 0x40
 80091d0:	e7b6      	b.n	8009140 <_dtoa_r+0x188>
 80091d2:	9b00      	ldr	r3, [sp, #0]
 80091d4:	1bdb      	subs	r3, r3, r7
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	427b      	negs	r3, r7
 80091da:	9308      	str	r3, [sp, #32]
 80091dc:	2300      	movs	r3, #0
 80091de:	930d      	str	r3, [sp, #52]	@ 0x34
 80091e0:	e7c3      	b.n	800916a <_dtoa_r+0x1b2>
 80091e2:	2301      	movs	r3, #1
 80091e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80091e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80091e8:	eb07 0b03 	add.w	fp, r7, r3
 80091ec:	f10b 0301 	add.w	r3, fp, #1
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	9303      	str	r3, [sp, #12]
 80091f4:	bfb8      	it	lt
 80091f6:	2301      	movlt	r3, #1
 80091f8:	e006      	b.n	8009208 <_dtoa_r+0x250>
 80091fa:	2301      	movs	r3, #1
 80091fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80091fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009200:	2b00      	cmp	r3, #0
 8009202:	dd28      	ble.n	8009256 <_dtoa_r+0x29e>
 8009204:	469b      	mov	fp, r3
 8009206:	9303      	str	r3, [sp, #12]
 8009208:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800920c:	2100      	movs	r1, #0
 800920e:	2204      	movs	r2, #4
 8009210:	f102 0514 	add.w	r5, r2, #20
 8009214:	429d      	cmp	r5, r3
 8009216:	d926      	bls.n	8009266 <_dtoa_r+0x2ae>
 8009218:	6041      	str	r1, [r0, #4]
 800921a:	4648      	mov	r0, r9
 800921c:	f000 fd9c 	bl	8009d58 <_Balloc>
 8009220:	4682      	mov	sl, r0
 8009222:	2800      	cmp	r0, #0
 8009224:	d142      	bne.n	80092ac <_dtoa_r+0x2f4>
 8009226:	4b1e      	ldr	r3, [pc, #120]	@ (80092a0 <_dtoa_r+0x2e8>)
 8009228:	4602      	mov	r2, r0
 800922a:	f240 11af 	movw	r1, #431	@ 0x1af
 800922e:	e6da      	b.n	8008fe6 <_dtoa_r+0x2e>
 8009230:	2300      	movs	r3, #0
 8009232:	e7e3      	b.n	80091fc <_dtoa_r+0x244>
 8009234:	2300      	movs	r3, #0
 8009236:	e7d5      	b.n	80091e4 <_dtoa_r+0x22c>
 8009238:	2401      	movs	r4, #1
 800923a:	2300      	movs	r3, #0
 800923c:	9307      	str	r3, [sp, #28]
 800923e:	9409      	str	r4, [sp, #36]	@ 0x24
 8009240:	f04f 3bff 	mov.w	fp, #4294967295
 8009244:	2200      	movs	r2, #0
 8009246:	f8cd b00c 	str.w	fp, [sp, #12]
 800924a:	2312      	movs	r3, #18
 800924c:	920c      	str	r2, [sp, #48]	@ 0x30
 800924e:	e7db      	b.n	8009208 <_dtoa_r+0x250>
 8009250:	2301      	movs	r3, #1
 8009252:	9309      	str	r3, [sp, #36]	@ 0x24
 8009254:	e7f4      	b.n	8009240 <_dtoa_r+0x288>
 8009256:	f04f 0b01 	mov.w	fp, #1
 800925a:	f8cd b00c 	str.w	fp, [sp, #12]
 800925e:	465b      	mov	r3, fp
 8009260:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009264:	e7d0      	b.n	8009208 <_dtoa_r+0x250>
 8009266:	3101      	adds	r1, #1
 8009268:	0052      	lsls	r2, r2, #1
 800926a:	e7d1      	b.n	8009210 <_dtoa_r+0x258>
 800926c:	f3af 8000 	nop.w
 8009270:	636f4361 	.word	0x636f4361
 8009274:	3fd287a7 	.word	0x3fd287a7
 8009278:	8b60c8b3 	.word	0x8b60c8b3
 800927c:	3fc68a28 	.word	0x3fc68a28
 8009280:	509f79fb 	.word	0x509f79fb
 8009284:	3fd34413 	.word	0x3fd34413
 8009288:	0800c85e 	.word	0x0800c85e
 800928c:	0800c875 	.word	0x0800c875
 8009290:	7ff00000 	.word	0x7ff00000
 8009294:	0800c829 	.word	0x0800c829
 8009298:	3ff80000 	.word	0x3ff80000
 800929c:	0800ca28 	.word	0x0800ca28
 80092a0:	0800c8cd 	.word	0x0800c8cd
 80092a4:	0800c85a 	.word	0x0800c85a
 80092a8:	0800c828 	.word	0x0800c828
 80092ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80092b0:	6018      	str	r0, [r3, #0]
 80092b2:	9b03      	ldr	r3, [sp, #12]
 80092b4:	2b0e      	cmp	r3, #14
 80092b6:	f200 80a1 	bhi.w	80093fc <_dtoa_r+0x444>
 80092ba:	2c00      	cmp	r4, #0
 80092bc:	f000 809e 	beq.w	80093fc <_dtoa_r+0x444>
 80092c0:	2f00      	cmp	r7, #0
 80092c2:	dd33      	ble.n	800932c <_dtoa_r+0x374>
 80092c4:	4b9c      	ldr	r3, [pc, #624]	@ (8009538 <_dtoa_r+0x580>)
 80092c6:	f007 020f 	and.w	r2, r7, #15
 80092ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092ce:	ed93 7b00 	vldr	d7, [r3]
 80092d2:	05f8      	lsls	r0, r7, #23
 80092d4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80092d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80092dc:	d516      	bpl.n	800930c <_dtoa_r+0x354>
 80092de:	4b97      	ldr	r3, [pc, #604]	@ (800953c <_dtoa_r+0x584>)
 80092e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80092e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80092e8:	f7f7 fab8 	bl	800085c <__aeabi_ddiv>
 80092ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092f0:	f004 040f 	and.w	r4, r4, #15
 80092f4:	2603      	movs	r6, #3
 80092f6:	4d91      	ldr	r5, [pc, #580]	@ (800953c <_dtoa_r+0x584>)
 80092f8:	b954      	cbnz	r4, 8009310 <_dtoa_r+0x358>
 80092fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80092fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009302:	f7f7 faab 	bl	800085c <__aeabi_ddiv>
 8009306:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800930a:	e028      	b.n	800935e <_dtoa_r+0x3a6>
 800930c:	2602      	movs	r6, #2
 800930e:	e7f2      	b.n	80092f6 <_dtoa_r+0x33e>
 8009310:	07e1      	lsls	r1, r4, #31
 8009312:	d508      	bpl.n	8009326 <_dtoa_r+0x36e>
 8009314:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009318:	e9d5 2300 	ldrd	r2, r3, [r5]
 800931c:	f7f7 f974 	bl	8000608 <__aeabi_dmul>
 8009320:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009324:	3601      	adds	r6, #1
 8009326:	1064      	asrs	r4, r4, #1
 8009328:	3508      	adds	r5, #8
 800932a:	e7e5      	b.n	80092f8 <_dtoa_r+0x340>
 800932c:	f000 80af 	beq.w	800948e <_dtoa_r+0x4d6>
 8009330:	427c      	negs	r4, r7
 8009332:	4b81      	ldr	r3, [pc, #516]	@ (8009538 <_dtoa_r+0x580>)
 8009334:	4d81      	ldr	r5, [pc, #516]	@ (800953c <_dtoa_r+0x584>)
 8009336:	f004 020f 	and.w	r2, r4, #15
 800933a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800933e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009342:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009346:	f7f7 f95f 	bl	8000608 <__aeabi_dmul>
 800934a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800934e:	1124      	asrs	r4, r4, #4
 8009350:	2300      	movs	r3, #0
 8009352:	2602      	movs	r6, #2
 8009354:	2c00      	cmp	r4, #0
 8009356:	f040 808f 	bne.w	8009478 <_dtoa_r+0x4c0>
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1d3      	bne.n	8009306 <_dtoa_r+0x34e>
 800935e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009360:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009364:	2b00      	cmp	r3, #0
 8009366:	f000 8094 	beq.w	8009492 <_dtoa_r+0x4da>
 800936a:	4b75      	ldr	r3, [pc, #468]	@ (8009540 <_dtoa_r+0x588>)
 800936c:	2200      	movs	r2, #0
 800936e:	4620      	mov	r0, r4
 8009370:	4629      	mov	r1, r5
 8009372:	f7f7 fbbb 	bl	8000aec <__aeabi_dcmplt>
 8009376:	2800      	cmp	r0, #0
 8009378:	f000 808b 	beq.w	8009492 <_dtoa_r+0x4da>
 800937c:	9b03      	ldr	r3, [sp, #12]
 800937e:	2b00      	cmp	r3, #0
 8009380:	f000 8087 	beq.w	8009492 <_dtoa_r+0x4da>
 8009384:	f1bb 0f00 	cmp.w	fp, #0
 8009388:	dd34      	ble.n	80093f4 <_dtoa_r+0x43c>
 800938a:	4620      	mov	r0, r4
 800938c:	4b6d      	ldr	r3, [pc, #436]	@ (8009544 <_dtoa_r+0x58c>)
 800938e:	2200      	movs	r2, #0
 8009390:	4629      	mov	r1, r5
 8009392:	f7f7 f939 	bl	8000608 <__aeabi_dmul>
 8009396:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800939a:	f107 38ff 	add.w	r8, r7, #4294967295
 800939e:	3601      	adds	r6, #1
 80093a0:	465c      	mov	r4, fp
 80093a2:	4630      	mov	r0, r6
 80093a4:	f7f7 f8c6 	bl	8000534 <__aeabi_i2d>
 80093a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093ac:	f7f7 f92c 	bl	8000608 <__aeabi_dmul>
 80093b0:	4b65      	ldr	r3, [pc, #404]	@ (8009548 <_dtoa_r+0x590>)
 80093b2:	2200      	movs	r2, #0
 80093b4:	f7f6 ff72 	bl	800029c <__adddf3>
 80093b8:	4605      	mov	r5, r0
 80093ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80093be:	2c00      	cmp	r4, #0
 80093c0:	d16a      	bne.n	8009498 <_dtoa_r+0x4e0>
 80093c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093c6:	4b61      	ldr	r3, [pc, #388]	@ (800954c <_dtoa_r+0x594>)
 80093c8:	2200      	movs	r2, #0
 80093ca:	f7f6 ff65 	bl	8000298 <__aeabi_dsub>
 80093ce:	4602      	mov	r2, r0
 80093d0:	460b      	mov	r3, r1
 80093d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80093d6:	462a      	mov	r2, r5
 80093d8:	4633      	mov	r3, r6
 80093da:	f7f7 fba5 	bl	8000b28 <__aeabi_dcmpgt>
 80093de:	2800      	cmp	r0, #0
 80093e0:	f040 8298 	bne.w	8009914 <_dtoa_r+0x95c>
 80093e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093e8:	462a      	mov	r2, r5
 80093ea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80093ee:	f7f7 fb7d 	bl	8000aec <__aeabi_dcmplt>
 80093f2:	bb38      	cbnz	r0, 8009444 <_dtoa_r+0x48c>
 80093f4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80093f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80093fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80093fe:	2b00      	cmp	r3, #0
 8009400:	f2c0 8157 	blt.w	80096b2 <_dtoa_r+0x6fa>
 8009404:	2f0e      	cmp	r7, #14
 8009406:	f300 8154 	bgt.w	80096b2 <_dtoa_r+0x6fa>
 800940a:	4b4b      	ldr	r3, [pc, #300]	@ (8009538 <_dtoa_r+0x580>)
 800940c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009410:	ed93 7b00 	vldr	d7, [r3]
 8009414:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009416:	2b00      	cmp	r3, #0
 8009418:	ed8d 7b00 	vstr	d7, [sp]
 800941c:	f280 80e5 	bge.w	80095ea <_dtoa_r+0x632>
 8009420:	9b03      	ldr	r3, [sp, #12]
 8009422:	2b00      	cmp	r3, #0
 8009424:	f300 80e1 	bgt.w	80095ea <_dtoa_r+0x632>
 8009428:	d10c      	bne.n	8009444 <_dtoa_r+0x48c>
 800942a:	4b48      	ldr	r3, [pc, #288]	@ (800954c <_dtoa_r+0x594>)
 800942c:	2200      	movs	r2, #0
 800942e:	ec51 0b17 	vmov	r0, r1, d7
 8009432:	f7f7 f8e9 	bl	8000608 <__aeabi_dmul>
 8009436:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800943a:	f7f7 fb6b 	bl	8000b14 <__aeabi_dcmpge>
 800943e:	2800      	cmp	r0, #0
 8009440:	f000 8266 	beq.w	8009910 <_dtoa_r+0x958>
 8009444:	2400      	movs	r4, #0
 8009446:	4625      	mov	r5, r4
 8009448:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800944a:	4656      	mov	r6, sl
 800944c:	ea6f 0803 	mvn.w	r8, r3
 8009450:	2700      	movs	r7, #0
 8009452:	4621      	mov	r1, r4
 8009454:	4648      	mov	r0, r9
 8009456:	f000 fcbf 	bl	8009dd8 <_Bfree>
 800945a:	2d00      	cmp	r5, #0
 800945c:	f000 80bd 	beq.w	80095da <_dtoa_r+0x622>
 8009460:	b12f      	cbz	r7, 800946e <_dtoa_r+0x4b6>
 8009462:	42af      	cmp	r7, r5
 8009464:	d003      	beq.n	800946e <_dtoa_r+0x4b6>
 8009466:	4639      	mov	r1, r7
 8009468:	4648      	mov	r0, r9
 800946a:	f000 fcb5 	bl	8009dd8 <_Bfree>
 800946e:	4629      	mov	r1, r5
 8009470:	4648      	mov	r0, r9
 8009472:	f000 fcb1 	bl	8009dd8 <_Bfree>
 8009476:	e0b0      	b.n	80095da <_dtoa_r+0x622>
 8009478:	07e2      	lsls	r2, r4, #31
 800947a:	d505      	bpl.n	8009488 <_dtoa_r+0x4d0>
 800947c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009480:	f7f7 f8c2 	bl	8000608 <__aeabi_dmul>
 8009484:	3601      	adds	r6, #1
 8009486:	2301      	movs	r3, #1
 8009488:	1064      	asrs	r4, r4, #1
 800948a:	3508      	adds	r5, #8
 800948c:	e762      	b.n	8009354 <_dtoa_r+0x39c>
 800948e:	2602      	movs	r6, #2
 8009490:	e765      	b.n	800935e <_dtoa_r+0x3a6>
 8009492:	9c03      	ldr	r4, [sp, #12]
 8009494:	46b8      	mov	r8, r7
 8009496:	e784      	b.n	80093a2 <_dtoa_r+0x3ea>
 8009498:	4b27      	ldr	r3, [pc, #156]	@ (8009538 <_dtoa_r+0x580>)
 800949a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800949c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80094a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80094a4:	4454      	add	r4, sl
 80094a6:	2900      	cmp	r1, #0
 80094a8:	d054      	beq.n	8009554 <_dtoa_r+0x59c>
 80094aa:	4929      	ldr	r1, [pc, #164]	@ (8009550 <_dtoa_r+0x598>)
 80094ac:	2000      	movs	r0, #0
 80094ae:	f7f7 f9d5 	bl	800085c <__aeabi_ddiv>
 80094b2:	4633      	mov	r3, r6
 80094b4:	462a      	mov	r2, r5
 80094b6:	f7f6 feef 	bl	8000298 <__aeabi_dsub>
 80094ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80094be:	4656      	mov	r6, sl
 80094c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094c4:	f7f7 fb50 	bl	8000b68 <__aeabi_d2iz>
 80094c8:	4605      	mov	r5, r0
 80094ca:	f7f7 f833 	bl	8000534 <__aeabi_i2d>
 80094ce:	4602      	mov	r2, r0
 80094d0:	460b      	mov	r3, r1
 80094d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094d6:	f7f6 fedf 	bl	8000298 <__aeabi_dsub>
 80094da:	3530      	adds	r5, #48	@ 0x30
 80094dc:	4602      	mov	r2, r0
 80094de:	460b      	mov	r3, r1
 80094e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80094e4:	f806 5b01 	strb.w	r5, [r6], #1
 80094e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80094ec:	f7f7 fafe 	bl	8000aec <__aeabi_dcmplt>
 80094f0:	2800      	cmp	r0, #0
 80094f2:	d172      	bne.n	80095da <_dtoa_r+0x622>
 80094f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094f8:	4911      	ldr	r1, [pc, #68]	@ (8009540 <_dtoa_r+0x588>)
 80094fa:	2000      	movs	r0, #0
 80094fc:	f7f6 fecc 	bl	8000298 <__aeabi_dsub>
 8009500:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009504:	f7f7 faf2 	bl	8000aec <__aeabi_dcmplt>
 8009508:	2800      	cmp	r0, #0
 800950a:	f040 80b4 	bne.w	8009676 <_dtoa_r+0x6be>
 800950e:	42a6      	cmp	r6, r4
 8009510:	f43f af70 	beq.w	80093f4 <_dtoa_r+0x43c>
 8009514:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009518:	4b0a      	ldr	r3, [pc, #40]	@ (8009544 <_dtoa_r+0x58c>)
 800951a:	2200      	movs	r2, #0
 800951c:	f7f7 f874 	bl	8000608 <__aeabi_dmul>
 8009520:	4b08      	ldr	r3, [pc, #32]	@ (8009544 <_dtoa_r+0x58c>)
 8009522:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009526:	2200      	movs	r2, #0
 8009528:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800952c:	f7f7 f86c 	bl	8000608 <__aeabi_dmul>
 8009530:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009534:	e7c4      	b.n	80094c0 <_dtoa_r+0x508>
 8009536:	bf00      	nop
 8009538:	0800ca28 	.word	0x0800ca28
 800953c:	0800ca00 	.word	0x0800ca00
 8009540:	3ff00000 	.word	0x3ff00000
 8009544:	40240000 	.word	0x40240000
 8009548:	401c0000 	.word	0x401c0000
 800954c:	40140000 	.word	0x40140000
 8009550:	3fe00000 	.word	0x3fe00000
 8009554:	4631      	mov	r1, r6
 8009556:	4628      	mov	r0, r5
 8009558:	f7f7 f856 	bl	8000608 <__aeabi_dmul>
 800955c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009560:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009562:	4656      	mov	r6, sl
 8009564:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009568:	f7f7 fafe 	bl	8000b68 <__aeabi_d2iz>
 800956c:	4605      	mov	r5, r0
 800956e:	f7f6 ffe1 	bl	8000534 <__aeabi_i2d>
 8009572:	4602      	mov	r2, r0
 8009574:	460b      	mov	r3, r1
 8009576:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800957a:	f7f6 fe8d 	bl	8000298 <__aeabi_dsub>
 800957e:	3530      	adds	r5, #48	@ 0x30
 8009580:	f806 5b01 	strb.w	r5, [r6], #1
 8009584:	4602      	mov	r2, r0
 8009586:	460b      	mov	r3, r1
 8009588:	42a6      	cmp	r6, r4
 800958a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800958e:	f04f 0200 	mov.w	r2, #0
 8009592:	d124      	bne.n	80095de <_dtoa_r+0x626>
 8009594:	4baf      	ldr	r3, [pc, #700]	@ (8009854 <_dtoa_r+0x89c>)
 8009596:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800959a:	f7f6 fe7f 	bl	800029c <__adddf3>
 800959e:	4602      	mov	r2, r0
 80095a0:	460b      	mov	r3, r1
 80095a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095a6:	f7f7 fabf 	bl	8000b28 <__aeabi_dcmpgt>
 80095aa:	2800      	cmp	r0, #0
 80095ac:	d163      	bne.n	8009676 <_dtoa_r+0x6be>
 80095ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80095b2:	49a8      	ldr	r1, [pc, #672]	@ (8009854 <_dtoa_r+0x89c>)
 80095b4:	2000      	movs	r0, #0
 80095b6:	f7f6 fe6f 	bl	8000298 <__aeabi_dsub>
 80095ba:	4602      	mov	r2, r0
 80095bc:	460b      	mov	r3, r1
 80095be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095c2:	f7f7 fa93 	bl	8000aec <__aeabi_dcmplt>
 80095c6:	2800      	cmp	r0, #0
 80095c8:	f43f af14 	beq.w	80093f4 <_dtoa_r+0x43c>
 80095cc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80095ce:	1e73      	subs	r3, r6, #1
 80095d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80095d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80095d6:	2b30      	cmp	r3, #48	@ 0x30
 80095d8:	d0f8      	beq.n	80095cc <_dtoa_r+0x614>
 80095da:	4647      	mov	r7, r8
 80095dc:	e03b      	b.n	8009656 <_dtoa_r+0x69e>
 80095de:	4b9e      	ldr	r3, [pc, #632]	@ (8009858 <_dtoa_r+0x8a0>)
 80095e0:	f7f7 f812 	bl	8000608 <__aeabi_dmul>
 80095e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80095e8:	e7bc      	b.n	8009564 <_dtoa_r+0x5ac>
 80095ea:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80095ee:	4656      	mov	r6, sl
 80095f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095f4:	4620      	mov	r0, r4
 80095f6:	4629      	mov	r1, r5
 80095f8:	f7f7 f930 	bl	800085c <__aeabi_ddiv>
 80095fc:	f7f7 fab4 	bl	8000b68 <__aeabi_d2iz>
 8009600:	4680      	mov	r8, r0
 8009602:	f7f6 ff97 	bl	8000534 <__aeabi_i2d>
 8009606:	e9dd 2300 	ldrd	r2, r3, [sp]
 800960a:	f7f6 fffd 	bl	8000608 <__aeabi_dmul>
 800960e:	4602      	mov	r2, r0
 8009610:	460b      	mov	r3, r1
 8009612:	4620      	mov	r0, r4
 8009614:	4629      	mov	r1, r5
 8009616:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800961a:	f7f6 fe3d 	bl	8000298 <__aeabi_dsub>
 800961e:	f806 4b01 	strb.w	r4, [r6], #1
 8009622:	9d03      	ldr	r5, [sp, #12]
 8009624:	eba6 040a 	sub.w	r4, r6, sl
 8009628:	42a5      	cmp	r5, r4
 800962a:	4602      	mov	r2, r0
 800962c:	460b      	mov	r3, r1
 800962e:	d133      	bne.n	8009698 <_dtoa_r+0x6e0>
 8009630:	f7f6 fe34 	bl	800029c <__adddf3>
 8009634:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009638:	4604      	mov	r4, r0
 800963a:	460d      	mov	r5, r1
 800963c:	f7f7 fa74 	bl	8000b28 <__aeabi_dcmpgt>
 8009640:	b9c0      	cbnz	r0, 8009674 <_dtoa_r+0x6bc>
 8009642:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009646:	4620      	mov	r0, r4
 8009648:	4629      	mov	r1, r5
 800964a:	f7f7 fa45 	bl	8000ad8 <__aeabi_dcmpeq>
 800964e:	b110      	cbz	r0, 8009656 <_dtoa_r+0x69e>
 8009650:	f018 0f01 	tst.w	r8, #1
 8009654:	d10e      	bne.n	8009674 <_dtoa_r+0x6bc>
 8009656:	9902      	ldr	r1, [sp, #8]
 8009658:	4648      	mov	r0, r9
 800965a:	f000 fbbd 	bl	8009dd8 <_Bfree>
 800965e:	2300      	movs	r3, #0
 8009660:	7033      	strb	r3, [r6, #0]
 8009662:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009664:	3701      	adds	r7, #1
 8009666:	601f      	str	r7, [r3, #0]
 8009668:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800966a:	2b00      	cmp	r3, #0
 800966c:	f000 824b 	beq.w	8009b06 <_dtoa_r+0xb4e>
 8009670:	601e      	str	r6, [r3, #0]
 8009672:	e248      	b.n	8009b06 <_dtoa_r+0xb4e>
 8009674:	46b8      	mov	r8, r7
 8009676:	4633      	mov	r3, r6
 8009678:	461e      	mov	r6, r3
 800967a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800967e:	2a39      	cmp	r2, #57	@ 0x39
 8009680:	d106      	bne.n	8009690 <_dtoa_r+0x6d8>
 8009682:	459a      	cmp	sl, r3
 8009684:	d1f8      	bne.n	8009678 <_dtoa_r+0x6c0>
 8009686:	2230      	movs	r2, #48	@ 0x30
 8009688:	f108 0801 	add.w	r8, r8, #1
 800968c:	f88a 2000 	strb.w	r2, [sl]
 8009690:	781a      	ldrb	r2, [r3, #0]
 8009692:	3201      	adds	r2, #1
 8009694:	701a      	strb	r2, [r3, #0]
 8009696:	e7a0      	b.n	80095da <_dtoa_r+0x622>
 8009698:	4b6f      	ldr	r3, [pc, #444]	@ (8009858 <_dtoa_r+0x8a0>)
 800969a:	2200      	movs	r2, #0
 800969c:	f7f6 ffb4 	bl	8000608 <__aeabi_dmul>
 80096a0:	2200      	movs	r2, #0
 80096a2:	2300      	movs	r3, #0
 80096a4:	4604      	mov	r4, r0
 80096a6:	460d      	mov	r5, r1
 80096a8:	f7f7 fa16 	bl	8000ad8 <__aeabi_dcmpeq>
 80096ac:	2800      	cmp	r0, #0
 80096ae:	d09f      	beq.n	80095f0 <_dtoa_r+0x638>
 80096b0:	e7d1      	b.n	8009656 <_dtoa_r+0x69e>
 80096b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096b4:	2a00      	cmp	r2, #0
 80096b6:	f000 80ea 	beq.w	800988e <_dtoa_r+0x8d6>
 80096ba:	9a07      	ldr	r2, [sp, #28]
 80096bc:	2a01      	cmp	r2, #1
 80096be:	f300 80cd 	bgt.w	800985c <_dtoa_r+0x8a4>
 80096c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80096c4:	2a00      	cmp	r2, #0
 80096c6:	f000 80c1 	beq.w	800984c <_dtoa_r+0x894>
 80096ca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80096ce:	9c08      	ldr	r4, [sp, #32]
 80096d0:	9e00      	ldr	r6, [sp, #0]
 80096d2:	9a00      	ldr	r2, [sp, #0]
 80096d4:	441a      	add	r2, r3
 80096d6:	9200      	str	r2, [sp, #0]
 80096d8:	9a06      	ldr	r2, [sp, #24]
 80096da:	2101      	movs	r1, #1
 80096dc:	441a      	add	r2, r3
 80096de:	4648      	mov	r0, r9
 80096e0:	9206      	str	r2, [sp, #24]
 80096e2:	f000 fc77 	bl	8009fd4 <__i2b>
 80096e6:	4605      	mov	r5, r0
 80096e8:	b166      	cbz	r6, 8009704 <_dtoa_r+0x74c>
 80096ea:	9b06      	ldr	r3, [sp, #24]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	dd09      	ble.n	8009704 <_dtoa_r+0x74c>
 80096f0:	42b3      	cmp	r3, r6
 80096f2:	9a00      	ldr	r2, [sp, #0]
 80096f4:	bfa8      	it	ge
 80096f6:	4633      	movge	r3, r6
 80096f8:	1ad2      	subs	r2, r2, r3
 80096fa:	9200      	str	r2, [sp, #0]
 80096fc:	9a06      	ldr	r2, [sp, #24]
 80096fe:	1af6      	subs	r6, r6, r3
 8009700:	1ad3      	subs	r3, r2, r3
 8009702:	9306      	str	r3, [sp, #24]
 8009704:	9b08      	ldr	r3, [sp, #32]
 8009706:	b30b      	cbz	r3, 800974c <_dtoa_r+0x794>
 8009708:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800970a:	2b00      	cmp	r3, #0
 800970c:	f000 80c6 	beq.w	800989c <_dtoa_r+0x8e4>
 8009710:	2c00      	cmp	r4, #0
 8009712:	f000 80c0 	beq.w	8009896 <_dtoa_r+0x8de>
 8009716:	4629      	mov	r1, r5
 8009718:	4622      	mov	r2, r4
 800971a:	4648      	mov	r0, r9
 800971c:	f000 fd12 	bl	800a144 <__pow5mult>
 8009720:	9a02      	ldr	r2, [sp, #8]
 8009722:	4601      	mov	r1, r0
 8009724:	4605      	mov	r5, r0
 8009726:	4648      	mov	r0, r9
 8009728:	f000 fc6a 	bl	800a000 <__multiply>
 800972c:	9902      	ldr	r1, [sp, #8]
 800972e:	4680      	mov	r8, r0
 8009730:	4648      	mov	r0, r9
 8009732:	f000 fb51 	bl	8009dd8 <_Bfree>
 8009736:	9b08      	ldr	r3, [sp, #32]
 8009738:	1b1b      	subs	r3, r3, r4
 800973a:	9308      	str	r3, [sp, #32]
 800973c:	f000 80b1 	beq.w	80098a2 <_dtoa_r+0x8ea>
 8009740:	9a08      	ldr	r2, [sp, #32]
 8009742:	4641      	mov	r1, r8
 8009744:	4648      	mov	r0, r9
 8009746:	f000 fcfd 	bl	800a144 <__pow5mult>
 800974a:	9002      	str	r0, [sp, #8]
 800974c:	2101      	movs	r1, #1
 800974e:	4648      	mov	r0, r9
 8009750:	f000 fc40 	bl	8009fd4 <__i2b>
 8009754:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009756:	4604      	mov	r4, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	f000 81d8 	beq.w	8009b0e <_dtoa_r+0xb56>
 800975e:	461a      	mov	r2, r3
 8009760:	4601      	mov	r1, r0
 8009762:	4648      	mov	r0, r9
 8009764:	f000 fcee 	bl	800a144 <__pow5mult>
 8009768:	9b07      	ldr	r3, [sp, #28]
 800976a:	2b01      	cmp	r3, #1
 800976c:	4604      	mov	r4, r0
 800976e:	f300 809f 	bgt.w	80098b0 <_dtoa_r+0x8f8>
 8009772:	9b04      	ldr	r3, [sp, #16]
 8009774:	2b00      	cmp	r3, #0
 8009776:	f040 8097 	bne.w	80098a8 <_dtoa_r+0x8f0>
 800977a:	9b05      	ldr	r3, [sp, #20]
 800977c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009780:	2b00      	cmp	r3, #0
 8009782:	f040 8093 	bne.w	80098ac <_dtoa_r+0x8f4>
 8009786:	9b05      	ldr	r3, [sp, #20]
 8009788:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800978c:	0d1b      	lsrs	r3, r3, #20
 800978e:	051b      	lsls	r3, r3, #20
 8009790:	b133      	cbz	r3, 80097a0 <_dtoa_r+0x7e8>
 8009792:	9b00      	ldr	r3, [sp, #0]
 8009794:	3301      	adds	r3, #1
 8009796:	9300      	str	r3, [sp, #0]
 8009798:	9b06      	ldr	r3, [sp, #24]
 800979a:	3301      	adds	r3, #1
 800979c:	9306      	str	r3, [sp, #24]
 800979e:	2301      	movs	r3, #1
 80097a0:	9308      	str	r3, [sp, #32]
 80097a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f000 81b8 	beq.w	8009b1a <_dtoa_r+0xb62>
 80097aa:	6923      	ldr	r3, [r4, #16]
 80097ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80097b0:	6918      	ldr	r0, [r3, #16]
 80097b2:	f000 fbc3 	bl	8009f3c <__hi0bits>
 80097b6:	f1c0 0020 	rsb	r0, r0, #32
 80097ba:	9b06      	ldr	r3, [sp, #24]
 80097bc:	4418      	add	r0, r3
 80097be:	f010 001f 	ands.w	r0, r0, #31
 80097c2:	f000 8082 	beq.w	80098ca <_dtoa_r+0x912>
 80097c6:	f1c0 0320 	rsb	r3, r0, #32
 80097ca:	2b04      	cmp	r3, #4
 80097cc:	dd73      	ble.n	80098b6 <_dtoa_r+0x8fe>
 80097ce:	9b00      	ldr	r3, [sp, #0]
 80097d0:	f1c0 001c 	rsb	r0, r0, #28
 80097d4:	4403      	add	r3, r0
 80097d6:	9300      	str	r3, [sp, #0]
 80097d8:	9b06      	ldr	r3, [sp, #24]
 80097da:	4403      	add	r3, r0
 80097dc:	4406      	add	r6, r0
 80097de:	9306      	str	r3, [sp, #24]
 80097e0:	9b00      	ldr	r3, [sp, #0]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	dd05      	ble.n	80097f2 <_dtoa_r+0x83a>
 80097e6:	9902      	ldr	r1, [sp, #8]
 80097e8:	461a      	mov	r2, r3
 80097ea:	4648      	mov	r0, r9
 80097ec:	f000 fd04 	bl	800a1f8 <__lshift>
 80097f0:	9002      	str	r0, [sp, #8]
 80097f2:	9b06      	ldr	r3, [sp, #24]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	dd05      	ble.n	8009804 <_dtoa_r+0x84c>
 80097f8:	4621      	mov	r1, r4
 80097fa:	461a      	mov	r2, r3
 80097fc:	4648      	mov	r0, r9
 80097fe:	f000 fcfb 	bl	800a1f8 <__lshift>
 8009802:	4604      	mov	r4, r0
 8009804:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009806:	2b00      	cmp	r3, #0
 8009808:	d061      	beq.n	80098ce <_dtoa_r+0x916>
 800980a:	9802      	ldr	r0, [sp, #8]
 800980c:	4621      	mov	r1, r4
 800980e:	f000 fd5f 	bl	800a2d0 <__mcmp>
 8009812:	2800      	cmp	r0, #0
 8009814:	da5b      	bge.n	80098ce <_dtoa_r+0x916>
 8009816:	2300      	movs	r3, #0
 8009818:	9902      	ldr	r1, [sp, #8]
 800981a:	220a      	movs	r2, #10
 800981c:	4648      	mov	r0, r9
 800981e:	f000 fafd 	bl	8009e1c <__multadd>
 8009822:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009824:	9002      	str	r0, [sp, #8]
 8009826:	f107 38ff 	add.w	r8, r7, #4294967295
 800982a:	2b00      	cmp	r3, #0
 800982c:	f000 8177 	beq.w	8009b1e <_dtoa_r+0xb66>
 8009830:	4629      	mov	r1, r5
 8009832:	2300      	movs	r3, #0
 8009834:	220a      	movs	r2, #10
 8009836:	4648      	mov	r0, r9
 8009838:	f000 faf0 	bl	8009e1c <__multadd>
 800983c:	f1bb 0f00 	cmp.w	fp, #0
 8009840:	4605      	mov	r5, r0
 8009842:	dc6f      	bgt.n	8009924 <_dtoa_r+0x96c>
 8009844:	9b07      	ldr	r3, [sp, #28]
 8009846:	2b02      	cmp	r3, #2
 8009848:	dc49      	bgt.n	80098de <_dtoa_r+0x926>
 800984a:	e06b      	b.n	8009924 <_dtoa_r+0x96c>
 800984c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800984e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009852:	e73c      	b.n	80096ce <_dtoa_r+0x716>
 8009854:	3fe00000 	.word	0x3fe00000
 8009858:	40240000 	.word	0x40240000
 800985c:	9b03      	ldr	r3, [sp, #12]
 800985e:	1e5c      	subs	r4, r3, #1
 8009860:	9b08      	ldr	r3, [sp, #32]
 8009862:	42a3      	cmp	r3, r4
 8009864:	db09      	blt.n	800987a <_dtoa_r+0x8c2>
 8009866:	1b1c      	subs	r4, r3, r4
 8009868:	9b03      	ldr	r3, [sp, #12]
 800986a:	2b00      	cmp	r3, #0
 800986c:	f6bf af30 	bge.w	80096d0 <_dtoa_r+0x718>
 8009870:	9b00      	ldr	r3, [sp, #0]
 8009872:	9a03      	ldr	r2, [sp, #12]
 8009874:	1a9e      	subs	r6, r3, r2
 8009876:	2300      	movs	r3, #0
 8009878:	e72b      	b.n	80096d2 <_dtoa_r+0x71a>
 800987a:	9b08      	ldr	r3, [sp, #32]
 800987c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800987e:	9408      	str	r4, [sp, #32]
 8009880:	1ae3      	subs	r3, r4, r3
 8009882:	441a      	add	r2, r3
 8009884:	9e00      	ldr	r6, [sp, #0]
 8009886:	9b03      	ldr	r3, [sp, #12]
 8009888:	920d      	str	r2, [sp, #52]	@ 0x34
 800988a:	2400      	movs	r4, #0
 800988c:	e721      	b.n	80096d2 <_dtoa_r+0x71a>
 800988e:	9c08      	ldr	r4, [sp, #32]
 8009890:	9e00      	ldr	r6, [sp, #0]
 8009892:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009894:	e728      	b.n	80096e8 <_dtoa_r+0x730>
 8009896:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800989a:	e751      	b.n	8009740 <_dtoa_r+0x788>
 800989c:	9a08      	ldr	r2, [sp, #32]
 800989e:	9902      	ldr	r1, [sp, #8]
 80098a0:	e750      	b.n	8009744 <_dtoa_r+0x78c>
 80098a2:	f8cd 8008 	str.w	r8, [sp, #8]
 80098a6:	e751      	b.n	800974c <_dtoa_r+0x794>
 80098a8:	2300      	movs	r3, #0
 80098aa:	e779      	b.n	80097a0 <_dtoa_r+0x7e8>
 80098ac:	9b04      	ldr	r3, [sp, #16]
 80098ae:	e777      	b.n	80097a0 <_dtoa_r+0x7e8>
 80098b0:	2300      	movs	r3, #0
 80098b2:	9308      	str	r3, [sp, #32]
 80098b4:	e779      	b.n	80097aa <_dtoa_r+0x7f2>
 80098b6:	d093      	beq.n	80097e0 <_dtoa_r+0x828>
 80098b8:	9a00      	ldr	r2, [sp, #0]
 80098ba:	331c      	adds	r3, #28
 80098bc:	441a      	add	r2, r3
 80098be:	9200      	str	r2, [sp, #0]
 80098c0:	9a06      	ldr	r2, [sp, #24]
 80098c2:	441a      	add	r2, r3
 80098c4:	441e      	add	r6, r3
 80098c6:	9206      	str	r2, [sp, #24]
 80098c8:	e78a      	b.n	80097e0 <_dtoa_r+0x828>
 80098ca:	4603      	mov	r3, r0
 80098cc:	e7f4      	b.n	80098b8 <_dtoa_r+0x900>
 80098ce:	9b03      	ldr	r3, [sp, #12]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	46b8      	mov	r8, r7
 80098d4:	dc20      	bgt.n	8009918 <_dtoa_r+0x960>
 80098d6:	469b      	mov	fp, r3
 80098d8:	9b07      	ldr	r3, [sp, #28]
 80098da:	2b02      	cmp	r3, #2
 80098dc:	dd1e      	ble.n	800991c <_dtoa_r+0x964>
 80098de:	f1bb 0f00 	cmp.w	fp, #0
 80098e2:	f47f adb1 	bne.w	8009448 <_dtoa_r+0x490>
 80098e6:	4621      	mov	r1, r4
 80098e8:	465b      	mov	r3, fp
 80098ea:	2205      	movs	r2, #5
 80098ec:	4648      	mov	r0, r9
 80098ee:	f000 fa95 	bl	8009e1c <__multadd>
 80098f2:	4601      	mov	r1, r0
 80098f4:	4604      	mov	r4, r0
 80098f6:	9802      	ldr	r0, [sp, #8]
 80098f8:	f000 fcea 	bl	800a2d0 <__mcmp>
 80098fc:	2800      	cmp	r0, #0
 80098fe:	f77f ada3 	ble.w	8009448 <_dtoa_r+0x490>
 8009902:	4656      	mov	r6, sl
 8009904:	2331      	movs	r3, #49	@ 0x31
 8009906:	f806 3b01 	strb.w	r3, [r6], #1
 800990a:	f108 0801 	add.w	r8, r8, #1
 800990e:	e59f      	b.n	8009450 <_dtoa_r+0x498>
 8009910:	9c03      	ldr	r4, [sp, #12]
 8009912:	46b8      	mov	r8, r7
 8009914:	4625      	mov	r5, r4
 8009916:	e7f4      	b.n	8009902 <_dtoa_r+0x94a>
 8009918:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800991c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800991e:	2b00      	cmp	r3, #0
 8009920:	f000 8101 	beq.w	8009b26 <_dtoa_r+0xb6e>
 8009924:	2e00      	cmp	r6, #0
 8009926:	dd05      	ble.n	8009934 <_dtoa_r+0x97c>
 8009928:	4629      	mov	r1, r5
 800992a:	4632      	mov	r2, r6
 800992c:	4648      	mov	r0, r9
 800992e:	f000 fc63 	bl	800a1f8 <__lshift>
 8009932:	4605      	mov	r5, r0
 8009934:	9b08      	ldr	r3, [sp, #32]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d05c      	beq.n	80099f4 <_dtoa_r+0xa3c>
 800993a:	6869      	ldr	r1, [r5, #4]
 800993c:	4648      	mov	r0, r9
 800993e:	f000 fa0b 	bl	8009d58 <_Balloc>
 8009942:	4606      	mov	r6, r0
 8009944:	b928      	cbnz	r0, 8009952 <_dtoa_r+0x99a>
 8009946:	4b82      	ldr	r3, [pc, #520]	@ (8009b50 <_dtoa_r+0xb98>)
 8009948:	4602      	mov	r2, r0
 800994a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800994e:	f7ff bb4a 	b.w	8008fe6 <_dtoa_r+0x2e>
 8009952:	692a      	ldr	r2, [r5, #16]
 8009954:	3202      	adds	r2, #2
 8009956:	0092      	lsls	r2, r2, #2
 8009958:	f105 010c 	add.w	r1, r5, #12
 800995c:	300c      	adds	r0, #12
 800995e:	f001 ff69 	bl	800b834 <memcpy>
 8009962:	2201      	movs	r2, #1
 8009964:	4631      	mov	r1, r6
 8009966:	4648      	mov	r0, r9
 8009968:	f000 fc46 	bl	800a1f8 <__lshift>
 800996c:	f10a 0301 	add.w	r3, sl, #1
 8009970:	9300      	str	r3, [sp, #0]
 8009972:	eb0a 030b 	add.w	r3, sl, fp
 8009976:	9308      	str	r3, [sp, #32]
 8009978:	9b04      	ldr	r3, [sp, #16]
 800997a:	f003 0301 	and.w	r3, r3, #1
 800997e:	462f      	mov	r7, r5
 8009980:	9306      	str	r3, [sp, #24]
 8009982:	4605      	mov	r5, r0
 8009984:	9b00      	ldr	r3, [sp, #0]
 8009986:	9802      	ldr	r0, [sp, #8]
 8009988:	4621      	mov	r1, r4
 800998a:	f103 3bff 	add.w	fp, r3, #4294967295
 800998e:	f7ff fa8b 	bl	8008ea8 <quorem>
 8009992:	4603      	mov	r3, r0
 8009994:	3330      	adds	r3, #48	@ 0x30
 8009996:	9003      	str	r0, [sp, #12]
 8009998:	4639      	mov	r1, r7
 800999a:	9802      	ldr	r0, [sp, #8]
 800999c:	9309      	str	r3, [sp, #36]	@ 0x24
 800999e:	f000 fc97 	bl	800a2d0 <__mcmp>
 80099a2:	462a      	mov	r2, r5
 80099a4:	9004      	str	r0, [sp, #16]
 80099a6:	4621      	mov	r1, r4
 80099a8:	4648      	mov	r0, r9
 80099aa:	f000 fcad 	bl	800a308 <__mdiff>
 80099ae:	68c2      	ldr	r2, [r0, #12]
 80099b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099b2:	4606      	mov	r6, r0
 80099b4:	bb02      	cbnz	r2, 80099f8 <_dtoa_r+0xa40>
 80099b6:	4601      	mov	r1, r0
 80099b8:	9802      	ldr	r0, [sp, #8]
 80099ba:	f000 fc89 	bl	800a2d0 <__mcmp>
 80099be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099c0:	4602      	mov	r2, r0
 80099c2:	4631      	mov	r1, r6
 80099c4:	4648      	mov	r0, r9
 80099c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80099c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80099ca:	f000 fa05 	bl	8009dd8 <_Bfree>
 80099ce:	9b07      	ldr	r3, [sp, #28]
 80099d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80099d2:	9e00      	ldr	r6, [sp, #0]
 80099d4:	ea42 0103 	orr.w	r1, r2, r3
 80099d8:	9b06      	ldr	r3, [sp, #24]
 80099da:	4319      	orrs	r1, r3
 80099dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099de:	d10d      	bne.n	80099fc <_dtoa_r+0xa44>
 80099e0:	2b39      	cmp	r3, #57	@ 0x39
 80099e2:	d027      	beq.n	8009a34 <_dtoa_r+0xa7c>
 80099e4:	9a04      	ldr	r2, [sp, #16]
 80099e6:	2a00      	cmp	r2, #0
 80099e8:	dd01      	ble.n	80099ee <_dtoa_r+0xa36>
 80099ea:	9b03      	ldr	r3, [sp, #12]
 80099ec:	3331      	adds	r3, #49	@ 0x31
 80099ee:	f88b 3000 	strb.w	r3, [fp]
 80099f2:	e52e      	b.n	8009452 <_dtoa_r+0x49a>
 80099f4:	4628      	mov	r0, r5
 80099f6:	e7b9      	b.n	800996c <_dtoa_r+0x9b4>
 80099f8:	2201      	movs	r2, #1
 80099fa:	e7e2      	b.n	80099c2 <_dtoa_r+0xa0a>
 80099fc:	9904      	ldr	r1, [sp, #16]
 80099fe:	2900      	cmp	r1, #0
 8009a00:	db04      	blt.n	8009a0c <_dtoa_r+0xa54>
 8009a02:	9807      	ldr	r0, [sp, #28]
 8009a04:	4301      	orrs	r1, r0
 8009a06:	9806      	ldr	r0, [sp, #24]
 8009a08:	4301      	orrs	r1, r0
 8009a0a:	d120      	bne.n	8009a4e <_dtoa_r+0xa96>
 8009a0c:	2a00      	cmp	r2, #0
 8009a0e:	ddee      	ble.n	80099ee <_dtoa_r+0xa36>
 8009a10:	9902      	ldr	r1, [sp, #8]
 8009a12:	9300      	str	r3, [sp, #0]
 8009a14:	2201      	movs	r2, #1
 8009a16:	4648      	mov	r0, r9
 8009a18:	f000 fbee 	bl	800a1f8 <__lshift>
 8009a1c:	4621      	mov	r1, r4
 8009a1e:	9002      	str	r0, [sp, #8]
 8009a20:	f000 fc56 	bl	800a2d0 <__mcmp>
 8009a24:	2800      	cmp	r0, #0
 8009a26:	9b00      	ldr	r3, [sp, #0]
 8009a28:	dc02      	bgt.n	8009a30 <_dtoa_r+0xa78>
 8009a2a:	d1e0      	bne.n	80099ee <_dtoa_r+0xa36>
 8009a2c:	07da      	lsls	r2, r3, #31
 8009a2e:	d5de      	bpl.n	80099ee <_dtoa_r+0xa36>
 8009a30:	2b39      	cmp	r3, #57	@ 0x39
 8009a32:	d1da      	bne.n	80099ea <_dtoa_r+0xa32>
 8009a34:	2339      	movs	r3, #57	@ 0x39
 8009a36:	f88b 3000 	strb.w	r3, [fp]
 8009a3a:	4633      	mov	r3, r6
 8009a3c:	461e      	mov	r6, r3
 8009a3e:	3b01      	subs	r3, #1
 8009a40:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009a44:	2a39      	cmp	r2, #57	@ 0x39
 8009a46:	d04e      	beq.n	8009ae6 <_dtoa_r+0xb2e>
 8009a48:	3201      	adds	r2, #1
 8009a4a:	701a      	strb	r2, [r3, #0]
 8009a4c:	e501      	b.n	8009452 <_dtoa_r+0x49a>
 8009a4e:	2a00      	cmp	r2, #0
 8009a50:	dd03      	ble.n	8009a5a <_dtoa_r+0xaa2>
 8009a52:	2b39      	cmp	r3, #57	@ 0x39
 8009a54:	d0ee      	beq.n	8009a34 <_dtoa_r+0xa7c>
 8009a56:	3301      	adds	r3, #1
 8009a58:	e7c9      	b.n	80099ee <_dtoa_r+0xa36>
 8009a5a:	9a00      	ldr	r2, [sp, #0]
 8009a5c:	9908      	ldr	r1, [sp, #32]
 8009a5e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009a62:	428a      	cmp	r2, r1
 8009a64:	d028      	beq.n	8009ab8 <_dtoa_r+0xb00>
 8009a66:	9902      	ldr	r1, [sp, #8]
 8009a68:	2300      	movs	r3, #0
 8009a6a:	220a      	movs	r2, #10
 8009a6c:	4648      	mov	r0, r9
 8009a6e:	f000 f9d5 	bl	8009e1c <__multadd>
 8009a72:	42af      	cmp	r7, r5
 8009a74:	9002      	str	r0, [sp, #8]
 8009a76:	f04f 0300 	mov.w	r3, #0
 8009a7a:	f04f 020a 	mov.w	r2, #10
 8009a7e:	4639      	mov	r1, r7
 8009a80:	4648      	mov	r0, r9
 8009a82:	d107      	bne.n	8009a94 <_dtoa_r+0xadc>
 8009a84:	f000 f9ca 	bl	8009e1c <__multadd>
 8009a88:	4607      	mov	r7, r0
 8009a8a:	4605      	mov	r5, r0
 8009a8c:	9b00      	ldr	r3, [sp, #0]
 8009a8e:	3301      	adds	r3, #1
 8009a90:	9300      	str	r3, [sp, #0]
 8009a92:	e777      	b.n	8009984 <_dtoa_r+0x9cc>
 8009a94:	f000 f9c2 	bl	8009e1c <__multadd>
 8009a98:	4629      	mov	r1, r5
 8009a9a:	4607      	mov	r7, r0
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	220a      	movs	r2, #10
 8009aa0:	4648      	mov	r0, r9
 8009aa2:	f000 f9bb 	bl	8009e1c <__multadd>
 8009aa6:	4605      	mov	r5, r0
 8009aa8:	e7f0      	b.n	8009a8c <_dtoa_r+0xad4>
 8009aaa:	f1bb 0f00 	cmp.w	fp, #0
 8009aae:	bfcc      	ite	gt
 8009ab0:	465e      	movgt	r6, fp
 8009ab2:	2601      	movle	r6, #1
 8009ab4:	4456      	add	r6, sl
 8009ab6:	2700      	movs	r7, #0
 8009ab8:	9902      	ldr	r1, [sp, #8]
 8009aba:	9300      	str	r3, [sp, #0]
 8009abc:	2201      	movs	r2, #1
 8009abe:	4648      	mov	r0, r9
 8009ac0:	f000 fb9a 	bl	800a1f8 <__lshift>
 8009ac4:	4621      	mov	r1, r4
 8009ac6:	9002      	str	r0, [sp, #8]
 8009ac8:	f000 fc02 	bl	800a2d0 <__mcmp>
 8009acc:	2800      	cmp	r0, #0
 8009ace:	dcb4      	bgt.n	8009a3a <_dtoa_r+0xa82>
 8009ad0:	d102      	bne.n	8009ad8 <_dtoa_r+0xb20>
 8009ad2:	9b00      	ldr	r3, [sp, #0]
 8009ad4:	07db      	lsls	r3, r3, #31
 8009ad6:	d4b0      	bmi.n	8009a3a <_dtoa_r+0xa82>
 8009ad8:	4633      	mov	r3, r6
 8009ada:	461e      	mov	r6, r3
 8009adc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ae0:	2a30      	cmp	r2, #48	@ 0x30
 8009ae2:	d0fa      	beq.n	8009ada <_dtoa_r+0xb22>
 8009ae4:	e4b5      	b.n	8009452 <_dtoa_r+0x49a>
 8009ae6:	459a      	cmp	sl, r3
 8009ae8:	d1a8      	bne.n	8009a3c <_dtoa_r+0xa84>
 8009aea:	2331      	movs	r3, #49	@ 0x31
 8009aec:	f108 0801 	add.w	r8, r8, #1
 8009af0:	f88a 3000 	strb.w	r3, [sl]
 8009af4:	e4ad      	b.n	8009452 <_dtoa_r+0x49a>
 8009af6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009af8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009b54 <_dtoa_r+0xb9c>
 8009afc:	b11b      	cbz	r3, 8009b06 <_dtoa_r+0xb4e>
 8009afe:	f10a 0308 	add.w	r3, sl, #8
 8009b02:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009b04:	6013      	str	r3, [r2, #0]
 8009b06:	4650      	mov	r0, sl
 8009b08:	b017      	add	sp, #92	@ 0x5c
 8009b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b0e:	9b07      	ldr	r3, [sp, #28]
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	f77f ae2e 	ble.w	8009772 <_dtoa_r+0x7ba>
 8009b16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009b18:	9308      	str	r3, [sp, #32]
 8009b1a:	2001      	movs	r0, #1
 8009b1c:	e64d      	b.n	80097ba <_dtoa_r+0x802>
 8009b1e:	f1bb 0f00 	cmp.w	fp, #0
 8009b22:	f77f aed9 	ble.w	80098d8 <_dtoa_r+0x920>
 8009b26:	4656      	mov	r6, sl
 8009b28:	9802      	ldr	r0, [sp, #8]
 8009b2a:	4621      	mov	r1, r4
 8009b2c:	f7ff f9bc 	bl	8008ea8 <quorem>
 8009b30:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009b34:	f806 3b01 	strb.w	r3, [r6], #1
 8009b38:	eba6 020a 	sub.w	r2, r6, sl
 8009b3c:	4593      	cmp	fp, r2
 8009b3e:	ddb4      	ble.n	8009aaa <_dtoa_r+0xaf2>
 8009b40:	9902      	ldr	r1, [sp, #8]
 8009b42:	2300      	movs	r3, #0
 8009b44:	220a      	movs	r2, #10
 8009b46:	4648      	mov	r0, r9
 8009b48:	f000 f968 	bl	8009e1c <__multadd>
 8009b4c:	9002      	str	r0, [sp, #8]
 8009b4e:	e7eb      	b.n	8009b28 <_dtoa_r+0xb70>
 8009b50:	0800c8cd 	.word	0x0800c8cd
 8009b54:	0800c851 	.word	0x0800c851

08009b58 <_free_r>:
 8009b58:	b538      	push	{r3, r4, r5, lr}
 8009b5a:	4605      	mov	r5, r0
 8009b5c:	2900      	cmp	r1, #0
 8009b5e:	d041      	beq.n	8009be4 <_free_r+0x8c>
 8009b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b64:	1f0c      	subs	r4, r1, #4
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	bfb8      	it	lt
 8009b6a:	18e4      	addlt	r4, r4, r3
 8009b6c:	f000 f8e8 	bl	8009d40 <__malloc_lock>
 8009b70:	4a1d      	ldr	r2, [pc, #116]	@ (8009be8 <_free_r+0x90>)
 8009b72:	6813      	ldr	r3, [r2, #0]
 8009b74:	b933      	cbnz	r3, 8009b84 <_free_r+0x2c>
 8009b76:	6063      	str	r3, [r4, #4]
 8009b78:	6014      	str	r4, [r2, #0]
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b80:	f000 b8e4 	b.w	8009d4c <__malloc_unlock>
 8009b84:	42a3      	cmp	r3, r4
 8009b86:	d908      	bls.n	8009b9a <_free_r+0x42>
 8009b88:	6820      	ldr	r0, [r4, #0]
 8009b8a:	1821      	adds	r1, r4, r0
 8009b8c:	428b      	cmp	r3, r1
 8009b8e:	bf01      	itttt	eq
 8009b90:	6819      	ldreq	r1, [r3, #0]
 8009b92:	685b      	ldreq	r3, [r3, #4]
 8009b94:	1809      	addeq	r1, r1, r0
 8009b96:	6021      	streq	r1, [r4, #0]
 8009b98:	e7ed      	b.n	8009b76 <_free_r+0x1e>
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	b10b      	cbz	r3, 8009ba4 <_free_r+0x4c>
 8009ba0:	42a3      	cmp	r3, r4
 8009ba2:	d9fa      	bls.n	8009b9a <_free_r+0x42>
 8009ba4:	6811      	ldr	r1, [r2, #0]
 8009ba6:	1850      	adds	r0, r2, r1
 8009ba8:	42a0      	cmp	r0, r4
 8009baa:	d10b      	bne.n	8009bc4 <_free_r+0x6c>
 8009bac:	6820      	ldr	r0, [r4, #0]
 8009bae:	4401      	add	r1, r0
 8009bb0:	1850      	adds	r0, r2, r1
 8009bb2:	4283      	cmp	r3, r0
 8009bb4:	6011      	str	r1, [r2, #0]
 8009bb6:	d1e0      	bne.n	8009b7a <_free_r+0x22>
 8009bb8:	6818      	ldr	r0, [r3, #0]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	6053      	str	r3, [r2, #4]
 8009bbe:	4408      	add	r0, r1
 8009bc0:	6010      	str	r0, [r2, #0]
 8009bc2:	e7da      	b.n	8009b7a <_free_r+0x22>
 8009bc4:	d902      	bls.n	8009bcc <_free_r+0x74>
 8009bc6:	230c      	movs	r3, #12
 8009bc8:	602b      	str	r3, [r5, #0]
 8009bca:	e7d6      	b.n	8009b7a <_free_r+0x22>
 8009bcc:	6820      	ldr	r0, [r4, #0]
 8009bce:	1821      	adds	r1, r4, r0
 8009bd0:	428b      	cmp	r3, r1
 8009bd2:	bf04      	itt	eq
 8009bd4:	6819      	ldreq	r1, [r3, #0]
 8009bd6:	685b      	ldreq	r3, [r3, #4]
 8009bd8:	6063      	str	r3, [r4, #4]
 8009bda:	bf04      	itt	eq
 8009bdc:	1809      	addeq	r1, r1, r0
 8009bde:	6021      	streq	r1, [r4, #0]
 8009be0:	6054      	str	r4, [r2, #4]
 8009be2:	e7ca      	b.n	8009b7a <_free_r+0x22>
 8009be4:	bd38      	pop	{r3, r4, r5, pc}
 8009be6:	bf00      	nop
 8009be8:	20000768 	.word	0x20000768

08009bec <malloc>:
 8009bec:	4b02      	ldr	r3, [pc, #8]	@ (8009bf8 <malloc+0xc>)
 8009bee:	4601      	mov	r1, r0
 8009bf0:	6818      	ldr	r0, [r3, #0]
 8009bf2:	f000 b825 	b.w	8009c40 <_malloc_r>
 8009bf6:	bf00      	nop
 8009bf8:	2000009c 	.word	0x2000009c

08009bfc <sbrk_aligned>:
 8009bfc:	b570      	push	{r4, r5, r6, lr}
 8009bfe:	4e0f      	ldr	r6, [pc, #60]	@ (8009c3c <sbrk_aligned+0x40>)
 8009c00:	460c      	mov	r4, r1
 8009c02:	6831      	ldr	r1, [r6, #0]
 8009c04:	4605      	mov	r5, r0
 8009c06:	b911      	cbnz	r1, 8009c0e <sbrk_aligned+0x12>
 8009c08:	f001 fe04 	bl	800b814 <_sbrk_r>
 8009c0c:	6030      	str	r0, [r6, #0]
 8009c0e:	4621      	mov	r1, r4
 8009c10:	4628      	mov	r0, r5
 8009c12:	f001 fdff 	bl	800b814 <_sbrk_r>
 8009c16:	1c43      	adds	r3, r0, #1
 8009c18:	d103      	bne.n	8009c22 <sbrk_aligned+0x26>
 8009c1a:	f04f 34ff 	mov.w	r4, #4294967295
 8009c1e:	4620      	mov	r0, r4
 8009c20:	bd70      	pop	{r4, r5, r6, pc}
 8009c22:	1cc4      	adds	r4, r0, #3
 8009c24:	f024 0403 	bic.w	r4, r4, #3
 8009c28:	42a0      	cmp	r0, r4
 8009c2a:	d0f8      	beq.n	8009c1e <sbrk_aligned+0x22>
 8009c2c:	1a21      	subs	r1, r4, r0
 8009c2e:	4628      	mov	r0, r5
 8009c30:	f001 fdf0 	bl	800b814 <_sbrk_r>
 8009c34:	3001      	adds	r0, #1
 8009c36:	d1f2      	bne.n	8009c1e <sbrk_aligned+0x22>
 8009c38:	e7ef      	b.n	8009c1a <sbrk_aligned+0x1e>
 8009c3a:	bf00      	nop
 8009c3c:	20000764 	.word	0x20000764

08009c40 <_malloc_r>:
 8009c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c44:	1ccd      	adds	r5, r1, #3
 8009c46:	f025 0503 	bic.w	r5, r5, #3
 8009c4a:	3508      	adds	r5, #8
 8009c4c:	2d0c      	cmp	r5, #12
 8009c4e:	bf38      	it	cc
 8009c50:	250c      	movcc	r5, #12
 8009c52:	2d00      	cmp	r5, #0
 8009c54:	4606      	mov	r6, r0
 8009c56:	db01      	blt.n	8009c5c <_malloc_r+0x1c>
 8009c58:	42a9      	cmp	r1, r5
 8009c5a:	d904      	bls.n	8009c66 <_malloc_r+0x26>
 8009c5c:	230c      	movs	r3, #12
 8009c5e:	6033      	str	r3, [r6, #0]
 8009c60:	2000      	movs	r0, #0
 8009c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009d3c <_malloc_r+0xfc>
 8009c6a:	f000 f869 	bl	8009d40 <__malloc_lock>
 8009c6e:	f8d8 3000 	ldr.w	r3, [r8]
 8009c72:	461c      	mov	r4, r3
 8009c74:	bb44      	cbnz	r4, 8009cc8 <_malloc_r+0x88>
 8009c76:	4629      	mov	r1, r5
 8009c78:	4630      	mov	r0, r6
 8009c7a:	f7ff ffbf 	bl	8009bfc <sbrk_aligned>
 8009c7e:	1c43      	adds	r3, r0, #1
 8009c80:	4604      	mov	r4, r0
 8009c82:	d158      	bne.n	8009d36 <_malloc_r+0xf6>
 8009c84:	f8d8 4000 	ldr.w	r4, [r8]
 8009c88:	4627      	mov	r7, r4
 8009c8a:	2f00      	cmp	r7, #0
 8009c8c:	d143      	bne.n	8009d16 <_malloc_r+0xd6>
 8009c8e:	2c00      	cmp	r4, #0
 8009c90:	d04b      	beq.n	8009d2a <_malloc_r+0xea>
 8009c92:	6823      	ldr	r3, [r4, #0]
 8009c94:	4639      	mov	r1, r7
 8009c96:	4630      	mov	r0, r6
 8009c98:	eb04 0903 	add.w	r9, r4, r3
 8009c9c:	f001 fdba 	bl	800b814 <_sbrk_r>
 8009ca0:	4581      	cmp	r9, r0
 8009ca2:	d142      	bne.n	8009d2a <_malloc_r+0xea>
 8009ca4:	6821      	ldr	r1, [r4, #0]
 8009ca6:	1a6d      	subs	r5, r5, r1
 8009ca8:	4629      	mov	r1, r5
 8009caa:	4630      	mov	r0, r6
 8009cac:	f7ff ffa6 	bl	8009bfc <sbrk_aligned>
 8009cb0:	3001      	adds	r0, #1
 8009cb2:	d03a      	beq.n	8009d2a <_malloc_r+0xea>
 8009cb4:	6823      	ldr	r3, [r4, #0]
 8009cb6:	442b      	add	r3, r5
 8009cb8:	6023      	str	r3, [r4, #0]
 8009cba:	f8d8 3000 	ldr.w	r3, [r8]
 8009cbe:	685a      	ldr	r2, [r3, #4]
 8009cc0:	bb62      	cbnz	r2, 8009d1c <_malloc_r+0xdc>
 8009cc2:	f8c8 7000 	str.w	r7, [r8]
 8009cc6:	e00f      	b.n	8009ce8 <_malloc_r+0xa8>
 8009cc8:	6822      	ldr	r2, [r4, #0]
 8009cca:	1b52      	subs	r2, r2, r5
 8009ccc:	d420      	bmi.n	8009d10 <_malloc_r+0xd0>
 8009cce:	2a0b      	cmp	r2, #11
 8009cd0:	d917      	bls.n	8009d02 <_malloc_r+0xc2>
 8009cd2:	1961      	adds	r1, r4, r5
 8009cd4:	42a3      	cmp	r3, r4
 8009cd6:	6025      	str	r5, [r4, #0]
 8009cd8:	bf18      	it	ne
 8009cda:	6059      	strne	r1, [r3, #4]
 8009cdc:	6863      	ldr	r3, [r4, #4]
 8009cde:	bf08      	it	eq
 8009ce0:	f8c8 1000 	streq.w	r1, [r8]
 8009ce4:	5162      	str	r2, [r4, r5]
 8009ce6:	604b      	str	r3, [r1, #4]
 8009ce8:	4630      	mov	r0, r6
 8009cea:	f000 f82f 	bl	8009d4c <__malloc_unlock>
 8009cee:	f104 000b 	add.w	r0, r4, #11
 8009cf2:	1d23      	adds	r3, r4, #4
 8009cf4:	f020 0007 	bic.w	r0, r0, #7
 8009cf8:	1ac2      	subs	r2, r0, r3
 8009cfa:	bf1c      	itt	ne
 8009cfc:	1a1b      	subne	r3, r3, r0
 8009cfe:	50a3      	strne	r3, [r4, r2]
 8009d00:	e7af      	b.n	8009c62 <_malloc_r+0x22>
 8009d02:	6862      	ldr	r2, [r4, #4]
 8009d04:	42a3      	cmp	r3, r4
 8009d06:	bf0c      	ite	eq
 8009d08:	f8c8 2000 	streq.w	r2, [r8]
 8009d0c:	605a      	strne	r2, [r3, #4]
 8009d0e:	e7eb      	b.n	8009ce8 <_malloc_r+0xa8>
 8009d10:	4623      	mov	r3, r4
 8009d12:	6864      	ldr	r4, [r4, #4]
 8009d14:	e7ae      	b.n	8009c74 <_malloc_r+0x34>
 8009d16:	463c      	mov	r4, r7
 8009d18:	687f      	ldr	r7, [r7, #4]
 8009d1a:	e7b6      	b.n	8009c8a <_malloc_r+0x4a>
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	42a3      	cmp	r3, r4
 8009d22:	d1fb      	bne.n	8009d1c <_malloc_r+0xdc>
 8009d24:	2300      	movs	r3, #0
 8009d26:	6053      	str	r3, [r2, #4]
 8009d28:	e7de      	b.n	8009ce8 <_malloc_r+0xa8>
 8009d2a:	230c      	movs	r3, #12
 8009d2c:	6033      	str	r3, [r6, #0]
 8009d2e:	4630      	mov	r0, r6
 8009d30:	f000 f80c 	bl	8009d4c <__malloc_unlock>
 8009d34:	e794      	b.n	8009c60 <_malloc_r+0x20>
 8009d36:	6005      	str	r5, [r0, #0]
 8009d38:	e7d6      	b.n	8009ce8 <_malloc_r+0xa8>
 8009d3a:	bf00      	nop
 8009d3c:	20000768 	.word	0x20000768

08009d40 <__malloc_lock>:
 8009d40:	4801      	ldr	r0, [pc, #4]	@ (8009d48 <__malloc_lock+0x8>)
 8009d42:	f7ff b8a8 	b.w	8008e96 <__retarget_lock_acquire_recursive>
 8009d46:	bf00      	nop
 8009d48:	20000760 	.word	0x20000760

08009d4c <__malloc_unlock>:
 8009d4c:	4801      	ldr	r0, [pc, #4]	@ (8009d54 <__malloc_unlock+0x8>)
 8009d4e:	f7ff b8a3 	b.w	8008e98 <__retarget_lock_release_recursive>
 8009d52:	bf00      	nop
 8009d54:	20000760 	.word	0x20000760

08009d58 <_Balloc>:
 8009d58:	b570      	push	{r4, r5, r6, lr}
 8009d5a:	69c6      	ldr	r6, [r0, #28]
 8009d5c:	4604      	mov	r4, r0
 8009d5e:	460d      	mov	r5, r1
 8009d60:	b976      	cbnz	r6, 8009d80 <_Balloc+0x28>
 8009d62:	2010      	movs	r0, #16
 8009d64:	f7ff ff42 	bl	8009bec <malloc>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	61e0      	str	r0, [r4, #28]
 8009d6c:	b920      	cbnz	r0, 8009d78 <_Balloc+0x20>
 8009d6e:	4b18      	ldr	r3, [pc, #96]	@ (8009dd0 <_Balloc+0x78>)
 8009d70:	4818      	ldr	r0, [pc, #96]	@ (8009dd4 <_Balloc+0x7c>)
 8009d72:	216b      	movs	r1, #107	@ 0x6b
 8009d74:	f001 fd74 	bl	800b860 <__assert_func>
 8009d78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009d7c:	6006      	str	r6, [r0, #0]
 8009d7e:	60c6      	str	r6, [r0, #12]
 8009d80:	69e6      	ldr	r6, [r4, #28]
 8009d82:	68f3      	ldr	r3, [r6, #12]
 8009d84:	b183      	cbz	r3, 8009da8 <_Balloc+0x50>
 8009d86:	69e3      	ldr	r3, [r4, #28]
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009d8e:	b9b8      	cbnz	r0, 8009dc0 <_Balloc+0x68>
 8009d90:	2101      	movs	r1, #1
 8009d92:	fa01 f605 	lsl.w	r6, r1, r5
 8009d96:	1d72      	adds	r2, r6, #5
 8009d98:	0092      	lsls	r2, r2, #2
 8009d9a:	4620      	mov	r0, r4
 8009d9c:	f001 fd7e 	bl	800b89c <_calloc_r>
 8009da0:	b160      	cbz	r0, 8009dbc <_Balloc+0x64>
 8009da2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009da6:	e00e      	b.n	8009dc6 <_Balloc+0x6e>
 8009da8:	2221      	movs	r2, #33	@ 0x21
 8009daa:	2104      	movs	r1, #4
 8009dac:	4620      	mov	r0, r4
 8009dae:	f001 fd75 	bl	800b89c <_calloc_r>
 8009db2:	69e3      	ldr	r3, [r4, #28]
 8009db4:	60f0      	str	r0, [r6, #12]
 8009db6:	68db      	ldr	r3, [r3, #12]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d1e4      	bne.n	8009d86 <_Balloc+0x2e>
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	bd70      	pop	{r4, r5, r6, pc}
 8009dc0:	6802      	ldr	r2, [r0, #0]
 8009dc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009dcc:	e7f7      	b.n	8009dbe <_Balloc+0x66>
 8009dce:	bf00      	nop
 8009dd0:	0800c85e 	.word	0x0800c85e
 8009dd4:	0800c8de 	.word	0x0800c8de

08009dd8 <_Bfree>:
 8009dd8:	b570      	push	{r4, r5, r6, lr}
 8009dda:	69c6      	ldr	r6, [r0, #28]
 8009ddc:	4605      	mov	r5, r0
 8009dde:	460c      	mov	r4, r1
 8009de0:	b976      	cbnz	r6, 8009e00 <_Bfree+0x28>
 8009de2:	2010      	movs	r0, #16
 8009de4:	f7ff ff02 	bl	8009bec <malloc>
 8009de8:	4602      	mov	r2, r0
 8009dea:	61e8      	str	r0, [r5, #28]
 8009dec:	b920      	cbnz	r0, 8009df8 <_Bfree+0x20>
 8009dee:	4b09      	ldr	r3, [pc, #36]	@ (8009e14 <_Bfree+0x3c>)
 8009df0:	4809      	ldr	r0, [pc, #36]	@ (8009e18 <_Bfree+0x40>)
 8009df2:	218f      	movs	r1, #143	@ 0x8f
 8009df4:	f001 fd34 	bl	800b860 <__assert_func>
 8009df8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009dfc:	6006      	str	r6, [r0, #0]
 8009dfe:	60c6      	str	r6, [r0, #12]
 8009e00:	b13c      	cbz	r4, 8009e12 <_Bfree+0x3a>
 8009e02:	69eb      	ldr	r3, [r5, #28]
 8009e04:	6862      	ldr	r2, [r4, #4]
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e0c:	6021      	str	r1, [r4, #0]
 8009e0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e12:	bd70      	pop	{r4, r5, r6, pc}
 8009e14:	0800c85e 	.word	0x0800c85e
 8009e18:	0800c8de 	.word	0x0800c8de

08009e1c <__multadd>:
 8009e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e20:	690d      	ldr	r5, [r1, #16]
 8009e22:	4607      	mov	r7, r0
 8009e24:	460c      	mov	r4, r1
 8009e26:	461e      	mov	r6, r3
 8009e28:	f101 0c14 	add.w	ip, r1, #20
 8009e2c:	2000      	movs	r0, #0
 8009e2e:	f8dc 3000 	ldr.w	r3, [ip]
 8009e32:	b299      	uxth	r1, r3
 8009e34:	fb02 6101 	mla	r1, r2, r1, r6
 8009e38:	0c1e      	lsrs	r6, r3, #16
 8009e3a:	0c0b      	lsrs	r3, r1, #16
 8009e3c:	fb02 3306 	mla	r3, r2, r6, r3
 8009e40:	b289      	uxth	r1, r1
 8009e42:	3001      	adds	r0, #1
 8009e44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009e48:	4285      	cmp	r5, r0
 8009e4a:	f84c 1b04 	str.w	r1, [ip], #4
 8009e4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009e52:	dcec      	bgt.n	8009e2e <__multadd+0x12>
 8009e54:	b30e      	cbz	r6, 8009e9a <__multadd+0x7e>
 8009e56:	68a3      	ldr	r3, [r4, #8]
 8009e58:	42ab      	cmp	r3, r5
 8009e5a:	dc19      	bgt.n	8009e90 <__multadd+0x74>
 8009e5c:	6861      	ldr	r1, [r4, #4]
 8009e5e:	4638      	mov	r0, r7
 8009e60:	3101      	adds	r1, #1
 8009e62:	f7ff ff79 	bl	8009d58 <_Balloc>
 8009e66:	4680      	mov	r8, r0
 8009e68:	b928      	cbnz	r0, 8009e76 <__multadd+0x5a>
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8009ea0 <__multadd+0x84>)
 8009e6e:	480d      	ldr	r0, [pc, #52]	@ (8009ea4 <__multadd+0x88>)
 8009e70:	21ba      	movs	r1, #186	@ 0xba
 8009e72:	f001 fcf5 	bl	800b860 <__assert_func>
 8009e76:	6922      	ldr	r2, [r4, #16]
 8009e78:	3202      	adds	r2, #2
 8009e7a:	f104 010c 	add.w	r1, r4, #12
 8009e7e:	0092      	lsls	r2, r2, #2
 8009e80:	300c      	adds	r0, #12
 8009e82:	f001 fcd7 	bl	800b834 <memcpy>
 8009e86:	4621      	mov	r1, r4
 8009e88:	4638      	mov	r0, r7
 8009e8a:	f7ff ffa5 	bl	8009dd8 <_Bfree>
 8009e8e:	4644      	mov	r4, r8
 8009e90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009e94:	3501      	adds	r5, #1
 8009e96:	615e      	str	r6, [r3, #20]
 8009e98:	6125      	str	r5, [r4, #16]
 8009e9a:	4620      	mov	r0, r4
 8009e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ea0:	0800c8cd 	.word	0x0800c8cd
 8009ea4:	0800c8de 	.word	0x0800c8de

08009ea8 <__s2b>:
 8009ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009eac:	460c      	mov	r4, r1
 8009eae:	4615      	mov	r5, r2
 8009eb0:	461f      	mov	r7, r3
 8009eb2:	2209      	movs	r2, #9
 8009eb4:	3308      	adds	r3, #8
 8009eb6:	4606      	mov	r6, r0
 8009eb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009ebc:	2100      	movs	r1, #0
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	429a      	cmp	r2, r3
 8009ec2:	db09      	blt.n	8009ed8 <__s2b+0x30>
 8009ec4:	4630      	mov	r0, r6
 8009ec6:	f7ff ff47 	bl	8009d58 <_Balloc>
 8009eca:	b940      	cbnz	r0, 8009ede <__s2b+0x36>
 8009ecc:	4602      	mov	r2, r0
 8009ece:	4b19      	ldr	r3, [pc, #100]	@ (8009f34 <__s2b+0x8c>)
 8009ed0:	4819      	ldr	r0, [pc, #100]	@ (8009f38 <__s2b+0x90>)
 8009ed2:	21d3      	movs	r1, #211	@ 0xd3
 8009ed4:	f001 fcc4 	bl	800b860 <__assert_func>
 8009ed8:	0052      	lsls	r2, r2, #1
 8009eda:	3101      	adds	r1, #1
 8009edc:	e7f0      	b.n	8009ec0 <__s2b+0x18>
 8009ede:	9b08      	ldr	r3, [sp, #32]
 8009ee0:	6143      	str	r3, [r0, #20]
 8009ee2:	2d09      	cmp	r5, #9
 8009ee4:	f04f 0301 	mov.w	r3, #1
 8009ee8:	6103      	str	r3, [r0, #16]
 8009eea:	dd16      	ble.n	8009f1a <__s2b+0x72>
 8009eec:	f104 0909 	add.w	r9, r4, #9
 8009ef0:	46c8      	mov	r8, r9
 8009ef2:	442c      	add	r4, r5
 8009ef4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009ef8:	4601      	mov	r1, r0
 8009efa:	3b30      	subs	r3, #48	@ 0x30
 8009efc:	220a      	movs	r2, #10
 8009efe:	4630      	mov	r0, r6
 8009f00:	f7ff ff8c 	bl	8009e1c <__multadd>
 8009f04:	45a0      	cmp	r8, r4
 8009f06:	d1f5      	bne.n	8009ef4 <__s2b+0x4c>
 8009f08:	f1a5 0408 	sub.w	r4, r5, #8
 8009f0c:	444c      	add	r4, r9
 8009f0e:	1b2d      	subs	r5, r5, r4
 8009f10:	1963      	adds	r3, r4, r5
 8009f12:	42bb      	cmp	r3, r7
 8009f14:	db04      	blt.n	8009f20 <__s2b+0x78>
 8009f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f1a:	340a      	adds	r4, #10
 8009f1c:	2509      	movs	r5, #9
 8009f1e:	e7f6      	b.n	8009f0e <__s2b+0x66>
 8009f20:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009f24:	4601      	mov	r1, r0
 8009f26:	3b30      	subs	r3, #48	@ 0x30
 8009f28:	220a      	movs	r2, #10
 8009f2a:	4630      	mov	r0, r6
 8009f2c:	f7ff ff76 	bl	8009e1c <__multadd>
 8009f30:	e7ee      	b.n	8009f10 <__s2b+0x68>
 8009f32:	bf00      	nop
 8009f34:	0800c8cd 	.word	0x0800c8cd
 8009f38:	0800c8de 	.word	0x0800c8de

08009f3c <__hi0bits>:
 8009f3c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009f40:	4603      	mov	r3, r0
 8009f42:	bf36      	itet	cc
 8009f44:	0403      	lslcc	r3, r0, #16
 8009f46:	2000      	movcs	r0, #0
 8009f48:	2010      	movcc	r0, #16
 8009f4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009f4e:	bf3c      	itt	cc
 8009f50:	021b      	lslcc	r3, r3, #8
 8009f52:	3008      	addcc	r0, #8
 8009f54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f58:	bf3c      	itt	cc
 8009f5a:	011b      	lslcc	r3, r3, #4
 8009f5c:	3004      	addcc	r0, #4
 8009f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f62:	bf3c      	itt	cc
 8009f64:	009b      	lslcc	r3, r3, #2
 8009f66:	3002      	addcc	r0, #2
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	db05      	blt.n	8009f78 <__hi0bits+0x3c>
 8009f6c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009f70:	f100 0001 	add.w	r0, r0, #1
 8009f74:	bf08      	it	eq
 8009f76:	2020      	moveq	r0, #32
 8009f78:	4770      	bx	lr

08009f7a <__lo0bits>:
 8009f7a:	6803      	ldr	r3, [r0, #0]
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	f013 0007 	ands.w	r0, r3, #7
 8009f82:	d00b      	beq.n	8009f9c <__lo0bits+0x22>
 8009f84:	07d9      	lsls	r1, r3, #31
 8009f86:	d421      	bmi.n	8009fcc <__lo0bits+0x52>
 8009f88:	0798      	lsls	r0, r3, #30
 8009f8a:	bf49      	itett	mi
 8009f8c:	085b      	lsrmi	r3, r3, #1
 8009f8e:	089b      	lsrpl	r3, r3, #2
 8009f90:	2001      	movmi	r0, #1
 8009f92:	6013      	strmi	r3, [r2, #0]
 8009f94:	bf5c      	itt	pl
 8009f96:	6013      	strpl	r3, [r2, #0]
 8009f98:	2002      	movpl	r0, #2
 8009f9a:	4770      	bx	lr
 8009f9c:	b299      	uxth	r1, r3
 8009f9e:	b909      	cbnz	r1, 8009fa4 <__lo0bits+0x2a>
 8009fa0:	0c1b      	lsrs	r3, r3, #16
 8009fa2:	2010      	movs	r0, #16
 8009fa4:	b2d9      	uxtb	r1, r3
 8009fa6:	b909      	cbnz	r1, 8009fac <__lo0bits+0x32>
 8009fa8:	3008      	adds	r0, #8
 8009faa:	0a1b      	lsrs	r3, r3, #8
 8009fac:	0719      	lsls	r1, r3, #28
 8009fae:	bf04      	itt	eq
 8009fb0:	091b      	lsreq	r3, r3, #4
 8009fb2:	3004      	addeq	r0, #4
 8009fb4:	0799      	lsls	r1, r3, #30
 8009fb6:	bf04      	itt	eq
 8009fb8:	089b      	lsreq	r3, r3, #2
 8009fba:	3002      	addeq	r0, #2
 8009fbc:	07d9      	lsls	r1, r3, #31
 8009fbe:	d403      	bmi.n	8009fc8 <__lo0bits+0x4e>
 8009fc0:	085b      	lsrs	r3, r3, #1
 8009fc2:	f100 0001 	add.w	r0, r0, #1
 8009fc6:	d003      	beq.n	8009fd0 <__lo0bits+0x56>
 8009fc8:	6013      	str	r3, [r2, #0]
 8009fca:	4770      	bx	lr
 8009fcc:	2000      	movs	r0, #0
 8009fce:	4770      	bx	lr
 8009fd0:	2020      	movs	r0, #32
 8009fd2:	4770      	bx	lr

08009fd4 <__i2b>:
 8009fd4:	b510      	push	{r4, lr}
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	2101      	movs	r1, #1
 8009fda:	f7ff febd 	bl	8009d58 <_Balloc>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	b928      	cbnz	r0, 8009fee <__i2b+0x1a>
 8009fe2:	4b05      	ldr	r3, [pc, #20]	@ (8009ff8 <__i2b+0x24>)
 8009fe4:	4805      	ldr	r0, [pc, #20]	@ (8009ffc <__i2b+0x28>)
 8009fe6:	f240 1145 	movw	r1, #325	@ 0x145
 8009fea:	f001 fc39 	bl	800b860 <__assert_func>
 8009fee:	2301      	movs	r3, #1
 8009ff0:	6144      	str	r4, [r0, #20]
 8009ff2:	6103      	str	r3, [r0, #16]
 8009ff4:	bd10      	pop	{r4, pc}
 8009ff6:	bf00      	nop
 8009ff8:	0800c8cd 	.word	0x0800c8cd
 8009ffc:	0800c8de 	.word	0x0800c8de

0800a000 <__multiply>:
 800a000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a004:	4617      	mov	r7, r2
 800a006:	690a      	ldr	r2, [r1, #16]
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	bfa8      	it	ge
 800a00e:	463b      	movge	r3, r7
 800a010:	4689      	mov	r9, r1
 800a012:	bfa4      	itt	ge
 800a014:	460f      	movge	r7, r1
 800a016:	4699      	movge	r9, r3
 800a018:	693d      	ldr	r5, [r7, #16]
 800a01a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	6879      	ldr	r1, [r7, #4]
 800a022:	eb05 060a 	add.w	r6, r5, sl
 800a026:	42b3      	cmp	r3, r6
 800a028:	b085      	sub	sp, #20
 800a02a:	bfb8      	it	lt
 800a02c:	3101      	addlt	r1, #1
 800a02e:	f7ff fe93 	bl	8009d58 <_Balloc>
 800a032:	b930      	cbnz	r0, 800a042 <__multiply+0x42>
 800a034:	4602      	mov	r2, r0
 800a036:	4b41      	ldr	r3, [pc, #260]	@ (800a13c <__multiply+0x13c>)
 800a038:	4841      	ldr	r0, [pc, #260]	@ (800a140 <__multiply+0x140>)
 800a03a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a03e:	f001 fc0f 	bl	800b860 <__assert_func>
 800a042:	f100 0414 	add.w	r4, r0, #20
 800a046:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a04a:	4623      	mov	r3, r4
 800a04c:	2200      	movs	r2, #0
 800a04e:	4573      	cmp	r3, lr
 800a050:	d320      	bcc.n	800a094 <__multiply+0x94>
 800a052:	f107 0814 	add.w	r8, r7, #20
 800a056:	f109 0114 	add.w	r1, r9, #20
 800a05a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a05e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a062:	9302      	str	r3, [sp, #8]
 800a064:	1beb      	subs	r3, r5, r7
 800a066:	3b15      	subs	r3, #21
 800a068:	f023 0303 	bic.w	r3, r3, #3
 800a06c:	3304      	adds	r3, #4
 800a06e:	3715      	adds	r7, #21
 800a070:	42bd      	cmp	r5, r7
 800a072:	bf38      	it	cc
 800a074:	2304      	movcc	r3, #4
 800a076:	9301      	str	r3, [sp, #4]
 800a078:	9b02      	ldr	r3, [sp, #8]
 800a07a:	9103      	str	r1, [sp, #12]
 800a07c:	428b      	cmp	r3, r1
 800a07e:	d80c      	bhi.n	800a09a <__multiply+0x9a>
 800a080:	2e00      	cmp	r6, #0
 800a082:	dd03      	ble.n	800a08c <__multiply+0x8c>
 800a084:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d055      	beq.n	800a138 <__multiply+0x138>
 800a08c:	6106      	str	r6, [r0, #16]
 800a08e:	b005      	add	sp, #20
 800a090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a094:	f843 2b04 	str.w	r2, [r3], #4
 800a098:	e7d9      	b.n	800a04e <__multiply+0x4e>
 800a09a:	f8b1 a000 	ldrh.w	sl, [r1]
 800a09e:	f1ba 0f00 	cmp.w	sl, #0
 800a0a2:	d01f      	beq.n	800a0e4 <__multiply+0xe4>
 800a0a4:	46c4      	mov	ip, r8
 800a0a6:	46a1      	mov	r9, r4
 800a0a8:	2700      	movs	r7, #0
 800a0aa:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a0ae:	f8d9 3000 	ldr.w	r3, [r9]
 800a0b2:	fa1f fb82 	uxth.w	fp, r2
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	fb0a 330b 	mla	r3, sl, fp, r3
 800a0bc:	443b      	add	r3, r7
 800a0be:	f8d9 7000 	ldr.w	r7, [r9]
 800a0c2:	0c12      	lsrs	r2, r2, #16
 800a0c4:	0c3f      	lsrs	r7, r7, #16
 800a0c6:	fb0a 7202 	mla	r2, sl, r2, r7
 800a0ca:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0d4:	4565      	cmp	r5, ip
 800a0d6:	f849 3b04 	str.w	r3, [r9], #4
 800a0da:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a0de:	d8e4      	bhi.n	800a0aa <__multiply+0xaa>
 800a0e0:	9b01      	ldr	r3, [sp, #4]
 800a0e2:	50e7      	str	r7, [r4, r3]
 800a0e4:	9b03      	ldr	r3, [sp, #12]
 800a0e6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a0ea:	3104      	adds	r1, #4
 800a0ec:	f1b9 0f00 	cmp.w	r9, #0
 800a0f0:	d020      	beq.n	800a134 <__multiply+0x134>
 800a0f2:	6823      	ldr	r3, [r4, #0]
 800a0f4:	4647      	mov	r7, r8
 800a0f6:	46a4      	mov	ip, r4
 800a0f8:	f04f 0a00 	mov.w	sl, #0
 800a0fc:	f8b7 b000 	ldrh.w	fp, [r7]
 800a100:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a104:	fb09 220b 	mla	r2, r9, fp, r2
 800a108:	4452      	add	r2, sl
 800a10a:	b29b      	uxth	r3, r3
 800a10c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a110:	f84c 3b04 	str.w	r3, [ip], #4
 800a114:	f857 3b04 	ldr.w	r3, [r7], #4
 800a118:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a11c:	f8bc 3000 	ldrh.w	r3, [ip]
 800a120:	fb09 330a 	mla	r3, r9, sl, r3
 800a124:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a128:	42bd      	cmp	r5, r7
 800a12a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a12e:	d8e5      	bhi.n	800a0fc <__multiply+0xfc>
 800a130:	9a01      	ldr	r2, [sp, #4]
 800a132:	50a3      	str	r3, [r4, r2]
 800a134:	3404      	adds	r4, #4
 800a136:	e79f      	b.n	800a078 <__multiply+0x78>
 800a138:	3e01      	subs	r6, #1
 800a13a:	e7a1      	b.n	800a080 <__multiply+0x80>
 800a13c:	0800c8cd 	.word	0x0800c8cd
 800a140:	0800c8de 	.word	0x0800c8de

0800a144 <__pow5mult>:
 800a144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a148:	4615      	mov	r5, r2
 800a14a:	f012 0203 	ands.w	r2, r2, #3
 800a14e:	4607      	mov	r7, r0
 800a150:	460e      	mov	r6, r1
 800a152:	d007      	beq.n	800a164 <__pow5mult+0x20>
 800a154:	4c25      	ldr	r4, [pc, #148]	@ (800a1ec <__pow5mult+0xa8>)
 800a156:	3a01      	subs	r2, #1
 800a158:	2300      	movs	r3, #0
 800a15a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a15e:	f7ff fe5d 	bl	8009e1c <__multadd>
 800a162:	4606      	mov	r6, r0
 800a164:	10ad      	asrs	r5, r5, #2
 800a166:	d03d      	beq.n	800a1e4 <__pow5mult+0xa0>
 800a168:	69fc      	ldr	r4, [r7, #28]
 800a16a:	b97c      	cbnz	r4, 800a18c <__pow5mult+0x48>
 800a16c:	2010      	movs	r0, #16
 800a16e:	f7ff fd3d 	bl	8009bec <malloc>
 800a172:	4602      	mov	r2, r0
 800a174:	61f8      	str	r0, [r7, #28]
 800a176:	b928      	cbnz	r0, 800a184 <__pow5mult+0x40>
 800a178:	4b1d      	ldr	r3, [pc, #116]	@ (800a1f0 <__pow5mult+0xac>)
 800a17a:	481e      	ldr	r0, [pc, #120]	@ (800a1f4 <__pow5mult+0xb0>)
 800a17c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a180:	f001 fb6e 	bl	800b860 <__assert_func>
 800a184:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a188:	6004      	str	r4, [r0, #0]
 800a18a:	60c4      	str	r4, [r0, #12]
 800a18c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a190:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a194:	b94c      	cbnz	r4, 800a1aa <__pow5mult+0x66>
 800a196:	f240 2171 	movw	r1, #625	@ 0x271
 800a19a:	4638      	mov	r0, r7
 800a19c:	f7ff ff1a 	bl	8009fd4 <__i2b>
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a1a6:	4604      	mov	r4, r0
 800a1a8:	6003      	str	r3, [r0, #0]
 800a1aa:	f04f 0900 	mov.w	r9, #0
 800a1ae:	07eb      	lsls	r3, r5, #31
 800a1b0:	d50a      	bpl.n	800a1c8 <__pow5mult+0x84>
 800a1b2:	4631      	mov	r1, r6
 800a1b4:	4622      	mov	r2, r4
 800a1b6:	4638      	mov	r0, r7
 800a1b8:	f7ff ff22 	bl	800a000 <__multiply>
 800a1bc:	4631      	mov	r1, r6
 800a1be:	4680      	mov	r8, r0
 800a1c0:	4638      	mov	r0, r7
 800a1c2:	f7ff fe09 	bl	8009dd8 <_Bfree>
 800a1c6:	4646      	mov	r6, r8
 800a1c8:	106d      	asrs	r5, r5, #1
 800a1ca:	d00b      	beq.n	800a1e4 <__pow5mult+0xa0>
 800a1cc:	6820      	ldr	r0, [r4, #0]
 800a1ce:	b938      	cbnz	r0, 800a1e0 <__pow5mult+0x9c>
 800a1d0:	4622      	mov	r2, r4
 800a1d2:	4621      	mov	r1, r4
 800a1d4:	4638      	mov	r0, r7
 800a1d6:	f7ff ff13 	bl	800a000 <__multiply>
 800a1da:	6020      	str	r0, [r4, #0]
 800a1dc:	f8c0 9000 	str.w	r9, [r0]
 800a1e0:	4604      	mov	r4, r0
 800a1e2:	e7e4      	b.n	800a1ae <__pow5mult+0x6a>
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1ea:	bf00      	nop
 800a1ec:	0800c9f0 	.word	0x0800c9f0
 800a1f0:	0800c85e 	.word	0x0800c85e
 800a1f4:	0800c8de 	.word	0x0800c8de

0800a1f8 <__lshift>:
 800a1f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1fc:	460c      	mov	r4, r1
 800a1fe:	6849      	ldr	r1, [r1, #4]
 800a200:	6923      	ldr	r3, [r4, #16]
 800a202:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a206:	68a3      	ldr	r3, [r4, #8]
 800a208:	4607      	mov	r7, r0
 800a20a:	4691      	mov	r9, r2
 800a20c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a210:	f108 0601 	add.w	r6, r8, #1
 800a214:	42b3      	cmp	r3, r6
 800a216:	db0b      	blt.n	800a230 <__lshift+0x38>
 800a218:	4638      	mov	r0, r7
 800a21a:	f7ff fd9d 	bl	8009d58 <_Balloc>
 800a21e:	4605      	mov	r5, r0
 800a220:	b948      	cbnz	r0, 800a236 <__lshift+0x3e>
 800a222:	4602      	mov	r2, r0
 800a224:	4b28      	ldr	r3, [pc, #160]	@ (800a2c8 <__lshift+0xd0>)
 800a226:	4829      	ldr	r0, [pc, #164]	@ (800a2cc <__lshift+0xd4>)
 800a228:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a22c:	f001 fb18 	bl	800b860 <__assert_func>
 800a230:	3101      	adds	r1, #1
 800a232:	005b      	lsls	r3, r3, #1
 800a234:	e7ee      	b.n	800a214 <__lshift+0x1c>
 800a236:	2300      	movs	r3, #0
 800a238:	f100 0114 	add.w	r1, r0, #20
 800a23c:	f100 0210 	add.w	r2, r0, #16
 800a240:	4618      	mov	r0, r3
 800a242:	4553      	cmp	r3, sl
 800a244:	db33      	blt.n	800a2ae <__lshift+0xb6>
 800a246:	6920      	ldr	r0, [r4, #16]
 800a248:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a24c:	f104 0314 	add.w	r3, r4, #20
 800a250:	f019 091f 	ands.w	r9, r9, #31
 800a254:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a258:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a25c:	d02b      	beq.n	800a2b6 <__lshift+0xbe>
 800a25e:	f1c9 0e20 	rsb	lr, r9, #32
 800a262:	468a      	mov	sl, r1
 800a264:	2200      	movs	r2, #0
 800a266:	6818      	ldr	r0, [r3, #0]
 800a268:	fa00 f009 	lsl.w	r0, r0, r9
 800a26c:	4310      	orrs	r0, r2
 800a26e:	f84a 0b04 	str.w	r0, [sl], #4
 800a272:	f853 2b04 	ldr.w	r2, [r3], #4
 800a276:	459c      	cmp	ip, r3
 800a278:	fa22 f20e 	lsr.w	r2, r2, lr
 800a27c:	d8f3      	bhi.n	800a266 <__lshift+0x6e>
 800a27e:	ebac 0304 	sub.w	r3, ip, r4
 800a282:	3b15      	subs	r3, #21
 800a284:	f023 0303 	bic.w	r3, r3, #3
 800a288:	3304      	adds	r3, #4
 800a28a:	f104 0015 	add.w	r0, r4, #21
 800a28e:	4560      	cmp	r0, ip
 800a290:	bf88      	it	hi
 800a292:	2304      	movhi	r3, #4
 800a294:	50ca      	str	r2, [r1, r3]
 800a296:	b10a      	cbz	r2, 800a29c <__lshift+0xa4>
 800a298:	f108 0602 	add.w	r6, r8, #2
 800a29c:	3e01      	subs	r6, #1
 800a29e:	4638      	mov	r0, r7
 800a2a0:	612e      	str	r6, [r5, #16]
 800a2a2:	4621      	mov	r1, r4
 800a2a4:	f7ff fd98 	bl	8009dd8 <_Bfree>
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2ae:	f842 0f04 	str.w	r0, [r2, #4]!
 800a2b2:	3301      	adds	r3, #1
 800a2b4:	e7c5      	b.n	800a242 <__lshift+0x4a>
 800a2b6:	3904      	subs	r1, #4
 800a2b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2bc:	f841 2f04 	str.w	r2, [r1, #4]!
 800a2c0:	459c      	cmp	ip, r3
 800a2c2:	d8f9      	bhi.n	800a2b8 <__lshift+0xc0>
 800a2c4:	e7ea      	b.n	800a29c <__lshift+0xa4>
 800a2c6:	bf00      	nop
 800a2c8:	0800c8cd 	.word	0x0800c8cd
 800a2cc:	0800c8de 	.word	0x0800c8de

0800a2d0 <__mcmp>:
 800a2d0:	690a      	ldr	r2, [r1, #16]
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	6900      	ldr	r0, [r0, #16]
 800a2d6:	1a80      	subs	r0, r0, r2
 800a2d8:	b530      	push	{r4, r5, lr}
 800a2da:	d10e      	bne.n	800a2fa <__mcmp+0x2a>
 800a2dc:	3314      	adds	r3, #20
 800a2de:	3114      	adds	r1, #20
 800a2e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a2e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a2e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a2ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a2f0:	4295      	cmp	r5, r2
 800a2f2:	d003      	beq.n	800a2fc <__mcmp+0x2c>
 800a2f4:	d205      	bcs.n	800a302 <__mcmp+0x32>
 800a2f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a2fa:	bd30      	pop	{r4, r5, pc}
 800a2fc:	42a3      	cmp	r3, r4
 800a2fe:	d3f3      	bcc.n	800a2e8 <__mcmp+0x18>
 800a300:	e7fb      	b.n	800a2fa <__mcmp+0x2a>
 800a302:	2001      	movs	r0, #1
 800a304:	e7f9      	b.n	800a2fa <__mcmp+0x2a>
	...

0800a308 <__mdiff>:
 800a308:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a30c:	4689      	mov	r9, r1
 800a30e:	4606      	mov	r6, r0
 800a310:	4611      	mov	r1, r2
 800a312:	4648      	mov	r0, r9
 800a314:	4614      	mov	r4, r2
 800a316:	f7ff ffdb 	bl	800a2d0 <__mcmp>
 800a31a:	1e05      	subs	r5, r0, #0
 800a31c:	d112      	bne.n	800a344 <__mdiff+0x3c>
 800a31e:	4629      	mov	r1, r5
 800a320:	4630      	mov	r0, r6
 800a322:	f7ff fd19 	bl	8009d58 <_Balloc>
 800a326:	4602      	mov	r2, r0
 800a328:	b928      	cbnz	r0, 800a336 <__mdiff+0x2e>
 800a32a:	4b3f      	ldr	r3, [pc, #252]	@ (800a428 <__mdiff+0x120>)
 800a32c:	f240 2137 	movw	r1, #567	@ 0x237
 800a330:	483e      	ldr	r0, [pc, #248]	@ (800a42c <__mdiff+0x124>)
 800a332:	f001 fa95 	bl	800b860 <__assert_func>
 800a336:	2301      	movs	r3, #1
 800a338:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a33c:	4610      	mov	r0, r2
 800a33e:	b003      	add	sp, #12
 800a340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a344:	bfbc      	itt	lt
 800a346:	464b      	movlt	r3, r9
 800a348:	46a1      	movlt	r9, r4
 800a34a:	4630      	mov	r0, r6
 800a34c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a350:	bfba      	itte	lt
 800a352:	461c      	movlt	r4, r3
 800a354:	2501      	movlt	r5, #1
 800a356:	2500      	movge	r5, #0
 800a358:	f7ff fcfe 	bl	8009d58 <_Balloc>
 800a35c:	4602      	mov	r2, r0
 800a35e:	b918      	cbnz	r0, 800a368 <__mdiff+0x60>
 800a360:	4b31      	ldr	r3, [pc, #196]	@ (800a428 <__mdiff+0x120>)
 800a362:	f240 2145 	movw	r1, #581	@ 0x245
 800a366:	e7e3      	b.n	800a330 <__mdiff+0x28>
 800a368:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a36c:	6926      	ldr	r6, [r4, #16]
 800a36e:	60c5      	str	r5, [r0, #12]
 800a370:	f109 0310 	add.w	r3, r9, #16
 800a374:	f109 0514 	add.w	r5, r9, #20
 800a378:	f104 0e14 	add.w	lr, r4, #20
 800a37c:	f100 0b14 	add.w	fp, r0, #20
 800a380:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a384:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a388:	9301      	str	r3, [sp, #4]
 800a38a:	46d9      	mov	r9, fp
 800a38c:	f04f 0c00 	mov.w	ip, #0
 800a390:	9b01      	ldr	r3, [sp, #4]
 800a392:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a396:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a39a:	9301      	str	r3, [sp, #4]
 800a39c:	fa1f f38a 	uxth.w	r3, sl
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	b283      	uxth	r3, r0
 800a3a4:	1acb      	subs	r3, r1, r3
 800a3a6:	0c00      	lsrs	r0, r0, #16
 800a3a8:	4463      	add	r3, ip
 800a3aa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a3ae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a3b8:	4576      	cmp	r6, lr
 800a3ba:	f849 3b04 	str.w	r3, [r9], #4
 800a3be:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a3c2:	d8e5      	bhi.n	800a390 <__mdiff+0x88>
 800a3c4:	1b33      	subs	r3, r6, r4
 800a3c6:	3b15      	subs	r3, #21
 800a3c8:	f023 0303 	bic.w	r3, r3, #3
 800a3cc:	3415      	adds	r4, #21
 800a3ce:	3304      	adds	r3, #4
 800a3d0:	42a6      	cmp	r6, r4
 800a3d2:	bf38      	it	cc
 800a3d4:	2304      	movcc	r3, #4
 800a3d6:	441d      	add	r5, r3
 800a3d8:	445b      	add	r3, fp
 800a3da:	461e      	mov	r6, r3
 800a3dc:	462c      	mov	r4, r5
 800a3de:	4544      	cmp	r4, r8
 800a3e0:	d30e      	bcc.n	800a400 <__mdiff+0xf8>
 800a3e2:	f108 0103 	add.w	r1, r8, #3
 800a3e6:	1b49      	subs	r1, r1, r5
 800a3e8:	f021 0103 	bic.w	r1, r1, #3
 800a3ec:	3d03      	subs	r5, #3
 800a3ee:	45a8      	cmp	r8, r5
 800a3f0:	bf38      	it	cc
 800a3f2:	2100      	movcc	r1, #0
 800a3f4:	440b      	add	r3, r1
 800a3f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a3fa:	b191      	cbz	r1, 800a422 <__mdiff+0x11a>
 800a3fc:	6117      	str	r7, [r2, #16]
 800a3fe:	e79d      	b.n	800a33c <__mdiff+0x34>
 800a400:	f854 1b04 	ldr.w	r1, [r4], #4
 800a404:	46e6      	mov	lr, ip
 800a406:	0c08      	lsrs	r0, r1, #16
 800a408:	fa1c fc81 	uxtah	ip, ip, r1
 800a40c:	4471      	add	r1, lr
 800a40e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a412:	b289      	uxth	r1, r1
 800a414:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a418:	f846 1b04 	str.w	r1, [r6], #4
 800a41c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a420:	e7dd      	b.n	800a3de <__mdiff+0xd6>
 800a422:	3f01      	subs	r7, #1
 800a424:	e7e7      	b.n	800a3f6 <__mdiff+0xee>
 800a426:	bf00      	nop
 800a428:	0800c8cd 	.word	0x0800c8cd
 800a42c:	0800c8de 	.word	0x0800c8de

0800a430 <__ulp>:
 800a430:	b082      	sub	sp, #8
 800a432:	ed8d 0b00 	vstr	d0, [sp]
 800a436:	9a01      	ldr	r2, [sp, #4]
 800a438:	4b0f      	ldr	r3, [pc, #60]	@ (800a478 <__ulp+0x48>)
 800a43a:	4013      	ands	r3, r2
 800a43c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a440:	2b00      	cmp	r3, #0
 800a442:	dc08      	bgt.n	800a456 <__ulp+0x26>
 800a444:	425b      	negs	r3, r3
 800a446:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a44a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a44e:	da04      	bge.n	800a45a <__ulp+0x2a>
 800a450:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a454:	4113      	asrs	r3, r2
 800a456:	2200      	movs	r2, #0
 800a458:	e008      	b.n	800a46c <__ulp+0x3c>
 800a45a:	f1a2 0314 	sub.w	r3, r2, #20
 800a45e:	2b1e      	cmp	r3, #30
 800a460:	bfda      	itte	le
 800a462:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a466:	40da      	lsrle	r2, r3
 800a468:	2201      	movgt	r2, #1
 800a46a:	2300      	movs	r3, #0
 800a46c:	4619      	mov	r1, r3
 800a46e:	4610      	mov	r0, r2
 800a470:	ec41 0b10 	vmov	d0, r0, r1
 800a474:	b002      	add	sp, #8
 800a476:	4770      	bx	lr
 800a478:	7ff00000 	.word	0x7ff00000

0800a47c <__b2d>:
 800a47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a480:	6906      	ldr	r6, [r0, #16]
 800a482:	f100 0814 	add.w	r8, r0, #20
 800a486:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a48a:	1f37      	subs	r7, r6, #4
 800a48c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a490:	4610      	mov	r0, r2
 800a492:	f7ff fd53 	bl	8009f3c <__hi0bits>
 800a496:	f1c0 0320 	rsb	r3, r0, #32
 800a49a:	280a      	cmp	r0, #10
 800a49c:	600b      	str	r3, [r1, #0]
 800a49e:	491b      	ldr	r1, [pc, #108]	@ (800a50c <__b2d+0x90>)
 800a4a0:	dc15      	bgt.n	800a4ce <__b2d+0x52>
 800a4a2:	f1c0 0c0b 	rsb	ip, r0, #11
 800a4a6:	fa22 f30c 	lsr.w	r3, r2, ip
 800a4aa:	45b8      	cmp	r8, r7
 800a4ac:	ea43 0501 	orr.w	r5, r3, r1
 800a4b0:	bf34      	ite	cc
 800a4b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a4b6:	2300      	movcs	r3, #0
 800a4b8:	3015      	adds	r0, #21
 800a4ba:	fa02 f000 	lsl.w	r0, r2, r0
 800a4be:	fa23 f30c 	lsr.w	r3, r3, ip
 800a4c2:	4303      	orrs	r3, r0
 800a4c4:	461c      	mov	r4, r3
 800a4c6:	ec45 4b10 	vmov	d0, r4, r5
 800a4ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4ce:	45b8      	cmp	r8, r7
 800a4d0:	bf3a      	itte	cc
 800a4d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a4d6:	f1a6 0708 	subcc.w	r7, r6, #8
 800a4da:	2300      	movcs	r3, #0
 800a4dc:	380b      	subs	r0, #11
 800a4de:	d012      	beq.n	800a506 <__b2d+0x8a>
 800a4e0:	f1c0 0120 	rsb	r1, r0, #32
 800a4e4:	fa23 f401 	lsr.w	r4, r3, r1
 800a4e8:	4082      	lsls	r2, r0
 800a4ea:	4322      	orrs	r2, r4
 800a4ec:	4547      	cmp	r7, r8
 800a4ee:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a4f2:	bf8c      	ite	hi
 800a4f4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a4f8:	2200      	movls	r2, #0
 800a4fa:	4083      	lsls	r3, r0
 800a4fc:	40ca      	lsrs	r2, r1
 800a4fe:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a502:	4313      	orrs	r3, r2
 800a504:	e7de      	b.n	800a4c4 <__b2d+0x48>
 800a506:	ea42 0501 	orr.w	r5, r2, r1
 800a50a:	e7db      	b.n	800a4c4 <__b2d+0x48>
 800a50c:	3ff00000 	.word	0x3ff00000

0800a510 <__d2b>:
 800a510:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a514:	460f      	mov	r7, r1
 800a516:	2101      	movs	r1, #1
 800a518:	ec59 8b10 	vmov	r8, r9, d0
 800a51c:	4616      	mov	r6, r2
 800a51e:	f7ff fc1b 	bl	8009d58 <_Balloc>
 800a522:	4604      	mov	r4, r0
 800a524:	b930      	cbnz	r0, 800a534 <__d2b+0x24>
 800a526:	4602      	mov	r2, r0
 800a528:	4b23      	ldr	r3, [pc, #140]	@ (800a5b8 <__d2b+0xa8>)
 800a52a:	4824      	ldr	r0, [pc, #144]	@ (800a5bc <__d2b+0xac>)
 800a52c:	f240 310f 	movw	r1, #783	@ 0x30f
 800a530:	f001 f996 	bl	800b860 <__assert_func>
 800a534:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a538:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a53c:	b10d      	cbz	r5, 800a542 <__d2b+0x32>
 800a53e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a542:	9301      	str	r3, [sp, #4]
 800a544:	f1b8 0300 	subs.w	r3, r8, #0
 800a548:	d023      	beq.n	800a592 <__d2b+0x82>
 800a54a:	4668      	mov	r0, sp
 800a54c:	9300      	str	r3, [sp, #0]
 800a54e:	f7ff fd14 	bl	8009f7a <__lo0bits>
 800a552:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a556:	b1d0      	cbz	r0, 800a58e <__d2b+0x7e>
 800a558:	f1c0 0320 	rsb	r3, r0, #32
 800a55c:	fa02 f303 	lsl.w	r3, r2, r3
 800a560:	430b      	orrs	r3, r1
 800a562:	40c2      	lsrs	r2, r0
 800a564:	6163      	str	r3, [r4, #20]
 800a566:	9201      	str	r2, [sp, #4]
 800a568:	9b01      	ldr	r3, [sp, #4]
 800a56a:	61a3      	str	r3, [r4, #24]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	bf0c      	ite	eq
 800a570:	2201      	moveq	r2, #1
 800a572:	2202      	movne	r2, #2
 800a574:	6122      	str	r2, [r4, #16]
 800a576:	b1a5      	cbz	r5, 800a5a2 <__d2b+0x92>
 800a578:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a57c:	4405      	add	r5, r0
 800a57e:	603d      	str	r5, [r7, #0]
 800a580:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a584:	6030      	str	r0, [r6, #0]
 800a586:	4620      	mov	r0, r4
 800a588:	b003      	add	sp, #12
 800a58a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a58e:	6161      	str	r1, [r4, #20]
 800a590:	e7ea      	b.n	800a568 <__d2b+0x58>
 800a592:	a801      	add	r0, sp, #4
 800a594:	f7ff fcf1 	bl	8009f7a <__lo0bits>
 800a598:	9b01      	ldr	r3, [sp, #4]
 800a59a:	6163      	str	r3, [r4, #20]
 800a59c:	3020      	adds	r0, #32
 800a59e:	2201      	movs	r2, #1
 800a5a0:	e7e8      	b.n	800a574 <__d2b+0x64>
 800a5a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a5a6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a5aa:	6038      	str	r0, [r7, #0]
 800a5ac:	6918      	ldr	r0, [r3, #16]
 800a5ae:	f7ff fcc5 	bl	8009f3c <__hi0bits>
 800a5b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a5b6:	e7e5      	b.n	800a584 <__d2b+0x74>
 800a5b8:	0800c8cd 	.word	0x0800c8cd
 800a5bc:	0800c8de 	.word	0x0800c8de

0800a5c0 <__ratio>:
 800a5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c4:	b085      	sub	sp, #20
 800a5c6:	e9cd 1000 	strd	r1, r0, [sp]
 800a5ca:	a902      	add	r1, sp, #8
 800a5cc:	f7ff ff56 	bl	800a47c <__b2d>
 800a5d0:	9800      	ldr	r0, [sp, #0]
 800a5d2:	a903      	add	r1, sp, #12
 800a5d4:	ec55 4b10 	vmov	r4, r5, d0
 800a5d8:	f7ff ff50 	bl	800a47c <__b2d>
 800a5dc:	9b01      	ldr	r3, [sp, #4]
 800a5de:	6919      	ldr	r1, [r3, #16]
 800a5e0:	9b00      	ldr	r3, [sp, #0]
 800a5e2:	691b      	ldr	r3, [r3, #16]
 800a5e4:	1ac9      	subs	r1, r1, r3
 800a5e6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a5ea:	1a9b      	subs	r3, r3, r2
 800a5ec:	ec5b ab10 	vmov	sl, fp, d0
 800a5f0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	bfce      	itee	gt
 800a5f8:	462a      	movgt	r2, r5
 800a5fa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a5fe:	465a      	movle	r2, fp
 800a600:	462f      	mov	r7, r5
 800a602:	46d9      	mov	r9, fp
 800a604:	bfcc      	ite	gt
 800a606:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a60a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a60e:	464b      	mov	r3, r9
 800a610:	4652      	mov	r2, sl
 800a612:	4620      	mov	r0, r4
 800a614:	4639      	mov	r1, r7
 800a616:	f7f6 f921 	bl	800085c <__aeabi_ddiv>
 800a61a:	ec41 0b10 	vmov	d0, r0, r1
 800a61e:	b005      	add	sp, #20
 800a620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a624 <__copybits>:
 800a624:	3901      	subs	r1, #1
 800a626:	b570      	push	{r4, r5, r6, lr}
 800a628:	1149      	asrs	r1, r1, #5
 800a62a:	6914      	ldr	r4, [r2, #16]
 800a62c:	3101      	adds	r1, #1
 800a62e:	f102 0314 	add.w	r3, r2, #20
 800a632:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a636:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a63a:	1f05      	subs	r5, r0, #4
 800a63c:	42a3      	cmp	r3, r4
 800a63e:	d30c      	bcc.n	800a65a <__copybits+0x36>
 800a640:	1aa3      	subs	r3, r4, r2
 800a642:	3b11      	subs	r3, #17
 800a644:	f023 0303 	bic.w	r3, r3, #3
 800a648:	3211      	adds	r2, #17
 800a64a:	42a2      	cmp	r2, r4
 800a64c:	bf88      	it	hi
 800a64e:	2300      	movhi	r3, #0
 800a650:	4418      	add	r0, r3
 800a652:	2300      	movs	r3, #0
 800a654:	4288      	cmp	r0, r1
 800a656:	d305      	bcc.n	800a664 <__copybits+0x40>
 800a658:	bd70      	pop	{r4, r5, r6, pc}
 800a65a:	f853 6b04 	ldr.w	r6, [r3], #4
 800a65e:	f845 6f04 	str.w	r6, [r5, #4]!
 800a662:	e7eb      	b.n	800a63c <__copybits+0x18>
 800a664:	f840 3b04 	str.w	r3, [r0], #4
 800a668:	e7f4      	b.n	800a654 <__copybits+0x30>

0800a66a <__any_on>:
 800a66a:	f100 0214 	add.w	r2, r0, #20
 800a66e:	6900      	ldr	r0, [r0, #16]
 800a670:	114b      	asrs	r3, r1, #5
 800a672:	4298      	cmp	r0, r3
 800a674:	b510      	push	{r4, lr}
 800a676:	db11      	blt.n	800a69c <__any_on+0x32>
 800a678:	dd0a      	ble.n	800a690 <__any_on+0x26>
 800a67a:	f011 011f 	ands.w	r1, r1, #31
 800a67e:	d007      	beq.n	800a690 <__any_on+0x26>
 800a680:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a684:	fa24 f001 	lsr.w	r0, r4, r1
 800a688:	fa00 f101 	lsl.w	r1, r0, r1
 800a68c:	428c      	cmp	r4, r1
 800a68e:	d10b      	bne.n	800a6a8 <__any_on+0x3e>
 800a690:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a694:	4293      	cmp	r3, r2
 800a696:	d803      	bhi.n	800a6a0 <__any_on+0x36>
 800a698:	2000      	movs	r0, #0
 800a69a:	bd10      	pop	{r4, pc}
 800a69c:	4603      	mov	r3, r0
 800a69e:	e7f7      	b.n	800a690 <__any_on+0x26>
 800a6a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a6a4:	2900      	cmp	r1, #0
 800a6a6:	d0f5      	beq.n	800a694 <__any_on+0x2a>
 800a6a8:	2001      	movs	r0, #1
 800a6aa:	e7f6      	b.n	800a69a <__any_on+0x30>

0800a6ac <sulp>:
 800a6ac:	b570      	push	{r4, r5, r6, lr}
 800a6ae:	4604      	mov	r4, r0
 800a6b0:	460d      	mov	r5, r1
 800a6b2:	ec45 4b10 	vmov	d0, r4, r5
 800a6b6:	4616      	mov	r6, r2
 800a6b8:	f7ff feba 	bl	800a430 <__ulp>
 800a6bc:	ec51 0b10 	vmov	r0, r1, d0
 800a6c0:	b17e      	cbz	r6, 800a6e2 <sulp+0x36>
 800a6c2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a6c6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	dd09      	ble.n	800a6e2 <sulp+0x36>
 800a6ce:	051b      	lsls	r3, r3, #20
 800a6d0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a6d4:	2400      	movs	r4, #0
 800a6d6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a6da:	4622      	mov	r2, r4
 800a6dc:	462b      	mov	r3, r5
 800a6de:	f7f5 ff93 	bl	8000608 <__aeabi_dmul>
 800a6e2:	ec41 0b10 	vmov	d0, r0, r1
 800a6e6:	bd70      	pop	{r4, r5, r6, pc}

0800a6e8 <_strtod_l>:
 800a6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ec:	b09f      	sub	sp, #124	@ 0x7c
 800a6ee:	460c      	mov	r4, r1
 800a6f0:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	921a      	str	r2, [sp, #104]	@ 0x68
 800a6f6:	9005      	str	r0, [sp, #20]
 800a6f8:	f04f 0a00 	mov.w	sl, #0
 800a6fc:	f04f 0b00 	mov.w	fp, #0
 800a700:	460a      	mov	r2, r1
 800a702:	9219      	str	r2, [sp, #100]	@ 0x64
 800a704:	7811      	ldrb	r1, [r2, #0]
 800a706:	292b      	cmp	r1, #43	@ 0x2b
 800a708:	d04a      	beq.n	800a7a0 <_strtod_l+0xb8>
 800a70a:	d838      	bhi.n	800a77e <_strtod_l+0x96>
 800a70c:	290d      	cmp	r1, #13
 800a70e:	d832      	bhi.n	800a776 <_strtod_l+0x8e>
 800a710:	2908      	cmp	r1, #8
 800a712:	d832      	bhi.n	800a77a <_strtod_l+0x92>
 800a714:	2900      	cmp	r1, #0
 800a716:	d03b      	beq.n	800a790 <_strtod_l+0xa8>
 800a718:	2200      	movs	r2, #0
 800a71a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a71c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a71e:	782a      	ldrb	r2, [r5, #0]
 800a720:	2a30      	cmp	r2, #48	@ 0x30
 800a722:	f040 80b2 	bne.w	800a88a <_strtod_l+0x1a2>
 800a726:	786a      	ldrb	r2, [r5, #1]
 800a728:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a72c:	2a58      	cmp	r2, #88	@ 0x58
 800a72e:	d16e      	bne.n	800a80e <_strtod_l+0x126>
 800a730:	9302      	str	r3, [sp, #8]
 800a732:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a734:	9301      	str	r3, [sp, #4]
 800a736:	ab1a      	add	r3, sp, #104	@ 0x68
 800a738:	9300      	str	r3, [sp, #0]
 800a73a:	4a8f      	ldr	r2, [pc, #572]	@ (800a978 <_strtod_l+0x290>)
 800a73c:	9805      	ldr	r0, [sp, #20]
 800a73e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a740:	a919      	add	r1, sp, #100	@ 0x64
 800a742:	f001 f927 	bl	800b994 <__gethex>
 800a746:	f010 060f 	ands.w	r6, r0, #15
 800a74a:	4604      	mov	r4, r0
 800a74c:	d005      	beq.n	800a75a <_strtod_l+0x72>
 800a74e:	2e06      	cmp	r6, #6
 800a750:	d128      	bne.n	800a7a4 <_strtod_l+0xbc>
 800a752:	3501      	adds	r5, #1
 800a754:	2300      	movs	r3, #0
 800a756:	9519      	str	r5, [sp, #100]	@ 0x64
 800a758:	930e      	str	r3, [sp, #56]	@ 0x38
 800a75a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	f040 858e 	bne.w	800b27e <_strtod_l+0xb96>
 800a762:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a764:	b1cb      	cbz	r3, 800a79a <_strtod_l+0xb2>
 800a766:	4652      	mov	r2, sl
 800a768:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a76c:	ec43 2b10 	vmov	d0, r2, r3
 800a770:	b01f      	add	sp, #124	@ 0x7c
 800a772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a776:	2920      	cmp	r1, #32
 800a778:	d1ce      	bne.n	800a718 <_strtod_l+0x30>
 800a77a:	3201      	adds	r2, #1
 800a77c:	e7c1      	b.n	800a702 <_strtod_l+0x1a>
 800a77e:	292d      	cmp	r1, #45	@ 0x2d
 800a780:	d1ca      	bne.n	800a718 <_strtod_l+0x30>
 800a782:	2101      	movs	r1, #1
 800a784:	910e      	str	r1, [sp, #56]	@ 0x38
 800a786:	1c51      	adds	r1, r2, #1
 800a788:	9119      	str	r1, [sp, #100]	@ 0x64
 800a78a:	7852      	ldrb	r2, [r2, #1]
 800a78c:	2a00      	cmp	r2, #0
 800a78e:	d1c5      	bne.n	800a71c <_strtod_l+0x34>
 800a790:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a792:	9419      	str	r4, [sp, #100]	@ 0x64
 800a794:	2b00      	cmp	r3, #0
 800a796:	f040 8570 	bne.w	800b27a <_strtod_l+0xb92>
 800a79a:	4652      	mov	r2, sl
 800a79c:	465b      	mov	r3, fp
 800a79e:	e7e5      	b.n	800a76c <_strtod_l+0x84>
 800a7a0:	2100      	movs	r1, #0
 800a7a2:	e7ef      	b.n	800a784 <_strtod_l+0x9c>
 800a7a4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a7a6:	b13a      	cbz	r2, 800a7b8 <_strtod_l+0xd0>
 800a7a8:	2135      	movs	r1, #53	@ 0x35
 800a7aa:	a81c      	add	r0, sp, #112	@ 0x70
 800a7ac:	f7ff ff3a 	bl	800a624 <__copybits>
 800a7b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a7b2:	9805      	ldr	r0, [sp, #20]
 800a7b4:	f7ff fb10 	bl	8009dd8 <_Bfree>
 800a7b8:	3e01      	subs	r6, #1
 800a7ba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a7bc:	2e04      	cmp	r6, #4
 800a7be:	d806      	bhi.n	800a7ce <_strtod_l+0xe6>
 800a7c0:	e8df f006 	tbb	[pc, r6]
 800a7c4:	201d0314 	.word	0x201d0314
 800a7c8:	14          	.byte	0x14
 800a7c9:	00          	.byte	0x00
 800a7ca:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a7ce:	05e1      	lsls	r1, r4, #23
 800a7d0:	bf48      	it	mi
 800a7d2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a7d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a7da:	0d1b      	lsrs	r3, r3, #20
 800a7dc:	051b      	lsls	r3, r3, #20
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d1bb      	bne.n	800a75a <_strtod_l+0x72>
 800a7e2:	f7fe fb2d 	bl	8008e40 <__errno>
 800a7e6:	2322      	movs	r3, #34	@ 0x22
 800a7e8:	6003      	str	r3, [r0, #0]
 800a7ea:	e7b6      	b.n	800a75a <_strtod_l+0x72>
 800a7ec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a7f0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a7f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a7f8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a7fc:	e7e7      	b.n	800a7ce <_strtod_l+0xe6>
 800a7fe:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800a980 <_strtod_l+0x298>
 800a802:	e7e4      	b.n	800a7ce <_strtod_l+0xe6>
 800a804:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a808:	f04f 3aff 	mov.w	sl, #4294967295
 800a80c:	e7df      	b.n	800a7ce <_strtod_l+0xe6>
 800a80e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a810:	1c5a      	adds	r2, r3, #1
 800a812:	9219      	str	r2, [sp, #100]	@ 0x64
 800a814:	785b      	ldrb	r3, [r3, #1]
 800a816:	2b30      	cmp	r3, #48	@ 0x30
 800a818:	d0f9      	beq.n	800a80e <_strtod_l+0x126>
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d09d      	beq.n	800a75a <_strtod_l+0x72>
 800a81e:	2301      	movs	r3, #1
 800a820:	2700      	movs	r7, #0
 800a822:	9308      	str	r3, [sp, #32]
 800a824:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a826:	930c      	str	r3, [sp, #48]	@ 0x30
 800a828:	970b      	str	r7, [sp, #44]	@ 0x2c
 800a82a:	46b9      	mov	r9, r7
 800a82c:	220a      	movs	r2, #10
 800a82e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a830:	7805      	ldrb	r5, [r0, #0]
 800a832:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a836:	b2d9      	uxtb	r1, r3
 800a838:	2909      	cmp	r1, #9
 800a83a:	d928      	bls.n	800a88e <_strtod_l+0x1a6>
 800a83c:	494f      	ldr	r1, [pc, #316]	@ (800a97c <_strtod_l+0x294>)
 800a83e:	2201      	movs	r2, #1
 800a840:	f000 ffd6 	bl	800b7f0 <strncmp>
 800a844:	2800      	cmp	r0, #0
 800a846:	d032      	beq.n	800a8ae <_strtod_l+0x1c6>
 800a848:	2000      	movs	r0, #0
 800a84a:	462a      	mov	r2, r5
 800a84c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a84e:	464d      	mov	r5, r9
 800a850:	4603      	mov	r3, r0
 800a852:	2a65      	cmp	r2, #101	@ 0x65
 800a854:	d001      	beq.n	800a85a <_strtod_l+0x172>
 800a856:	2a45      	cmp	r2, #69	@ 0x45
 800a858:	d114      	bne.n	800a884 <_strtod_l+0x19c>
 800a85a:	b91d      	cbnz	r5, 800a864 <_strtod_l+0x17c>
 800a85c:	9a08      	ldr	r2, [sp, #32]
 800a85e:	4302      	orrs	r2, r0
 800a860:	d096      	beq.n	800a790 <_strtod_l+0xa8>
 800a862:	2500      	movs	r5, #0
 800a864:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a866:	1c62      	adds	r2, r4, #1
 800a868:	9219      	str	r2, [sp, #100]	@ 0x64
 800a86a:	7862      	ldrb	r2, [r4, #1]
 800a86c:	2a2b      	cmp	r2, #43	@ 0x2b
 800a86e:	d07a      	beq.n	800a966 <_strtod_l+0x27e>
 800a870:	2a2d      	cmp	r2, #45	@ 0x2d
 800a872:	d07e      	beq.n	800a972 <_strtod_l+0x28a>
 800a874:	f04f 0c00 	mov.w	ip, #0
 800a878:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a87c:	2909      	cmp	r1, #9
 800a87e:	f240 8085 	bls.w	800a98c <_strtod_l+0x2a4>
 800a882:	9419      	str	r4, [sp, #100]	@ 0x64
 800a884:	f04f 0800 	mov.w	r8, #0
 800a888:	e0a5      	b.n	800a9d6 <_strtod_l+0x2ee>
 800a88a:	2300      	movs	r3, #0
 800a88c:	e7c8      	b.n	800a820 <_strtod_l+0x138>
 800a88e:	f1b9 0f08 	cmp.w	r9, #8
 800a892:	bfd8      	it	le
 800a894:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800a896:	f100 0001 	add.w	r0, r0, #1
 800a89a:	bfda      	itte	le
 800a89c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a8a0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800a8a2:	fb02 3707 	mlagt	r7, r2, r7, r3
 800a8a6:	f109 0901 	add.w	r9, r9, #1
 800a8aa:	9019      	str	r0, [sp, #100]	@ 0x64
 800a8ac:	e7bf      	b.n	800a82e <_strtod_l+0x146>
 800a8ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a8b0:	1c5a      	adds	r2, r3, #1
 800a8b2:	9219      	str	r2, [sp, #100]	@ 0x64
 800a8b4:	785a      	ldrb	r2, [r3, #1]
 800a8b6:	f1b9 0f00 	cmp.w	r9, #0
 800a8ba:	d03b      	beq.n	800a934 <_strtod_l+0x24c>
 800a8bc:	900a      	str	r0, [sp, #40]	@ 0x28
 800a8be:	464d      	mov	r5, r9
 800a8c0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a8c4:	2b09      	cmp	r3, #9
 800a8c6:	d912      	bls.n	800a8ee <_strtod_l+0x206>
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	e7c2      	b.n	800a852 <_strtod_l+0x16a>
 800a8cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a8ce:	1c5a      	adds	r2, r3, #1
 800a8d0:	9219      	str	r2, [sp, #100]	@ 0x64
 800a8d2:	785a      	ldrb	r2, [r3, #1]
 800a8d4:	3001      	adds	r0, #1
 800a8d6:	2a30      	cmp	r2, #48	@ 0x30
 800a8d8:	d0f8      	beq.n	800a8cc <_strtod_l+0x1e4>
 800a8da:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a8de:	2b08      	cmp	r3, #8
 800a8e0:	f200 84d2 	bhi.w	800b288 <_strtod_l+0xba0>
 800a8e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a8e6:	900a      	str	r0, [sp, #40]	@ 0x28
 800a8e8:	2000      	movs	r0, #0
 800a8ea:	930c      	str	r3, [sp, #48]	@ 0x30
 800a8ec:	4605      	mov	r5, r0
 800a8ee:	3a30      	subs	r2, #48	@ 0x30
 800a8f0:	f100 0301 	add.w	r3, r0, #1
 800a8f4:	d018      	beq.n	800a928 <_strtod_l+0x240>
 800a8f6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a8f8:	4419      	add	r1, r3
 800a8fa:	910a      	str	r1, [sp, #40]	@ 0x28
 800a8fc:	462e      	mov	r6, r5
 800a8fe:	f04f 0e0a 	mov.w	lr, #10
 800a902:	1c71      	adds	r1, r6, #1
 800a904:	eba1 0c05 	sub.w	ip, r1, r5
 800a908:	4563      	cmp	r3, ip
 800a90a:	dc15      	bgt.n	800a938 <_strtod_l+0x250>
 800a90c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800a910:	182b      	adds	r3, r5, r0
 800a912:	2b08      	cmp	r3, #8
 800a914:	f105 0501 	add.w	r5, r5, #1
 800a918:	4405      	add	r5, r0
 800a91a:	dc1a      	bgt.n	800a952 <_strtod_l+0x26a>
 800a91c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a91e:	230a      	movs	r3, #10
 800a920:	fb03 2301 	mla	r3, r3, r1, r2
 800a924:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a926:	2300      	movs	r3, #0
 800a928:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a92a:	1c51      	adds	r1, r2, #1
 800a92c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a92e:	7852      	ldrb	r2, [r2, #1]
 800a930:	4618      	mov	r0, r3
 800a932:	e7c5      	b.n	800a8c0 <_strtod_l+0x1d8>
 800a934:	4648      	mov	r0, r9
 800a936:	e7ce      	b.n	800a8d6 <_strtod_l+0x1ee>
 800a938:	2e08      	cmp	r6, #8
 800a93a:	dc05      	bgt.n	800a948 <_strtod_l+0x260>
 800a93c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800a93e:	fb0e f606 	mul.w	r6, lr, r6
 800a942:	960b      	str	r6, [sp, #44]	@ 0x2c
 800a944:	460e      	mov	r6, r1
 800a946:	e7dc      	b.n	800a902 <_strtod_l+0x21a>
 800a948:	2910      	cmp	r1, #16
 800a94a:	bfd8      	it	le
 800a94c:	fb0e f707 	mulle.w	r7, lr, r7
 800a950:	e7f8      	b.n	800a944 <_strtod_l+0x25c>
 800a952:	2b0f      	cmp	r3, #15
 800a954:	bfdc      	itt	le
 800a956:	230a      	movle	r3, #10
 800a958:	fb03 2707 	mlale	r7, r3, r7, r2
 800a95c:	e7e3      	b.n	800a926 <_strtod_l+0x23e>
 800a95e:	2300      	movs	r3, #0
 800a960:	930a      	str	r3, [sp, #40]	@ 0x28
 800a962:	2301      	movs	r3, #1
 800a964:	e77a      	b.n	800a85c <_strtod_l+0x174>
 800a966:	f04f 0c00 	mov.w	ip, #0
 800a96a:	1ca2      	adds	r2, r4, #2
 800a96c:	9219      	str	r2, [sp, #100]	@ 0x64
 800a96e:	78a2      	ldrb	r2, [r4, #2]
 800a970:	e782      	b.n	800a878 <_strtod_l+0x190>
 800a972:	f04f 0c01 	mov.w	ip, #1
 800a976:	e7f8      	b.n	800a96a <_strtod_l+0x282>
 800a978:	0800cb04 	.word	0x0800cb04
 800a97c:	0800c937 	.word	0x0800c937
 800a980:	7ff00000 	.word	0x7ff00000
 800a984:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a986:	1c51      	adds	r1, r2, #1
 800a988:	9119      	str	r1, [sp, #100]	@ 0x64
 800a98a:	7852      	ldrb	r2, [r2, #1]
 800a98c:	2a30      	cmp	r2, #48	@ 0x30
 800a98e:	d0f9      	beq.n	800a984 <_strtod_l+0x29c>
 800a990:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a994:	2908      	cmp	r1, #8
 800a996:	f63f af75 	bhi.w	800a884 <_strtod_l+0x19c>
 800a99a:	3a30      	subs	r2, #48	@ 0x30
 800a99c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a99e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a9a0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a9a2:	f04f 080a 	mov.w	r8, #10
 800a9a6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a9a8:	1c56      	adds	r6, r2, #1
 800a9aa:	9619      	str	r6, [sp, #100]	@ 0x64
 800a9ac:	7852      	ldrb	r2, [r2, #1]
 800a9ae:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a9b2:	f1be 0f09 	cmp.w	lr, #9
 800a9b6:	d939      	bls.n	800aa2c <_strtod_l+0x344>
 800a9b8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a9ba:	1a76      	subs	r6, r6, r1
 800a9bc:	2e08      	cmp	r6, #8
 800a9be:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a9c2:	dc03      	bgt.n	800a9cc <_strtod_l+0x2e4>
 800a9c4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a9c6:	4588      	cmp	r8, r1
 800a9c8:	bfa8      	it	ge
 800a9ca:	4688      	movge	r8, r1
 800a9cc:	f1bc 0f00 	cmp.w	ip, #0
 800a9d0:	d001      	beq.n	800a9d6 <_strtod_l+0x2ee>
 800a9d2:	f1c8 0800 	rsb	r8, r8, #0
 800a9d6:	2d00      	cmp	r5, #0
 800a9d8:	d14e      	bne.n	800aa78 <_strtod_l+0x390>
 800a9da:	9908      	ldr	r1, [sp, #32]
 800a9dc:	4308      	orrs	r0, r1
 800a9de:	f47f aebc 	bne.w	800a75a <_strtod_l+0x72>
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	f47f aed4 	bne.w	800a790 <_strtod_l+0xa8>
 800a9e8:	2a69      	cmp	r2, #105	@ 0x69
 800a9ea:	d028      	beq.n	800aa3e <_strtod_l+0x356>
 800a9ec:	dc25      	bgt.n	800aa3a <_strtod_l+0x352>
 800a9ee:	2a49      	cmp	r2, #73	@ 0x49
 800a9f0:	d025      	beq.n	800aa3e <_strtod_l+0x356>
 800a9f2:	2a4e      	cmp	r2, #78	@ 0x4e
 800a9f4:	f47f aecc 	bne.w	800a790 <_strtod_l+0xa8>
 800a9f8:	499a      	ldr	r1, [pc, #616]	@ (800ac64 <_strtod_l+0x57c>)
 800a9fa:	a819      	add	r0, sp, #100	@ 0x64
 800a9fc:	f001 f9ec 	bl	800bdd8 <__match>
 800aa00:	2800      	cmp	r0, #0
 800aa02:	f43f aec5 	beq.w	800a790 <_strtod_l+0xa8>
 800aa06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	2b28      	cmp	r3, #40	@ 0x28
 800aa0c:	d12e      	bne.n	800aa6c <_strtod_l+0x384>
 800aa0e:	4996      	ldr	r1, [pc, #600]	@ (800ac68 <_strtod_l+0x580>)
 800aa10:	aa1c      	add	r2, sp, #112	@ 0x70
 800aa12:	a819      	add	r0, sp, #100	@ 0x64
 800aa14:	f001 f9f4 	bl	800be00 <__hexnan>
 800aa18:	2805      	cmp	r0, #5
 800aa1a:	d127      	bne.n	800aa6c <_strtod_l+0x384>
 800aa1c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800aa1e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800aa22:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800aa26:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800aa2a:	e696      	b.n	800a75a <_strtod_l+0x72>
 800aa2c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aa2e:	fb08 2101 	mla	r1, r8, r1, r2
 800aa32:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800aa36:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa38:	e7b5      	b.n	800a9a6 <_strtod_l+0x2be>
 800aa3a:	2a6e      	cmp	r2, #110	@ 0x6e
 800aa3c:	e7da      	b.n	800a9f4 <_strtod_l+0x30c>
 800aa3e:	498b      	ldr	r1, [pc, #556]	@ (800ac6c <_strtod_l+0x584>)
 800aa40:	a819      	add	r0, sp, #100	@ 0x64
 800aa42:	f001 f9c9 	bl	800bdd8 <__match>
 800aa46:	2800      	cmp	r0, #0
 800aa48:	f43f aea2 	beq.w	800a790 <_strtod_l+0xa8>
 800aa4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa4e:	4988      	ldr	r1, [pc, #544]	@ (800ac70 <_strtod_l+0x588>)
 800aa50:	3b01      	subs	r3, #1
 800aa52:	a819      	add	r0, sp, #100	@ 0x64
 800aa54:	9319      	str	r3, [sp, #100]	@ 0x64
 800aa56:	f001 f9bf 	bl	800bdd8 <__match>
 800aa5a:	b910      	cbnz	r0, 800aa62 <_strtod_l+0x37a>
 800aa5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aa5e:	3301      	adds	r3, #1
 800aa60:	9319      	str	r3, [sp, #100]	@ 0x64
 800aa62:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800ac80 <_strtod_l+0x598>
 800aa66:	f04f 0a00 	mov.w	sl, #0
 800aa6a:	e676      	b.n	800a75a <_strtod_l+0x72>
 800aa6c:	4881      	ldr	r0, [pc, #516]	@ (800ac74 <_strtod_l+0x58c>)
 800aa6e:	f000 feef 	bl	800b850 <nan>
 800aa72:	ec5b ab10 	vmov	sl, fp, d0
 800aa76:	e670      	b.n	800a75a <_strtod_l+0x72>
 800aa78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aa7a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800aa7c:	eba8 0303 	sub.w	r3, r8, r3
 800aa80:	f1b9 0f00 	cmp.w	r9, #0
 800aa84:	bf08      	it	eq
 800aa86:	46a9      	moveq	r9, r5
 800aa88:	2d10      	cmp	r5, #16
 800aa8a:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa8c:	462c      	mov	r4, r5
 800aa8e:	bfa8      	it	ge
 800aa90:	2410      	movge	r4, #16
 800aa92:	f7f5 fd3f 	bl	8000514 <__aeabi_ui2d>
 800aa96:	2d09      	cmp	r5, #9
 800aa98:	4682      	mov	sl, r0
 800aa9a:	468b      	mov	fp, r1
 800aa9c:	dc13      	bgt.n	800aac6 <_strtod_l+0x3de>
 800aa9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	f43f ae5a 	beq.w	800a75a <_strtod_l+0x72>
 800aaa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaa8:	dd78      	ble.n	800ab9c <_strtod_l+0x4b4>
 800aaaa:	2b16      	cmp	r3, #22
 800aaac:	dc5f      	bgt.n	800ab6e <_strtod_l+0x486>
 800aaae:	4972      	ldr	r1, [pc, #456]	@ (800ac78 <_strtod_l+0x590>)
 800aab0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aab4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aab8:	4652      	mov	r2, sl
 800aaba:	465b      	mov	r3, fp
 800aabc:	f7f5 fda4 	bl	8000608 <__aeabi_dmul>
 800aac0:	4682      	mov	sl, r0
 800aac2:	468b      	mov	fp, r1
 800aac4:	e649      	b.n	800a75a <_strtod_l+0x72>
 800aac6:	4b6c      	ldr	r3, [pc, #432]	@ (800ac78 <_strtod_l+0x590>)
 800aac8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aacc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800aad0:	f7f5 fd9a 	bl	8000608 <__aeabi_dmul>
 800aad4:	4682      	mov	sl, r0
 800aad6:	4638      	mov	r0, r7
 800aad8:	468b      	mov	fp, r1
 800aada:	f7f5 fd1b 	bl	8000514 <__aeabi_ui2d>
 800aade:	4602      	mov	r2, r0
 800aae0:	460b      	mov	r3, r1
 800aae2:	4650      	mov	r0, sl
 800aae4:	4659      	mov	r1, fp
 800aae6:	f7f5 fbd9 	bl	800029c <__adddf3>
 800aaea:	2d0f      	cmp	r5, #15
 800aaec:	4682      	mov	sl, r0
 800aaee:	468b      	mov	fp, r1
 800aaf0:	ddd5      	ble.n	800aa9e <_strtod_l+0x3b6>
 800aaf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaf4:	1b2c      	subs	r4, r5, r4
 800aaf6:	441c      	add	r4, r3
 800aaf8:	2c00      	cmp	r4, #0
 800aafa:	f340 8093 	ble.w	800ac24 <_strtod_l+0x53c>
 800aafe:	f014 030f 	ands.w	r3, r4, #15
 800ab02:	d00a      	beq.n	800ab1a <_strtod_l+0x432>
 800ab04:	495c      	ldr	r1, [pc, #368]	@ (800ac78 <_strtod_l+0x590>)
 800ab06:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ab0a:	4652      	mov	r2, sl
 800ab0c:	465b      	mov	r3, fp
 800ab0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab12:	f7f5 fd79 	bl	8000608 <__aeabi_dmul>
 800ab16:	4682      	mov	sl, r0
 800ab18:	468b      	mov	fp, r1
 800ab1a:	f034 040f 	bics.w	r4, r4, #15
 800ab1e:	d073      	beq.n	800ac08 <_strtod_l+0x520>
 800ab20:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800ab24:	dd49      	ble.n	800abba <_strtod_l+0x4d2>
 800ab26:	2400      	movs	r4, #0
 800ab28:	46a0      	mov	r8, r4
 800ab2a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ab2c:	46a1      	mov	r9, r4
 800ab2e:	9a05      	ldr	r2, [sp, #20]
 800ab30:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800ac80 <_strtod_l+0x598>
 800ab34:	2322      	movs	r3, #34	@ 0x22
 800ab36:	6013      	str	r3, [r2, #0]
 800ab38:	f04f 0a00 	mov.w	sl, #0
 800ab3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f43f ae0b 	beq.w	800a75a <_strtod_l+0x72>
 800ab44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab46:	9805      	ldr	r0, [sp, #20]
 800ab48:	f7ff f946 	bl	8009dd8 <_Bfree>
 800ab4c:	9805      	ldr	r0, [sp, #20]
 800ab4e:	4649      	mov	r1, r9
 800ab50:	f7ff f942 	bl	8009dd8 <_Bfree>
 800ab54:	9805      	ldr	r0, [sp, #20]
 800ab56:	4641      	mov	r1, r8
 800ab58:	f7ff f93e 	bl	8009dd8 <_Bfree>
 800ab5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ab5e:	9805      	ldr	r0, [sp, #20]
 800ab60:	f7ff f93a 	bl	8009dd8 <_Bfree>
 800ab64:	9805      	ldr	r0, [sp, #20]
 800ab66:	4621      	mov	r1, r4
 800ab68:	f7ff f936 	bl	8009dd8 <_Bfree>
 800ab6c:	e5f5      	b.n	800a75a <_strtod_l+0x72>
 800ab6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab70:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800ab74:	4293      	cmp	r3, r2
 800ab76:	dbbc      	blt.n	800aaf2 <_strtod_l+0x40a>
 800ab78:	4c3f      	ldr	r4, [pc, #252]	@ (800ac78 <_strtod_l+0x590>)
 800ab7a:	f1c5 050f 	rsb	r5, r5, #15
 800ab7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ab82:	4652      	mov	r2, sl
 800ab84:	465b      	mov	r3, fp
 800ab86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab8a:	f7f5 fd3d 	bl	8000608 <__aeabi_dmul>
 800ab8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab90:	1b5d      	subs	r5, r3, r5
 800ab92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ab96:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ab9a:	e78f      	b.n	800aabc <_strtod_l+0x3d4>
 800ab9c:	3316      	adds	r3, #22
 800ab9e:	dba8      	blt.n	800aaf2 <_strtod_l+0x40a>
 800aba0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800aba2:	eba3 0808 	sub.w	r8, r3, r8
 800aba6:	4b34      	ldr	r3, [pc, #208]	@ (800ac78 <_strtod_l+0x590>)
 800aba8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800abac:	e9d8 2300 	ldrd	r2, r3, [r8]
 800abb0:	4650      	mov	r0, sl
 800abb2:	4659      	mov	r1, fp
 800abb4:	f7f5 fe52 	bl	800085c <__aeabi_ddiv>
 800abb8:	e782      	b.n	800aac0 <_strtod_l+0x3d8>
 800abba:	2300      	movs	r3, #0
 800abbc:	4f2f      	ldr	r7, [pc, #188]	@ (800ac7c <_strtod_l+0x594>)
 800abbe:	1124      	asrs	r4, r4, #4
 800abc0:	4650      	mov	r0, sl
 800abc2:	4659      	mov	r1, fp
 800abc4:	461e      	mov	r6, r3
 800abc6:	2c01      	cmp	r4, #1
 800abc8:	dc21      	bgt.n	800ac0e <_strtod_l+0x526>
 800abca:	b10b      	cbz	r3, 800abd0 <_strtod_l+0x4e8>
 800abcc:	4682      	mov	sl, r0
 800abce:	468b      	mov	fp, r1
 800abd0:	492a      	ldr	r1, [pc, #168]	@ (800ac7c <_strtod_l+0x594>)
 800abd2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800abd6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800abda:	4652      	mov	r2, sl
 800abdc:	465b      	mov	r3, fp
 800abde:	e9d1 0100 	ldrd	r0, r1, [r1]
 800abe2:	f7f5 fd11 	bl	8000608 <__aeabi_dmul>
 800abe6:	4b26      	ldr	r3, [pc, #152]	@ (800ac80 <_strtod_l+0x598>)
 800abe8:	460a      	mov	r2, r1
 800abea:	400b      	ands	r3, r1
 800abec:	4925      	ldr	r1, [pc, #148]	@ (800ac84 <_strtod_l+0x59c>)
 800abee:	428b      	cmp	r3, r1
 800abf0:	4682      	mov	sl, r0
 800abf2:	d898      	bhi.n	800ab26 <_strtod_l+0x43e>
 800abf4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800abf8:	428b      	cmp	r3, r1
 800abfa:	bf86      	itte	hi
 800abfc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800ac88 <_strtod_l+0x5a0>
 800ac00:	f04f 3aff 	movhi.w	sl, #4294967295
 800ac04:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ac08:	2300      	movs	r3, #0
 800ac0a:	9308      	str	r3, [sp, #32]
 800ac0c:	e076      	b.n	800acfc <_strtod_l+0x614>
 800ac0e:	07e2      	lsls	r2, r4, #31
 800ac10:	d504      	bpl.n	800ac1c <_strtod_l+0x534>
 800ac12:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac16:	f7f5 fcf7 	bl	8000608 <__aeabi_dmul>
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	3601      	adds	r6, #1
 800ac1e:	1064      	asrs	r4, r4, #1
 800ac20:	3708      	adds	r7, #8
 800ac22:	e7d0      	b.n	800abc6 <_strtod_l+0x4de>
 800ac24:	d0f0      	beq.n	800ac08 <_strtod_l+0x520>
 800ac26:	4264      	negs	r4, r4
 800ac28:	f014 020f 	ands.w	r2, r4, #15
 800ac2c:	d00a      	beq.n	800ac44 <_strtod_l+0x55c>
 800ac2e:	4b12      	ldr	r3, [pc, #72]	@ (800ac78 <_strtod_l+0x590>)
 800ac30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ac34:	4650      	mov	r0, sl
 800ac36:	4659      	mov	r1, fp
 800ac38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac3c:	f7f5 fe0e 	bl	800085c <__aeabi_ddiv>
 800ac40:	4682      	mov	sl, r0
 800ac42:	468b      	mov	fp, r1
 800ac44:	1124      	asrs	r4, r4, #4
 800ac46:	d0df      	beq.n	800ac08 <_strtod_l+0x520>
 800ac48:	2c1f      	cmp	r4, #31
 800ac4a:	dd1f      	ble.n	800ac8c <_strtod_l+0x5a4>
 800ac4c:	2400      	movs	r4, #0
 800ac4e:	46a0      	mov	r8, r4
 800ac50:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ac52:	46a1      	mov	r9, r4
 800ac54:	9a05      	ldr	r2, [sp, #20]
 800ac56:	2322      	movs	r3, #34	@ 0x22
 800ac58:	f04f 0a00 	mov.w	sl, #0
 800ac5c:	f04f 0b00 	mov.w	fp, #0
 800ac60:	6013      	str	r3, [r2, #0]
 800ac62:	e76b      	b.n	800ab3c <_strtod_l+0x454>
 800ac64:	0800c825 	.word	0x0800c825
 800ac68:	0800caf0 	.word	0x0800caf0
 800ac6c:	0800c81d 	.word	0x0800c81d
 800ac70:	0800c854 	.word	0x0800c854
 800ac74:	0800c98d 	.word	0x0800c98d
 800ac78:	0800ca28 	.word	0x0800ca28
 800ac7c:	0800ca00 	.word	0x0800ca00
 800ac80:	7ff00000 	.word	0x7ff00000
 800ac84:	7ca00000 	.word	0x7ca00000
 800ac88:	7fefffff 	.word	0x7fefffff
 800ac8c:	f014 0310 	ands.w	r3, r4, #16
 800ac90:	bf18      	it	ne
 800ac92:	236a      	movne	r3, #106	@ 0x6a
 800ac94:	4ea9      	ldr	r6, [pc, #676]	@ (800af3c <_strtod_l+0x854>)
 800ac96:	9308      	str	r3, [sp, #32]
 800ac98:	4650      	mov	r0, sl
 800ac9a:	4659      	mov	r1, fp
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	07e7      	lsls	r7, r4, #31
 800aca0:	d504      	bpl.n	800acac <_strtod_l+0x5c4>
 800aca2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aca6:	f7f5 fcaf 	bl	8000608 <__aeabi_dmul>
 800acaa:	2301      	movs	r3, #1
 800acac:	1064      	asrs	r4, r4, #1
 800acae:	f106 0608 	add.w	r6, r6, #8
 800acb2:	d1f4      	bne.n	800ac9e <_strtod_l+0x5b6>
 800acb4:	b10b      	cbz	r3, 800acba <_strtod_l+0x5d2>
 800acb6:	4682      	mov	sl, r0
 800acb8:	468b      	mov	fp, r1
 800acba:	9b08      	ldr	r3, [sp, #32]
 800acbc:	b1b3      	cbz	r3, 800acec <_strtod_l+0x604>
 800acbe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800acc2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	4659      	mov	r1, fp
 800acca:	dd0f      	ble.n	800acec <_strtod_l+0x604>
 800accc:	2b1f      	cmp	r3, #31
 800acce:	dd56      	ble.n	800ad7e <_strtod_l+0x696>
 800acd0:	2b34      	cmp	r3, #52	@ 0x34
 800acd2:	bfde      	ittt	le
 800acd4:	f04f 33ff 	movle.w	r3, #4294967295
 800acd8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800acdc:	4093      	lslle	r3, r2
 800acde:	f04f 0a00 	mov.w	sl, #0
 800ace2:	bfcc      	ite	gt
 800ace4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ace8:	ea03 0b01 	andle.w	fp, r3, r1
 800acec:	2200      	movs	r2, #0
 800acee:	2300      	movs	r3, #0
 800acf0:	4650      	mov	r0, sl
 800acf2:	4659      	mov	r1, fp
 800acf4:	f7f5 fef0 	bl	8000ad8 <__aeabi_dcmpeq>
 800acf8:	2800      	cmp	r0, #0
 800acfa:	d1a7      	bne.n	800ac4c <_strtod_l+0x564>
 800acfc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800acfe:	9300      	str	r3, [sp, #0]
 800ad00:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ad02:	9805      	ldr	r0, [sp, #20]
 800ad04:	462b      	mov	r3, r5
 800ad06:	464a      	mov	r2, r9
 800ad08:	f7ff f8ce 	bl	8009ea8 <__s2b>
 800ad0c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800ad0e:	2800      	cmp	r0, #0
 800ad10:	f43f af09 	beq.w	800ab26 <_strtod_l+0x43e>
 800ad14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ad16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad18:	2a00      	cmp	r2, #0
 800ad1a:	eba3 0308 	sub.w	r3, r3, r8
 800ad1e:	bfa8      	it	ge
 800ad20:	2300      	movge	r3, #0
 800ad22:	9312      	str	r3, [sp, #72]	@ 0x48
 800ad24:	2400      	movs	r4, #0
 800ad26:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ad2a:	9316      	str	r3, [sp, #88]	@ 0x58
 800ad2c:	46a0      	mov	r8, r4
 800ad2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad30:	9805      	ldr	r0, [sp, #20]
 800ad32:	6859      	ldr	r1, [r3, #4]
 800ad34:	f7ff f810 	bl	8009d58 <_Balloc>
 800ad38:	4681      	mov	r9, r0
 800ad3a:	2800      	cmp	r0, #0
 800ad3c:	f43f aef7 	beq.w	800ab2e <_strtod_l+0x446>
 800ad40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad42:	691a      	ldr	r2, [r3, #16]
 800ad44:	3202      	adds	r2, #2
 800ad46:	f103 010c 	add.w	r1, r3, #12
 800ad4a:	0092      	lsls	r2, r2, #2
 800ad4c:	300c      	adds	r0, #12
 800ad4e:	f000 fd71 	bl	800b834 <memcpy>
 800ad52:	ec4b ab10 	vmov	d0, sl, fp
 800ad56:	9805      	ldr	r0, [sp, #20]
 800ad58:	aa1c      	add	r2, sp, #112	@ 0x70
 800ad5a:	a91b      	add	r1, sp, #108	@ 0x6c
 800ad5c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ad60:	f7ff fbd6 	bl	800a510 <__d2b>
 800ad64:	901a      	str	r0, [sp, #104]	@ 0x68
 800ad66:	2800      	cmp	r0, #0
 800ad68:	f43f aee1 	beq.w	800ab2e <_strtod_l+0x446>
 800ad6c:	9805      	ldr	r0, [sp, #20]
 800ad6e:	2101      	movs	r1, #1
 800ad70:	f7ff f930 	bl	8009fd4 <__i2b>
 800ad74:	4680      	mov	r8, r0
 800ad76:	b948      	cbnz	r0, 800ad8c <_strtod_l+0x6a4>
 800ad78:	f04f 0800 	mov.w	r8, #0
 800ad7c:	e6d7      	b.n	800ab2e <_strtod_l+0x446>
 800ad7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ad82:	fa02 f303 	lsl.w	r3, r2, r3
 800ad86:	ea03 0a0a 	and.w	sl, r3, sl
 800ad8a:	e7af      	b.n	800acec <_strtod_l+0x604>
 800ad8c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ad8e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ad90:	2d00      	cmp	r5, #0
 800ad92:	bfab      	itete	ge
 800ad94:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ad96:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ad98:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ad9a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ad9c:	bfac      	ite	ge
 800ad9e:	18ef      	addge	r7, r5, r3
 800ada0:	1b5e      	sublt	r6, r3, r5
 800ada2:	9b08      	ldr	r3, [sp, #32]
 800ada4:	1aed      	subs	r5, r5, r3
 800ada6:	4415      	add	r5, r2
 800ada8:	4b65      	ldr	r3, [pc, #404]	@ (800af40 <_strtod_l+0x858>)
 800adaa:	3d01      	subs	r5, #1
 800adac:	429d      	cmp	r5, r3
 800adae:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800adb2:	da50      	bge.n	800ae56 <_strtod_l+0x76e>
 800adb4:	1b5b      	subs	r3, r3, r5
 800adb6:	2b1f      	cmp	r3, #31
 800adb8:	eba2 0203 	sub.w	r2, r2, r3
 800adbc:	f04f 0101 	mov.w	r1, #1
 800adc0:	dc3d      	bgt.n	800ae3e <_strtod_l+0x756>
 800adc2:	fa01 f303 	lsl.w	r3, r1, r3
 800adc6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800adc8:	2300      	movs	r3, #0
 800adca:	9310      	str	r3, [sp, #64]	@ 0x40
 800adcc:	18bd      	adds	r5, r7, r2
 800adce:	9b08      	ldr	r3, [sp, #32]
 800add0:	42af      	cmp	r7, r5
 800add2:	4416      	add	r6, r2
 800add4:	441e      	add	r6, r3
 800add6:	463b      	mov	r3, r7
 800add8:	bfa8      	it	ge
 800adda:	462b      	movge	r3, r5
 800addc:	42b3      	cmp	r3, r6
 800adde:	bfa8      	it	ge
 800ade0:	4633      	movge	r3, r6
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	bfc2      	ittt	gt
 800ade6:	1aed      	subgt	r5, r5, r3
 800ade8:	1af6      	subgt	r6, r6, r3
 800adea:	1aff      	subgt	r7, r7, r3
 800adec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800adee:	2b00      	cmp	r3, #0
 800adf0:	dd16      	ble.n	800ae20 <_strtod_l+0x738>
 800adf2:	4641      	mov	r1, r8
 800adf4:	9805      	ldr	r0, [sp, #20]
 800adf6:	461a      	mov	r2, r3
 800adf8:	f7ff f9a4 	bl	800a144 <__pow5mult>
 800adfc:	4680      	mov	r8, r0
 800adfe:	2800      	cmp	r0, #0
 800ae00:	d0ba      	beq.n	800ad78 <_strtod_l+0x690>
 800ae02:	4601      	mov	r1, r0
 800ae04:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ae06:	9805      	ldr	r0, [sp, #20]
 800ae08:	f7ff f8fa 	bl	800a000 <__multiply>
 800ae0c:	900a      	str	r0, [sp, #40]	@ 0x28
 800ae0e:	2800      	cmp	r0, #0
 800ae10:	f43f ae8d 	beq.w	800ab2e <_strtod_l+0x446>
 800ae14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae16:	9805      	ldr	r0, [sp, #20]
 800ae18:	f7fe ffde 	bl	8009dd8 <_Bfree>
 800ae1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae1e:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae20:	2d00      	cmp	r5, #0
 800ae22:	dc1d      	bgt.n	800ae60 <_strtod_l+0x778>
 800ae24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	dd23      	ble.n	800ae72 <_strtod_l+0x78a>
 800ae2a:	4649      	mov	r1, r9
 800ae2c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ae2e:	9805      	ldr	r0, [sp, #20]
 800ae30:	f7ff f988 	bl	800a144 <__pow5mult>
 800ae34:	4681      	mov	r9, r0
 800ae36:	b9e0      	cbnz	r0, 800ae72 <_strtod_l+0x78a>
 800ae38:	f04f 0900 	mov.w	r9, #0
 800ae3c:	e677      	b.n	800ab2e <_strtod_l+0x446>
 800ae3e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ae42:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ae46:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ae4a:	35e2      	adds	r5, #226	@ 0xe2
 800ae4c:	fa01 f305 	lsl.w	r3, r1, r5
 800ae50:	9310      	str	r3, [sp, #64]	@ 0x40
 800ae52:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ae54:	e7ba      	b.n	800adcc <_strtod_l+0x6e4>
 800ae56:	2300      	movs	r3, #0
 800ae58:	9310      	str	r3, [sp, #64]	@ 0x40
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ae5e:	e7b5      	b.n	800adcc <_strtod_l+0x6e4>
 800ae60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae62:	9805      	ldr	r0, [sp, #20]
 800ae64:	462a      	mov	r2, r5
 800ae66:	f7ff f9c7 	bl	800a1f8 <__lshift>
 800ae6a:	901a      	str	r0, [sp, #104]	@ 0x68
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	d1d9      	bne.n	800ae24 <_strtod_l+0x73c>
 800ae70:	e65d      	b.n	800ab2e <_strtod_l+0x446>
 800ae72:	2e00      	cmp	r6, #0
 800ae74:	dd07      	ble.n	800ae86 <_strtod_l+0x79e>
 800ae76:	4649      	mov	r1, r9
 800ae78:	9805      	ldr	r0, [sp, #20]
 800ae7a:	4632      	mov	r2, r6
 800ae7c:	f7ff f9bc 	bl	800a1f8 <__lshift>
 800ae80:	4681      	mov	r9, r0
 800ae82:	2800      	cmp	r0, #0
 800ae84:	d0d8      	beq.n	800ae38 <_strtod_l+0x750>
 800ae86:	2f00      	cmp	r7, #0
 800ae88:	dd08      	ble.n	800ae9c <_strtod_l+0x7b4>
 800ae8a:	4641      	mov	r1, r8
 800ae8c:	9805      	ldr	r0, [sp, #20]
 800ae8e:	463a      	mov	r2, r7
 800ae90:	f7ff f9b2 	bl	800a1f8 <__lshift>
 800ae94:	4680      	mov	r8, r0
 800ae96:	2800      	cmp	r0, #0
 800ae98:	f43f ae49 	beq.w	800ab2e <_strtod_l+0x446>
 800ae9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae9e:	9805      	ldr	r0, [sp, #20]
 800aea0:	464a      	mov	r2, r9
 800aea2:	f7ff fa31 	bl	800a308 <__mdiff>
 800aea6:	4604      	mov	r4, r0
 800aea8:	2800      	cmp	r0, #0
 800aeaa:	f43f ae40 	beq.w	800ab2e <_strtod_l+0x446>
 800aeae:	68c3      	ldr	r3, [r0, #12]
 800aeb0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	60c3      	str	r3, [r0, #12]
 800aeb6:	4641      	mov	r1, r8
 800aeb8:	f7ff fa0a 	bl	800a2d0 <__mcmp>
 800aebc:	2800      	cmp	r0, #0
 800aebe:	da45      	bge.n	800af4c <_strtod_l+0x864>
 800aec0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aec2:	ea53 030a 	orrs.w	r3, r3, sl
 800aec6:	d16b      	bne.n	800afa0 <_strtod_l+0x8b8>
 800aec8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d167      	bne.n	800afa0 <_strtod_l+0x8b8>
 800aed0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aed4:	0d1b      	lsrs	r3, r3, #20
 800aed6:	051b      	lsls	r3, r3, #20
 800aed8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800aedc:	d960      	bls.n	800afa0 <_strtod_l+0x8b8>
 800aede:	6963      	ldr	r3, [r4, #20]
 800aee0:	b913      	cbnz	r3, 800aee8 <_strtod_l+0x800>
 800aee2:	6923      	ldr	r3, [r4, #16]
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	dd5b      	ble.n	800afa0 <_strtod_l+0x8b8>
 800aee8:	4621      	mov	r1, r4
 800aeea:	2201      	movs	r2, #1
 800aeec:	9805      	ldr	r0, [sp, #20]
 800aeee:	f7ff f983 	bl	800a1f8 <__lshift>
 800aef2:	4641      	mov	r1, r8
 800aef4:	4604      	mov	r4, r0
 800aef6:	f7ff f9eb 	bl	800a2d0 <__mcmp>
 800aefa:	2800      	cmp	r0, #0
 800aefc:	dd50      	ble.n	800afa0 <_strtod_l+0x8b8>
 800aefe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800af02:	9a08      	ldr	r2, [sp, #32]
 800af04:	0d1b      	lsrs	r3, r3, #20
 800af06:	051b      	lsls	r3, r3, #20
 800af08:	2a00      	cmp	r2, #0
 800af0a:	d06a      	beq.n	800afe2 <_strtod_l+0x8fa>
 800af0c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800af10:	d867      	bhi.n	800afe2 <_strtod_l+0x8fa>
 800af12:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800af16:	f67f ae9d 	bls.w	800ac54 <_strtod_l+0x56c>
 800af1a:	4b0a      	ldr	r3, [pc, #40]	@ (800af44 <_strtod_l+0x85c>)
 800af1c:	4650      	mov	r0, sl
 800af1e:	4659      	mov	r1, fp
 800af20:	2200      	movs	r2, #0
 800af22:	f7f5 fb71 	bl	8000608 <__aeabi_dmul>
 800af26:	4b08      	ldr	r3, [pc, #32]	@ (800af48 <_strtod_l+0x860>)
 800af28:	400b      	ands	r3, r1
 800af2a:	4682      	mov	sl, r0
 800af2c:	468b      	mov	fp, r1
 800af2e:	2b00      	cmp	r3, #0
 800af30:	f47f ae08 	bne.w	800ab44 <_strtod_l+0x45c>
 800af34:	9a05      	ldr	r2, [sp, #20]
 800af36:	2322      	movs	r3, #34	@ 0x22
 800af38:	6013      	str	r3, [r2, #0]
 800af3a:	e603      	b.n	800ab44 <_strtod_l+0x45c>
 800af3c:	0800cb18 	.word	0x0800cb18
 800af40:	fffffc02 	.word	0xfffffc02
 800af44:	39500000 	.word	0x39500000
 800af48:	7ff00000 	.word	0x7ff00000
 800af4c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800af50:	d165      	bne.n	800b01e <_strtod_l+0x936>
 800af52:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800af54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af58:	b35a      	cbz	r2, 800afb2 <_strtod_l+0x8ca>
 800af5a:	4a9f      	ldr	r2, [pc, #636]	@ (800b1d8 <_strtod_l+0xaf0>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d12b      	bne.n	800afb8 <_strtod_l+0x8d0>
 800af60:	9b08      	ldr	r3, [sp, #32]
 800af62:	4651      	mov	r1, sl
 800af64:	b303      	cbz	r3, 800afa8 <_strtod_l+0x8c0>
 800af66:	4b9d      	ldr	r3, [pc, #628]	@ (800b1dc <_strtod_l+0xaf4>)
 800af68:	465a      	mov	r2, fp
 800af6a:	4013      	ands	r3, r2
 800af6c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800af70:	f04f 32ff 	mov.w	r2, #4294967295
 800af74:	d81b      	bhi.n	800afae <_strtod_l+0x8c6>
 800af76:	0d1b      	lsrs	r3, r3, #20
 800af78:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800af7c:	fa02 f303 	lsl.w	r3, r2, r3
 800af80:	4299      	cmp	r1, r3
 800af82:	d119      	bne.n	800afb8 <_strtod_l+0x8d0>
 800af84:	4b96      	ldr	r3, [pc, #600]	@ (800b1e0 <_strtod_l+0xaf8>)
 800af86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af88:	429a      	cmp	r2, r3
 800af8a:	d102      	bne.n	800af92 <_strtod_l+0x8aa>
 800af8c:	3101      	adds	r1, #1
 800af8e:	f43f adce 	beq.w	800ab2e <_strtod_l+0x446>
 800af92:	4b92      	ldr	r3, [pc, #584]	@ (800b1dc <_strtod_l+0xaf4>)
 800af94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af96:	401a      	ands	r2, r3
 800af98:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800af9c:	f04f 0a00 	mov.w	sl, #0
 800afa0:	9b08      	ldr	r3, [sp, #32]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d1b9      	bne.n	800af1a <_strtod_l+0x832>
 800afa6:	e5cd      	b.n	800ab44 <_strtod_l+0x45c>
 800afa8:	f04f 33ff 	mov.w	r3, #4294967295
 800afac:	e7e8      	b.n	800af80 <_strtod_l+0x898>
 800afae:	4613      	mov	r3, r2
 800afb0:	e7e6      	b.n	800af80 <_strtod_l+0x898>
 800afb2:	ea53 030a 	orrs.w	r3, r3, sl
 800afb6:	d0a2      	beq.n	800aefe <_strtod_l+0x816>
 800afb8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800afba:	b1db      	cbz	r3, 800aff4 <_strtod_l+0x90c>
 800afbc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800afbe:	4213      	tst	r3, r2
 800afc0:	d0ee      	beq.n	800afa0 <_strtod_l+0x8b8>
 800afc2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afc4:	9a08      	ldr	r2, [sp, #32]
 800afc6:	4650      	mov	r0, sl
 800afc8:	4659      	mov	r1, fp
 800afca:	b1bb      	cbz	r3, 800affc <_strtod_l+0x914>
 800afcc:	f7ff fb6e 	bl	800a6ac <sulp>
 800afd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800afd4:	ec53 2b10 	vmov	r2, r3, d0
 800afd8:	f7f5 f960 	bl	800029c <__adddf3>
 800afdc:	4682      	mov	sl, r0
 800afde:	468b      	mov	fp, r1
 800afe0:	e7de      	b.n	800afa0 <_strtod_l+0x8b8>
 800afe2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800afe6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800afea:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800afee:	f04f 3aff 	mov.w	sl, #4294967295
 800aff2:	e7d5      	b.n	800afa0 <_strtod_l+0x8b8>
 800aff4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aff6:	ea13 0f0a 	tst.w	r3, sl
 800affa:	e7e1      	b.n	800afc0 <_strtod_l+0x8d8>
 800affc:	f7ff fb56 	bl	800a6ac <sulp>
 800b000:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b004:	ec53 2b10 	vmov	r2, r3, d0
 800b008:	f7f5 f946 	bl	8000298 <__aeabi_dsub>
 800b00c:	2200      	movs	r2, #0
 800b00e:	2300      	movs	r3, #0
 800b010:	4682      	mov	sl, r0
 800b012:	468b      	mov	fp, r1
 800b014:	f7f5 fd60 	bl	8000ad8 <__aeabi_dcmpeq>
 800b018:	2800      	cmp	r0, #0
 800b01a:	d0c1      	beq.n	800afa0 <_strtod_l+0x8b8>
 800b01c:	e61a      	b.n	800ac54 <_strtod_l+0x56c>
 800b01e:	4641      	mov	r1, r8
 800b020:	4620      	mov	r0, r4
 800b022:	f7ff facd 	bl	800a5c0 <__ratio>
 800b026:	ec57 6b10 	vmov	r6, r7, d0
 800b02a:	2200      	movs	r2, #0
 800b02c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b030:	4630      	mov	r0, r6
 800b032:	4639      	mov	r1, r7
 800b034:	f7f5 fd64 	bl	8000b00 <__aeabi_dcmple>
 800b038:	2800      	cmp	r0, #0
 800b03a:	d06f      	beq.n	800b11c <_strtod_l+0xa34>
 800b03c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d17a      	bne.n	800b138 <_strtod_l+0xa50>
 800b042:	f1ba 0f00 	cmp.w	sl, #0
 800b046:	d158      	bne.n	800b0fa <_strtod_l+0xa12>
 800b048:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b04a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d15a      	bne.n	800b108 <_strtod_l+0xa20>
 800b052:	4b64      	ldr	r3, [pc, #400]	@ (800b1e4 <_strtod_l+0xafc>)
 800b054:	2200      	movs	r2, #0
 800b056:	4630      	mov	r0, r6
 800b058:	4639      	mov	r1, r7
 800b05a:	f7f5 fd47 	bl	8000aec <__aeabi_dcmplt>
 800b05e:	2800      	cmp	r0, #0
 800b060:	d159      	bne.n	800b116 <_strtod_l+0xa2e>
 800b062:	4630      	mov	r0, r6
 800b064:	4639      	mov	r1, r7
 800b066:	4b60      	ldr	r3, [pc, #384]	@ (800b1e8 <_strtod_l+0xb00>)
 800b068:	2200      	movs	r2, #0
 800b06a:	f7f5 facd 	bl	8000608 <__aeabi_dmul>
 800b06e:	4606      	mov	r6, r0
 800b070:	460f      	mov	r7, r1
 800b072:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b076:	9606      	str	r6, [sp, #24]
 800b078:	9307      	str	r3, [sp, #28]
 800b07a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b07e:	4d57      	ldr	r5, [pc, #348]	@ (800b1dc <_strtod_l+0xaf4>)
 800b080:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b084:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b086:	401d      	ands	r5, r3
 800b088:	4b58      	ldr	r3, [pc, #352]	@ (800b1ec <_strtod_l+0xb04>)
 800b08a:	429d      	cmp	r5, r3
 800b08c:	f040 80b2 	bne.w	800b1f4 <_strtod_l+0xb0c>
 800b090:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b092:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b096:	ec4b ab10 	vmov	d0, sl, fp
 800b09a:	f7ff f9c9 	bl	800a430 <__ulp>
 800b09e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b0a2:	ec51 0b10 	vmov	r0, r1, d0
 800b0a6:	f7f5 faaf 	bl	8000608 <__aeabi_dmul>
 800b0aa:	4652      	mov	r2, sl
 800b0ac:	465b      	mov	r3, fp
 800b0ae:	f7f5 f8f5 	bl	800029c <__adddf3>
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	4949      	ldr	r1, [pc, #292]	@ (800b1dc <_strtod_l+0xaf4>)
 800b0b6:	4a4e      	ldr	r2, [pc, #312]	@ (800b1f0 <_strtod_l+0xb08>)
 800b0b8:	4019      	ands	r1, r3
 800b0ba:	4291      	cmp	r1, r2
 800b0bc:	4682      	mov	sl, r0
 800b0be:	d942      	bls.n	800b146 <_strtod_l+0xa5e>
 800b0c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b0c2:	4b47      	ldr	r3, [pc, #284]	@ (800b1e0 <_strtod_l+0xaf8>)
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d103      	bne.n	800b0d0 <_strtod_l+0x9e8>
 800b0c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	f43f ad2f 	beq.w	800ab2e <_strtod_l+0x446>
 800b0d0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b1e0 <_strtod_l+0xaf8>
 800b0d4:	f04f 3aff 	mov.w	sl, #4294967295
 800b0d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b0da:	9805      	ldr	r0, [sp, #20]
 800b0dc:	f7fe fe7c 	bl	8009dd8 <_Bfree>
 800b0e0:	9805      	ldr	r0, [sp, #20]
 800b0e2:	4649      	mov	r1, r9
 800b0e4:	f7fe fe78 	bl	8009dd8 <_Bfree>
 800b0e8:	9805      	ldr	r0, [sp, #20]
 800b0ea:	4641      	mov	r1, r8
 800b0ec:	f7fe fe74 	bl	8009dd8 <_Bfree>
 800b0f0:	9805      	ldr	r0, [sp, #20]
 800b0f2:	4621      	mov	r1, r4
 800b0f4:	f7fe fe70 	bl	8009dd8 <_Bfree>
 800b0f8:	e619      	b.n	800ad2e <_strtod_l+0x646>
 800b0fa:	f1ba 0f01 	cmp.w	sl, #1
 800b0fe:	d103      	bne.n	800b108 <_strtod_l+0xa20>
 800b100:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b102:	2b00      	cmp	r3, #0
 800b104:	f43f ada6 	beq.w	800ac54 <_strtod_l+0x56c>
 800b108:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b1b8 <_strtod_l+0xad0>
 800b10c:	4f35      	ldr	r7, [pc, #212]	@ (800b1e4 <_strtod_l+0xafc>)
 800b10e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b112:	2600      	movs	r6, #0
 800b114:	e7b1      	b.n	800b07a <_strtod_l+0x992>
 800b116:	4f34      	ldr	r7, [pc, #208]	@ (800b1e8 <_strtod_l+0xb00>)
 800b118:	2600      	movs	r6, #0
 800b11a:	e7aa      	b.n	800b072 <_strtod_l+0x98a>
 800b11c:	4b32      	ldr	r3, [pc, #200]	@ (800b1e8 <_strtod_l+0xb00>)
 800b11e:	4630      	mov	r0, r6
 800b120:	4639      	mov	r1, r7
 800b122:	2200      	movs	r2, #0
 800b124:	f7f5 fa70 	bl	8000608 <__aeabi_dmul>
 800b128:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b12a:	4606      	mov	r6, r0
 800b12c:	460f      	mov	r7, r1
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d09f      	beq.n	800b072 <_strtod_l+0x98a>
 800b132:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b136:	e7a0      	b.n	800b07a <_strtod_l+0x992>
 800b138:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b1c0 <_strtod_l+0xad8>
 800b13c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b140:	ec57 6b17 	vmov	r6, r7, d7
 800b144:	e799      	b.n	800b07a <_strtod_l+0x992>
 800b146:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b14a:	9b08      	ldr	r3, [sp, #32]
 800b14c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800b150:	2b00      	cmp	r3, #0
 800b152:	d1c1      	bne.n	800b0d8 <_strtod_l+0x9f0>
 800b154:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b158:	0d1b      	lsrs	r3, r3, #20
 800b15a:	051b      	lsls	r3, r3, #20
 800b15c:	429d      	cmp	r5, r3
 800b15e:	d1bb      	bne.n	800b0d8 <_strtod_l+0x9f0>
 800b160:	4630      	mov	r0, r6
 800b162:	4639      	mov	r1, r7
 800b164:	f7f5 fdb0 	bl	8000cc8 <__aeabi_d2lz>
 800b168:	f7f5 fa20 	bl	80005ac <__aeabi_l2d>
 800b16c:	4602      	mov	r2, r0
 800b16e:	460b      	mov	r3, r1
 800b170:	4630      	mov	r0, r6
 800b172:	4639      	mov	r1, r7
 800b174:	f7f5 f890 	bl	8000298 <__aeabi_dsub>
 800b178:	460b      	mov	r3, r1
 800b17a:	4602      	mov	r2, r0
 800b17c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b180:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b186:	ea46 060a 	orr.w	r6, r6, sl
 800b18a:	431e      	orrs	r6, r3
 800b18c:	d06f      	beq.n	800b26e <_strtod_l+0xb86>
 800b18e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b1c8 <_strtod_l+0xae0>)
 800b190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b194:	f7f5 fcaa 	bl	8000aec <__aeabi_dcmplt>
 800b198:	2800      	cmp	r0, #0
 800b19a:	f47f acd3 	bne.w	800ab44 <_strtod_l+0x45c>
 800b19e:	a30c      	add	r3, pc, #48	@ (adr r3, 800b1d0 <_strtod_l+0xae8>)
 800b1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b1a8:	f7f5 fcbe 	bl	8000b28 <__aeabi_dcmpgt>
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	d093      	beq.n	800b0d8 <_strtod_l+0x9f0>
 800b1b0:	e4c8      	b.n	800ab44 <_strtod_l+0x45c>
 800b1b2:	bf00      	nop
 800b1b4:	f3af 8000 	nop.w
 800b1b8:	00000000 	.word	0x00000000
 800b1bc:	bff00000 	.word	0xbff00000
 800b1c0:	00000000 	.word	0x00000000
 800b1c4:	3ff00000 	.word	0x3ff00000
 800b1c8:	94a03595 	.word	0x94a03595
 800b1cc:	3fdfffff 	.word	0x3fdfffff
 800b1d0:	35afe535 	.word	0x35afe535
 800b1d4:	3fe00000 	.word	0x3fe00000
 800b1d8:	000fffff 	.word	0x000fffff
 800b1dc:	7ff00000 	.word	0x7ff00000
 800b1e0:	7fefffff 	.word	0x7fefffff
 800b1e4:	3ff00000 	.word	0x3ff00000
 800b1e8:	3fe00000 	.word	0x3fe00000
 800b1ec:	7fe00000 	.word	0x7fe00000
 800b1f0:	7c9fffff 	.word	0x7c9fffff
 800b1f4:	9b08      	ldr	r3, [sp, #32]
 800b1f6:	b323      	cbz	r3, 800b242 <_strtod_l+0xb5a>
 800b1f8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b1fc:	d821      	bhi.n	800b242 <_strtod_l+0xb5a>
 800b1fe:	a328      	add	r3, pc, #160	@ (adr r3, 800b2a0 <_strtod_l+0xbb8>)
 800b200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b204:	4630      	mov	r0, r6
 800b206:	4639      	mov	r1, r7
 800b208:	f7f5 fc7a 	bl	8000b00 <__aeabi_dcmple>
 800b20c:	b1a0      	cbz	r0, 800b238 <_strtod_l+0xb50>
 800b20e:	4639      	mov	r1, r7
 800b210:	4630      	mov	r0, r6
 800b212:	f7f5 fcd1 	bl	8000bb8 <__aeabi_d2uiz>
 800b216:	2801      	cmp	r0, #1
 800b218:	bf38      	it	cc
 800b21a:	2001      	movcc	r0, #1
 800b21c:	f7f5 f97a 	bl	8000514 <__aeabi_ui2d>
 800b220:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b222:	4606      	mov	r6, r0
 800b224:	460f      	mov	r7, r1
 800b226:	b9fb      	cbnz	r3, 800b268 <_strtod_l+0xb80>
 800b228:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b22c:	9014      	str	r0, [sp, #80]	@ 0x50
 800b22e:	9315      	str	r3, [sp, #84]	@ 0x54
 800b230:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b234:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b238:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b23a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b23e:	1b5b      	subs	r3, r3, r5
 800b240:	9311      	str	r3, [sp, #68]	@ 0x44
 800b242:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b246:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b24a:	f7ff f8f1 	bl	800a430 <__ulp>
 800b24e:	4650      	mov	r0, sl
 800b250:	ec53 2b10 	vmov	r2, r3, d0
 800b254:	4659      	mov	r1, fp
 800b256:	f7f5 f9d7 	bl	8000608 <__aeabi_dmul>
 800b25a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b25e:	f7f5 f81d 	bl	800029c <__adddf3>
 800b262:	4682      	mov	sl, r0
 800b264:	468b      	mov	fp, r1
 800b266:	e770      	b.n	800b14a <_strtod_l+0xa62>
 800b268:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b26c:	e7e0      	b.n	800b230 <_strtod_l+0xb48>
 800b26e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b2a8 <_strtod_l+0xbc0>)
 800b270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b274:	f7f5 fc3a 	bl	8000aec <__aeabi_dcmplt>
 800b278:	e798      	b.n	800b1ac <_strtod_l+0xac4>
 800b27a:	2300      	movs	r3, #0
 800b27c:	930e      	str	r3, [sp, #56]	@ 0x38
 800b27e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b280:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b282:	6013      	str	r3, [r2, #0]
 800b284:	f7ff ba6d 	b.w	800a762 <_strtod_l+0x7a>
 800b288:	2a65      	cmp	r2, #101	@ 0x65
 800b28a:	f43f ab68 	beq.w	800a95e <_strtod_l+0x276>
 800b28e:	2a45      	cmp	r2, #69	@ 0x45
 800b290:	f43f ab65 	beq.w	800a95e <_strtod_l+0x276>
 800b294:	2301      	movs	r3, #1
 800b296:	f7ff bba0 	b.w	800a9da <_strtod_l+0x2f2>
 800b29a:	bf00      	nop
 800b29c:	f3af 8000 	nop.w
 800b2a0:	ffc00000 	.word	0xffc00000
 800b2a4:	41dfffff 	.word	0x41dfffff
 800b2a8:	94a03595 	.word	0x94a03595
 800b2ac:	3fcfffff 	.word	0x3fcfffff

0800b2b0 <_strtod_r>:
 800b2b0:	4b01      	ldr	r3, [pc, #4]	@ (800b2b8 <_strtod_r+0x8>)
 800b2b2:	f7ff ba19 	b.w	800a6e8 <_strtod_l>
 800b2b6:	bf00      	nop
 800b2b8:	200000ec 	.word	0x200000ec

0800b2bc <_strtol_l.isra.0>:
 800b2bc:	2b24      	cmp	r3, #36	@ 0x24
 800b2be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2c2:	4686      	mov	lr, r0
 800b2c4:	4690      	mov	r8, r2
 800b2c6:	d801      	bhi.n	800b2cc <_strtol_l.isra.0+0x10>
 800b2c8:	2b01      	cmp	r3, #1
 800b2ca:	d106      	bne.n	800b2da <_strtol_l.isra.0+0x1e>
 800b2cc:	f7fd fdb8 	bl	8008e40 <__errno>
 800b2d0:	2316      	movs	r3, #22
 800b2d2:	6003      	str	r3, [r0, #0]
 800b2d4:	2000      	movs	r0, #0
 800b2d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2da:	4834      	ldr	r0, [pc, #208]	@ (800b3ac <_strtol_l.isra.0+0xf0>)
 800b2dc:	460d      	mov	r5, r1
 800b2de:	462a      	mov	r2, r5
 800b2e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b2e4:	5d06      	ldrb	r6, [r0, r4]
 800b2e6:	f016 0608 	ands.w	r6, r6, #8
 800b2ea:	d1f8      	bne.n	800b2de <_strtol_l.isra.0+0x22>
 800b2ec:	2c2d      	cmp	r4, #45	@ 0x2d
 800b2ee:	d110      	bne.n	800b312 <_strtol_l.isra.0+0x56>
 800b2f0:	782c      	ldrb	r4, [r5, #0]
 800b2f2:	2601      	movs	r6, #1
 800b2f4:	1c95      	adds	r5, r2, #2
 800b2f6:	f033 0210 	bics.w	r2, r3, #16
 800b2fa:	d115      	bne.n	800b328 <_strtol_l.isra.0+0x6c>
 800b2fc:	2c30      	cmp	r4, #48	@ 0x30
 800b2fe:	d10d      	bne.n	800b31c <_strtol_l.isra.0+0x60>
 800b300:	782a      	ldrb	r2, [r5, #0]
 800b302:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b306:	2a58      	cmp	r2, #88	@ 0x58
 800b308:	d108      	bne.n	800b31c <_strtol_l.isra.0+0x60>
 800b30a:	786c      	ldrb	r4, [r5, #1]
 800b30c:	3502      	adds	r5, #2
 800b30e:	2310      	movs	r3, #16
 800b310:	e00a      	b.n	800b328 <_strtol_l.isra.0+0x6c>
 800b312:	2c2b      	cmp	r4, #43	@ 0x2b
 800b314:	bf04      	itt	eq
 800b316:	782c      	ldrbeq	r4, [r5, #0]
 800b318:	1c95      	addeq	r5, r2, #2
 800b31a:	e7ec      	b.n	800b2f6 <_strtol_l.isra.0+0x3a>
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d1f6      	bne.n	800b30e <_strtol_l.isra.0+0x52>
 800b320:	2c30      	cmp	r4, #48	@ 0x30
 800b322:	bf14      	ite	ne
 800b324:	230a      	movne	r3, #10
 800b326:	2308      	moveq	r3, #8
 800b328:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b32c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b330:	2200      	movs	r2, #0
 800b332:	fbbc f9f3 	udiv	r9, ip, r3
 800b336:	4610      	mov	r0, r2
 800b338:	fb03 ca19 	mls	sl, r3, r9, ip
 800b33c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b340:	2f09      	cmp	r7, #9
 800b342:	d80f      	bhi.n	800b364 <_strtol_l.isra.0+0xa8>
 800b344:	463c      	mov	r4, r7
 800b346:	42a3      	cmp	r3, r4
 800b348:	dd1b      	ble.n	800b382 <_strtol_l.isra.0+0xc6>
 800b34a:	1c57      	adds	r7, r2, #1
 800b34c:	d007      	beq.n	800b35e <_strtol_l.isra.0+0xa2>
 800b34e:	4581      	cmp	r9, r0
 800b350:	d314      	bcc.n	800b37c <_strtol_l.isra.0+0xc0>
 800b352:	d101      	bne.n	800b358 <_strtol_l.isra.0+0x9c>
 800b354:	45a2      	cmp	sl, r4
 800b356:	db11      	blt.n	800b37c <_strtol_l.isra.0+0xc0>
 800b358:	fb00 4003 	mla	r0, r0, r3, r4
 800b35c:	2201      	movs	r2, #1
 800b35e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b362:	e7eb      	b.n	800b33c <_strtol_l.isra.0+0x80>
 800b364:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b368:	2f19      	cmp	r7, #25
 800b36a:	d801      	bhi.n	800b370 <_strtol_l.isra.0+0xb4>
 800b36c:	3c37      	subs	r4, #55	@ 0x37
 800b36e:	e7ea      	b.n	800b346 <_strtol_l.isra.0+0x8a>
 800b370:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b374:	2f19      	cmp	r7, #25
 800b376:	d804      	bhi.n	800b382 <_strtol_l.isra.0+0xc6>
 800b378:	3c57      	subs	r4, #87	@ 0x57
 800b37a:	e7e4      	b.n	800b346 <_strtol_l.isra.0+0x8a>
 800b37c:	f04f 32ff 	mov.w	r2, #4294967295
 800b380:	e7ed      	b.n	800b35e <_strtol_l.isra.0+0xa2>
 800b382:	1c53      	adds	r3, r2, #1
 800b384:	d108      	bne.n	800b398 <_strtol_l.isra.0+0xdc>
 800b386:	2322      	movs	r3, #34	@ 0x22
 800b388:	f8ce 3000 	str.w	r3, [lr]
 800b38c:	4660      	mov	r0, ip
 800b38e:	f1b8 0f00 	cmp.w	r8, #0
 800b392:	d0a0      	beq.n	800b2d6 <_strtol_l.isra.0+0x1a>
 800b394:	1e69      	subs	r1, r5, #1
 800b396:	e006      	b.n	800b3a6 <_strtol_l.isra.0+0xea>
 800b398:	b106      	cbz	r6, 800b39c <_strtol_l.isra.0+0xe0>
 800b39a:	4240      	negs	r0, r0
 800b39c:	f1b8 0f00 	cmp.w	r8, #0
 800b3a0:	d099      	beq.n	800b2d6 <_strtol_l.isra.0+0x1a>
 800b3a2:	2a00      	cmp	r2, #0
 800b3a4:	d1f6      	bne.n	800b394 <_strtol_l.isra.0+0xd8>
 800b3a6:	f8c8 1000 	str.w	r1, [r8]
 800b3aa:	e794      	b.n	800b2d6 <_strtol_l.isra.0+0x1a>
 800b3ac:	0800cb41 	.word	0x0800cb41

0800b3b0 <_strtol_r>:
 800b3b0:	f7ff bf84 	b.w	800b2bc <_strtol_l.isra.0>

0800b3b4 <__ssputs_r>:
 800b3b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3b8:	688e      	ldr	r6, [r1, #8]
 800b3ba:	461f      	mov	r7, r3
 800b3bc:	42be      	cmp	r6, r7
 800b3be:	680b      	ldr	r3, [r1, #0]
 800b3c0:	4682      	mov	sl, r0
 800b3c2:	460c      	mov	r4, r1
 800b3c4:	4690      	mov	r8, r2
 800b3c6:	d82d      	bhi.n	800b424 <__ssputs_r+0x70>
 800b3c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b3cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b3d0:	d026      	beq.n	800b420 <__ssputs_r+0x6c>
 800b3d2:	6965      	ldr	r5, [r4, #20]
 800b3d4:	6909      	ldr	r1, [r1, #16]
 800b3d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b3da:	eba3 0901 	sub.w	r9, r3, r1
 800b3de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3e2:	1c7b      	adds	r3, r7, #1
 800b3e4:	444b      	add	r3, r9
 800b3e6:	106d      	asrs	r5, r5, #1
 800b3e8:	429d      	cmp	r5, r3
 800b3ea:	bf38      	it	cc
 800b3ec:	461d      	movcc	r5, r3
 800b3ee:	0553      	lsls	r3, r2, #21
 800b3f0:	d527      	bpl.n	800b442 <__ssputs_r+0x8e>
 800b3f2:	4629      	mov	r1, r5
 800b3f4:	f7fe fc24 	bl	8009c40 <_malloc_r>
 800b3f8:	4606      	mov	r6, r0
 800b3fa:	b360      	cbz	r0, 800b456 <__ssputs_r+0xa2>
 800b3fc:	6921      	ldr	r1, [r4, #16]
 800b3fe:	464a      	mov	r2, r9
 800b400:	f000 fa18 	bl	800b834 <memcpy>
 800b404:	89a3      	ldrh	r3, [r4, #12]
 800b406:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b40a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b40e:	81a3      	strh	r3, [r4, #12]
 800b410:	6126      	str	r6, [r4, #16]
 800b412:	6165      	str	r5, [r4, #20]
 800b414:	444e      	add	r6, r9
 800b416:	eba5 0509 	sub.w	r5, r5, r9
 800b41a:	6026      	str	r6, [r4, #0]
 800b41c:	60a5      	str	r5, [r4, #8]
 800b41e:	463e      	mov	r6, r7
 800b420:	42be      	cmp	r6, r7
 800b422:	d900      	bls.n	800b426 <__ssputs_r+0x72>
 800b424:	463e      	mov	r6, r7
 800b426:	6820      	ldr	r0, [r4, #0]
 800b428:	4632      	mov	r2, r6
 800b42a:	4641      	mov	r1, r8
 800b42c:	f000 f9c6 	bl	800b7bc <memmove>
 800b430:	68a3      	ldr	r3, [r4, #8]
 800b432:	1b9b      	subs	r3, r3, r6
 800b434:	60a3      	str	r3, [r4, #8]
 800b436:	6823      	ldr	r3, [r4, #0]
 800b438:	4433      	add	r3, r6
 800b43a:	6023      	str	r3, [r4, #0]
 800b43c:	2000      	movs	r0, #0
 800b43e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b442:	462a      	mov	r2, r5
 800b444:	f000 fd89 	bl	800bf5a <_realloc_r>
 800b448:	4606      	mov	r6, r0
 800b44a:	2800      	cmp	r0, #0
 800b44c:	d1e0      	bne.n	800b410 <__ssputs_r+0x5c>
 800b44e:	6921      	ldr	r1, [r4, #16]
 800b450:	4650      	mov	r0, sl
 800b452:	f7fe fb81 	bl	8009b58 <_free_r>
 800b456:	230c      	movs	r3, #12
 800b458:	f8ca 3000 	str.w	r3, [sl]
 800b45c:	89a3      	ldrh	r3, [r4, #12]
 800b45e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b462:	81a3      	strh	r3, [r4, #12]
 800b464:	f04f 30ff 	mov.w	r0, #4294967295
 800b468:	e7e9      	b.n	800b43e <__ssputs_r+0x8a>
	...

0800b46c <_svfiprintf_r>:
 800b46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b470:	4698      	mov	r8, r3
 800b472:	898b      	ldrh	r3, [r1, #12]
 800b474:	061b      	lsls	r3, r3, #24
 800b476:	b09d      	sub	sp, #116	@ 0x74
 800b478:	4607      	mov	r7, r0
 800b47a:	460d      	mov	r5, r1
 800b47c:	4614      	mov	r4, r2
 800b47e:	d510      	bpl.n	800b4a2 <_svfiprintf_r+0x36>
 800b480:	690b      	ldr	r3, [r1, #16]
 800b482:	b973      	cbnz	r3, 800b4a2 <_svfiprintf_r+0x36>
 800b484:	2140      	movs	r1, #64	@ 0x40
 800b486:	f7fe fbdb 	bl	8009c40 <_malloc_r>
 800b48a:	6028      	str	r0, [r5, #0]
 800b48c:	6128      	str	r0, [r5, #16]
 800b48e:	b930      	cbnz	r0, 800b49e <_svfiprintf_r+0x32>
 800b490:	230c      	movs	r3, #12
 800b492:	603b      	str	r3, [r7, #0]
 800b494:	f04f 30ff 	mov.w	r0, #4294967295
 800b498:	b01d      	add	sp, #116	@ 0x74
 800b49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b49e:	2340      	movs	r3, #64	@ 0x40
 800b4a0:	616b      	str	r3, [r5, #20]
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4a6:	2320      	movs	r3, #32
 800b4a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b4ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4b0:	2330      	movs	r3, #48	@ 0x30
 800b4b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b650 <_svfiprintf_r+0x1e4>
 800b4b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b4ba:	f04f 0901 	mov.w	r9, #1
 800b4be:	4623      	mov	r3, r4
 800b4c0:	469a      	mov	sl, r3
 800b4c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4c6:	b10a      	cbz	r2, 800b4cc <_svfiprintf_r+0x60>
 800b4c8:	2a25      	cmp	r2, #37	@ 0x25
 800b4ca:	d1f9      	bne.n	800b4c0 <_svfiprintf_r+0x54>
 800b4cc:	ebba 0b04 	subs.w	fp, sl, r4
 800b4d0:	d00b      	beq.n	800b4ea <_svfiprintf_r+0x7e>
 800b4d2:	465b      	mov	r3, fp
 800b4d4:	4622      	mov	r2, r4
 800b4d6:	4629      	mov	r1, r5
 800b4d8:	4638      	mov	r0, r7
 800b4da:	f7ff ff6b 	bl	800b3b4 <__ssputs_r>
 800b4de:	3001      	adds	r0, #1
 800b4e0:	f000 80a7 	beq.w	800b632 <_svfiprintf_r+0x1c6>
 800b4e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4e6:	445a      	add	r2, fp
 800b4e8:	9209      	str	r2, [sp, #36]	@ 0x24
 800b4ea:	f89a 3000 	ldrb.w	r3, [sl]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	f000 809f 	beq.w	800b632 <_svfiprintf_r+0x1c6>
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b4fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4fe:	f10a 0a01 	add.w	sl, sl, #1
 800b502:	9304      	str	r3, [sp, #16]
 800b504:	9307      	str	r3, [sp, #28]
 800b506:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b50a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b50c:	4654      	mov	r4, sl
 800b50e:	2205      	movs	r2, #5
 800b510:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b514:	484e      	ldr	r0, [pc, #312]	@ (800b650 <_svfiprintf_r+0x1e4>)
 800b516:	f7f4 fe63 	bl	80001e0 <memchr>
 800b51a:	9a04      	ldr	r2, [sp, #16]
 800b51c:	b9d8      	cbnz	r0, 800b556 <_svfiprintf_r+0xea>
 800b51e:	06d0      	lsls	r0, r2, #27
 800b520:	bf44      	itt	mi
 800b522:	2320      	movmi	r3, #32
 800b524:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b528:	0711      	lsls	r1, r2, #28
 800b52a:	bf44      	itt	mi
 800b52c:	232b      	movmi	r3, #43	@ 0x2b
 800b52e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b532:	f89a 3000 	ldrb.w	r3, [sl]
 800b536:	2b2a      	cmp	r3, #42	@ 0x2a
 800b538:	d015      	beq.n	800b566 <_svfiprintf_r+0xfa>
 800b53a:	9a07      	ldr	r2, [sp, #28]
 800b53c:	4654      	mov	r4, sl
 800b53e:	2000      	movs	r0, #0
 800b540:	f04f 0c0a 	mov.w	ip, #10
 800b544:	4621      	mov	r1, r4
 800b546:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b54a:	3b30      	subs	r3, #48	@ 0x30
 800b54c:	2b09      	cmp	r3, #9
 800b54e:	d94b      	bls.n	800b5e8 <_svfiprintf_r+0x17c>
 800b550:	b1b0      	cbz	r0, 800b580 <_svfiprintf_r+0x114>
 800b552:	9207      	str	r2, [sp, #28]
 800b554:	e014      	b.n	800b580 <_svfiprintf_r+0x114>
 800b556:	eba0 0308 	sub.w	r3, r0, r8
 800b55a:	fa09 f303 	lsl.w	r3, r9, r3
 800b55e:	4313      	orrs	r3, r2
 800b560:	9304      	str	r3, [sp, #16]
 800b562:	46a2      	mov	sl, r4
 800b564:	e7d2      	b.n	800b50c <_svfiprintf_r+0xa0>
 800b566:	9b03      	ldr	r3, [sp, #12]
 800b568:	1d19      	adds	r1, r3, #4
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	9103      	str	r1, [sp, #12]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	bfbb      	ittet	lt
 800b572:	425b      	neglt	r3, r3
 800b574:	f042 0202 	orrlt.w	r2, r2, #2
 800b578:	9307      	strge	r3, [sp, #28]
 800b57a:	9307      	strlt	r3, [sp, #28]
 800b57c:	bfb8      	it	lt
 800b57e:	9204      	strlt	r2, [sp, #16]
 800b580:	7823      	ldrb	r3, [r4, #0]
 800b582:	2b2e      	cmp	r3, #46	@ 0x2e
 800b584:	d10a      	bne.n	800b59c <_svfiprintf_r+0x130>
 800b586:	7863      	ldrb	r3, [r4, #1]
 800b588:	2b2a      	cmp	r3, #42	@ 0x2a
 800b58a:	d132      	bne.n	800b5f2 <_svfiprintf_r+0x186>
 800b58c:	9b03      	ldr	r3, [sp, #12]
 800b58e:	1d1a      	adds	r2, r3, #4
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	9203      	str	r2, [sp, #12]
 800b594:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b598:	3402      	adds	r4, #2
 800b59a:	9305      	str	r3, [sp, #20]
 800b59c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b660 <_svfiprintf_r+0x1f4>
 800b5a0:	7821      	ldrb	r1, [r4, #0]
 800b5a2:	2203      	movs	r2, #3
 800b5a4:	4650      	mov	r0, sl
 800b5a6:	f7f4 fe1b 	bl	80001e0 <memchr>
 800b5aa:	b138      	cbz	r0, 800b5bc <_svfiprintf_r+0x150>
 800b5ac:	9b04      	ldr	r3, [sp, #16]
 800b5ae:	eba0 000a 	sub.w	r0, r0, sl
 800b5b2:	2240      	movs	r2, #64	@ 0x40
 800b5b4:	4082      	lsls	r2, r0
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	3401      	adds	r4, #1
 800b5ba:	9304      	str	r3, [sp, #16]
 800b5bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5c0:	4824      	ldr	r0, [pc, #144]	@ (800b654 <_svfiprintf_r+0x1e8>)
 800b5c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b5c6:	2206      	movs	r2, #6
 800b5c8:	f7f4 fe0a 	bl	80001e0 <memchr>
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	d036      	beq.n	800b63e <_svfiprintf_r+0x1d2>
 800b5d0:	4b21      	ldr	r3, [pc, #132]	@ (800b658 <_svfiprintf_r+0x1ec>)
 800b5d2:	bb1b      	cbnz	r3, 800b61c <_svfiprintf_r+0x1b0>
 800b5d4:	9b03      	ldr	r3, [sp, #12]
 800b5d6:	3307      	adds	r3, #7
 800b5d8:	f023 0307 	bic.w	r3, r3, #7
 800b5dc:	3308      	adds	r3, #8
 800b5de:	9303      	str	r3, [sp, #12]
 800b5e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5e2:	4433      	add	r3, r6
 800b5e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5e6:	e76a      	b.n	800b4be <_svfiprintf_r+0x52>
 800b5e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5ec:	460c      	mov	r4, r1
 800b5ee:	2001      	movs	r0, #1
 800b5f0:	e7a8      	b.n	800b544 <_svfiprintf_r+0xd8>
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	3401      	adds	r4, #1
 800b5f6:	9305      	str	r3, [sp, #20]
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	f04f 0c0a 	mov.w	ip, #10
 800b5fe:	4620      	mov	r0, r4
 800b600:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b604:	3a30      	subs	r2, #48	@ 0x30
 800b606:	2a09      	cmp	r2, #9
 800b608:	d903      	bls.n	800b612 <_svfiprintf_r+0x1a6>
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d0c6      	beq.n	800b59c <_svfiprintf_r+0x130>
 800b60e:	9105      	str	r1, [sp, #20]
 800b610:	e7c4      	b.n	800b59c <_svfiprintf_r+0x130>
 800b612:	fb0c 2101 	mla	r1, ip, r1, r2
 800b616:	4604      	mov	r4, r0
 800b618:	2301      	movs	r3, #1
 800b61a:	e7f0      	b.n	800b5fe <_svfiprintf_r+0x192>
 800b61c:	ab03      	add	r3, sp, #12
 800b61e:	9300      	str	r3, [sp, #0]
 800b620:	462a      	mov	r2, r5
 800b622:	4b0e      	ldr	r3, [pc, #56]	@ (800b65c <_svfiprintf_r+0x1f0>)
 800b624:	a904      	add	r1, sp, #16
 800b626:	4638      	mov	r0, r7
 800b628:	f7fc fccc 	bl	8007fc4 <_printf_float>
 800b62c:	1c42      	adds	r2, r0, #1
 800b62e:	4606      	mov	r6, r0
 800b630:	d1d6      	bne.n	800b5e0 <_svfiprintf_r+0x174>
 800b632:	89ab      	ldrh	r3, [r5, #12]
 800b634:	065b      	lsls	r3, r3, #25
 800b636:	f53f af2d 	bmi.w	800b494 <_svfiprintf_r+0x28>
 800b63a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b63c:	e72c      	b.n	800b498 <_svfiprintf_r+0x2c>
 800b63e:	ab03      	add	r3, sp, #12
 800b640:	9300      	str	r3, [sp, #0]
 800b642:	462a      	mov	r2, r5
 800b644:	4b05      	ldr	r3, [pc, #20]	@ (800b65c <_svfiprintf_r+0x1f0>)
 800b646:	a904      	add	r1, sp, #16
 800b648:	4638      	mov	r0, r7
 800b64a:	f7fc ff53 	bl	80084f4 <_printf_i>
 800b64e:	e7ed      	b.n	800b62c <_svfiprintf_r+0x1c0>
 800b650:	0800c939 	.word	0x0800c939
 800b654:	0800c943 	.word	0x0800c943
 800b658:	08007fc5 	.word	0x08007fc5
 800b65c:	0800b3b5 	.word	0x0800b3b5
 800b660:	0800c93f 	.word	0x0800c93f

0800b664 <__sflush_r>:
 800b664:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b66c:	0716      	lsls	r6, r2, #28
 800b66e:	4605      	mov	r5, r0
 800b670:	460c      	mov	r4, r1
 800b672:	d454      	bmi.n	800b71e <__sflush_r+0xba>
 800b674:	684b      	ldr	r3, [r1, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	dc02      	bgt.n	800b680 <__sflush_r+0x1c>
 800b67a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	dd48      	ble.n	800b712 <__sflush_r+0xae>
 800b680:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b682:	2e00      	cmp	r6, #0
 800b684:	d045      	beq.n	800b712 <__sflush_r+0xae>
 800b686:	2300      	movs	r3, #0
 800b688:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b68c:	682f      	ldr	r7, [r5, #0]
 800b68e:	6a21      	ldr	r1, [r4, #32]
 800b690:	602b      	str	r3, [r5, #0]
 800b692:	d030      	beq.n	800b6f6 <__sflush_r+0x92>
 800b694:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b696:	89a3      	ldrh	r3, [r4, #12]
 800b698:	0759      	lsls	r1, r3, #29
 800b69a:	d505      	bpl.n	800b6a8 <__sflush_r+0x44>
 800b69c:	6863      	ldr	r3, [r4, #4]
 800b69e:	1ad2      	subs	r2, r2, r3
 800b6a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b6a2:	b10b      	cbz	r3, 800b6a8 <__sflush_r+0x44>
 800b6a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b6a6:	1ad2      	subs	r2, r2, r3
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b6ac:	6a21      	ldr	r1, [r4, #32]
 800b6ae:	4628      	mov	r0, r5
 800b6b0:	47b0      	blx	r6
 800b6b2:	1c43      	adds	r3, r0, #1
 800b6b4:	89a3      	ldrh	r3, [r4, #12]
 800b6b6:	d106      	bne.n	800b6c6 <__sflush_r+0x62>
 800b6b8:	6829      	ldr	r1, [r5, #0]
 800b6ba:	291d      	cmp	r1, #29
 800b6bc:	d82b      	bhi.n	800b716 <__sflush_r+0xb2>
 800b6be:	4a2a      	ldr	r2, [pc, #168]	@ (800b768 <__sflush_r+0x104>)
 800b6c0:	40ca      	lsrs	r2, r1
 800b6c2:	07d6      	lsls	r6, r2, #31
 800b6c4:	d527      	bpl.n	800b716 <__sflush_r+0xb2>
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	6062      	str	r2, [r4, #4]
 800b6ca:	04d9      	lsls	r1, r3, #19
 800b6cc:	6922      	ldr	r2, [r4, #16]
 800b6ce:	6022      	str	r2, [r4, #0]
 800b6d0:	d504      	bpl.n	800b6dc <__sflush_r+0x78>
 800b6d2:	1c42      	adds	r2, r0, #1
 800b6d4:	d101      	bne.n	800b6da <__sflush_r+0x76>
 800b6d6:	682b      	ldr	r3, [r5, #0]
 800b6d8:	b903      	cbnz	r3, 800b6dc <__sflush_r+0x78>
 800b6da:	6560      	str	r0, [r4, #84]	@ 0x54
 800b6dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b6de:	602f      	str	r7, [r5, #0]
 800b6e0:	b1b9      	cbz	r1, 800b712 <__sflush_r+0xae>
 800b6e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b6e6:	4299      	cmp	r1, r3
 800b6e8:	d002      	beq.n	800b6f0 <__sflush_r+0x8c>
 800b6ea:	4628      	mov	r0, r5
 800b6ec:	f7fe fa34 	bl	8009b58 <_free_r>
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6f4:	e00d      	b.n	800b712 <__sflush_r+0xae>
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	4628      	mov	r0, r5
 800b6fa:	47b0      	blx	r6
 800b6fc:	4602      	mov	r2, r0
 800b6fe:	1c50      	adds	r0, r2, #1
 800b700:	d1c9      	bne.n	800b696 <__sflush_r+0x32>
 800b702:	682b      	ldr	r3, [r5, #0]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d0c6      	beq.n	800b696 <__sflush_r+0x32>
 800b708:	2b1d      	cmp	r3, #29
 800b70a:	d001      	beq.n	800b710 <__sflush_r+0xac>
 800b70c:	2b16      	cmp	r3, #22
 800b70e:	d11e      	bne.n	800b74e <__sflush_r+0xea>
 800b710:	602f      	str	r7, [r5, #0]
 800b712:	2000      	movs	r0, #0
 800b714:	e022      	b.n	800b75c <__sflush_r+0xf8>
 800b716:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b71a:	b21b      	sxth	r3, r3
 800b71c:	e01b      	b.n	800b756 <__sflush_r+0xf2>
 800b71e:	690f      	ldr	r7, [r1, #16]
 800b720:	2f00      	cmp	r7, #0
 800b722:	d0f6      	beq.n	800b712 <__sflush_r+0xae>
 800b724:	0793      	lsls	r3, r2, #30
 800b726:	680e      	ldr	r6, [r1, #0]
 800b728:	bf08      	it	eq
 800b72a:	694b      	ldreq	r3, [r1, #20]
 800b72c:	600f      	str	r7, [r1, #0]
 800b72e:	bf18      	it	ne
 800b730:	2300      	movne	r3, #0
 800b732:	eba6 0807 	sub.w	r8, r6, r7
 800b736:	608b      	str	r3, [r1, #8]
 800b738:	f1b8 0f00 	cmp.w	r8, #0
 800b73c:	dde9      	ble.n	800b712 <__sflush_r+0xae>
 800b73e:	6a21      	ldr	r1, [r4, #32]
 800b740:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b742:	4643      	mov	r3, r8
 800b744:	463a      	mov	r2, r7
 800b746:	4628      	mov	r0, r5
 800b748:	47b0      	blx	r6
 800b74a:	2800      	cmp	r0, #0
 800b74c:	dc08      	bgt.n	800b760 <__sflush_r+0xfc>
 800b74e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b756:	81a3      	strh	r3, [r4, #12]
 800b758:	f04f 30ff 	mov.w	r0, #4294967295
 800b75c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b760:	4407      	add	r7, r0
 800b762:	eba8 0800 	sub.w	r8, r8, r0
 800b766:	e7e7      	b.n	800b738 <__sflush_r+0xd4>
 800b768:	20400001 	.word	0x20400001

0800b76c <_fflush_r>:
 800b76c:	b538      	push	{r3, r4, r5, lr}
 800b76e:	690b      	ldr	r3, [r1, #16]
 800b770:	4605      	mov	r5, r0
 800b772:	460c      	mov	r4, r1
 800b774:	b913      	cbnz	r3, 800b77c <_fflush_r+0x10>
 800b776:	2500      	movs	r5, #0
 800b778:	4628      	mov	r0, r5
 800b77a:	bd38      	pop	{r3, r4, r5, pc}
 800b77c:	b118      	cbz	r0, 800b786 <_fflush_r+0x1a>
 800b77e:	6a03      	ldr	r3, [r0, #32]
 800b780:	b90b      	cbnz	r3, 800b786 <_fflush_r+0x1a>
 800b782:	f7fd fa6f 	bl	8008c64 <__sinit>
 800b786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d0f3      	beq.n	800b776 <_fflush_r+0xa>
 800b78e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b790:	07d0      	lsls	r0, r2, #31
 800b792:	d404      	bmi.n	800b79e <_fflush_r+0x32>
 800b794:	0599      	lsls	r1, r3, #22
 800b796:	d402      	bmi.n	800b79e <_fflush_r+0x32>
 800b798:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b79a:	f7fd fb7c 	bl	8008e96 <__retarget_lock_acquire_recursive>
 800b79e:	4628      	mov	r0, r5
 800b7a0:	4621      	mov	r1, r4
 800b7a2:	f7ff ff5f 	bl	800b664 <__sflush_r>
 800b7a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b7a8:	07da      	lsls	r2, r3, #31
 800b7aa:	4605      	mov	r5, r0
 800b7ac:	d4e4      	bmi.n	800b778 <_fflush_r+0xc>
 800b7ae:	89a3      	ldrh	r3, [r4, #12]
 800b7b0:	059b      	lsls	r3, r3, #22
 800b7b2:	d4e1      	bmi.n	800b778 <_fflush_r+0xc>
 800b7b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7b6:	f7fd fb6f 	bl	8008e98 <__retarget_lock_release_recursive>
 800b7ba:	e7dd      	b.n	800b778 <_fflush_r+0xc>

0800b7bc <memmove>:
 800b7bc:	4288      	cmp	r0, r1
 800b7be:	b510      	push	{r4, lr}
 800b7c0:	eb01 0402 	add.w	r4, r1, r2
 800b7c4:	d902      	bls.n	800b7cc <memmove+0x10>
 800b7c6:	4284      	cmp	r4, r0
 800b7c8:	4623      	mov	r3, r4
 800b7ca:	d807      	bhi.n	800b7dc <memmove+0x20>
 800b7cc:	1e43      	subs	r3, r0, #1
 800b7ce:	42a1      	cmp	r1, r4
 800b7d0:	d008      	beq.n	800b7e4 <memmove+0x28>
 800b7d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b7da:	e7f8      	b.n	800b7ce <memmove+0x12>
 800b7dc:	4402      	add	r2, r0
 800b7de:	4601      	mov	r1, r0
 800b7e0:	428a      	cmp	r2, r1
 800b7e2:	d100      	bne.n	800b7e6 <memmove+0x2a>
 800b7e4:	bd10      	pop	{r4, pc}
 800b7e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b7ee:	e7f7      	b.n	800b7e0 <memmove+0x24>

0800b7f0 <strncmp>:
 800b7f0:	b510      	push	{r4, lr}
 800b7f2:	b16a      	cbz	r2, 800b810 <strncmp+0x20>
 800b7f4:	3901      	subs	r1, #1
 800b7f6:	1884      	adds	r4, r0, r2
 800b7f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7fc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b800:	429a      	cmp	r2, r3
 800b802:	d103      	bne.n	800b80c <strncmp+0x1c>
 800b804:	42a0      	cmp	r0, r4
 800b806:	d001      	beq.n	800b80c <strncmp+0x1c>
 800b808:	2a00      	cmp	r2, #0
 800b80a:	d1f5      	bne.n	800b7f8 <strncmp+0x8>
 800b80c:	1ad0      	subs	r0, r2, r3
 800b80e:	bd10      	pop	{r4, pc}
 800b810:	4610      	mov	r0, r2
 800b812:	e7fc      	b.n	800b80e <strncmp+0x1e>

0800b814 <_sbrk_r>:
 800b814:	b538      	push	{r3, r4, r5, lr}
 800b816:	4d06      	ldr	r5, [pc, #24]	@ (800b830 <_sbrk_r+0x1c>)
 800b818:	2300      	movs	r3, #0
 800b81a:	4604      	mov	r4, r0
 800b81c:	4608      	mov	r0, r1
 800b81e:	602b      	str	r3, [r5, #0]
 800b820:	f7f7 fb14 	bl	8002e4c <_sbrk>
 800b824:	1c43      	adds	r3, r0, #1
 800b826:	d102      	bne.n	800b82e <_sbrk_r+0x1a>
 800b828:	682b      	ldr	r3, [r5, #0]
 800b82a:	b103      	cbz	r3, 800b82e <_sbrk_r+0x1a>
 800b82c:	6023      	str	r3, [r4, #0]
 800b82e:	bd38      	pop	{r3, r4, r5, pc}
 800b830:	2000075c 	.word	0x2000075c

0800b834 <memcpy>:
 800b834:	440a      	add	r2, r1
 800b836:	4291      	cmp	r1, r2
 800b838:	f100 33ff 	add.w	r3, r0, #4294967295
 800b83c:	d100      	bne.n	800b840 <memcpy+0xc>
 800b83e:	4770      	bx	lr
 800b840:	b510      	push	{r4, lr}
 800b842:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b846:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b84a:	4291      	cmp	r1, r2
 800b84c:	d1f9      	bne.n	800b842 <memcpy+0xe>
 800b84e:	bd10      	pop	{r4, pc}

0800b850 <nan>:
 800b850:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b858 <nan+0x8>
 800b854:	4770      	bx	lr
 800b856:	bf00      	nop
 800b858:	00000000 	.word	0x00000000
 800b85c:	7ff80000 	.word	0x7ff80000

0800b860 <__assert_func>:
 800b860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b862:	4614      	mov	r4, r2
 800b864:	461a      	mov	r2, r3
 800b866:	4b09      	ldr	r3, [pc, #36]	@ (800b88c <__assert_func+0x2c>)
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	4605      	mov	r5, r0
 800b86c:	68d8      	ldr	r0, [r3, #12]
 800b86e:	b14c      	cbz	r4, 800b884 <__assert_func+0x24>
 800b870:	4b07      	ldr	r3, [pc, #28]	@ (800b890 <__assert_func+0x30>)
 800b872:	9100      	str	r1, [sp, #0]
 800b874:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b878:	4906      	ldr	r1, [pc, #24]	@ (800b894 <__assert_func+0x34>)
 800b87a:	462b      	mov	r3, r5
 800b87c:	f000 fba8 	bl	800bfd0 <fiprintf>
 800b880:	f000 fbb8 	bl	800bff4 <abort>
 800b884:	4b04      	ldr	r3, [pc, #16]	@ (800b898 <__assert_func+0x38>)
 800b886:	461c      	mov	r4, r3
 800b888:	e7f3      	b.n	800b872 <__assert_func+0x12>
 800b88a:	bf00      	nop
 800b88c:	2000009c 	.word	0x2000009c
 800b890:	0800c952 	.word	0x0800c952
 800b894:	0800c95f 	.word	0x0800c95f
 800b898:	0800c98d 	.word	0x0800c98d

0800b89c <_calloc_r>:
 800b89c:	b570      	push	{r4, r5, r6, lr}
 800b89e:	fba1 5402 	umull	r5, r4, r1, r2
 800b8a2:	b934      	cbnz	r4, 800b8b2 <_calloc_r+0x16>
 800b8a4:	4629      	mov	r1, r5
 800b8a6:	f7fe f9cb 	bl	8009c40 <_malloc_r>
 800b8aa:	4606      	mov	r6, r0
 800b8ac:	b928      	cbnz	r0, 800b8ba <_calloc_r+0x1e>
 800b8ae:	4630      	mov	r0, r6
 800b8b0:	bd70      	pop	{r4, r5, r6, pc}
 800b8b2:	220c      	movs	r2, #12
 800b8b4:	6002      	str	r2, [r0, #0]
 800b8b6:	2600      	movs	r6, #0
 800b8b8:	e7f9      	b.n	800b8ae <_calloc_r+0x12>
 800b8ba:	462a      	mov	r2, r5
 800b8bc:	4621      	mov	r1, r4
 800b8be:	f7fd fa6c 	bl	8008d9a <memset>
 800b8c2:	e7f4      	b.n	800b8ae <_calloc_r+0x12>

0800b8c4 <rshift>:
 800b8c4:	6903      	ldr	r3, [r0, #16]
 800b8c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b8ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b8ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b8d2:	f100 0414 	add.w	r4, r0, #20
 800b8d6:	dd45      	ble.n	800b964 <rshift+0xa0>
 800b8d8:	f011 011f 	ands.w	r1, r1, #31
 800b8dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b8e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b8e4:	d10c      	bne.n	800b900 <rshift+0x3c>
 800b8e6:	f100 0710 	add.w	r7, r0, #16
 800b8ea:	4629      	mov	r1, r5
 800b8ec:	42b1      	cmp	r1, r6
 800b8ee:	d334      	bcc.n	800b95a <rshift+0x96>
 800b8f0:	1a9b      	subs	r3, r3, r2
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	1eea      	subs	r2, r5, #3
 800b8f6:	4296      	cmp	r6, r2
 800b8f8:	bf38      	it	cc
 800b8fa:	2300      	movcc	r3, #0
 800b8fc:	4423      	add	r3, r4
 800b8fe:	e015      	b.n	800b92c <rshift+0x68>
 800b900:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b904:	f1c1 0820 	rsb	r8, r1, #32
 800b908:	40cf      	lsrs	r7, r1
 800b90a:	f105 0e04 	add.w	lr, r5, #4
 800b90e:	46a1      	mov	r9, r4
 800b910:	4576      	cmp	r6, lr
 800b912:	46f4      	mov	ip, lr
 800b914:	d815      	bhi.n	800b942 <rshift+0x7e>
 800b916:	1a9a      	subs	r2, r3, r2
 800b918:	0092      	lsls	r2, r2, #2
 800b91a:	3a04      	subs	r2, #4
 800b91c:	3501      	adds	r5, #1
 800b91e:	42ae      	cmp	r6, r5
 800b920:	bf38      	it	cc
 800b922:	2200      	movcc	r2, #0
 800b924:	18a3      	adds	r3, r4, r2
 800b926:	50a7      	str	r7, [r4, r2]
 800b928:	b107      	cbz	r7, 800b92c <rshift+0x68>
 800b92a:	3304      	adds	r3, #4
 800b92c:	1b1a      	subs	r2, r3, r4
 800b92e:	42a3      	cmp	r3, r4
 800b930:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b934:	bf08      	it	eq
 800b936:	2300      	moveq	r3, #0
 800b938:	6102      	str	r2, [r0, #16]
 800b93a:	bf08      	it	eq
 800b93c:	6143      	streq	r3, [r0, #20]
 800b93e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b942:	f8dc c000 	ldr.w	ip, [ip]
 800b946:	fa0c fc08 	lsl.w	ip, ip, r8
 800b94a:	ea4c 0707 	orr.w	r7, ip, r7
 800b94e:	f849 7b04 	str.w	r7, [r9], #4
 800b952:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b956:	40cf      	lsrs	r7, r1
 800b958:	e7da      	b.n	800b910 <rshift+0x4c>
 800b95a:	f851 cb04 	ldr.w	ip, [r1], #4
 800b95e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b962:	e7c3      	b.n	800b8ec <rshift+0x28>
 800b964:	4623      	mov	r3, r4
 800b966:	e7e1      	b.n	800b92c <rshift+0x68>

0800b968 <__hexdig_fun>:
 800b968:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b96c:	2b09      	cmp	r3, #9
 800b96e:	d802      	bhi.n	800b976 <__hexdig_fun+0xe>
 800b970:	3820      	subs	r0, #32
 800b972:	b2c0      	uxtb	r0, r0
 800b974:	4770      	bx	lr
 800b976:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b97a:	2b05      	cmp	r3, #5
 800b97c:	d801      	bhi.n	800b982 <__hexdig_fun+0x1a>
 800b97e:	3847      	subs	r0, #71	@ 0x47
 800b980:	e7f7      	b.n	800b972 <__hexdig_fun+0xa>
 800b982:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b986:	2b05      	cmp	r3, #5
 800b988:	d801      	bhi.n	800b98e <__hexdig_fun+0x26>
 800b98a:	3827      	subs	r0, #39	@ 0x27
 800b98c:	e7f1      	b.n	800b972 <__hexdig_fun+0xa>
 800b98e:	2000      	movs	r0, #0
 800b990:	4770      	bx	lr
	...

0800b994 <__gethex>:
 800b994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b998:	b085      	sub	sp, #20
 800b99a:	468a      	mov	sl, r1
 800b99c:	9302      	str	r3, [sp, #8]
 800b99e:	680b      	ldr	r3, [r1, #0]
 800b9a0:	9001      	str	r0, [sp, #4]
 800b9a2:	4690      	mov	r8, r2
 800b9a4:	1c9c      	adds	r4, r3, #2
 800b9a6:	46a1      	mov	r9, r4
 800b9a8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b9ac:	2830      	cmp	r0, #48	@ 0x30
 800b9ae:	d0fa      	beq.n	800b9a6 <__gethex+0x12>
 800b9b0:	eba9 0303 	sub.w	r3, r9, r3
 800b9b4:	f1a3 0b02 	sub.w	fp, r3, #2
 800b9b8:	f7ff ffd6 	bl	800b968 <__hexdig_fun>
 800b9bc:	4605      	mov	r5, r0
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	d168      	bne.n	800ba94 <__gethex+0x100>
 800b9c2:	49a0      	ldr	r1, [pc, #640]	@ (800bc44 <__gethex+0x2b0>)
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	4648      	mov	r0, r9
 800b9c8:	f7ff ff12 	bl	800b7f0 <strncmp>
 800b9cc:	4607      	mov	r7, r0
 800b9ce:	2800      	cmp	r0, #0
 800b9d0:	d167      	bne.n	800baa2 <__gethex+0x10e>
 800b9d2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b9d6:	4626      	mov	r6, r4
 800b9d8:	f7ff ffc6 	bl	800b968 <__hexdig_fun>
 800b9dc:	2800      	cmp	r0, #0
 800b9de:	d062      	beq.n	800baa6 <__gethex+0x112>
 800b9e0:	4623      	mov	r3, r4
 800b9e2:	7818      	ldrb	r0, [r3, #0]
 800b9e4:	2830      	cmp	r0, #48	@ 0x30
 800b9e6:	4699      	mov	r9, r3
 800b9e8:	f103 0301 	add.w	r3, r3, #1
 800b9ec:	d0f9      	beq.n	800b9e2 <__gethex+0x4e>
 800b9ee:	f7ff ffbb 	bl	800b968 <__hexdig_fun>
 800b9f2:	fab0 f580 	clz	r5, r0
 800b9f6:	096d      	lsrs	r5, r5, #5
 800b9f8:	f04f 0b01 	mov.w	fp, #1
 800b9fc:	464a      	mov	r2, r9
 800b9fe:	4616      	mov	r6, r2
 800ba00:	3201      	adds	r2, #1
 800ba02:	7830      	ldrb	r0, [r6, #0]
 800ba04:	f7ff ffb0 	bl	800b968 <__hexdig_fun>
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	d1f8      	bne.n	800b9fe <__gethex+0x6a>
 800ba0c:	498d      	ldr	r1, [pc, #564]	@ (800bc44 <__gethex+0x2b0>)
 800ba0e:	2201      	movs	r2, #1
 800ba10:	4630      	mov	r0, r6
 800ba12:	f7ff feed 	bl	800b7f0 <strncmp>
 800ba16:	2800      	cmp	r0, #0
 800ba18:	d13f      	bne.n	800ba9a <__gethex+0x106>
 800ba1a:	b944      	cbnz	r4, 800ba2e <__gethex+0x9a>
 800ba1c:	1c74      	adds	r4, r6, #1
 800ba1e:	4622      	mov	r2, r4
 800ba20:	4616      	mov	r6, r2
 800ba22:	3201      	adds	r2, #1
 800ba24:	7830      	ldrb	r0, [r6, #0]
 800ba26:	f7ff ff9f 	bl	800b968 <__hexdig_fun>
 800ba2a:	2800      	cmp	r0, #0
 800ba2c:	d1f8      	bne.n	800ba20 <__gethex+0x8c>
 800ba2e:	1ba4      	subs	r4, r4, r6
 800ba30:	00a7      	lsls	r7, r4, #2
 800ba32:	7833      	ldrb	r3, [r6, #0]
 800ba34:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ba38:	2b50      	cmp	r3, #80	@ 0x50
 800ba3a:	d13e      	bne.n	800baba <__gethex+0x126>
 800ba3c:	7873      	ldrb	r3, [r6, #1]
 800ba3e:	2b2b      	cmp	r3, #43	@ 0x2b
 800ba40:	d033      	beq.n	800baaa <__gethex+0x116>
 800ba42:	2b2d      	cmp	r3, #45	@ 0x2d
 800ba44:	d034      	beq.n	800bab0 <__gethex+0x11c>
 800ba46:	1c71      	adds	r1, r6, #1
 800ba48:	2400      	movs	r4, #0
 800ba4a:	7808      	ldrb	r0, [r1, #0]
 800ba4c:	f7ff ff8c 	bl	800b968 <__hexdig_fun>
 800ba50:	1e43      	subs	r3, r0, #1
 800ba52:	b2db      	uxtb	r3, r3
 800ba54:	2b18      	cmp	r3, #24
 800ba56:	d830      	bhi.n	800baba <__gethex+0x126>
 800ba58:	f1a0 0210 	sub.w	r2, r0, #16
 800ba5c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ba60:	f7ff ff82 	bl	800b968 <__hexdig_fun>
 800ba64:	f100 3cff 	add.w	ip, r0, #4294967295
 800ba68:	fa5f fc8c 	uxtb.w	ip, ip
 800ba6c:	f1bc 0f18 	cmp.w	ip, #24
 800ba70:	f04f 030a 	mov.w	r3, #10
 800ba74:	d91e      	bls.n	800bab4 <__gethex+0x120>
 800ba76:	b104      	cbz	r4, 800ba7a <__gethex+0xe6>
 800ba78:	4252      	negs	r2, r2
 800ba7a:	4417      	add	r7, r2
 800ba7c:	f8ca 1000 	str.w	r1, [sl]
 800ba80:	b1ed      	cbz	r5, 800babe <__gethex+0x12a>
 800ba82:	f1bb 0f00 	cmp.w	fp, #0
 800ba86:	bf0c      	ite	eq
 800ba88:	2506      	moveq	r5, #6
 800ba8a:	2500      	movne	r5, #0
 800ba8c:	4628      	mov	r0, r5
 800ba8e:	b005      	add	sp, #20
 800ba90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba94:	2500      	movs	r5, #0
 800ba96:	462c      	mov	r4, r5
 800ba98:	e7b0      	b.n	800b9fc <__gethex+0x68>
 800ba9a:	2c00      	cmp	r4, #0
 800ba9c:	d1c7      	bne.n	800ba2e <__gethex+0x9a>
 800ba9e:	4627      	mov	r7, r4
 800baa0:	e7c7      	b.n	800ba32 <__gethex+0x9e>
 800baa2:	464e      	mov	r6, r9
 800baa4:	462f      	mov	r7, r5
 800baa6:	2501      	movs	r5, #1
 800baa8:	e7c3      	b.n	800ba32 <__gethex+0x9e>
 800baaa:	2400      	movs	r4, #0
 800baac:	1cb1      	adds	r1, r6, #2
 800baae:	e7cc      	b.n	800ba4a <__gethex+0xb6>
 800bab0:	2401      	movs	r4, #1
 800bab2:	e7fb      	b.n	800baac <__gethex+0x118>
 800bab4:	fb03 0002 	mla	r0, r3, r2, r0
 800bab8:	e7ce      	b.n	800ba58 <__gethex+0xc4>
 800baba:	4631      	mov	r1, r6
 800babc:	e7de      	b.n	800ba7c <__gethex+0xe8>
 800babe:	eba6 0309 	sub.w	r3, r6, r9
 800bac2:	3b01      	subs	r3, #1
 800bac4:	4629      	mov	r1, r5
 800bac6:	2b07      	cmp	r3, #7
 800bac8:	dc0a      	bgt.n	800bae0 <__gethex+0x14c>
 800baca:	9801      	ldr	r0, [sp, #4]
 800bacc:	f7fe f944 	bl	8009d58 <_Balloc>
 800bad0:	4604      	mov	r4, r0
 800bad2:	b940      	cbnz	r0, 800bae6 <__gethex+0x152>
 800bad4:	4b5c      	ldr	r3, [pc, #368]	@ (800bc48 <__gethex+0x2b4>)
 800bad6:	4602      	mov	r2, r0
 800bad8:	21e4      	movs	r1, #228	@ 0xe4
 800bada:	485c      	ldr	r0, [pc, #368]	@ (800bc4c <__gethex+0x2b8>)
 800badc:	f7ff fec0 	bl	800b860 <__assert_func>
 800bae0:	3101      	adds	r1, #1
 800bae2:	105b      	asrs	r3, r3, #1
 800bae4:	e7ef      	b.n	800bac6 <__gethex+0x132>
 800bae6:	f100 0a14 	add.w	sl, r0, #20
 800baea:	2300      	movs	r3, #0
 800baec:	4655      	mov	r5, sl
 800baee:	469b      	mov	fp, r3
 800baf0:	45b1      	cmp	r9, r6
 800baf2:	d337      	bcc.n	800bb64 <__gethex+0x1d0>
 800baf4:	f845 bb04 	str.w	fp, [r5], #4
 800baf8:	eba5 050a 	sub.w	r5, r5, sl
 800bafc:	10ad      	asrs	r5, r5, #2
 800bafe:	6125      	str	r5, [r4, #16]
 800bb00:	4658      	mov	r0, fp
 800bb02:	f7fe fa1b 	bl	8009f3c <__hi0bits>
 800bb06:	016d      	lsls	r5, r5, #5
 800bb08:	f8d8 6000 	ldr.w	r6, [r8]
 800bb0c:	1a2d      	subs	r5, r5, r0
 800bb0e:	42b5      	cmp	r5, r6
 800bb10:	dd54      	ble.n	800bbbc <__gethex+0x228>
 800bb12:	1bad      	subs	r5, r5, r6
 800bb14:	4629      	mov	r1, r5
 800bb16:	4620      	mov	r0, r4
 800bb18:	f7fe fda7 	bl	800a66a <__any_on>
 800bb1c:	4681      	mov	r9, r0
 800bb1e:	b178      	cbz	r0, 800bb40 <__gethex+0x1ac>
 800bb20:	1e6b      	subs	r3, r5, #1
 800bb22:	1159      	asrs	r1, r3, #5
 800bb24:	f003 021f 	and.w	r2, r3, #31
 800bb28:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bb2c:	f04f 0901 	mov.w	r9, #1
 800bb30:	fa09 f202 	lsl.w	r2, r9, r2
 800bb34:	420a      	tst	r2, r1
 800bb36:	d003      	beq.n	800bb40 <__gethex+0x1ac>
 800bb38:	454b      	cmp	r3, r9
 800bb3a:	dc36      	bgt.n	800bbaa <__gethex+0x216>
 800bb3c:	f04f 0902 	mov.w	r9, #2
 800bb40:	4629      	mov	r1, r5
 800bb42:	4620      	mov	r0, r4
 800bb44:	f7ff febe 	bl	800b8c4 <rshift>
 800bb48:	442f      	add	r7, r5
 800bb4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bb4e:	42bb      	cmp	r3, r7
 800bb50:	da42      	bge.n	800bbd8 <__gethex+0x244>
 800bb52:	9801      	ldr	r0, [sp, #4]
 800bb54:	4621      	mov	r1, r4
 800bb56:	f7fe f93f 	bl	8009dd8 <_Bfree>
 800bb5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	6013      	str	r3, [r2, #0]
 800bb60:	25a3      	movs	r5, #163	@ 0xa3
 800bb62:	e793      	b.n	800ba8c <__gethex+0xf8>
 800bb64:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bb68:	2a2e      	cmp	r2, #46	@ 0x2e
 800bb6a:	d012      	beq.n	800bb92 <__gethex+0x1fe>
 800bb6c:	2b20      	cmp	r3, #32
 800bb6e:	d104      	bne.n	800bb7a <__gethex+0x1e6>
 800bb70:	f845 bb04 	str.w	fp, [r5], #4
 800bb74:	f04f 0b00 	mov.w	fp, #0
 800bb78:	465b      	mov	r3, fp
 800bb7a:	7830      	ldrb	r0, [r6, #0]
 800bb7c:	9303      	str	r3, [sp, #12]
 800bb7e:	f7ff fef3 	bl	800b968 <__hexdig_fun>
 800bb82:	9b03      	ldr	r3, [sp, #12]
 800bb84:	f000 000f 	and.w	r0, r0, #15
 800bb88:	4098      	lsls	r0, r3
 800bb8a:	ea4b 0b00 	orr.w	fp, fp, r0
 800bb8e:	3304      	adds	r3, #4
 800bb90:	e7ae      	b.n	800baf0 <__gethex+0x15c>
 800bb92:	45b1      	cmp	r9, r6
 800bb94:	d8ea      	bhi.n	800bb6c <__gethex+0x1d8>
 800bb96:	492b      	ldr	r1, [pc, #172]	@ (800bc44 <__gethex+0x2b0>)
 800bb98:	9303      	str	r3, [sp, #12]
 800bb9a:	2201      	movs	r2, #1
 800bb9c:	4630      	mov	r0, r6
 800bb9e:	f7ff fe27 	bl	800b7f0 <strncmp>
 800bba2:	9b03      	ldr	r3, [sp, #12]
 800bba4:	2800      	cmp	r0, #0
 800bba6:	d1e1      	bne.n	800bb6c <__gethex+0x1d8>
 800bba8:	e7a2      	b.n	800baf0 <__gethex+0x15c>
 800bbaa:	1ea9      	subs	r1, r5, #2
 800bbac:	4620      	mov	r0, r4
 800bbae:	f7fe fd5c 	bl	800a66a <__any_on>
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	d0c2      	beq.n	800bb3c <__gethex+0x1a8>
 800bbb6:	f04f 0903 	mov.w	r9, #3
 800bbba:	e7c1      	b.n	800bb40 <__gethex+0x1ac>
 800bbbc:	da09      	bge.n	800bbd2 <__gethex+0x23e>
 800bbbe:	1b75      	subs	r5, r6, r5
 800bbc0:	4621      	mov	r1, r4
 800bbc2:	9801      	ldr	r0, [sp, #4]
 800bbc4:	462a      	mov	r2, r5
 800bbc6:	f7fe fb17 	bl	800a1f8 <__lshift>
 800bbca:	1b7f      	subs	r7, r7, r5
 800bbcc:	4604      	mov	r4, r0
 800bbce:	f100 0a14 	add.w	sl, r0, #20
 800bbd2:	f04f 0900 	mov.w	r9, #0
 800bbd6:	e7b8      	b.n	800bb4a <__gethex+0x1b6>
 800bbd8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bbdc:	42bd      	cmp	r5, r7
 800bbde:	dd6f      	ble.n	800bcc0 <__gethex+0x32c>
 800bbe0:	1bed      	subs	r5, r5, r7
 800bbe2:	42ae      	cmp	r6, r5
 800bbe4:	dc34      	bgt.n	800bc50 <__gethex+0x2bc>
 800bbe6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bbea:	2b02      	cmp	r3, #2
 800bbec:	d022      	beq.n	800bc34 <__gethex+0x2a0>
 800bbee:	2b03      	cmp	r3, #3
 800bbf0:	d024      	beq.n	800bc3c <__gethex+0x2a8>
 800bbf2:	2b01      	cmp	r3, #1
 800bbf4:	d115      	bne.n	800bc22 <__gethex+0x28e>
 800bbf6:	42ae      	cmp	r6, r5
 800bbf8:	d113      	bne.n	800bc22 <__gethex+0x28e>
 800bbfa:	2e01      	cmp	r6, #1
 800bbfc:	d10b      	bne.n	800bc16 <__gethex+0x282>
 800bbfe:	9a02      	ldr	r2, [sp, #8]
 800bc00:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bc04:	6013      	str	r3, [r2, #0]
 800bc06:	2301      	movs	r3, #1
 800bc08:	6123      	str	r3, [r4, #16]
 800bc0a:	f8ca 3000 	str.w	r3, [sl]
 800bc0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bc10:	2562      	movs	r5, #98	@ 0x62
 800bc12:	601c      	str	r4, [r3, #0]
 800bc14:	e73a      	b.n	800ba8c <__gethex+0xf8>
 800bc16:	1e71      	subs	r1, r6, #1
 800bc18:	4620      	mov	r0, r4
 800bc1a:	f7fe fd26 	bl	800a66a <__any_on>
 800bc1e:	2800      	cmp	r0, #0
 800bc20:	d1ed      	bne.n	800bbfe <__gethex+0x26a>
 800bc22:	9801      	ldr	r0, [sp, #4]
 800bc24:	4621      	mov	r1, r4
 800bc26:	f7fe f8d7 	bl	8009dd8 <_Bfree>
 800bc2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	6013      	str	r3, [r2, #0]
 800bc30:	2550      	movs	r5, #80	@ 0x50
 800bc32:	e72b      	b.n	800ba8c <__gethex+0xf8>
 800bc34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d1f3      	bne.n	800bc22 <__gethex+0x28e>
 800bc3a:	e7e0      	b.n	800bbfe <__gethex+0x26a>
 800bc3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d1dd      	bne.n	800bbfe <__gethex+0x26a>
 800bc42:	e7ee      	b.n	800bc22 <__gethex+0x28e>
 800bc44:	0800c937 	.word	0x0800c937
 800bc48:	0800c8cd 	.word	0x0800c8cd
 800bc4c:	0800c98e 	.word	0x0800c98e
 800bc50:	1e6f      	subs	r7, r5, #1
 800bc52:	f1b9 0f00 	cmp.w	r9, #0
 800bc56:	d130      	bne.n	800bcba <__gethex+0x326>
 800bc58:	b127      	cbz	r7, 800bc64 <__gethex+0x2d0>
 800bc5a:	4639      	mov	r1, r7
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	f7fe fd04 	bl	800a66a <__any_on>
 800bc62:	4681      	mov	r9, r0
 800bc64:	117a      	asrs	r2, r7, #5
 800bc66:	2301      	movs	r3, #1
 800bc68:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bc6c:	f007 071f 	and.w	r7, r7, #31
 800bc70:	40bb      	lsls	r3, r7
 800bc72:	4213      	tst	r3, r2
 800bc74:	4629      	mov	r1, r5
 800bc76:	4620      	mov	r0, r4
 800bc78:	bf18      	it	ne
 800bc7a:	f049 0902 	orrne.w	r9, r9, #2
 800bc7e:	f7ff fe21 	bl	800b8c4 <rshift>
 800bc82:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bc86:	1b76      	subs	r6, r6, r5
 800bc88:	2502      	movs	r5, #2
 800bc8a:	f1b9 0f00 	cmp.w	r9, #0
 800bc8e:	d047      	beq.n	800bd20 <__gethex+0x38c>
 800bc90:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bc94:	2b02      	cmp	r3, #2
 800bc96:	d015      	beq.n	800bcc4 <__gethex+0x330>
 800bc98:	2b03      	cmp	r3, #3
 800bc9a:	d017      	beq.n	800bccc <__gethex+0x338>
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d109      	bne.n	800bcb4 <__gethex+0x320>
 800bca0:	f019 0f02 	tst.w	r9, #2
 800bca4:	d006      	beq.n	800bcb4 <__gethex+0x320>
 800bca6:	f8da 3000 	ldr.w	r3, [sl]
 800bcaa:	ea49 0903 	orr.w	r9, r9, r3
 800bcae:	f019 0f01 	tst.w	r9, #1
 800bcb2:	d10e      	bne.n	800bcd2 <__gethex+0x33e>
 800bcb4:	f045 0510 	orr.w	r5, r5, #16
 800bcb8:	e032      	b.n	800bd20 <__gethex+0x38c>
 800bcba:	f04f 0901 	mov.w	r9, #1
 800bcbe:	e7d1      	b.n	800bc64 <__gethex+0x2d0>
 800bcc0:	2501      	movs	r5, #1
 800bcc2:	e7e2      	b.n	800bc8a <__gethex+0x2f6>
 800bcc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcc6:	f1c3 0301 	rsb	r3, r3, #1
 800bcca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bccc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d0f0      	beq.n	800bcb4 <__gethex+0x320>
 800bcd2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bcd6:	f104 0314 	add.w	r3, r4, #20
 800bcda:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bcde:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bce2:	f04f 0c00 	mov.w	ip, #0
 800bce6:	4618      	mov	r0, r3
 800bce8:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcec:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bcf0:	d01b      	beq.n	800bd2a <__gethex+0x396>
 800bcf2:	3201      	adds	r2, #1
 800bcf4:	6002      	str	r2, [r0, #0]
 800bcf6:	2d02      	cmp	r5, #2
 800bcf8:	f104 0314 	add.w	r3, r4, #20
 800bcfc:	d13c      	bne.n	800bd78 <__gethex+0x3e4>
 800bcfe:	f8d8 2000 	ldr.w	r2, [r8]
 800bd02:	3a01      	subs	r2, #1
 800bd04:	42b2      	cmp	r2, r6
 800bd06:	d109      	bne.n	800bd1c <__gethex+0x388>
 800bd08:	1171      	asrs	r1, r6, #5
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bd10:	f006 061f 	and.w	r6, r6, #31
 800bd14:	fa02 f606 	lsl.w	r6, r2, r6
 800bd18:	421e      	tst	r6, r3
 800bd1a:	d13a      	bne.n	800bd92 <__gethex+0x3fe>
 800bd1c:	f045 0520 	orr.w	r5, r5, #32
 800bd20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd22:	601c      	str	r4, [r3, #0]
 800bd24:	9b02      	ldr	r3, [sp, #8]
 800bd26:	601f      	str	r7, [r3, #0]
 800bd28:	e6b0      	b.n	800ba8c <__gethex+0xf8>
 800bd2a:	4299      	cmp	r1, r3
 800bd2c:	f843 cc04 	str.w	ip, [r3, #-4]
 800bd30:	d8d9      	bhi.n	800bce6 <__gethex+0x352>
 800bd32:	68a3      	ldr	r3, [r4, #8]
 800bd34:	459b      	cmp	fp, r3
 800bd36:	db17      	blt.n	800bd68 <__gethex+0x3d4>
 800bd38:	6861      	ldr	r1, [r4, #4]
 800bd3a:	9801      	ldr	r0, [sp, #4]
 800bd3c:	3101      	adds	r1, #1
 800bd3e:	f7fe f80b 	bl	8009d58 <_Balloc>
 800bd42:	4681      	mov	r9, r0
 800bd44:	b918      	cbnz	r0, 800bd4e <__gethex+0x3ba>
 800bd46:	4b1a      	ldr	r3, [pc, #104]	@ (800bdb0 <__gethex+0x41c>)
 800bd48:	4602      	mov	r2, r0
 800bd4a:	2184      	movs	r1, #132	@ 0x84
 800bd4c:	e6c5      	b.n	800bada <__gethex+0x146>
 800bd4e:	6922      	ldr	r2, [r4, #16]
 800bd50:	3202      	adds	r2, #2
 800bd52:	f104 010c 	add.w	r1, r4, #12
 800bd56:	0092      	lsls	r2, r2, #2
 800bd58:	300c      	adds	r0, #12
 800bd5a:	f7ff fd6b 	bl	800b834 <memcpy>
 800bd5e:	4621      	mov	r1, r4
 800bd60:	9801      	ldr	r0, [sp, #4]
 800bd62:	f7fe f839 	bl	8009dd8 <_Bfree>
 800bd66:	464c      	mov	r4, r9
 800bd68:	6923      	ldr	r3, [r4, #16]
 800bd6a:	1c5a      	adds	r2, r3, #1
 800bd6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bd70:	6122      	str	r2, [r4, #16]
 800bd72:	2201      	movs	r2, #1
 800bd74:	615a      	str	r2, [r3, #20]
 800bd76:	e7be      	b.n	800bcf6 <__gethex+0x362>
 800bd78:	6922      	ldr	r2, [r4, #16]
 800bd7a:	455a      	cmp	r2, fp
 800bd7c:	dd0b      	ble.n	800bd96 <__gethex+0x402>
 800bd7e:	2101      	movs	r1, #1
 800bd80:	4620      	mov	r0, r4
 800bd82:	f7ff fd9f 	bl	800b8c4 <rshift>
 800bd86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bd8a:	3701      	adds	r7, #1
 800bd8c:	42bb      	cmp	r3, r7
 800bd8e:	f6ff aee0 	blt.w	800bb52 <__gethex+0x1be>
 800bd92:	2501      	movs	r5, #1
 800bd94:	e7c2      	b.n	800bd1c <__gethex+0x388>
 800bd96:	f016 061f 	ands.w	r6, r6, #31
 800bd9a:	d0fa      	beq.n	800bd92 <__gethex+0x3fe>
 800bd9c:	4453      	add	r3, sl
 800bd9e:	f1c6 0620 	rsb	r6, r6, #32
 800bda2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800bda6:	f7fe f8c9 	bl	8009f3c <__hi0bits>
 800bdaa:	42b0      	cmp	r0, r6
 800bdac:	dbe7      	blt.n	800bd7e <__gethex+0x3ea>
 800bdae:	e7f0      	b.n	800bd92 <__gethex+0x3fe>
 800bdb0:	0800c8cd 	.word	0x0800c8cd

0800bdb4 <L_shift>:
 800bdb4:	f1c2 0208 	rsb	r2, r2, #8
 800bdb8:	0092      	lsls	r2, r2, #2
 800bdba:	b570      	push	{r4, r5, r6, lr}
 800bdbc:	f1c2 0620 	rsb	r6, r2, #32
 800bdc0:	6843      	ldr	r3, [r0, #4]
 800bdc2:	6804      	ldr	r4, [r0, #0]
 800bdc4:	fa03 f506 	lsl.w	r5, r3, r6
 800bdc8:	432c      	orrs	r4, r5
 800bdca:	40d3      	lsrs	r3, r2
 800bdcc:	6004      	str	r4, [r0, #0]
 800bdce:	f840 3f04 	str.w	r3, [r0, #4]!
 800bdd2:	4288      	cmp	r0, r1
 800bdd4:	d3f4      	bcc.n	800bdc0 <L_shift+0xc>
 800bdd6:	bd70      	pop	{r4, r5, r6, pc}

0800bdd8 <__match>:
 800bdd8:	b530      	push	{r4, r5, lr}
 800bdda:	6803      	ldr	r3, [r0, #0]
 800bddc:	3301      	adds	r3, #1
 800bdde:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bde2:	b914      	cbnz	r4, 800bdea <__match+0x12>
 800bde4:	6003      	str	r3, [r0, #0]
 800bde6:	2001      	movs	r0, #1
 800bde8:	bd30      	pop	{r4, r5, pc}
 800bdea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800bdf2:	2d19      	cmp	r5, #25
 800bdf4:	bf98      	it	ls
 800bdf6:	3220      	addls	r2, #32
 800bdf8:	42a2      	cmp	r2, r4
 800bdfa:	d0f0      	beq.n	800bdde <__match+0x6>
 800bdfc:	2000      	movs	r0, #0
 800bdfe:	e7f3      	b.n	800bde8 <__match+0x10>

0800be00 <__hexnan>:
 800be00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be04:	680b      	ldr	r3, [r1, #0]
 800be06:	6801      	ldr	r1, [r0, #0]
 800be08:	115e      	asrs	r6, r3, #5
 800be0a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800be0e:	f013 031f 	ands.w	r3, r3, #31
 800be12:	b087      	sub	sp, #28
 800be14:	bf18      	it	ne
 800be16:	3604      	addne	r6, #4
 800be18:	2500      	movs	r5, #0
 800be1a:	1f37      	subs	r7, r6, #4
 800be1c:	4682      	mov	sl, r0
 800be1e:	4690      	mov	r8, r2
 800be20:	9301      	str	r3, [sp, #4]
 800be22:	f846 5c04 	str.w	r5, [r6, #-4]
 800be26:	46b9      	mov	r9, r7
 800be28:	463c      	mov	r4, r7
 800be2a:	9502      	str	r5, [sp, #8]
 800be2c:	46ab      	mov	fp, r5
 800be2e:	784a      	ldrb	r2, [r1, #1]
 800be30:	1c4b      	adds	r3, r1, #1
 800be32:	9303      	str	r3, [sp, #12]
 800be34:	b342      	cbz	r2, 800be88 <__hexnan+0x88>
 800be36:	4610      	mov	r0, r2
 800be38:	9105      	str	r1, [sp, #20]
 800be3a:	9204      	str	r2, [sp, #16]
 800be3c:	f7ff fd94 	bl	800b968 <__hexdig_fun>
 800be40:	2800      	cmp	r0, #0
 800be42:	d151      	bne.n	800bee8 <__hexnan+0xe8>
 800be44:	9a04      	ldr	r2, [sp, #16]
 800be46:	9905      	ldr	r1, [sp, #20]
 800be48:	2a20      	cmp	r2, #32
 800be4a:	d818      	bhi.n	800be7e <__hexnan+0x7e>
 800be4c:	9b02      	ldr	r3, [sp, #8]
 800be4e:	459b      	cmp	fp, r3
 800be50:	dd13      	ble.n	800be7a <__hexnan+0x7a>
 800be52:	454c      	cmp	r4, r9
 800be54:	d206      	bcs.n	800be64 <__hexnan+0x64>
 800be56:	2d07      	cmp	r5, #7
 800be58:	dc04      	bgt.n	800be64 <__hexnan+0x64>
 800be5a:	462a      	mov	r2, r5
 800be5c:	4649      	mov	r1, r9
 800be5e:	4620      	mov	r0, r4
 800be60:	f7ff ffa8 	bl	800bdb4 <L_shift>
 800be64:	4544      	cmp	r4, r8
 800be66:	d952      	bls.n	800bf0e <__hexnan+0x10e>
 800be68:	2300      	movs	r3, #0
 800be6a:	f1a4 0904 	sub.w	r9, r4, #4
 800be6e:	f844 3c04 	str.w	r3, [r4, #-4]
 800be72:	f8cd b008 	str.w	fp, [sp, #8]
 800be76:	464c      	mov	r4, r9
 800be78:	461d      	mov	r5, r3
 800be7a:	9903      	ldr	r1, [sp, #12]
 800be7c:	e7d7      	b.n	800be2e <__hexnan+0x2e>
 800be7e:	2a29      	cmp	r2, #41	@ 0x29
 800be80:	d157      	bne.n	800bf32 <__hexnan+0x132>
 800be82:	3102      	adds	r1, #2
 800be84:	f8ca 1000 	str.w	r1, [sl]
 800be88:	f1bb 0f00 	cmp.w	fp, #0
 800be8c:	d051      	beq.n	800bf32 <__hexnan+0x132>
 800be8e:	454c      	cmp	r4, r9
 800be90:	d206      	bcs.n	800bea0 <__hexnan+0xa0>
 800be92:	2d07      	cmp	r5, #7
 800be94:	dc04      	bgt.n	800bea0 <__hexnan+0xa0>
 800be96:	462a      	mov	r2, r5
 800be98:	4649      	mov	r1, r9
 800be9a:	4620      	mov	r0, r4
 800be9c:	f7ff ff8a 	bl	800bdb4 <L_shift>
 800bea0:	4544      	cmp	r4, r8
 800bea2:	d936      	bls.n	800bf12 <__hexnan+0x112>
 800bea4:	f1a8 0204 	sub.w	r2, r8, #4
 800bea8:	4623      	mov	r3, r4
 800beaa:	f853 1b04 	ldr.w	r1, [r3], #4
 800beae:	f842 1f04 	str.w	r1, [r2, #4]!
 800beb2:	429f      	cmp	r7, r3
 800beb4:	d2f9      	bcs.n	800beaa <__hexnan+0xaa>
 800beb6:	1b3b      	subs	r3, r7, r4
 800beb8:	f023 0303 	bic.w	r3, r3, #3
 800bebc:	3304      	adds	r3, #4
 800bebe:	3401      	adds	r4, #1
 800bec0:	3e03      	subs	r6, #3
 800bec2:	42b4      	cmp	r4, r6
 800bec4:	bf88      	it	hi
 800bec6:	2304      	movhi	r3, #4
 800bec8:	4443      	add	r3, r8
 800beca:	2200      	movs	r2, #0
 800becc:	f843 2b04 	str.w	r2, [r3], #4
 800bed0:	429f      	cmp	r7, r3
 800bed2:	d2fb      	bcs.n	800becc <__hexnan+0xcc>
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	b91b      	cbnz	r3, 800bee0 <__hexnan+0xe0>
 800bed8:	4547      	cmp	r7, r8
 800beda:	d128      	bne.n	800bf2e <__hexnan+0x12e>
 800bedc:	2301      	movs	r3, #1
 800bede:	603b      	str	r3, [r7, #0]
 800bee0:	2005      	movs	r0, #5
 800bee2:	b007      	add	sp, #28
 800bee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bee8:	3501      	adds	r5, #1
 800beea:	2d08      	cmp	r5, #8
 800beec:	f10b 0b01 	add.w	fp, fp, #1
 800bef0:	dd06      	ble.n	800bf00 <__hexnan+0x100>
 800bef2:	4544      	cmp	r4, r8
 800bef4:	d9c1      	bls.n	800be7a <__hexnan+0x7a>
 800bef6:	2300      	movs	r3, #0
 800bef8:	f844 3c04 	str.w	r3, [r4, #-4]
 800befc:	2501      	movs	r5, #1
 800befe:	3c04      	subs	r4, #4
 800bf00:	6822      	ldr	r2, [r4, #0]
 800bf02:	f000 000f 	and.w	r0, r0, #15
 800bf06:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bf0a:	6020      	str	r0, [r4, #0]
 800bf0c:	e7b5      	b.n	800be7a <__hexnan+0x7a>
 800bf0e:	2508      	movs	r5, #8
 800bf10:	e7b3      	b.n	800be7a <__hexnan+0x7a>
 800bf12:	9b01      	ldr	r3, [sp, #4]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d0dd      	beq.n	800bed4 <__hexnan+0xd4>
 800bf18:	f1c3 0320 	rsb	r3, r3, #32
 800bf1c:	f04f 32ff 	mov.w	r2, #4294967295
 800bf20:	40da      	lsrs	r2, r3
 800bf22:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bf26:	4013      	ands	r3, r2
 800bf28:	f846 3c04 	str.w	r3, [r6, #-4]
 800bf2c:	e7d2      	b.n	800bed4 <__hexnan+0xd4>
 800bf2e:	3f04      	subs	r7, #4
 800bf30:	e7d0      	b.n	800bed4 <__hexnan+0xd4>
 800bf32:	2004      	movs	r0, #4
 800bf34:	e7d5      	b.n	800bee2 <__hexnan+0xe2>

0800bf36 <__ascii_mbtowc>:
 800bf36:	b082      	sub	sp, #8
 800bf38:	b901      	cbnz	r1, 800bf3c <__ascii_mbtowc+0x6>
 800bf3a:	a901      	add	r1, sp, #4
 800bf3c:	b142      	cbz	r2, 800bf50 <__ascii_mbtowc+0x1a>
 800bf3e:	b14b      	cbz	r3, 800bf54 <__ascii_mbtowc+0x1e>
 800bf40:	7813      	ldrb	r3, [r2, #0]
 800bf42:	600b      	str	r3, [r1, #0]
 800bf44:	7812      	ldrb	r2, [r2, #0]
 800bf46:	1e10      	subs	r0, r2, #0
 800bf48:	bf18      	it	ne
 800bf4a:	2001      	movne	r0, #1
 800bf4c:	b002      	add	sp, #8
 800bf4e:	4770      	bx	lr
 800bf50:	4610      	mov	r0, r2
 800bf52:	e7fb      	b.n	800bf4c <__ascii_mbtowc+0x16>
 800bf54:	f06f 0001 	mvn.w	r0, #1
 800bf58:	e7f8      	b.n	800bf4c <__ascii_mbtowc+0x16>

0800bf5a <_realloc_r>:
 800bf5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf5e:	4607      	mov	r7, r0
 800bf60:	4614      	mov	r4, r2
 800bf62:	460d      	mov	r5, r1
 800bf64:	b921      	cbnz	r1, 800bf70 <_realloc_r+0x16>
 800bf66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf6a:	4611      	mov	r1, r2
 800bf6c:	f7fd be68 	b.w	8009c40 <_malloc_r>
 800bf70:	b92a      	cbnz	r2, 800bf7e <_realloc_r+0x24>
 800bf72:	f7fd fdf1 	bl	8009b58 <_free_r>
 800bf76:	4625      	mov	r5, r4
 800bf78:	4628      	mov	r0, r5
 800bf7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf7e:	f000 f840 	bl	800c002 <_malloc_usable_size_r>
 800bf82:	4284      	cmp	r4, r0
 800bf84:	4606      	mov	r6, r0
 800bf86:	d802      	bhi.n	800bf8e <_realloc_r+0x34>
 800bf88:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bf8c:	d8f4      	bhi.n	800bf78 <_realloc_r+0x1e>
 800bf8e:	4621      	mov	r1, r4
 800bf90:	4638      	mov	r0, r7
 800bf92:	f7fd fe55 	bl	8009c40 <_malloc_r>
 800bf96:	4680      	mov	r8, r0
 800bf98:	b908      	cbnz	r0, 800bf9e <_realloc_r+0x44>
 800bf9a:	4645      	mov	r5, r8
 800bf9c:	e7ec      	b.n	800bf78 <_realloc_r+0x1e>
 800bf9e:	42b4      	cmp	r4, r6
 800bfa0:	4622      	mov	r2, r4
 800bfa2:	4629      	mov	r1, r5
 800bfa4:	bf28      	it	cs
 800bfa6:	4632      	movcs	r2, r6
 800bfa8:	f7ff fc44 	bl	800b834 <memcpy>
 800bfac:	4629      	mov	r1, r5
 800bfae:	4638      	mov	r0, r7
 800bfb0:	f7fd fdd2 	bl	8009b58 <_free_r>
 800bfb4:	e7f1      	b.n	800bf9a <_realloc_r+0x40>

0800bfb6 <__ascii_wctomb>:
 800bfb6:	4603      	mov	r3, r0
 800bfb8:	4608      	mov	r0, r1
 800bfba:	b141      	cbz	r1, 800bfce <__ascii_wctomb+0x18>
 800bfbc:	2aff      	cmp	r2, #255	@ 0xff
 800bfbe:	d904      	bls.n	800bfca <__ascii_wctomb+0x14>
 800bfc0:	228a      	movs	r2, #138	@ 0x8a
 800bfc2:	601a      	str	r2, [r3, #0]
 800bfc4:	f04f 30ff 	mov.w	r0, #4294967295
 800bfc8:	4770      	bx	lr
 800bfca:	700a      	strb	r2, [r1, #0]
 800bfcc:	2001      	movs	r0, #1
 800bfce:	4770      	bx	lr

0800bfd0 <fiprintf>:
 800bfd0:	b40e      	push	{r1, r2, r3}
 800bfd2:	b503      	push	{r0, r1, lr}
 800bfd4:	4601      	mov	r1, r0
 800bfd6:	ab03      	add	r3, sp, #12
 800bfd8:	4805      	ldr	r0, [pc, #20]	@ (800bff0 <fiprintf+0x20>)
 800bfda:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfde:	6800      	ldr	r0, [r0, #0]
 800bfe0:	9301      	str	r3, [sp, #4]
 800bfe2:	f000 f83f 	bl	800c064 <_vfiprintf_r>
 800bfe6:	b002      	add	sp, #8
 800bfe8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bfec:	b003      	add	sp, #12
 800bfee:	4770      	bx	lr
 800bff0:	2000009c 	.word	0x2000009c

0800bff4 <abort>:
 800bff4:	b508      	push	{r3, lr}
 800bff6:	2006      	movs	r0, #6
 800bff8:	f000 fa08 	bl	800c40c <raise>
 800bffc:	2001      	movs	r0, #1
 800bffe:	f7f6 fead 	bl	8002d5c <_exit>

0800c002 <_malloc_usable_size_r>:
 800c002:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c006:	1f18      	subs	r0, r3, #4
 800c008:	2b00      	cmp	r3, #0
 800c00a:	bfbc      	itt	lt
 800c00c:	580b      	ldrlt	r3, [r1, r0]
 800c00e:	18c0      	addlt	r0, r0, r3
 800c010:	4770      	bx	lr

0800c012 <__sfputc_r>:
 800c012:	6893      	ldr	r3, [r2, #8]
 800c014:	3b01      	subs	r3, #1
 800c016:	2b00      	cmp	r3, #0
 800c018:	b410      	push	{r4}
 800c01a:	6093      	str	r3, [r2, #8]
 800c01c:	da08      	bge.n	800c030 <__sfputc_r+0x1e>
 800c01e:	6994      	ldr	r4, [r2, #24]
 800c020:	42a3      	cmp	r3, r4
 800c022:	db01      	blt.n	800c028 <__sfputc_r+0x16>
 800c024:	290a      	cmp	r1, #10
 800c026:	d103      	bne.n	800c030 <__sfputc_r+0x1e>
 800c028:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c02c:	f000 b932 	b.w	800c294 <__swbuf_r>
 800c030:	6813      	ldr	r3, [r2, #0]
 800c032:	1c58      	adds	r0, r3, #1
 800c034:	6010      	str	r0, [r2, #0]
 800c036:	7019      	strb	r1, [r3, #0]
 800c038:	4608      	mov	r0, r1
 800c03a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c03e:	4770      	bx	lr

0800c040 <__sfputs_r>:
 800c040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c042:	4606      	mov	r6, r0
 800c044:	460f      	mov	r7, r1
 800c046:	4614      	mov	r4, r2
 800c048:	18d5      	adds	r5, r2, r3
 800c04a:	42ac      	cmp	r4, r5
 800c04c:	d101      	bne.n	800c052 <__sfputs_r+0x12>
 800c04e:	2000      	movs	r0, #0
 800c050:	e007      	b.n	800c062 <__sfputs_r+0x22>
 800c052:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c056:	463a      	mov	r2, r7
 800c058:	4630      	mov	r0, r6
 800c05a:	f7ff ffda 	bl	800c012 <__sfputc_r>
 800c05e:	1c43      	adds	r3, r0, #1
 800c060:	d1f3      	bne.n	800c04a <__sfputs_r+0xa>
 800c062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c064 <_vfiprintf_r>:
 800c064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c068:	460d      	mov	r5, r1
 800c06a:	b09d      	sub	sp, #116	@ 0x74
 800c06c:	4614      	mov	r4, r2
 800c06e:	4698      	mov	r8, r3
 800c070:	4606      	mov	r6, r0
 800c072:	b118      	cbz	r0, 800c07c <_vfiprintf_r+0x18>
 800c074:	6a03      	ldr	r3, [r0, #32]
 800c076:	b90b      	cbnz	r3, 800c07c <_vfiprintf_r+0x18>
 800c078:	f7fc fdf4 	bl	8008c64 <__sinit>
 800c07c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c07e:	07d9      	lsls	r1, r3, #31
 800c080:	d405      	bmi.n	800c08e <_vfiprintf_r+0x2a>
 800c082:	89ab      	ldrh	r3, [r5, #12]
 800c084:	059a      	lsls	r2, r3, #22
 800c086:	d402      	bmi.n	800c08e <_vfiprintf_r+0x2a>
 800c088:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c08a:	f7fc ff04 	bl	8008e96 <__retarget_lock_acquire_recursive>
 800c08e:	89ab      	ldrh	r3, [r5, #12]
 800c090:	071b      	lsls	r3, r3, #28
 800c092:	d501      	bpl.n	800c098 <_vfiprintf_r+0x34>
 800c094:	692b      	ldr	r3, [r5, #16]
 800c096:	b99b      	cbnz	r3, 800c0c0 <_vfiprintf_r+0x5c>
 800c098:	4629      	mov	r1, r5
 800c09a:	4630      	mov	r0, r6
 800c09c:	f000 f938 	bl	800c310 <__swsetup_r>
 800c0a0:	b170      	cbz	r0, 800c0c0 <_vfiprintf_r+0x5c>
 800c0a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c0a4:	07dc      	lsls	r4, r3, #31
 800c0a6:	d504      	bpl.n	800c0b2 <_vfiprintf_r+0x4e>
 800c0a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ac:	b01d      	add	sp, #116	@ 0x74
 800c0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0b2:	89ab      	ldrh	r3, [r5, #12]
 800c0b4:	0598      	lsls	r0, r3, #22
 800c0b6:	d4f7      	bmi.n	800c0a8 <_vfiprintf_r+0x44>
 800c0b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c0ba:	f7fc feed 	bl	8008e98 <__retarget_lock_release_recursive>
 800c0be:	e7f3      	b.n	800c0a8 <_vfiprintf_r+0x44>
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0c4:	2320      	movs	r3, #32
 800c0c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c0ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0ce:	2330      	movs	r3, #48	@ 0x30
 800c0d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c280 <_vfiprintf_r+0x21c>
 800c0d4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c0d8:	f04f 0901 	mov.w	r9, #1
 800c0dc:	4623      	mov	r3, r4
 800c0de:	469a      	mov	sl, r3
 800c0e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0e4:	b10a      	cbz	r2, 800c0ea <_vfiprintf_r+0x86>
 800c0e6:	2a25      	cmp	r2, #37	@ 0x25
 800c0e8:	d1f9      	bne.n	800c0de <_vfiprintf_r+0x7a>
 800c0ea:	ebba 0b04 	subs.w	fp, sl, r4
 800c0ee:	d00b      	beq.n	800c108 <_vfiprintf_r+0xa4>
 800c0f0:	465b      	mov	r3, fp
 800c0f2:	4622      	mov	r2, r4
 800c0f4:	4629      	mov	r1, r5
 800c0f6:	4630      	mov	r0, r6
 800c0f8:	f7ff ffa2 	bl	800c040 <__sfputs_r>
 800c0fc:	3001      	adds	r0, #1
 800c0fe:	f000 80a7 	beq.w	800c250 <_vfiprintf_r+0x1ec>
 800c102:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c104:	445a      	add	r2, fp
 800c106:	9209      	str	r2, [sp, #36]	@ 0x24
 800c108:	f89a 3000 	ldrb.w	r3, [sl]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	f000 809f 	beq.w	800c250 <_vfiprintf_r+0x1ec>
 800c112:	2300      	movs	r3, #0
 800c114:	f04f 32ff 	mov.w	r2, #4294967295
 800c118:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c11c:	f10a 0a01 	add.w	sl, sl, #1
 800c120:	9304      	str	r3, [sp, #16]
 800c122:	9307      	str	r3, [sp, #28]
 800c124:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c128:	931a      	str	r3, [sp, #104]	@ 0x68
 800c12a:	4654      	mov	r4, sl
 800c12c:	2205      	movs	r2, #5
 800c12e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c132:	4853      	ldr	r0, [pc, #332]	@ (800c280 <_vfiprintf_r+0x21c>)
 800c134:	f7f4 f854 	bl	80001e0 <memchr>
 800c138:	9a04      	ldr	r2, [sp, #16]
 800c13a:	b9d8      	cbnz	r0, 800c174 <_vfiprintf_r+0x110>
 800c13c:	06d1      	lsls	r1, r2, #27
 800c13e:	bf44      	itt	mi
 800c140:	2320      	movmi	r3, #32
 800c142:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c146:	0713      	lsls	r3, r2, #28
 800c148:	bf44      	itt	mi
 800c14a:	232b      	movmi	r3, #43	@ 0x2b
 800c14c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c150:	f89a 3000 	ldrb.w	r3, [sl]
 800c154:	2b2a      	cmp	r3, #42	@ 0x2a
 800c156:	d015      	beq.n	800c184 <_vfiprintf_r+0x120>
 800c158:	9a07      	ldr	r2, [sp, #28]
 800c15a:	4654      	mov	r4, sl
 800c15c:	2000      	movs	r0, #0
 800c15e:	f04f 0c0a 	mov.w	ip, #10
 800c162:	4621      	mov	r1, r4
 800c164:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c168:	3b30      	subs	r3, #48	@ 0x30
 800c16a:	2b09      	cmp	r3, #9
 800c16c:	d94b      	bls.n	800c206 <_vfiprintf_r+0x1a2>
 800c16e:	b1b0      	cbz	r0, 800c19e <_vfiprintf_r+0x13a>
 800c170:	9207      	str	r2, [sp, #28]
 800c172:	e014      	b.n	800c19e <_vfiprintf_r+0x13a>
 800c174:	eba0 0308 	sub.w	r3, r0, r8
 800c178:	fa09 f303 	lsl.w	r3, r9, r3
 800c17c:	4313      	orrs	r3, r2
 800c17e:	9304      	str	r3, [sp, #16]
 800c180:	46a2      	mov	sl, r4
 800c182:	e7d2      	b.n	800c12a <_vfiprintf_r+0xc6>
 800c184:	9b03      	ldr	r3, [sp, #12]
 800c186:	1d19      	adds	r1, r3, #4
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	9103      	str	r1, [sp, #12]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	bfbb      	ittet	lt
 800c190:	425b      	neglt	r3, r3
 800c192:	f042 0202 	orrlt.w	r2, r2, #2
 800c196:	9307      	strge	r3, [sp, #28]
 800c198:	9307      	strlt	r3, [sp, #28]
 800c19a:	bfb8      	it	lt
 800c19c:	9204      	strlt	r2, [sp, #16]
 800c19e:	7823      	ldrb	r3, [r4, #0]
 800c1a0:	2b2e      	cmp	r3, #46	@ 0x2e
 800c1a2:	d10a      	bne.n	800c1ba <_vfiprintf_r+0x156>
 800c1a4:	7863      	ldrb	r3, [r4, #1]
 800c1a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800c1a8:	d132      	bne.n	800c210 <_vfiprintf_r+0x1ac>
 800c1aa:	9b03      	ldr	r3, [sp, #12]
 800c1ac:	1d1a      	adds	r2, r3, #4
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	9203      	str	r2, [sp, #12]
 800c1b2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c1b6:	3402      	adds	r4, #2
 800c1b8:	9305      	str	r3, [sp, #20]
 800c1ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c290 <_vfiprintf_r+0x22c>
 800c1be:	7821      	ldrb	r1, [r4, #0]
 800c1c0:	2203      	movs	r2, #3
 800c1c2:	4650      	mov	r0, sl
 800c1c4:	f7f4 f80c 	bl	80001e0 <memchr>
 800c1c8:	b138      	cbz	r0, 800c1da <_vfiprintf_r+0x176>
 800c1ca:	9b04      	ldr	r3, [sp, #16]
 800c1cc:	eba0 000a 	sub.w	r0, r0, sl
 800c1d0:	2240      	movs	r2, #64	@ 0x40
 800c1d2:	4082      	lsls	r2, r0
 800c1d4:	4313      	orrs	r3, r2
 800c1d6:	3401      	adds	r4, #1
 800c1d8:	9304      	str	r3, [sp, #16]
 800c1da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1de:	4829      	ldr	r0, [pc, #164]	@ (800c284 <_vfiprintf_r+0x220>)
 800c1e0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c1e4:	2206      	movs	r2, #6
 800c1e6:	f7f3 fffb 	bl	80001e0 <memchr>
 800c1ea:	2800      	cmp	r0, #0
 800c1ec:	d03f      	beq.n	800c26e <_vfiprintf_r+0x20a>
 800c1ee:	4b26      	ldr	r3, [pc, #152]	@ (800c288 <_vfiprintf_r+0x224>)
 800c1f0:	bb1b      	cbnz	r3, 800c23a <_vfiprintf_r+0x1d6>
 800c1f2:	9b03      	ldr	r3, [sp, #12]
 800c1f4:	3307      	adds	r3, #7
 800c1f6:	f023 0307 	bic.w	r3, r3, #7
 800c1fa:	3308      	adds	r3, #8
 800c1fc:	9303      	str	r3, [sp, #12]
 800c1fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c200:	443b      	add	r3, r7
 800c202:	9309      	str	r3, [sp, #36]	@ 0x24
 800c204:	e76a      	b.n	800c0dc <_vfiprintf_r+0x78>
 800c206:	fb0c 3202 	mla	r2, ip, r2, r3
 800c20a:	460c      	mov	r4, r1
 800c20c:	2001      	movs	r0, #1
 800c20e:	e7a8      	b.n	800c162 <_vfiprintf_r+0xfe>
 800c210:	2300      	movs	r3, #0
 800c212:	3401      	adds	r4, #1
 800c214:	9305      	str	r3, [sp, #20]
 800c216:	4619      	mov	r1, r3
 800c218:	f04f 0c0a 	mov.w	ip, #10
 800c21c:	4620      	mov	r0, r4
 800c21e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c222:	3a30      	subs	r2, #48	@ 0x30
 800c224:	2a09      	cmp	r2, #9
 800c226:	d903      	bls.n	800c230 <_vfiprintf_r+0x1cc>
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d0c6      	beq.n	800c1ba <_vfiprintf_r+0x156>
 800c22c:	9105      	str	r1, [sp, #20]
 800c22e:	e7c4      	b.n	800c1ba <_vfiprintf_r+0x156>
 800c230:	fb0c 2101 	mla	r1, ip, r1, r2
 800c234:	4604      	mov	r4, r0
 800c236:	2301      	movs	r3, #1
 800c238:	e7f0      	b.n	800c21c <_vfiprintf_r+0x1b8>
 800c23a:	ab03      	add	r3, sp, #12
 800c23c:	9300      	str	r3, [sp, #0]
 800c23e:	462a      	mov	r2, r5
 800c240:	4b12      	ldr	r3, [pc, #72]	@ (800c28c <_vfiprintf_r+0x228>)
 800c242:	a904      	add	r1, sp, #16
 800c244:	4630      	mov	r0, r6
 800c246:	f7fb febd 	bl	8007fc4 <_printf_float>
 800c24a:	4607      	mov	r7, r0
 800c24c:	1c78      	adds	r0, r7, #1
 800c24e:	d1d6      	bne.n	800c1fe <_vfiprintf_r+0x19a>
 800c250:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c252:	07d9      	lsls	r1, r3, #31
 800c254:	d405      	bmi.n	800c262 <_vfiprintf_r+0x1fe>
 800c256:	89ab      	ldrh	r3, [r5, #12]
 800c258:	059a      	lsls	r2, r3, #22
 800c25a:	d402      	bmi.n	800c262 <_vfiprintf_r+0x1fe>
 800c25c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c25e:	f7fc fe1b 	bl	8008e98 <__retarget_lock_release_recursive>
 800c262:	89ab      	ldrh	r3, [r5, #12]
 800c264:	065b      	lsls	r3, r3, #25
 800c266:	f53f af1f 	bmi.w	800c0a8 <_vfiprintf_r+0x44>
 800c26a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c26c:	e71e      	b.n	800c0ac <_vfiprintf_r+0x48>
 800c26e:	ab03      	add	r3, sp, #12
 800c270:	9300      	str	r3, [sp, #0]
 800c272:	462a      	mov	r2, r5
 800c274:	4b05      	ldr	r3, [pc, #20]	@ (800c28c <_vfiprintf_r+0x228>)
 800c276:	a904      	add	r1, sp, #16
 800c278:	4630      	mov	r0, r6
 800c27a:	f7fc f93b 	bl	80084f4 <_printf_i>
 800c27e:	e7e4      	b.n	800c24a <_vfiprintf_r+0x1e6>
 800c280:	0800c939 	.word	0x0800c939
 800c284:	0800c943 	.word	0x0800c943
 800c288:	08007fc5 	.word	0x08007fc5
 800c28c:	0800c041 	.word	0x0800c041
 800c290:	0800c93f 	.word	0x0800c93f

0800c294 <__swbuf_r>:
 800c294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c296:	460e      	mov	r6, r1
 800c298:	4614      	mov	r4, r2
 800c29a:	4605      	mov	r5, r0
 800c29c:	b118      	cbz	r0, 800c2a6 <__swbuf_r+0x12>
 800c29e:	6a03      	ldr	r3, [r0, #32]
 800c2a0:	b90b      	cbnz	r3, 800c2a6 <__swbuf_r+0x12>
 800c2a2:	f7fc fcdf 	bl	8008c64 <__sinit>
 800c2a6:	69a3      	ldr	r3, [r4, #24]
 800c2a8:	60a3      	str	r3, [r4, #8]
 800c2aa:	89a3      	ldrh	r3, [r4, #12]
 800c2ac:	071a      	lsls	r2, r3, #28
 800c2ae:	d501      	bpl.n	800c2b4 <__swbuf_r+0x20>
 800c2b0:	6923      	ldr	r3, [r4, #16]
 800c2b2:	b943      	cbnz	r3, 800c2c6 <__swbuf_r+0x32>
 800c2b4:	4621      	mov	r1, r4
 800c2b6:	4628      	mov	r0, r5
 800c2b8:	f000 f82a 	bl	800c310 <__swsetup_r>
 800c2bc:	b118      	cbz	r0, 800c2c6 <__swbuf_r+0x32>
 800c2be:	f04f 37ff 	mov.w	r7, #4294967295
 800c2c2:	4638      	mov	r0, r7
 800c2c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2c6:	6823      	ldr	r3, [r4, #0]
 800c2c8:	6922      	ldr	r2, [r4, #16]
 800c2ca:	1a98      	subs	r0, r3, r2
 800c2cc:	6963      	ldr	r3, [r4, #20]
 800c2ce:	b2f6      	uxtb	r6, r6
 800c2d0:	4283      	cmp	r3, r0
 800c2d2:	4637      	mov	r7, r6
 800c2d4:	dc05      	bgt.n	800c2e2 <__swbuf_r+0x4e>
 800c2d6:	4621      	mov	r1, r4
 800c2d8:	4628      	mov	r0, r5
 800c2da:	f7ff fa47 	bl	800b76c <_fflush_r>
 800c2de:	2800      	cmp	r0, #0
 800c2e0:	d1ed      	bne.n	800c2be <__swbuf_r+0x2a>
 800c2e2:	68a3      	ldr	r3, [r4, #8]
 800c2e4:	3b01      	subs	r3, #1
 800c2e6:	60a3      	str	r3, [r4, #8]
 800c2e8:	6823      	ldr	r3, [r4, #0]
 800c2ea:	1c5a      	adds	r2, r3, #1
 800c2ec:	6022      	str	r2, [r4, #0]
 800c2ee:	701e      	strb	r6, [r3, #0]
 800c2f0:	6962      	ldr	r2, [r4, #20]
 800c2f2:	1c43      	adds	r3, r0, #1
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d004      	beq.n	800c302 <__swbuf_r+0x6e>
 800c2f8:	89a3      	ldrh	r3, [r4, #12]
 800c2fa:	07db      	lsls	r3, r3, #31
 800c2fc:	d5e1      	bpl.n	800c2c2 <__swbuf_r+0x2e>
 800c2fe:	2e0a      	cmp	r6, #10
 800c300:	d1df      	bne.n	800c2c2 <__swbuf_r+0x2e>
 800c302:	4621      	mov	r1, r4
 800c304:	4628      	mov	r0, r5
 800c306:	f7ff fa31 	bl	800b76c <_fflush_r>
 800c30a:	2800      	cmp	r0, #0
 800c30c:	d0d9      	beq.n	800c2c2 <__swbuf_r+0x2e>
 800c30e:	e7d6      	b.n	800c2be <__swbuf_r+0x2a>

0800c310 <__swsetup_r>:
 800c310:	b538      	push	{r3, r4, r5, lr}
 800c312:	4b29      	ldr	r3, [pc, #164]	@ (800c3b8 <__swsetup_r+0xa8>)
 800c314:	4605      	mov	r5, r0
 800c316:	6818      	ldr	r0, [r3, #0]
 800c318:	460c      	mov	r4, r1
 800c31a:	b118      	cbz	r0, 800c324 <__swsetup_r+0x14>
 800c31c:	6a03      	ldr	r3, [r0, #32]
 800c31e:	b90b      	cbnz	r3, 800c324 <__swsetup_r+0x14>
 800c320:	f7fc fca0 	bl	8008c64 <__sinit>
 800c324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c328:	0719      	lsls	r1, r3, #28
 800c32a:	d422      	bmi.n	800c372 <__swsetup_r+0x62>
 800c32c:	06da      	lsls	r2, r3, #27
 800c32e:	d407      	bmi.n	800c340 <__swsetup_r+0x30>
 800c330:	2209      	movs	r2, #9
 800c332:	602a      	str	r2, [r5, #0]
 800c334:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c338:	81a3      	strh	r3, [r4, #12]
 800c33a:	f04f 30ff 	mov.w	r0, #4294967295
 800c33e:	e033      	b.n	800c3a8 <__swsetup_r+0x98>
 800c340:	0758      	lsls	r0, r3, #29
 800c342:	d512      	bpl.n	800c36a <__swsetup_r+0x5a>
 800c344:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c346:	b141      	cbz	r1, 800c35a <__swsetup_r+0x4a>
 800c348:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c34c:	4299      	cmp	r1, r3
 800c34e:	d002      	beq.n	800c356 <__swsetup_r+0x46>
 800c350:	4628      	mov	r0, r5
 800c352:	f7fd fc01 	bl	8009b58 <_free_r>
 800c356:	2300      	movs	r3, #0
 800c358:	6363      	str	r3, [r4, #52]	@ 0x34
 800c35a:	89a3      	ldrh	r3, [r4, #12]
 800c35c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c360:	81a3      	strh	r3, [r4, #12]
 800c362:	2300      	movs	r3, #0
 800c364:	6063      	str	r3, [r4, #4]
 800c366:	6923      	ldr	r3, [r4, #16]
 800c368:	6023      	str	r3, [r4, #0]
 800c36a:	89a3      	ldrh	r3, [r4, #12]
 800c36c:	f043 0308 	orr.w	r3, r3, #8
 800c370:	81a3      	strh	r3, [r4, #12]
 800c372:	6923      	ldr	r3, [r4, #16]
 800c374:	b94b      	cbnz	r3, 800c38a <__swsetup_r+0x7a>
 800c376:	89a3      	ldrh	r3, [r4, #12]
 800c378:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c37c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c380:	d003      	beq.n	800c38a <__swsetup_r+0x7a>
 800c382:	4621      	mov	r1, r4
 800c384:	4628      	mov	r0, r5
 800c386:	f000 f883 	bl	800c490 <__smakebuf_r>
 800c38a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c38e:	f013 0201 	ands.w	r2, r3, #1
 800c392:	d00a      	beq.n	800c3aa <__swsetup_r+0x9a>
 800c394:	2200      	movs	r2, #0
 800c396:	60a2      	str	r2, [r4, #8]
 800c398:	6962      	ldr	r2, [r4, #20]
 800c39a:	4252      	negs	r2, r2
 800c39c:	61a2      	str	r2, [r4, #24]
 800c39e:	6922      	ldr	r2, [r4, #16]
 800c3a0:	b942      	cbnz	r2, 800c3b4 <__swsetup_r+0xa4>
 800c3a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c3a6:	d1c5      	bne.n	800c334 <__swsetup_r+0x24>
 800c3a8:	bd38      	pop	{r3, r4, r5, pc}
 800c3aa:	0799      	lsls	r1, r3, #30
 800c3ac:	bf58      	it	pl
 800c3ae:	6962      	ldrpl	r2, [r4, #20]
 800c3b0:	60a2      	str	r2, [r4, #8]
 800c3b2:	e7f4      	b.n	800c39e <__swsetup_r+0x8e>
 800c3b4:	2000      	movs	r0, #0
 800c3b6:	e7f7      	b.n	800c3a8 <__swsetup_r+0x98>
 800c3b8:	2000009c 	.word	0x2000009c

0800c3bc <_raise_r>:
 800c3bc:	291f      	cmp	r1, #31
 800c3be:	b538      	push	{r3, r4, r5, lr}
 800c3c0:	4605      	mov	r5, r0
 800c3c2:	460c      	mov	r4, r1
 800c3c4:	d904      	bls.n	800c3d0 <_raise_r+0x14>
 800c3c6:	2316      	movs	r3, #22
 800c3c8:	6003      	str	r3, [r0, #0]
 800c3ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ce:	bd38      	pop	{r3, r4, r5, pc}
 800c3d0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c3d2:	b112      	cbz	r2, 800c3da <_raise_r+0x1e>
 800c3d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c3d8:	b94b      	cbnz	r3, 800c3ee <_raise_r+0x32>
 800c3da:	4628      	mov	r0, r5
 800c3dc:	f000 f830 	bl	800c440 <_getpid_r>
 800c3e0:	4622      	mov	r2, r4
 800c3e2:	4601      	mov	r1, r0
 800c3e4:	4628      	mov	r0, r5
 800c3e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3ea:	f000 b817 	b.w	800c41c <_kill_r>
 800c3ee:	2b01      	cmp	r3, #1
 800c3f0:	d00a      	beq.n	800c408 <_raise_r+0x4c>
 800c3f2:	1c59      	adds	r1, r3, #1
 800c3f4:	d103      	bne.n	800c3fe <_raise_r+0x42>
 800c3f6:	2316      	movs	r3, #22
 800c3f8:	6003      	str	r3, [r0, #0]
 800c3fa:	2001      	movs	r0, #1
 800c3fc:	e7e7      	b.n	800c3ce <_raise_r+0x12>
 800c3fe:	2100      	movs	r1, #0
 800c400:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c404:	4620      	mov	r0, r4
 800c406:	4798      	blx	r3
 800c408:	2000      	movs	r0, #0
 800c40a:	e7e0      	b.n	800c3ce <_raise_r+0x12>

0800c40c <raise>:
 800c40c:	4b02      	ldr	r3, [pc, #8]	@ (800c418 <raise+0xc>)
 800c40e:	4601      	mov	r1, r0
 800c410:	6818      	ldr	r0, [r3, #0]
 800c412:	f7ff bfd3 	b.w	800c3bc <_raise_r>
 800c416:	bf00      	nop
 800c418:	2000009c 	.word	0x2000009c

0800c41c <_kill_r>:
 800c41c:	b538      	push	{r3, r4, r5, lr}
 800c41e:	4d07      	ldr	r5, [pc, #28]	@ (800c43c <_kill_r+0x20>)
 800c420:	2300      	movs	r3, #0
 800c422:	4604      	mov	r4, r0
 800c424:	4608      	mov	r0, r1
 800c426:	4611      	mov	r1, r2
 800c428:	602b      	str	r3, [r5, #0]
 800c42a:	f7f6 fc87 	bl	8002d3c <_kill>
 800c42e:	1c43      	adds	r3, r0, #1
 800c430:	d102      	bne.n	800c438 <_kill_r+0x1c>
 800c432:	682b      	ldr	r3, [r5, #0]
 800c434:	b103      	cbz	r3, 800c438 <_kill_r+0x1c>
 800c436:	6023      	str	r3, [r4, #0]
 800c438:	bd38      	pop	{r3, r4, r5, pc}
 800c43a:	bf00      	nop
 800c43c:	2000075c 	.word	0x2000075c

0800c440 <_getpid_r>:
 800c440:	f7f6 bc74 	b.w	8002d2c <_getpid>

0800c444 <__swhatbuf_r>:
 800c444:	b570      	push	{r4, r5, r6, lr}
 800c446:	460c      	mov	r4, r1
 800c448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c44c:	2900      	cmp	r1, #0
 800c44e:	b096      	sub	sp, #88	@ 0x58
 800c450:	4615      	mov	r5, r2
 800c452:	461e      	mov	r6, r3
 800c454:	da0d      	bge.n	800c472 <__swhatbuf_r+0x2e>
 800c456:	89a3      	ldrh	r3, [r4, #12]
 800c458:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c45c:	f04f 0100 	mov.w	r1, #0
 800c460:	bf14      	ite	ne
 800c462:	2340      	movne	r3, #64	@ 0x40
 800c464:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c468:	2000      	movs	r0, #0
 800c46a:	6031      	str	r1, [r6, #0]
 800c46c:	602b      	str	r3, [r5, #0]
 800c46e:	b016      	add	sp, #88	@ 0x58
 800c470:	bd70      	pop	{r4, r5, r6, pc}
 800c472:	466a      	mov	r2, sp
 800c474:	f000 f848 	bl	800c508 <_fstat_r>
 800c478:	2800      	cmp	r0, #0
 800c47a:	dbec      	blt.n	800c456 <__swhatbuf_r+0x12>
 800c47c:	9901      	ldr	r1, [sp, #4]
 800c47e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c482:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c486:	4259      	negs	r1, r3
 800c488:	4159      	adcs	r1, r3
 800c48a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c48e:	e7eb      	b.n	800c468 <__swhatbuf_r+0x24>

0800c490 <__smakebuf_r>:
 800c490:	898b      	ldrh	r3, [r1, #12]
 800c492:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c494:	079d      	lsls	r5, r3, #30
 800c496:	4606      	mov	r6, r0
 800c498:	460c      	mov	r4, r1
 800c49a:	d507      	bpl.n	800c4ac <__smakebuf_r+0x1c>
 800c49c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c4a0:	6023      	str	r3, [r4, #0]
 800c4a2:	6123      	str	r3, [r4, #16]
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	6163      	str	r3, [r4, #20]
 800c4a8:	b003      	add	sp, #12
 800c4aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4ac:	ab01      	add	r3, sp, #4
 800c4ae:	466a      	mov	r2, sp
 800c4b0:	f7ff ffc8 	bl	800c444 <__swhatbuf_r>
 800c4b4:	9f00      	ldr	r7, [sp, #0]
 800c4b6:	4605      	mov	r5, r0
 800c4b8:	4639      	mov	r1, r7
 800c4ba:	4630      	mov	r0, r6
 800c4bc:	f7fd fbc0 	bl	8009c40 <_malloc_r>
 800c4c0:	b948      	cbnz	r0, 800c4d6 <__smakebuf_r+0x46>
 800c4c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4c6:	059a      	lsls	r2, r3, #22
 800c4c8:	d4ee      	bmi.n	800c4a8 <__smakebuf_r+0x18>
 800c4ca:	f023 0303 	bic.w	r3, r3, #3
 800c4ce:	f043 0302 	orr.w	r3, r3, #2
 800c4d2:	81a3      	strh	r3, [r4, #12]
 800c4d4:	e7e2      	b.n	800c49c <__smakebuf_r+0xc>
 800c4d6:	89a3      	ldrh	r3, [r4, #12]
 800c4d8:	6020      	str	r0, [r4, #0]
 800c4da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c4de:	81a3      	strh	r3, [r4, #12]
 800c4e0:	9b01      	ldr	r3, [sp, #4]
 800c4e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c4e6:	b15b      	cbz	r3, 800c500 <__smakebuf_r+0x70>
 800c4e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4ec:	4630      	mov	r0, r6
 800c4ee:	f000 f81d 	bl	800c52c <_isatty_r>
 800c4f2:	b128      	cbz	r0, 800c500 <__smakebuf_r+0x70>
 800c4f4:	89a3      	ldrh	r3, [r4, #12]
 800c4f6:	f023 0303 	bic.w	r3, r3, #3
 800c4fa:	f043 0301 	orr.w	r3, r3, #1
 800c4fe:	81a3      	strh	r3, [r4, #12]
 800c500:	89a3      	ldrh	r3, [r4, #12]
 800c502:	431d      	orrs	r5, r3
 800c504:	81a5      	strh	r5, [r4, #12]
 800c506:	e7cf      	b.n	800c4a8 <__smakebuf_r+0x18>

0800c508 <_fstat_r>:
 800c508:	b538      	push	{r3, r4, r5, lr}
 800c50a:	4d07      	ldr	r5, [pc, #28]	@ (800c528 <_fstat_r+0x20>)
 800c50c:	2300      	movs	r3, #0
 800c50e:	4604      	mov	r4, r0
 800c510:	4608      	mov	r0, r1
 800c512:	4611      	mov	r1, r2
 800c514:	602b      	str	r3, [r5, #0]
 800c516:	f7f6 fc71 	bl	8002dfc <_fstat>
 800c51a:	1c43      	adds	r3, r0, #1
 800c51c:	d102      	bne.n	800c524 <_fstat_r+0x1c>
 800c51e:	682b      	ldr	r3, [r5, #0]
 800c520:	b103      	cbz	r3, 800c524 <_fstat_r+0x1c>
 800c522:	6023      	str	r3, [r4, #0]
 800c524:	bd38      	pop	{r3, r4, r5, pc}
 800c526:	bf00      	nop
 800c528:	2000075c 	.word	0x2000075c

0800c52c <_isatty_r>:
 800c52c:	b538      	push	{r3, r4, r5, lr}
 800c52e:	4d06      	ldr	r5, [pc, #24]	@ (800c548 <_isatty_r+0x1c>)
 800c530:	2300      	movs	r3, #0
 800c532:	4604      	mov	r4, r0
 800c534:	4608      	mov	r0, r1
 800c536:	602b      	str	r3, [r5, #0]
 800c538:	f7f6 fc70 	bl	8002e1c <_isatty>
 800c53c:	1c43      	adds	r3, r0, #1
 800c53e:	d102      	bne.n	800c546 <_isatty_r+0x1a>
 800c540:	682b      	ldr	r3, [r5, #0]
 800c542:	b103      	cbz	r3, 800c546 <_isatty_r+0x1a>
 800c544:	6023      	str	r3, [r4, #0]
 800c546:	bd38      	pop	{r3, r4, r5, pc}
 800c548:	2000075c 	.word	0x2000075c

0800c54c <fmod>:
 800c54c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c54e:	ed2d 8b02 	vpush	{d8}
 800c552:	ec57 6b10 	vmov	r6, r7, d0
 800c556:	ec55 4b11 	vmov	r4, r5, d1
 800c55a:	f000 f825 	bl	800c5a8 <__ieee754_fmod>
 800c55e:	4622      	mov	r2, r4
 800c560:	462b      	mov	r3, r5
 800c562:	4630      	mov	r0, r6
 800c564:	4639      	mov	r1, r7
 800c566:	eeb0 8a40 	vmov.f32	s16, s0
 800c56a:	eef0 8a60 	vmov.f32	s17, s1
 800c56e:	f7f4 fae5 	bl	8000b3c <__aeabi_dcmpun>
 800c572:	b990      	cbnz	r0, 800c59a <fmod+0x4e>
 800c574:	2200      	movs	r2, #0
 800c576:	2300      	movs	r3, #0
 800c578:	4620      	mov	r0, r4
 800c57a:	4629      	mov	r1, r5
 800c57c:	f7f4 faac 	bl	8000ad8 <__aeabi_dcmpeq>
 800c580:	b158      	cbz	r0, 800c59a <fmod+0x4e>
 800c582:	f7fc fc5d 	bl	8008e40 <__errno>
 800c586:	2321      	movs	r3, #33	@ 0x21
 800c588:	6003      	str	r3, [r0, #0]
 800c58a:	2200      	movs	r2, #0
 800c58c:	2300      	movs	r3, #0
 800c58e:	4610      	mov	r0, r2
 800c590:	4619      	mov	r1, r3
 800c592:	f7f4 f963 	bl	800085c <__aeabi_ddiv>
 800c596:	ec41 0b18 	vmov	d8, r0, r1
 800c59a:	eeb0 0a48 	vmov.f32	s0, s16
 800c59e:	eef0 0a68 	vmov.f32	s1, s17
 800c5a2:	ecbd 8b02 	vpop	{d8}
 800c5a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c5a8 <__ieee754_fmod>:
 800c5a8:	ec53 2b11 	vmov	r2, r3, d1
 800c5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5b0:	f023 4800 	bic.w	r8, r3, #2147483648	@ 0x80000000
 800c5b4:	ea52 0408 	orrs.w	r4, r2, r8
 800c5b8:	ec51 0b10 	vmov	r0, r1, d0
 800c5bc:	461e      	mov	r6, r3
 800c5be:	4696      	mov	lr, r2
 800c5c0:	4694      	mov	ip, r2
 800c5c2:	d00c      	beq.n	800c5de <__ieee754_fmod+0x36>
 800c5c4:	4d76      	ldr	r5, [pc, #472]	@ (800c7a0 <__ieee754_fmod+0x1f8>)
 800c5c6:	f021 4900 	bic.w	r9, r1, #2147483648	@ 0x80000000
 800c5ca:	45a9      	cmp	r9, r5
 800c5cc:	460c      	mov	r4, r1
 800c5ce:	d806      	bhi.n	800c5de <__ieee754_fmod+0x36>
 800c5d0:	4255      	negs	r5, r2
 800c5d2:	4f74      	ldr	r7, [pc, #464]	@ (800c7a4 <__ieee754_fmod+0x1fc>)
 800c5d4:	4315      	orrs	r5, r2
 800c5d6:	ea48 75d5 	orr.w	r5, r8, r5, lsr #31
 800c5da:	42bd      	cmp	r5, r7
 800c5dc:	d909      	bls.n	800c5f2 <__ieee754_fmod+0x4a>
 800c5de:	f7f4 f813 	bl	8000608 <__aeabi_dmul>
 800c5e2:	4602      	mov	r2, r0
 800c5e4:	460b      	mov	r3, r1
 800c5e6:	f7f4 f939 	bl	800085c <__aeabi_ddiv>
 800c5ea:	ec41 0b10 	vmov	d0, r0, r1
 800c5ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5f2:	45c1      	cmp	r9, r8
 800c5f4:	4682      	mov	sl, r0
 800c5f6:	4607      	mov	r7, r0
 800c5f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800c5fc:	dc09      	bgt.n	800c612 <__ieee754_fmod+0x6a>
 800c5fe:	dbf4      	blt.n	800c5ea <__ieee754_fmod+0x42>
 800c600:	4282      	cmp	r2, r0
 800c602:	d8f2      	bhi.n	800c5ea <__ieee754_fmod+0x42>
 800c604:	d105      	bne.n	800c612 <__ieee754_fmod+0x6a>
 800c606:	4b68      	ldr	r3, [pc, #416]	@ (800c7a8 <__ieee754_fmod+0x200>)
 800c608:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800c60c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c610:	e7eb      	b.n	800c5ea <__ieee754_fmod+0x42>
 800c612:	4964      	ldr	r1, [pc, #400]	@ (800c7a4 <__ieee754_fmod+0x1fc>)
 800c614:	420c      	tst	r4, r1
 800c616:	d148      	bne.n	800c6aa <__ieee754_fmod+0x102>
 800c618:	f1b9 0f00 	cmp.w	r9, #0
 800c61c:	d13d      	bne.n	800c69a <__ieee754_fmod+0xf2>
 800c61e:	4a63      	ldr	r2, [pc, #396]	@ (800c7ac <__ieee754_fmod+0x204>)
 800c620:	4653      	mov	r3, sl
 800c622:	2b00      	cmp	r3, #0
 800c624:	dc36      	bgt.n	800c694 <__ieee754_fmod+0xec>
 800c626:	420e      	tst	r6, r1
 800c628:	d14f      	bne.n	800c6ca <__ieee754_fmod+0x122>
 800c62a:	f1b8 0f00 	cmp.w	r8, #0
 800c62e:	d144      	bne.n	800c6ba <__ieee754_fmod+0x112>
 800c630:	4b5e      	ldr	r3, [pc, #376]	@ (800c7ac <__ieee754_fmod+0x204>)
 800c632:	4671      	mov	r1, lr
 800c634:	2900      	cmp	r1, #0
 800c636:	dc3d      	bgt.n	800c6b4 <__ieee754_fmod+0x10c>
 800c638:	485d      	ldr	r0, [pc, #372]	@ (800c7b0 <__ieee754_fmod+0x208>)
 800c63a:	4282      	cmp	r2, r0
 800c63c:	db4a      	blt.n	800c6d4 <__ieee754_fmod+0x12c>
 800c63e:	f3c4 0113 	ubfx	r1, r4, #0, #20
 800c642:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800c646:	485a      	ldr	r0, [pc, #360]	@ (800c7b0 <__ieee754_fmod+0x208>)
 800c648:	4283      	cmp	r3, r0
 800c64a:	db57      	blt.n	800c6fc <__ieee754_fmod+0x154>
 800c64c:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800c650:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800c654:	1ad0      	subs	r0, r2, r3
 800c656:	1b8a      	subs	r2, r1, r6
 800c658:	eba7 040c 	sub.w	r4, r7, ip
 800c65c:	2800      	cmp	r0, #0
 800c65e:	d162      	bne.n	800c726 <__ieee754_fmod+0x17e>
 800c660:	4567      	cmp	r7, ip
 800c662:	bf38      	it	cc
 800c664:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800c668:	2a00      	cmp	r2, #0
 800c66a:	bfbc      	itt	lt
 800c66c:	463c      	movlt	r4, r7
 800c66e:	460a      	movlt	r2, r1
 800c670:	ea52 0104 	orrs.w	r1, r2, r4
 800c674:	d0c7      	beq.n	800c606 <__ieee754_fmod+0x5e>
 800c676:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
 800c67a:	db69      	blt.n	800c750 <__ieee754_fmod+0x1a8>
 800c67c:	494c      	ldr	r1, [pc, #304]	@ (800c7b0 <__ieee754_fmod+0x208>)
 800c67e:	428b      	cmp	r3, r1
 800c680:	db6c      	blt.n	800c75c <__ieee754_fmod+0x1b4>
 800c682:	f5a2 1280 	sub.w	r2, r2, #1048576	@ 0x100000
 800c686:	432a      	orrs	r2, r5
 800c688:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 800c68c:	ea42 5103 	orr.w	r1, r2, r3, lsl #20
 800c690:	4620      	mov	r0, r4
 800c692:	e7aa      	b.n	800c5ea <__ieee754_fmod+0x42>
 800c694:	3a01      	subs	r2, #1
 800c696:	005b      	lsls	r3, r3, #1
 800c698:	e7c3      	b.n	800c622 <__ieee754_fmod+0x7a>
 800c69a:	4a45      	ldr	r2, [pc, #276]	@ (800c7b0 <__ieee754_fmod+0x208>)
 800c69c:	ea4f 23c9 	mov.w	r3, r9, lsl #11
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	ddc0      	ble.n	800c626 <__ieee754_fmod+0x7e>
 800c6a4:	3a01      	subs	r2, #1
 800c6a6:	005b      	lsls	r3, r3, #1
 800c6a8:	e7fa      	b.n	800c6a0 <__ieee754_fmod+0xf8>
 800c6aa:	ea4f 5229 	mov.w	r2, r9, asr #20
 800c6ae:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800c6b2:	e7b8      	b.n	800c626 <__ieee754_fmod+0x7e>
 800c6b4:	3b01      	subs	r3, #1
 800c6b6:	0049      	lsls	r1, r1, #1
 800c6b8:	e7bc      	b.n	800c634 <__ieee754_fmod+0x8c>
 800c6ba:	4b3d      	ldr	r3, [pc, #244]	@ (800c7b0 <__ieee754_fmod+0x208>)
 800c6bc:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 800c6c0:	2900      	cmp	r1, #0
 800c6c2:	ddb9      	ble.n	800c638 <__ieee754_fmod+0x90>
 800c6c4:	3b01      	subs	r3, #1
 800c6c6:	0049      	lsls	r1, r1, #1
 800c6c8:	e7fa      	b.n	800c6c0 <__ieee754_fmod+0x118>
 800c6ca:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c6ce:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c6d2:	e7b1      	b.n	800c638 <__ieee754_fmod+0x90>
 800c6d4:	1a80      	subs	r0, r0, r2
 800c6d6:	281f      	cmp	r0, #31
 800c6d8:	dc0a      	bgt.n	800c6f0 <__ieee754_fmod+0x148>
 800c6da:	f202 411e 	addw	r1, r2, #1054	@ 0x41e
 800c6de:	fa09 f900 	lsl.w	r9, r9, r0
 800c6e2:	fa2a f101 	lsr.w	r1, sl, r1
 800c6e6:	ea41 0109 	orr.w	r1, r1, r9
 800c6ea:	fa0a f700 	lsl.w	r7, sl, r0
 800c6ee:	e7aa      	b.n	800c646 <__ieee754_fmod+0x9e>
 800c6f0:	4930      	ldr	r1, [pc, #192]	@ (800c7b4 <__ieee754_fmod+0x20c>)
 800c6f2:	1a89      	subs	r1, r1, r2
 800c6f4:	fa0a f101 	lsl.w	r1, sl, r1
 800c6f8:	2700      	movs	r7, #0
 800c6fa:	e7a4      	b.n	800c646 <__ieee754_fmod+0x9e>
 800c6fc:	1ac0      	subs	r0, r0, r3
 800c6fe:	281f      	cmp	r0, #31
 800c700:	dc0a      	bgt.n	800c718 <__ieee754_fmod+0x170>
 800c702:	f203 461e 	addw	r6, r3, #1054	@ 0x41e
 800c706:	fa08 f800 	lsl.w	r8, r8, r0
 800c70a:	fa2e f606 	lsr.w	r6, lr, r6
 800c70e:	ea46 0608 	orr.w	r6, r6, r8
 800c712:	fa0e fc00 	lsl.w	ip, lr, r0
 800c716:	e79d      	b.n	800c654 <__ieee754_fmod+0xac>
 800c718:	4e26      	ldr	r6, [pc, #152]	@ (800c7b4 <__ieee754_fmod+0x20c>)
 800c71a:	1af6      	subs	r6, r6, r3
 800c71c:	fa0e f606 	lsl.w	r6, lr, r6
 800c720:	f04f 0c00 	mov.w	ip, #0
 800c724:	e796      	b.n	800c654 <__ieee754_fmod+0xac>
 800c726:	4567      	cmp	r7, ip
 800c728:	bf38      	it	cc
 800c72a:	f102 32ff 	addcc.w	r2, r2, #4294967295
 800c72e:	2a00      	cmp	r2, #0
 800c730:	da05      	bge.n	800c73e <__ieee754_fmod+0x196>
 800c732:	0ffa      	lsrs	r2, r7, #31
 800c734:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c738:	007f      	lsls	r7, r7, #1
 800c73a:	3801      	subs	r0, #1
 800c73c:	e78b      	b.n	800c656 <__ieee754_fmod+0xae>
 800c73e:	ea52 0104 	orrs.w	r1, r2, r4
 800c742:	f43f af60 	beq.w	800c606 <__ieee754_fmod+0x5e>
 800c746:	0fe1      	lsrs	r1, r4, #31
 800c748:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 800c74c:	0067      	lsls	r7, r4, #1
 800c74e:	e7f4      	b.n	800c73a <__ieee754_fmod+0x192>
 800c750:	0fe1      	lsrs	r1, r4, #31
 800c752:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800c756:	0064      	lsls	r4, r4, #1
 800c758:	3b01      	subs	r3, #1
 800c75a:	e78c      	b.n	800c676 <__ieee754_fmod+0xce>
 800c75c:	1ac9      	subs	r1, r1, r3
 800c75e:	2914      	cmp	r1, #20
 800c760:	dc0a      	bgt.n	800c778 <__ieee754_fmod+0x1d0>
 800c762:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 800c766:	fa02 f303 	lsl.w	r3, r2, r3
 800c76a:	40cc      	lsrs	r4, r1
 800c76c:	4323      	orrs	r3, r4
 800c76e:	410a      	asrs	r2, r1
 800c770:	ea42 0105 	orr.w	r1, r2, r5
 800c774:	4618      	mov	r0, r3
 800c776:	e738      	b.n	800c5ea <__ieee754_fmod+0x42>
 800c778:	291f      	cmp	r1, #31
 800c77a:	dc07      	bgt.n	800c78c <__ieee754_fmod+0x1e4>
 800c77c:	f203 431e 	addw	r3, r3, #1054	@ 0x41e
 800c780:	40cc      	lsrs	r4, r1
 800c782:	fa02 f303 	lsl.w	r3, r2, r3
 800c786:	4323      	orrs	r3, r4
 800c788:	462a      	mov	r2, r5
 800c78a:	e7f1      	b.n	800c770 <__ieee754_fmod+0x1c8>
 800c78c:	f1c3 437f 	rsb	r3, r3, #4278190080	@ 0xff000000
 800c790:	f503 037f 	add.w	r3, r3, #16711680	@ 0xff0000
 800c794:	f503 437b 	add.w	r3, r3, #64256	@ 0xfb00
 800c798:	33e2      	adds	r3, #226	@ 0xe2
 800c79a:	fa42 f303 	asr.w	r3, r2, r3
 800c79e:	e7f3      	b.n	800c788 <__ieee754_fmod+0x1e0>
 800c7a0:	7fefffff 	.word	0x7fefffff
 800c7a4:	7ff00000 	.word	0x7ff00000
 800c7a8:	0800cc48 	.word	0x0800cc48
 800c7ac:	fffffbed 	.word	0xfffffbed
 800c7b0:	fffffc02 	.word	0xfffffc02
 800c7b4:	fffffbe2 	.word	0xfffffbe2

0800c7b8 <_init>:
 800c7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ba:	bf00      	nop
 800c7bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7be:	bc08      	pop	{r3}
 800c7c0:	469e      	mov	lr, r3
 800c7c2:	4770      	bx	lr

0800c7c4 <_fini>:
 800c7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7c6:	bf00      	nop
 800c7c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7ca:	bc08      	pop	{r3}
 800c7cc:	469e      	mov	lr, r3
 800c7ce:	4770      	bx	lr
