IMPORTANT:

Timer utils requires DWT_Init() to be called in main.

*****************************************************************************************************************************************************************************

                                                                                 TO:DO

*****************************************************************************************************************************************************************************

PLEASE FIX NOW
- PID library
- Test OLED DMA write (dosnt work)
- Finish oled library formatting & callback function

HIGH PRIO
- Current sense library
- Serial commander support 2 motors
- Figure out how to link serial commander input data to motor controls

LOW PRIO

*****************************************************************************************************************************************************************************

                                                                                UPDATES

*****************************************************************************************************************************************************************************
21/4/25:
- Added a virtual detent simulation function
- I think there's something wrong with the PID library. Using PID in close loop position does not work for some reason.
- But if I change it to generate a torque proportional to error (which is what the PID lib is supposed to do), it works fine.
- What's wrong??

20/4/25:
- After a looooong break...im back
- Finally completed serial commander interface! Havn't test yet though.
- Learned quite a few things about working with string methods in C, pretty enlightening overall.
- A few potential improvements (thanks chatgpt):
  - typedef enum for serial states, instead of using 1 & 0s
  - Abbreviations & fuzzy matching for some longer commands? 
  - Implement help, or ? command that lists all the possible parameters to adjust
- This library is actually really fun to work on ngl.

7/4/25
- OLED DMA doesn't work, dunno why. Maybe some parts of the library relies on blocking mode to get set some variables first? Will look into it later
- Also a quick benchmark for the OLED driver reveals that it can only run at about ~7Hz???? (Which is EXTREMELY slow)
- Configured both the I2C busses to fast mode (400kHz), seems like both AS5600 & SSD1306 supports fast mode.
- Caculations for how long one OLED update takes:
  - Fast mode (400kHz), each bit takes 1/400k = 2.5us to transmit
  - Data frame consists of START -> ADDR + RW (8-bits) -> ACK(1-bit) -> DATA BYTE(8-bits) -> ACK ...STOP
  - In each ssd1306_UpdateScreen() call:
    - 24x 1-byte I2C command write = 18 x (8 + 1 + 8 + 1) = 432bits
    - 8x 128-byte I2C page data write = 8 x (8 + 9 * 128 + 1) = 9288 bits
  - Total time = (432 + 9288)bits * 2.5us/bit = 24300us
  - It takes 24.3 milliseconds just to update the graphics buffer once!!! And we have not even accounted for all the expensive mem copies to move data into the buffer!!
- Conclusion: This library is very extremely exceptionally tremendously slow.
- I saw that someone implemented what seemed like a state machine within the library to use DMA: 
- https://github.com/afiskon/stm32-ssd1306/pull/93/files#diff-3725f399cda0bb753bab5bbb0f40d5f98e53e3131e1ae4ed1a3c61fdd51842fb
- Maybe I'll try to modify the library to support something similar? 
- Basically add some flags to track DMA completion, and just slowly initiate DMA transactions whenever the bus is ready.
- Also, since most parts of the screen would be static, implement a partial updater function instead of updating all 64x128 pixels every time

6/4/25 
- (Hardware) Added an OLED panel to the driver board! Now I can display some funny stuff
- All the OLEd related code is under the "Drivers" folder, not "Core".
- Added library "oled.h" that handles formatting graphics buffer to print motor parameters
- Still figuring out how to format the params properly to be printed
- Changed OLED library I2C write to use DMA, yet to be tested

5/4/25
- Made the AS5600 init function a little more comprehensive. The function now returns the error (if any) during init instead of just doing nothing when init fails
- Now I see why I2C always fails on init...the function is testing for device prsence when the I2C handle pointer is still NULL. LOL
- Found another bug: originally I used ((magnet_status & MAGNET_OK_MSK) != 1), but this is always true since the magnet ok mask bit is not in position 1.
- Changed the expression to ((magnet_status & MAGNET_OK_MSK) == 0) instead
- Idk what I even changed, but closed loop position works now...?
- Also, a quick speed test reveals that the sensored position control loop now runs at almost 50kHz, compared to the previous 1kHz!!! WTF.

4/4/25
- Added some macros to signify if ADC is enabled. IDK if this was necessary, but some driver boards dont have sampling resistors so maybe.
- Open loop velocity works, but why does closed loop just not work???
- I alr tested the sensor periodic callbacks and it seems to work ok. The phase voltages calculated is also correct; Is it a hardware problem???
- Check the I2C initialization sequences...theres also a issue where the sensor is always not initialized properly. Maybe implement repeated tries to reconnect sensor?

31/3/25
- Realised that the STM32F411 only has 1 advanced control timer? Idk if it really makes a difference in performance tho, might test it some day.
- Tested the AS5600 DMA angle update callbacks, seems to work quite ok. 

30/3/25
- Resolved 43 error (phew!)
- Implemented the BLDCMotorArray to hold pointers to 2 motor objects during initialization. Unused space is NULL by default.
- Changed system time base to systick instead of TIM1. TIM1 triggers the callback function too frequently and interferes with other callback actions
- Implemented fixed-frequency callback functions for I2C and ADC reads
- ADC read works fine I think? Need to test I2C tomorrow 
- ADC read stores the data in a buffer, which is then allocated to motor structs in a seperate callback function BLDC_UpdateMotorADC_DMA
- I2C & ADC conv complete callbacks set the relevant flags in main program to signal data ready
- Until now i have not tested if the motor controls even work like before... honestly not really looking forward to it cos i think its gonna fail big time
- But overall pretty good progress I think!

23/3/25
- Alright actually wtf am I doing. Why did I always have the idea that the structs within the motor struct has to be manually allocated and referenced???
- I can literally just make it such that the motor struct automatically creates those variables!!!!
- Time to update basically the entire library...
- Reverted clarke park transforms back to floating point operations (screw fix16)
- Added EVENT_FLAGS global variable as status indicators for callback events
- Still can't decide on how to implement the sensor DMA read callbacks...

22/3/25
- AS5600 sensor samples at ~6.6kHz (150us sample rate)
- Updated AS5600 library to use DMA to automatically update angle readings at 1kHz, initiated by tim4 interrupt
- How do I pass the sensor dev struct into the callback function?? I think need to create the sensor struct as a global variable or something

16/3/25
- Enabled timer 4 to be used as a time-base for fixed-frequency update events.

8/3/25
- Updates serial commander to handle only 2 motor
- Updated serial commander to hold all parameters in a static struct
- Got this weird problem where the serial event polling function does not execute properly. It can't transmit anything over serial.
- However, placing the uart transmit in the uart receive callback function works fine.
- Why is this the case? I checked that the ADC and USART Rx Tx are all using different DMA streams.
- Perhaps it is due to the ADC continuous DMA requests flooding the DMA controller?

3/3/25
- Reverted git to commit on 1 march since converting LPF and PID to fix16 was a terrible idea.
- No more fix16. I've had enough of it, and floating point operations dosn't seem that much slower anyways.
- Only trig approximations & the SetTorque functions will use fix16 since the number range they handle are quite predictable and fits well in the Q16.16 precision.
- According to some guy on reddit, I am using fixed point arithmatics wrong. IDK bro. but probably.
- Idk why im even spending so much time on optimizing the library when it's not even half complete; i really need to cure this habit
- Configured 4x ADCs to read in DMA mode. Seems to work quite well.
- Really need to work on communicating with the sensor using DMA or interrupts intead of blocking I2C

1/3/25
- Changed _normalizeAngle() function to operate on fix16 type instead of floats. Also I just knew fmod() means "float-mod" lol.
- Updated SetTorque() function to operate on fix16 type variables.
- Idk whats going on man, the motor just dosn't work again. It keeps vibrating and doing nothing!!!
- I checked all the phase voltages, shaft & electrical angle generation as well as PWM values, nothing seems wrong!!! Then why no work!!!!
- Tomorrow will be a good day and all the bugs will magically disappear
- Might be a hardware problem? But it worked fine before???

28/2/25
- Implemented Q16.16 for sine approximations. Works pretty well! Running a test calculating the sine values for [0, 2pi] with a 0.01 step resolution (628 calculations) yields 
  the following results: sin() -> 17629us, _sin() -> 4977us. About a 3.5x improvement in performance.
- Absolute mind fck trying to debug all those binary operations tho. 
- And now I have to implement this in all the other libraries...
- Remember, the trig approximation functions accepts a fix16_t, NOT FLOATS. And returns a fix16_t too.
- Also, chatgpt is legit quite stupid sometimes. Today was one of those rare occasions where I am the one pointing out issues in his code.

27/2/25
- Starting to think that it's probably better if the library is just optimised for 2 motors, instead of abstracting it for any number of motors. Who is even gonna control 
  so many motors simultaneously.
- Chatgpt just told me that SimpleFOC runs at 10kHz. That is insane. How is my program running on a much more capable microcontroller only reaching 1kHz??
- Implemented a very basic fixed point arithmetics library. Kudos to 	
- Realized that fixed points multiplications are exceptionally prone to overflowing, and the max square it can calculate is only +-127 * +-127.
- It's quite interesting though. Uses a ton of bitwise tricks to perform those calculations extremely fast.

23/2/25
- Set up a serial commander interface using UART. The serial commander uses the ReceiveToIdle interrupt: When the processor detects that the data line 
  has become idle, it fires the interrupt & I use the callback function to set a data in flag.
- The main SerialCommander_EventUpdate() function looks for the flag and parses the data stored in the buffer if it is set.
- But how do I use this data to actually control the motor?
- Also, I think it's probably better to just setup 2 different functions for m0 and m1. Right now only 1 motor could be attached to the serial commander.
- Set up 12-bit ADCs in IOC for current sensing

21/2/25
- Huge mistake, GG. Gotto rethink the entire motor initialization function to see if we should just substitute with a macro instead.
- Thanks chatgpt. You are a real one for catching this mistake. Please spare me when you take over the world one day. I swear im smarter than this
- Huge improvements all around today. Fixed the major issue of struct initialization.
- A macro now handles the creation of all the sub-struct on the stack in main() AND calling the init function with the proper params.
- Tested PID controller, Low pass filter etc, I think it all works :)
- Renamed some structs to unify naming scheme & reduce redundant names
- Right now the control loop is already running at only around 1kHz. Is that good? Feels like alot of things could probably be optimised.
- Super proud of the progress today!!!

19/2/25
- Seperated motor hardware initialization functions & control functions into foc_hw.h and foc_core.h respectively
- Disabled USBD for now; not really useful i think
- Added a AS5600_GetVelocity() function to the AS5600 library (also uses DWT timer; remember to initialize!)
- FOUND THE PROBLEM WITH OPEN LOOP VELOCITY ISSUE :: THE PREVIOUS TIMESTAMP SHOULD NOT BE UPDATED USING MICROS()!!
- Since I was calling micros() and updating the previous angle at the end of the loop, the time step between function calls are erroneously small & hence 
  caused the super slow rotations.
- Implemented low pass filter library
- Implemented PID library with configurable modes (P, PI, PID)

18/2/25
- Changed resolution of PWM to a weird 9-bit
- Perhaps some miracle just happened, but the stutters mentioned previously seems to have fixed itself
- The code works... but why?
- Also, when debugging, it seems like the velocity open loop control actually runs every 5 microseconds = 200kHz. Which is mad impressive.
- The open loop velocity calculations definitely has some issues. But idk what or where. The motor rotates wayyy slower than expected.

17/2/25
- Removed electrical angle parameter from var_t struct. Don't think its that useful
- Optimized auto calibrate function to now perform repeat taking the mechanical angle 3 times and using the average
- Renamed Motor struct to BLDCMotor for clarity (future implementation of stepper drivers, maybe)
- Something seems wrong about the AS5600_ReadNormalizedAngle function :O I think it ignores zeroing and reads a different angle than ReadAngle()?
- I think that is due to ReadAngle being cumulative while ReadNormalized angle simply converts the raw angle to radians?
- But anyways I'm simply just not using it ReadNormalized i think, the bug can become a feature.
- Closed loop position control works. let's gooo!!!!
- Weird problem where the motor stutters ALOT and just freaks out at certain angles. howcome?
- Changed PWM to central-aligned mode, hopefully it's better.

15/2/25
- Don't forget to call DWT_Init() !!! If timer not initialized, the micros() function does nothing.
- Open loop velocity control seems to have some bugs... Maybe the angle generation has some issues?
- High pitch squeaking noise at lower rpms
- Adjust PWM prescalar & try?
- Unified sensor & motor initialization method: Both structs to be created then passed into initialization functions
- Messing with AutoCalibration lead to the discovery of some bugs with AS5600 sensor library! The ZeroAngle() function does not set the 
  previous_angle to 0, so the reading after zeroing was, in fact, not 0. lol
- Also forgot to take the absolute of mechanical angle delta. Which cause the pole pair calculations to be negative sometimes.
- Maybe make the auto-calibration procedure take multiple repeated sensor readings to approximate the pole pairs instead of just 1? Also the 
  calculation of pole pair number could be more graceful, such as adding a rounding function instead of just truncating by typecasting.
  
14/2/25
- New STM32F411CEU6 is here!! And it fuking works!!
- Ported libraries over to new project (can't seem to find a way to update the target MCU in previous project)
- This chip runs at 96MHz & has USB DFU! Also no more fuking annoying boot-pin jumpers
- Tested AS5600 I2C read, seems to work fine.

9/2/25
- Removed Kv parameter from Motor struct
- Tried to implement an auto calibrate function to find the pole pairs & sensor direction automatically
- I have no fucking idea what the problem is, but seems like the I2C dosn't work??
- Trying to print the encoder values just causes the program to freeze
- And this fucking cheap-ass stm32 board can't be debugged!!!!!

5/2/25
- New PWM freq: 72Mhz / 256 / 8 = 35kHz (approx)

1/2/25
- PWM problem? Motor jiterry motion, and changing PWM duty cycle seems to have a pretty significant effect.
- Lower PWM frequency by setting prescalar.

25/1/25
- Renamed motor struct back to Motor (instead of Motor_t)
- Renamed SetPhaseVoltages to SetTorque
- Finished close loop position control function, yet to test

23/1/25:
- Updates naming of stucts to end with _t
- Added ReadRawAngle & ReadNormalizedAngle to AS5600.h
- Started on close loop position control function

20/1/25:
- Removed macros to set up motor structs; replaced with a function creating static structs on the stack.
- Motor & sensor object has to be manually created now, in main().


*****************************************************************************************************************************************************************************

                                                                             THINGS LEARNT

*****************************************************************************************************************************************************************************
28/2/25:
- Dividing by powers of 2 and multiplying by powers of 2 are equal to just bit-shifting by the power, but for floats some precision is lost by bit-shifting.
- ChatGPT actually makes some pretty retarded mistakes sometimes, even in things that its supposed to be super good at. So just double check with own logic next time.

27/2/25:
- Macros are useful, but should be replaced with inlined functions if type checking is important. Macros are purely text substitution & may prove quite difficult to debug
- The int type on an Arduino is 16-bit by default, not 32-bit. Multiplying any value by (1 << 16) causes it to be multiplied by 0 since it overflows.

21/2/25:
- Don't create static structs for initialization functions that should initialize different instances of something...
  Those static structs will just persist throughout init calls & make everything share the same params.
- Don't try to be cool and use underscores or double underscores when naming stuff. These naming conventions are reserved in the global scope for the implementation.
- As in, alot of system-based functions & variables are prefixed with single or double underscores. Using them in your code might cause conflicts.

19/2/25:
- Don't update the previous timestamp at the end of the loop - all the time elapsed within the loop will be deducted which leads to a really small time difference across calls.\
- If we include library "A" in main.c, which already includes libraries "B" and "C", all prototypes in libraries "B" and "C" are also accessible in main.c.

16/2/25:
- Live expressions debugging! Useful for monitoring variable changes in real time
- Also, I legit never knew that you could run the full program with the STLink still attached lmao. Been wasting quite abit of time\

9/2/25:
- Fucking china stm32 boards dont work man. This shit a pain in the ass to debug

5/2/25:
- Finally found the problem!!! Apparently PWM frequency & resolution is quite significant. Changed the ARR to 256 (8-bit PWM) and prescalar to 8

24/1/25:
- Sine approximation function in timer_utils.c does not work as intended -- small angles always yield "0" as the output. Caused by type-casting error

20/1/25: 
- Remember to change header file funcion definitions after updating source file.

- When accessing a member directly from a struct variable, use the dot (.) operator. Only use arrow (->) when accessing from struct pointer.

- Motor struct timer updated to TIM_HandleTypeDef* pointer 

- Static inline functions defined in the source file are only accessible from within the file.
  Similarly, such functions should be fully defined in the header file (.h) as the compiler does not search for it's definition elsewhere.
  Hence, only small, short functions should be inlined.
  
- Static variables & structs could be created in functions and referenced even after function exit since they persist for the lifetime of the program.

*****************************************************************************************************************************************************************************

                                                                             PIN CONFIG

*****************************************************************************************************************************************************************************

### PWM Timers ###

A5    TIM2_CH1
B3    TIM2_CH2
A2    TIM2_CH3

B4    TIM3_CH1
B5    TIM3_CH2
B0    TIM3_CH3

### I2C/UART ###

B6    SCL_1
B7    SDA_1

B10   SCL_2
B3    SDA_2

A10 USART1_RX 
A09 USART1_TX

### IO ###

C13   GPIO_OUT (LED)

A0  ADC1_IN 0
A1  ADC1_IN 1
A3  ADC1_IN 3
A4  ADC1_IN 4



