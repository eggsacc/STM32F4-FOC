1) In foc.c->MotorInit(): zero angle initialized using attached as5600 sensor.
   Implement as5600 object attached to each motor instance (unique I2C handler address)
   Check sensor connected and store zero startup angle.

2) HAL_GetTick() returns number of ticks since last reboot/startup, with each tick being 1ms.

3) Since timer ticks are unsigned int, there is no need to handle overflow since now - prev if now has overflowed will automatically correct.

4) Timer utils requires DWT_Init() to be called in main.

5) Added open loop velocity control. Function generates and updates the motor->params->el_angle param in each iteration based on the time elapsed and desired velocity.

6) Timer struct (htimx) added to Motor struct
   - NOTE: When accessing a member directly from a struct variable, use the dot (.) operator. Only use arrow (->) when accessing from struct pointer.
   - BUGFIX: motor->TIM_HandleTypeDef->Instance->CCR1 dosnt work. Must be TIM_HandleTypeDef.Instance->CCR1
   
   
*****************************************************************************************************************************************************************************

                                                                                 TO:DO

*****************************************************************************************************************************************************************************

PLEASE FIX NOW
- nothing!! :)
    
HIGH PRIO
- Learn interrupts, attach interrupt to serial rx callback.
- Implement serial commander function.
- Learn how to use swd printf() - https://www.youtube.com/watch?v=sPzQ5CniWtw

LOW PRIO
- Implement time check for function calls to run everything at ~1kHz
*****************************************************************************************************************************************************************************

                                                                                UPDATES

*****************************************************************************************************************************************************************************
20/1/25:
- Removed macros to set up motor structs; replaced with a function creating static structs on the stack.
- Motor & sensor object has to be manually created now, in main().

23/1/25:
- Updates naming of stucts to end with _t
- Added ReadRawAngle & ReadNormalizedAngle to AS5600.h
- Started on close loop position control function

25/1/25
- Renamed motor struct back to Motor (instead of Motor_t)
- Renamed SetPhaseVoltages to SetTorque
- Finished close loop position control function, yet to test

1/2/25
- PWM problem? Motor jiterry motion, and changing PWM duty cycle seems to have a pretty significant effect.
- Lower PWM frequency by setting prescalar.

5/2/25
- New PWM freq: 72Mhz / 256 / 8 = 35kHz (approx)

9/2/25
- Removed Kv parameter from Motor struct
- Tried to implement an auto calibrate function to find the pole pairs & sensor direction automatically
- I have no fucking idea what the problem is, but seems like the I2C dosn't work??
- Trying to print the encoder values just causes the program to freeze
- And this fucking cheap-ass stm32 board can't be debugged!!!!!

14/2/25
- New STM32F411CEU6 is here!! And it fuking works!!
- Ported libraries over to new project (can't seem to find a way to update the target MCU in previous project)
- This chip runs at 96MHz & has USB DFU! Also no more fuking annoying boot-pin jumpers
- Tested AS5600 I2C read, seems to work fine.

15/2/25
- Don't forget to call DWT_Init() !!! If timer not initialized, the micros() function does nothing.
- Open loop velocity control seems to have some bugs... Maybe the angle generation has some issues?
- High pitch squeaking noise at lower rpms
- Adjust PWM prescalar & try?
- Unified sensor & motor initialization method: Both structs to be created then passed into initialization functions
- Messing with AutoCalibration lead to the discovery of some bugs with AS5600 sensor library! The ZeroAngle() function does not set the 
  previous_angle to 0, so the reading after zeroing was, in fact, not 0. lol
- Also forgot to take the absolute of mechanical angle delta. Which cause the pole pair calculations to be negative sometimes.
- Maybe make the auto-calibration procedure take multiple repeated sensor readings to approximate the pole pairs instead of just 1? Also the 
  calculation of pole pair number could be more graceful, such as adding a rounding function instead of just truncating by typecasting.

17/2/25
- Removed electrical angle parameter from var_t struct. Don't think its that useful
- Optimized auto calibrate function to now perform repeat taking the mechanical angle 3 times and using the average
- Renamed Motor struct to BLDCMotor for clarity (future implementation of stepper drivers, maybe)
- Something seems wrong about the AS5600_ReadNormalizedAngle function :O I think it ignores zeroing and reads a different angle than ReadAngle()?
- I think that is due to ReadAngle being cumulative while ReadNormalized angle simply converts the raw angle to radians?
- But anyways I'm simply just not using it ReadNormalized i think, the bug can become a feature.
- Closed loop position control works. let's gooo!!!!
- Weird problem where the motor stutters ALOT and just freaks out at certain angles. howcome?
- Changed PWM to central-aligned mode, hopefully it's better.

18/2/25
- Changed resolution of PWM to a weird 9-bit
- Perhaps some miracle just happened, but the stutters mentioned previously seems to have fixed itself
- The code works... but why?
- Also, when debugging, it seems like the velocity open loop control actually runs every 5 microseconds = 200kHz. Which is mad impressive.
- The open loop velocity calculations definitely has some issues. But idk what or where. The motor rotates wayyy slower than expected.

19/2/25
- Seperated motor hardware initialization functions & control functions into foc_hw.h and foc_core.h respectively
- Disabled USBD for now; not really useful i think
- Added a AS5600_GetVelocity() function to the AS5600 library (also uses DWT timer; remember to initialize!)
- FOUND THE PROBLEM WITH OPEN LOOP VELOCITY ISSUE :: THE PREVIOUS TIMESTAMP SHOULD NOT BE UPDATED USING MICROS()!!
- Since I was calling micros() and updating the previous angle at the end of the loop, the time step between function calls are erroneously small & hence 
  caused the super slow rotations.
- Implemented low pass filter library
- Implemented PID library with configurable modes (P, PI, PID)

21/2/25
- Huge mistake, GG. Gotto rethink the entire motor initialization function to see if we should just substitute with a macro instead.
- Thanks chatgpt. You are a real one for catching this mistake. Please spare me when you take over the world one day. I swear im smarter than this
- Huge improvements all around today. Fixed the major issue of struct initialization.
- A macro now handles the creation of all the sub-struct on the stack in main() AND calling the init function with the proper params.
- Tested PID controller, Low pass filter etc, I think it all works :)
- Renamed some structs to unify naming scheme & reduce redundant names
- Right now the control loop is already running at only around 1kHz. Is that good? Feels like alot of things could probably be optimised.
- Super proud of the progress today!!!

*****************************************************************************************************************************************************************************

                                                                             THINGS LEARNT

*****************************************************************************************************************************************************************************
21/2/25:
- Don't create static structs for initialization functions that should initialize different instances of something...
  Those static structs will just persist throughout init calls & make everything share the same params.
- Don't try to be cool and use underscores or double underscores when naming stuff. These naming conventions are reserved in the global scope for the implementation.
- As in, alot of system-based functions & variables are prefixed with single or double underscores. Using them in your code might cause conflicts.

19/2/25:
- Don't update the previous timestamp at the end of the loop - all the time elapsed within the loop will be deducted which leads to a really small time difference across calls.\
- If we include library "A" in main.c, which already includes libraries "B" and "C", all prototypes in libraries "B" and "C" are also accessible in main.c.

16/2/25:
- Live expressions debugging! Useful for monitoring variable changes in real time
- Also, I legit never knew that you could run the full program with the STLink still attached lmao. Been wasting quite abit of time\

9/2/25:
- Fucking china stm32 boards dont work man. This shit a pain in the ass to debug

5/2/25:
- Finally found the problem!!! Apparently PWM frequency & resolution is quite significant. Changed the ARR to 256 (8-bit PWM) and prescalar to 8

24/1/25:
- Sine approximation function in timer_utils.c does not work as intended -- small angles always yield "0" as the output. Caused by type-casting error

20/1/25: 
- Remember to change header file funcion definitions after updating source file.

- When accessing a member directly from a struct variable, use the dot (.) operator. Only use arrow (->) when accessing from struct pointer.

- Motor struct timer updated to TIM_HandleTypeDef* pointer 

- Static inline functions defined in the source file are only accessible from within the file.
  Similarly, such functions should be fully defined in the header file (.h) as the compiler does not search for it's definition elsewhere.
  Hence, only small, short functions should be inlined.
  
- Static variables & structs could be created in functions and referenced even after function exit since they persist for the lifetime of the program.

*****************************************************************************************************************************************************************************

                                                                             PIN CONFIG

*****************************************************************************************************************************************************************************

A0    TIM2_CH1
A1    TIM2_CH2
A2    TIM2_CH3

A6    TIM3_CH1
A7    TIM3_CH2
B0    TIM3_CH3

B6    SCL_1
B7    SDA_1

B10   SCL_2
B3    SDA_2

C13   GPIO_OUT (LED)

PWM frequency: 96MHz / 256(8-bit) / 10 (prescalar) = 37.5kHz 

